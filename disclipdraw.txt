
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	5a                   	pop    edx
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	50                   	push   eax
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	59                   	pop    ecx
1000006f:	89 c6                	mov    esi,eax
10000071:	5f                   	pop    edi
10000072:	53                   	push   ebx
10000073:	50                   	push   eax
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	6a 40                	push   0x40
1000009b:	e8 fc ff ff ff       	call   1000009c <NiMain(void*)+0x9c>	1000009c: R_386_PC32	malloc
100000a0:	5a                   	pop    edx
100000a1:	89 c5                	mov    ebp,eax
100000a3:	59                   	pop    ecx
100000a4:	6a 01                	push   0x1
100000a6:	6a 01                	push   0x1
100000a8:	6a 00                	push   0x0
100000aa:	6a 00                	push   0x0
100000ac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ae: R_386_32	ctxt
100000b2:	50                   	push   eax
100000b3:	e8 fc ff ff ff       	call   100000b4 <NiMain(void*)+0xb4>	100000b4: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000b8:	83 c4 14             	add    esp,0x14
100000bb:	6a 40                	push   0x40
100000bd:	e8 fc ff ff ff       	call   100000be <NiMain(void*)+0xbe>	100000be: R_386_PC32	malloc
100000c2:	5b                   	pop    ebx
100000c3:	89 c7                	mov    edi,eax
100000c5:	5e                   	pop    esi
100000c6:	68 40 01 00 00       	push   0x140
100000cb:	68 90 01 00 00       	push   0x190
100000d0:	6a 32                	push   0x32
100000d2:	6a 32                	push   0x32
100000d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d6: R_386_32	ctxt
100000da:	50                   	push   eax
100000db:	e8 fc ff ff ff       	call   100000dc <NiMain(void*)+0xdc>	100000dc: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e0:	83 c4 14             	add    esp,0x14
100000e3:	6a 40                	push   0x40
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	malloc
100000ea:	5a                   	pop    edx
100000eb:	89 c6                	mov    esi,eax
100000ed:	59                   	pop    ecx
100000ee:	68 7c 01 00 00       	push   0x17c
100000f3:	68 f4 01 00 00       	push   0x1f4
100000f8:	68 96 00 00 00       	push   0x96
100000fd:	68 c8 00 00 00       	push   0xc8
10000102:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000104: R_386_32	ctxt
10000108:	50                   	push   eax
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
1000010e:	83 c4 14             	add    esp,0x14
10000111:	6a 40                	push   0x40
10000113:	e8 fc ff ff ff       	call   10000114 <NiMain(void*)+0x114>	10000114: R_386_PC32	malloc
10000118:	5a                   	pop    edx
10000119:	89 c3                	mov    ebx,eax
1000011b:	59                   	pop    ecx
1000011c:	68 af 00 00 00       	push   0xaf
10000121:	68 0e 01 00 00       	push   0x10e
10000126:	68 90 01 00 00       	push   0x190
1000012b:	6a 7d                	push   0x7d
1000012d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012f: R_386_32	ctxt
10000133:	50                   	push   eax
10000134:	e8 fc ff ff ff       	call   10000135 <NiMain(void*)+0x135>	10000135: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000139:	83 c4 18             	add    esp,0x18
1000013c:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
10000140:	55                   	push   ebp
10000141:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000143: R_386_32	desktop
10000147:	e8 fc ff ff ff       	call   10000148 <NiMain(void*)+0x148>	10000148: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000014c:	5d                   	pop    ebp
1000014d:	58                   	pop    eax
1000014e:	57                   	push   edi
1000014f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000151: R_386_32	desktop
10000155:	e8 fc ff ff ff       	call   10000156 <NiMain(void*)+0x156>	10000156: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015a:	58                   	pop    eax
1000015b:	5a                   	pop    edx
1000015c:	56                   	push   esi
1000015d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000015f: R_386_32	desktop
10000163:	e8 fc ff ff ff       	call   10000164 <NiMain(void*)+0x164>	10000164: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000168:	59                   	pop    ecx
10000169:	5e                   	pop    esi
1000016a:	53                   	push   ebx
1000016b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016d: R_386_32	desktop
10000171:	e8 fc ff ff ff       	call   10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000176:	5f                   	pop    edi
10000177:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000179: R_386_32	desktop
1000017d:	e8 fc ff ff ff       	call   1000017e <NiMain(void*)+0x17e>	1000017e: R_386_PC32	NIDesktop::completeRefresh()
10000182:	a1 00 00 00 00       	mov    eax,ds:0x0	10000183: R_386_32	irqDisableCounter
10000187:	48                   	dec    eax
10000188:	83 c4 10             	add    esp,0x10
1000018b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000018c: R_386_32	irqDisableCounter
10000190:	85 c0                	test   eax,eax
10000192:	75 01                	jne    10000195 <NiMain(void*)+0x195>
10000194:	fb                   	sti    
10000195:	83 ec 0c             	sub    esp,0xc
10000198:	68 24 07 00 00       	push   0x724
1000019d:	e8 fc ff ff ff       	call   1000019e <NiMain(void*)+0x19e>	1000019e: R_386_PC32	malloc
100001a2:	6a 00                	push   0x0
100001a4:	89 c3                	mov    ebx,eax
100001a6:	6a 00                	push   0x0
100001a8:	68 0d 51 00 10       	push   0x1000510d	100001a9: R_386_32	.text
100001ad:	50                   	push   eax
100001ae:	e8 fc ff ff ff       	call   100001af <NiMain(void*)+0x1af>	100001af: R_386_PC32	Process::Process(char const*, Process*, char**)
100001b3:	83 c4 14             	add    esp,0x14
100001b6:	53                   	push   ebx
100001b7:	e8 fc ff ff ff       	call   100001b8 <NiMain(void*)+0x1b8>	100001b8: R_386_PC32	Process::createUserThread()
100001bc:	83 c4 10             	add    esp,0x10
100001bf:	83 ec 0c             	sub    esp,0xc
100001c2:	6a 02                	push   0x2
100001c4:	e8 fc ff ff ff       	call   100001c5 <NiMain(void*)+0x1c5>	100001c5: R_386_PC32	blockTask(TaskState)
100001c9:	eb f1                	jmp    100001bc <NiMain(void*)+0x1bc>
100001cb:	90                   	nop

100001cc <NiBegin(void*)>:
100001cc:	83 ec 18             	sub    esp,0x18
100001cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001d3:	e8 fc ff ff ff       	call   100001d4 <NiBegin(void*)+0x8>	100001d4: R_386_PC32	NiMain(void*)

100001d8 <_ssfn__bitreverse16>:
100001d8:	89 c2                	mov    edx,eax
100001da:	01 c0                	add    eax,eax
100001dc:	d1 fa                	sar    edx,1
100001de:	25 aa aa 00 00       	and    eax,0xaaaa
100001e3:	81 e2 55 55 00 00    	and    edx,0x5555
100001e9:	09 c2                	or     edx,eax
100001eb:	89 d0                	mov    eax,edx
100001ed:	c1 e2 02             	shl    edx,0x2
100001f0:	c1 f8 02             	sar    eax,0x2
100001f3:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001f9:	25 33 33 00 00       	and    eax,0x3333
100001fe:	09 d0                	or     eax,edx
10000200:	89 c2                	mov    edx,eax
10000202:	c1 e0 04             	shl    eax,0x4
10000205:	c1 fa 04             	sar    edx,0x4
10000208:	25 f0 f0 00 00       	and    eax,0xf0f0
1000020d:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10000213:	09 c2                	or     edx,eax
10000215:	89 d1                	mov    ecx,edx
10000217:	c1 e2 08             	shl    edx,0x8
1000021a:	c1 f9 08             	sar    ecx,0x8
1000021d:	0f b7 c2             	movzx  eax,dx
10000220:	09 c8                	or     eax,ecx
10000222:	c3                   	ret    

10000223 <_ssfn__zhuffman_decode>:
10000223:	55                   	push   ebp
10000224:	57                   	push   edi
10000225:	56                   	push   esi
10000226:	53                   	push   ebx
10000227:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000022b:	7f 1d                	jg     1000024a <_ssfn__zhuffman_decode+0x27>
1000022d:	8b 18                	mov    ebx,DWORD PTR [eax]
1000022f:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000232:	89 08                	mov    DWORD PTR [eax],ecx
10000234:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000237:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000023a:	d3 e3                	shl    ebx,cl
1000023c:	83 c1 08             	add    ecx,0x8
1000023f:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000242:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000245:	83 f9 18             	cmp    ecx,0x18
10000248:	eb e1                	jmp    1000022b <_ssfn__zhuffman_decode+0x8>
1000024a:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
1000024d:	89 f9                	mov    ecx,edi
1000024f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000255:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000259:	89 cb                	mov    ebx,ecx
1000025b:	85 c9                	test   ecx,ecx
1000025d:	74 15                	je     10000274 <_ssfn__zhuffman_decode+0x51>
1000025f:	c1 f9 09             	sar    ecx,0x9
10000262:	89 da                	mov    edx,ebx
10000264:	d3 ef                	shr    edi,cl
10000266:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000269:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
1000026c:	81 e2 ff 01 00 00    	and    edx,0x1ff
10000272:	eb 58                	jmp    100002cc <_ssfn__zhuffman_decode+0xa9>
10000274:	89 d5                	mov    ebp,edx
10000276:	89 c3                	mov    ebx,eax
10000278:	be 0a 00 00 00       	mov    esi,0xa
1000027d:	89 f8                	mov    eax,edi
1000027f:	e8 54 ff ff ff       	call   100001d8 <_ssfn__bitreverse16>
10000284:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
1000028b:	7c 03                	jl     10000290 <_ssfn__zhuffman_decode+0x6d>
1000028d:	46                   	inc    esi
1000028e:	eb f4                	jmp    10000284 <_ssfn__zhuffman_decode+0x61>
10000290:	83 ca ff             	or     edx,0xffffffff
10000293:	83 fe 10             	cmp    esi,0x10
10000296:	74 34                	je     100002cc <_ssfn__zhuffman_decode+0xa9>
10000298:	8d 14 36             	lea    edx,[esi+esi*1]
1000029b:	b9 10 00 00 00       	mov    ecx,0x10
100002a0:	01 ea                	add    edx,ebp
100002a2:	29 f1                	sub    ecx,esi
100002a4:	d3 f8                	sar    eax,cl
100002a6:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100002ad:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100002b4:	29 c8                	sub    eax,ecx
100002b6:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100002b9:	89 f1                	mov    ecx,esi
100002bb:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100002c2:	d3 ef                	shr    edi,cl
100002c4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100002c7:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002cc:	5b                   	pop    ebx
100002cd:	89 d0                	mov    eax,edx
100002cf:	5e                   	pop    esi
100002d0:	5f                   	pop    edi
100002d1:	5d                   	pop    ebp
100002d2:	c3                   	ret    

100002d3 <_ssfn__zexpand>:
100002d3:	55                   	push   ebp
100002d4:	57                   	push   edi
100002d5:	56                   	push   esi
100002d6:	53                   	push   ebx
100002d7:	83 ec 0c             	sub    esp,0xc
100002da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002dd:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002e0:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002e3:	29 f9                	sub    ecx,edi
100002e5:	83 f9 08             	cmp    ecx,0x8
100002e8:	74 04                	je     100002ee <_ssfn__zexpand+0x1b>
100002ea:	31 c0                	xor    eax,eax
100002ec:	eb 3c                	jmp    1000032a <_ssfn__zexpand+0x57>
100002ee:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002f1:	75 f7                	jne    100002ea <_ssfn__zexpand+0x17>
100002f3:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002f7:	75 f1                	jne    100002ea <_ssfn__zexpand+0x17>
100002f9:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002fd:	75 eb                	jne    100002ea <_ssfn__zexpand+0x17>
100002ff:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
10000302:	89 c3                	mov    ebx,eax
10000304:	89 d6                	mov    esi,edx
10000306:	50                   	push   eax
10000307:	50                   	push   eax
10000308:	55                   	push   ebp
10000309:	57                   	push   edi
1000030a:	e8 fc ff ff ff       	call   1000030b <_ssfn__zexpand+0x38>	1000030b: R_386_PC32	realloc
1000030f:	83 c4 10             	add    esp,0x10
10000312:	85 c0                	test   eax,eax
10000314:	74 d4                	je     100002ea <_ssfn__zexpand+0x17>
10000316:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000319:	29 fe                	sub    esi,edi
1000031b:	01 c6                	add    esi,eax
1000031d:	01 e8                	add    eax,ebp
1000031f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
10000322:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000325:	b8 01 00 00 00       	mov    eax,0x1
1000032a:	83 c4 0c             	add    esp,0xc
1000032d:	5b                   	pop    ebx
1000032e:	5e                   	pop    esi
1000032f:	5f                   	pop    edi
10000330:	5d                   	pop    ebp
10000331:	c3                   	ret    

10000332 <_ssfn__zbuild_huffman>:
10000332:	55                   	push   ebp
10000333:	57                   	push   edi
10000334:	56                   	push   esi
10000335:	53                   	push   ebx
10000336:	89 c3                	mov    ebx,eax
10000338:	81 ec a0 00 00 00    	sub    esp,0xa0
1000033e:	31 c0                	xor    eax,eax
10000340:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000343:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
10000347:	b9 11 00 00 00       	mov    ecx,0x11
1000034c:	89 ef                	mov    edi,ebp
1000034e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10000352:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000354:	b9 00 01 00 00       	mov    ecx,0x100
10000359:	89 df                	mov    edi,ebx
1000035b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000035d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000360:	7d 0f                	jge    10000371 <_ssfn__zbuild_huffman+0x3f>
10000362:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
10000366:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
1000036a:	40                   	inc    eax
1000036b:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
1000036f:	eb ec                	jmp    1000035d <_ssfn__zbuild_huffman+0x2b>
10000371:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000379:	b9 01 00 00 00       	mov    ecx,0x1
1000037e:	b8 01 00 00 00       	mov    eax,0x1
10000383:	89 c7                	mov    edi,eax
10000385:	d3 e7                	shl    edi,cl
10000387:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
1000038b:	0f 8f 10 01 00 00    	jg     100004a1 <_ssfn__zbuild_huffman+0x16f>
10000391:	41                   	inc    ecx
10000392:	83 f9 10             	cmp    ecx,0x10
10000395:	75 ec                	jne    10000383 <_ssfn__zbuild_huffman+0x51>
10000397:	31 ff                	xor    edi,edi
10000399:	31 f6                	xor    esi,esi
1000039b:	b8 01 00 00 00       	mov    eax,0x1
100003a0:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100003a4:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100003a8:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100003b0:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100003b8:	01 ef                	add    edi,ebp
100003ba:	85 ed                	test   ebp,ebp
100003bc:	74 11                	je     100003cf <_ssfn__zbuild_huffman+0x9d>
100003be:	ba 01 00 00 00       	mov    edx,0x1
100003c3:	88 c1                	mov    cl,al
100003c5:	d3 e2                	shl    edx,cl
100003c7:	39 fa                	cmp    edx,edi
100003c9:	0f 8c d2 00 00 00    	jl     100004a1 <_ssfn__zbuild_huffman+0x16f>
100003cf:	89 fa                	mov    edx,edi
100003d1:	b9 10 00 00 00       	mov    ecx,0x10
100003d6:	01 ff                	add    edi,edi
100003d8:	29 c1                	sub    ecx,eax
100003da:	01 ee                	add    esi,ebp
100003dc:	d3 e2                	shl    edx,cl
100003de:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003e5:	40                   	inc    eax
100003e6:	83 f8 10             	cmp    eax,0x10
100003e9:	75 b5                	jne    100003a0 <_ssfn__zbuild_huffman+0x6e>
100003eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003ee:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003fc:	31 ff                	xor    edi,edi
100003fe:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10000402:	0f 8d 9d 00 00 00    	jge    100004a5 <_ssfn__zbuild_huffman+0x173>
10000408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000040c:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000410:	89 f2                	mov    edx,esi
10000412:	85 f6                	test   esi,esi
10000414:	0f 84 81 00 00 00    	je     1000049b <_ssfn__zbuild_huffman+0x169>
1000041a:	8d 0c 36             	lea    ecx,[esi+esi*1]
1000041d:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000421:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000424:	89 e9                	mov    ecx,ebp
10000426:	89 04 24             	mov    DWORD PTR [esp],eax
10000429:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000430:	29 c1                	sub    ecx,eax
10000432:	89 c8                	mov    eax,ecx
10000434:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000437:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000043e:	01 c8                	add    eax,ecx
10000440:	83 fe 09             	cmp    esi,0x9
10000443:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
1000044a:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10000452:	7f 42                	jg     10000496 <_ssfn__zbuild_huffman+0x164>
10000454:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000458:	89 e8                	mov    eax,ebp
1000045a:	e8 79 fd ff ff       	call   100001d8 <_ssfn__bitreverse16>
1000045f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10000463:	b9 10 00 00 00       	mov    ecx,0x10
10000468:	29 f1                	sub    ecx,esi
1000046a:	d3 f8                	sar    eax,cl
1000046c:	88 d1                	mov    cl,dl
1000046e:	89 04 24             	mov    DWORD PTR [esp],eax
10000471:	89 f2                	mov    edx,esi
10000473:	b8 01 00 00 00       	mov    eax,0x1
10000478:	c1 e2 09             	shl    edx,0x9
1000047b:	d3 e0                	shl    eax,cl
1000047d:	09 fa                	or     edx,edi
1000047f:	89 c1                	mov    ecx,eax
10000481:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000488:	7f 0c                	jg     10000496 <_ssfn__zbuild_huffman+0x164>
1000048a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000048d:	01 0c 24             	add    DWORD PTR [esp],ecx
10000490:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10000494:	eb eb                	jmp    10000481 <_ssfn__zbuild_huffman+0x14f>
10000496:	45                   	inc    ebp
10000497:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
1000049b:	47                   	inc    edi
1000049c:	e9 5d ff ff ff       	jmp    100003fe <_ssfn__zbuild_huffman+0xcc>
100004a1:	31 c0                	xor    eax,eax
100004a3:	eb 05                	jmp    100004aa <_ssfn__zbuild_huffman+0x178>
100004a5:	b8 01 00 00 00       	mov    eax,0x1
100004aa:	81 c4 a0 00 00 00    	add    esp,0xa0
100004b0:	5b                   	pop    ebx
100004b1:	5e                   	pop    esi
100004b2:	5f                   	pop    edi
100004b3:	5d                   	pop    ebp
100004b4:	c3                   	ret    

100004b5 <_ssfn_fc.part.1>:
100004b5:	55                   	push   ebp
100004b6:	57                   	push   edi
100004b7:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100004bd:	56                   	push   esi
100004be:	53                   	push   ebx
100004bf:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100004c5:	83 ec 0c             	sub    esp,0xc
100004c8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004cb:	74 5d                	je     1000052a <_ssfn_fc.part.1+0x75>
100004cd:	31 f6                	xor    esi,esi
100004cf:	8b 03                	mov    eax,DWORD PTR [ebx]
100004d1:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004d5:	74 35                	je     1000050c <_ssfn_fc.part.1+0x57>
100004d7:	31 ed                	xor    ebp,ebp
100004d9:	8b 03                	mov    eax,DWORD PTR [ebx]
100004db:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004de:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004e1:	85 c0                	test   eax,eax
100004e3:	74 0c                	je     100004f1 <_ssfn_fc.part.1+0x3c>
100004e5:	83 ec 0c             	sub    esp,0xc
100004e8:	50                   	push   eax
100004e9:	e8 fc ff ff ff       	call   100004ea <_ssfn_fc.part.1+0x35>	100004ea: R_386_PC32	free
100004ee:	83 c4 10             	add    esp,0x10
100004f1:	83 c5 04             	add    ebp,0x4
100004f4:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004fa:	75 dd                	jne    100004d9 <_ssfn_fc.part.1+0x24>
100004fc:	83 ec 0c             	sub    esp,0xc
100004ff:	8b 03                	mov    eax,DWORD PTR [ebx]
10000501:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000504:	e8 fc ff ff ff       	call   10000505 <_ssfn_fc.part.1+0x50>	10000505: R_386_PC32	free
10000509:	83 c4 10             	add    esp,0x10
1000050c:	83 c6 04             	add    esi,0x4
1000050f:	81 fe 00 04 00 00    	cmp    esi,0x400
10000515:	75 b8                	jne    100004cf <_ssfn_fc.part.1+0x1a>
10000517:	83 ec 0c             	sub    esp,0xc
1000051a:	ff 33                	push   DWORD PTR [ebx]
1000051c:	e8 fc ff ff ff       	call   1000051d <_ssfn_fc.part.1+0x68>	1000051d: R_386_PC32	free
10000521:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000527:	83 c4 10             	add    esp,0x10
1000052a:	83 c3 04             	add    ebx,0x4
1000052d:	39 fb                	cmp    ebx,edi
1000052f:	75 97                	jne    100004c8 <_ssfn_fc.part.1+0x13>
10000531:	83 c4 0c             	add    esp,0xc
10000534:	5b                   	pop    ebx
10000535:	5e                   	pop    esi
10000536:	5f                   	pop    edi
10000537:	5d                   	pop    ebp
10000538:	c3                   	ret    

10000539 <_ssfn_l>:
10000539:	57                   	push   edi
1000053a:	56                   	push   esi
1000053b:	53                   	push   ebx
1000053c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000540:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000544:	39 ce                	cmp    esi,ecx
10000546:	89 f3                	mov    ebx,esi
10000548:	0f 9d c1             	setge  cl
1000054b:	c1 eb 1f             	shr    ebx,0x1f
1000054e:	09 d9                	or     ecx,ebx
10000550:	89 fb                	mov    ebx,edi
10000552:	c1 eb 1f             	shr    ebx,0x1f
10000555:	08 d9                	or     cl,bl
10000557:	0f 85 e9 00 00 00    	jne    10000646 <_ssfn_l+0x10d>
1000055d:	39 d7                	cmp    edi,edx
1000055f:	0f 8d e1 00 00 00    	jge    10000646 <_ssfn_l+0x10d>
10000565:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
1000056b:	8d 51 08             	lea    edx,[ecx+0x8]
1000056e:	8d 4f 08             	lea    ecx,[edi+0x8]
10000571:	c1 fa 04             	sar    edx,0x4
10000574:	c1 f9 04             	sar    ecx,0x4
10000577:	39 ca                	cmp    edx,ecx
10000579:	75 1a                	jne    10000595 <_ssfn_l+0x5c>
1000057b:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000581:	8d 4e 08             	lea    ecx,[esi+0x8]
10000584:	83 c2 08             	add    edx,0x8
10000587:	c1 f9 04             	sar    ecx,0x4
1000058a:	c1 fa 04             	sar    edx,0x4
1000058d:	39 ca                	cmp    edx,ecx
1000058f:	0f 84 b1 00 00 00    	je     10000646 <_ssfn_l+0x10d>
10000595:	89 c3                	mov    ebx,eax
10000597:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
1000059d:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100005a3:	7f 3e                	jg     100005e3 <_ssfn_l+0xaa>
100005a5:	05 00 02 00 00       	add    eax,0x200
100005aa:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100005b0:	52                   	push   edx
100005b1:	01 c0                	add    eax,eax
100005b3:	52                   	push   edx
100005b4:	50                   	push   eax
100005b5:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100005bb:	e8 fc ff ff ff       	call   100005bc <_ssfn_l+0x83>	100005bc: R_386_PC32	realloc
100005c0:	83 c4 10             	add    esp,0x10
100005c3:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005c9:	85 c0                	test   eax,eax
100005cb:	75 16                	jne    100005e3 <_ssfn_l+0xaa>
100005cd:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005d7:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005e1:	eb 63                	jmp    10000646 <_ssfn_l+0x10d>
100005e3:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005ea:	75 26                	jne    10000612 <_ssfn_l+0xd9>
100005ec:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005f2:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005f8:	66 89 10             	mov    WORD PTR [eax],dx
100005fb:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000601:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000607:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
1000060b:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000612:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000618:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000061e:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10000622:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000628:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000062e:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10000633:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000639:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000640:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000646:	5b                   	pop    ebx
10000647:	5e                   	pop    esi
10000648:	5f                   	pop    edi
10000649:	c3                   	ret    

1000064a <_ssfn_b>:
1000064a:	55                   	push   ebp
1000064b:	57                   	push   edi
1000064c:	56                   	push   esi
1000064d:	53                   	push   ebx
1000064e:	83 ec 4c             	sub    esp,0x4c
10000651:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000655:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000659:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000065d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000661:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000665:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000669:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000066d:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000675:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000679:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
1000067d:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000681:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000685:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000689:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000068d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10000694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000698:	83 f8 04             	cmp    eax,0x4
1000069b:	75 28                	jne    100006c5 <_ssfn_b+0x7b>
1000069d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100006a1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100006a5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100006a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100006ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006b1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100006b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100006b9:	83 c4 4c             	add    esp,0x4c
100006bc:	5b                   	pop    ebx
100006bd:	5e                   	pop    esi
100006be:	5f                   	pop    edi
100006bf:	5d                   	pop    ebp
100006c0:	e9 74 fe ff ff       	jmp    10000539 <_ssfn_l>
100006c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006cd:	75 0e                	jne    100006dd <_ssfn_b+0x93>
100006cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006d3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006d7:	0f 84 19 01 00 00    	je     100007f6 <_ssfn_b+0x1ac>
100006dd:	be 02 00 00 00       	mov    esi,0x2
100006e2:	89 d8                	mov    eax,ebx
100006e4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006e8:	99                   	cdq    
100006e9:	f7 fe                	idiv   esi
100006eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006f3:	89 e8                	mov    eax,ebp
100006f5:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006f9:	99                   	cdq    
100006fa:	f7 fe                	idiv   esi
100006fc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000704:	89 f8                	mov    eax,edi
10000706:	29 d8                	sub    eax,ebx
10000708:	99                   	cdq    
10000709:	f7 fe                	idiv   esi
1000070b:	01 c3                	add    ebx,eax
1000070d:	89 c8                	mov    eax,ecx
1000070f:	29 e8                	sub    eax,ebp
10000711:	99                   	cdq    
10000712:	f7 fe                	idiv   esi
10000714:	01 e8                	add    eax,ebp
10000716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000071a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000071e:	29 f8                	sub    eax,edi
10000720:	99                   	cdq    
10000721:	f7 fe                	idiv   esi
10000723:	01 f8                	add    eax,edi
10000725:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000729:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000072d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000731:	29 c8                	sub    eax,ecx
10000733:	99                   	cdq    
10000734:	f7 fe                	idiv   esi
10000736:	01 c8                	add    eax,ecx
10000738:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000073c:	89 d8                	mov    eax,ebx
1000073e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10000742:	99                   	cdq    
10000743:	f7 fe                	idiv   esi
10000745:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000074c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000750:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000754:	99                   	cdq    
10000755:	f7 fe                	idiv   esi
10000757:	8d 2c 38             	lea    ebp,[eax+edi*1]
1000075a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000075e:	29 d8                	sub    eax,ebx
10000760:	99                   	cdq    
10000761:	f7 fe                	idiv   esi
10000763:	83 ec 0c             	sub    esp,0xc
10000766:	01 d8                	add    eax,ebx
10000768:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000076c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000770:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10000774:	99                   	cdq    
10000775:	f7 fe                	idiv   esi
10000777:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000077b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000077f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000783:	29 c8                	sub    eax,ecx
10000785:	99                   	cdq    
10000786:	f7 fe                	idiv   esi
10000788:	8d 1c 08             	lea    ebx,[eax+ecx*1]
1000078b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000078f:	29 e8                	sub    eax,ebp
10000791:	99                   	cdq    
10000792:	f7 fe                	idiv   esi
10000794:	8d 34 28             	lea    esi,[eax+ebp*1]
10000797:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
1000079b:	8d 78 01             	lea    edi,[eax+0x1]
1000079e:	57                   	push   edi
1000079f:	56                   	push   esi
100007a0:	53                   	push   ebx
100007a1:	55                   	push   ebp
100007a2:	51                   	push   ecx
100007a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007b3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007b7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007bf:	e8 86 fe ff ff       	call   1000064a <_ssfn_b>
100007c4:	83 c4 24             	add    esp,0x24
100007c7:	57                   	push   edi
100007c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007dc:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007e0:	56                   	push   esi
100007e1:	53                   	push   ebx
100007e2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007e6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007ea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007ee:	e8 57 fe ff ff       	call   1000064a <_ssfn_b>
100007f3:	83 c4 30             	add    esp,0x30
100007f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007fb:	0f 85 9c fe ff ff    	jne    1000069d <_ssfn_b+0x53>
10000801:	83 c4 4c             	add    esp,0x4c
10000804:	5b                   	pop    ebx
10000805:	5e                   	pop    esi
10000806:	5f                   	pop    edi
10000807:	5d                   	pop    ebp
10000808:	c3                   	ret    

10000809 <_ssfn__zreceive>:
10000809:	56                   	push   esi
1000080a:	53                   	push   ebx
1000080b:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000080e:	7d 1d                	jge    1000082d <_ssfn__zreceive+0x24>
10000810:	8b 18                	mov    ebx,DWORD PTR [eax]
10000812:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000815:	89 08                	mov    DWORD PTR [eax],ecx
10000817:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000081a:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000081d:	d3 e3                	shl    ebx,cl
1000081f:	83 c1 08             	add    ecx,0x8
10000822:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000825:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000828:	83 f9 18             	cmp    ecx,0x18
1000082b:	7e e3                	jle    10000810 <_ssfn__zreceive+0x7>
1000082d:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000830:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
10000833:	89 f3                	mov    ebx,esi
10000835:	88 d1                	mov    cl,dl
10000837:	d3 eb                	shr    ebx,cl
10000839:	88 d1                	mov    cl,dl
1000083b:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000083e:	bb 01 00 00 00       	mov    ebx,0x1
10000843:	d3 e3                	shl    ebx,cl
10000845:	8d 43 ff             	lea    eax,[ebx-0x1]
10000848:	5b                   	pop    ebx
10000849:	21 f0                	and    eax,esi
1000084b:	5e                   	pop    esi
1000084c:	c3                   	ret    

1000084d <ssfn_utf8>:
1000084d:	56                   	push   esi
1000084e:	53                   	push   ebx
1000084f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10000853:	8b 11                	mov    edx,DWORD PTR [ecx]
10000855:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000858:	89 f0                	mov    eax,esi
1000085a:	84 c0                	test   al,al
1000085c:	0f be d8             	movsx  ebx,al
1000085f:	78 04                	js     10000865 <ssfn_utf8+0x18>
10000861:	89 d8                	mov    eax,ebx
10000863:	eb 7d                	jmp    100008e2 <ssfn_utf8+0x95>
10000865:	f7 c6 20 00 00 00    	test   esi,0x20
1000086b:	75 14                	jne    10000881 <ssfn_utf8+0x34>
1000086d:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000870:	c1 e3 06             	shl    ebx,0x6
10000873:	83 e0 3f             	and    eax,0x3f
10000876:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000087c:	42                   	inc    edx
1000087d:	09 d8                	or     eax,ebx
1000087f:	eb 5f                	jmp    100008e0 <ssfn_utf8+0x93>
10000881:	f7 c6 10 00 00 00    	test   esi,0x10
10000887:	75 20                	jne    100008a9 <ssfn_utf8+0x5c>
10000889:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
1000088d:	c1 e3 0c             	shl    ebx,0xc
10000890:	c1 e0 06             	shl    eax,0x6
10000893:	0f b7 db             	movzx  ebx,bx
10000896:	25 c0 0f 00 00       	and    eax,0xfc0
1000089b:	83 c2 02             	add    edx,0x2
1000089e:	09 d8                	or     eax,ebx
100008a0:	8a 1a                	mov    bl,BYTE PTR [edx]
100008a2:	83 e3 3f             	and    ebx,0x3f
100008a5:	09 d8                	or     eax,ebx
100008a7:	eb 37                	jmp    100008e0 <ssfn_utf8+0x93>
100008a9:	31 c0                	xor    eax,eax
100008ab:	83 e6 08             	and    esi,0x8
100008ae:	75 32                	jne    100008e2 <ssfn_utf8+0x95>
100008b0:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100008b4:	c1 e3 12             	shl    ebx,0x12
100008b7:	c1 e0 0c             	shl    eax,0xc
100008ba:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100008c0:	25 00 f0 03 00       	and    eax,0x3f000
100008c5:	83 c2 03             	add    edx,0x3
100008c8:	09 d8                	or     eax,ebx
100008ca:	8a 1a                	mov    bl,BYTE PTR [edx]
100008cc:	83 e3 3f             	and    ebx,0x3f
100008cf:	09 d8                	or     eax,ebx
100008d1:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008d5:	c1 e3 06             	shl    ebx,0x6
100008d8:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008de:	09 d8                	or     eax,ebx
100008e0:	89 11                	mov    DWORD PTR [ecx],edx
100008e2:	ff 01                	inc    DWORD PTR [ecx]
100008e4:	5b                   	pop    ebx
100008e5:	5e                   	pop    esi
100008e6:	c3                   	ret    

100008e7 <_ssfn_c>:
100008e7:	55                   	push   ebp
100008e8:	57                   	push   edi
100008e9:	56                   	push   esi
100008ea:	53                   	push   ebx
100008eb:	83 ec 14             	sub    esp,0x14
100008ee:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008f4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008f8:	85 c0                	test   eax,eax
100008fa:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000900:	0f 84 e6 00 00 00    	je     100009ec <_ssfn_c+0x105>
10000906:	31 ff                	xor    edi,edi
10000908:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
1000090c:	0f 84 f3 00 00 00    	je     10000a05 <_ssfn_c+0x11e>
10000912:	85 d2                	test   edx,edx
10000914:	0f 84 eb 00 00 00    	je     10000a05 <_ssfn_c+0x11e>
1000091a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
1000091d:	0f 84 e2 00 00 00    	je     10000a05 <_ssfn_c+0x11e>
10000923:	89 d6                	mov    esi,edx
10000925:	89 cd                	mov    ebp,ecx
10000927:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000092a:	89 c3                	mov    ebx,eax
1000092c:	85 d2                	test   edx,edx
1000092e:	74 38                	je     10000968 <_ssfn_c+0x81>
10000930:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000933:	31 c0                	xor    eax,eax
10000935:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000938:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000093b:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000093f:	66 85 d2             	test   dx,dx
10000942:	74 24                	je     10000968 <_ssfn_c+0x81>
10000944:	01 da                	add    edx,ebx
10000946:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000094a:	8a 0a                	mov    cl,BYTE PTR [edx]
1000094c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000950:	84 c9                	test   cl,cl
10000952:	0f 84 9e 00 00 00    	je     100009f6 <_ssfn_c+0x10f>
10000958:	3a 0f                	cmp    cl,BYTE PTR [edi]
1000095a:	0f 85 90 00 00 00    	jne    100009f0 <_ssfn_c+0x109>
10000960:	47                   	inc    edi
10000961:	42                   	inc    edx
10000962:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000966:	eb e2                	jmp    1000094a <_ssfn_c+0x63>
10000968:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000096c:	8d 44 24 10          	lea    eax,[esp+0x10]
10000970:	50                   	push   eax
10000971:	e8 fc ff ff ff       	call   10000972 <_ssfn_c+0x8b>	10000972: R_386_PC32	ssfn_utf8
10000976:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000097a:	29 f2                	sub    edx,esi
1000097c:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
1000097f:	5a                   	pop    edx
10000980:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000984:	89 06                	mov    DWORD PTR [esi],eax
10000986:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000989:	89 df                	mov    edi,ebx
1000098b:	31 db                	xor    ebx,ebx
1000098d:	8a 17                	mov    dl,BYTE PTR [edi]
1000098f:	80 fa ff             	cmp    dl,0xff
10000992:	75 08                	jne    1000099c <_ssfn_c+0xb5>
10000994:	81 c3 ff ff 00 00    	add    ebx,0xffff
1000099a:	eb 2a                	jmp    100009c6 <_ssfn_c+0xdf>
1000099c:	88 d1                	mov    cl,dl
1000099e:	83 e1 c0             	and    ecx,0xffffffc0
100009a1:	80 f9 c0             	cmp    cl,0xc0
100009a4:	75 16                	jne    100009bc <_ssfn_c+0xd5>
100009a6:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009aa:	c1 e2 08             	shl    edx,0x8
100009ad:	83 c7 02             	add    edi,0x2
100009b0:	81 e2 00 3f 00 00    	and    edx,0x3f00
100009b6:	09 ca                	or     edx,ecx
100009b8:	01 d3                	add    ebx,edx
100009ba:	eb 27                	jmp    100009e3 <_ssfn_c+0xfc>
100009bc:	80 f9 80             	cmp    cl,0x80
100009bf:	75 08                	jne    100009c9 <_ssfn_c+0xe2>
100009c1:	83 e2 3f             	and    edx,0x3f
100009c4:	01 d3                	add    ebx,edx
100009c6:	47                   	inc    edi
100009c7:	eb 1a                	jmp    100009e3 <_ssfn_c+0xfc>
100009c9:	39 d8                	cmp    eax,ebx
100009cb:	74 38                	je     10000a05 <_ssfn_c+0x11e>
100009cd:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009d1:	83 e2 40             	and    edx,0x40
100009d4:	80 fa 01             	cmp    dl,0x1
100009d7:	19 d2                	sbb    edx,edx
100009d9:	83 c2 06             	add    edx,0x6
100009dc:	0f af d1             	imul   edx,ecx
100009df:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009e3:	43                   	inc    ebx
100009e4:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009ea:	76 a1                	jbe    1000098d <_ssfn_c+0xa6>
100009ec:	31 ff                	xor    edi,edi
100009ee:	eb 15                	jmp    10000a05 <_ssfn_c+0x11e>
100009f0:	40                   	inc    eax
100009f1:	e9 42 ff ff ff       	jmp    10000938 <_ssfn_c+0x51>
100009f6:	29 f7                	sub    edi,esi
100009f8:	05 00 f0 00 00       	add    eax,0xf000
100009fd:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000a00:	e9 7b ff ff ff       	jmp    10000980 <_ssfn_c+0x99>
10000a05:	83 c4 14             	add    esp,0x14
10000a08:	89 f8                	mov    eax,edi
10000a0a:	5b                   	pop    ebx
10000a0b:	5e                   	pop    esi
10000a0c:	5f                   	pop    edi
10000a0d:	5d                   	pop    ebp
10000a0e:	c3                   	ret    

10000a0f <_ssfn_zlib_decode>:
10000a0f:	55                   	push   ebp
10000a10:	57                   	push   edi
10000a11:	56                   	push   esi
10000a12:	53                   	push   ebx
10000a13:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000a19:	6a 08                	push   0x8
10000a1b:	e8 fc ff ff ff       	call   10000a1c <_ssfn_zlib_decode+0xd>	10000a1c: R_386_PC32	malloc
10000a20:	83 c4 10             	add    esp,0x10
10000a23:	89 c2                	mov    edx,eax
10000a25:	85 c0                	test   eax,eax
10000a27:	0f 84 eb 04 00 00    	je     10000f18 <_ssfn_zlib_decode+0x509>
10000a2d:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a34:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a3b:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a42:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a49:	31 c0                	xor    eax,eax
10000a4b:	83 c2 08             	add    edx,0x8
10000a4e:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a55:	c6 80 e0 56 03 10 08 	mov    BYTE PTR [eax+0x100356e0],0x8	10000a57: R_386_32	.bss
10000a5c:	40                   	inc    eax
10000a5d:	3d 90 00 00 00       	cmp    eax,0x90
10000a62:	75 f1                	jne    10000a55 <_ssfn_zlib_decode+0x46>
10000a64:	c6 80 e0 56 03 10 09 	mov    BYTE PTR [eax+0x100356e0],0x9	10000a66: R_386_32	.bss
10000a6b:	40                   	inc    eax
10000a6c:	3d 00 01 00 00       	cmp    eax,0x100
10000a71:	75 f1                	jne    10000a64 <_ssfn_zlib_decode+0x55>
10000a73:	c6 80 e0 56 03 10 07 	mov    BYTE PTR [eax+0x100356e0],0x7	10000a75: R_386_32	.bss
10000a7a:	40                   	inc    eax
10000a7b:	3d 18 01 00 00       	cmp    eax,0x118
10000a80:	75 f1                	jne    10000a73 <_ssfn_zlib_decode+0x64>
10000a82:	c7 05 f8 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357f8,0x8080808	10000a84: R_386_32	.bss
10000a8c:	c7 05 fc 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357fc,0x8080808	10000a8e: R_386_32	.bss
10000a96:	31 c0                	xor    eax,eax
10000a98:	c6 80 c0 56 03 10 05 	mov    BYTE PTR [eax+0x100356c0],0x5	10000a9a: R_386_32	.bss
10000a9f:	40                   	inc    eax
10000aa0:	83 f8 20             	cmp    eax,0x20
10000aa3:	75 f3                	jne    10000a98 <_ssfn_zlib_decode+0x89>
10000aa5:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000ab0:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000abb:	ba 01 00 00 00       	mov    edx,0x1
10000ac0:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ac7:	e8 3d fd ff ff       	call   10000809 <_ssfn__zreceive>
10000acc:	ba 02 00 00 00       	mov    edx,0x2
10000ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000ad5:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000adc:	e8 28 fd ff ff       	call   10000809 <_ssfn__zreceive>
10000ae1:	89 c6                	mov    esi,eax
10000ae3:	85 c0                	test   eax,eax
10000ae5:	0f 85 09 01 00 00    	jne    10000bf4 <_ssfn_zlib_decode+0x1e5>
10000aeb:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000af2:	83 e2 07             	and    edx,0x7
10000af5:	74 0c                	je     10000b03 <_ssfn_zlib_decode+0xf4>
10000af7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000afe:	e8 06 fd ff ff       	call   10000809 <_ssfn__zreceive>
10000b03:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000b0a:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000b11:	31 c0                	xor    eax,eax
10000b13:	31 db                	xor    ebx,ebx
10000b15:	85 d2                	test   edx,edx
10000b17:	7f 14                	jg     10000b2d <_ssfn_zlib_decode+0x11e>
10000b19:	84 db                	test   bl,bl
10000b1b:	74 22                	je     10000b3f <_ssfn_zlib_decode+0x130>
10000b1d:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000b24:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b2b:	eb 12                	jmp    10000b3f <_ssfn_zlib_decode+0x130>
10000b2d:	40                   	inc    eax
10000b2e:	83 ea 08             	sub    edx,0x8
10000b31:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b38:	b3 01                	mov    bl,0x1
10000b3a:	c1 e9 08             	shr    ecx,0x8
10000b3d:	eb d6                	jmp    10000b15 <_ssfn_zlib_decode+0x106>
10000b3f:	83 f8 04             	cmp    eax,0x4
10000b42:	74 1d                	je     10000b61 <_ssfn_zlib_decode+0x152>
10000b44:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b4b:	40                   	inc    eax
10000b4c:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b4f:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b56:	8a 12                	mov    dl,BYTE PTR [edx]
10000b58:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b5f:	eb de                	jmp    10000b3f <_ssfn_zlib_decode+0x130>
10000b61:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b69:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b71:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b79:	c1 e3 08             	shl    ebx,0x8
10000b7c:	01 c3                	add    ebx,eax
10000b7e:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b86:	c1 e0 08             	shl    eax,0x8
10000b89:	01 d0                	add    eax,edx
10000b8b:	89 da                	mov    edx,ebx
10000b8d:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b93:	39 d0                	cmp    eax,edx
10000b95:	0f 85 69 03 00 00    	jne    10000f04 <_ssfn_zlib_decode+0x4f5>
10000b9b:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000ba2:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ba5:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000bac:	73 14                	jae    10000bc2 <_ssfn_zlib_decode+0x1b3>
10000bae:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bb5:	e8 19 f7 ff ff       	call   100002d3 <_ssfn__zexpand>
10000bba:	85 c0                	test   eax,eax
10000bbc:	0f 84 42 03 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000bc2:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000bc9:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000bd0:	39 f3                	cmp    ebx,esi
10000bd2:	74 09                	je     10000bdd <_ssfn_zlib_decode+0x1ce>
10000bd4:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000bd7:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000bda:	46                   	inc    esi
10000bdb:	eb e5                	jmp    10000bc2 <_ssfn_zlib_decode+0x1b3>
10000bdd:	01 da                	add    edx,ebx
10000bdf:	01 c3                	add    ebx,eax
10000be1:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000be8:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000bef:	e9 fc 02 00 00       	jmp    10000ef0 <_ssfn_zlib_decode+0x4e1>
10000bf4:	83 f8 03             	cmp    eax,0x3
10000bf7:	0f 84 07 03 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000bfd:	4e                   	dec    esi
10000bfe:	75 2d                	jne    10000c2d <_ssfn_zlib_decode+0x21e>
10000c00:	b9 20 01 00 00       	mov    ecx,0x120
10000c05:	ba e0 56 03 10       	mov    edx,0x100356e0	10000c06: R_386_32	.bss
10000c0a:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000c11:	e8 1c f7 ff ff       	call   10000332 <_ssfn__zbuild_huffman>
10000c16:	85 c0                	test   eax,eax
10000c18:	0f 84 e6 02 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000c1e:	b9 20 00 00 00       	mov    ecx,0x20
10000c23:	ba c0 56 03 10       	mov    edx,0x100356c0	10000c24: R_386_32	.bss
10000c28:	e9 78 01 00 00       	jmp    10000da5 <_ssfn_zlib_decode+0x396>
10000c2d:	ba 05 00 00 00       	mov    edx,0x5
10000c32:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c39:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c3d:	e8 c7 fb ff ff       	call   10000809 <_ssfn__zreceive>
10000c42:	89 df                	mov    edi,ebx
10000c44:	ba 05 00 00 00       	mov    edx,0x5
10000c49:	89 c5                	mov    ebp,eax
10000c4b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c52:	e8 b2 fb ff ff       	call   10000809 <_ssfn__zreceive>
10000c57:	ba 04 00 00 00       	mov    edx,0x4
10000c5c:	89 c6                	mov    esi,eax
10000c5e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c65:	e8 9f fb ff ff       	call   10000809 <_ssfn__zreceive>
10000c6a:	b9 13 00 00 00       	mov    ecx,0x13
10000c6f:	83 c0 04             	add    eax,0x4
10000c72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c76:	31 c0                	xor    eax,eax
10000c78:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c7a:	31 ff                	xor    edi,edi
10000c7c:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c80:	7e 1f                	jle    10000ca1 <_ssfn_zlib_decode+0x292>
10000c82:	ba 03 00 00 00       	mov    edx,0x3
10000c87:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c8e:	47                   	inc    edi
10000c8f:	e8 75 fb ff ff       	call   10000809 <_ssfn__zreceive>
10000c94:	0f b6 97 5f 52 00 10 	movzx  edx,BYTE PTR [edi+0x1000525f]	10000c97: R_386_32	.text
10000c9b:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c9f:	eb db                	jmp    10000c7c <_ssfn_zlib_decode+0x26d>
10000ca1:	b9 13 00 00 00       	mov    ecx,0x13
10000ca6:	89 da                	mov    edx,ebx
10000ca8:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000caf:	e8 7e f6 ff ff       	call   10000332 <_ssfn__zbuild_huffman>
10000cb4:	85 c0                	test   eax,eax
10000cb6:	0f 84 48 02 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000cbc:	8d 46 01             	lea    eax,[esi+0x1]
10000cbf:	81 c5 01 01 00 00    	add    ebp,0x101
10000cc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cc9:	31 f6                	xor    esi,esi
10000ccb:	01 e8                	add    eax,ebp
10000ccd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000cd1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cd5:	0f 8e 9f 00 00 00    	jle    10000d7a <_ssfn_zlib_decode+0x36b>
10000cdb:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000ce2:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ce9:	e8 35 f5 ff ff       	call   10000223 <_ssfn__zhuffman_decode>
10000cee:	83 f8 12             	cmp    eax,0x12
10000cf1:	0f 87 0d 02 00 00    	ja     10000f04 <_ssfn_zlib_decode+0x4f5>
10000cf7:	83 f8 0f             	cmp    eax,0xf
10000cfa:	7f 07                	jg     10000d03 <_ssfn_zlib_decode+0x2f4>
10000cfc:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000d00:	46                   	inc    esi
10000d01:	eb ce                	jmp    10000cd1 <_ssfn_zlib_decode+0x2c2>
10000d03:	83 f8 10             	cmp    eax,0x10
10000d06:	75 22                	jne    10000d2a <_ssfn_zlib_decode+0x31b>
10000d08:	ba 02 00 00 00       	mov    edx,0x2
10000d0d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d14:	e8 f0 fa ff ff       	call   10000809 <_ssfn__zreceive>
10000d19:	85 f6                	test   esi,esi
10000d1b:	8d 58 03             	lea    ebx,[eax+0x3]
10000d1e:	0f 84 e0 01 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000d24:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d28:	eb 31                	jmp    10000d5b <_ssfn_zlib_decode+0x34c>
10000d2a:	83 f8 11             	cmp    eax,0x11
10000d2d:	75 16                	jne    10000d45 <_ssfn_zlib_decode+0x336>
10000d2f:	ba 03 00 00 00       	mov    edx,0x3
10000d34:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d3b:	e8 c9 fa ff ff       	call   10000809 <_ssfn__zreceive>
10000d40:	8d 58 03             	lea    ebx,[eax+0x3]
10000d43:	eb 14                	jmp    10000d59 <_ssfn_zlib_decode+0x34a>
10000d45:	ba 07 00 00 00       	mov    edx,0x7
10000d4a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d51:	e8 b3 fa ff ff       	call   10000809 <_ssfn__zreceive>
10000d56:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d59:	31 c0                	xor    eax,eax
10000d5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d5f:	29 f2                	sub    edx,esi
10000d61:	39 da                	cmp    edx,ebx
10000d63:	0f 8c 9b 01 00 00    	jl     10000f04 <_ssfn_zlib_decode+0x4f5>
10000d69:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d6d:	89 d9                	mov    ecx,ebx
10000d6f:	89 d7                	mov    edi,edx
10000d71:	01 de                	add    esi,ebx
10000d73:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d75:	e9 57 ff ff ff       	jmp    10000cd1 <_ssfn_zlib_decode+0x2c2>
10000d7a:	0f 85 84 01 00 00    	jne    10000f04 <_ssfn_zlib_decode+0x4f5>
10000d80:	89 e9                	mov    ecx,ebp
10000d82:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d86:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d8d:	e8 a0 f5 ff ff       	call   10000332 <_ssfn__zbuild_huffman>
10000d92:	85 c0                	test   eax,eax
10000d94:	0f 84 6a 01 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000d9a:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000da2:	8d 14 28             	lea    edx,[eax+ebp*1]
10000da5:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000dac:	e8 81 f5 ff ff       	call   10000332 <_ssfn__zbuild_huffman>
10000db1:	85 c0                	test   eax,eax
10000db3:	0f 84 4b 01 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000db9:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dc0:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000dc7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dce:	e8 50 f4 ff ff       	call   10000223 <_ssfn__zhuffman_decode>
10000dd3:	89 c3                	mov    ebx,eax
10000dd5:	3d ff 00 00 00       	cmp    eax,0xff
10000dda:	7f 34                	jg     10000e10 <_ssfn_zlib_decode+0x401>
10000ddc:	85 c0                	test   eax,eax
10000dde:	0f 88 20 01 00 00    	js     10000f04 <_ssfn_zlib_decode+0x4f5>
10000de4:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000deb:	77 1d                	ja     10000e0a <_ssfn_zlib_decode+0x3fb>
10000ded:	89 ea                	mov    edx,ebp
10000def:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000df6:	e8 d8 f4 ff ff       	call   100002d3 <_ssfn__zexpand>
10000dfb:	85 c0                	test   eax,eax
10000dfd:	0f 84 01 01 00 00    	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000e03:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e0a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000e0d:	45                   	inc    ebp
10000e0e:	eb b0                	jmp    10000dc0 <_ssfn_zlib_decode+0x3b1>
10000e10:	3d 00 01 00 00       	cmp    eax,0x100
10000e15:	75 0c                	jne    10000e23 <_ssfn_zlib_decode+0x414>
10000e17:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000e1e:	e9 cd 00 00 00       	jmp    10000ef0 <_ssfn_zlib_decode+0x4e1>
10000e23:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e29:	8b 14 85 80 53 00 10 	mov    edx,DWORD PTR [eax*4+0x10005380]	10000e2c: R_386_32	.text
10000e30:	8b 1c 85 00 54 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005400]	10000e33: R_386_32	.text
10000e37:	85 d2                	test   edx,edx
10000e39:	74 0e                	je     10000e49 <_ssfn_zlib_decode+0x43a>
10000e3b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e42:	e8 c2 f9 ff ff       	call   10000809 <_ssfn__zreceive>
10000e47:	01 c3                	add    ebx,eax
10000e49:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e50:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e57:	e8 c7 f3 ff ff       	call   10000223 <_ssfn__zhuffman_decode>
10000e5c:	85 c0                	test   eax,eax
10000e5e:	0f 88 a0 00 00 00    	js     10000f04 <_ssfn_zlib_decode+0x4f5>
10000e64:	8b 14 85 80 52 00 10 	mov    edx,DWORD PTR [eax*4+0x10005280]	10000e67: R_386_32	.text
10000e6b:	8b 3c 85 00 53 00 10 	mov    edi,DWORD PTR [eax*4+0x10005300]	10000e6e: R_386_32	.text
10000e72:	85 d2                	test   edx,edx
10000e74:	74 0e                	je     10000e84 <_ssfn_zlib_decode+0x475>
10000e76:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e7d:	e8 87 f9 ff ff       	call   10000809 <_ssfn__zreceive>
10000e82:	01 c7                	add    edi,eax
10000e84:	89 e8                	mov    eax,ebp
10000e86:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e8d:	39 f8                	cmp    eax,edi
10000e8f:	7c 73                	jl     10000f04 <_ssfn_zlib_decode+0x4f5>
10000e91:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e95:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e9c:	73 19                	jae    10000eb7 <_ssfn_zlib_decode+0x4a8>
10000e9e:	89 ea                	mov    edx,ebp
10000ea0:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ea7:	e8 27 f4 ff ff       	call   100002d3 <_ssfn__zexpand>
10000eac:	85 c0                	test   eax,eax
10000eae:	74 54                	je     10000f04 <_ssfn_zlib_decode+0x4f5>
10000eb0:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000eb7:	89 ee                	mov    esi,ebp
10000eb9:	29 fe                	sub    esi,edi
10000ebb:	4f                   	dec    edi
10000ebc:	75 19                	jne    10000ed7 <_ssfn_zlib_decode+0x4c8>
10000ebe:	85 db                	test   ebx,ebx
10000ec0:	0f 84 fa fe ff ff    	je     10000dc0 <_ssfn_zlib_decode+0x3b1>
10000ec6:	8a 06                	mov    al,BYTE PTR [esi]
10000ec8:	01 eb                	add    ebx,ebp
10000eca:	45                   	inc    ebp
10000ecb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000ece:	39 dd                	cmp    ebp,ebx
10000ed0:	75 f8                	jne    10000eca <_ssfn_zlib_decode+0x4bb>
10000ed2:	e9 e9 fe ff ff       	jmp    10000dc0 <_ssfn_zlib_decode+0x3b1>
10000ed7:	85 db                	test   ebx,ebx
10000ed9:	0f 84 e1 fe ff ff    	je     10000dc0 <_ssfn_zlib_decode+0x3b1>
10000edf:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000ee2:	89 ef                	mov    edi,ebp
10000ee4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000ee5:	39 f0                	cmp    eax,esi
10000ee7:	75 fb                	jne    10000ee4 <_ssfn_zlib_decode+0x4d5>
10000ee9:	01 dd                	add    ebp,ebx
10000eeb:	e9 d0 fe ff ff       	jmp    10000dc0 <_ssfn_zlib_decode+0x3b1>
10000ef0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000ef5:	0f 84 c0 fb ff ff    	je     10000abb <_ssfn_zlib_decode+0xac>
10000efb:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000f02:	eb 14                	jmp    10000f18 <_ssfn_zlib_decode+0x509>
10000f04:	83 ec 0c             	sub    esp,0xc
10000f07:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000f0e:	e8 fc ff ff ff       	call   10000f0f <_ssfn_zlib_decode+0x500>	10000f0f: R_386_PC32	free
10000f13:	83 c4 10             	add    esp,0x10
10000f16:	31 c0                	xor    eax,eax
10000f18:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000f1e:	5b                   	pop    ebx
10000f1f:	5e                   	pop    esi
10000f20:	5f                   	pop    edi
10000f21:	5d                   	pop    ebp
10000f22:	c3                   	ret    

10000f23 <ssfn_load>:
10000f23:	55                   	push   ebp
10000f24:	57                   	push   edi
10000f25:	56                   	push   esi
10000f26:	53                   	push   ebx
10000f27:	83 ec 1c             	sub    esp,0x1c
10000f2a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f32:	85 ff                	test   edi,edi
10000f34:	0f 84 d0 01 00 00    	je     1000110a <ssfn_load+0x1e7>
10000f3a:	85 f6                	test   esi,esi
10000f3c:	0f 84 c8 01 00 00    	je     1000110a <ssfn_load+0x1e7>
10000f42:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f45:	0f 85 a8 00 00 00    	jne    10000ff3 <ssfn_load+0xd0>
10000f4b:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f4f:	0f 85 9e 00 00 00    	jne    10000ff3 <ssfn_load+0xd0>
10000f55:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f59:	74 0a                	je     10000f65 <ssfn_load+0x42>
10000f5b:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f60:	e9 aa 01 00 00       	jmp    1000110f <ssfn_load+0x1ec>
10000f65:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f68:	a8 04                	test   al,0x4
10000f6a:	75 05                	jne    10000f71 <ssfn_load+0x4e>
10000f6c:	83 c6 0a             	add    esi,0xa
10000f6f:	eb 08                	jmp    10000f79 <ssfn_load+0x56>
10000f71:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f75:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f79:	a8 08                	test   al,0x8
10000f7b:	74 07                	je     10000f84 <ssfn_load+0x61>
10000f7d:	46                   	inc    esi
10000f7e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f82:	eb f7                	jmp    10000f7b <ssfn_load+0x58>
10000f84:	a8 10                	test   al,0x10
10000f86:	74 07                	je     10000f8f <ssfn_load+0x6c>
10000f88:	46                   	inc    esi
10000f89:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f8d:	eb f7                	jmp    10000f86 <ssfn_load+0x63>
10000f8f:	83 ec 0c             	sub    esp,0xc
10000f92:	56                   	push   esi
10000f93:	e8 fc ff ff ff       	call   10000f94 <ssfn_load+0x71>	10000f94: R_386_PC32	_ssfn_zlib_decode
10000f98:	83 c4 10             	add    esp,0x10
10000f9b:	89 c6                	mov    esi,eax
10000f9d:	85 c0                	test   eax,eax
10000f9f:	74 ba                	je     10000f5b <ssfn_load+0x38>
10000fa1:	50                   	push   eax
10000fa2:	50                   	push   eax
10000fa3:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000fa9:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000fb0:	50                   	push   eax
10000fb1:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000fb7:	e8 fc ff ff ff       	call   10000fb8 <ssfn_load+0x95>	10000fb8: R_386_PC32	realloc
10000fbc:	83 c4 10             	add    esp,0x10
10000fbf:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000fc5:	85 c0                	test   eax,eax
10000fc7:	75 0f                	jne    10000fd8 <ssfn_load+0xb5>
10000fc9:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fd3:	e9 1a 01 00 00       	jmp    100010f2 <ssfn_load+0x1cf>
10000fd8:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fde:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fe1:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fe7:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000fea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000fed:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000ff3:	50                   	push   eax
10000ff4:	6a 04                	push   0x4
10000ff6:	68 29 51 00 10       	push   0x10005129	10000ff7: R_386_32	.text
10000ffb:	56                   	push   esi
10000ffc:	e8 fc ff ff ff       	call   10000ffd <ssfn_load+0xda>	10000ffd: R_386_PC32	memcmp
10001001:	83 c4 10             	add    esp,0x10
10001004:	89 c5                	mov    ebp,eax
10001006:	85 c0                	test   eax,eax
10001008:	75 29                	jne    10001033 <ssfn_load+0x110>
1000100a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
1000100d:	01 f3                	add    ebx,esi
1000100f:	83 c6 08             	add    esi,0x8
10001012:	39 de                	cmp    esi,ebx
10001014:	0f 83 f5 00 00 00    	jae    1000110f <ssfn_load+0x1ec>
1000101a:	50                   	push   eax
1000101b:	50                   	push   eax
1000101c:	56                   	push   esi
1000101d:	57                   	push   edi
1000101e:	e8 fc ff ff ff       	call   1000101f <ssfn_load+0xfc>	1000101f: R_386_PC32	ssfn_load
10001023:	83 c4 10             	add    esp,0x10
10001026:	85 c0                	test   eax,eax
10001028:	0f 85 e1 00 00 00    	jne    1000110f <ssfn_load+0x1ec>
1000102e:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001031:	eb df                	jmp    10001012 <ssfn_load+0xef>
10001033:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10001036:	83 e0 0f             	and    eax,0xf
10001039:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
1000103d:	53                   	push   ebx
1000103e:	6a 04                	push   0x4
10001040:	68 2e 51 00 10       	push   0x1000512e	10001041: R_386_32	.text
10001045:	56                   	push   esi
10001046:	e8 fc ff ff ff       	call   10001047 <ssfn_load+0x124>	10001047: R_386_PC32	memcmp
1000104b:	83 c4 10             	add    esp,0x10
1000104e:	89 c5                	mov    ebp,eax
10001050:	85 c0                	test   eax,eax
10001052:	0f 85 03 ff ff ff    	jne    10000f5b <ssfn_load+0x38>
10001058:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
1000105b:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
1000105f:	51                   	push   ecx
10001060:	6a 04                	push   0x4
10001062:	68 33 51 00 10       	push   0x10005133	10001063: R_386_32	.text
10001067:	50                   	push   eax
10001068:	e8 fc ff ff ff       	call   10001069 <ssfn_load+0x146>	10001069: R_386_PC32	memcmp
1000106d:	83 c4 10             	add    esp,0x10
10001070:	85 c0                	test   eax,eax
10001072:	0f 85 e3 fe ff ff    	jne    10000f5b <ssfn_load+0x38>
10001078:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
1000107d:	0f 87 d8 fe ff ff    	ja     10000f5b <ssfn_load+0x38>
10001083:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10001087:	39 cb                	cmp    ebx,ecx
10001089:	0f 86 cc fe ff ff    	jbe    10000f5b <ssfn_load+0x38>
1000108f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10001092:	39 c3                	cmp    ebx,eax
10001094:	0f 86 c1 fe ff ff    	jbe    10000f5b <ssfn_load+0x38>
1000109a:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
1000109d:	0f 86 b8 fe ff ff    	jbe    10000f5b <ssfn_load+0x38>
100010a3:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100010a6:	0f 86 af fe ff ff    	jbe    10000f5b <ssfn_load+0x38>
100010ac:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100010af:	0f 86 a6 fe ff ff    	jbe    10000f5b <ssfn_load+0x38>
100010b5:	39 c1                	cmp    ecx,eax
100010b7:	0f 83 9e fe ff ff    	jae    10000f5b <ssfn_load+0x38>
100010bd:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100010c2:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100010c5:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010cb:	40                   	inc    eax
100010cc:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010d2:	52                   	push   edx
100010d3:	c1 e0 02             	shl    eax,0x2
100010d6:	52                   	push   edx
100010d7:	50                   	push   eax
100010d8:	ff 33                	push   DWORD PTR [ebx]
100010da:	e8 fc ff ff ff       	call   100010db <ssfn_load+0x1b8>	100010db: R_386_PC32	realloc
100010df:	83 c4 10             	add    esp,0x10
100010e2:	89 03                	mov    DWORD PTR [ebx],eax
100010e4:	85 c0                	test   eax,eax
100010e6:	75 0f                	jne    100010f7 <ssfn_load+0x1d4>
100010e8:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010f2:	83 cd ff             	or     ebp,0xffffffff
100010f5:	eb 18                	jmp    1000110f <ssfn_load+0x1ec>
100010f7:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010fd:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001101:	89 f8                	mov    eax,edi
10001103:	e8 ad f3 ff ff       	call   100004b5 <_ssfn_fc.part.1>
10001108:	eb 05                	jmp    1000110f <ssfn_load+0x1ec>
1000110a:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000110f:	83 c4 1c             	add    esp,0x1c
10001112:	89 e8                	mov    eax,ebp
10001114:	5b                   	pop    ebx
10001115:	5e                   	pop    esi
10001116:	5f                   	pop    edi
10001117:	5d                   	pop    ebp
10001118:	c3                   	ret    

10001119 <ssfn_free>:
10001119:	57                   	push   edi
1000111a:	56                   	push   esi
1000111b:	53                   	push   ebx
1000111c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001120:	85 db                	test   ebx,ebx
10001122:	74 7e                	je     100011a2 <ssfn_free+0x89>
10001124:	89 d8                	mov    eax,ebx
10001126:	e8 8a f3 ff ff       	call   100004b5 <_ssfn_fc.part.1>
1000112b:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
10001132:	74 32                	je     10001166 <ssfn_free+0x4d>
10001134:	31 f6                	xor    esi,esi
10001136:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
1000113c:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
10001142:	7e 16                	jle    1000115a <ssfn_free+0x41>
10001144:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001147:	85 c0                	test   eax,eax
10001149:	74 0c                	je     10001157 <ssfn_free+0x3e>
1000114b:	83 ec 0c             	sub    esp,0xc
1000114e:	50                   	push   eax
1000114f:	e8 fc ff ff ff       	call   10001150 <ssfn_free+0x37>	10001150: R_386_PC32	free
10001154:	83 c4 10             	add    esp,0x10
10001157:	46                   	inc    esi
10001158:	eb dc                	jmp    10001136 <ssfn_free+0x1d>
1000115a:	83 ec 0c             	sub    esp,0xc
1000115d:	50                   	push   eax
1000115e:	e8 fc ff ff ff       	call   1000115f <ssfn_free+0x46>	1000115f: R_386_PC32	free
10001163:	83 c4 10             	add    esp,0x10
10001166:	31 f6                	xor    esi,esi
10001168:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
1000116b:	85 c0                	test   eax,eax
1000116d:	74 0c                	je     1000117b <ssfn_free+0x62>
1000116f:	83 ec 0c             	sub    esp,0xc
10001172:	50                   	push   eax
10001173:	e8 fc ff ff ff       	call   10001174 <ssfn_free+0x5b>	10001174: R_386_PC32	free
10001178:	83 c4 10             	add    esp,0x10
1000117b:	46                   	inc    esi
1000117c:	83 fe 05             	cmp    esi,0x5
1000117f:	75 e7                	jne    10001168 <ssfn_free+0x4f>
10001181:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10001187:	85 c0                	test   eax,eax
10001189:	74 0c                	je     10001197 <ssfn_free+0x7e>
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	50                   	push   eax
1000118f:	e8 fc ff ff ff       	call   10001190 <ssfn_free+0x77>	10001190: R_386_PC32	free
10001194:	83 c4 10             	add    esp,0x10
10001197:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000119c:	31 c0                	xor    eax,eax
1000119e:	89 df                	mov    edi,ebx
100011a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100011a2:	5b                   	pop    ebx
100011a3:	5e                   	pop    esi
100011a4:	5f                   	pop    edi
100011a5:	c3                   	ret    

100011a6 <ssfn_mem>:
100011a6:	55                   	push   ebp
100011a7:	31 c0                	xor    eax,eax
100011a9:	57                   	push   edi
100011aa:	56                   	push   esi
100011ab:	53                   	push   ebx
100011ac:	83 ec 08             	sub    esp,0x8
100011af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100011b3:	85 d2                	test   edx,edx
100011b5:	0f 84 8e 00 00 00    	je     10001249 <ssfn_mem+0xa3>
100011bb:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100011c0:	31 c9                	xor    ecx,ecx
100011c2:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011c9:	41                   	inc    ecx
100011ca:	8d 04 98             	lea    eax,[eax+ebx*4]
100011cd:	83 f9 05             	cmp    ecx,0x5
100011d0:	75 f0                	jne    100011c2 <ssfn_mem+0x1c>
100011d2:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011d8:	31 c9                	xor    ecx,ecx
100011da:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011e1:	89 34 24             	mov    DWORD PTR [esp],esi
100011e4:	85 f6                	test   esi,esi
100011e6:	74 48                	je     10001230 <ssfn_mem+0x8a>
100011e8:	31 db                	xor    ebx,ebx
100011ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011ed:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011f4:	85 ff                	test   edi,edi
100011f6:	74 2a                	je     10001222 <ssfn_mem+0x7c>
100011f8:	31 f6                	xor    esi,esi
100011fa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011fe:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001201:	85 ed                	test   ebp,ebp
10001203:	74 0f                	je     10001214 <ssfn_mem+0x6e>
10001205:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001209:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
1000120d:	0f af fd             	imul   edi,ebp
10001210:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001214:	46                   	inc    esi
10001215:	81 fe 00 01 00 00    	cmp    esi,0x100
1000121b:	75 dd                	jne    100011fa <ssfn_mem+0x54>
1000121d:	05 00 04 00 00       	add    eax,0x400
10001222:	43                   	inc    ebx
10001223:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001229:	75 bf                	jne    100011ea <ssfn_mem+0x44>
1000122b:	05 00 04 00 00       	add    eax,0x400
10001230:	41                   	inc    ecx
10001231:	83 f9 11             	cmp    ecx,0x11
10001234:	75 a4                	jne    100011da <ssfn_mem+0x34>
10001236:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
1000123d:	74 0a                	je     10001249 <ssfn_mem+0xa3>
1000123f:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001245:	01 d2                	add    edx,edx
10001247:	01 d0                	add    eax,edx
10001249:	83 c4 08             	add    esp,0x8
1000124c:	5b                   	pop    ebx
1000124d:	5e                   	pop    esi
1000124e:	5f                   	pop    edi
1000124f:	5d                   	pop    ebp
10001250:	c3                   	ret    

10001251 <ssfn_select>:
10001251:	55                   	push   ebp
10001252:	57                   	push   edi
10001253:	56                   	push   esi
10001254:	53                   	push   ebx
10001255:	83 ec 1c             	sub    esp,0x1c
10001258:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000125c:	85 db                	test   ebx,ebx
1000125e:	75 0a                	jne    1000126a <ssfn_select+0x19>
10001260:	be fc ff ff ff       	mov    esi,0xfffffffc
10001265:	e9 13 01 00 00       	jmp    1000137d <ssfn_select+0x12c>
1000126a:	89 d8                	mov    eax,ebx
1000126c:	e8 44 f2 ff ff       	call   100004b5 <_ssfn_fc.part.1>
10001271:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001275:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
1000127b:	0f 85 e9 00 00 00    	jne    1000136a <ssfn_select+0x119>
10001281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001285:	83 e8 08             	sub    eax,0x8
10001288:	3d b8 00 00 00       	cmp    eax,0xb8
1000128d:	0f 87 de 00 00 00    	ja     10001371 <ssfn_select+0x120>
10001293:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
1000129b:	75 76                	jne    10001313 <ssfn_select+0xc2>
1000129d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100012a2:	74 bc                	je     10001260 <ssfn_select+0xf>
100012a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012a8:	80 38 00             	cmp    BYTE PTR [eax],0x0
100012ab:	74 b3                	je     10001260 <ssfn_select+0xf>
100012ad:	31 ed                	xor    ebp,ebp
100012af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012b3:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100012b7:	74 03                	je     100012bc <ssfn_select+0x6b>
100012b9:	45                   	inc    ebp
100012ba:	eb f3                	jmp    100012af <ssfn_select+0x5e>
100012bc:	8d 43 14             	lea    eax,[ebx+0x14]
100012bf:	89 df                	mov    edi,ebx
100012c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012c5:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012cb:	31 d2                	xor    edx,edx
100012cd:	89 04 24             	mov    DWORD PTR [esp],eax
100012d0:	39 14 24             	cmp    DWORD PTR [esp],edx
100012d3:	7e 33                	jle    10001308 <ssfn_select+0xb7>
100012d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012d9:	8b 07                	mov    eax,DWORD PTR [edi]
100012db:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012de:	50                   	push   eax
100012df:	8d 41 20             	lea    eax,[ecx+0x20]
100012e2:	55                   	push   ebp
100012e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012e7:	50                   	push   eax
100012e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012ec:	e8 fc ff ff ff       	call   100012ed <ssfn_select+0x9c>	100012ed: R_386_PC32	memcmp
100012f1:	83 c4 10             	add    esp,0x10
100012f4:	85 c0                	test   eax,eax
100012f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012fe:	75 05                	jne    10001305 <ssfn_select+0xb4>
10001300:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
10001303:	eb 34                	jmp    10001339 <ssfn_select+0xe8>
10001305:	42                   	inc    edx
10001306:	eb c8                	jmp    100012d0 <ssfn_select+0x7f>
10001308:	83 c7 04             	add    edi,0x4
1000130b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000130f:	75 b4                	jne    100012c5 <ssfn_select+0x74>
10001311:	eb 65                	jmp    10001378 <ssfn_select+0x127>
10001313:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
1000131b:	74 15                	je     10001332 <ssfn_select+0xe1>
1000131d:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
10001322:	7f 54                	jg     10001378 <ssfn_select+0x127>
10001324:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001328:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001330:	74 46                	je     10001378 <ssfn_select+0x127>
10001332:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000133d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001344:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
1000134a:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001354:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001358:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
1000135e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001362:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001368:	eb 13                	jmp    1000137d <ssfn_select+0x12c>
1000136a:	be fb ff ff ff       	mov    esi,0xfffffffb
1000136f:	eb 0c                	jmp    1000137d <ssfn_select+0x12c>
10001371:	be fa ff ff ff       	mov    esi,0xfffffffa
10001376:	eb 05                	jmp    1000137d <ssfn_select+0x12c>
10001378:	be fd ff ff ff       	mov    esi,0xfffffffd
1000137d:	83 c4 1c             	add    esp,0x1c
10001380:	89 f0                	mov    eax,esi
10001382:	5b                   	pop    ebx
10001383:	5e                   	pop    esi
10001384:	5f                   	pop    edi
10001385:	5d                   	pop    ebp
10001386:	c3                   	ret    

10001387 <ssfn_render>:
10001387:	55                   	push   ebp
10001388:	57                   	push   edi
10001389:	56                   	push   esi
1000138a:	53                   	push   ebx
1000138b:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001391:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001398:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100013a3:	85 ed                	test   ebp,ebp
100013a5:	0f 94 c2             	sete   dl
100013a8:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100013b0:	0f 94 c0             	sete   al
100013b3:	08 c2                	or     dl,al
100013b5:	74 0a                	je     100013c1 <ssfn_render+0x3a>
100013b7:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100013bc:	e9 14 1e 00 00       	jmp    100031d5 <ssfn_render+0x1e4e>
100013c1:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013c8:	31 c9                	xor    ecx,ecx
100013ca:	8a 00                	mov    al,BYTE PTR [eax]
100013cc:	84 c0                	test   al,al
100013ce:	0f 84 01 1e 00 00    	je     100031d5 <ssfn_render+0x1e4e>
100013d4:	3c 0d                	cmp    al,0xd
100013d6:	75 0f                	jne    100013e7 <ssfn_render+0x60>
100013d8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013df:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013e5:	eb 31                	jmp    10001418 <ssfn_render+0x91>
100013e7:	3c 0a                	cmp    al,0xa
100013e9:	75 37                	jne    10001422 <ssfn_render+0x9b>
100013eb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013f2:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013f8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013fb:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001401:	85 c0                	test   eax,eax
10001403:	75 06                	jne    1000140b <ssfn_render+0x84>
10001405:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
1000140b:	01 d0                	add    eax,edx
1000140d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001414:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001418:	b9 01 00 00 00       	mov    ecx,0x1
1000141d:	e9 b3 1d 00 00       	jmp    100031d5 <ssfn_render+0x1e4e>
10001422:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001425:	85 c0                	test   eax,eax
10001427:	74 3e                	je     10001467 <ssfn_render+0xe0>
10001429:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
1000142c:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
10001433:	56                   	push   esi
10001434:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000143b:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001442:	e8 a0 f4 ff ff       	call   100008e7 <_ssfn_c>
10001447:	5b                   	pop    ebx
10001448:	85 c0                	test   eax,eax
1000144a:	0f 85 71 02 00 00    	jne    100016c1 <ssfn_render+0x33a>
10001450:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001456:	81 e2 00 01 00 00    	and    edx,0x100
1000145c:	0f 84 fd 01 00 00    	je     1000165f <ssfn_render+0x2d8>
10001462:	e9 1d 02 00 00       	jmp    10001684 <ssfn_render+0x2fd>
10001467:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
1000146d:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10001474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001478:	3d fd 00 00 00       	cmp    eax,0xfd
1000147d:	7f 08                	jg     10001487 <ssfn_render+0x100>
1000147f:	89 c3                	mov    ebx,eax
10001481:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001485:	eb 3f                	jmp    100014c6 <ssfn_render+0x13f>
10001487:	31 db                	xor    ebx,ebx
10001489:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001491:	eb 33                	jmp    100014c6 <ssfn_render+0x13f>
10001493:	85 c0                	test   eax,eax
10001495:	0f 84 64 01 00 00    	je     100015ff <ssfn_render+0x278>
1000149b:	43                   	inc    ebx
1000149c:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100014a0:	7e 28                	jle    100014ca <ssfn_render+0x143>
100014a2:	85 c0                	test   eax,eax
100014a4:	0f 85 17 02 00 00    	jne    100016c1 <ssfn_render+0x33a>
100014aa:	31 db                	xor    ebx,ebx
100014ac:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100014b4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100014bc:	74 92                	je     10001450 <ssfn_render+0xc9>
100014be:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100014c6:	31 c0                	xor    eax,eax
100014c8:	eb d2                	jmp    1000149c <ssfn_render+0x115>
100014ca:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014ce:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014d5:	74 bc                	je     10001493 <ssfn_render+0x10c>
100014d7:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014e2:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014e9:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014f0:	7e 50                	jle    10001542 <ssfn_render+0x1bb>
100014f2:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014f5:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014f9:	c1 fa 04             	sar    edx,0x4
100014fc:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
10001502:	80 e2 03             	and    dl,0x3
10001505:	75 32                	jne    10001539 <ssfn_render+0x1b2>
10001507:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
1000150b:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001511:	75 26                	jne    10001539 <ssfn_render+0x1b2>
10001513:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
1000151a:	50                   	push   eax
1000151b:	89 f8                	mov    eax,edi
1000151d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001524:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000152b:	e8 b7 f3 ff ff       	call   100008e7 <_ssfn_c>
10001530:	59                   	pop    ecx
10001531:	85 c0                	test   eax,eax
10001533:	0f 85 04 01 00 00    	jne    1000163d <ssfn_render+0x2b6>
10001539:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001540:	eb a0                	jmp    100014e2 <ssfn_render+0x15b>
10001542:	85 c0                	test   eax,eax
10001544:	0f 85 51 ff ff ff    	jne    1000149b <ssfn_render+0x114>
1000154a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001555:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000155c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001563:	0f 8e f9 1b 00 00    	jle    10003162 <ssfn_render+0x1ddb>
10001569:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000156c:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001570:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001576:	74 09                	je     10001581 <ssfn_render+0x1fa>
10001578:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000157f:	eb d4                	jmp    10001555 <ssfn_render+0x1ce>
10001581:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001588:	57                   	push   edi
10001589:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001590:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001597:	e8 4b f3 ff ff       	call   100008e7 <_ssfn_c>
1000159c:	5a                   	pop    edx
1000159d:	85 c0                	test   eax,eax
1000159f:	74 d7                	je     10001578 <ssfn_render+0x1f1>
100015a1:	e9 97 00 00 00       	jmp    1000163d <ssfn_render+0x2b6>
100015a6:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015a9:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100015ad:	c1 fa 04             	sar    edx,0x4
100015b0:	31 ca                	xor    edx,ecx
100015b2:	80 e2 03             	and    dl,0x3
100015b5:	0f 84 b7 1b 00 00    	je     10003172 <ssfn_render+0x1deb>
100015bb:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015c2:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015c9:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015cf:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015d6:	7f ce                	jg     100015a6 <ssfn_render+0x21f>
100015d8:	83 e1 03             	and    ecx,0x3
100015db:	83 f9 03             	cmp    ecx,0x3
100015de:	75 1f                	jne    100015ff <ssfn_render+0x278>
100015e0:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015eb:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015f2:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015f9:	0f 8f 9c 1b 00 00    	jg     1000319b <ssfn_render+0x1e14>
100015ff:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000160a:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001611:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001618:	7e 3e                	jle    10001658 <ssfn_render+0x2d1>
1000161a:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000161d:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001624:	57                   	push   edi
10001625:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000162c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001633:	e8 af f2 ff ff       	call   100008e7 <_ssfn_c>
10001638:	5a                   	pop    edx
10001639:	85 c0                	test   eax,eax
1000163b:	74 12                	je     1000164f <ssfn_render+0x2c8>
1000163d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001644:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001647:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
1000164a:	e9 4c fe ff ff       	jmp    1000149b <ssfn_render+0x114>
1000164f:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001656:	eb b2                	jmp    1000160a <ssfn_render+0x283>
10001658:	31 c0                	xor    eax,eax
1000165a:	e9 3c fe ff ff       	jmp    1000149b <ssfn_render+0x114>
1000165f:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10001665:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001670:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10001676:	7f 16                	jg     1000168e <ssfn_render+0x307>
10001678:	89 da                	mov    edx,ebx
1000167a:	31 c0                	xor    eax,eax
1000167c:	39 da                	cmp    edx,ebx
1000167e:	7e 15                	jle    10001695 <ssfn_render+0x30e>
10001680:	85 c0                	test   eax,eax
10001682:	75 3d                	jne    100016c1 <ssfn_render+0x33a>
10001684:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001689:	e9 47 1b 00 00       	jmp    100031d5 <ssfn_render+0x1e4e>
1000168e:	bb 04 00 00 00       	mov    ebx,0x4
10001693:	eb e5                	jmp    1000167a <ssfn_render+0x2f3>
10001695:	85 c0                	test   eax,eax
10001697:	75 28                	jne    100016c1 <ssfn_render+0x33a>
10001699:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100016a1:	74 1b                	je     100016be <ssfn_render+0x337>
100016a3:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100016a7:	8b 09                	mov    ecx,DWORD PTR [ecx]
100016a9:	85 c9                	test   ecx,ecx
100016ab:	74 11                	je     100016be <ssfn_render+0x337>
100016ad:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100016b0:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100016b4:	78 08                	js     100016be <ssfn_render+0x337>
100016b6:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100016b9:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100016bc:	01 c8                	add    eax,ecx
100016be:	42                   	inc    edx
100016bf:	eb bb                	jmp    1000167c <ssfn_render+0x2f5>
100016c1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100016c4:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016c9:	85 d2                	test   edx,edx
100016cb:	0f 84 04 1b 00 00    	je     100031d5 <ssfn_render+0x1e4e>
100016d1:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016d5:	0f 84 fa 1a 00 00    	je     100031d5 <ssfn_render+0x1e4e>
100016db:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016e5:	85 ff                	test   edi,edi
100016e7:	0f 84 e8 1a 00 00    	je     100031d5 <ssfn_render+0x1e4e>
100016ed:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016f4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016f8:	c1 ef 10             	shr    edi,0x10
100016fb:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016ff:	83 ff 10             	cmp    edi,0x10
10001702:	0f 87 af fc ff ff    	ja     100013b7 <ssfn_render+0x30>
10001708:	8d 70 06             	lea    esi,[eax+0x6]
1000170b:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001711:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001715:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
1000171b:	89 f7                	mov    edi,esi
1000171d:	81 e7 00 02 00 00    	and    edi,0x200
10001723:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001727:	75 34                	jne    1000175d <ssfn_render+0x3d6>
10001729:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000172d:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001734:	85 c9                	test   ecx,ecx
10001736:	74 25                	je     1000175d <ssfn_render+0x3d6>
10001738:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000173c:	0f b6 ff             	movzx  edi,bh
1000173f:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001742:	85 c9                	test   ecx,ecx
10001744:	74 17                	je     1000175d <ssfn_render+0x3d6>
10001746:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
1000174b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000174e:	85 c9                	test   ecx,ecx
10001750:	74 0b                	je     1000175d <ssfn_render+0x3d6>
10001752:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001758:	e9 25 0d 00 00       	jmp    10002482 <ssfn_render+0x10fb>
1000175d:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001761:	f7 c6 40 00 00 00    	test   esi,0x40
10001767:	75 1a                	jne    10001783 <ssfn_render+0x3fc>
10001769:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
1000176d:	7e 10                	jle    1000177f <ssfn_render+0x3f8>
1000176f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001773:	83 c7 04             	add    edi,0x4
10001776:	83 e7 fc             	and    edi,0xfffffffc
10001779:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000177d:	eb 04                	jmp    10001783 <ssfn_render+0x3fc>
1000177f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001783:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001788:	f7 c6 02 00 00 00    	test   esi,0x2
1000178e:	74 14                	je     100017a4 <ssfn_render+0x41d>
10001790:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
10001793:	c0 eb 05             	shr    bl,0x5
10001796:	89 df                	mov    edi,ebx
10001798:	83 f7 01             	xor    edi,0x1
1000179b:	83 e7 01             	and    edi,0x1
1000179e:	89 fb                	mov    ebx,edi
100017a0:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100017a4:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100017a9:	83 e6 01             	and    esi,0x1
100017ac:	74 10                	je     100017be <ssfn_render+0x437>
100017ae:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100017b2:	75 0a                	jne    100017be <ssfn_render+0x437>
100017b4:	8d 51 40             	lea    edx,[ecx+0x40]
100017b7:	c1 fa 06             	sar    edx,0x6
100017ba:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100017be:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100017c2:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100017c7:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017cb:	99                   	cdq    
100017cc:	f7 f9                	idiv   ecx
100017ce:	89 c1                	mov    ecx,eax
100017d0:	31 c0                	xor    eax,eax
100017d2:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017d7:	74 0c                	je     100017e5 <ssfn_render+0x45e>
100017d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017dd:	be 04 00 00 00       	mov    esi,0x4
100017e2:	99                   	cdq    
100017e3:	f7 fe                	idiv   esi
100017e5:	01 c8                	add    eax,ecx
100017e7:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017ec:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017f1:	01 f0                	add    eax,esi
100017f3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017ff:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001808:	3d ff f4 00 00       	cmp    eax,0xf4ff
1000180d:	0f 8f c2 19 00 00    	jg     100031d5 <ssfn_render+0x1e4e>
10001813:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001818:	0f 85 f0 00 00 00    	jne    1000190e <ssfn_render+0x587>
1000181e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001822:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001826:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
1000182d:	75 2f                	jne    1000185e <ssfn_render+0x4d7>
1000182f:	83 ec 0c             	sub    esp,0xc
10001832:	68 00 04 00 00       	push   0x400
10001837:	e8 fc ff ff ff       	call   10001838 <ssfn_render+0x4b1>	10001838: R_386_PC32	malloc
1000183c:	83 c4 10             	add    esp,0x10
1000183f:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001845:	85 c0                	test   eax,eax
10001847:	75 08                	jne    10001851 <ssfn_render+0x4ca>
10001849:	83 c9 ff             	or     ecx,0xffffffff
1000184c:	e9 84 19 00 00       	jmp    100031d5 <ssfn_render+0x1e4e>
10001851:	89 c7                	mov    edi,eax
10001853:	b9 00 01 00 00       	mov    ecx,0x100
10001858:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000185c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000185e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001862:	0f b6 dc             	movzx  ebx,ah
10001865:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
1000186b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
1000186e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001871:	75 3a                	jne    100018ad <ssfn_render+0x526>
10001873:	83 ec 0c             	sub    esp,0xc
10001876:	68 00 04 00 00       	push   0x400
1000187b:	e8 fc ff ff ff       	call   1000187c <ssfn_render+0x4f5>	1000187c: R_386_PC32	malloc
10001880:	89 03                	mov    DWORD PTR [ebx],eax
10001882:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001889:	83 c4 10             	add    esp,0x10
1000188c:	89 c2                	mov    edx,eax
1000188e:	0f b6 c4             	movzx  eax,ah
10001891:	c1 ea 10             	shr    edx,0x10
10001894:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
1000189b:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
1000189e:	85 d2                	test   edx,edx
100018a0:	74 a7                	je     10001849 <ssfn_render+0x4c2>
100018a2:	b9 00 01 00 00       	mov    ecx,0x100
100018a7:	31 c0                	xor    eax,eax
100018a9:	89 d7                	mov    edi,edx
100018ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100018ad:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100018b4:	83 ec 0c             	sub    esp,0xc
100018b7:	0f b6 cc             	movzx  ecx,ah
100018ba:	89 c2                	mov    edx,eax
100018bc:	0f b6 c0             	movzx  eax,al
100018bf:	c1 ea 10             	shr    edx,0x10
100018c2:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018c9:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018cc:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018d3:	83 c0 08             	add    eax,0x8
100018d6:	50                   	push   eax
100018d7:	e8 fc ff ff ff       	call   100018d8 <ssfn_render+0x551>	100018d8: R_386_PC32	malloc
100018dc:	89 03                	mov    DWORD PTR [ebx],eax
100018de:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018e4:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018eb:	83 c4 10             	add    esp,0x10
100018ee:	89 c2                	mov    edx,eax
100018f0:	0f b6 cc             	movzx  ecx,ah
100018f3:	c1 ea 10             	shr    edx,0x10
100018f6:	0f b6 c0             	movzx  eax,al
100018f9:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001900:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001903:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001907:	75 0e                	jne    10001917 <ssfn_render+0x590>
10001909:	e9 3b ff ff ff       	jmp    10001849 <ssfn_render+0x4c2>
1000190e:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001911:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001917:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
1000191d:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001921:	74 2a                	je     1000194d <ssfn_render+0x5c6>
10001923:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001928:	74 23                	je     1000194d <ssfn_render+0x5c6>
1000192a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000192d:	bb 04 00 00 00       	mov    ebx,0x4
10001932:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001936:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
1000193a:	89 cf                	mov    edi,ecx
1000193c:	29 c7                	sub    edi,eax
1000193e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001942:	0f af c7             	imul   eax,edi
10001945:	99                   	cdq    
10001946:	f7 fb                	idiv   ebx
10001948:	99                   	cdq    
10001949:	f7 f9                	idiv   ecx
1000194b:	eb 02                	jmp    1000194f <ssfn_render+0x5c8>
1000194d:	31 c0                	xor    eax,eax
1000194f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001955:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001959:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000195d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001965:	66 89 32             	mov    WORD PTR [edx],si
10001968:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
1000196d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001973:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001976:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000197c:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001982:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001985:	01 c3                	add    ebx,eax
10001987:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
1000198a:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001990:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001996:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001999:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
1000199c:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100019a2:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019a8:	8a 12                	mov    dl,BYTE PTR [edx]
100019aa:	83 e2 3f             	and    edx,0x3f
100019ad:	01 d0                	add    eax,edx
100019af:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100019b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100019b6:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019bc:	8d 50 08             	lea    edx,[eax+0x8]
100019bf:	b0 ff                	mov    al,0xff
100019c1:	89 d7                	mov    edi,edx
100019c3:	f3 aa                	rep stos BYTE PTR es:[edi],al
100019c5:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019cb:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019cf:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019d5:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019dd:	c1 e0 04             	shl    eax,0x4
100019e0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019e8:	c1 e0 04             	shl    eax,0x4
100019eb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019ef:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019f5:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019f9:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019fd:	0f 8e 4d 0a 00 00    	jle    10002450 <ssfn_render+0x10c9>
10001a03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001a07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a0b:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001a0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001a11:	8a 12                	mov    dl,BYTE PTR [edx]
10001a13:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001a17:	83 e2 40             	and    edx,0x40
10001a1a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001a1e:	88 c2                	mov    dl,al
10001a20:	21 ca                	and    edx,ecx
10001a22:	fe c2                	inc    dl
10001a24:	75 14                	jne    10001a3a <ssfn_render+0x6b3>
10001a26:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a2b:	19 c0                	sbb    eax,eax
10001a2d:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a35:	e9 09 0a 00 00       	jmp    10002443 <ssfn_render+0x10bc>
10001a3a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a3e:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a41:	c1 e0 04             	shl    eax,0x4
10001a44:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a48:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a4d:	99                   	cdq    
10001a4e:	f7 fe                	idiv   esi
10001a50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a54:	0f b6 c1             	movzx  eax,cl
10001a57:	c1 e0 04             	shl    eax,0x4
10001a5a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a5f:	99                   	cdq    
10001a60:	f7 fe                	idiv   esi
10001a62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a6a:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a6e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a72:	c1 e2 10             	shl    edx,0x10
10001a75:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a7a:	74 0e                	je     10001a8a <ssfn_render+0x703>
10001a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a80:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a85:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a88:	eb 0c                	jmp    10001a96 <ssfn_render+0x70f>
10001a8a:	c1 e0 08             	shl    eax,0x8
10001a8d:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a92:	09 d0                	or     eax,edx
10001a94:	09 c3                	or     ebx,eax
10001a96:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a99:	8a 01                	mov    al,BYTE PTR [ecx]
10001a9b:	84 c0                	test   al,al
10001a9d:	0f 88 17 05 00 00    	js     10001fba <ssfn_render+0xc33>
10001aa3:	89 c7                	mov    edi,eax
10001aa5:	83 e7 3f             	and    edi,0x3f
10001aa8:	a8 40                	test   al,0x40
10001aaa:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001aae:	74 10                	je     10001ac0 <ssfn_render+0x739>
10001ab0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001ab4:	89 f8                	mov    eax,edi
10001ab6:	41                   	inc    ecx
10001ab7:	c1 e0 08             	shl    eax,0x8
10001aba:	09 c2                	or     edx,eax
10001abc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001ac0:	8d 41 01             	lea    eax,[ecx+0x1]
10001ac3:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001acd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001ad1:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001adc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ae0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001ae4:	83 c0 04             	add    eax,0x4
10001ae7:	c1 f8 02             	sar    eax,0x2
10001aea:	01 c7                	add    edi,eax
10001aec:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001af3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001af7:	0f 8f d7 01 00 00    	jg     10001cd4 <ssfn_render+0x94d>
10001afd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001b00:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001b04:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001b0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001b10:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001b13:	c1 e0 04             	shl    eax,0x4
10001b16:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b1b:	99                   	cdq    
10001b1c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b20:	01 c6                	add    esi,eax
10001b22:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001b26:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b2a:	c1 e0 04             	shl    eax,0x4
10001b2d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b32:	99                   	cdq    
10001b33:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b37:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b3b:	01 c3                	add    ebx,eax
10001b3d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b41:	89 c8                	mov    eax,ecx
10001b43:	01 c9                	add    ecx,ecx
10001b45:	c1 f8 02             	sar    eax,0x2
10001b48:	83 e1 06             	and    ecx,0x6
10001b4b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b4f:	d3 f8                	sar    eax,cl
10001b51:	83 e0 03             	and    eax,0x3
10001b54:	89 c1                	mov    ecx,eax
10001b56:	83 f8 02             	cmp    eax,0x2
10001b59:	74 4a                	je     10001ba5 <ssfn_render+0x81e>
10001b5b:	83 f8 03             	cmp    eax,0x3
10001b5e:	0f 84 e4 00 00 00    	je     10001c48 <ssfn_render+0x8c1>
10001b64:	49                   	dec    ecx
10001b65:	74 20                	je     10001b87 <ssfn_render+0x800>
10001b67:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b6d:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b73:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b79:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b7f:	83 c7 02             	add    edi,0x2
10001b82:	e9 41 01 00 00       	jmp    10001cc8 <ssfn_render+0x941>
10001b87:	83 c7 02             	add    edi,0x2
10001b8a:	50                   	push   eax
10001b8b:	50                   	push   eax
10001b8c:	89 e8                	mov    eax,ebp
10001b8e:	53                   	push   ebx
10001b8f:	56                   	push   esi
10001b90:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b94:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b98:	e8 9c e9 ff ff       	call   10000539 <_ssfn_l>
10001b9d:	83 c4 10             	add    esp,0x10
10001ba0:	e9 23 01 00 00       	jmp    10001cc8 <ssfn_render+0x941>
10001ba5:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ba9:	83 c7 04             	add    edi,0x4
10001bac:	c1 e0 04             	shl    eax,0x4
10001baf:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bb4:	99                   	cdq    
10001bb5:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bb9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001bbd:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001bc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001bc5:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bc9:	c1 e0 04             	shl    eax,0x4
10001bcc:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bd1:	99                   	cdq    
10001bd2:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bd6:	83 ec 0c             	sub    esp,0xc
10001bd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001bdd:	6a 00                	push   0x0
10001bdf:	53                   	push   ebx
10001be0:	56                   	push   esi
10001be1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001be5:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001be9:	99                   	cdq    
10001bea:	f7 f9                	idiv   ecx
10001bec:	01 d8                	add    eax,ebx
10001bee:	50                   	push   eax
10001bef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bf3:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bf7:	99                   	cdq    
10001bf8:	f7 f9                	idiv   ecx
10001bfa:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001bfe:	50                   	push   eax
10001bff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001c03:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c07:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001c0d:	99                   	cdq    
10001c0e:	f7 f9                	idiv   ecx
10001c10:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001c16:	50                   	push   eax
10001c17:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001c1b:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001c21:	99                   	cdq    
10001c22:	f7 f9                	idiv   ecx
10001c24:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c2a:	50                   	push   eax
10001c2b:	89 e8                	mov    eax,ebp
10001c2d:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c33:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c39:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c3d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c41:	e8 04 ea ff ff       	call   1000064a <_ssfn_b>
10001c46:	eb 7d                	jmp    10001cc5 <ssfn_render+0x93e>
10001c48:	83 ec 0c             	sub    esp,0xc
10001c4b:	83 c7 06             	add    edi,0x6
10001c4e:	6a 00                	push   0x0
10001c50:	53                   	push   ebx
10001c51:	56                   	push   esi
10001c52:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c56:	c1 e0 04             	shl    eax,0x4
10001c59:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c5e:	99                   	cdq    
10001c5f:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c63:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c67:	50                   	push   eax
10001c68:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c6c:	c1 e0 04             	shl    eax,0x4
10001c6f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c74:	99                   	cdq    
10001c75:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c79:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c7d:	50                   	push   eax
10001c7e:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c82:	c1 e0 04             	shl    eax,0x4
10001c85:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c8a:	99                   	cdq    
10001c8b:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c8f:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c93:	50                   	push   eax
10001c94:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c98:	c1 e0 04             	shl    eax,0x4
10001c9b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001ca0:	99                   	cdq    
10001ca1:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001ca5:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001ca9:	50                   	push   eax
10001caa:	89 e8                	mov    eax,ebp
10001cac:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001cb2:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001cb8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001cc0:	e8 85 e9 ff ff       	call   1000064a <_ssfn_b>
10001cc5:	83 c4 30             	add    esp,0x30
10001cc8:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001ccf:	e9 18 fe ff ff       	jmp    10001aec <ssfn_render+0x765>
10001cd4:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001cda:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001ce0:	75 0e                	jne    10001cf0 <ssfn_render+0x969>
10001ce2:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001ce8:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cee:	74 2e                	je     10001d1e <ssfn_render+0x997>
10001cf0:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cf6:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cfc:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001d00:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001d06:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001d0c:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001d12:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001d17:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001d1e:	b3 fe                	mov    bl,0xfe
10001d20:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001d27:	0f 8e 16 07 00 00    	jle    10002443 <ssfn_render+0x10bc>
10001d2d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d35:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d45:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d4d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d59:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d5d:	0f 8d de 06 00 00    	jge    10002441 <ssfn_render+0x10ba>
10001d63:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d69:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d74:	83 e8 03             	sub    eax,0x3
10001d77:	31 f6                	xor    esi,esi
10001d79:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d7d:	89 f8                	mov    eax,edi
10001d7f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d83:	c1 f8 02             	sar    eax,0x2
10001d86:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d8a:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d91:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d95:	0f 8e 16 01 00 00    	jle    10001eb1 <ssfn_render+0xb2a>
10001d9b:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001da1:	8d 47 01             	lea    eax,[edi+0x1]
10001da4:	01 c0                	add    eax,eax
10001da6:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001daa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001dae:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001db3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001db7:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001dbb:	7d 0c                	jge    10001dc9 <ssfn_render+0xa42>
10001dbd:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dc1:	0f 8f db 00 00 00    	jg     10001ea2 <ssfn_render+0xb1b>
10001dc7:	eb 0a                	jmp    10001dd3 <ssfn_render+0xa4c>
10001dc9:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dcd:	0f 8e cf 00 00 00    	jle    10001ea2 <ssfn_render+0xb1b>
10001dd3:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001dd8:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001ddc:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001de1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001de5:	89 d8                	mov    eax,ebx
10001de7:	c1 fa 04             	sar    edx,0x4
10001dea:	c1 f8 04             	sar    eax,0x4
10001ded:	39 c2                	cmp    edx,eax
10001def:	75 0a                	jne    10001dfb <ssfn_render+0xa74>
10001df1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001df5:	01 c8                	add    eax,ecx
10001df7:	d1 f8                	sar    eax,1
10001df9:	eb 1a                	jmp    10001e15 <ssfn_render+0xa8e>
10001dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001dff:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001e03:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001e07:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001e0b:	0f af c1             	imul   eax,ecx
10001e0e:	99                   	cdq    
10001e0f:	f7 fb                	idiv   ebx
10001e11:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001e15:	c1 f8 04             	sar    eax,0x4
10001e18:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001e1d:	74 04                	je     10001e23 <ssfn_render+0xa9c>
10001e1f:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001e23:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e28:	75 3f                	jne    10001e69 <ssfn_render+0xae2>
10001e2a:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e2f:	74 38                	je     10001e69 <ssfn_render+0xae2>
10001e31:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e35:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e3b:	f7 db                	neg    ebx
10001e3d:	01 c2                	add    edx,eax
10001e3f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e43:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e47:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e4b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e4f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e53:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e57:	74 10                	je     10001e69 <ssfn_render+0xae2>
10001e59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e5d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e61:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e65:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e69:	31 d2                	xor    edx,edx
10001e6b:	39 f2                	cmp    edx,esi
10001e6d:	75 0b                	jne    10001e7a <ssfn_render+0xaf3>
10001e6f:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e77:	46                   	inc    esi
10001e78:	eb 28                	jmp    10001ea2 <ssfn_render+0xb1b>
10001e7a:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e82:	39 c1                	cmp    ecx,eax
10001e84:	7d 03                	jge    10001e89 <ssfn_render+0xb02>
10001e86:	42                   	inc    edx
10001e87:	eb e2                	jmp    10001e6b <ssfn_render+0xae4>
10001e89:	89 f1                	mov    ecx,esi
10001e8b:	49                   	dec    ecx
10001e8c:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e94:	39 d1                	cmp    ecx,edx
10001e96:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e9e:	7f eb                	jg     10001e8b <ssfn_render+0xb04>
10001ea0:	eb cd                	jmp    10001e6f <ssfn_render+0xae8>
10001ea2:	8d 47 02             	lea    eax,[edi+0x2]
10001ea5:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001eac:	e9 d9 fe ff ff       	jmp    10001d8a <ssfn_render+0xa03>
10001eb1:	83 fe 01             	cmp    esi,0x1
10001eb4:	7e 1f                	jle    10001ed5 <ssfn_render+0xb4e>
10001eb6:	f7 c6 01 00 00 00    	test   esi,0x1
10001ebc:	74 24                	je     10001ee2 <ssfn_render+0xb5b>
10001ebe:	8d 46 ff             	lea    eax,[esi-0x1]
10001ec1:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001ec9:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001ed1:	89 c6                	mov    esi,eax
10001ed3:	eb 0d                	jmp    10001ee2 <ssfn_render+0xb5b>
10001ed5:	85 f6                	test   esi,esi
10001ed7:	0f 84 c7 00 00 00    	je     10001fa4 <ssfn_render+0xc1d>
10001edd:	be 01 00 00 00       	mov    esi,0x1
10001ee2:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ee8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001eec:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001ef0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ef4:	39 d1                	cmp    ecx,edx
10001ef6:	7d 0b                	jge    10001f03 <ssfn_render+0xb7c>
10001ef8:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001efc:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001f00:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f03:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001f0e:	31 c0                	xor    eax,eax
10001f10:	31 d2                	xor    edx,edx
10001f12:	8d 4e ff             	lea    ecx,[esi-0x1]
10001f15:	39 d1                	cmp    ecx,edx
10001f17:	7e 7d                	jle    10001f96 <ssfn_render+0xc0f>
10001f19:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001f21:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f29:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f2d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f31:	79 02                	jns    10001f35 <ssfn_render+0xbae>
10001f33:	31 c0                	xor    eax,eax
10001f35:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f39:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f3d:	39 cf                	cmp    edi,ecx
10001f3f:	7e 04                	jle    10001f45 <ssfn_render+0xbbe>
10001f41:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f45:	85 d2                	test   edx,edx
10001f47:	74 12                	je     10001f5b <ssfn_render+0xbd4>
10001f49:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f51:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f55:	39 c8                	cmp    eax,ecx
10001f57:	7d 02                	jge    10001f5b <ssfn_render+0xbd4>
10001f59:	89 c8                	mov    eax,ecx
10001f5b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f5f:	7d 2b                	jge    10001f8c <ssfn_render+0xc05>
10001f61:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f65:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f6b:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f6e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f72:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f76:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f7a:	75 05                	jne    10001f81 <ssfn_render+0xbfa>
10001f7c:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f81:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f85:	40                   	inc    eax
10001f86:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f8a:	eb cf                	jmp    10001f5b <ssfn_render+0xbd4>
10001f8c:	83 c2 02             	add    edx,0x2
10001f8f:	b0 01                	mov    al,0x1
10001f91:	e9 7c ff ff ff       	jmp    10001f12 <ssfn_render+0xb8b>
10001f96:	83 e6 fe             	and    esi,0xfffffffe
10001f99:	84 c0                	test   al,al
10001f9b:	74 07                	je     10001fa4 <ssfn_render+0xc1d>
10001f9d:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001fa4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001fa8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001fac:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001fb0:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001fb5:	e9 9b fd ff ff       	jmp    10001d55 <ssfn_render+0x9ce>
10001fba:	88 c2                	mov    dl,al
10001fbc:	80 e2 60             	and    dl,0x60
10001fbf:	0f 85 95 02 00 00    	jne    1000225a <ssfn_render+0xed3>
10001fc5:	83 e0 1f             	and    eax,0x1f
10001fc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fcc:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fd3:	c1 fb 04             	sar    ebx,0x4
10001fd6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fde:	40                   	inc    eax
10001fdf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001fe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fe7:	c1 f8 04             	sar    eax,0x4
10001fea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001fee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ff2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001ff7:	99                   	cdq    
10001ff8:	f7 fe                	idiv   esi
10001ffa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002002:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002007:	99                   	cdq    
10002008:	f7 fe                	idiv   esi
1000200a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000200e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002014:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002018:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
1000201c:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000201f:	39 d6                	cmp    esi,edx
10002021:	7d 0a                	jge    1000202d <ssfn_render+0xca6>
10002023:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002027:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000202a:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000202d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002031:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002039:	0f af c3             	imul   eax,ebx
1000203c:	31 ff                	xor    edi,edi
1000203e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10002042:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002046:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
1000204a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000204e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002052:	29 d8                	sub    eax,ebx
10002054:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002058:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
1000205c:	0f 8d b1 00 00 00    	jge    10002113 <ssfn_render+0xd8c>
10002062:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002066:	99                   	cdq    
10002067:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000206b:	89 c6                	mov    esi,eax
1000206d:	31 c0                	xor    eax,eax
1000206f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002074:	74 0e                	je     10002084 <ssfn_render+0xcfd>
10002076:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000207a:	bb 04 00 00 00       	mov    ebx,0x4
1000207f:	29 f8                	sub    eax,edi
10002081:	99                   	cdq    
10002082:	f7 fb                	idiv   ebx
10002084:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002088:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002093:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10002097:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
1000209c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100020a3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100020a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020ab:	39 d8                	cmp    eax,ebx
100020ad:	7d 4e                	jge    100020fd <ssfn_render+0xd76>
100020af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100020b3:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100020b8:	99                   	cdq    
100020b9:	f7 fb                	idiv   ebx
100020bb:	8d 14 06             	lea    edx,[esi+eax*1]
100020be:	83 e0 07             	and    eax,0x7
100020c1:	c1 fa 03             	sar    edx,0x3
100020c4:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020c9:	0f a3 c2             	bt     edx,eax
100020cc:	72 0e                	jb     100020dc <ssfn_render+0xd55>
100020ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020d2:	43                   	inc    ebx
100020d3:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020da:	eb c0                	jmp    1000209c <ssfn_render+0xd15>
100020dc:	31 c0                	xor    eax,eax
100020de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020e2:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020e6:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020ec:	40                   	inc    eax
100020ed:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020f1:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020f5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020f9:	7d e3                	jge    100020de <ssfn_render+0xd57>
100020fb:	eb d1                	jmp    100020ce <ssfn_render+0xd47>
100020fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002101:	47                   	inc    edi
10002102:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002106:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000210a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000210e:	e9 45 ff ff ff       	jmp    10002058 <ssfn_render+0xcd1>
10002113:	b3 fe                	mov    bl,0xfe
10002115:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
1000211c:	0f 85 21 03 00 00    	jne    10002443 <ssfn_render+0x10bc>
10002122:	31 c0                	xor    eax,eax
10002124:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002128:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
1000212d:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002131:	0f 95 c0             	setne  al
10002134:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000213c:	4f                   	dec    edi
1000213d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002141:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002149:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000214d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002154:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002158:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
1000215c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002160:	31 c0                	xor    eax,eax
10002162:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002165:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002169:	83 c1 04             	add    ecx,0x4
1000216c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002170:	0f 8d c0 02 00 00    	jge    10002436 <ssfn_render+0x10af>
10002176:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
1000217a:	8d 77 01             	lea    esi,[edi+0x1]
1000217d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002181:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
10002185:	4f                   	dec    edi
10002186:	be 01 00 00 00       	mov    esi,0x1
1000218b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000218f:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002193:	7e 63                	jle    100021f8 <ssfn_render+0xe71>
10002195:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002199:	b9 01 00 00 00       	mov    ecx,0x1
1000219e:	89 ca                	mov    edx,ecx
100021a0:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100021a4:	7e 45                	jle    100021eb <ssfn_render+0xe64>
100021a6:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100021ac:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100021b1:	75 34                	jne    100021e7 <ssfn_render+0xe60>
100021b3:	89 c7                	mov    edi,eax
100021b5:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021b9:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100021bd:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100021c1:	74 0c                	je     100021cf <ssfn_render+0xe48>
100021c3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100021c7:	01 d7                	add    edi,edx
100021c9:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021cd:	75 18                	jne    100021e7 <ssfn_render+0xe60>
100021cf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021d3:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021d7:	74 06                	je     100021df <ssfn_render+0xe58>
100021d9:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021dd:	75 08                	jne    100021e7 <ssfn_render+0xe60>
100021df:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021e3:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021e7:	41                   	inc    ecx
100021e8:	40                   	inc    eax
100021e9:	eb b3                	jmp    1000219e <ssfn_render+0xe17>
100021eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021ef:	46                   	inc    esi
100021f0:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021f4:	b0 01                	mov    al,0x1
100021f6:	eb 97                	jmp    1000218f <ssfn_render+0xe08>
100021f8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021fc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002200:	bb 01 00 00 00       	mov    ebx,0x1
10002205:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002209:	7e 3d                	jle    10002248 <ssfn_render+0xec1>
1000220b:	b8 01 00 00 00       	mov    eax,0x1
10002210:	89 c2                	mov    edx,eax
10002212:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002216:	7e 23                	jle    1000223b <ssfn_render+0xeb4>
10002218:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000221c:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10002222:	8d 14 07             	lea    edx,[edi+eax*1]
10002225:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
1000222a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000222e:	75 08                	jne    10002238 <ssfn_render+0xeb1>
10002230:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002234:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002238:	40                   	inc    eax
10002239:	eb d5                	jmp    10002210 <ssfn_render+0xe89>
1000223b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000223f:	43                   	inc    ebx
10002240:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002244:	b0 01                	mov    al,0x1
10002246:	eb bd                	jmp    10002205 <ssfn_render+0xe7e>
10002248:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000224b:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
1000224f:	01 c9                	add    ecx,ecx
10002251:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002255:	e9 08 ff ff ff       	jmp    10002162 <ssfn_render+0xddb>
1000225a:	b3 fe                	mov    bl,0xfe
1000225c:	80 fa 20             	cmp    dl,0x20
1000225f:	0f 85 de 01 00 00    	jne    10002443 <ssfn_render+0x10bc>
10002265:	89 c3                	mov    ebx,eax
10002267:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
1000226b:	c1 e3 08             	shl    ebx,0x8
1000226e:	81 e3 00 1f 00 00    	and    ebx,0x1f00
10002274:	09 c3                	or     ebx,eax
10002276:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
1000227a:	43                   	inc    ebx
1000227b:	40                   	inc    eax
1000227c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002280:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
10002284:	40                   	inc    eax
10002285:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002289:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000228d:	c1 f8 04             	sar    eax,0x4
10002290:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002298:	c1 f8 04             	sar    eax,0x4
1000229b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000229f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022a3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100022a8:	99                   	cdq    
100022a9:	f7 fe                	idiv   esi
100022ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100022af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022b3:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100022b8:	99                   	cdq    
100022b9:	f7 fe                	idiv   esi
100022bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022c3:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022c9:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022cd:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022d1:	39 d6                	cmp    esi,edx
100022d3:	7d 0b                	jge    100022e0 <ssfn_render+0xf59>
100022d5:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022d9:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022dd:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022e0:	83 c1 04             	add    ecx,0x4
100022e3:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022ee:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022f5:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022f9:	72 35                	jb     10002330 <ssfn_render+0xfa9>
100022fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002303:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002308:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
1000230c:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002310:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002317:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
1000231b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10002323:	31 d2                	xor    edx,edx
10002325:	31 ff                	xor    edi,edi
10002327:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
1000232b:	e9 cc 00 00 00       	jmp    100023fc <ssfn_render+0x1075>
10002330:	8a 11                	mov    dl,BYTE PTR [ecx]
10002332:	89 d0                	mov    eax,edx
10002334:	83 e0 7f             	and    eax,0x7f
10002337:	84 d2                	test   dl,dl
10002339:	8d 78 01             	lea    edi,[eax+0x1]
1000233c:	78 09                	js     10002347 <ssfn_render+0xfc0>
1000233e:	41                   	inc    ecx
1000233f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002343:	89 ca                	mov    edx,ecx
10002345:	eb 3d                	jmp    10002384 <ssfn_render+0xffd>
10002347:	48                   	dec    eax
10002348:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000234f:	83 f8 fe             	cmp    eax,0xfffffffe
10002352:	74 16                	je     1000236a <ssfn_render+0xfe3>
10002354:	8d 5a 01             	lea    ebx,[edx+0x1]
10002357:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000235e:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002361:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002368:	eb dd                	jmp    10002347 <ssfn_render+0xfc0>
1000236a:	83 c1 02             	add    ecx,0x2
1000236d:	eb 86                	jmp    100022f5 <ssfn_render+0xf6e>
1000236f:	42                   	inc    edx
10002370:	8d 73 01             	lea    esi,[ebx+0x1]
10002373:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
1000237a:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
1000237d:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
10002384:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002388:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
1000238f:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
10002394:	75 d9                	jne    1000236f <ssfn_render+0xfe8>
10002396:	01 f9                	add    ecx,edi
10002398:	e9 58 ff ff ff       	jmp    100022f5 <ssfn_render+0xf6e>
1000239d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100023a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100023a5:	99                   	cdq    
100023a6:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100023aa:	0f af c8             	imul   ecx,eax
100023ad:	31 c0                	xor    eax,eax
100023af:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100023b4:	74 0e                	je     100023c4 <ssfn_render+0x103d>
100023b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100023ba:	bb 04 00 00 00       	mov    ebx,0x4
100023bf:	29 f8                	sub    eax,edi
100023c1:	99                   	cdq    
100023c2:	f7 fb                	idiv   ebx
100023c4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023c8:	31 db                	xor    ebx,ebx
100023ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023ce:	31 f6                	xor    esi,esi
100023d0:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023d7:	01 c1                	add    ecx,eax
100023d9:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023dd:	7f 30                	jg     1000240f <ssfn_render+0x1088>
100023df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023e3:	85 c0                	test   eax,eax
100023e5:	79 02                	jns    100023e9 <ssfn_render+0x1062>
100023e7:	31 c0                	xor    eax,eax
100023e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023ed:	47                   	inc    edi
100023ee:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023f2:	b2 01                	mov    dl,0x1
100023f4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023f8:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023fc:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002400:	7c 9b                	jl     1000239d <ssfn_render+0x1016>
10002402:	84 d2                	test   dl,dl
10002404:	74 3b                	je     10002441 <ssfn_render+0x10ba>
10002406:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
1000240d:	eb 32                	jmp    10002441 <ssfn_render+0x10ba>
1000240f:	89 d8                	mov    eax,ebx
10002411:	99                   	cdq    
10002412:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002416:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
1000241d:	3c ff                	cmp    al,0xff
1000241f:	74 0e                	je     1000242f <ssfn_render+0x10a8>
10002421:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002425:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000242b:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000242f:	46                   	inc    esi
10002430:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002434:	eb a3                	jmp    100023d9 <ssfn_render+0x1052>
10002436:	84 c0                	test   al,al
10002438:	74 07                	je     10002441 <ssfn_render+0x10ba>
1000243a:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002441:	b3 fe                	mov    bl,0xfe
10002443:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002447:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
1000244b:	e9 9f f5 ff ff       	jmp    100019ef <ssfn_render+0x668>
10002450:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002456:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002459:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
1000245c:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
1000245f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002465:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002469:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
1000246d:	89 f0                	mov    eax,esi
1000246f:	89 d9                	mov    ecx,ebx
10002471:	43                   	inc    ebx
10002472:	39 de                	cmp    esi,ebx
10002474:	7e 08                	jle    1000247e <ssfn_render+0x10f7>
10002476:	48                   	dec    eax
10002477:	29 c8                	sub    eax,ecx
10002479:	88 42 07             	mov    BYTE PTR [edx+0x7],al
1000247c:	eb 04                	jmp    10002482 <ssfn_render+0x10fb>
1000247e:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10002482:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
1000248a:	0f 84 c9 0c 00 00    	je     10003159 <ssfn_render+0x1dd2>
10002490:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002496:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
1000249c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100024a0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100024a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100024a7:	0f ba e0 0c          	bt     eax,0xc
100024ab:	72 22                	jb     100024cf <ssfn_render+0x1148>
100024ad:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100024b0:	83 e0 0f             	and    eax,0xf
100024b3:	3c 03                	cmp    al,0x3
100024b5:	74 18                	je     100024cf <ssfn_render+0x1148>
100024b7:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100024bb:	84 c9                	test   cl,cl
100024bd:	74 10                	je     100024cf <ssfn_render+0x1148>
100024bf:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100024c3:	0f af d7             	imul   edx,edi
100024c6:	89 d0                	mov    eax,edx
100024c8:	99                   	cdq    
100024c9:	f7 f9                	idiv   ecx
100024cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024d3:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024d9:	7d 06                	jge    100024e1 <ssfn_render+0x115a>
100024db:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024e1:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024e7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024eb:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024ee:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024f3:	89 d0                	mov    eax,edx
100024f5:	99                   	cdq    
100024f6:	f7 f9                	idiv   ecx
100024f8:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002500:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
10002503:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002507:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
1000250b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000250f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002514:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002518:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000251d:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002521:	99                   	cdq    
10002522:	f7 f9                	idiv   ecx
10002524:	31 d2                	xor    edx,edx
10002526:	83 ff 10             	cmp    edi,0x10
10002529:	0f 9f c2             	setg   dl
1000252c:	42                   	inc    edx
1000252d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002531:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002535:	7d 08                	jge    1000253f <ssfn_render+0x11b8>
10002537:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000253b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000253f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10002543:	39 c2                	cmp    edx,eax
10002545:	7d 04                	jge    1000254b <ssfn_render+0x11c4>
10002547:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000254b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002550:	74 4c                	je     1000259e <ssfn_render+0x1217>
10002552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002556:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000255b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000255f:	99                   	cdq    
10002560:	f7 f9                	idiv   ecx
10002562:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002566:	81 e2 00 08 00 00    	and    edx,0x800
1000256c:	74 04                	je     10002572 <ssfn_render+0x11eb>
1000256e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002572:	01 d0                	add    eax,edx
10002574:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
1000257a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000257e:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002582:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
10002586:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000258b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000258f:	99                   	cdq    
10002590:	f7 f9                	idiv   ecx
10002592:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002596:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
1000259c:	eb 22                	jmp    100025c0 <ssfn_render+0x1239>
1000259e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100025a2:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100025ac:	d1 f8                	sar    eax,1
100025ae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100025b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100025ba:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100025c0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025c7:	8b 18                	mov    ebx,DWORD PTR [eax]
100025c9:	85 db                	test   ebx,ebx
100025cb:	0f 84 2e 09 00 00    	je     10002eff <ssfn_render+0x1b78>
100025d1:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025d5:	89 d1                	mov    ecx,edx
100025d7:	89 d0                	mov    eax,edx
100025d9:	66 c1 f9 0b          	sar    cx,0xb
100025dd:	c1 f8 1f             	sar    eax,0x1f
100025e0:	31 c2                	xor    edx,eax
100025e2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025e6:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025ea:	88 c8                	mov    al,cl
100025ec:	83 e0 10             	and    eax,0x10
100025ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025f7:	83 c0 40             	add    eax,0x40
100025fa:	c1 f8 06             	sar    eax,0x6
100025fd:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002604:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002608:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000260c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002610:	7d 08                	jge    1000261a <ssfn_render+0x1293>
10002612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002616:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000261a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000261d:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002625:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002629:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002631:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002635:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000263a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000263e:	99                   	cdq    
1000263f:	f7 f9                	idiv   ecx
10002641:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002645:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000264c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000264f:	0f b6 f4             	movzx  esi,ah
10002652:	89 c2                	mov    edx,eax
10002654:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002658:	c1 ea 10             	shr    edx,0x10
1000265b:	0f b6 fa             	movzx  edi,dl
1000265e:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
10002662:	0f b6 f8             	movzx  edi,al
10002665:	c1 e8 18             	shr    eax,0x18
10002668:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
1000266c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002670:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002677:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
1000267a:	0f b6 fc             	movzx  edi,ah
1000267d:	89 c2                	mov    edx,eax
1000267f:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002686:	c1 ea 10             	shr    edx,0x10
10002689:	0f b6 c0             	movzx  eax,al
1000268c:	0f b6 f2             	movzx  esi,dl
1000268f:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002696:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000269d:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100026a1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026a8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100026af:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026b3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026b7:	0f af c2             	imul   eax,edx
100026ba:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100026be:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100026c2:	8d 04 90             	lea    eax,[eax+edx*4]
100026c5:	01 d8                	add    eax,ebx
100026c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026ce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026d9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026de:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026e5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026e9:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026ed:	0f 8d e2 04 00 00    	jge    10002bd5 <ssfn_render+0x184e>
100026f3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026fa:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002701:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002705:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002709:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
1000270d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002711:	39 d0                	cmp    eax,edx
10002713:	0f 8d bc 04 00 00    	jge    10002bd5 <ssfn_render+0x184e>
10002719:	85 c0                	test   eax,eax
1000271b:	0f 88 94 04 00 00    	js     10002bb5 <ssfn_render+0x182e>
10002721:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002727:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
1000272b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000272f:	c1 e1 08             	shl    ecx,0x8
10002732:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000273a:	89 c8                	mov    eax,ecx
1000273c:	0f af c3             	imul   eax,ebx
1000273f:	99                   	cdq    
10002740:	f7 fe                	idiv   esi
10002742:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002749:	c1 f8 08             	sar    eax,0x8
1000274c:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10002753:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002759:	0f af c3             	imul   eax,ebx
1000275c:	99                   	cdq    
1000275d:	f7 fe                	idiv   esi
1000275f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002763:	c1 f8 08             	sar    eax,0x8
10002766:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
1000276d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002771:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002778:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
1000277f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002786:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
1000278a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000278e:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002792:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002796:	0f 8d 19 04 00 00    	jge    10002bb5 <ssfn_render+0x182e>
1000279c:	85 c0                	test   eax,eax
1000279e:	0f 88 ff 03 00 00    	js     10002ba3 <ssfn_render+0x181c>
100027a4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027ab:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100027af:	75 42                	jne    100027f3 <ssfn_render+0x146c>
100027b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100027b5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100027bc:	b9 10 00 00 00       	mov    ecx,0x10
100027c1:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100027c4:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027cb:	89 c2                	mov    edx,eax
100027cd:	0f b6 fc             	movzx  edi,ah
100027d0:	d3 ea                	shr    edx,cl
100027d2:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027d9:	0f b6 f2             	movzx  esi,dl
100027dc:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027e0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027e7:	d3 e8                	shr    eax,cl
100027e9:	0f b6 c0             	movzx  eax,al
100027ec:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027f3:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027fd:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002800:	c1 e1 08             	shl    ecx,0x8
10002803:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002807:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000280f:	89 c8                	mov    eax,ecx
10002811:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002819:	0f af c3             	imul   eax,ebx
1000281c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002824:	99                   	cdq    
10002825:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
1000282d:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002831:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002839:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002840:	c1 f8 08             	sar    eax,0x8
10002843:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
1000284a:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002850:	0f af c3             	imul   eax,ebx
10002853:	99                   	cdq    
10002854:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002858:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
1000285c:	c1 f8 08             	sar    eax,0x8
1000285f:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10002866:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
1000286d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002871:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002875:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002879:	0f 8d 3b 02 00 00    	jge    10002aba <ssfn_render+0x1733>
1000287f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
10002883:	c1 fa 08             	sar    edx,0x8
10002886:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
1000288d:	75 25                	jne    100028b4 <ssfn_render+0x152d>
1000288f:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
10002894:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
1000289b:	b8 00 01 00 00       	mov    eax,0x100
100028a0:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100028a8:	29 c8                	sub    eax,ecx
100028aa:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100028ae:	39 c7                	cmp    edi,eax
100028b0:	7e 1c                	jle    100028ce <ssfn_render+0x1547>
100028b2:	eb 16                	jmp    100028ca <ssfn_render+0x1543>
100028b4:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100028bc:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100028c3:	75 09                	jne    100028ce <ssfn_render+0x1547>
100028c5:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028ce:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028d2:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028d5:	0f af c2             	imul   eax,edx
100028d8:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028df:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028e4:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028e9:	c1 f8 08             	sar    eax,0x8
100028ec:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028f3:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028fe:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002902:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002906:	0f 8d a1 01 00 00    	jge    10002aad <ssfn_render+0x1726>
1000290c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002910:	c1 f8 08             	sar    eax,0x8
10002913:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
1000291a:	75 3b                	jne    10002957 <ssfn_render+0x15d0>
1000291c:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002921:	ba 00 01 00 00       	mov    edx,0x100
10002926:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000292e:	29 ca                	sub    edx,ecx
10002930:	89 f1                	mov    ecx,esi
10002932:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002939:	39 d1                	cmp    ecx,edx
1000293b:	7c 0e                	jl     1000294b <ssfn_render+0x15c4>
1000293d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002941:	81 fa 00 01 00 00    	cmp    edx,0x100
10002947:	74 22                	je     1000296b <ssfn_render+0x15e4>
10002949:	89 d1                	mov    ecx,edx
1000294b:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002950:	89 cf                	mov    edi,ecx
10002952:	c1 ff 08             	sar    edi,0x8
10002955:	eb 14                	jmp    1000296b <ssfn_render+0x15e4>
10002957:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
1000295e:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002965:	74 04                	je     1000296b <ssfn_render+0x15e4>
10002967:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000296b:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
1000296f:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
10002973:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
1000297a:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
1000297f:	81 fa ff 00 00 00    	cmp    edx,0xff
10002985:	75 37                	jne    100029be <ssfn_render+0x1637>
10002987:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
1000298e:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002996:	0f af c7             	imul   eax,edi
10002999:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
1000299d:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100029a4:	0f af c7             	imul   eax,edi
100029a7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029ab:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100029b2:	0f af c7             	imul   eax,edi
100029b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029b9:	e9 e2 00 00 00       	jmp    10002aa0 <ssfn_render+0x1719>
100029be:	81 fa fe 00 00 00    	cmp    edx,0xfe
100029c4:	74 2d                	je     100029f3 <ssfn_render+0x166c>
100029c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029c9:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029cc:	85 c9                	test   ecx,ecx
100029ce:	74 23                	je     100029f3 <ssfn_render+0x166c>
100029d0:	01 c8                	add    eax,ecx
100029d2:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029d5:	89 d9                	mov    ecx,ebx
100029d7:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029de:	c1 e9 10             	shr    ecx,0x10
100029e1:	0f b6 f7             	movzx  esi,bh
100029e4:	0f b6 c1             	movzx  eax,cl
100029e7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029eb:	0f b6 c3             	movzx  eax,bl
100029ee:	c1 eb 18             	shr    ebx,0x18
100029f1:	eb 14                	jmp    10002a07 <ssfn_render+0x1680>
100029f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029ff:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002a03:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002a07:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a0d:	75 25                	jne    10002a34 <ssfn_render+0x16ad>
10002a0f:	0f af c7             	imul   eax,edi
10002a12:	0f af f7             	imul   esi,edi
10002a15:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a19:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a1d:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002a23:	0f af cf             	imul   ecx,edi
10002a26:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a2a:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a2e:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a32:	eb 6c                	jmp    10002aa0 <ssfn_render+0x1719>
10002a34:	0f af f3             	imul   esi,ebx
10002a37:	0f af c3             	imul   eax,ebx
10002a3a:	b9 ff 00 00 00       	mov    ecx,0xff
10002a3f:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a46:	29 d9                	sub    ecx,ebx
10002a48:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a4c:	0f af d1             	imul   edx,ecx
10002a4f:	b9 ff 00 00 00       	mov    ecx,0xff
10002a54:	01 d0                	add    eax,edx
10002a56:	0f af c7             	imul   eax,edi
10002a59:	99                   	cdq    
10002a5a:	f7 f9                	idiv   ecx
10002a5c:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a60:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a64:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a6c:	01 f0                	add    eax,esi
10002a6e:	89 ce                	mov    esi,ecx
10002a70:	0f af c7             	imul   eax,edi
10002a73:	99                   	cdq    
10002a74:	f7 f9                	idiv   ecx
10002a76:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a7a:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a7e:	0f af cb             	imul   ecx,ebx
10002a81:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a85:	0f af df             	imul   ebx,edi
10002a88:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a90:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a94:	01 c8                	add    eax,ecx
10002a96:	0f af c7             	imul   eax,edi
10002a99:	99                   	cdq    
10002a9a:	f7 fe                	idiv   esi
10002a9c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002aa0:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002aa8:	e9 51 fe ff ff       	jmp    100028fe <ssfn_render+0x1577>
10002aad:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002ab5:	e9 b7 fd ff ff       	jmp    10002871 <ssfn_render+0x14ea>
10002aba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002abf:	74 30                	je     10002af1 <ssfn_render+0x176a>
10002ac1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002ac5:	31 d2                	xor    edx,edx
10002ac7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002acb:	31 d2                	xor    edx,edx
10002acd:	89 c1                	mov    ecx,eax
10002acf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002ad3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ad7:	31 d2                	xor    edx,edx
10002ad9:	89 c6                	mov    esi,eax
10002adb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002adf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ae3:	31 d2                	xor    edx,edx
10002ae5:	89 c3                	mov    ebx,eax
10002ae7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002aeb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aef:	eb 1c                	jmp    10002b0d <ssfn_render+0x1786>
10002af1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002af5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002af9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002afd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002b01:	c1 e9 08             	shr    ecx,0x8
10002b04:	c1 ee 08             	shr    esi,0x8
10002b07:	c1 eb 08             	shr    ebx,0x8
10002b0a:	c1 e8 08             	shr    eax,0x8
10002b0d:	83 f8 0f             	cmp    eax,0xf
10002b10:	0f 86 8d 00 00 00    	jbe    10002ba3 <ssfn_render+0x181c>
10002b16:	89 ca                	mov    edx,ecx
10002b18:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002b1e:	76 05                	jbe    10002b25 <ssfn_render+0x179e>
10002b20:	ba ff 00 00 00       	mov    edx,0xff
10002b25:	b9 10 00 00 00       	mov    ecx,0x10
10002b2a:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b31:	d3 e2                	shl    edx,cl
10002b33:	3d ff 00 00 00       	cmp    eax,0xff
10002b38:	89 d1                	mov    ecx,edx
10002b3a:	76 05                	jbe    10002b41 <ssfn_render+0x17ba>
10002b3c:	b8 ff 00 00 00       	mov    eax,0xff
10002b41:	c1 e0 18             	shl    eax,0x18
10002b44:	09 c8                	or     eax,ecx
10002b46:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b4c:	76 05                	jbe    10002b53 <ssfn_render+0x17cc>
10002b4e:	be ff 00 00 00       	mov    esi,0xff
10002b53:	c1 e6 08             	shl    esi,0x8
10002b56:	09 f0                	or     eax,esi
10002b58:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b5e:	76 05                	jbe    10002b65 <ssfn_render+0x17de>
10002b60:	bb ff 00 00 00       	mov    ebx,0xff
10002b65:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b6d:	d3 e3                	shl    ebx,cl
10002b6f:	09 c3                	or     ebx,eax
10002b71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b78:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b7b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b7f:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b83:	75 1e                	jne    10002ba3 <ssfn_render+0x181c>
10002b85:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b8c:	7e 07                	jle    10002b95 <ssfn_render+0x180e>
10002b8e:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b99:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b9d:	7d 04                	jge    10002ba3 <ssfn_render+0x181c>
10002b9f:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002ba3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002bab:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002baf:	0f 85 ca fb ff ff    	jne    1000277f <ssfn_render+0x13f8>
10002bb5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bbc:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002bc0:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bc4:	25 fc ff 00 00       	and    eax,0xfffc
10002bc9:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002bd0:	e9 10 fb ff ff       	jmp    100026e5 <ssfn_render+0x135e>
10002bd5:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002bdc:	0f 84 90 01 00 00    	je     10002d72 <ssfn_render+0x19eb>
10002be2:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002bea:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bf5:	40                   	inc    eax
10002bf6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002bfa:	29 c7                	sub    edi,eax
10002bfc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002c00:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002c04:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002c08:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c0c:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002c10:	7e 09                	jle    10002c1b <ssfn_render+0x1894>
10002c12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c16:	40                   	inc    eax
10002c17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c1b:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c22:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c29:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c2d:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c31:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c35:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c39:	0f af c2             	imul   eax,edx
10002c3c:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c40:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c44:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c48:	03 07                	add    eax,DWORD PTR [edi]
10002c4a:	89 c7                	mov    edi,eax
10002c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c50:	c1 e0 18             	shl    eax,0x18
10002c53:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c57:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c5f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c64:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c6c:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c70:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c74:	0f 8e f8 00 00 00    	jle    10002d72 <ssfn_render+0x19eb>
10002c7a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c81:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c88:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c8c:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c90:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c94:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c98:	39 d0                	cmp    eax,edx
10002c9a:	0f 8d d2 00 00 00    	jge    10002d72 <ssfn_render+0x19eb>
10002ca0:	31 db                	xor    ebx,ebx
10002ca2:	85 c0                	test   eax,eax
10002ca4:	79 23                	jns    10002cc9 <ssfn_render+0x1942>
10002ca6:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cad:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cb1:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002cb5:	25 fc ff 00 00       	and    eax,0xfffc
10002cba:	01 c7                	add    edi,eax
10002cbc:	eb aa                	jmp    10002c68 <ssfn_render+0x18e1>
10002cbe:	85 c0                	test   eax,eax
10002cc0:	79 20                	jns    10002ce2 <ssfn_render+0x195b>
10002cc2:	43                   	inc    ebx
10002cc3:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002cc7:	7c dd                	jl     10002ca6 <ssfn_render+0x191f>
10002cc9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cd0:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cd4:	01 d8                	add    eax,ebx
10002cd6:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002cda:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002cde:	7c de                	jl     10002cbe <ssfn_render+0x1937>
10002ce0:	eb c4                	jmp    10002ca6 <ssfn_render+0x191f>
10002ce2:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002ce6:	7e 06                	jle    10002cee <ssfn_render+0x1967>
10002ce8:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002cec:	7f d4                	jg     10002cc2 <ssfn_render+0x193b>
10002cee:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002cf1:	b8 10 00 00 00       	mov    eax,0x10
10002cf6:	0f b6 f6             	movzx  esi,dh
10002cf9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002cfd:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002d01:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d05:	89 d0                	mov    eax,edx
10002d07:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d0b:	d3 e8                	shr    eax,cl
10002d0d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d11:	0f b6 c0             	movzx  eax,al
10002d14:	d3 ea                	shr    edx,cl
10002d16:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002d1a:	0f b6 f2             	movzx  esi,dl
10002d1d:	29 c1                	sub    ecx,eax
10002d1f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d23:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d28:	29 f2                	sub    edx,esi
10002d2a:	c1 f9 08             	sar    ecx,0x8
10002d2d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d32:	01 c8                	add    eax,ecx
10002d34:	c1 fa 08             	sar    edx,0x8
10002d37:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d3b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d3f:	d3 e0                	shl    eax,cl
10002d41:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d45:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d49:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d4d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d51:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d56:	d3 e6                	shl    esi,cl
10002d58:	c1 fa 08             	sar    edx,0x8
10002d5b:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d5f:	c1 e2 08             	shl    edx,0x8
10002d62:	09 d0                	or     eax,edx
10002d64:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d68:	09 c6                	or     esi,eax
10002d6a:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d6d:	e9 50 ff ff ff       	jmp    10002cc2 <ssfn_render+0x193b>
10002d72:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d79:	0f 84 80 01 00 00    	je     10002eff <ssfn_render+0x1b78>
10002d7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d87:	d1 fa                	sar    edx,1
10002d89:	40                   	inc    eax
10002d8a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d92:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d96:	7e 09                	jle    10002da1 <ssfn_render+0x1a1a>
10002d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d9c:	40                   	inc    eax
10002d9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002da1:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002da8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002daf:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002db3:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002db7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002dbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dbf:	01 d0                	add    eax,edx
10002dc1:	0f af c1             	imul   eax,ecx
10002dc4:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002dc8:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002dcc:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002dd0:	03 03                	add    eax,DWORD PTR [ebx]
10002dd2:	89 c7                	mov    edi,eax
10002dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002dd8:	c1 e0 18             	shl    eax,0x18
10002ddb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002ddf:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002de7:	01 d0                	add    eax,edx
10002de9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002ded:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002df2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002df6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002dfa:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002dfe:	0f 8e fb 00 00 00    	jle    10002eff <ssfn_render+0x1b78>
10002e04:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e0b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002e0f:	01 d8                	add    eax,ebx
10002e11:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002e18:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002e1c:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002e20:	39 d0                	cmp    eax,edx
10002e22:	0f 8d d7 00 00 00    	jge    10002eff <ssfn_render+0x1b78>
10002e28:	31 f6                	xor    esi,esi
10002e2a:	85 c0                	test   eax,eax
10002e2c:	0f 89 ad 00 00 00    	jns    10002edf <ssfn_render+0x1b58>
10002e32:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e39:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e3d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e41:	25 fc ff 00 00       	and    eax,0xfffc
10002e46:	01 c7                	add    edi,eax
10002e48:	eb ac                	jmp    10002df6 <ssfn_render+0x1a6f>
10002e4a:	85 c0                	test   eax,eax
10002e4c:	0f 88 82 00 00 00    	js     10002ed4 <ssfn_render+0x1b4d>
10002e52:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e55:	b8 10 00 00 00       	mov    eax,0x10
10002e5a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e5e:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e66:	89 d8                	mov    eax,ebx
10002e68:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e6c:	d3 e8                	shr    eax,cl
10002e6e:	0f b6 cf             	movzx  ecx,bh
10002e71:	0f b6 c0             	movzx  eax,al
10002e74:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e78:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e7c:	d3 eb                	shr    ebx,cl
10002e7e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e82:	0f b6 db             	movzx  ebx,bl
10002e85:	29 c1                	sub    ecx,eax
10002e87:	29 da                	sub    edx,ebx
10002e89:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e8e:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e93:	c1 f9 08             	sar    ecx,0x8
10002e96:	c1 fa 08             	sar    edx,0x8
10002e99:	01 c8                	add    eax,ecx
10002e9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e9f:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002ea3:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002ea7:	d3 e0                	shl    eax,cl
10002ea9:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002ead:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002eb1:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002eb6:	c1 fa 08             	sar    edx,0x8
10002eb9:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002ebd:	c1 e2 08             	shl    edx,0x8
10002ec0:	09 d0                	or     eax,edx
10002ec2:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ec5:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002ec9:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ecd:	d3 e2                	shl    edx,cl
10002ecf:	09 c2                	or     edx,eax
10002ed1:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002ed4:	46                   	inc    esi
10002ed5:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002ed9:	0f 8c 53 ff ff ff    	jl     10002e32 <ssfn_render+0x1aab>
10002edf:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ee6:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002eea:	01 f0                	add    eax,esi
10002eec:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ef0:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ef4:	0f 8c 50 ff ff ff    	jl     10002e4a <ssfn_render+0x1ac3>
10002efa:	e9 33 ff ff ff       	jmp    10002e32 <ssfn_render+0x1aab>
10002eff:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002f06:	74 04                	je     10002f0c <ssfn_render+0x1b85>
10002f08:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002f10:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002f14:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002f1a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f21:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002f25:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f2c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f2f:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f33:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f39:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f3d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f42:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f46:	99                   	cdq    
10002f47:	f7 f9                	idiv   ecx
10002f49:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f4d:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f53:	25 80 00 00 00       	and    eax,0x80
10002f58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f5c:	0f 85 f7 01 00 00    	jne    10003159 <ssfn_render+0x1dd2>
10002f62:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f65:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f69:	0f 84 ea 01 00 00    	je     10003159 <ssfn_render+0x1dd2>
10002f6f:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f76:	83 ec 0c             	sub    esp,0xc
10002f79:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f80:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f87:	51                   	push   ecx
10002f88:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f8f:	e8 53 d9 ff ff       	call   100008e7 <_ssfn_c>
10002f94:	83 c4 10             	add    esp,0x10
10002f97:	85 c0                	test   eax,eax
10002f99:	0f 84 ba 01 00 00    	je     10003159 <ssfn_render+0x1dd2>
10002f9f:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002fa7:	0f 86 ac 01 00 00    	jbe    10003159 <ssfn_render+0x1dd2>
10002fad:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fb3:	8d 48 06             	lea    ecx,[eax+0x6]
10002fb6:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fbc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002fc0:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002fc4:	0f 8e 8f 01 00 00    	jle    10003159 <ssfn_render+0x1dd2>
10002fca:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fcc:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fd0:	8a 18                	mov    bl,BYTE PTR [eax]
10002fd2:	83 e3 40             	and    ebx,0x40
10002fd5:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fda:	75 14                	jne    10002ff0 <ssfn_render+0x1c69>
10002fdc:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fe0:	75 0e                	jne    10002ff0 <ssfn_render+0x1c69>
10002fe2:	80 fb 01             	cmp    bl,0x1
10002fe5:	19 c0                	sbb    eax,eax
10002fe7:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002feb:	e9 60 01 00 00       	jmp    10003150 <ssfn_render+0x1dc9>
10002ff0:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002ff4:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002ff8:	c1 e6 10             	shl    esi,0x10
10002ffb:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002fff:	84 db                	test   bl,bl
10003001:	74 08                	je     1000300b <ssfn_render+0x1c84>
10003003:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10003006:	83 c1 06             	add    ecx,0x6
10003009:	eb 0c                	jmp    10003017 <ssfn_render+0x1c90>
1000300b:	c1 e2 08             	shl    edx,0x8
1000300e:	83 c1 05             	add    ecx,0x5
10003011:	89 d0                	mov    eax,edx
10003013:	09 f0                	or     eax,esi
10003015:	09 c7                	or     edi,eax
10003017:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000301a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000301e:	01 f8                	add    eax,edi
10003020:	8a 10                	mov    dl,BYTE PTR [eax]
10003022:	88 d3                	mov    bl,dl
10003024:	83 e3 e0             	and    ebx,0xffffffe0
10003027:	80 fb c0             	cmp    bl,0xc0
1000302a:	0f 85 20 01 00 00    	jne    10003150 <ssfn_render+0x1dc9>
10003030:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10003034:	c1 e2 08             	shl    edx,0x8
10003037:	83 c0 02             	add    eax,0x2
1000303a:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003040:	09 da                	or     edx,ebx
10003042:	8d 72 01             	lea    esi,[edx+0x1]
10003045:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003049:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003050:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10003054:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003059:	0f 84 f1 00 00 00    	je     10003150 <ssfn_render+0x1dc9>
1000305f:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10003063:	0f b7 10             	movzx  edx,WORD PTR [eax]
10003066:	c1 e3 10             	shl    ebx,0x10
10003069:	81 e3 00 00 0f 00    	and    ebx,0xf0000
1000306f:	09 d3                	or     ebx,edx
10003071:	39 de                	cmp    esi,ebx
10003073:	0f 82 cf 00 00 00    	jb     10003148 <ssfn_render+0x1dc1>
10003079:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
1000307c:	89 d7                	mov    edi,edx
1000307e:	c1 e7 10             	shl    edi,0x10
10003081:	81 e7 00 00 0f 00    	and    edi,0xf0000
10003087:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000308b:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
1000308f:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10003093:	39 fe                	cmp    esi,edi
10003095:	0f 87 ad 00 00 00    	ja     10003148 <ssfn_render+0x1dc1>
1000309b:	29 de                	sub    esi,ebx
1000309d:	c0 ea 04             	shr    dl,0x4
100030a0:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100030a7:	0f b6 d2             	movzx  edx,dl
100030aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100030ae:	89 d3                	mov    ebx,edx
100030b0:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100030b4:	c1 e3 10             	shl    ebx,0x10
100030b7:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100030ba:	09 da                	or     edx,ebx
100030bc:	c0 e8 04             	shr    al,0x4
100030bf:	c1 e0 18             	shl    eax,0x18
100030c2:	09 c2                	or     edx,eax
100030c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030c8:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030cb:	01 c2                	add    edx,eax
100030cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030d0:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030d4:	39 d7                	cmp    edi,edx
100030d6:	76 78                	jbe    10003150 <ssfn_render+0x1dc9>
100030d8:	8a 1a                	mov    bl,BYTE PTR [edx]
100030da:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030e1:	89 de                	mov    esi,ebx
100030e3:	83 e6 7f             	and    esi,0x7f
100030e6:	39 c6                	cmp    esi,eax
100030e8:	73 1d                	jae    10003107 <ssfn_render+0x1d80>
100030ea:	48                   	dec    eax
100030eb:	bb 02 00 00 00       	mov    ebx,0x2
100030f0:	29 f0                	sub    eax,esi
100030f2:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030f9:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030fc:	84 c0                	test   al,al
100030fe:	78 03                	js     10003103 <ssfn_render+0x1d7c>
10003100:	8d 58 02             	lea    ebx,[eax+0x2]
10003103:	01 da                	add    edx,ebx
10003105:	eb cd                	jmp    100030d4 <ssfn_render+0x1d4d>
10003107:	be 01 00 00 00       	mov    esi,0x1
1000310c:	84 db                	test   bl,bl
1000310e:	78 03                	js     10003113 <ssfn_render+0x1d8c>
10003110:	8d 70 01             	lea    esi,[eax+0x1]
10003113:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000311b:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003120:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003124:	99                   	cdq    
10003125:	f7 fb                	idiv   ebx
10003127:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
1000312c:	74 0d                	je     1000313b <ssfn_render+0x1db4>
1000312e:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003135:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003139:	eb 15                	jmp    10003150 <ssfn_render+0x1dc9>
1000313b:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10003142:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
10003146:	eb 08                	jmp    10003150 <ssfn_render+0x1dc9>
10003148:	83 c0 08             	add    eax,0x8
1000314b:	e9 00 ff ff ff       	jmp    10003050 <ssfn_render+0x1cc9>
10003150:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003154:	e9 5d fe ff ff       	jmp    10002fb6 <ssfn_render+0x1c2f>
10003159:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003160:	eb 73                	jmp    100031d5 <ssfn_render+0x1e4e>
10003162:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000316d:	e9 50 e4 ff ff       	jmp    100015c2 <ssfn_render+0x23b>
10003172:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003179:	57                   	push   edi
1000317a:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003181:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003188:	e8 5a d7 ff ff       	call   100008e7 <_ssfn_c>
1000318d:	5f                   	pop    edi
1000318e:	85 c0                	test   eax,eax
10003190:	0f 84 25 e4 ff ff    	je     100015bb <ssfn_render+0x234>
10003196:	e9 a2 e4 ff ff       	jmp    1000163d <ssfn_render+0x2b6>
1000319b:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000319e:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100031a2:	75 0c                	jne    100031b0 <ssfn_render+0x1e29>
100031a4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100031ab:	e9 3b e4 ff ff       	jmp    100015eb <ssfn_render+0x264>
100031b0:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100031b7:	57                   	push   edi
100031b8:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100031bf:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100031c6:	e8 1c d7 ff ff       	call   100008e7 <_ssfn_c>
100031cb:	59                   	pop    ecx
100031cc:	85 c0                	test   eax,eax
100031ce:	74 d4                	je     100031a4 <ssfn_render+0x1e1d>
100031d0:	e9 68 e4 ff ff       	jmp    1000163d <ssfn_render+0x2b6>
100031d5:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031db:	89 c8                	mov    eax,ecx
100031dd:	5b                   	pop    ebx
100031de:	5e                   	pop    esi
100031df:	5f                   	pop    edi
100031e0:	5d                   	pop    ebp
100031e1:	c3                   	ret    

100031e2 <ssfn_bbox>:
100031e2:	55                   	push   ebp
100031e3:	57                   	push   edi
100031e4:	56                   	push   esi
100031e5:	53                   	push   ebx
100031e6:	83 ec 3c             	sub    esp,0x3c
100031e9:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031ee:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031f2:	0f 94 c0             	sete   al
100031f5:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031fa:	0f 94 c2             	sete   dl
100031fd:	09 d0                	or     eax,edx
100031ff:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003204:	0f 94 c2             	sete   dl
10003207:	09 d0                	or     eax,edx
10003209:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000320e:	0f 94 c2             	sete   dl
10003211:	09 d0                	or     eax,edx
10003213:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003218:	0f 94 c2             	sete   dl
1000321b:	08 d0                	or     al,dl
1000321d:	0f 85 7c 01 00 00    	jne    1000339f <ssfn_bbox+0x1bd>
10003223:	85 db                	test   ebx,ebx
10003225:	0f 84 74 01 00 00    	je     1000339f <ssfn_bbox+0x1bd>
1000322b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000322f:	31 f6                	xor    esi,esi
10003231:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003237:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000323b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003241:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003245:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000324b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000324f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003255:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003259:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000325c:	0f 84 42 01 00 00    	je     100033a4 <ssfn_bbox+0x1c2>
10003262:	8d 54 24 18          	lea    edx,[esp+0x18]
10003266:	b9 06 00 00 00       	mov    ecx,0x6
1000326b:	89 d7                	mov    edi,edx
1000326d:	89 f0                	mov    eax,esi
1000326f:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003279:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000327b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10003283:	31 ff                	xor    edi,edi
10003285:	bd 01 00 00 00       	mov    ebp,0x1
1000328a:	50                   	push   eax
1000328b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000328f:	8d 44 24 20          	lea    eax,[esp+0x20]
10003293:	50                   	push   eax
10003294:	53                   	push   ebx
10003295:	e8 fc ff ff ff       	call   10003296 <ssfn_bbox+0xb4>	10003296: R_386_PC32	ssfn_render
1000329a:	83 c4 10             	add    esp,0x10
1000329d:	89 c6                	mov    esi,eax
1000329f:	85 c0                	test   eax,eax
100032a1:	74 6f                	je     10003312 <ssfn_bbox+0x130>
100032a3:	0f 88 fb 00 00 00    	js     100033a4 <ssfn_bbox+0x1c2>
100032a9:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032af:	85 c0                	test   eax,eax
100032b1:	0f 84 ed 00 00 00    	je     100033a4 <ssfn_bbox+0x1c2>
100032b7:	85 ed                	test   ebp,ebp
100032b9:	74 0b                	je     100032c6 <ssfn_bbox+0xe4>
100032bb:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100032c1:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100032c6:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032ca:	74 12                	je     100032de <ssfn_bbox+0xfc>
100032cc:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032d2:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032d6:	7d 2f                	jge    10003307 <ssfn_bbox+0x125>
100032d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032dc:	eb 29                	jmp    10003307 <ssfn_bbox+0x125>
100032de:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032e1:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032e6:	39 cd                	cmp    ebp,ecx
100032e8:	7d 05                	jge    100032ef <ssfn_bbox+0x10d>
100032ea:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032ef:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032f3:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032f8:	84 d2                	test   dl,dl
100032fa:	75 04                	jne    10003300 <ssfn_bbox+0x11e>
100032fc:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003300:	01 ca                	add    edx,ecx
10003302:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003307:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000330b:	31 ed                	xor    ebp,ebp
1000330d:	e9 78 ff ff ff       	jmp    1000328a <ssfn_bbox+0xa8>
10003312:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003319:	74 23                	je     1000333e <ssfn_bbox+0x15c>
1000331b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000331e:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
10003322:	75 1a                	jne    1000333e <ssfn_bbox+0x15c>
10003324:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
1000332a:	b9 04 00 00 00       	mov    ecx,0x4
1000332f:	99                   	cdq    
10003330:	f7 f9                	idiv   ecx
10003332:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003337:	29 f8                	sub    eax,edi
10003339:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000333e:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003344:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003348:	74 29                	je     10003373 <ssfn_bbox+0x191>
1000334a:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000334f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10003353:	89 01                	mov    DWORD PTR [ecx],eax
10003355:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003359:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000335f:	89 01                	mov    DWORD PTR [ecx],eax
10003361:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003365:	89 38                	mov    DWORD PTR [eax],edi
10003367:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000336b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000336f:	89 38                	mov    DWORD PTR [eax],edi
10003371:	eb 31                	jmp    100033a4 <ssfn_bbox+0x1c2>
10003373:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003378:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
1000337c:	89 07                	mov    DWORD PTR [edi],eax
1000337e:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
10003383:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
10003387:	89 07                	mov    DWORD PTR [edi],eax
10003389:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000338d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003393:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000339d:	eb 05                	jmp    100033a4 <ssfn_bbox+0x1c2>
1000339f:	be fc ff ff ff       	mov    esi,0xfffffffc
100033a4:	83 c4 3c             	add    esp,0x3c
100033a7:	89 f0                	mov    eax,esi
100033a9:	5b                   	pop    ebx
100033aa:	5e                   	pop    esi
100033ab:	5f                   	pop    edi
100033ac:	5d                   	pop    ebp
100033ad:	c3                   	ret    

100033ae <ssfn_text>:
100033ae:	55                   	push   ebp
100033af:	57                   	push   edi
100033b0:	56                   	push   esi
100033b1:	53                   	push   ebx
100033b2:	83 ec 1c             	sub    esp,0x1c
100033b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100033b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100033bd:	85 f6                	test   esi,esi
100033bf:	0f 84 b2 00 00 00    	je     10003477 <ssfn_text+0xc9>
100033c5:	85 ed                	test   ebp,ebp
100033c7:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033cc:	0f 84 a5 00 00 00    	je     10003477 <ssfn_text+0xc9>
100033d2:	83 ec 0c             	sub    esp,0xc
100033d5:	6a 18                	push   0x18
100033d7:	e8 fc ff ff ff       	call   100033d8 <ssfn_text+0x2a>	100033d8: R_386_PC32	malloc
100033dc:	83 c4 10             	add    esp,0x10
100033df:	89 c3                	mov    ebx,eax
100033e1:	85 c0                	test   eax,eax
100033e3:	0f 84 8e 00 00 00    	je     10003477 <ssfn_text+0xc9>
100033e9:	31 c0                	xor    eax,eax
100033eb:	b9 06 00 00 00       	mov    ecx,0x6
100033f0:	89 df                	mov    edi,ebx
100033f2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033fb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033fe:	74 79                	je     10003479 <ssfn_text+0xcb>
10003400:	8d 43 0c             	lea    eax,[ebx+0xc]
10003403:	52                   	push   edx
10003404:	52                   	push   edx
10003405:	50                   	push   eax
10003406:	8d 43 0a             	lea    eax,[ebx+0xa]
10003409:	50                   	push   eax
1000340a:	8d 43 06             	lea    eax,[ebx+0x6]
1000340d:	50                   	push   eax
1000340e:	8d 43 04             	lea    eax,[ebx+0x4]
10003411:	50                   	push   eax
10003412:	56                   	push   esi
10003413:	55                   	push   ebp
10003414:	e8 fc ff ff ff       	call   10003415 <ssfn_text+0x67>	10003415: R_386_PC32	ssfn_bbox
10003419:	83 c4 20             	add    esp,0x20
1000341c:	85 c0                	test   eax,eax
1000341e:	75 59                	jne    10003479 <ssfn_text+0xcb>
10003420:	83 ec 0c             	sub    esp,0xc
10003423:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003427:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
1000342b:	0f af c8             	imul   ecx,eax
1000342e:	c1 e1 02             	shl    ecx,0x2
10003431:	51                   	push   ecx
10003432:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003436:	e8 fc ff ff ff       	call   10003437 <ssfn_text+0x89>	10003437: R_386_PC32	malloc
1000343b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000343f:	89 c7                	mov    edi,eax
10003441:	89 03                	mov    DWORD PTR [ebx],eax
10003443:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003447:	83 c4 10             	add    esp,0x10
1000344a:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000344c:	50                   	push   eax
1000344d:	56                   	push   esi
1000344e:	53                   	push   ebx
1000344f:	55                   	push   ebp
10003450:	e8 fc ff ff ff       	call   10003451 <ssfn_text+0xa3>	10003451: R_386_PC32	ssfn_render
10003455:	83 c4 10             	add    esp,0x10
10003458:	85 c0                	test   eax,eax
1000345a:	7e 04                	jle    10003460 <ssfn_text+0xb2>
1000345c:	01 c6                	add    esi,eax
1000345e:	eb ec                	jmp    1000344c <ssfn_text+0x9e>
10003460:	74 17                	je     10003479 <ssfn_text+0xcb>
10003462:	83 ec 0c             	sub    esp,0xc
10003465:	ff 33                	push   DWORD PTR [ebx]
10003467:	e8 fc ff ff ff       	call   10003468 <ssfn_text+0xba>	10003468: R_386_PC32	free
1000346c:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000346f:	e8 fc ff ff ff       	call   10003470 <ssfn_text+0xc2>	10003470: R_386_PC32	free
10003474:	83 c4 10             	add    esp,0x10
10003477:	31 db                	xor    ebx,ebx
10003479:	83 c4 1c             	add    esp,0x1c
1000347c:	89 d8                	mov    eax,ebx
1000347e:	5b                   	pop    ebx
1000347f:	5e                   	pop    esi
10003480:	5f                   	pop    edi
10003481:	5d                   	pop    ebp
10003482:	c3                   	ret    
10003483:	90                   	nop

10003484 <NIContext::drvPutpixel4(int, int, unsigned int)>:
10003484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003488:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000348e:	8b 10                	mov    edx,DWORD PTR [eax]
10003490:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003494:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
10003497:	90                   	nop

10003498 <NIContext::drvDarken4(int, int, int)>:
10003498:	55                   	push   ebp
10003499:	57                   	push   edi
1000349a:	56                   	push   esi
1000349b:	53                   	push   ebx
1000349c:	83 ec 20             	sub    esp,0x20
1000349f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100034a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100034a7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100034ab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100034af:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100034b5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100034b9:	8b 10                	mov    edx,DWORD PTR [eax]
100034bb:	56                   	push   esi
100034bc:	53                   	push   ebx
100034bd:	50                   	push   eax
100034be:	ff 52 34             	call   DWORD PTR [edx+0x34]
100034c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100034c5:	89 c2                	mov    edx,eax
100034c7:	0f b6 ec             	movzx  ebp,ah
100034ca:	c1 ea 10             	shr    edx,0x10
100034cd:	0f af e9             	imul   ebp,ecx
100034d0:	0f b6 d2             	movzx  edx,dl
100034d3:	0f b6 c0             	movzx  eax,al
100034d6:	0f af d1             	imul   edx,ecx
100034d9:	0f af c1             	imul   eax,ecx
100034dc:	c1 ea 07             	shr    edx,0x7
100034df:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034e5:	c1 e8 07             	shr    eax,0x7
100034e8:	8b 39                	mov    edi,DWORD PTR [ecx]
100034ea:	c1 e2 10             	shl    edx,0x10
100034ed:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034f1:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034f5:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034f9:	c1 ed 07             	shr    ebp,0x7
100034fc:	c1 e5 08             	shl    ebp,0x8
100034ff:	09 ea                	or     edx,ebp
10003501:	09 c2                	or     edx,eax
10003503:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003507:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
1000350a:	83 c4 2c             	add    esp,0x2c
1000350d:	5b                   	pop    ebx
1000350e:	5e                   	pop    esi
1000350f:	5f                   	pop    edi
10003510:	5d                   	pop    ebp
10003511:	ff e0                	jmp    eax
10003513:	90                   	nop

10003514 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003514:	55                   	push   ebp
10003515:	b9 00 40 00 00       	mov    ecx,0x4000
1000351a:	57                   	push   edi
1000351b:	b0 ff                	mov    al,0xff
1000351d:	56                   	push   esi
1000351e:	53                   	push   ebx
1000351f:	83 ec 3c             	sub    esp,0x3c
10003522:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003526:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
1000352a:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
1000352d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003531:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003533:	85 db                	test   ebx,ebx
10003535:	75 10                	jne    10003547 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003537:	83 ec 0c             	sub    esp,0xc
1000353a:	68 38 51 00 10       	push   0x10005138	1000353b: R_386_32	.text
1000353f:	e8 fc ff ff ff       	call   10003540 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003540: R_386_PC32	KePanic(char const*)
10003544:	83 c4 10             	add    esp,0x10
10003547:	50                   	push   eax
10003548:	50                   	push   eax
10003549:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000354d:	50                   	push   eax
1000354e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003552:	50                   	push   eax
10003553:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003557:	50                   	push   eax
10003558:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000355c:	50                   	push   eax
1000355d:	56                   	push   esi
1000355e:	68 00 00 00 00       	push   0x0	1000355f: R_386_32	ssfn_ctx
10003563:	e8 fc ff ff ff       	call   10003564 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	10003564: R_386_PC32	ssfn_bbox
10003568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000356b:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
10003573:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003577:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
1000357f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10003583:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003588:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
1000358c:	0d 00 00 00 ff       	or     eax,0xff000000
10003591:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003595:	83 c4 1c             	add    esp,0x1c
10003598:	56                   	push   esi
10003599:	8d 44 24 20          	lea    eax,[esp+0x20]
1000359d:	50                   	push   eax
1000359e:	68 00 00 00 00       	push   0x0	1000359f: R_386_32	ssfn_ctx
100035a3:	e8 fc ff ff ff       	call   100035a4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100035a4: R_386_PC32	ssfn_render
100035a8:	83 c4 10             	add    esp,0x10
100035ab:	89 03                	mov    DWORD PTR [ebx],eax
100035ad:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100035b1:	31 db                	xor    ebx,ebx
100035b3:	89 f0                	mov    eax,esi
100035b5:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100035b9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100035bd:	7e 3f                	jle    100035fe <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100035bf:	31 ff                	xor    edi,edi
100035c1:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035c6:	39 f8                	cmp    eax,edi
100035c8:	7e 2c                	jle    100035f6 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035cd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035d0:	83 f8 ff             	cmp    eax,0xffffffff
100035d3:	74 1d                	je     100035f2 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035d5:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035db:	25 ff ff ff 00       	and    eax,0xffffff
100035e0:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035e2:	50                   	push   eax
100035e3:	56                   	push   esi
100035e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035e8:	01 f8                	add    eax,edi
100035ea:	50                   	push   eax
100035eb:	52                   	push   edx
100035ec:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035ef:	83 c4 10             	add    esp,0x10
100035f2:	43                   	inc    ebx
100035f3:	47                   	inc    edi
100035f4:	eb cb                	jmp    100035c1 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035f6:	29 c3                	sub    ebx,eax
100035f8:	46                   	inc    esi
100035f9:	83 c3 40             	add    ebx,0x40
100035fc:	eb b5                	jmp    100035b3 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035fe:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003603:	83 c4 3c             	add    esp,0x3c
10003606:	5b                   	pop    ebx
10003607:	5e                   	pop    esi
10003608:	5f                   	pop    edi
10003609:	5d                   	pop    ebp
1000360a:	c3                   	ret    
1000360b:	90                   	nop

1000360c <NIContext::~NIContext()>:
1000360c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003610: R_386_32	ssfn_ctx
10003614:	e9 00 db ff ff       	jmp    10001119 <ssfn_free>
10003619:	90                   	nop

1000361a <NIContext::NIContext(Video*, int, int, int, int)>:
1000361a:	55                   	push   ebp
1000361b:	ba 00 00 00 00       	mov    edx,0x0	1000361c: R_386_32	ssfn_ctx
10003620:	57                   	push   edi
10003621:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003626:	56                   	push   esi
10003627:	89 d7                	mov    edi,edx
10003629:	53                   	push   ebx
1000362a:	81 ec 48 02 00 00    	sub    esp,0x248
10003630:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003637:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000363e:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003644:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
1000364b:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003651:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003658:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
1000365e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
10003665:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
1000366b:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
10003672:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003678:	31 c0                	xor    eax,eax
1000367a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000367c:	68 00 40 00 00       	push   0x4000
10003681:	e8 fc ff ff ff       	call   10003682 <NIContext::NIContext(Video*, int, int, int, int)+0x68>	10003682: R_386_PC32	malloc
10003686:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003690:	89 03                	mov    DWORD PTR [ebx],eax
10003692:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003699:	e8 fc ff ff ff       	call   1000369a <NIContext::NIContext(Video*, int, int, int, int)+0x80>	1000369a: R_386_PC32	malloc
1000369e:	83 c4 0c             	add    esp,0xc
100036a1:	89 c6                	mov    esi,eax
100036a3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036a5: R_386_32	kernelProcess
100036a9:	68 51 51 00 10       	push   0x10005151	100036aa: R_386_32	.text
100036ae:	50                   	push   eax
100036af:	e8 fc ff ff ff       	call   100036b0 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100036b0: R_386_PC32	Directory::Directory(char const*, Process*)
100036b4:	83 c4 10             	add    esp,0x10
100036b7:	85 f6                	test   esi,esi
100036b9:	75 10                	jne    100036cb <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100036bb:	83 ec 0c             	sub    esp,0xc
100036be:	68 65 51 00 10       	push   0x10005165	100036bf: R_386_32	.text
100036c3:	e8 fc ff ff ff       	call   100036c4 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100036c4: R_386_PC32	KePanic(char const*)
100036c8:	83 c4 10             	add    esp,0x10
100036cb:	83 ec 0c             	sub    esp,0xc
100036ce:	56                   	push   esi
100036cf:	e8 fc ff ff ff       	call   100036d0 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036d0: R_386_PC32	Directory::open()
100036d4:	83 c4 10             	add    esp,0x10
100036d7:	85 c0                	test   eax,eax
100036d9:	75 e0                	jne    100036bb <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036db:	83 ec 0c             	sub    esp,0xc
100036de:	8b 06                	mov    eax,DWORD PTR [esi]
100036e0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036e4:	51                   	push   ecx
100036e5:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036ec:	52                   	push   edx
100036ed:	6a 00                	push   0x0
100036ef:	68 10 01 00 00       	push   0x110
100036f4:	56                   	push   esi
100036f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036f8:	83 c4 20             	add    esp,0x20
100036fb:	85 c0                	test   eax,eax
100036fd:	0f 85 a0 01 00 00    	jne    100038a3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003703:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
1000370b:	0f 85 92 01 00 00    	jne    100038a3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003711:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003718:	83 c9 ff             	or     ecx,0xffffffff
1000371b:	83 ec 0c             	sub    esp,0xc
1000371e:	89 ef                	mov    edi,ebp
10003720:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10003722:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003728:	89 ca                	mov    edx,ecx
1000372a:	f7 d2                	not    edx
1000372c:	52                   	push   edx
1000372d:	e8 fc ff ff ff       	call   1000372e <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000372e: R_386_PC32	malloc
10003732:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003736:	47                   	inc    edi
10003737:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
1000373d:	5a                   	pop    edx
1000373e:	59                   	pop    ecx
1000373f:	55                   	push   ebp
10003740:	50                   	push   eax
10003741:	e8 fc ff ff ff       	call   10003742 <NIContext::NIContext(Video*, int, int, int, int)+0x128>	10003742: R_386_PC32	strcpy
10003746:	5f                   	pop    edi
10003747:	58                   	pop    eax
10003748:	68 80 51 00 10       	push   0x10005180	10003749: R_386_32	.text
1000374d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003751:	57                   	push   edi
10003752:	e8 fc ff ff ff       	call   10003753 <NIContext::NIContext(Video*, int, int, int, int)+0x139>	10003753: R_386_PC32	strcpy
10003757:	58                   	pop    eax
10003758:	5a                   	pop    edx
10003759:	55                   	push   ebp
1000375a:	57                   	push   edi
1000375b:	e8 fc ff ff ff       	call   1000375c <NIContext::NIContext(Video*, int, int, int, int)+0x142>	1000375c: R_386_PC32	strcat
10003760:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003767:	e8 fc ff ff ff       	call   10003768 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003768: R_386_PC32	malloc
1000376c:	83 c4 0c             	add    esp,0xc
1000376f:	89 c5                	mov    ebp,eax
10003771:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003773: R_386_32	kernelProcess
10003777:	57                   	push   edi
10003778:	50                   	push   eax
10003779:	e8 fc ff ff ff       	call   1000377a <NIContext::NIContext(Video*, int, int, int, int)+0x160>	1000377a: R_386_PC32	File::File(char const*, Process*)
1000377e:	83 c4 10             	add    esp,0x10
10003781:	85 ed                	test   ebp,ebp
10003783:	0f 84 52 ff ff ff    	je     100036db <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003789:	50                   	push   eax
1000378a:	50                   	push   eax
1000378b:	6a 01                	push   0x1
1000378d:	55                   	push   ebp
1000378e:	e8 fc ff ff ff       	call   1000378f <NIContext::NIContext(Video*, int, int, int, int)+0x175>	1000378f: R_386_PC32	File::open(FileOpenMode)
10003793:	83 c4 10             	add    esp,0x10
10003796:	85 c0                	test   eax,eax
10003798:	74 0c                	je     100037a6 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
1000379a:	83 ec 0c             	sub    esp,0xc
1000379d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037a0:	55                   	push   ebp
100037a1:	e9 b4 00 00 00       	jmp    1000385a <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100037a6:	50                   	push   eax
100037a7:	8d 44 24 17          	lea    eax,[esp+0x17]
100037ab:	50                   	push   eax
100037ac:	8d 44 24 20          	lea    eax,[esp+0x20]
100037b0:	50                   	push   eax
100037b1:	55                   	push   ebp
100037b2:	e8 fc ff ff ff       	call   100037b3 <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100037b3: R_386_PC32	File::stat(unsigned long long*, bool*)
100037b7:	83 c4 10             	add    esp,0x10
100037ba:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100037bf:	74 0e                	je     100037cf <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100037c1:	83 ec 0c             	sub    esp,0xc
100037c4:	55                   	push   ebp
100037c5:	e8 fc ff ff ff       	call   100037c6 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100037c6: R_386_PC32	File::close()
100037ca:	e9 85 00 00 00       	jmp    10003854 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037df:	83 ec 0c             	sub    esp,0xc
100037e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037e6:	e8 fc ff ff ff       	call   100037e7 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037e7: R_386_PC32	malloc
100037eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037ef:	58                   	pop    eax
100037f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037f3:	8d 54 24 20          	lea    edx,[esp+0x20]
100037f7:	52                   	push   edx
100037f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003804:	55                   	push   ebp
10003805:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003808:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000380c:	83 c4 1c             	add    esp,0x1c
1000380f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003813:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003817:	68 95 51 00 10       	push   0x10005195	10003818: R_386_32	.text
1000381c:	e8 fc ff ff ff       	call   1000381d <NIContext::NIContext(Video*, int, int, int, int)+0x203>	1000381d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003821:	83 c4 10             	add    esp,0x10
10003824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003828:	85 c0                	test   eax,eax
1000382a:	75 15                	jne    10003841 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000382c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003830:	89 c1                	mov    ecx,eax
10003832:	c1 f9 1f             	sar    ecx,0x1f
10003835:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003839:	75 06                	jne    10003841 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000383b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000383f:	74 24                	je     10003865 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003841:	83 ec 0c             	sub    esp,0xc
10003844:	55                   	push   ebp
10003845:	e8 fc ff ff ff       	call   10003846 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003846: R_386_PC32	File::close()
1000384a:	58                   	pop    eax
1000384b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000384f:	e8 fc ff ff ff       	call   10003850 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003850: R_386_PC32	free
10003854:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003857:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000385a:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000385d:	83 c4 10             	add    esp,0x10
10003860:	e9 76 fe ff ff       	jmp    100036db <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003865:	50                   	push   eax
10003866:	50                   	push   eax
10003867:	57                   	push   edi
10003868:	68 a9 51 00 10       	push   0x100051a9	10003869: R_386_32	.text
1000386d:	e8 fc ff ff ff       	call   1000386e <NIContext::NIContext(Video*, int, int, int, int)+0x254>	1000386e: R_386_PC32	Dbg::kprintf(char const*, ...)
10003872:	5a                   	pop    edx
10003873:	59                   	pop    ecx
10003874:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003878:	68 00 00 00 00       	push   0x0	10003879: R_386_32	ssfn_ctx
1000387d:	e8 fc ff ff ff       	call   1000387e <NIContext::NIContext(Video*, int, int, int, int)+0x264>	1000387e: R_386_PC32	ssfn_load
10003882:	5b                   	pop    ebx
10003883:	5f                   	pop    edi
10003884:	50                   	push   eax
10003885:	68 ba 51 00 10       	push   0x100051ba	10003886: R_386_32	.text
1000388a:	e8 fc ff ff ff       	call   1000388b <NIContext::NIContext(Video*, int, int, int, int)+0x271>	1000388b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000388f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003892:	e8 fc ff ff ff       	call   10003893 <NIContext::NIContext(Video*, int, int, int, int)+0x279>	10003893: R_386_PC32	File::close()
10003897:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000389a:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000389d:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038a0:	83 c4 10             	add    esp,0x10
100038a3:	83 ec 0c             	sub    esp,0xc
100038a6:	56                   	push   esi
100038a7:	e8 fc ff ff ff       	call   100038a8 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100038a8: R_386_PC32	Directory::close()
100038ac:	8b 06                	mov    eax,DWORD PTR [esi]
100038ae:	89 34 24             	mov    DWORD PTR [esp],esi
100038b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038b4:	b8 00 00 00 00       	mov    eax,0x0	100038b5: R_386_32	ssfn_ctx
100038b9:	e8 f7 cb ff ff       	call   100004b5 <_ssfn_fc.part.1>
100038be:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100038c0: R_386_32	ssfn_ctx
100038c8:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038ca: R_386_32	ssfn_ctx
100038d2:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038d4: R_386_32	ssfn_ctx
100038dc:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038de: R_386_32	ssfn_ctx
100038e6:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038e8: R_386_32	ssfn_ctx
100038f0:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038f2: R_386_32	ssfn_ctx
100038fa:	81 c4 4c 02 00 00    	add    esp,0x24c
10003900:	5b                   	pop    ebx
10003901:	5e                   	pop    esi
10003902:	5f                   	pop    edi
10003903:	5d                   	pop    ebp
10003904:	c3                   	ret    
10003905:	90                   	nop

10003906 <NiLoadCursors()>:
10003906:	55                   	push   ebp
10003907:	57                   	push   edi
10003908:	56                   	push   esi
10003909:	53                   	push   ebx
1000390a:	83 ec 38             	sub    esp,0x38
1000390d:	68 14 01 00 00       	push   0x114
10003912:	e8 fc ff ff ff       	call   10003913 <NiLoadCursors()+0xd>	10003913: R_386_PC32	malloc
10003917:	83 c4 0c             	add    esp,0xc
1000391a:	89 c5                	mov    ebp,eax
1000391c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000391e: R_386_32	kernelProcess
10003922:	68 7c 54 00 10       	push   0x1000547c	10003923: R_386_32	.text
10003927:	50                   	push   eax
10003928:	e8 fc ff ff ff       	call   10003929 <NiLoadCursors()+0x23>	10003929: R_386_PC32	File::File(char const*, Process*)
1000392d:	58                   	pop    eax
1000392e:	5a                   	pop    edx
1000392f:	6a 01                	push   0x1
10003931:	55                   	push   ebp
10003932:	e8 fc ff ff ff       	call   10003933 <NiLoadCursors()+0x2d>	10003933: R_386_PC32	File::open(FileOpenMode)
10003937:	83 c4 10             	add    esp,0x10
1000393a:	85 c0                	test   eax,eax
1000393c:	74 0a                	je     10003948 <NiLoadCursors()+0x42>
1000393e:	83 ec 0c             	sub    esp,0xc
10003941:	68 9b 54 00 10       	push   0x1000549b	10003942: R_386_32	.text
10003946:	eb 4c                	jmp    10003994 <NiLoadCursors()+0x8e>
10003948:	53                   	push   ebx
10003949:	8d 44 24 17          	lea    eax,[esp+0x17]
1000394d:	50                   	push   eax
1000394e:	8d 44 24 20          	lea    eax,[esp+0x20]
10003952:	50                   	push   eax
10003953:	55                   	push   ebp
10003954:	e8 fc ff ff ff       	call   10003955 <NiLoadCursors()+0x4f>	10003955: R_386_PC32	File::stat(unsigned long long*, bool*)
10003959:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000395d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003961:	89 34 24             	mov    DWORD PTR [esp],esi
10003964:	e8 fc ff ff ff       	call   10003965 <NiLoadCursors()+0x5f>	10003965: R_386_PC32	malloc
10003969:	89 c3                	mov    ebx,eax
1000396b:	58                   	pop    eax
1000396c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000396f:	8d 54 24 20          	lea    edx,[esp+0x20]
10003973:	52                   	push   edx
10003974:	53                   	push   ebx
10003975:	57                   	push   edi
10003976:	56                   	push   esi
10003977:	55                   	push   ebp
10003978:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000397b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000397f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003983:	83 c4 20             	add    esp,0x20
10003986:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
1000398a:	74 12                	je     1000399e <NiLoadCursors()+0x98>
1000398c:	83 ec 0c             	sub    esp,0xc
1000398f:	68 af 54 00 10       	push   0x100054af	10003990: R_386_32	.text
10003994:	e8 fc ff ff ff       	call   10003995 <NiLoadCursors()+0x8f>	10003995: R_386_PC32	Dbg::kprintf(char const*, ...)
10003999:	e9 3d 01 00 00       	jmp    10003adb <NiLoadCursors()+0x1d5>
1000399e:	6a 00                	push   0x0
100039a0:	31 ed                	xor    ebp,ebp
100039a2:	68 04 01 00 00       	push   0x104
100039a7:	52                   	push   edx
100039a8:	50                   	push   eax
100039a9:	e8 fc ff ff ff       	call   100039aa <NiLoadCursors()+0xa4>	100039aa: R_386_PC32	__udivdi3
100039ae:	5a                   	pop    edx
100039af:	59                   	pop    ecx
100039b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100039b4:	50                   	push   eax
100039b5:	68 c3 54 00 10       	push   0x100054c3	100039b6: R_386_32	.text
100039ba:	e8 fc ff ff ff       	call   100039bb <NiLoadCursors()+0xb5>	100039bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100039bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
100039c2:	e8 fc ff ff ff       	call   100039c3 <NiLoadCursors()+0xbd>	100039c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100039c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100039cb:	8d 04 83             	lea    eax,[ebx+eax*4]
100039ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100039d2:	83 c4 10             	add    esp,0x10
100039d5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100039d9:	0f 8d f3 00 00 00    	jge    10003ad2 <NiLoadCursors()+0x1cc>
100039df:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039e2:	50                   	push   eax
100039e3:	6a 04                	push   0x4
100039e5:	68 d0 54 00 10       	push   0x100054d0	100039e6: R_386_32	.text
100039ea:	56                   	push   esi
100039eb:	e8 fc ff ff ff       	call   100039ec <NiLoadCursors()+0xe6>	100039ec: R_386_PC32	memcmp
100039f0:	83 c4 10             	add    esp,0x10
100039f3:	85 c0                	test   eax,eax
100039f5:	0f 84 b8 00 00 00    	je     10003ab3 <NiLoadCursors()+0x1ad>
100039fb:	50                   	push   eax
100039fc:	6a 04                	push   0x4
100039fe:	68 d5 54 00 10       	push   0x100054d5	100039ff: R_386_32	.text
10003a03:	56                   	push   esi
10003a04:	e8 fc ff ff ff       	call   10003a05 <NiLoadCursors()+0xff>	10003a05: R_386_PC32	memcmp
10003a09:	83 c4 10             	add    esp,0x10
10003a0c:	85 c0                	test   eax,eax
10003a0e:	74 7b                	je     10003a8b <NiLoadCursors()+0x185>
10003a10:	50                   	push   eax
10003a11:	6a 04                	push   0x4
10003a13:	68 da 54 00 10       	push   0x100054da	10003a14: R_386_32	.text
10003a18:	56                   	push   esi
10003a19:	e8 fc ff ff ff       	call   10003a1a <NiLoadCursors()+0x114>	10003a1a: R_386_PC32	memcmp
10003a1e:	83 c4 10             	add    esp,0x10
10003a21:	85 c0                	test   eax,eax
10003a23:	74 6d                	je     10003a92 <NiLoadCursors()+0x18c>
10003a25:	57                   	push   edi
10003a26:	6a 04                	push   0x4
10003a28:	68 df 54 00 10       	push   0x100054df	10003a29: R_386_32	.text
10003a2d:	56                   	push   esi
10003a2e:	e8 fc ff ff ff       	call   10003a2f <NiLoadCursors()+0x129>	10003a2f: R_386_PC32	memcmp
10003a33:	83 c4 10             	add    esp,0x10
10003a36:	85 c0                	test   eax,eax
10003a38:	74 5f                	je     10003a99 <NiLoadCursors()+0x193>
10003a3a:	51                   	push   ecx
10003a3b:	6a 04                	push   0x4
10003a3d:	68 e4 54 00 10       	push   0x100054e4	10003a3e: R_386_32	.text
10003a42:	56                   	push   esi
10003a43:	e8 fc ff ff ff       	call   10003a44 <NiLoadCursors()+0x13e>	10003a44: R_386_PC32	memcmp
10003a48:	83 c4 10             	add    esp,0x10
10003a4b:	85 c0                	test   eax,eax
10003a4d:	74 51                	je     10003aa0 <NiLoadCursors()+0x19a>
10003a4f:	52                   	push   edx
10003a50:	6a 04                	push   0x4
10003a52:	68 e9 54 00 10       	push   0x100054e9	10003a53: R_386_32	.text
10003a57:	56                   	push   esi
10003a58:	e8 fc ff ff ff       	call   10003a59 <NiLoadCursors()+0x153>	10003a59: R_386_PC32	memcmp
10003a5d:	83 c4 10             	add    esp,0x10
10003a60:	85 c0                	test   eax,eax
10003a62:	74 43                	je     10003aa7 <NiLoadCursors()+0x1a1>
10003a64:	50                   	push   eax
10003a65:	6a 04                	push   0x4
10003a67:	68 ee 54 00 10       	push   0x100054ee	10003a68: R_386_32	.text
10003a6c:	56                   	push   esi
10003a6d:	e8 fc ff ff ff       	call   10003a6e <NiLoadCursors()+0x168>	10003a6e: R_386_PC32	memcmp
10003a72:	83 c4 10             	add    esp,0x10
10003a75:	85 c0                	test   eax,eax
10003a77:	74 35                	je     10003aae <NiLoadCursors()+0x1a8>
10003a79:	83 ec 0c             	sub    esp,0xc
10003a7c:	68 f3 54 00 10       	push   0x100054f3	10003a7d: R_386_32	.text
10003a81:	e8 fc ff ff ff       	call   10003a82 <NiLoadCursors()+0x17c>	10003a82: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a86:	83 c4 10             	add    esp,0x10
10003a89:	eb 47                	jmp    10003ad2 <NiLoadCursors()+0x1cc>
10003a8b:	b8 00 02 00 00       	mov    eax,0x200
10003a90:	eb 21                	jmp    10003ab3 <NiLoadCursors()+0x1ad>
10003a92:	b8 00 03 00 00       	mov    eax,0x300
10003a97:	eb 1a                	jmp    10003ab3 <NiLoadCursors()+0x1ad>
10003a99:	b8 00 01 00 00       	mov    eax,0x100
10003a9e:	eb 13                	jmp    10003ab3 <NiLoadCursors()+0x1ad>
10003aa0:	b8 00 04 00 00       	mov    eax,0x400
10003aa5:	eb 0c                	jmp    10003ab3 <NiLoadCursors()+0x1ad>
10003aa7:	b8 00 05 00 00       	mov    eax,0x500
10003aac:	eb 05                	jmp    10003ab3 <NiLoadCursors()+0x1ad>
10003aae:	b8 00 06 00 00       	mov    eax,0x600
10003ab3:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003ab5: R_386_32	___mouse_data
10003ab9:	b9 00 01 00 00       	mov    ecx,0x100
10003abe:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003ac2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003ac4:	45                   	inc    ebp
10003ac5:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003acd:	e9 03 ff ff ff       	jmp    100039d5 <NiLoadCursors()+0xcf>
10003ad2:	83 ec 0c             	sub    esp,0xc
10003ad5:	53                   	push   ebx
10003ad6:	e8 fc ff ff ff       	call   10003ad7 <NiLoadCursors()+0x1d1>	10003ad7: R_386_PC32	free
10003adb:	83 c4 10             	add    esp,0x10
10003ade:	83 c4 2c             	add    esp,0x2c
10003ae1:	5b                   	pop    ebx
10003ae2:	5e                   	pop    esi
10003ae3:	5f                   	pop    edi
10003ae4:	5d                   	pop    ebp
10003ae5:	c3                   	ret    

10003ae6 <NIDesktop::NIDesktop(NIContext*)>:
10003ae6:	53                   	push   ebx
10003ae7:	83 ec 14             	sub    esp,0x14
10003aea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003af2:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003af9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003afc:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003b03:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003b0a:	6a 08                	push   0x8
10003b0c:	e8 fc ff ff ff       	call   10003b0d <NIDesktop::NIDesktop(NIContext*)+0x27>	10003b0d: R_386_PC32	malloc
10003b11:	89 03                	mov    DWORD PTR [ebx],eax
10003b13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003b1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003b20:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003b22: R_386_32	mouseDesktop
10003b26:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b28: R_386_32	guiMouseHandler
	10003b2c: R_386_32	NiHandleMouse(int, int, int, int)
10003b30:	83 c4 18             	add    esp,0x18
10003b33:	5b                   	pop    ebx
10003b34:	c3                   	ret    
10003b35:	90                   	nop

10003b36 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b36:	53                   	push   ebx
10003b37:	83 ec 08             	sub    esp,0x8
10003b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b3e:	8b 00                	mov    eax,DWORD PTR [eax]
10003b40:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b42:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b46:	74 1d                	je     10003b65 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b48:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b4a:	85 c0                	test   eax,eax
10003b4c:	74 12                	je     10003b60 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b4e:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b52:	74 0c                	je     10003b60 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b54:	83 ec 0c             	sub    esp,0xc
10003b57:	50                   	push   eax
10003b58:	e8 fc ff ff ff       	call   10003b59 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b59: R_386_PC32	NIWindow::invalidate()
10003b5d:	83 c4 10             	add    esp,0x10
10003b60:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b63:	eb dd                	jmp    10003b42 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b65:	83 c4 08             	add    esp,0x8
10003b68:	5b                   	pop    ebx
10003b69:	c3                   	ret    

10003b6a <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b6a:	57                   	push   edi
10003b6b:	56                   	push   esi
10003b6c:	53                   	push   ebx
10003b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b75:	8b 00                	mov    eax,DWORD PTR [eax]
10003b77:	8b 00                	mov    eax,DWORD PTR [eax]
10003b79:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b7c:	85 db                	test   ebx,ebx
10003b7e:	74 43                	je     10003bc3 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b80:	8b 00                	mov    eax,DWORD PTR [eax]
10003b82:	85 c0                	test   eax,eax
10003b84:	74 3f                	je     10003bc5 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b86:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b89:	39 ca                	cmp    edx,ecx
10003b8b:	7e 04                	jle    10003b91 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b8d:	89 d8                	mov    eax,ebx
10003b8f:	eb e8                	jmp    10003b79 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b91:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b94:	01 d6                	add    esi,edx
10003b96:	39 ce                	cmp    esi,ecx
10003b98:	7e f3                	jle    10003b8d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b9a:	89 ce                	mov    esi,ecx
10003b9c:	29 d6                	sub    esi,edx
10003b9e:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003ba1:	8d 34 b2             	lea    esi,[edx+esi*4]
10003ba4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003ba7:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003baa:	01 d7                	add    edi,edx
10003bac:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003bb0:	7f db                	jg     10003b8d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bb2:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003bb5:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003bb9:	29 f2                	sub    edx,esi
10003bbb:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003bbf:	7e cc                	jle    10003b8d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bc1:	eb 02                	jmp    10003bc5 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003bc3:	31 c0                	xor    eax,eax
10003bc5:	5b                   	pop    ebx
10003bc6:	5e                   	pop    esi
10003bc7:	5f                   	pop    edi
10003bc8:	c3                   	ret    
10003bc9:	90                   	nop

10003bca <NIDesktop::renderScanline(int, int, int)>:
10003bca:	55                   	push   ebp
10003bcb:	57                   	push   edi
10003bcc:	56                   	push   esi
10003bcd:	53                   	push   ebx
10003bce:	83 ec 2c             	sub    esp,0x2c
10003bd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bd5:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003bd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003bdd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003be1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003be5:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003be7: R_386_32	render
10003beb:	31 c0                	xor    eax,eax
10003bed:	89 d7                	mov    edi,edx
10003bef:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bf9:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bfb: R_386_32	shadow
10003bff:	b0 80                	mov    al,0x80
10003c01:	89 d7                	mov    edi,edx
10003c03:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003c09:	8b 00                	mov    eax,DWORD PTR [eax]
10003c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10003c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003c15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003c19:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003c1b: R_386_32	movingWin
10003c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c26:	85 c0                	test   eax,eax
10003c28:	75 09                	jne    10003c33 <NIDesktop::renderScanline(int, int, int)+0x69>
10003c2a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c2e:	e9 cf 02 00 00       	jmp    10003f02 <NIDesktop::renderScanline(int, int, int)+0x338>
10003c33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c37:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c39:	85 db                	test   ebx,ebx
10003c3b:	74 ed                	je     10003c2a <NIDesktop::renderScanline(int, int, int)+0x60>
10003c3d:	39 da                	cmp    edx,ebx
10003c3f:	75 06                	jne    10003c47 <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c45:	eb d8                	jmp    10003c1f <NIDesktop::renderScanline(int, int, int)+0x55>
10003c47:	83 ec 0c             	sub    esp,0xc
10003c4a:	53                   	push   ebx
10003c4b:	e8 fc ff ff ff       	call   10003c4c <NIDesktop::renderScanline(int, int, int)+0x82>	10003c4c: R_386_PC32	NIWindow::request()
10003c50:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c53:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c56:	83 c4 10             	add    esp,0x10
10003c59:	01 c2                	add    edx,eax
10003c5b:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c5f:	0f 8e ad 00 00 00    	jle    10003d12 <NIDesktop::renderScanline(int, int, int)+0x148>
10003c65:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c69:	0f 85 a3 00 00 00    	jne    10003d12 <NIDesktop::renderScanline(int, int, int)+0x148>
10003c6f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c73:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c76:	83 c0 06             	add    eax,0x6
10003c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c80:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c83:	01 c8                	add    eax,ecx
10003c85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c89:	39 d0                	cmp    eax,edx
10003c8b:	0f 8e 40 01 00 00    	jle    10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c91:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c95:	7c 75                	jl     10003d0c <NIDesktop::renderScanline(int, int, int)+0x142>
10003c97:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003c9b:	0f 8f 30 01 00 00    	jg     10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003ca1:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003ca4:	89 d5                	mov    ebp,edx
10003ca6:	6b fe fc             	imul   edi,esi,0xfffffffc
10003ca9:	29 cd                	sub    ebp,ecx
10003cab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003caf:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003cb3:	39 f0                	cmp    eax,esi
10003cb5:	7c 1d                	jl     10003cd4 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cb7:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003cba:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003cbd:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003cc0:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003cc4:	7f 0e                	jg     10003cd4 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cc6:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003cca:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003cce:	29 cd                	sub    ebp,ecx
10003cd0:	39 d5                	cmp    ebp,edx
10003cd2:	7d 07                	jge    10003cdb <NIDesktop::renderScanline(int, int, int)+0x111>
10003cd4:	40                   	inc    eax
10003cd5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003cd9:	75 d8                	jne    10003cb3 <NIDesktop::renderScanline(int, int, int)+0xe9>
10003cdb:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003cdf:	48                   	dec    eax
10003ce0:	83 f8 03             	cmp    eax,0x3
10003ce3:	77 27                	ja     10003d0c <NIDesktop::renderScanline(int, int, int)+0x142>
10003ce5:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003ce7: R_386_32	render
10003cec:	75 1e                	jne    10003d0c <NIDesktop::renderScanline(int, int, int)+0x142>
10003cee:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003cf5:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003cf8: R_386_32	shadow
10003cfc:	0f af c1             	imul   eax,ecx
10003cff:	d1 f9                	sar    ecx,1
10003d01:	c1 f8 08             	sar    eax,0x8
10003d04:	01 c1                	add    ecx,eax
10003d06:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003d08: R_386_32	shadow
10003d0c:	42                   	inc    edx
10003d0d:	e9 6b ff ff ff       	jmp    10003c7d <NIDesktop::renderScanline(int, int, int)+0xb3>
10003d12:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d16:	0f 8d b5 00 00 00    	jge    10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d1c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003d20:	0f 85 ab 00 00 00    	jne    10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d26:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d2a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003d2d:	8d 77 fa             	lea    esi,[edi-0x6]
10003d30:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003d34:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003d37:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003d3a:	01 ce                	add    esi,ecx
10003d3c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003d40:	39 c6                	cmp    esi,eax
10003d42:	0f 8e 89 00 00 00    	jle    10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d48:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003d4c:	7c 7d                	jl     10003dcb <NIDesktop::renderScanline(int, int, int)+0x201>
10003d4e:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d52:	7f 7d                	jg     10003dd1 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d54:	89 c7                	mov    edi,eax
10003d56:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d5a:	29 cf                	sub    edi,ecx
10003d5c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d60:	4a                   	dec    edx
10003d61:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d65:	29 d1                	sub    ecx,edx
10003d67:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d6b:	74 32                	je     10003d9f <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d6d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d70:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d73:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d76:	39 d5                	cmp    ebp,edx
10003d78:	7e e6                	jle    10003d60 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d7a:	89 d5                	mov    ebp,edx
10003d7c:	29 fd                	sub    ebp,edi
10003d7e:	39 ee                	cmp    esi,ebp
10003d80:	7e 1d                	jle    10003d9f <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d82:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d85:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d88:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d8b:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d8f:	7f cf                	jg     10003d60 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d91:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d95:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003d99:	29 f7                	sub    edi,esi
10003d9b:	39 c7                	cmp    edi,eax
10003d9d:	7c c1                	jl     10003d60 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d9f:	83 f9 04             	cmp    ecx,0x4
10003da2:	77 27                	ja     10003dcb <NIDesktop::renderScanline(int, int, int)+0x201>
10003da4:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003da6: R_386_32	render
10003dab:	75 1e                	jne    10003dcb <NIDesktop::renderScanline(int, int, int)+0x201>
10003dad:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003db4:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003db7: R_386_32	shadow
10003dbb:	0f af d1             	imul   edx,ecx
10003dbe:	d1 f9                	sar    ecx,1
10003dc0:	c1 fa 08             	sar    edx,0x8
10003dc3:	01 d1                	add    ecx,edx
10003dc5:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003dc7: R_386_32	shadow
10003dcb:	40                   	inc    eax
10003dcc:	e9 63 ff ff ff       	jmp    10003d34 <NIDesktop::renderScanline(int, int, int)+0x16a>
10003dd1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003dd4:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003dd8:	0f 8f 00 01 00 00    	jg     10003ede <NIDesktop::renderScanline(int, int, int)+0x314>
10003dde:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003de1:	01 c2                	add    edx,eax
10003de3:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003de7:	0f 8e f1 00 00 00    	jle    10003ede <NIDesktop::renderScanline(int, int, int)+0x314>
10003ded:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003df1:	29 c2                	sub    edx,eax
10003df3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003df6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003dfa:	8d 14 90             	lea    edx,[eax+edx*4]
10003dfd:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003e00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e04:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003e0c:	74 09                	je     10003e17 <NIDesktop::renderScanline(int, int, int)+0x24d>
10003e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e12:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003e15:	eb 78                	jmp    10003e8f <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003e17:	31 c9                	xor    ecx,ecx
10003e19:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e20:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003e24:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003e27:	01 cd                	add    ebp,ecx
10003e29:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e2d:	01 ca                	add    edx,ecx
10003e2f:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003e31: R_386_32	render
10003e36:	75 1f                	jne    10003e57 <NIDesktop::renderScanline(int, int, int)+0x28d>
10003e38:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003e3b: R_386_32	shadow
10003e3f:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003e42:	83 c7 7d             	add    edi,0x7d
10003e45:	0f af f7             	imul   esi,edi
10003e48:	d1 ff                	sar    edi,1
10003e4a:	c1 fe 08             	sar    esi,0x8
10003e4d:	01 f7                	add    edi,esi
10003e4f:	89 f8                	mov    eax,edi
10003e51:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e53: R_386_32	shadow
10003e57:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e59: R_386_32	render
10003e5e:	75 20                	jne    10003e80 <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e60:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e67:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e6a: R_386_32	shadow
10003e6e:	0f af f7             	imul   esi,edi
10003e71:	d1 ff                	sar    edi,1
10003e73:	c1 fe 08             	sar    esi,0x8
10003e76:	01 f7                	add    edi,esi
10003e78:	89 f8                	mov    eax,edi
10003e7a:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e7c: R_386_32	shadow
10003e80:	41                   	inc    ecx
10003e81:	83 f9 04             	cmp    ecx,0x4
10003e84:	75 93                	jne    10003e19 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e86:	eb 86                	jmp    10003e0e <NIDesktop::renderScanline(int, int, int)+0x244>
10003e88:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e8c:	7d 11                	jge    10003e9f <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e8e:	40                   	inc    eax
10003e8f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e92:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e95:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e99:	39 c2                	cmp    edx,eax
10003e9b:	7f eb                	jg     10003e88 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003e9d:	eb 3f                	jmp    10003ede <NIDesktop::renderScanline(int, int, int)+0x314>
10003e9f:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003ea3:	7f 39                	jg     10003ede <NIDesktop::renderScanline(int, int, int)+0x314>
10003ea5:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003ea7: R_386_32	render
10003eac:	75 e0                	jne    10003e8e <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003eae:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003eb0: R_386_32	render
10003eb5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003eb9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003ebc:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003ebf:	0f af ca             	imul   ecx,edx
10003ec2:	89 c2                	mov    edx,eax
10003ec4:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003ec7:	01 ca                	add    edx,ecx
10003ec9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003ecc:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ed0:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003ed3:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003ed6: R_386_32	renderData
10003eda:	75 b2                	jne    10003e8e <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003edc:	eb 44                	jmp    10003f22 <NIDesktop::renderScanline(int, int, int)+0x358>
10003ede:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003ee2:	0f 85 42 fd ff ff    	jne    10003c2a <NIDesktop::renderScanline(int, int, int)+0x60>
10003ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003eef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003ef3:	e9 21 fd ff ff       	jmp    10003c19 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003ef8:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003efa: R_386_32	render
10003eff:	74 09                	je     10003f0a <NIDesktop::renderScanline(int, int, int)+0x340>
10003f01:	40                   	inc    eax
10003f02:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f06:	7c f0                	jl     10003ef8 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003f08:	eb 18                	jmp    10003f22 <NIDesktop::renderScanline(int, int, int)+0x358>
10003f0a:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003f0c: R_386_32	render
10003f11:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003f14: R_386_32	renderData
10003f1c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003f20:	75 df                	jne    10003f01 <NIDesktop::renderScanline(int, int, int)+0x337>
10003f22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f26:	8b 00                	mov    eax,DWORD PTR [eax]
10003f28:	8b 00                	mov    eax,DWORD PTR [eax]
10003f2a:	85 c0                	test   eax,eax
10003f2c:	74 5e                	je     10003f8c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f2e:	8b 00                	mov    eax,DWORD PTR [eax]
10003f30:	85 c0                	test   eax,eax
10003f32:	74 58                	je     10003f8c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f34:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003f38:	75 52                	jne    10003f8c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f3a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003f3e:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003f42:	7d 48                	jge    10003f8c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f44:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003f46: R_386_32	shadow
10003f4a:	3c 80                	cmp    al,0x80
10003f4c:	74 3b                	je     10003f89 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003f4e:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f51: R_386_32	renderData
10003f55:	0f b6 f0             	movzx  esi,al
10003f58:	89 d1                	mov    ecx,edx
10003f5a:	0f b6 c6             	movzx  eax,dh
10003f5d:	c1 e9 10             	shr    ecx,0x10
10003f60:	0f af c6             	imul   eax,esi
10003f63:	0f b6 c9             	movzx  ecx,cl
10003f66:	0f b6 d2             	movzx  edx,dl
10003f69:	0f af ce             	imul   ecx,esi
10003f6c:	0f af d6             	imul   edx,esi
10003f6f:	c1 e9 07             	shr    ecx,0x7
10003f72:	c1 e8 07             	shr    eax,0x7
10003f75:	c1 e1 10             	shl    ecx,0x10
10003f78:	c1 e0 08             	shl    eax,0x8
10003f7b:	c1 ea 07             	shr    edx,0x7
10003f7e:	09 c1                	or     ecx,eax
10003f80:	09 ca                	or     edx,ecx
10003f82:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f85: R_386_32	renderData
10003f89:	43                   	inc    ebx
10003f8a:	eb b2                	jmp    10003f3e <NIDesktop::renderScanline(int, int, int)+0x374>
10003f8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f90:	83 ec 0c             	sub    esp,0xc
10003f93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f96:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003f9c:	8b 10                	mov    edx,DWORD PTR [eax]
10003f9e:	68 00 00 00 00       	push   0x0	10003f9f: R_386_32	renderData
10003fa3:	6a 00                	push   0x0
10003fa5:	6a 01                	push   0x1
10003fa7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003fab:	6a 00                	push   0x0
10003fad:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fb1:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fb5:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003fb9:	50                   	push   eax
10003fba:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003fbd:	83 c4 5c             	add    esp,0x5c
10003fc0:	5b                   	pop    ebx
10003fc1:	5e                   	pop    esi
10003fc2:	5f                   	pop    edi
10003fc3:	5d                   	pop    ebp
10003fc4:	c3                   	ret    
10003fc5:	90                   	nop

10003fc6 <NIDesktop::rangeRefresh(int, int, int, int)>:
10003fc6:	53                   	push   ebx
10003fc7:	83 ec 08             	sub    esp,0x8
10003fca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003fce:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003fd2:	7d 18                	jge    10003fec <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fdc:	53                   	push   ebx
10003fdd:	43                   	inc    ebx
10003fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003fe2:	e8 fc ff ff ff       	call   10003fe3 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003fe3: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003fe7:	83 c4 10             	add    esp,0x10
10003fea:	eb e2                	jmp    10003fce <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003fec:	83 c4 08             	add    esp,0x8
10003fef:	5b                   	pop    ebx
10003ff0:	c3                   	ret    
10003ff1:	90                   	nop

10003ff2 <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003ff2:	55                   	push   ebp
10003ff3:	ba 05 00 00 00       	mov    edx,0x5
10003ff8:	57                   	push   edi
10003ff9:	56                   	push   esi
10003ffa:	53                   	push   ebx
10003ffb:	83 ec 0c             	sub    esp,0xc
10003ffe:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10004002:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004005:	83 f8 05             	cmp    eax,0x5
10004008:	7c 02                	jl     1000400c <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
1000400a:	89 c2                	mov    edx,eax
1000400c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10004010:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
10004013:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10004016:	83 ea 05             	sub    edx,0x5
10004019:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
1000401f:	8d 70 05             	lea    esi,[eax+0x5]
10004022:	8d 69 fb             	lea    ebp,[ecx-0x5]
10004025:	39 c5                	cmp    ebp,eax
10004027:	7f 03                	jg     1000402c <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10004029:	8d 71 ff             	lea    esi,[ecx-0x1]
1000402c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000402f:	89 c1                	mov    ecx,eax
10004031:	83 f8 05             	cmp    eax,0x5
10004034:	7d 05                	jge    1000403b <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
10004036:	b9 05 00 00 00       	mov    ecx,0x5
1000403b:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
1000403e:	83 e9 05             	sub    ecx,0x5
10004041:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004047:	8d 58 05             	lea    ebx,[eax+0x5]
1000404a:	8d 6f fb             	lea    ebp,[edi-0x5]
1000404d:	39 c5                	cmp    ebp,eax
1000404f:	7f 03                	jg     10004054 <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
10004051:	8d 5f ff             	lea    ebx,[edi-0x1]
10004054:	83 ec 0c             	sub    esp,0xc
10004057:	53                   	push   ebx
10004058:	51                   	push   ecx
10004059:	56                   	push   esi
1000405a:	52                   	push   edx
1000405b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000405f:	e8 fc ff ff ff       	call   10004060 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	10004060: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004064:	83 c4 2c             	add    esp,0x2c
10004067:	5b                   	pop    ebx
10004068:	5e                   	pop    esi
10004069:	5f                   	pop    edi
1000406a:	5d                   	pop    ebp
1000406b:	c3                   	ret    

1000406c <NIDesktop::completeRefresh()>:
1000406c:	56                   	push   esi
1000406d:	53                   	push   ebx
1000406e:	31 f6                	xor    esi,esi
10004070:	50                   	push   eax
10004071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004075:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004078:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
1000407e:	7e 15                	jle    10004095 <NIDesktop::completeRefresh()+0x29>
10004080:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004086:	6a 00                	push   0x0
10004088:	56                   	push   esi
10004089:	46                   	inc    esi
1000408a:	53                   	push   ebx
1000408b:	e8 fc ff ff ff       	call   1000408c <NIDesktop::completeRefresh()+0x20>	1000408c: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004090:	83 c4 10             	add    esp,0x10
10004093:	eb e0                	jmp    10004075 <NIDesktop::completeRefresh()+0x9>
10004095:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000409b:	83 ec 0c             	sub    esp,0xc
1000409e:	8b 0a                	mov    ecx,DWORD PTR [edx]
100040a0:	6a 00                	push   0x0
100040a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100040a5:	05 00 00 00 00       	add    eax,0x0	100040a6: R_386_32	___mouse_data
100040aa:	50                   	push   eax
100040ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100040ae:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100040b1:	52                   	push   edx
100040b2:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100040b5:	83 c4 24             	add    esp,0x24
100040b8:	5b                   	pop    ebx
100040b9:	5e                   	pop    esi
100040ba:	c3                   	ret    
100040bb:	90                   	nop

100040bc <NIDesktop::addWindow(NIWindow*)>:
100040bc:	56                   	push   esi
100040bd:	53                   	push   ebx
100040be:	83 ec 0c             	sub    esp,0xc
100040c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100040c9:	56                   	push   esi
100040ca:	ff 33                	push   DWORD PTR [ebx]
100040cc:	e8 fc ff ff ff       	call   100040cd <NIDesktop::addWindow(NIWindow*)+0x11>	100040cd: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040d1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100040d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100040d9:	83 c4 14             	add    esp,0x14
100040dc:	5b                   	pop    ebx
100040dd:	5e                   	pop    esi
100040de:	e9 0f ff ff ff       	jmp    10003ff2 <NIDesktop::refreshWindowBounds(NIWindow*)>
100040e3:	90                   	nop

100040e4 <NIDesktop::raiseWindow(NIWindow*)>:
100040e4:	53                   	push   ebx
100040e5:	83 ec 10             	sub    esp,0x10
100040e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040f0:	50                   	push   eax
100040f1:	ff 33                	push   DWORD PTR [ebx]
100040f3:	e8 fc ff ff ff       	call   100040f4 <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040f4: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040f8:	58                   	pop    eax
100040f9:	5a                   	pop    edx
100040fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040fe:	ff 33                	push   DWORD PTR [ebx]
10004100:	e8 fc ff ff ff       	call   10004101 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	10004101: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004105:	59                   	pop    ecx
10004106:	58                   	pop    eax
10004107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000410b:	53                   	push   ebx
1000410c:	e8 fc ff ff ff       	call   1000410d <NIDesktop::raiseWindow(NIWindow*)+0x29>	1000410d: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004111:	83 c4 18             	add    esp,0x18
10004114:	5b                   	pop    ebx
10004115:	c3                   	ret    

10004116 <NIDesktop::deleteWindow(NIWindow*)>:
10004116:	53                   	push   ebx
10004117:	83 ec 10             	sub    esp,0x10
1000411a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000411e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004122:	50                   	push   eax
10004123:	ff 33                	push   DWORD PTR [ebx]
10004125:	e8 fc ff ff ff       	call   10004126 <NIDesktop::deleteWindow(NIWindow*)+0x10>	10004126: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000412a:	58                   	pop    eax
1000412b:	5a                   	pop    edx
1000412c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004130:	53                   	push   ebx
10004131:	e8 fc ff ff ff       	call   10004132 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	10004132: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004136:	83 c4 18             	add    esp,0x18
10004139:	5b                   	pop    ebx
1000413a:	c3                   	ret    
1000413b:	90                   	nop

1000413c <NIDesktop::handleMouse(int, int, int, int)>:
1000413c:	55                   	push   ebp
1000413d:	57                   	push   edi
1000413e:	56                   	push   esi
1000413f:	53                   	push   ebx
10004140:	83 ec 38             	sub    esp,0x38
10004143:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10004147:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000414d:	8d 4a 20             	lea    ecx,[edx+0x20]
10004150:	51                   	push   ecx
10004151:	52                   	push   edx
10004152:	8d 50 20             	lea    edx,[eax+0x20]
10004155:	52                   	push   edx
10004156:	50                   	push   eax
10004157:	53                   	push   ebx
10004158:	e8 fc ff ff ff       	call   10004159 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004159: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000415d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004164:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004167:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000416b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000416f:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
10004173:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
10004177:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
1000417a:	83 c4 20             	add    esp,0x20
1000417d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004180:	85 d2                	test   edx,edx
10004182:	79 07                	jns    1000418b <NIDesktop::handleMouse(int, int, int, int)+0x4f>
10004184:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
1000418b:	85 c0                	test   eax,eax
1000418d:	79 07                	jns    10004196 <NIDesktop::handleMouse(int, int, int, int)+0x5a>
1000418f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
10004196:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004199:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
1000419f:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
100041a2:	7f 04                	jg     100041a8 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
100041a4:	48                   	dec    eax
100041a5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100041a8:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100041ae:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100041b1:	7f 04                	jg     100041b7 <NIDesktop::handleMouse(int, int, int, int)+0x7b>
100041b3:	48                   	dec    eax
100041b4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100041b7:	50                   	push   eax
100041b8:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100041bb:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100041be:	53                   	push   ebx
100041bf:	e8 fc ff ff ff       	call   100041c0 <NIDesktop::handleMouse(int, int, int, int)+0x84>	100041c0: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100041c4:	83 c4 10             	add    esp,0x10
100041c7:	89 c6                	mov    esi,eax
100041c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041cd:	83 e0 01             	and    eax,0x1
100041d0:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100041d2: R_386_32	movingWin
100041d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100041db:	0f 84 f0 01 00 00    	je     100043d1 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041e1:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100041e3: R_386_32	movingType
100041e8:	0f 85 e3 01 00 00    	jne    100043d1 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041ee:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041f2:	85 c0                	test   eax,eax
100041f4:	75 0b                	jne    10004201 <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041f6:	a0 38 88 03 10       	mov    al,ds:0x10038838	100041f7: R_386_32	.bss
100041fb:	83 e0 01             	and    eax,0x1
100041fe:	88 04 24             	mov    BYTE PTR [esp],al
10004201:	bd 01 00 00 00       	mov    ebp,0x1
10004206:	a1 00 00 00 00       	mov    eax,ds:0x0	10004207: R_386_32	movingWin
1000420b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
1000420e:	8d 51 ff             	lea    edx,[ecx-0x1]
10004211:	39 ea                	cmp    edx,ebp
10004213:	0f 8e b1 00 00 00    	jle    100042ca <NIDesktop::handleMouse(int, int, int, int)+0x18e>
10004219:	bf 01 00 00 00       	mov    edi,0x1
1000421e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421f: R_386_32	movingWin
10004223:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
10004226:	48                   	dec    eax
10004227:	39 f8                	cmp    eax,edi
10004229:	0f 8e 95 00 00 00    	jle    100042c4 <NIDesktop::handleMouse(int, int, int, int)+0x188>
1000422f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
10004233:	89 ea                	mov    edx,ebp
10004235:	83 e0 1f             	and    eax,0x1f
10004238:	83 e2 03             	and    edx,0x3
1000423b:	09 d0                	or     eax,edx
1000423d:	75 7f                	jne    100042be <NIDesktop::handleMouse(int, int, int, int)+0x182>
1000423f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004243:	2b 05 34 88 03 10    	sub    eax,DWORD PTR ds:0x10038834	10004245: R_386_32	.bss
10004249:	01 f8                	add    eax,edi
1000424b:	78 2d                	js     1000427a <NIDesktop::handleMouse(int, int, int, int)+0x13e>
1000424d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004250:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004256:	7d 22                	jge    1000427a <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000425c:	8d 48 01             	lea    ecx,[eax+0x1]
1000425f:	83 ec 0c             	sub    esp,0xc
10004262:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	10004264: R_386_32	.bss
10004268:	51                   	push   ecx
10004269:	01 ea                	add    edx,ebp
1000426b:	50                   	push   eax
1000426c:	8d 42 01             	lea    eax,[edx+0x1]
1000426f:	50                   	push   eax
10004270:	52                   	push   edx
10004271:	53                   	push   ebx
10004272:	e8 fc ff ff ff       	call   10004273 <NIDesktop::handleMouse(int, int, int, int)+0x137>	10004273: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004277:	83 c4 20             	add    esp,0x20
1000427a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
1000427e:	75 3e                	jne    100042be <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004280:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004283:	01 f8                	add    eax,edi
10004285:	2b 05 34 88 03 10    	sub    eax,DWORD PTR ds:0x10038834	10004287: R_386_32	.bss
1000428b:	78 31                	js     100042be <NIDesktop::handleMouse(int, int, int, int)+0x182>
1000428d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004290:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004296:	7d 26                	jge    100042be <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004298:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
1000429e:	8b 11                	mov    edx,DWORD PTR [ecx]
100042a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100042a4:	6a 00                	push   0x0
100042a6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100042a9:	01 ea                	add    edx,ebp
100042ab:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	100042ad: R_386_32	.bss
100042b1:	52                   	push   edx
100042b2:	50                   	push   eax
100042b3:	51                   	push   ecx
100042b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100042b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
100042bb:	83 c4 10             	add    esp,0x10
100042be:	47                   	inc    edi
100042bf:	e9 5a ff ff ff       	jmp    1000421e <NIDesktop::handleMouse(int, int, int, int)+0xe2>
100042c4:	45                   	inc    ebp
100042c5:	e9 3c ff ff ff       	jmp    10004206 <NIDesktop::handleMouse(int, int, int, int)+0xca>
100042ca:	8b 15 34 88 03 10    	mov    edx,DWORD PTR ds:0x10038834	100042cc: R_386_32	.bss
100042d0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100042d3:	29 d7                	sub    edi,edx
100042d5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
100042d9:	0f 85 86 05 00 00    	jne    10004865 <NIDesktop::handleMouse(int, int, int, int)+0x729>
100042df:	89 3c 24             	mov    DWORD PTR [esp],edi
100042e2:	85 ff                	test   edi,edi
100042e4:	79 07                	jns    100042ed <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
100042e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100042ed:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042f3:	01 ef                	add    edi,ebp
100042f5:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100042fb:	39 c7                	cmp    edi,eax
100042fd:	7d 05                	jge    10004304 <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
100042ff:	2b 3c 24             	sub    edi,DWORD PTR [esp]
10004302:	eb 0b                	jmp    1000430f <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
10004304:	89 c7                	mov    edi,eax
10004306:	2b 3c 24             	sub    edi,DWORD PTR [esp]
10004309:	0f 88 c2 00 00 00    	js     100043d1 <NIDesktop::handleMouse(int, int, int, int)+0x295>
1000430f:	85 ff                	test   edi,edi
10004311:	0f 84 ba 00 00 00    	je     100043d1 <NIDesktop::handleMouse(int, int, int, int)+0x295>
10004317:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000431b:	29 d1                	sub    ecx,edx
1000431d:	89 ca                	mov    edx,ecx
1000431f:	79 02                	jns    10004323 <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
10004321:	31 d2                	xor    edx,edx
10004323:	01 cd                	add    ebp,ecx
10004325:	39 e8                	cmp    eax,ebp
10004327:	7e 04                	jle    1000432d <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004329:	29 d5                	sub    ebp,edx
1000432b:	eb 08                	jmp    10004335 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
1000432d:	29 d0                	sub    eax,edx
1000432f:	89 c5                	mov    ebp,eax
10004331:	79 02                	jns    10004335 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
10004333:	31 ed                	xor    ebp,ebp
10004335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004339:	01 d5                	add    ebp,edx
1000433b:	83 ec 0c             	sub    esp,0xc
1000433e:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	10004340: R_386_32	.bss
10004344:	55                   	push   ebp
10004345:	8d 48 01             	lea    ecx,[eax+0x1]
10004348:	52                   	push   edx
10004349:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000434d:	51                   	push   ecx
1000434e:	50                   	push   eax
1000434f:	53                   	push   ebx
10004350:	e8 fc ff ff ff       	call   10004351 <NIDesktop::handleMouse(int, int, int, int)+0x215>	10004351: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004355:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004359:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000435b: R_386_32	movingWin
1000435f:	83 c4 14             	add    esp,0x14
10004362:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	10004364: R_386_32	.bss
10004368:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
1000436b:	55                   	push   ebp
1000436c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10004370:	52                   	push   edx
10004371:	50                   	push   eax
10004372:	48                   	dec    eax
10004373:	50                   	push   eax
10004374:	53                   	push   ebx
10004375:	e8 fc ff ff ff       	call   10004376 <NIDesktop::handleMouse(int, int, int, int)+0x23a>	10004376: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000437a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000437d:	83 c4 18             	add    esp,0x18
10004380:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004386:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004388:	6a 00                	push   0x0
1000438a:	6a 01                	push   0x1
1000438c:	57                   	push   edi
1000438d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004390:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	10004392: R_386_32	.bss
10004396:	50                   	push   eax
10004397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000439b:	52                   	push   edx
1000439c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000439f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100043a2:	83 c4 18             	add    esp,0x18
100043a5:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100043ab:	8b 0a                	mov    ecx,DWORD PTR [edx]
100043ad:	6a 00                	push   0x0
100043af:	6a 01                	push   0x1
100043b1:	57                   	push   edi
100043b2:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100043b4: R_386_32	movingWin
100043b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100043bb:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	100043bd: R_386_32	.bss
100043c1:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
100043c4:	48                   	dec    eax
100043c5:	50                   	push   eax
100043c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043ca:	52                   	push   edx
100043cb:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043ce:	83 c4 20             	add    esp,0x20
100043d1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043d3: R_386_32	movingWin
100043d7:	85 d2                	test   edx,edx
100043d9:	0f 84 05 02 00 00    	je     100045e4 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043df:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100043e1: R_386_32	movingType
100043e5:	8d 41 fe             	lea    eax,[ecx-0x2]
100043e8:	83 f8 02             	cmp    eax,0x2
100043eb:	0f 87 f3 01 00 00    	ja     100045e4 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043f1:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100043fb:	75 0c                	jne    10004409 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
100043fd:	a0 38 88 03 10       	mov    al,ds:0x10038838	100043fe: R_386_32	.bss
10004402:	83 e0 01             	and    eax,0x1
10004405:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004409:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
1000440c:	8b 2d 34 88 03 10    	mov    ebp,DWORD PTR ds:0x10038834	1000440e: R_386_32	.bss
10004412:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004416:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
10004419:	01 c7                	add    edi,eax
1000441b:	29 ef                	sub    edi,ebp
1000441d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004421:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10004425:	01 d7                	add    edi,edx
10004427:	2b 3d 30 88 03 10    	sub    edi,DWORD PTR ds:0x10038830	10004429: R_386_32	.bss
1000442d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10004431:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10004434:	01 c7                	add    edi,eax
10004436:	29 ef                	sub    edi,ebp
10004438:	89 fd                	mov    ebp,edi
1000443a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
1000443d:	01 d7                	add    edi,edx
1000443f:	2b 3d 30 88 03 10    	sub    edi,DWORD PTR ds:0x10038830	10004441: R_386_32	.bss
10004445:	83 f9 03             	cmp    ecx,0x3
10004448:	89 3c 24             	mov    DWORD PTR [esp],edi
1000444b:	74 0e                	je     1000445b <NIDesktop::handleMouse(int, int, int, int)+0x31f>
1000444d:	83 f9 04             	cmp    ecx,0x4
10004450:	75 0f                	jne    10004461 <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004452:	89 14 24             	mov    DWORD PTR [esp],edx
10004455:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004459:	eb 06                	jmp    10004461 <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000445b:	89 c5                	mov    ebp,eax
1000445d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004465:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004469:	39 e8                	cmp    eax,ebp
1000446b:	7d 04                	jge    10004471 <NIDesktop::handleMouse(int, int, int, int)+0x335>
1000446d:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
10004471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004475:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004479:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000447c:	7d 07                	jge    10004485 <NIDesktop::handleMouse(int, int, int, int)+0x349>
1000447e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004485:	bf 01 00 00 00       	mov    edi,0x1
1000448a:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
1000448e:	0f 8d ab 00 00 00    	jge    1000453f <NIDesktop::handleMouse(int, int, int, int)+0x403>
10004494:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
1000449c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100044a0:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
100044a4:	0f 8d 8f 00 00 00    	jge    10004539 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
100044aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100044ae:	89 fa                	mov    edx,edi
100044b0:	01 f8                	add    eax,edi
100044b2:	83 e2 03             	and    edx,0x3
100044b5:	83 e0 1f             	and    eax,0x1f
100044b8:	09 d0                	or     eax,edx
100044ba:	75 74                	jne    10004530 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044bc:	83 ec 0c             	sub    esp,0xc
100044bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100044c0: R_386_32	movingWin
100044c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044c8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100044cb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100044ce:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
100044d2:	51                   	push   ecx
100044d3:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
100044d7:	52                   	push   edx
100044d8:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
100044dc:	01 f8                	add    eax,edi
100044de:	52                   	push   edx
100044df:	50                   	push   eax
100044e0:	53                   	push   ebx
100044e1:	e8 fc ff ff ff       	call   100044e2 <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	100044e2: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044e6:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
100044ea:	83 c4 20             	add    esp,0x20
100044ed:	83 f2 01             	xor    edx,0x1
100044f0:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044f3:	0f 9f c0             	setg   al
100044f6:	84 c2                	test   dl,al
100044f8:	74 36                	je     10004530 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044fa:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100044fe:	7d 30                	jge    10004530 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
10004500:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004503:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004509:	8b 08                	mov    ecx,DWORD PTR [eax]
1000450b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000450f:	6a 00                	push   0x0
10004511:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004513: R_386_32	movingWin
10004517:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
1000451a:	01 fa                	add    edx,edi
1000451c:	52                   	push   edx
1000451d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004521:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
10004524:	52                   	push   edx
10004525:	50                   	push   eax
10004526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000452a:	ff 50 24             	call   DWORD PTR [eax+0x24]
1000452d:	83 c4 10             	add    esp,0x10
10004530:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004534:	e9 63 ff ff ff       	jmp    1000449c <NIDesktop::handleMouse(int, int, int, int)+0x360>
10004539:	47                   	inc    edi
1000453a:	e9 4b ff ff ff       	jmp    1000448a <NIDesktop::handleMouse(int, int, int, int)+0x34e>
1000453f:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004541: R_386_32	movingWin
10004545:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
1000454a:	0f 85 d8 02 00 00    	jne    10004828 <NIDesktop::handleMouse(int, int, int, int)+0x6ec>
10004550:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
10004553:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
10004556:	83 ec 0c             	sub    esp,0xc
10004559:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000455d:	01 d1                	add    ecx,edx
1000455f:	51                   	push   ecx
10004560:	52                   	push   edx
10004561:	8d 50 01             	lea    edx,[eax+0x1]
10004564:	52                   	push   edx
10004565:	50                   	push   eax
10004566:	53                   	push   ebx
10004567:	e8 fc ff ff ff       	call   10004568 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004568: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000456c:	83 c4 18             	add    esp,0x18
1000456f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004572:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004574: R_386_32	movingWin
10004578:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000457e:	8b 08                	mov    ecx,DWORD PTR [eax]
10004580:	6a 00                	push   0x0
10004582:	6a 01                	push   0x1
10004584:	55                   	push   ebp
10004585:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004588:	ff 72 18             	push   DWORD PTR [edx+0x18]
1000458b:	50                   	push   eax
1000458c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000458f:	83 c4 14             	add    esp,0x14
10004592:	a1 00 00 00 00       	mov    eax,ds:0x0	10004593: R_386_32	movingWin
10004597:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
1000459a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
1000459d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100045a1:	01 c8                	add    eax,ecx
100045a3:	50                   	push   eax
100045a4:	51                   	push   ecx
100045a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100045a9:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
100045ad:	50                   	push   eax
100045ae:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100045b2:	52                   	push   edx
100045b3:	53                   	push   ebx
100045b4:	e8 fc ff ff ff       	call   100045b5 <NIDesktop::handleMouse(int, int, int, int)+0x479>	100045b5: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045b9:	83 c4 18             	add    esp,0x18
100045bc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100045bf:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045c1: R_386_32	movingWin
100045c5:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100045cb:	8b 08                	mov    ecx,DWORD PTR [eax]
100045cd:	6a 00                	push   0x0
100045cf:	6a 01                	push   0x1
100045d1:	55                   	push   ebp
100045d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045d6:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
100045d9:	57                   	push   edi
100045da:	ff 72 18             	push   DWORD PTR [edx+0x18]
100045dd:	50                   	push   eax
100045de:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100045e1:	83 c4 20             	add    esp,0x20
100045e4:	85 f6                	test   esi,esi
100045e6:	0f 84 08 02 00 00    	je     100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045ec:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045f1:	0f 84 fd 01 00 00    	je     100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045f7:	8b 0d 38 88 03 10    	mov    ecx,DWORD PTR ds:0x10038838	100045f9: R_386_32	.bss
100045fd:	83 e1 01             	and    ecx,0x1
10004600:	0f 85 ea 00 00 00    	jne    100046f0 <NIDesktop::handleMouse(int, int, int, int)+0x5b4>
10004606:	a1 00 00 00 00       	mov    eax,ds:0x0	10004607: R_386_32	milliTenthsSinceBoot
1000460b:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	1000460d: R_386_32	milliTenthsSinceBoot
10004611:	2b 05 28 88 03 10    	sub    eax,DWORD PTR ds:0x10038828	10004613: R_386_32	.bss
10004617:	bf b7 0b 00 00       	mov    edi,0xbb7
1000461c:	1b 15 2c 88 03 10    	sbb    edx,DWORD PTR ds:0x1003882c	1000461e: R_386_32	.bss
10004622:	39 c7                	cmp    edi,eax
10004624:	19 d1                	sbb    ecx,edx
10004626:	0f 82 95 00 00 00    	jb     100046c1 <NIDesktop::handleMouse(int, int, int, int)+0x585>
1000462c:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
1000462f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004632:	29 d0                	sub    eax,edx
10004634:	83 f8 18             	cmp    eax,0x18
10004637:	0f 8f 84 00 00 00    	jg     100046c1 <NIDesktop::handleMouse(int, int, int, int)+0x585>
1000463d:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
10004641:	75 7e                	jne    100046c1 <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004643:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004647:	74 26                	je     1000466f <NIDesktop::handleMouse(int, int, int, int)+0x533>
10004649:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
1000464c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
1000464f:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10004652:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
10004655:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004658:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
1000465b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
1000465e:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
10004661:	50                   	push   eax
10004662:	50                   	push   eax
10004663:	56                   	push   esi
10004664:	53                   	push   ebx
10004665:	e8 fc ff ff ff       	call   10004666 <NIDesktop::handleMouse(int, int, int, int)+0x52a>	10004666: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
1000466a:	83 c4 10             	add    esp,0x10
1000466d:	eb 3b                	jmp    100046aa <NIDesktop::handleMouse(int, int, int, int)+0x56e>
1000466f:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
10004672:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004679:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000467c:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
10004683:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
10004686:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004689:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
1000468c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
1000468f:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
10004692:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004695:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
1000469b:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
1000469e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100046a1:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
100046a7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
100046aa:	83 ec 0c             	sub    esp,0xc
100046ad:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
100046b1:	56                   	push   esi
100046b2:	e8 fc ff ff ff       	call   100046b3 <NIDesktop::handleMouse(int, int, int, int)+0x577>	100046b3: R_386_PC32	NIWindow::rerender()
100046b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046ba:	e8 fc ff ff ff       	call   100046bb <NIDesktop::handleMouse(int, int, int, int)+0x57f>	100046bb: R_386_PC32	NIDesktop::completeRefresh()
100046bf:	eb 11                	jmp    100046d2 <NIDesktop::handleMouse(int, int, int, int)+0x596>
100046c1:	8b 03                	mov    eax,DWORD PTR [ebx]
100046c3:	8b 00                	mov    eax,DWORD PTR [eax]
100046c5:	39 30                	cmp    DWORD PTR [eax],esi
100046c7:	74 0c                	je     100046d5 <NIDesktop::handleMouse(int, int, int, int)+0x599>
100046c9:	50                   	push   eax
100046ca:	50                   	push   eax
100046cb:	56                   	push   esi
100046cc:	53                   	push   ebx
100046cd:	e8 fc ff ff ff       	call   100046ce <NIDesktop::handleMouse(int, int, int, int)+0x592>	100046ce: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100046d2:	83 c4 10             	add    esp,0x10
100046d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100046d6: R_386_32	milliTenthsSinceBoot
100046da:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100046dc: R_386_32	milliTenthsSinceBoot
100046e0:	a3 28 88 03 10       	mov    ds:0x10038828,eax	100046e1: R_386_32	.bss
100046e5:	89 15 2c 88 03 10    	mov    DWORD PTR ds:0x1003882c,edx	100046e7: R_386_32	.bss
100046eb:	e9 04 01 00 00       	jmp    100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046f0:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046f2: R_386_32	movingWin
100046f7:	0f 85 f7 00 00 00    	jne    100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046fd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004700:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
10004703:	89 d1                	mov    ecx,edx
10004705:	83 e8 0e             	sub    eax,0xe
10004708:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
1000470b:	39 c8                	cmp    eax,ecx
1000470d:	7f 37                	jg     10004746 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
1000470f:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004713:	75 31                	jne    10004746 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
10004715:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004718:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
1000471f:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10004721: R_386_32	movingWin
10004725:	55                   	push   ebp
10004726:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004728: R_386_32	movingType
10004730:	55                   	push   ebp
10004731:	a3 34 88 03 10       	mov    ds:0x10038834,eax	10004732: R_386_32	.bss
10004736:	56                   	push   esi
10004737:	89 15 30 88 03 10    	mov    DWORD PTR ds:0x10038830,edx	10004739: R_386_32	.bss
1000473d:	53                   	push   ebx
1000473e:	e8 fc ff ff ff       	call   1000473f <NIDesktop::handleMouse(int, int, int, int)+0x603>	1000473f: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004743:	83 c4 10             	add    esp,0x10
10004746:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004749:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
1000474c:	89 d1                	mov    ecx,edx
1000474e:	83 e8 0e             	sub    eax,0xe
10004751:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
10004754:	39 c8                	cmp    eax,ecx
10004756:	7f 55                	jg     100047ad <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004758:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000475c:	75 4f                	jne    100047ad <NIDesktop::handleMouse(int, int, int, int)+0x671>
1000475e:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004760: R_386_32	movingWin
10004765:	75 33                	jne    1000479a <NIDesktop::handleMouse(int, int, int, int)+0x65e>
10004767:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000476a:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004771:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10004773: R_386_32	movingWin
10004777:	57                   	push   edi
10004778:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	1000477a: R_386_32	movingType
10004782:	57                   	push   edi
10004783:	89 15 34 88 03 10    	mov    DWORD PTR ds:0x10038834,edx	10004785: R_386_32	.bss
10004789:	56                   	push   esi
1000478a:	a3 30 88 03 10       	mov    ds:0x10038830,eax	1000478b: R_386_32	.bss
1000478f:	53                   	push   ebx
10004790:	e8 fc ff ff ff       	call   10004791 <NIDesktop::handleMouse(int, int, int, int)+0x655>	10004791: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004795:	83 c4 10             	add    esp,0x10
10004798:	eb 13                	jmp    100047ad <NIDesktop::handleMouse(int, int, int, int)+0x671>
1000479a:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	1000479c: R_386_32	movingType
100047a4:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
100047ab:	eb 47                	jmp    100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047ad:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100047af: R_386_32	movingWin
100047b4:	75 3e                	jne    100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047b6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100047b9:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
100047bc:	83 f8 18             	cmp    eax,0x18
100047bf:	7f 33                	jg     100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047c1:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100047c5:	75 2d                	jne    100047f4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047c7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100047ca:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
100047cd:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100047cf: R_386_32	movingWin
100047d3:	51                   	push   ecx
100047d4:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100047d6: R_386_32	movingType
100047de:	51                   	push   ecx
100047df:	89 15 34 88 03 10    	mov    DWORD PTR ds:0x10038834,edx	100047e1: R_386_32	.bss
100047e5:	56                   	push   esi
100047e6:	a3 30 88 03 10       	mov    ds:0x10038830,eax	100047e7: R_386_32	.bss
100047eb:	53                   	push   ebx
100047ec:	e8 fc ff ff ff       	call   100047ed <NIDesktop::handleMouse(int, int, int, int)+0x6b1>	100047ed: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047f1:	83 c4 10             	add    esp,0x10
100047f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047f7:	83 ec 0c             	sub    esp,0xc
100047fa:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004800:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004802:	6a 00                	push   0x0
10004804:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004807:	05 00 00 00 00       	add    eax,0x0	10004808: R_386_32	___mouse_data
1000480c:	50                   	push   eax
1000480d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004810:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004813:	52                   	push   edx
10004814:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004817:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
1000481b:	a3 38 88 03 10       	mov    ds:0x10038838,eax	1000481c: R_386_32	.bss
10004820:	83 c4 4c             	add    esp,0x4c
10004823:	5b                   	pop    ebx
10004824:	5e                   	pop    esi
10004825:	5f                   	pop    edi
10004826:	5d                   	pop    ebp
10004827:	c3                   	ret    
10004828:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000482b:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
1000482e:	83 ec 0c             	sub    esp,0xc
10004831:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
10004834:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004836: R_386_32	movingWin
1000483e:	57                   	push   edi
1000483f:	e8 fc ff ff ff       	call   10004840 <NIDesktop::handleMouse(int, int, int, int)+0x704>	10004840: R_386_PC32	NIWindow::rerender()
10004844:	59                   	pop    ecx
10004845:	5d                   	pop    ebp
10004846:	57                   	push   edi
10004847:	53                   	push   ebx
10004848:	e8 fc ff ff ff       	call   10004849 <NIDesktop::handleMouse(int, int, int, int)+0x70d>	10004849: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000484d:	58                   	pop    eax
1000484e:	5a                   	pop    edx
1000484f:	57                   	push   edi
10004850:	53                   	push   ebx
10004851:	e8 fc ff ff ff       	call   10004852 <NIDesktop::handleMouse(int, int, int, int)+0x716>	10004852: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004856:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
1000485d:	83 c4 10             	add    esp,0x10
10004860:	e9 7f fd ff ff       	jmp    100045e4 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
10004865:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004868:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000486a: R_386_32	movingWin
10004872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004875:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	10004877: R_386_32	.bss
1000487b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
1000487e:	52                   	push   edx
1000487f:	52                   	push   edx
10004880:	50                   	push   eax
10004881:	53                   	push   ebx
10004882:	e8 fc ff ff ff       	call   10004883 <NIDesktop::handleMouse(int, int, int, int)+0x747>	10004883: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004887:	83 c4 10             	add    esp,0x10
1000488a:	e9 42 fb ff ff       	jmp    100043d1 <NIDesktop::handleMouse(int, int, int, int)+0x295>

1000488f <NiHandleMouse(int, int, int, int)>:
1000488f:	83 ec 18             	sub    esp,0x18
10004892:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004896:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100048a2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100048a4: R_386_32	mouseDesktop
100048a8:	e8 fc ff ff ff       	call   100048a9 <NiHandleMouse(int, int, int, int)+0x1a>	100048a9: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100048ad:	83 c4 2c             	add    esp,0x2c
100048b0:	c3                   	ret    

100048b1 <drawVGAChar(int, int, int)>:
100048b1:	55                   	push   ebp
100048b2:	57                   	push   edi
100048b3:	56                   	push   esi
100048b4:	53                   	push   ebx
100048b5:	31 db                	xor    ebx,ebx
100048b7:	83 ec 1c             	sub    esp,0x1c
100048ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100048be:	c1 e0 04             	shl    eax,0x4
100048c1:	89 04 24             	mov    DWORD PTR [esp],eax
100048c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100048c8:	c1 e0 04             	shl    eax,0x4
100048cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100048cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100048d3:	c1 e0 03             	shl    eax,0x3
100048d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100048da:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100048e1:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100048e4: R_386_32	cp
100048e8:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100048eb:	31 f6                	xor    esi,esi
100048ed:	84 c0                	test   al,al
100048ef:	79 22                	jns    10004913 <drawVGAChar(int, int, int)+0x62>
100048f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048f5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048f7: R_386_32	screen
100048fb:	8b 0a                	mov    ecx,DWORD PTR [edx]
100048fd:	6a 00                	push   0x0
100048ff:	57                   	push   edi
10004900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004904:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004907:	55                   	push   ebp
10004908:	52                   	push   edx
10004909:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000490c:	83 c4 10             	add    esp,0x10
1000490f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10004913:	d1 e0                	shl    eax,1
10004915:	46                   	inc    esi
10004916:	83 fe 08             	cmp    esi,0x8
10004919:	75 d2                	jne    100048ed <drawVGAChar(int, int, int)+0x3c>
1000491b:	43                   	inc    ebx
1000491c:	83 fb 10             	cmp    ebx,0x10
1000491f:	75 b9                	jne    100048da <drawVGAChar(int, int, int)+0x29>
10004921:	83 c4 1c             	add    esp,0x1c
10004924:	5b                   	pop    ebx
10004925:	5e                   	pop    esi
10004926:	5f                   	pop    edi
10004927:	5d                   	pop    ebp
10004928:	c3                   	ret    

10004929 <NiDisplayRAM(void*)>:
10004929:	83 ec 0c             	sub    esp,0xc
1000492c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000492d: R_386_32	irqDisableCounter
10004931:	48                   	dec    eax
10004932:	a3 00 00 00 00       	mov    ds:0x0,eax	10004933: R_386_32	irqDisableCounter
10004937:	75 01                	jne    1000493a <NiDisplayRAM(void*)+0x11>
10004939:	fb                   	sti    
1000493a:	50                   	push   eax
1000493b:	6a 3f                	push   0x3f
1000493d:	6a 00                	push   0x0
1000493f:	6a 00                	push   0x0
10004941:	e8 fc ff ff ff       	call   10004942 <NiDisplayRAM(void*)+0x19>	10004942: R_386_PC32	drawVGAChar(int, int, int)
10004946:	83 c4 0c             	add    esp,0xc
10004949:	6a 3f                	push   0x3f
1000494b:	6a 00                	push   0x0
1000494d:	6a 01                	push   0x1
1000494f:	e8 fc ff ff ff       	call   10004950 <NiDisplayRAM(void*)+0x27>	10004950: R_386_PC32	drawVGAChar(int, int, int)
10004954:	83 c4 0c             	add    esp,0xc
10004957:	6a 25                	push   0x25
10004959:	6a 00                	push   0x0
1000495b:	6a 02                	push   0x2
1000495d:	e8 fc ff ff ff       	call   1000495e <NiDisplayRAM(void*)+0x35>	1000495e: R_386_PC32	drawVGAChar(int, int, int)
10004962:	83 c4 0c             	add    esp,0xc
10004965:	6a 20                	push   0x20
10004967:	6a 00                	push   0x0
10004969:	6a 03                	push   0x3
1000496b:	e8 fc ff ff ff       	call   1000496c <NiDisplayRAM(void*)+0x43>	1000496c: R_386_PC32	drawVGAChar(int, int, int)
10004970:	83 c4 0c             	add    esp,0xc
10004973:	6a 52                	push   0x52
10004975:	6a 00                	push   0x0
10004977:	6a 04                	push   0x4
10004979:	e8 fc ff ff ff       	call   1000497a <NiDisplayRAM(void*)+0x51>	1000497a: R_386_PC32	drawVGAChar(int, int, int)
1000497e:	83 c4 0c             	add    esp,0xc
10004981:	6a 41                	push   0x41
10004983:	6a 00                	push   0x0
10004985:	6a 05                	push   0x5
10004987:	e8 fc ff ff ff       	call   10004988 <NiDisplayRAM(void*)+0x5f>	10004988: R_386_PC32	drawVGAChar(int, int, int)
1000498c:	83 c4 0c             	add    esp,0xc
1000498f:	6a 4d                	push   0x4d
10004991:	6a 00                	push   0x0
10004993:	6a 06                	push   0x6
10004995:	e8 fc ff ff ff       	call   10004996 <NiDisplayRAM(void*)+0x6d>	10004996: R_386_PC32	drawVGAChar(int, int, int)
1000499a:	83 c4 0c             	add    esp,0xc
1000499d:	6a 20                	push   0x20
1000499f:	6a 00                	push   0x0
100049a1:	6a 07                	push   0x7
100049a3:	e8 fc ff ff ff       	call   100049a4 <NiDisplayRAM(void*)+0x7b>	100049a4: R_386_PC32	drawVGAChar(int, int, int)
100049a8:	83 c4 0c             	add    esp,0xc
100049ab:	6a 75                	push   0x75
100049ad:	6a 00                	push   0x0
100049af:	6a 08                	push   0x8
100049b1:	e8 fc ff ff ff       	call   100049b2 <NiDisplayRAM(void*)+0x89>	100049b2: R_386_PC32	drawVGAChar(int, int, int)
100049b6:	83 c4 0c             	add    esp,0xc
100049b9:	6a 73                	push   0x73
100049bb:	6a 00                	push   0x0
100049bd:	6a 09                	push   0x9
100049bf:	e8 fc ff ff ff       	call   100049c0 <NiDisplayRAM(void*)+0x97>	100049c0: R_386_PC32	drawVGAChar(int, int, int)
100049c4:	83 c4 0c             	add    esp,0xc
100049c7:	6a 65                	push   0x65
100049c9:	6a 00                	push   0x0
100049cb:	6a 0a                	push   0xa
100049cd:	e8 fc ff ff ff       	call   100049ce <NiDisplayRAM(void*)+0xa5>	100049ce: R_386_PC32	drawVGAChar(int, int, int)
100049d2:	83 c4 0c             	add    esp,0xc
100049d5:	6a 64                	push   0x64
100049d7:	6a 00                	push   0x0
100049d9:	6a 0b                	push   0xb
100049db:	e8 fc ff ff ff       	call   100049dc <NiDisplayRAM(void*)+0xb3>	100049dc: R_386_PC32	drawVGAChar(int, int, int)
100049e0:	83 c4 10             	add    esp,0x10
100049e3:	e9 52 ff ff ff       	jmp    1000493a <NiDisplayRAM(void*)+0x11>

100049e8 <monikaBsod(char*)>:
100049e8:	55                   	push   ebp
100049e9:	57                   	push   edi
100049ea:	31 ff                	xor    edi,edi
100049ec:	56                   	push   esi
100049ed:	53                   	push   ebx
100049ee:	31 db                	xor    ebx,ebx
100049f0:	83 ec 24             	sub    esp,0x24
100049f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100049f4: R_386_32	screen
100049f8:	8b 10                	mov    edx,DWORD PTR [eax]
100049fa:	68 ff ff ff 00       	push   0xffffff
100049ff:	50                   	push   eax
10004a00:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004a03:	83 c4 10             	add    esp,0x10
10004a06:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004a08: R_386_32	justMonika
10004a0c:	8d 43 01             	lea    eax,[ebx+0x1]
10004a0f:	84 c9                	test   cl,cl
10004a11:	79 0e                	jns    10004a21 <monikaBsod(char*)+0x39>
10004a13:	8d 51 80             	lea    edx,[ecx-0x80]
10004a16:	83 c3 02             	add    ebx,0x2
10004a19:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004a1b: R_386_32	justMonika
10004a1f:	eb 04                	jmp    10004a25 <monikaBsod(char*)+0x3d>
10004a21:	89 c3                	mov    ebx,eax
10004a23:	b2 01                	mov    dl,0x1
10004a25:	0f b6 c1             	movzx  eax,cl
10004a28:	83 e1 03             	and    ecx,0x3
10004a2b:	89 c6                	mov    esi,eax
10004a2d:	6b c9 55             	imul   ecx,ecx,0x55
10004a30:	c1 fe 05             	sar    esi,0x5
10004a33:	c1 f8 02             	sar    eax,0x2
10004a36:	83 e6 03             	and    esi,0x3
10004a39:	83 e0 07             	and    eax,0x7
10004a3c:	6b f6 55             	imul   esi,esi,0x55
10004a3f:	6b c0 24             	imul   eax,eax,0x24
10004a42:	c1 e6 10             	shl    esi,0x10
10004a45:	c1 e0 08             	shl    eax,0x8
10004a48:	09 f0                	or     eax,esi
10004a4a:	31 f6                	xor    esi,esi
10004a4c:	09 c8                	or     eax,ecx
10004a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a52:	0f b6 c2             	movzx  eax,dl
10004a55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004a59:	8d 04 37             	lea    eax,[edi+esi*1]
10004a5c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004a60:	7f 10                	jg     10004a72 <monikaBsod(char*)+0x8a>
10004a62:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004a66:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004a6c:	7e 98                	jle    10004a06 <monikaBsod(char*)+0x1e>
10004a6e:	31 db                	xor    ebx,ebx
10004a70:	eb 25                	jmp    10004a97 <monikaBsod(char*)+0xaf>
10004a72:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a74: R_386_32	screen
10004a78:	b9 80 02 00 00       	mov    ecx,0x280
10004a7d:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004a7f:	46                   	inc    esi
10004a80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004a84:	99                   	cdq    
10004a85:	f7 f9                	idiv   ecx
10004a87:	50                   	push   eax
10004a88:	52                   	push   edx
10004a89:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a8b: R_386_32	screen
10004a8f:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004a92:	83 c4 10             	add    esp,0x10
10004a95:	eb c2                	jmp    10004a59 <monikaBsod(char*)+0x71>
10004a97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004a9b:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004a9f:	84 c0                	test   al,al
10004aa1:	74 1d                	je     10004ac0 <monikaBsod(char*)+0xd8>
10004aa3:	b9 19 00 00 00       	mov    ecx,0x19
10004aa8:	52                   	push   edx
10004aa9:	50                   	push   eax
10004aaa:	89 d8                	mov    eax,ebx
10004aac:	43                   	inc    ebx
10004aad:	99                   	cdq    
10004aae:	f7 f9                	idiv   ecx
10004ab0:	83 c0 0a             	add    eax,0xa
10004ab3:	42                   	inc    edx
10004ab4:	50                   	push   eax
10004ab5:	52                   	push   edx
10004ab6:	e8 fc ff ff ff       	call   10004ab7 <monikaBsod(char*)+0xcf>	10004ab7: R_386_PC32	drawVGAChar(int, int, int)
10004abb:	83 c4 10             	add    esp,0x10
10004abe:	eb d7                	jmp    10004a97 <monikaBsod(char*)+0xaf>
10004ac0:	f4                   	hlt    
10004ac1:	eb fd                	jmp    10004ac0 <monikaBsod(char*)+0xd8>

10004ac3 <NiInstallSysHooks()>:
10004ac3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004ac5: R_386_32	guiPanicHandler
	10004ac9: R_386_32	monikaBsod(char*)
10004acd:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004acf: R_386_32	systemCallHandlers
	10004ad3: R_386_32	NiSystemCallHandler(regs*)
10004ad7:	c3                   	ret    

10004ad8 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004ad8:	56                   	push   esi
10004ad9:	53                   	push   ebx
10004ada:	83 ec 10             	sub    esp,0x10
10004add:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004ae1:	68 07 55 00 10       	push   0x10005507	10004ae2: R_386_32	.text
10004ae6:	e8 fc ff ff ff       	call   10004ae7 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004ae7: R_386_PC32	Dbg::kprintf(char const*, ...)
10004aeb:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004af2:	e8 fc ff ff ff       	call   10004af3 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004af3: R_386_PC32	malloc
10004af7:	89 c6                	mov    esi,eax
10004af9:	58                   	pop    eax
10004afa:	5a                   	pop    edx
10004afb:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004b01:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004b07:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004b0d:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004b13:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b15: R_386_32	ctxt
10004b19:	56                   	push   esi
10004b1a:	e8 fc ff ff ff       	call   10004b1b <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004b1b: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004b1f:	83 c4 18             	add    esp,0x18
10004b22:	56                   	push   esi
10004b23:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b25: R_386_32	desktop
10004b29:	e8 fc ff ff ff       	call   10004b2a <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004b2a: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b2e:	59                   	pop    ecx
10004b2f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b31: R_386_32	desktop
10004b35:	e8 fc ff ff ff       	call   10004b36 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004b36: R_386_PC32	NIDesktop::completeRefresh()
10004b3a:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004b40:	89 34 24             	mov    DWORD PTR [esp],esi
10004b43:	e8 fc ff ff ff       	call   10004b44 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004b44: R_386_PC32	NIWindow::drawBasicWindow()
10004b48:	83 c4 14             	add    esp,0x14
10004b4b:	31 c0                	xor    eax,eax
10004b4d:	31 d2                	xor    edx,edx
10004b4f:	5b                   	pop    ebx
10004b50:	5e                   	pop    esi
10004b51:	c3                   	ret    

10004b52 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b52:	55                   	push   ebp
10004b53:	57                   	push   edi
10004b54:	56                   	push   esi
10004b55:	31 f6                	xor    esi,esi
10004b57:	53                   	push   ebx
10004b58:	83 ec 28             	sub    esp,0x28
10004b5b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004b5f:	68 22 55 00 10       	push   0x10005522	10004b60: R_386_32	.text
10004b64:	e8 fc ff ff ff       	call   10004b65 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004b65: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b69:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004b6f:	83 c4 10             	add    esp,0x10
10004b72:	31 c0                	xor    eax,eax
10004b74:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004b77:	7e 30                	jle    10004ba9 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004b79:	31 ff                	xor    edi,edi
10004b7b:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004b7e:	7e 26                	jle    10004ba6 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004b80:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004b86:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004b89:	83 fa ff             	cmp    edx,0xffffffff
10004b8c:	74 14                	je     10004ba2 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004b8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b92:	52                   	push   edx
10004b93:	56                   	push   esi
10004b94:	57                   	push   edi
10004b95:	53                   	push   ebx
10004b96:	e8 fc ff ff ff       	call   10004b97 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004b97: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004b9b:	83 c4 10             	add    esp,0x10
10004b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004ba2:	40                   	inc    eax
10004ba3:	47                   	inc    edi
10004ba4:	eb d5                	jmp    10004b7b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004ba6:	46                   	inc    esi
10004ba7:	eb cb                	jmp    10004b74 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004ba9:	50                   	push   eax
10004baa:	50                   	push   eax
10004bab:	53                   	push   ebx
10004bac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004bae: R_386_32	desktop
10004bb2:	e8 fc ff ff ff       	call   10004bb3 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004bb3: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004bb7:	83 c4 2c             	add    esp,0x2c
10004bba:	31 c0                	xor    eax,eax
10004bbc:	5b                   	pop    ebx
10004bbd:	31 d2                	xor    edx,edx
10004bbf:	5e                   	pop    esi
10004bc0:	5f                   	pop    edi
10004bc1:	5d                   	pop    ebp
10004bc2:	c3                   	ret    

10004bc3 <NiSystemCallHandler(regs*)>:
10004bc3:	53                   	push   ebx
10004bc4:	83 ec 08             	sub    esp,0x8
10004bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004bcb:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10004bce:	83 fb 04             	cmp    ebx,0x4
10004bd1:	74 1d                	je     10004bf0 <NiSystemCallHandler(regs*)+0x2d>
10004bd3:	83 fb 05             	cmp    ebx,0x5
10004bd6:	74 2a                	je     10004c02 <NiSystemCallHandler(regs*)+0x3f>
10004bd8:	83 c8 ff             	or     eax,0xffffffff
10004bdb:	85 db                	test   ebx,ebx
10004bdd:	89 c2                	mov    edx,eax
10004bdf:	75 44                	jne    10004c25 <NiSystemCallHandler(regs*)+0x62>
10004be1:	50                   	push   eax
10004be2:	50                   	push   eax
10004be3:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004be6:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004be9:	e8 fc ff ff ff       	call   10004bea <NiSystemCallHandler(regs*)+0x27>	10004bea: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004bee:	eb 0d                	jmp    10004bfd <NiSystemCallHandler(regs*)+0x3a>
10004bf0:	50                   	push   eax
10004bf1:	50                   	push   eax
10004bf2:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004bf5:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004bf8:	e8 fc ff ff ff       	call   10004bf9 <NiSystemCallHandler(regs*)+0x36>	10004bf9: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004bfd:	83 c4 10             	add    esp,0x10
10004c00:	eb 23                	jmp    10004c25 <NiSystemCallHandler(regs*)+0x62>
10004c02:	83 ec 0c             	sub    esp,0xc
10004c05:	8b 59 24             	mov    ebx,DWORD PTR [ecx+0x24]
10004c08:	68 44 55 00 10       	push   0x10005544	10004c09: R_386_32	.text
10004c0d:	e8 fc ff ff ff       	call   10004c0e <NiSystemCallHandler(regs*)+0x4b>	10004c0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c12:	58                   	pop    eax
10004c13:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004c19:	e8 fc ff ff ff       	call   10004c1a <NiSystemCallHandler(regs*)+0x57>	10004c1a: R_386_PC32	NIWindow::drawBasicWindow()
10004c1e:	83 c4 10             	add    esp,0x10
10004c21:	31 c0                	xor    eax,eax
10004c23:	31 d2                	xor    edx,edx
10004c25:	83 c4 08             	add    esp,0x8
10004c28:	5b                   	pop    ebx
10004c29:	c3                   	ret    

10004c2a <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004c2a:	83 ec 18             	sub    esp,0x18
10004c2d:	68 44 55 00 10       	push   0x10005544	10004c2e: R_386_32	.text
10004c32:	e8 fc ff ff ff       	call   10004c33 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004c33: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c37:	58                   	pop    eax
10004c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c3c:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004c42:	e8 fc ff ff ff       	call   10004c43 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004c43: R_386_PC32	NIWindow::drawBasicWindow()
10004c47:	31 c0                	xor    eax,eax
10004c49:	31 d2                	xor    edx,edx
10004c4b:	83 c4 1c             	add    esp,0x1c
10004c4e:	c3                   	ret    
10004c4f:	90                   	nop

10004c50 <NIWindow::invalidate()>:
10004c50:	53                   	push   ebx
10004c51:	83 ec 08             	sub    esp,0x8
10004c54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004c58:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004c5c:	74 1d                	je     10004c7b <NIWindow::invalidate()+0x2b>
10004c5e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004c62:	74 17                	je     10004c7b <NIWindow::invalidate()+0x2b>
10004c64:	83 ec 0c             	sub    esp,0xc
10004c67:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004c6a:	e8 fc ff ff ff       	call   10004c6b <NIWindow::invalidate()+0x1b>	10004c6b: R_386_PC32	free
10004c6f:	59                   	pop    ecx
10004c70:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004c73:	e8 fc ff ff ff       	call   10004c74 <NIWindow::invalidate()+0x24>	10004c74: R_386_PC32	free
10004c78:	83 c4 10             	add    esp,0x10
10004c7b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004c82:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004c89:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004c8d:	83 c4 08             	add    esp,0x8
10004c90:	5b                   	pop    ebx
10004c91:	c3                   	ret    

10004c92 <NIWindow::putpixel(int, int, unsigned int)>:
10004c92:	56                   	push   esi
10004c93:	53                   	push   ebx
10004c94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004c98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004c9c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004c9f:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004ca3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004ca7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004cab:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004cae:	83 fe 04             	cmp    esi,0x4
10004cb1:	75 05                	jne    10004cb8 <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004cb3:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004cb6:	eb 0e                	jmp    10004cc6 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004cb8:	83 fe 02             	cmp    esi,0x2
10004cbb:	75 06                	jne    10004cc3 <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004cbd:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004cc1:	eb 03                	jmp    10004cc6 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004cc3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004cc6:	5b                   	pop    ebx
10004cc7:	5e                   	pop    esi
10004cc8:	c3                   	ret    
10004cc9:	90                   	nop

10004cca <NIWindow::drawBasicWindow()>:
10004cca:	55                   	push   ebp
10004ccb:	57                   	push   edi
10004ccc:	56                   	push   esi
10004ccd:	31 f6                	xor    esi,esi
10004ccf:	53                   	push   ebx
10004cd0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004cd4:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004cd7:	7e 2e                	jle    10004d07 <NIWindow::drawBasicWindow()+0x3d>
10004cd9:	31 db                	xor    ebx,ebx
10004cdb:	83 fe 19             	cmp    esi,0x19
10004cde:	0f 9e c3             	setle  bl
10004ce1:	31 ff                	xor    edi,edi
10004ce3:	4b                   	dec    ebx
10004ce4:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004cea:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004cf0:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004cf3:	7e 0f                	jle    10004d04 <NIWindow::drawBasicWindow()+0x3a>
10004cf5:	53                   	push   ebx
10004cf6:	56                   	push   esi
10004cf7:	57                   	push   edi
10004cf8:	47                   	inc    edi
10004cf9:	55                   	push   ebp
10004cfa:	e8 fc ff ff ff       	call   10004cfb <NIWindow::drawBasicWindow()+0x31>	10004cfb: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004cff:	83 c4 10             	add    esp,0x10
10004d02:	eb ec                	jmp    10004cf0 <NIWindow::drawBasicWindow()+0x26>
10004d04:	46                   	inc    esi
10004d05:	eb cd                	jmp    10004cd4 <NIWindow::drawBasicWindow()+0xa>
10004d07:	5b                   	pop    ebx
10004d08:	5e                   	pop    esi
10004d09:	5f                   	pop    edi
10004d0a:	5d                   	pop    ebp
10004d0b:	c3                   	ret    

10004d0c <NIWindow::rerender()>:
10004d0c:	57                   	push   edi
10004d0d:	56                   	push   esi
10004d0e:	53                   	push   ebx
10004d0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004d13:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004d17:	74 0c                	je     10004d25 <NIWindow::rerender()+0x19>
10004d19:	83 ec 0c             	sub    esp,0xc
10004d1c:	53                   	push   ebx
10004d1d:	e8 fc ff ff ff       	call   10004d1e <NIWindow::rerender()+0x12>	10004d1e: R_386_PC32	NIWindow::invalidate()
10004d22:	83 c4 10             	add    esp,0x10
10004d25:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004d28:	83 ec 0c             	sub    esp,0xc
10004d2b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004d2e:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004d35:	50                   	push   eax
10004d36:	e8 fc ff ff ff       	call   10004d37 <NIWindow::rerender()+0x2b>	10004d37: R_386_PC32	malloc
10004d3b:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004d3f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004d42:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004d46:	89 34 24             	mov    DWORD PTR [esp],esi
10004d49:	e8 fc ff ff ff       	call   10004d4a <NIWindow::rerender()+0x3e>	10004d4a: R_386_PC32	malloc
10004d4e:	83 c4 10             	add    esp,0x10
10004d51:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004d54:	31 c0                	xor    eax,eax
10004d56:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004d59:	7e 6a                	jle    10004dc5 <NIWindow::rerender()+0xb9>
10004d5b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004d62:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d65:	01 d6                	add    esi,edx
10004d67:	83 f8 06             	cmp    eax,0x6
10004d6a:	7f 1b                	jg     10004d87 <NIWindow::rerender()+0x7b>
10004d6c:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004d6f: R_386_32	curveLookup7
10004d73:	66 89 0e             	mov    WORD PTR [esi],cx
10004d76:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004d79:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004d7c: R_386_32	curveLookup7
10004d80:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004d85:	eb 3b                	jmp    10004dc2 <NIWindow::rerender()+0xb6>
10004d87:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d8a:	8d 79 fa             	lea    edi,[ecx-0x6]
10004d8d:	39 c7                	cmp    edi,eax
10004d8f:	7f 22                	jg     10004db3 <NIWindow::rerender()+0xa7>
10004d91:	29 c1                	sub    ecx,eax
10004d93:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d96: R_386_32	curveLookup7
10004d9a:	66 89 0e             	mov    WORD PTR [esi],cx
10004d9d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004da0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004da3:	29 c1                	sub    ecx,eax
10004da5:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004da8: R_386_32	curveLookup7
10004dac:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004db1:	eb 0f                	jmp    10004dc2 <NIWindow::rerender()+0xb6>
10004db3:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004db8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004dbb:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004dc2:	40                   	inc    eax
10004dc3:	eb 91                	jmp    10004d56 <NIWindow::rerender()+0x4a>
10004dc5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004dc9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004dcd:	5b                   	pop    ebx
10004dce:	5e                   	pop    esi
10004dcf:	5f                   	pop    edi
10004dd0:	e9 f5 fe ff ff       	jmp    10004cca <NIWindow::drawBasicWindow()>
10004dd5:	90                   	nop

10004dd6 <NIWindow::changeContext(NIContext*, int, int)>:
10004dd6:	55                   	push   ebp
10004dd7:	57                   	push   edi
10004dd8:	56                   	push   esi
10004dd9:	53                   	push   ebx
10004dda:	83 ec 18             	sub    esp,0x18
10004ddd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004de1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004de5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004de9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004ded:	53                   	push   ebx
10004dee:	e8 fc ff ff ff       	call   10004def <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004def: R_386_PC32	NIWindow::invalidate()
10004df3:	89 33                	mov    DWORD PTR [ebx],esi
10004df5:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004df8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004dfb:	83 c4 10             	add    esp,0x10
10004dfe:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004e04:	83 f8 08             	cmp    eax,0x8
10004e07:	7f 09                	jg     10004e12 <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004e09:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004e10:	eb 15                	jmp    10004e27 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e12:	83 f8 10             	cmp    eax,0x10
10004e15:	7f 09                	jg     10004e20 <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004e17:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004e1e:	eb 07                	jmp    10004e27 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e20:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004e27:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004e2b:	83 c4 0c             	add    esp,0xc
10004e2e:	5b                   	pop    ebx
10004e2f:	5e                   	pop    esi
10004e30:	5f                   	pop    edi
10004e31:	5d                   	pop    ebp
10004e32:	e9 d5 fe ff ff       	jmp    10004d0c <NIWindow::rerender()>
10004e37:	90                   	nop

10004e38 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004e40:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004e44:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004e47:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004e4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004e52:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004e56:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004e59:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004e60:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004e67:	e9 6a ff ff ff       	jmp    10004dd6 <NIWindow::changeContext(NIContext*, int, int)>

10004e6c <NIWindow::request()>:
10004e6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e70:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004e74:	75 05                	jne    10004e7b <NIWindow::request()+0xf>
10004e76:	e9 91 fe ff ff       	jmp    10004d0c <NIWindow::rerender()>
10004e7b:	c3                   	ret    

10004e7c <NIWindow::SHADOW_TEST()>:
10004e7c:	55                   	push   ebp
10004e7d:	57                   	push   edi
10004e7e:	56                   	push   esi
10004e7f:	53                   	push   ebx
10004e80:	83 ec 28             	sub    esp,0x28
10004e83:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004e87:	53                   	push   ebx
10004e88:	e8 fc ff ff ff       	call   10004e89 <NIWindow::SHADOW_TEST()+0xd>	10004e89: R_386_PC32	NIWindow::request()
10004e8d:	83 c4 10             	add    esp,0x10
10004e90:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004e93:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004e96:	74 10                	je     10004ea8 <NIWindow::SHADOW_TEST()+0x2c>
10004e98:	83 ec 0c             	sub    esp,0xc
10004e9b:	68 63 55 00 10       	push   0x10005563	10004e9c: R_386_32	.text
10004ea0:	e8 fc ff ff ff       	call   10004ea1 <NIWindow::SHADOW_TEST()+0x25>	10004ea1: R_386_PC32	KePanic(char const*)
10004ea5:	83 c4 10             	add    esp,0x10
10004ea8:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004eac:	0f 85 28 01 00 00    	jne    10004fda <NIWindow::SHADOW_TEST()+0x15e>
10004eb2:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004eba:	31 ff                	xor    edi,edi
10004ebc:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004ebf:	0f 8e 15 01 00 00    	jle    10004fda <NIWindow::SHADOW_TEST()+0x15e>
10004ec5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004ec8:	8d 04 b8             	lea    eax,[eax+edi*4]
10004ecb:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004ece:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004ed2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004ed6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004eda:	89 34 24             	mov    DWORD PTR [esp],esi
10004edd:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004ee0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004ee3:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004ee7:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004eea:	0f 8e d4 00 00 00    	jle    10004fc4 <NIWindow::SHADOW_TEST()+0x148>
10004ef0:	83 ff 05             	cmp    edi,0x5
10004ef3:	7e 1f                	jle    10004f14 <NIWindow::SHADOW_TEST()+0x98>
10004ef5:	8d 41 fb             	lea    eax,[ecx-0x5]
10004ef8:	39 f8                	cmp    eax,edi
10004efa:	7e 18                	jle    10004f14 <NIWindow::SHADOW_TEST()+0x98>
10004efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004f00:	83 c0 05             	add    eax,0x5
10004f03:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f06:	7d 0c                	jge    10004f14 <NIWindow::SHADOW_TEST()+0x98>
10004f08:	8d 45 fb             	lea    eax,[ebp-0x5]
10004f0b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f0e:	0f 8f a8 00 00 00    	jg     10004fbc <NIWindow::SHADOW_TEST()+0x140>
10004f14:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004f18:	be ea 01 00 00       	mov    esi,0x1ea
10004f1d:	29 f9                	sub    ecx,edi
10004f1f:	89 f0                	mov    eax,esi
10004f21:	83 c1 04             	add    ecx,0x4
10004f24:	99                   	cdq    
10004f25:	f7 f9                	idiv   ecx
10004f27:	89 c1                	mov    ecx,eax
10004f29:	89 f0                	mov    eax,esi
10004f2b:	99                   	cdq    
10004f2c:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004f30:	83 f8 0a             	cmp    eax,0xa
10004f33:	7d 05                	jge    10004f3a <NIWindow::SHADOW_TEST()+0xbe>
10004f35:	b8 0a 00 00 00       	mov    eax,0xa
10004f3a:	39 c1                	cmp    ecx,eax
10004f3c:	7d 02                	jge    10004f40 <NIWindow::SHADOW_TEST()+0xc4>
10004f3e:	89 c1                	mov    ecx,eax
10004f40:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004f43:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f48:	83 c5 04             	add    ebp,0x4
10004f4b:	99                   	cdq    
10004f4c:	f7 fd                	idiv   ebp
10004f4e:	89 c6                	mov    esi,eax
10004f50:	83 f8 0a             	cmp    eax,0xa
10004f53:	7d 05                	jge    10004f5a <NIWindow::SHADOW_TEST()+0xde>
10004f55:	be 0a 00 00 00       	mov    esi,0xa
10004f5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004f5d:	8d 68 05             	lea    ebp,[eax+0x5]
10004f60:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f65:	99                   	cdq    
10004f66:	f7 fd                	idiv   ebp
10004f68:	39 c6                	cmp    esi,eax
10004f6a:	7d 02                	jge    10004f6e <NIWindow::SHADOW_TEST()+0xf2>
10004f6c:	89 c6                	mov    esi,eax
10004f6e:	89 f0                	mov    eax,esi
10004f70:	89 ca                	mov    edx,ecx
10004f72:	0f af c6             	imul   eax,esi
10004f75:	0f af d1             	imul   edx,ecx
10004f78:	0f af f1             	imul   esi,ecx
10004f7b:	01 d0                	add    eax,edx
10004f7d:	8d 04 c6             	lea    eax,[esi+eax*8]
10004f80:	c1 f8 08             	sar    eax,0x8
10004f83:	83 f8 66             	cmp    eax,0x66
10004f86:	7e 46                	jle    10004fce <NIWindow::SHADOW_TEST()+0x152>
10004f88:	8d 50 9a             	lea    edx,[eax-0x66]
10004f8b:	d1 fa                	sar    edx,1
10004f8d:	8d 42 66             	lea    eax,[edx+0x66]
10004f90:	83 f8 73             	cmp    eax,0x73
10004f93:	7e 39                	jle    10004fce <NIWindow::SHADOW_TEST()+0x152>
10004f95:	83 ea 0d             	sub    edx,0xd
10004f98:	c1 fa 02             	sar    edx,0x2
10004f9b:	8d 42 73             	lea    eax,[edx+0x73]
10004f9e:	83 f8 7f             	cmp    eax,0x7f
10004fa1:	7f 19                	jg     10004fbc <NIWindow::SHADOW_TEST()+0x140>
10004fa3:	50                   	push   eax
10004fa4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004fa7:	01 f8                	add    eax,edi
10004fa9:	50                   	push   eax
10004faa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004fae:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10004fb1:	50                   	push   eax
10004fb2:	ff 33                	push   DWORD PTR [ebx]
10004fb4:	e8 fc ff ff ff       	call   10004fb5 <NIWindow::SHADOW_TEST()+0x139>	10004fb5: R_386_PC32	NIContext::drvDarken4(int, int, int)
10004fb9:	83 c4 10             	add    esp,0x10
10004fbc:	ff 04 24             	inc    DWORD PTR [esp]
10004fbf:	e9 19 ff ff ff       	jmp    10004edd <NIWindow::SHADOW_TEST()+0x61>
10004fc4:	47                   	inc    edi
10004fc5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004fc9:	e9 ee fe ff ff       	jmp    10004ebc <NIWindow::SHADOW_TEST()+0x40>
10004fce:	83 f8 0a             	cmp    eax,0xa
10004fd1:	7d d0                	jge    10004fa3 <NIWindow::SHADOW_TEST()+0x127>
10004fd3:	b8 0a 00 00 00       	mov    eax,0xa
10004fd8:	eb c9                	jmp    10004fa3 <NIWindow::SHADOW_TEST()+0x127>
10004fda:	83 c4 1c             	add    esp,0x1c
10004fdd:	5b                   	pop    ebx
10004fde:	5e                   	pop    esi
10004fdf:	5f                   	pop    edi
10004fe0:	5d                   	pop    ebp
10004fe1:	c3                   	ret    

10004fe2 <NIWindow::realdraw()>:
10004fe2:	55                   	push   ebp
10004fe3:	57                   	push   edi
10004fe4:	56                   	push   esi
10004fe5:	53                   	push   ebx
10004fe6:	83 ec 18             	sub    esp,0x18
10004fe9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004fed:	53                   	push   ebx
10004fee:	e8 fc ff ff ff       	call   10004fef <NIWindow::realdraw()+0xd>	10004fef: R_386_PC32	NIWindow::request()
10004ff3:	83 c4 10             	add    esp,0x10
10004ff6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004ff9:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004ffc:	74 10                	je     1000500e <NIWindow::realdraw()+0x2c>
10004ffe:	83 ec 0c             	sub    esp,0xc
10005001:	68 63 55 00 10       	push   0x10005563	10005002: R_386_32	.text
10005006:	e8 fc ff ff ff       	call   10005007 <NIWindow::realdraw()+0x25>	10005007: R_386_PC32	KePanic(char const*)
1000500b:	83 c4 10             	add    esp,0x10
1000500e:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10005012:	75 46                	jne    1000505a <NIWindow::realdraw()+0x78>
10005014:	31 f6                	xor    esi,esi
10005016:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10005019:	7e 3f                	jle    1000505a <NIWindow::realdraw()+0x78>
1000501b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
1000501e:	8d 04 b0             	lea    eax,[eax+esi*4]
10005021:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10005024:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005028:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
1000502b:	89 c2                	mov    edx,eax
1000502d:	29 fa                	sub    edx,edi
1000502f:	39 ea                	cmp    edx,ebp
10005031:	7e 24                	jle    10005057 <NIWindow::realdraw()+0x75>
10005033:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005036:	0f af c6             	imul   eax,esi
10005039:	01 e8                	add    eax,ebp
1000503b:	ff 34 82             	push   DWORD PTR [edx+eax*4]
1000503e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10005041:	01 f0                	add    eax,esi
10005043:	50                   	push   eax
10005044:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10005047:	01 e8                	add    eax,ebp
10005049:	45                   	inc    ebp
1000504a:	50                   	push   eax
1000504b:	ff 33                	push   DWORD PTR [ebx]
1000504d:	e8 fc ff ff ff       	call   1000504e <NIWindow::realdraw()+0x6c>	1000504e: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
10005052:	83 c4 10             	add    esp,0x10
10005055:	eb d1                	jmp    10005028 <NIWindow::realdraw()+0x46>
10005057:	46                   	inc    esi
10005058:	eb bc                	jmp    10005016 <NIWindow::realdraw()+0x34>
1000505a:	83 c4 0c             	add    esp,0xc
1000505d:	5b                   	pop    ebx
1000505e:	5e                   	pop    esi
1000505f:	5f                   	pop    edi
10005060:	5d                   	pop    ebp
10005061:	c3                   	ret    

10005062 <List<NIWindow*>::insertAtHead(NIWindow*)>:
10005062:	53                   	push   ebx
10005063:	83 ec 14             	sub    esp,0x14
10005066:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000506a:	6a 0c                	push   0xc
1000506c:	e8 fc ff ff ff       	call   1000506d <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	1000506d: R_386_PC32	malloc
10005071:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10005075:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000507c:	89 10                	mov    DWORD PTR [eax],edx
1000507e:	83 c4 10             	add    esp,0x10
10005081:	8b 13                	mov    edx,DWORD PTR [ebx]
10005083:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005086:	85 d2                	test   edx,edx
10005088:	74 05                	je     1000508f <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
1000508a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
1000508d:	eb 03                	jmp    10005092 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
1000508f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005092:	89 03                	mov    DWORD PTR [ebx],eax
10005094:	83 c4 08             	add    esp,0x8
10005097:	5b                   	pop    ebx
10005098:	c3                   	ret    
10005099:	90                   	nop

1000509a <List<NIWindow*>::deleteElement(NIWindow*&)>:
1000509a:	57                   	push   edi
1000509b:	56                   	push   esi
1000509c:	53                   	push   ebx
1000509d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100050a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100050a5:	8b 19                	mov    ebx,DWORD PTR [ecx]
100050a7:	85 db                	test   ebx,ebx
100050a9:	74 5e                	je     10005109 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100050ab:	8b 30                	mov    esi,DWORD PTR [eax]
100050ad:	89 da                	mov    edx,ebx
100050af:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100050b2:	8b 3a                	mov    edi,DWORD PTR [edx]
100050b4:	85 c0                	test   eax,eax
100050b6:	74 08                	je     100050c0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050b8:	39 f7                	cmp    edi,esi
100050ba:	73 04                	jae    100050c0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050bc:	89 c2                	mov    edx,eax
100050be:	eb ef                	jmp    100050af <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
100050c0:	39 f7                	cmp    edi,esi
100050c2:	75 45                	jne    10005109 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100050c4:	39 d3                	cmp    ebx,edx
100050c6:	75 18                	jne    100050e0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
100050c8:	89 01                	mov    DWORD PTR [ecx],eax
100050ca:	85 c0                	test   eax,eax
100050cc:	75 09                	jne    100050d7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
100050ce:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100050d5:	eb 1e                	jmp    100050f5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100050de:	eb 15                	jmp    100050f5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050e0:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050e3:	85 c0                	test   eax,eax
100050e5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100050e8:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050eb:	74 05                	je     100050f2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100050ed:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100050f0:	eb 03                	jmp    100050f5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050f2:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100050f5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
100050fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10005101:	5b                   	pop    ebx
10005102:	5e                   	pop    esi
10005103:	5f                   	pop    edi
10005104:	e9 fc ff ff ff       	jmp    10005105 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10005105: R_386_PC32	operator delete(void*, unsigned long)
10005109:	5b                   	pop    ebx
1000510a:	5e                   	pop    esi
1000510b:	5f                   	pop    edi
1000510c:	c3                   	ret    
1000510d:	43                   	inc    ebx
1000510e:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005110:	42                   	inc    edx
10005111:	61                   	popa   
10005112:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005113:	61                   	popa   
10005114:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005115:	61                   	popa   
10005116:	2f                   	das    
10005117:	53                   	push   ebx
10005118:	79 73                	jns    1000518d <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000511a:	74 65                	je     10005181 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
1000511c:	6d                   	ins    DWORD PTR es:[edi],dx
1000511d:	2f                   	das    
1000511e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000511f:	65 77 67             	gs ja  10005189 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
10005122:	75 69                	jne    1000518d <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005124:	2e 65 78 65          	cs gs js 1000518d <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005128:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
1000512b:	4e                   	dec    esi
1000512c:	43                   	inc    ebx
1000512d:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005130:	4e                   	dec    esi
10005131:	32 00                	xor    al,BYTE PTR [eax]
10005133:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10005136:	53                   	push   ebx
10005137:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
1000513a:	43                   	inc    ebx
1000513b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000513c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000513d:	74 65                	je     100051a4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
1000513f:	78 74                	js     100051b5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
10005141:	3a 3a                	cmp    bh,BYTE PTR [edx]
10005143:	64 72 76             	fs jb  100051bc <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
10005146:	52                   	push   edx
10005147:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005149:	64 65 72 54          	fs gs jb 100051a1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
1000514d:	54                   	push   esp
1000514e:	46                   	inc    esi
1000514f:	34 00                	xor    al,0x0
10005151:	43                   	inc    ebx
10005152:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005154:	42                   	inc    edx
10005155:	61                   	popa   
10005156:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005157:	61                   	popa   
10005158:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005159:	61                   	popa   
1000515a:	2f                   	das    
1000515b:	46                   	inc    esi
1000515c:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000515d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000515e:	74 73                	je     100051d3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005160:	2f                   	das    
10005161:	53                   	push   ebx
10005162:	46                   	inc    esi
10005163:	4e                   	dec    esi
10005164:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10005167:	4e                   	dec    esi
10005168:	4e                   	dec    esi
10005169:	4f                   	dec    edi
1000516a:	54                   	push   esp
1000516b:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000516f:	44                   	inc    esp
10005170:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10005173:	4e                   	dec    esi
10005174:	54                   	push   esp
10005175:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005179:	45                   	inc    ebp
1000517a:	43                   	inc    ebx
1000517b:	54                   	push   esp
1000517c:	4f                   	dec    edi
1000517d:	52                   	push   edx
1000517e:	59                   	pop    ecx
1000517f:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005182:	2f                   	das    
10005183:	42                   	inc    edx
10005184:	61                   	popa   
10005185:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005186:	61                   	popa   
10005187:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005188:	61                   	popa   
10005189:	2f                   	das    
1000518a:	46                   	inc    esi
1000518b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000518c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000518d:	74 73                	je     10005202 <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
1000518f:	2f                   	das    
10005190:	53                   	push   ebx
10005191:	46                   	inc    esi
10005192:	4e                   	dec    esi
10005193:	2f                   	das    
10005194:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10005197:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005198:	74 20                	je     100051ba <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
1000519a:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100051a1:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100051a8:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
100051ac:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
100051b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051b3:	74 3a                	je     100051ef <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100051b5:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100051bb:	53                   	push   ebx
100051bc:	46                   	inc    esi
100051bd:	4e                   	dec    esi
100051be:	5f                   	pop    edi
100051bf:	52                   	push   edx
100051c0:	45                   	inc    ebp
100051c1:	53                   	push   ebx
100051c2:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100051c8:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
100051cb:	6d                   	ins    DWORD PTR es:[edi],dx
100051cc:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051cd:	72 79                	jb     10005248 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ae>
100051cf:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
100051d2:	6c                   	ins    BYTE PTR es:[edi],dx
100051d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051d4:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
100051d7:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
100051de:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051df:	72 00                	jb     100051e1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
100051e1:	42                   	inc    edx
100051e2:	61                   	popa   
100051e3:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
100051e7:	6c                   	ins    BYTE PTR es:[edi],dx
100051e8:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
100051ec:	72 6d                	jb     1000525b <List<NIWindow*>::deleteElement(NIWindow*&)+0x1c1>
100051ee:	61                   	popa   
100051ef:	74 00                	je     100051f1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
100051f1:	4e                   	dec    esi
100051f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051f3:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100051f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051f7:	74 20                	je     10005219 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
100051f9:	66 61                	popaw  
100051fb:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
100051fe:	66 6f                	outs   dx,WORD PTR ds:[esi]
10005200:	75 6e                	jne    10005270 <_ssfn__compute_huffman_codes::length_dezigzag+0x10>
10005202:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10005206:	76 61                	jbe    10005269 <_ssfn__compute_huffman_codes::length_dezigzag+0x9>
10005208:	6c                   	ins    BYTE PTR es:[edi],dx
10005209:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10005211:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10005214:	6c                   	ins    BYTE PTR es:[edi],dx
10005215:	75 65                	jne    1000527c <_ssfn__compute_huffman_codes::length_dezigzag+0x1c>
10005217:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
1000521a:	76 61                	jbe    1000527d <_ssfn__compute_huffman_codes::length_dezigzag+0x1d>
1000521c:	6c                   	ins    BYTE PTR es:[edi],dx
1000521d:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10005225:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005228:	76 61                	jbe    1000528b <_ssfn__zdist_extra+0xb>
1000522a:	6c                   	ins    BYTE PTR es:[edi],dx
1000522b:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10005233:	47                   	inc    edi
10005234:	6c                   	ins    BYTE PTR es:[edi],dx
10005235:	79 70                	jns    100052a7 <_ssfn__zdist_extra+0x27>
10005237:	68 20 6e 6f 74       	push   0x746f6e20
1000523c:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
1000523f:	75 6e                	jne    100052af <_ssfn__zdist_extra+0x2f>
10005241:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10005245:	66 90                	xchg   ax,ax
10005247:	66 90                	xchg   ax,ax
10005249:	66 90                	xchg   ax,ax
1000524b:	66 90                	xchg   ax,ax
1000524d:	66 90                	xchg   ax,ax
1000524f:	66 90                	xchg   ax,ax
10005251:	66 90                	xchg   ax,ax
10005253:	66 90                	xchg   ax,ax
10005255:	66 90                	xchg   ax,ax
10005257:	66 90                	xchg   ax,ax
10005259:	66 90                	xchg   ax,ax
1000525b:	66 90                	xchg   ax,ax
1000525d:	66 90                	xchg   ax,ax
1000525f:	90                   	nop

10005260 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005260:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005270:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005280 <_ssfn__zdist_extra>:
	...
10005290:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
100052a0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
100052b0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
100052c0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
100052d0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
100052e0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
100052f0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005300 <_ssfn__zdist_base>:
10005300:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005310:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005320:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005330:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005340:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005350:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005360:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005370:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005380 <_ssfn__zlength_extra>:
	...
100053a0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
100053b0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
100053c0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
100053d0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
100053e0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005400 <_ssfn__zlength_base>:
10005400:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005410:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005420:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005430:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005440:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005450:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005460:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005470:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005480:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005490:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
100054a0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
100054b0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
100054c0:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
100054d0:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
100054e0:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
100054f0:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005500:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005510:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005520:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005530:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005540:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005550:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005560:	72 0a 00 41 53 53 45 52 54 49 4f 4e 20 46 41 49     r..ASSERTION FAI
10005570:	4c 55 52 45 20 28 41 29 2e 00                       LURE (A)..
