
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 48             	sub    esp,0x48
10000007:	68 7b 2c 00 10       	push   0x10002c7b	10000008: R_386_32	.text
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000011:	e8 fc ff ff ff       	call   10000012 <start(void*)+0x12>	10000012: R_386_PC32	legacyFontInit()
10000016:	e8 fc ff ff ff       	call   10000017 <start(void*)+0x17>	10000017: R_386_PC32	setupCursor()
1000001b:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000022:	e8 fc ff ff ff       	call   10000023 <start(void*)+0x23>	10000023: R_386_PC32	operator new(unsigned long)
10000027:	89 c3                	mov    ebx,eax
10000029:	58                   	pop    eax
1000002a:	5a                   	pop    edx
1000002b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000002d: R_386_32	screen
10000031:	53                   	push   ebx
10000032:	e8 fc ff ff ff       	call   10000033 <start(void*)+0x33>	10000033: R_386_PC32	Context::Context(Video*)
10000037:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000003e:	e8 fc ff ff ff       	call   1000003f <start(void*)+0x3f>	1000003f: R_386_PC32	operator new(unsigned long)
10000043:	89 c5                	mov    ebp,eax
10000045:	59                   	pop    ecx
10000046:	5e                   	pop    esi
10000047:	53                   	push   ebx
10000048:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000004b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	50                   	push   eax
10000053:	e8 fc ff ff ff       	call   10000054 <start(void*)+0x54>	10000054: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000058:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
1000005f:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10000061: R_386_32	rootRgn
10000065:	83 c4 14             	add    esp,0x14
10000068:	6a 58                	push   0x58
1000006a:	e8 fc ff ff ff       	call   1000006b <start(void*)+0x6b>	1000006b: R_386_PC32	operator new(unsigned long)
1000006f:	89 c6                	mov    esi,eax
10000071:	83 c4 0c             	add    esp,0xc
10000074:	53                   	push   ebx
10000075:	68 aa aa 00 00       	push   0xaaaa
1000007a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000007d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000080:	6a 00                	push   0x0
10000082:	6a 00                	push   0x0
10000084:	50                   	push   eax
10000085:	e8 fc ff ff ff       	call   10000086 <start(void*)+0x86>	10000086: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000008a:	83 c4 18             	add    esp,0x18
1000008d:	56                   	push   esi
1000008e:	55                   	push   ebp
1000008f:	e8 fc ff ff ff       	call   10000090 <start(void*)+0x90>	10000090: R_386_PC32	GDO::addChild(GDO*)
10000094:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000009b:	e8 fc ff ff ff       	call   1000009c <start(void*)+0x9c>	1000009c: R_386_PC32	operator new(unsigned long)
100000a0:	89 c2                	mov    edx,eax
100000a2:	5f                   	pop    edi
100000a3:	58                   	pop    eax
100000a4:	6a 06                	push   0x6
100000a6:	52                   	push   edx
100000a7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
100000ab:	e8 fc ff ff ff       	call   100000ac <start(void*)+0xac>	100000ac: R_386_PC32	Brush::Brush(BrushType)
100000b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000b7:	e8 fc ff ff ff       	call   100000b8 <start(void*)+0xb8>	100000b8: R_386_PC32	operator new(unsigned long)
100000bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100000c0:	58                   	pop    eax
100000c1:	5a                   	pop    edx
100000c2:	6a 07                	push   0x7
100000c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100000c8:	e8 fc ff ff ff       	call   100000c9 <start(void*)+0xc9>	100000c9: R_386_PC32	Brush::Brush(BrushType)
100000cd:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d4:	e8 fc ff ff ff       	call   100000d5 <start(void*)+0xd5>	100000d5: R_386_PC32	operator new(unsigned long)
100000d9:	89 c7                	mov    edi,eax
100000db:	59                   	pop    ecx
100000dc:	5e                   	pop    esi
100000dd:	6a 08                	push   0x8
100000df:	50                   	push   eax
100000e0:	e8 fc ff ff ff       	call   100000e1 <start(void*)+0xe1>	100000e1: R_386_PC32	Brush::Brush(BrushType)
100000e5:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000ec:	e8 fc ff ff ff       	call   100000ed <start(void*)+0xed>	100000ed: R_386_PC32	operator new(unsigned long)
100000f1:	89 c1                	mov    ecx,eax
100000f3:	58                   	pop    eax
100000f4:	5a                   	pop    edx
100000f5:	6a 0a                	push   0xa
100000f7:	51                   	push   ecx
100000f8:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
100000fc:	e8 fc ff ff ff       	call   100000fd <start(void*)+0xfd>	100000fd: R_386_PC32	Brush::Brush(BrushType)
10000101:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000108:	e8 fc ff ff ff       	call   10000109 <start(void*)+0x109>	10000109: R_386_PC32	operator new(unsigned long)
1000010d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000111:	59                   	pop    ecx
10000112:	5e                   	pop    esi
10000113:	6a 09                	push   0x9
10000115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0x11a>	1000011a: R_386_PC32	Brush::Brush(BrushType)
1000011e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0x126>	10000126: R_386_PC32	operator new(unsigned long)
1000012a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000012e:	58                   	pop    eax
1000012f:	5a                   	pop    edx
10000130:	6a 0b                	push   0xb
10000132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000136:	e8 fc ff ff ff       	call   10000137 <start(void*)+0x137>	10000137: R_386_PC32	Brush::Brush(BrushType)
1000013b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x143>	10000143: R_386_PC32	operator new(unsigned long)
10000147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000014b:	59                   	pop    ecx
1000014c:	5e                   	pop    esi
1000014d:	6a 0c                	push   0xc
1000014f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000153:	e8 fc ff ff ff       	call   10000154 <start(void*)+0x154>	10000154: R_386_PC32	Brush::Brush(BrushType)
10000158:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x160>	10000160: R_386_PC32	operator new(unsigned long)
10000164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000168:	58                   	pop    eax
10000169:	5a                   	pop    edx
1000016a:	6a 0d                	push   0xd
1000016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000170:	e8 fc ff ff ff       	call   10000171 <start(void*)+0x171>	10000171: R_386_PC32	Brush::Brush(BrushType)
10000175:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x17d>	1000017d: R_386_PC32	operator new(unsigned long)
10000181:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000185:	59                   	pop    ecx
10000186:	5e                   	pop    esi
10000187:	6a 0e                	push   0xe
10000189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000018d:	e8 fc ff ff ff       	call   1000018e <start(void*)+0x18e>	1000018e: R_386_PC32	Brush::Brush(BrushType)
10000192:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x19a>	1000019a: R_386_PC32	operator new(unsigned long)
1000019e:	89 c6                	mov    esi,eax
100001a0:	58                   	pop    eax
100001a1:	5a                   	pop    edx
100001a2:	6a 00                	push   0x0
100001a4:	56                   	push   esi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Brush::Brush(BrushType)
100001aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001b1:	e8 fc ff ff ff       	call   100001b2 <start(void*)+0x1b2>	100001b2: R_386_PC32	operator new(unsigned long)
100001b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100001ba:	59                   	pop    ecx
100001bb:	58                   	pop    eax
100001bc:	6a 04                	push   0x4
100001be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x1c3>	100001c3: R_386_PC32	Brush::Brush(BrushType)
100001c7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001ce:	e8 fc ff ff ff       	call   100001cf <start(void*)+0x1cf>	100001cf: R_386_PC32	operator new(unsigned long)
100001d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100001d7:	58                   	pop    eax
100001d8:	5a                   	pop    edx
100001d9:	6a 0f                	push   0xf
100001db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1e0>	100001e0: R_386_PC32	Brush::Brush(BrushType)
100001e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1ec>	100001ec: R_386_PC32	operator new(unsigned long)
100001f0:	83 c4 0c             	add    esp,0xc
100001f3:	53                   	push   ebx
100001f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
100001f8:	52                   	push   edx
100001f9:	6a 64                	push   0x64
100001fb:	6a 64                	push   0x64
100001fd:	6a 32                	push   0x32
100001ff:	6a 32                	push   0x32
10000201:	50                   	push   eax
10000202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000206:	e8 fc ff ff ff       	call   10000207 <start(void*)+0x207>	10000207: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000020b:	83 c4 18             	add    esp,0x18
1000020e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000212:	50                   	push   eax
10000213:	55                   	push   ebp
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x215>	10000215: R_386_PC32	GDO::addChild(GDO*)
10000219:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000220:	e8 fc ff ff ff       	call   10000221 <start(void*)+0x221>	10000221: R_386_PC32	operator new(unsigned long)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	53                   	push   ebx
10000229:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000022d:	6a 64                	push   0x64
1000022f:	6a 64                	push   0x64
10000231:	6a 32                	push   0x32
10000233:	68 c8 00 00 00       	push   0xc8
10000238:	50                   	push   eax
10000239:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000023d:	e8 fc ff ff ff       	call   1000023e <start(void*)+0x23e>	1000023e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000242:	83 c4 18             	add    esp,0x18
10000245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000249:	50                   	push   eax
1000024a:	55                   	push   ebp
1000024b:	e8 fc ff ff ff       	call   1000024c <start(void*)+0x24c>	1000024c: R_386_PC32	GDO::addChild(GDO*)
10000250:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000257:	e8 fc ff ff ff       	call   10000258 <start(void*)+0x258>	10000258: R_386_PC32	operator new(unsigned long)
1000025c:	83 c4 0c             	add    esp,0xc
1000025f:	53                   	push   ebx
10000260:	57                   	push   edi
10000261:	6a 64                	push   0x64
10000263:	6a 64                	push   0x64
10000265:	6a 32                	push   0x32
10000267:	68 5e 01 00 00       	push   0x15e
1000026c:	50                   	push   eax
1000026d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000271:	e8 fc ff ff ff       	call   10000272 <start(void*)+0x272>	10000272: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000276:	83 c4 18             	add    esp,0x18
10000279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000027d:	50                   	push   eax
1000027e:	55                   	push   ebp
1000027f:	e8 fc ff ff ff       	call   10000280 <start(void*)+0x280>	10000280: R_386_PC32	GDO::addChild(GDO*)
10000284:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000028b:	e8 fc ff ff ff       	call   1000028c <start(void*)+0x28c>	1000028c: R_386_PC32	operator new(unsigned long)
10000290:	89 c7                	mov    edi,eax
10000292:	83 c4 0c             	add    esp,0xc
10000295:	53                   	push   ebx
10000296:	56                   	push   esi
10000297:	6a 64                	push   0x64
10000299:	6a 64                	push   0x64
1000029b:	6a 32                	push   0x32
1000029d:	68 f4 01 00 00       	push   0x1f4
100002a2:	50                   	push   eax
100002a3:	e8 fc ff ff ff       	call   100002a4 <start(void*)+0x2a4>	100002a4: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002a8:	83 c4 18             	add    esp,0x18
100002ab:	57                   	push   edi
100002ac:	55                   	push   ebp
100002ad:	e8 fc ff ff ff       	call   100002ae <start(void*)+0x2ae>	100002ae: R_386_PC32	GDO::addChild(GDO*)
100002b2:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002b9:	e8 fc ff ff ff       	call   100002ba <start(void*)+0x2ba>	100002ba: R_386_PC32	operator new(unsigned long)
100002be:	89 c6                	mov    esi,eax
100002c0:	83 c4 0c             	add    esp,0xc
100002c3:	53                   	push   ebx
100002c4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100002c8:	51                   	push   ecx
100002c9:	6a 64                	push   0x64
100002cb:	6a 64                	push   0x64
100002cd:	68 c8 00 00 00       	push   0xc8
100002d2:	6a 32                	push   0x32
100002d4:	50                   	push   eax
100002d5:	e8 fc ff ff ff       	call   100002d6 <start(void*)+0x2d6>	100002d6: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002da:	83 c4 18             	add    esp,0x18
100002dd:	56                   	push   esi
100002de:	55                   	push   ebp
100002df:	e8 fc ff ff ff       	call   100002e0 <start(void*)+0x2e0>	100002e0: R_386_PC32	GDO::addChild(GDO*)
100002e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002eb:	e8 fc ff ff ff       	call   100002ec <start(void*)+0x2ec>	100002ec: R_386_PC32	operator new(unsigned long)
100002f0:	89 c6                	mov    esi,eax
100002f2:	83 c4 0c             	add    esp,0xc
100002f5:	53                   	push   ebx
100002f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100002fa:	6a 64                	push   0x64
100002fc:	6a 64                	push   0x64
100002fe:	68 c8 00 00 00       	push   0xc8
10000303:	68 c8 00 00 00       	push   0xc8
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <start(void*)+0x30a>	1000030a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000030e:	83 c4 18             	add    esp,0x18
10000311:	56                   	push   esi
10000312:	55                   	push   ebp
10000313:	e8 fc ff ff ff       	call   10000314 <start(void*)+0x314>	10000314: R_386_PC32	GDO::addChild(GDO*)
10000318:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000031f:	e8 fc ff ff ff       	call   10000320 <start(void*)+0x320>	10000320: R_386_PC32	operator new(unsigned long)
10000324:	89 c6                	mov    esi,eax
10000326:	83 c4 0c             	add    esp,0xc
10000329:	53                   	push   ebx
1000032a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000032e:	6a 64                	push   0x64
10000330:	6a 64                	push   0x64
10000332:	68 c8 00 00 00       	push   0xc8
10000337:	68 5e 01 00 00       	push   0x15e
1000033c:	50                   	push   eax
1000033d:	e8 fc ff ff ff       	call   1000033e <start(void*)+0x33e>	1000033e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000342:	83 c4 18             	add    esp,0x18
10000345:	56                   	push   esi
10000346:	55                   	push   ebp
10000347:	e8 fc ff ff ff       	call   10000348 <start(void*)+0x348>	10000348: R_386_PC32	GDO::addChild(GDO*)
1000034c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000353:	e8 fc ff ff ff       	call   10000354 <start(void*)+0x354>	10000354: R_386_PC32	operator new(unsigned long)
10000358:	89 c6                	mov    esi,eax
1000035a:	83 c4 0c             	add    esp,0xc
1000035d:	53                   	push   ebx
1000035e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000362:	6a 64                	push   0x64
10000364:	6a 64                	push   0x64
10000366:	68 c8 00 00 00       	push   0xc8
1000036b:	68 f4 01 00 00       	push   0x1f4
10000370:	50                   	push   eax
10000371:	e8 fc ff ff ff       	call   10000372 <start(void*)+0x372>	10000372: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000376:	83 c4 18             	add    esp,0x18
10000379:	56                   	push   esi
1000037a:	55                   	push   ebp
1000037b:	e8 fc ff ff ff       	call   1000037c <start(void*)+0x37c>	1000037c: R_386_PC32	GDO::addChild(GDO*)
10000380:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000387:	e8 fc ff ff ff       	call   10000388 <start(void*)+0x388>	10000388: R_386_PC32	operator new(unsigned long)
1000038c:	89 c6                	mov    esi,eax
1000038e:	83 c4 0c             	add    esp,0xc
10000391:	53                   	push   ebx
10000392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000396:	6a 64                	push   0x64
10000398:	6a 64                	push   0x64
1000039a:	68 5e 01 00 00       	push   0x15e
1000039f:	6a 32                	push   0x32
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <start(void*)+0x3a3>	100003a3: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003a7:	83 c4 18             	add    esp,0x18
100003aa:	56                   	push   esi
100003ab:	55                   	push   ebp
100003ac:	e8 fc ff ff ff       	call   100003ad <start(void*)+0x3ad>	100003ad: R_386_PC32	GDO::addChild(GDO*)
100003b1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003b8:	e8 fc ff ff ff       	call   100003b9 <start(void*)+0x3b9>	100003b9: R_386_PC32	operator new(unsigned long)
100003bd:	89 c6                	mov    esi,eax
100003bf:	83 c4 0c             	add    esp,0xc
100003c2:	53                   	push   ebx
100003c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100003c7:	6a 64                	push   0x64
100003c9:	6a 64                	push   0x64
100003cb:	68 5e 01 00 00       	push   0x15e
100003d0:	68 c8 00 00 00       	push   0xc8
100003d5:	50                   	push   eax
100003d6:	e8 fc ff ff ff       	call   100003d7 <start(void*)+0x3d7>	100003d7: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003db:	83 c4 18             	add    esp,0x18
100003de:	56                   	push   esi
100003df:	55                   	push   ebp
100003e0:	e8 fc ff ff ff       	call   100003e1 <start(void*)+0x3e1>	100003e1: R_386_PC32	GDO::addChild(GDO*)
100003e5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003ec:	e8 fc ff ff ff       	call   100003ed <start(void*)+0x3ed>	100003ed: R_386_PC32	operator new(unsigned long)
100003f1:	89 c6                	mov    esi,eax
100003f3:	83 c4 0c             	add    esp,0xc
100003f6:	53                   	push   ebx
100003f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100003fb:	6a 64                	push   0x64
100003fd:	6a 64                	push   0x64
100003ff:	68 5e 01 00 00       	push   0x15e
10000404:	68 5e 01 00 00       	push   0x15e
10000409:	50                   	push   eax
1000040a:	e8 fc ff ff ff       	call   1000040b <start(void*)+0x40b>	1000040b: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000040f:	83 c4 18             	add    esp,0x18
10000412:	56                   	push   esi
10000413:	55                   	push   ebp
10000414:	e8 fc ff ff ff       	call   10000415 <start(void*)+0x415>	10000415: R_386_PC32	GDO::addChild(GDO*)
10000419:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000420:	e8 fc ff ff ff       	call   10000421 <start(void*)+0x421>	10000421: R_386_PC32	operator new(unsigned long)
10000425:	89 c6                	mov    esi,eax
10000427:	83 c4 0c             	add    esp,0xc
1000042a:	53                   	push   ebx
1000042b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000042f:	6a 64                	push   0x64
10000431:	6a 64                	push   0x64
10000433:	68 5e 01 00 00       	push   0x15e
10000438:	68 f4 01 00 00       	push   0x1f4
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <start(void*)+0x43f>	1000043f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000443:	83 c4 18             	add    esp,0x18
10000446:	56                   	push   esi
10000447:	55                   	push   ebp
10000448:	e8 fc ff ff ff       	call   10000449 <start(void*)+0x449>	10000449: R_386_PC32	GDO::addChild(GDO*)
1000044d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000454:	e8 fc ff ff ff       	call   10000455 <start(void*)+0x455>	10000455: R_386_PC32	operator new(unsigned long)
10000459:	89 c7                	mov    edi,eax
1000045b:	59                   	pop    ecx
1000045c:	5e                   	pop    esi
1000045d:	53                   	push   ebx
1000045e:	68 c8 00 00 00       	push   0xc8
10000463:	68 2c 01 00 00       	push   0x12c
10000468:	6a 0a                	push   0xa
1000046a:	6a 0a                	push   0xa
1000046c:	50                   	push   eax
1000046d:	e8 fc ff ff ff       	call   1000046e <start(void*)+0x46e>	1000046e: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000472:	83 c4 18             	add    esp,0x18
10000475:	57                   	push   edi
10000476:	55                   	push   ebp
10000477:	e8 fc ff ff ff       	call   10000478 <start(void*)+0x478>	10000478: R_386_PC32	GDO::addChild(GDO*)
1000047c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000483:	e8 fc ff ff ff       	call   10000484 <start(void*)+0x484>	10000484: R_386_PC32	operator new(unsigned long)
10000488:	89 c6                	mov    esi,eax
1000048a:	83 c4 0c             	add    esp,0xc
1000048d:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000490:	68 ff 00 00 00       	push   0xff
10000495:	68 c8 00 00 00       	push   0xc8
1000049a:	68 2c 01 00 00       	push   0x12c
1000049f:	6a 00                	push   0x0
100004a1:	6a 00                	push   0x0
100004a3:	50                   	push   eax
100004a4:	e8 fc ff ff ff       	call   100004a5 <start(void*)+0x4a5>	100004a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004a9:	83 c4 18             	add    esp,0x18
100004ac:	56                   	push   esi
100004ad:	57                   	push   edi
100004ae:	e8 fc ff ff ff       	call   100004af <start(void*)+0x4af>	100004af: R_386_PC32	GDO::addChild(GDO*)
100004b3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004ba:	e8 fc ff ff ff       	call   100004bb <start(void*)+0x4bb>	100004bb: R_386_PC32	operator new(unsigned long)
100004bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100004c3:	58                   	pop    eax
100004c4:	5a                   	pop    edx
100004c5:	6a 09                	push   0x9
100004c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100004cb:	e8 fc ff ff ff       	call   100004cc <start(void*)+0x4cc>	100004cc: R_386_PC32	Brush::Brush(BrushType)
100004d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100004d4:	c7 40 04 00 ff 00 00 	mov    DWORD PTR [eax+0x4],0xff00
100004db:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004e2:	e8 fc ff ff ff       	call   100004e3 <start(void*)+0x4e3>	100004e3: R_386_PC32	operator new(unsigned long)
100004e7:	89 c6                	mov    esi,eax
100004e9:	59                   	pop    ecx
100004ea:	58                   	pop    eax
100004eb:	6a 07                	push   0x7
100004ed:	56                   	push   esi
100004ee:	e8 fc ff ff ff       	call   100004ef <start(void*)+0x4ef>	100004ef: R_386_PC32	Brush::Brush(BrushType)
100004f3:	c7 46 04 00 88 ff 00 	mov    DWORD PTR [esi+0x4],0xff8800
100004fa:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000501:	e8 fc ff ff ff       	call   10000502 <start(void*)+0x502>	10000502: R_386_PC32	operator new(unsigned long)
10000506:	89 c6                	mov    esi,eax
10000508:	58                   	pop    eax
10000509:	5a                   	pop    edx
1000050a:	ff 77 04             	push   DWORD PTR [edi+0x4]
1000050d:	6a 78                	push   0x78
1000050f:	68 c8 00 00 00       	push   0xc8
10000514:	6a 32                	push   0x32
10000516:	6a 32                	push   0x32
10000518:	56                   	push   esi
10000519:	e8 fc ff ff ff       	call   1000051a <start(void*)+0x51a>	1000051a: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000051e:	83 c4 18             	add    esp,0x18
10000521:	56                   	push   esi
10000522:	57                   	push   edi
10000523:	e8 fc ff ff ff       	call   10000524 <start(void*)+0x524>	10000524: R_386_PC32	GDO::addChild(GDO*)
10000528:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000052f:	e8 fc ff ff ff       	call   10000530 <start(void*)+0x530>	10000530: R_386_PC32	operator new(unsigned long)
10000534:	89 c7                	mov    edi,eax
10000536:	83 c4 0c             	add    esp,0xc
10000539:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000053c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000540:	6a 46                	push   0x46
10000542:	6a 46                	push   0x46
10000544:	6a 00                	push   0x0
10000546:	6a 00                	push   0x0
10000548:	50                   	push   eax
10000549:	e8 fc ff ff ff       	call   1000054a <start(void*)+0x54a>	1000054a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000054e:	83 c4 18             	add    esp,0x18
10000551:	57                   	push   edi
10000552:	56                   	push   esi
10000553:	e8 fc ff ff ff       	call   10000554 <start(void*)+0x554>	10000554: R_386_PC32	GDO::addChild(GDO*)
10000558:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000055f:	e8 fc ff ff ff       	call   10000560 <start(void*)+0x560>	10000560: R_386_PC32	operator new(unsigned long)
10000564:	89 c7                	mov    edi,eax
10000566:	83 c4 0c             	add    esp,0xc
10000569:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000056c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000570:	6a 46                	push   0x46
10000572:	6a 55                	push   0x55
10000574:	6a 14                	push   0x14
10000576:	6a 64                	push   0x64
10000578:	50                   	push   eax
10000579:	e8 fc ff ff ff       	call   1000057a <start(void*)+0x57a>	1000057a: R_386_PC32	Ellipse::Ellipse(int, int, int, int, Brush*, Context*)
1000057e:	83 c4 18             	add    esp,0x18
10000581:	57                   	push   edi
10000582:	56                   	push   esi
10000583:	e8 fc ff ff ff       	call   10000584 <start(void*)+0x584>	10000584: R_386_PC32	GDO::addChild(GDO*)
10000588:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000058f:	e8 fc ff ff ff       	call   10000590 <start(void*)+0x590>	10000590: R_386_PC32	getLegacyFont(LegacyFontType)
10000594:	89 c7                	mov    edi,eax
10000596:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000059d:	e8 fc ff ff ff       	call   1000059e <start(void*)+0x59e>	1000059e: R_386_PC32	operator new(unsigned long)
100005a2:	89 c6                	mov    esi,eax
100005a4:	83 c4 0c             	add    esp,0xc
100005a7:	53                   	push   ebx
100005a8:	6a 00                	push   0x0
100005aa:	68 c2 01 00 00       	push   0x1c2
100005af:	6a 32                	push   0x32
100005b1:	68 8e 2c 00 10       	push   0x10002c8e	100005b2: R_386_32	.text
100005b6:	57                   	push   edi
100005b7:	50                   	push   eax
100005b8:	e8 fc ff ff ff       	call   100005b9 <start(void*)+0x5b9>	100005b9: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005bd:	83 c4 18             	add    esp,0x18
100005c0:	56                   	push   esi
100005c1:	55                   	push   ebp
100005c2:	e8 fc ff ff ff       	call   100005c3 <start(void*)+0x5c3>	100005c3: R_386_PC32	GDO::addChild(GDO*)
100005c7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
100005ce:	e8 fc ff ff ff       	call   100005cf <start(void*)+0x5cf>	100005cf: R_386_PC32	getLegacyFont(LegacyFontType)
100005d3:	89 c7                	mov    edi,eax
100005d5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005dc:	e8 fc ff ff ff       	call   100005dd <start(void*)+0x5dd>	100005dd: R_386_PC32	operator new(unsigned long)
100005e1:	89 c6                	mov    esi,eax
100005e3:	83 c4 0c             	add    esp,0xc
100005e6:	53                   	push   ebx
100005e7:	6a 00                	push   0x0
100005e9:	68 c2 01 00 00       	push   0x1c2
100005ee:	68 96 00 00 00       	push   0x96
100005f3:	68 9f 2c 00 10       	push   0x10002c9f	100005f4: R_386_32	.text
100005f8:	57                   	push   edi
100005f9:	50                   	push   eax
100005fa:	e8 fc ff ff ff       	call   100005fb <start(void*)+0x5fb>	100005fb: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005ff:	83 c4 18             	add    esp,0x18
10000602:	56                   	push   esi
10000603:	55                   	push   ebp
10000604:	e8 fc ff ff ff       	call   10000605 <start(void*)+0x605>	10000605: R_386_PC32	GDO::addChild(GDO*)
10000609:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
10000610:	e8 fc ff ff ff       	call   10000611 <start(void*)+0x611>	10000611: R_386_PC32	getLegacyFont(LegacyFontType)
10000615:	89 c7                	mov    edi,eax
10000617:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000061e:	e8 fc ff ff ff       	call   1000061f <start(void*)+0x61f>	1000061f: R_386_PC32	operator new(unsigned long)
10000623:	89 c6                	mov    esi,eax
10000625:	83 c4 0c             	add    esp,0xc
10000628:	53                   	push   ebx
10000629:	6a 00                	push   0x0
1000062b:	68 c2 01 00 00       	push   0x1c2
10000630:	68 04 01 00 00       	push   0x104
10000635:	68 b0 2c 00 10       	push   0x10002cb0	10000636: R_386_32	.text
1000063a:	57                   	push   edi
1000063b:	50                   	push   eax
1000063c:	e8 fc ff ff ff       	call   1000063d <start(void*)+0x63d>	1000063d: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000641:	83 c4 18             	add    esp,0x18
10000644:	56                   	push   esi
10000645:	55                   	push   ebp
10000646:	e8 fc ff ff ff       	call   10000647 <start(void*)+0x647>	10000647: R_386_PC32	GDO::addChild(GDO*)
1000064b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10000652:	e8 fc ff ff ff       	call   10000653 <start(void*)+0x653>	10000653: R_386_PC32	getLegacyFont(LegacyFontType)
10000657:	89 c7                	mov    edi,eax
10000659:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000660:	e8 fc ff ff ff       	call   10000661 <start(void*)+0x661>	10000661: R_386_PC32	operator new(unsigned long)
10000665:	89 c6                	mov    esi,eax
10000667:	83 c4 0c             	add    esp,0xc
1000066a:	53                   	push   ebx
1000066b:	6a 00                	push   0x0
1000066d:	68 c2 01 00 00       	push   0x1c2
10000672:	68 5e 01 00 00       	push   0x15e
10000677:	68 bf 2c 00 10       	push   0x10002cbf	10000678: R_386_32	.text
1000067c:	57                   	push   edi
1000067d:	50                   	push   eax
1000067e:	e8 fc ff ff ff       	call   1000067f <start(void*)+0x67f>	1000067f: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000683:	83 c4 18             	add    esp,0x18
10000686:	56                   	push   esi
10000687:	55                   	push   ebp
10000688:	e8 fc ff ff ff       	call   10000689 <start(void*)+0x689>	10000689: R_386_PC32	GDO::addChild(GDO*)
1000068d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
10000694:	e8 fc ff ff ff       	call   10000695 <start(void*)+0x695>	10000695: R_386_PC32	getLegacyFont(LegacyFontType)
10000699:	89 c7                	mov    edi,eax
1000069b:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006a2:	e8 fc ff ff ff       	call   100006a3 <start(void*)+0x6a3>	100006a3: R_386_PC32	operator new(unsigned long)
100006a7:	89 c6                	mov    esi,eax
100006a9:	83 c4 0c             	add    esp,0xc
100006ac:	53                   	push   ebx
100006ad:	6a 00                	push   0x0
100006af:	68 c2 01 00 00       	push   0x1c2
100006b4:	68 c2 01 00 00       	push   0x1c2
100006b9:	68 d5 2c 00 10       	push   0x10002cd5	100006ba: R_386_32	.text
100006be:	57                   	push   edi
100006bf:	50                   	push   eax
100006c0:	e8 fc ff ff ff       	call   100006c1 <start(void*)+0x6c1>	100006c1: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006c5:	83 c4 18             	add    esp,0x18
100006c8:	56                   	push   esi
100006c9:	55                   	push   ebp
100006ca:	e8 fc ff ff ff       	call   100006cb <start(void*)+0x6cb>	100006cb: R_386_PC32	GDO::addChild(GDO*)
100006cf:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
100006d6:	e8 fc ff ff ff       	call   100006d7 <start(void*)+0x6d7>	100006d7: R_386_PC32	getLegacyFont(LegacyFontType)
100006db:	89 c7                	mov    edi,eax
100006dd:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006e4:	e8 fc ff ff ff       	call   100006e5 <start(void*)+0x6e5>	100006e5: R_386_PC32	operator new(unsigned long)
100006e9:	89 c6                	mov    esi,eax
100006eb:	83 c4 0c             	add    esp,0xc
100006ee:	53                   	push   ebx
100006ef:	6a 00                	push   0x0
100006f1:	68 d1 01 00 00       	push   0x1d1
100006f6:	68 5e 01 00 00       	push   0x15e
100006fb:	68 f0 2c 00 10       	push   0x10002cf0	100006fc: R_386_32	.text
10000700:	57                   	push   edi
10000701:	50                   	push   eax
10000702:	e8 fc ff ff ff       	call   10000703 <start(void*)+0x703>	10000703: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000707:	83 c4 18             	add    esp,0x18
1000070a:	56                   	push   esi
1000070b:	55                   	push   ebp
1000070c:	e8 fc ff ff ff       	call   1000070d <start(void*)+0x70d>	1000070d: R_386_PC32	GDO::addChild(GDO*)
10000711:	83 c4 0c             	add    esp,0xc
10000714:	6a 01                	push   0x1
10000716:	6a 00                	push   0x0
10000718:	55                   	push   ebp
10000719:	e8 fc ff ff ff       	call   1000071a <start(void*)+0x71a>	1000071a: R_386_PC32	GDO::update(List<CRect*>*, bool)
1000071e:	e8 fc ff ff ff       	call   1000071f <start(void*)+0x71f>	1000071f: R_386_PC32	startMouse()
10000723:	83 c4 0c             	add    esp,0xc
10000726:	6a 00                	push   0x0
10000728:	68 c8 00 00 00       	push   0xc8
1000072d:	68 2c 01 00 00       	push   0x12c
10000732:	e8 fc ff ff ff       	call   10000733 <start(void*)+0x733>	10000733: R_386_PC32	processMouse(int, int, int)
10000737:	83 c4 10             	add    esp,0x10
1000073a:	83 ec 0c             	sub    esp,0xc
1000073d:	6a 02                	push   0x2
1000073f:	e8 fc ff ff ff       	call   10000740 <start(void*)+0x740>	10000740: R_386_PC32	blockTask(TaskState)
10000744:	eb f1                	jmp    10000737 <start(void*)+0x737>

10000746 <begin(void*)>:
10000746:	83 ec 18             	sub    esp,0x18
10000749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000074d:	e8 fc ff ff ff       	call   1000074e <begin(void*)+0x8>	1000074e: R_386_PC32	start(void*)

10000752 <Brush::Brush(unsigned int, unsigned int)>:
10000752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000756:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000075a:	89 10                	mov    DWORD PTR [eax],edx
1000075c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000760:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000763:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
1000076a:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
10000771:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000778:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
1000077f:	c3                   	ret    

10000780 <Brush::Brush(BrushType)>:
10000780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000784:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000078a:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
10000791:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
10000795:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
1000079c:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
100007a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100007aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100007b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100007b5:	8d 51 ff             	lea    edx,[ecx-0x1]
100007b8:	83 fa 0e             	cmp    edx,0xe
100007bb:	0f 87 ae 00 00 00    	ja     1000086f <Brush::Brush(BrushType)+0xef>
100007c1:	ff 24 95 1c 2d 00 10 	jmp    DWORD PTR [edx*4+0x10002d1c]	100007c4: R_386_32	.text
100007c8:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
100007ce:	c3                   	ret    
100007cf:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
100007d5:	c3                   	ret    
100007d6:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
100007dc:	c3                   	ret    
100007dd:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
100007e3:	c3                   	ret    
100007e4:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
100007e8:	c3                   	ret    
100007e9:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
100007f0:	eb 6f                	jmp    10000861 <Brush::Brush(BrushType)+0xe1>
100007f2:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
100007f9:	eb 66                	jmp    10000861 <Brush::Brush(BrushType)+0xe1>
100007fb:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
10000802:	eb 5d                	jmp    10000861 <Brush::Brush(BrushType)+0xe1>
10000804:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
1000080b:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
10000811:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
10000818:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
1000081f:	c3                   	ret    
10000820:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
10000827:	eb 3f                	jmp    10000868 <Brush::Brush(BrushType)+0xe8>
10000829:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
1000082d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000834:	c3                   	ret    
10000835:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
1000083b:	eb 0e                	jmp    1000084b <Brush::Brush(BrushType)+0xcb>
1000083d:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
10000843:	eb 06                	jmp    1000084b <Brush::Brush(BrushType)+0xcb>
10000845:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
1000084b:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
10000852:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
10000859:	c3                   	ret    
1000085a:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
10000861:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000868:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
1000086f:	c3                   	ret    

10000870 <List<CRect*>::length() [clone .isra.0]>:
10000870:	31 d2                	xor    edx,edx
10000872:	85 c0                	test   eax,eax
10000874:	74 06                	je     1000087c <List<CRect*>::length() [clone .isra.0]+0xc>
10000876:	42                   	inc    edx
10000877:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000087a:	eb f6                	jmp    10000872 <List<CRect*>::length() [clone .isra.0]+0x2>
1000087c:	89 d0                	mov    eax,edx
1000087e:	c3                   	ret    
1000087f:	90                   	nop

10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
10000880:	53                   	push   ebx
10000881:	89 c1                	mov    ecx,eax
10000883:	89 d3                	mov    ebx,edx
10000885:	e8 e6 ff ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
1000088a:	39 d8                	cmp    eax,ebx
1000088c:	7c 0a                	jl     10000898 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000088e:	85 db                	test   ebx,ebx
10000890:	74 06                	je     10000898 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
10000892:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000895:	4b                   	dec    ebx
10000896:	eb f6                	jmp    1000088e <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
10000898:	89 c8                	mov    eax,ecx
1000089a:	5b                   	pop    ebx
1000089b:	c3                   	ret    

1000089c <CRect::CRect()>:
1000089c:	c3                   	ret    
1000089d:	90                   	nop

1000089e <CRect::CRect(int, int, int, int)>:
1000089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100008a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100008a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100008a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100008ad:	89 10                	mov    DWORD PTR [eax],edx
100008af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100008b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100008b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100008bd:	c3                   	ret    

100008be <CRect::intersect(CRect*)>:
100008be:	55                   	push   ebp
100008bf:	57                   	push   edi
100008c0:	56                   	push   esi
100008c1:	53                   	push   ebx
100008c2:	83 ec 1c             	sub    esp,0x1c
100008c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100008c9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100008cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
100008cf:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
100008d2:	31 c0                	xor    eax,eax
100008d4:	39 f1                	cmp    ecx,esi
100008d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100008da:	7f 7f                	jg     1000095b <CRect::intersect(CRect*)+0x9d>
100008dc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
100008df:	89 04 24             	mov    DWORD PTR [esp],eax
100008e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
100008e5:	31 c0                	xor    eax,eax
100008e7:	39 14 24             	cmp    DWORD PTR [esp],edx
100008ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100008ee:	7c 6b                	jl     1000095b <CRect::intersect(CRect*)+0x9d>
100008f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100008f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100008f7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
100008fa:	31 c0                	xor    eax,eax
100008fc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
10000900:	7f 59                	jg     1000095b <CRect::intersect(CRect*)+0x9d>
10000902:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
10000905:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
10000908:	39 ef                	cmp    edi,ebp
1000090a:	7c 4f                	jl     1000095b <CRect::intersect(CRect*)+0x9d>
1000090c:	83 ec 0c             	sub    esp,0xc
1000090f:	6a 10                	push   0x10
10000911:	e8 fc ff ff ff       	call   10000912 <CRect::intersect(CRect*)+0x54>	10000912: R_386_PC32	malloc
10000916:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000091a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
1000091d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000921:	89 08                	mov    DWORD PTR [eax],ecx
10000923:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10000926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000092a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000092d:	83 c4 10             	add    esp,0x10
10000930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000934:	39 d1                	cmp    ecx,edx
10000936:	7f 02                	jg     1000093a <CRect::intersect(CRect*)+0x7c>
10000938:	89 10                	mov    DWORD PTR [eax],edx
1000093a:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
1000093e:	7f 03                	jg     10000943 <CRect::intersect(CRect*)+0x85>
10000940:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10000943:	3b 30                	cmp    esi,DWORD PTR [eax]
10000945:	7c 08                	jl     1000094f <CRect::intersect(CRect*)+0x91>
10000947:	3b 34 24             	cmp    esi,DWORD PTR [esp]
1000094a:	7f 03                	jg     1000094f <CRect::intersect(CRect*)+0x91>
1000094c:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
1000094f:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
10000952:	7c 07                	jl     1000095b <CRect::intersect(CRect*)+0x9d>
10000954:	39 fb                	cmp    ebx,edi
10000956:	7f 03                	jg     1000095b <CRect::intersect(CRect*)+0x9d>
10000958:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
1000095b:	83 c4 1c             	add    esp,0x1c
1000095e:	5b                   	pop    ebx
1000095f:	5e                   	pop    esi
10000960:	5f                   	pop    edi
10000961:	5d                   	pop    ebp
10000962:	c3                   	ret    
10000963:	90                   	nop

10000964 <Context::Context(Video*)>:
10000964:	53                   	push   ebx
10000965:	83 ec 14             	sub    esp,0x14
10000968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000096c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000970:	89 03                	mov    DWORD PTR [ebx],eax
10000972:	50                   	push   eax
10000973:	e8 fc ff ff ff       	call   10000974 <Context::Context(Video*)+0x10>	10000974: R_386_PC32	Video::getWidth()
10000978:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000097b:	58                   	pop    eax
1000097c:	ff 33                	push   DWORD PTR [ebx]
1000097e:	e8 fc ff ff ff       	call   1000097f <Context::Context(Video*)+0x1b>	1000097f: R_386_PC32	Video::getHeight()
10000983:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000986:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
1000098d:	e8 fc ff ff ff       	call   1000098e <Context::Context(Video*)+0x2a>	1000098e: R_386_PC32	malloc
10000992:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000999:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000099f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
100009a2:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100009a6:	83 c4 18             	add    esp,0x18
100009a9:	5b                   	pop    ebx
100009aa:	c3                   	ret    
100009ab:	90                   	nop

100009ac <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
100009ac:	55                   	push   ebp
100009ad:	57                   	push   edi
100009ae:	56                   	push   esi
100009af:	53                   	push   ebx
100009b0:	83 ec 2c             	sub    esp,0x2c
100009b3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100009b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100009bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
100009bf:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100009c3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100009c7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
100009cb:	01 f9                	add    ecx,edi
100009cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100009d1:	01 f0                	add    eax,esi
100009d3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
100009d6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
100009da:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
100009dd:	01 fe                	add    esi,edi
100009df:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100009e3:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
100009e6:	01 f8                	add    eax,edi
100009e8:	8b 32                	mov    esi,DWORD PTR [edx]
100009ea:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100009ee:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
100009f2:	7d 08                	jge    100009fc <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
100009f4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
100009f8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100009fc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
100009ff:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000a03:	7d 04                	jge    10000a09 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000a05:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000a09:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000a0c:	47                   	inc    edi
10000a0d:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000a11:	39 cf                	cmp    edi,ecx
10000a13:	7e 04                	jle    10000a19 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000a15:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000a19:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000a1c:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a1f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000a23:	39 c1                	cmp    ecx,eax
10000a25:	7e 04                	jle    10000a2b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000a2b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000a2f:	7d 62                	jge    10000a93 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000a31:	89 f0                	mov    eax,esi
10000a33:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000a37:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000a3a:	99                   	cdq    
10000a3b:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000a3e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000a42:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000a47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000a4b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000a4f:	7d 3f                	jge    10000a90 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000a51:	89 f8                	mov    eax,edi
10000a53:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000a57:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000a5a:	99                   	cdq    
10000a5b:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000a5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000a62:	0f a3 d0             	bt     eax,edx
10000a65:	73 0f                	jae    10000a76 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000a67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a6a:	8b 10                	mov    edx,DWORD PTR [eax]
10000a6c:	ff 33                	push   DWORD PTR [ebx]
10000a6e:	56                   	push   esi
10000a6f:	57                   	push   edi
10000a70:	50                   	push   eax
10000a71:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000a74:	eb 14                	jmp    10000a8a <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000a76:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000a79:	83 fa ff             	cmp    edx,0xffffffff
10000a7c:	74 0f                	je     10000a8d <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000a7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a81:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a83:	52                   	push   edx
10000a84:	56                   	push   esi
10000a85:	57                   	push   edi
10000a86:	50                   	push   eax
10000a87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000a8a:	83 c4 10             	add    esp,0x10
10000a8d:	47                   	inc    edi
10000a8e:	eb bb                	jmp    10000a4b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000a90:	46                   	inc    esi
10000a91:	eb 98                	jmp    10000a2b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a93:	83 c4 2c             	add    esp,0x2c
10000a96:	5b                   	pop    ebx
10000a97:	5e                   	pop    esi
10000a98:	5f                   	pop    edi
10000a99:	5d                   	pop    ebp
10000a9a:	c3                   	ret    
10000a9b:	90                   	nop

10000a9c <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000a9c:	55                   	push   ebp
10000a9d:	57                   	push   edi
10000a9e:	56                   	push   esi
10000a9f:	53                   	push   ebx
10000aa0:	83 ec 1c             	sub    esp,0x1c
10000aa3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000aa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000aab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000aae:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000ab2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000ab6:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000ab9:	39 c2                	cmp    edx,eax
10000abb:	0f 8c c9 00 00 00    	jl     10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000ac1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000ac5:	01 c5                	add    ebp,eax
10000ac7:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000ac9:	39 dd                	cmp    ebp,ebx
10000acb:	0f 8e b9 00 00 00    	jle    10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000ad1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000ad5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ad9:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000adc:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000adf:	39 f0                	cmp    eax,esi
10000ae1:	0f 8c a3 00 00 00    	jl     10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000ae7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000aeb:	01 f7                	add    edi,esi
10000aed:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000af0:	39 cf                	cmp    edi,ecx
10000af2:	0f 8e 92 00 00 00    	jle    10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000af8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000b00:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000b04:	7e 08                	jle    10000b0e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000b06:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000b0a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000b0e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000b12:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000b16:	39 ea                	cmp    edx,ebp
10000b18:	7d 09                	jge    10000b23 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000b1a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000b1e:	42                   	inc    edx
10000b1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000b23:	31 db                	xor    ebx,ebx
10000b25:	39 f1                	cmp    ecx,esi
10000b27:	7e 04                	jle    10000b2d <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000b29:	29 f1                	sub    ecx,esi
10000b2b:	89 cb                	mov    ebx,ecx
10000b2d:	39 f8                	cmp    eax,edi
10000b2f:	7d 07                	jge    10000b38 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000b31:	29 f0                	sub    eax,esi
10000b33:	40                   	inc    eax
10000b34:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000b38:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000b3b:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000b40:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000b44:	89 e8                	mov    eax,ebp
10000b46:	29 f0                	sub    eax,esi
10000b48:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000b4c:	7e 3c                	jle    10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b4e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000b52:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000b56:	7e 2b                	jle    10000b83 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000b58:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000b5c:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000b5f: R_386_32	palette256
10000b63:	83 fa ff             	cmp    edx,0xffffffff
10000b66:	74 18                	je     10000b80 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b6c:	8b 00                	mov    eax,DWORD PTR [eax]
10000b6e:	8b 08                	mov    ecx,DWORD PTR [eax]
10000b70:	52                   	push   edx
10000b71:	55                   	push   ebp
10000b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000b76:	01 fa                	add    edx,edi
10000b78:	52                   	push   edx
10000b79:	50                   	push   eax
10000b7a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000b7d:	83 c4 10             	add    esp,0x10
10000b80:	47                   	inc    edi
10000b81:	eb cf                	jmp    10000b52 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000b83:	45                   	inc    ebp
10000b84:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000b88:	eb ba                	jmp    10000b44 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000b8a:	83 c4 1c             	add    esp,0x1c
10000b8d:	5b                   	pop    ebx
10000b8e:	5e                   	pop    esi
10000b8f:	5f                   	pop    edi
10000b90:	5d                   	pop    ebp
10000b91:	c3                   	ret    

10000b92 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000b92:	55                   	push   ebp
10000b93:	57                   	push   edi
10000b94:	56                   	push   esi
10000b95:	53                   	push   ebx
10000b96:	83 ec 1c             	sub    esp,0x1c
10000b99:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ba1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000ba4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000ba8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000bab:	39 c1                	cmp    ecx,eax
10000bad:	0f 8c c1 00 00 00    	jl     10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bb3:	89 c5                	mov    ebp,eax
10000bb5:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000bbd:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000bbf:	39 d8                	cmp    eax,ebx
10000bc1:	0f 8e ad 00 00 00    	jle    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000bcb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000bcf:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000bd2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000bd5:	39 c2                	cmp    edx,eax
10000bd7:	0f 8c 97 00 00 00    	jl     10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bdd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000be1:	01 c7                	add    edi,eax
10000be3:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000be6:	39 f7                	cmp    edi,esi
10000be8:	0f 8e 86 00 00 00    	jle    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000bf6:	39 eb                	cmp    ebx,ebp
10000bf8:	7e 06                	jle    10000c00 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000bfa:	29 eb                	sub    ebx,ebp
10000bfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c00:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000c04:	7d 07                	jge    10000c0d <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000c06:	29 e9                	sub    ecx,ebp
10000c08:	41                   	inc    ecx
10000c09:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000c0d:	31 db                	xor    ebx,ebx
10000c0f:	39 c6                	cmp    esi,eax
10000c11:	7e 04                	jle    10000c17 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000c13:	89 f3                	mov    ebx,esi
10000c15:	29 c3                	sub    ebx,eax
10000c17:	39 fa                	cmp    edx,edi
10000c19:	7d 07                	jge    10000c22 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000c1b:	29 c2                	sub    edx,eax
10000c1d:	42                   	inc    edx
10000c1e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000c22:	01 d8                	add    eax,ebx
10000c24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c28:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000c2c:	7e 46                	jle    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000c32:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000c36:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000c3a:	d3 e6                	shl    esi,cl
10000c3c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c40:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000c44:	7e 27                	jle    10000c6d <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000c46:	89 f0                	mov    eax,esi
10000c48:	84 c0                	test   al,al
10000c4a:	79 1c                	jns    10000c68 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c50:	8b 00                	mov    eax,DWORD PTR [eax]
10000c52:	8b 10                	mov    edx,DWORD PTR [eax]
10000c54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000c58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000c5c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000c60:	51                   	push   ecx
10000c61:	50                   	push   eax
10000c62:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000c65:	83 c4 10             	add    esp,0x10
10000c68:	d1 e6                	shl    esi,1
10000c6a:	47                   	inc    edi
10000c6b:	eb d3                	jmp    10000c40 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000c6d:	43                   	inc    ebx
10000c6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000c72:	eb b4                	jmp    10000c28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000c74:	83 c4 1c             	add    esp,0x1c
10000c77:	5b                   	pop    ebx
10000c78:	5e                   	pop    esi
10000c79:	5f                   	pop    edi
10000c7a:	5d                   	pop    ebp
10000c7b:	c3                   	ret    

10000c7c <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000c7c:	55                   	push   ebp
10000c7d:	57                   	push   edi
10000c7e:	56                   	push   esi
10000c7f:	53                   	push   ebx
10000c80:	83 ec 1c             	sub    esp,0x1c
10000c83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000c87:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000c8b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000c8f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000c92:	8b 00                	mov    eax,DWORD PTR [eax]
10000c94:	e8 d7 fb ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10000c99:	85 c0                	test   eax,eax
10000c9b:	74 38                	je     10000cd5 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000c9d:	31 f6                	xor    esi,esi
10000c9f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000ca2:	8b 08                	mov    ecx,DWORD PTR [eax]
10000ca4:	89 c8                	mov    eax,ecx
10000ca6:	e8 c5 fb ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10000cab:	39 f0                	cmp    eax,esi
10000cad:	7e 68                	jle    10000d17 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000caf:	89 f2                	mov    edx,esi
10000cb1:	89 c8                	mov    eax,ecx
10000cb3:	e8 c8 fb ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000cb8:	52                   	push   edx
10000cb9:	ff 30                	push   DWORD PTR [eax]
10000cbb:	55                   	push   ebp
10000cbc:	57                   	push   edi
10000cbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cc9:	53                   	push   ebx
10000cca:	e8 fc ff ff ff       	call   10000ccb <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000ccb: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000ccf:	46                   	inc    esi
10000cd0:	83 c4 20             	add    esp,0x20
10000cd3:	eb ca                	jmp    10000c9f <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000cd5:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000cd9:	75 3c                	jne    10000d17 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000cdb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000ce3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000cea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000ced:	48                   	dec    eax
10000cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000cf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000cf5:	48                   	dec    eax
10000cf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cfa:	50                   	push   eax
10000cfb:	8d 44 24 04          	lea    eax,[esp+0x4]
10000cff:	50                   	push   eax
10000d00:	55                   	push   ebp
10000d01:	57                   	push   edi
10000d02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d0e:	53                   	push   ebx
10000d0f:	e8 fc ff ff ff       	call   10000d10 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000d10: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d14:	83 c4 20             	add    esp,0x20
10000d17:	83 c4 1c             	add    esp,0x1c
10000d1a:	5b                   	pop    ebx
10000d1b:	5e                   	pop    esi
10000d1c:	5f                   	pop    edi
10000d1d:	5d                   	pop    ebp
10000d1e:	c3                   	ret    
10000d1f:	90                   	nop

10000d20 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000d20:	55                   	push   ebp
10000d21:	57                   	push   edi
10000d22:	56                   	push   esi
10000d23:	53                   	push   ebx
10000d24:	83 ec 1c             	sub    esp,0x1c
10000d27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d2b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000d2f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000d33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d36:	8b 00                	mov    eax,DWORD PTR [eax]
10000d38:	e8 33 fb ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10000d3d:	85 c0                	test   eax,eax
10000d3f:	74 3b                	je     10000d7c <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000d41:	31 f6                	xor    esi,esi
10000d43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d46:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d48:	89 c8                	mov    eax,ecx
10000d4a:	e8 21 fb ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10000d4f:	39 f0                	cmp    eax,esi
10000d51:	7e 6e                	jle    10000dc1 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d53:	89 f2                	mov    edx,esi
10000d55:	89 c8                	mov    eax,ecx
10000d57:	e8 24 fb ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d5c:	55                   	push   ebp
10000d5d:	ff 30                	push   DWORD PTR [eax]
10000d5f:	57                   	push   edi
10000d60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d70:	53                   	push   ebx
10000d71:	e8 fc ff ff ff       	call   10000d72 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000d72: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000d76:	46                   	inc    esi
10000d77:	83 c4 20             	add    esp,0x20
10000d7a:	eb c7                	jmp    10000d43 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000d7c:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d80:	75 3f                	jne    10000dc1 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d82:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000d8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000d91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000d94:	48                   	dec    eax
10000d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000d99:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000d9c:	48                   	dec    eax
10000d9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000da1:	55                   	push   ebp
10000da2:	8d 44 24 04          	lea    eax,[esp+0x4]
10000da6:	50                   	push   eax
10000da7:	57                   	push   edi
10000da8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db8:	53                   	push   ebx
10000db9:	e8 fc ff ff ff       	call   10000dba <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000dba: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000dbe:	83 c4 20             	add    esp,0x20
10000dc1:	83 c4 1c             	add    esp,0x1c
10000dc4:	5b                   	pop    ebx
10000dc5:	5e                   	pop    esi
10000dc6:	5f                   	pop    edi
10000dc7:	5d                   	pop    ebp
10000dc8:	c3                   	ret    

10000dc9 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>:
10000dc9:	55                   	push   ebp
10000dca:	57                   	push   edi
10000dcb:	56                   	push   esi
10000dcc:	53                   	push   ebx
10000dcd:	83 ec 40             	sub    esp,0x40
10000dd0:	6a ff                	push   0xffffffff
10000dd2:	6a 00                	push   0x0
10000dd4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10000dd8:	50                   	push   eax
10000dd9:	e8 fc ff ff ff       	call   10000dda <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x11>	10000dda: R_386_PC32	Brush::Brush(unsigned int, unsigned int)
10000dde:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10000de2:	0f af c0             	imul   eax,eax
10000de5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000de9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000ded:	0f af c0             	imul   eax,eax
10000df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000df4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000df8:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10000dfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000e01:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000e05:	f7 db                	neg    ebx
10000e07:	83 c4 10             	add    esp,0x10
10000e0a:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10000e0e:	0f 8f a5 00 00 00    	jg     10000eb9 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xf0>
10000e14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000e18:	f7 d8                	neg    eax
10000e1a:	89 dd                	mov    ebp,ebx
10000e1c:	0f af eb             	imul   ebp,ebx
10000e1f:	0f af 6c 24 08       	imul   ebp,DWORD PTR [esp+0x8]
10000e24:	31 d2                	xor    edx,edx
10000e26:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10000e2a:	7f 42                	jg     10000e6e <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa5>
10000e2c:	89 c1                	mov    ecx,eax
10000e2e:	0f af c8             	imul   ecx,eax
10000e31:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
10000e36:	01 e9                	add    ecx,ebp
10000e38:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000e3c:	7f 1a                	jg     10000e58 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x8f>
10000e3e:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000e42:	b9 08 00 00 00       	mov    ecx,0x8
10000e47:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000e4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e4d:	84 d2                	test   dl,dl
10000e4f:	75 1a                	jne    10000e6b <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000e51:	89 04 24             	mov    DWORD PTR [esp],eax
10000e54:	b2 01                	mov    dl,0x1
10000e56:	eb 13                	jmp    10000e6b <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000e58:	80 fa 01             	cmp    dl,0x1
10000e5b:	75 0e                	jne    10000e6b <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000e5d:	52                   	push   edx
10000e5e:	8d 54 24 14          	lea    edx,[esp+0x14]
10000e62:	52                   	push   edx
10000e63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000e67:	6a 01                	push   0x1
10000e69:	eb 27                	jmp    10000e92 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xc9>
10000e6b:	40                   	inc    eax
10000e6c:	eb b8                	jmp    10000e26 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x5d>
10000e6e:	fe ca                	dec    dl
10000e70:	75 41                	jne    10000eb3 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xea>
10000e72:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000e76:	b9 08 00 00 00       	mov    ecx,0x8
10000e7b:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000e7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e81:	50                   	push   eax
10000e82:	8d 44 24 14          	lea    eax,[esp+0x14]
10000e86:	50                   	push   eax
10000e87:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000e8b:	6a 01                	push   0x1
10000e8d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000e91:	40                   	inc    eax
10000e92:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
10000e96:	50                   	push   eax
10000e97:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10000e9b:	01 d8                	add    eax,ebx
10000e9d:	50                   	push   eax
10000e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000ea2:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10000ea6:	50                   	push   eax
10000ea7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000eab:	e8 fc ff ff ff       	call   10000eac <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xe3>	10000eac: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000eb0:	83 c4 20             	add    esp,0x20
10000eb3:	43                   	inc    ebx
10000eb4:	e9 51 ff ff ff       	jmp    10000e0a <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x41>
10000eb9:	83 c4 3c             	add    esp,0x3c
10000ebc:	5b                   	pop    ebx
10000ebd:	5e                   	pop    esi
10000ebe:	5f                   	pop    edi
10000ebf:	5d                   	pop    ebp
10000ec0:	c3                   	ret    
10000ec1:	90                   	nop

10000ec2 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
10000ec2:	56                   	push   esi
10000ec3:	53                   	push   ebx
10000ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000ec8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10000ecc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10000ed0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
10000ed4:	b9 02 00 00 00       	mov    ecx,0x2
10000ed9:	99                   	cdq    
10000eda:	f7 f9                	idiv   ecx
10000edc:	89 c3                	mov    ebx,eax
10000ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000ee2:	99                   	cdq    
10000ee3:	f7 f9                	idiv   ecx
10000ee5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10000eed:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
10000ef1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000ef5:	01 da                	add    edx,ebx
10000ef7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000efb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000eff:	01 c2                	add    edx,eax
10000f01:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10000f05:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10000f09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000f0d:	5b                   	pop    ebx
10000f0e:	5e                   	pop    esi
10000f0f:	e9 b5 fe ff ff       	jmp    10000dc9 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

10000f14 <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
10000f14:	56                   	push   esi
10000f15:	53                   	push   ebx
10000f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000f1a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10000f1e:	b9 02 00 00 00       	mov    ecx,0x2
10000f23:	99                   	cdq    
10000f24:	f7 f9                	idiv   ecx
10000f26:	89 c3                	mov    ebx,eax
10000f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f2c:	99                   	cdq    
10000f2d:	f7 f9                	idiv   ecx
10000f2f:	c7 44 24 24 ff ff ff 00 	mov    DWORD PTR [esp+0x24],0xffffff
10000f37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
10000f3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000f3f:	01 da                	add    edx,ebx
10000f41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000f45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000f49:	01 c2                	add    edx,eax
10000f4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10000f4f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10000f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000f57:	5b                   	pop    ebx
10000f58:	5e                   	pop    esi
10000f59:	e9 6b fe ff ff       	jmp    10000dc9 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

10000f5e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
10000f5e:	55                   	push   ebp
10000f5f:	57                   	push   edi
10000f60:	56                   	push   esi
10000f61:	53                   	push   ebx
10000f62:	83 ec 1c             	sub    esp,0x1c
10000f65:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10000f69:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10000f6d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10000f71:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000f75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000f79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000f7d:	01 ca                	add    edx,ecx
10000f7f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000f83:	01 fe                	add    esi,edi
10000f85:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000f88:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
10000f8b:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
10000f8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000f92:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
10000f95:	8b 13                	mov    edx,DWORD PTR [ebx]
10000f97:	39 ca                	cmp    edx,ecx
10000f99:	7d 02                	jge    10000f9d <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
10000f9b:	89 ca                	mov    edx,ecx
10000f9d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000fa0:	39 f9                	cmp    ecx,edi
10000fa2:	7d 02                	jge    10000fa6 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10000fa4:	89 f9                	mov    ecx,edi
10000fa6:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10000fa9:	8b 2f                	mov    ebp,DWORD PTR [edi]
10000fab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000faf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000fb2:	40                   	inc    eax
10000fb3:	39 f0                	cmp    eax,esi
10000fb5:	7e 02                	jle    10000fb9 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
10000fb7:	89 f0                	mov    eax,esi
10000fb9:	29 c8                	sub    eax,ecx
10000fbb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10000fbf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000fc2:	40                   	inc    eax
10000fc3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10000fc7:	7e 04                	jle    10000fcd <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
10000fc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000fcd:	29 d0                	sub    eax,edx
10000fcf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10000fd3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000fd7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10000fdb:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10000fdf:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10000fe2:	83 c4 1c             	add    esp,0x1c
10000fe5:	5b                   	pop    ebx
10000fe6:	5e                   	pop    esi
10000fe7:	5f                   	pop    edi
10000fe8:	5d                   	pop    ebp
10000fe9:	ff e0                	jmp    eax

10000feb <plot(Context*, int, int, CRect*, unsigned int, Brush*)>:
10000feb:	56                   	push   esi
10000fec:	53                   	push   ebx
10000fed:	50                   	push   eax
10000fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000ff2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000ff6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10000ffa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000ffe:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001002:	85 f6                	test   esi,esi
10001004:	74 13                	je     10001019 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x2e>
10001006:	83 ec 04             	sub    esp,0x4
10001009:	56                   	push   esi
1000100a:	53                   	push   ebx
1000100b:	6a 01                	push   0x1
1000100d:	6a 01                	push   0x1
1000100f:	51                   	push   ecx
10001010:	52                   	push   edx
10001011:	50                   	push   eax
10001012:	e8 fc ff ff ff       	call   10001013 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x28>	10001013: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10001017:	eb 12                	jmp    1000102b <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x40>
10001019:	56                   	push   esi
1000101a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000101e:	53                   	push   ebx
1000101f:	6a 01                	push   0x1
10001021:	6a 01                	push   0x1
10001023:	51                   	push   ecx
10001024:	52                   	push   edx
10001025:	50                   	push   eax
10001026:	e8 fc ff ff ff       	call   10001027 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x3c>	10001027: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
1000102b:	83 c4 20             	add    esp,0x20
1000102e:	58                   	pop    eax
1000102f:	5b                   	pop    ebx
10001030:	5e                   	pop    esi
10001031:	c3                   	ret    

10001032 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)>:
10001032:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001036:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000103a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
1000103f:	74 11                	je     10001052 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)+0x20>
10001041:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001045:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
1000104d:	e9 5a f9 ff ff       	jmp    100009ac <Context::clippedRect(int, int, int, int, CRect*, Brush*)>
10001052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10001056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000105a:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
10001062:	e9 f7 fe ff ff       	jmp    10000f5e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>
10001067:	90                   	nop

10001068 <Context::fillRect(int, int, int, int, Brush*)>:
10001068:	55                   	push   ebp
10001069:	57                   	push   edi
1000106a:	56                   	push   esi
1000106b:	53                   	push   ebx
1000106c:	83 ec 2c             	sub    esp,0x2c
1000106f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001073:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10001077:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
1000107b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000107f:	01 d8                	add    eax,ebx
10001081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001085:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001089:	01 fa                	add    edx,edi
1000108b:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
1000108e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001091:	85 db                	test   ebx,ebx
10001093:	79 02                	jns    10001097 <Context::fillRect(int, int, int, int, Brush*)+0x2f>
10001095:	31 db                	xor    ebx,ebx
10001097:	85 ff                	test   edi,edi
10001099:	79 02                	jns    1000109d <Context::fillRect(int, int, int, int, Brush*)+0x35>
1000109b:	31 ff                	xor    edi,edi
1000109d:	89 e8                	mov    eax,ebp
1000109f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
100010a3:	7e 04                	jle    100010a9 <Context::fillRect(int, int, int, int, Brush*)+0x41>
100010a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100010a9:	29 d8                	sub    eax,ebx
100010ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100010af:	89 c8                	mov    eax,ecx
100010b1:	39 d1                	cmp    ecx,edx
100010b3:	7e 02                	jle    100010b7 <Context::fillRect(int, int, int, int, Brush*)+0x4f>
100010b5:	89 d0                	mov    eax,edx
100010b7:	29 f8                	sub    eax,edi
100010b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100010bd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100010c0:	8b 00                	mov    eax,DWORD PTR [eax]
100010c2:	e8 a9 f7 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100010c7:	85 c0                	test   eax,eax
100010c9:	74 38                	je     10001103 <Context::fillRect(int, int, int, int, Brush*)+0x9b>
100010cb:	31 ed                	xor    ebp,ebp
100010cd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100010d0:	8b 08                	mov    ecx,DWORD PTR [eax]
100010d2:	89 c8                	mov    eax,ecx
100010d4:	e8 97 f7 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100010d9:	39 e8                	cmp    eax,ebp
100010db:	7e 65                	jle    10001142 <Context::fillRect(int, int, int, int, Brush*)+0xda>
100010dd:	89 ea                	mov    edx,ebp
100010df:	89 c8                	mov    eax,ecx
100010e1:	e8 9a f7 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100010e6:	52                   	push   edx
100010e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100010eb:	ff 30                	push   DWORD PTR [eax]
100010ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010f5:	57                   	push   edi
100010f6:	53                   	push   ebx
100010f7:	56                   	push   esi
100010f8:	e8 fc ff ff ff       	call   100010f9 <Context::fillRect(int, int, int, int, Brush*)+0x91>	100010f9: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
100010fd:	45                   	inc    ebp
100010fe:	83 c4 20             	add    esp,0x20
10001101:	eb ca                	jmp    100010cd <Context::fillRect(int, int, int, int, Brush*)+0x65>
10001103:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001107:	75 39                	jne    10001142 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10001109:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10001111:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001119:	49                   	dec    ecx
1000111a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000111e:	8d 45 ff             	lea    eax,[ebp-0x1]
10001121:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001125:	50                   	push   eax
10001126:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000112a:	8d 44 24 18          	lea    eax,[esp+0x18]
1000112e:	50                   	push   eax
1000112f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001133:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001137:	57                   	push   edi
10001138:	53                   	push   ebx
10001139:	56                   	push   esi
1000113a:	e8 fc ff ff ff       	call   1000113b <Context::fillRect(int, int, int, int, Brush*)+0xd3>	1000113b: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
1000113f:	83 c4 20             	add    esp,0x20
10001142:	83 c4 2c             	add    esp,0x2c
10001145:	5b                   	pop    ebx
10001146:	5e                   	pop    esi
10001147:	5f                   	pop    edi
10001148:	5d                   	pop    ebp
10001149:	c3                   	ret    

1000114a <Context::fillRect(int, int, int, int, unsigned int)>:
1000114a:	55                   	push   ebp
1000114b:	57                   	push   edi
1000114c:	56                   	push   esi
1000114d:	53                   	push   ebx
1000114e:	83 ec 2c             	sub    esp,0x2c
10001151:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001155:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10001159:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
1000115d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001161:	01 d8                	add    eax,ebx
10001163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001167:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
1000116b:	01 fa                	add    edx,edi
1000116d:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10001170:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001173:	85 db                	test   ebx,ebx
10001175:	79 02                	jns    10001179 <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
10001177:	31 db                	xor    ebx,ebx
10001179:	85 ff                	test   edi,edi
1000117b:	79 02                	jns    1000117f <Context::fillRect(int, int, int, int, unsigned int)+0x35>
1000117d:	31 ff                	xor    edi,edi
1000117f:	89 e8                	mov    eax,ebp
10001181:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10001185:	7e 04                	jle    1000118b <Context::fillRect(int, int, int, int, unsigned int)+0x41>
10001187:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000118b:	29 d8                	sub    eax,ebx
1000118d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001191:	89 c8                	mov    eax,ecx
10001193:	39 d1                	cmp    ecx,edx
10001195:	7e 02                	jle    10001199 <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
10001197:	89 d0                	mov    eax,edx
10001199:	29 f8                	sub    eax,edi
1000119b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000119f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	e8 c7 f6 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100011a9:	85 c0                	test   eax,eax
100011ab:	74 38                	je     100011e5 <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
100011ad:	31 ed                	xor    ebp,ebp
100011af:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100011b2:	8b 08                	mov    ecx,DWORD PTR [eax]
100011b4:	89 c8                	mov    eax,ecx
100011b6:	e8 b5 f6 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100011bb:	39 e8                	cmp    eax,ebp
100011bd:	7e 65                	jle    10001224 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
100011bf:	89 ea                	mov    edx,ebp
100011c1:	89 c8                	mov    eax,ecx
100011c3:	e8 b8 f6 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100011c8:	52                   	push   edx
100011c9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100011cd:	ff 30                	push   DWORD PTR [eax]
100011cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011d7:	57                   	push   edi
100011d8:	53                   	push   ebx
100011d9:	56                   	push   esi
100011da:	e8 fc ff ff ff       	call   100011db <Context::fillRect(int, int, int, int, unsigned int)+0x91>	100011db: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100011df:	45                   	inc    ebp
100011e0:	83 c4 20             	add    esp,0x20
100011e3:	eb ca                	jmp    100011af <Context::fillRect(int, int, int, int, unsigned int)+0x65>
100011e5:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100011e9:	75 39                	jne    10001224 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
100011eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100011f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100011fb:	49                   	dec    ecx
100011fc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001200:	8d 45 ff             	lea    eax,[ebp-0x1]
10001203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001207:	50                   	push   eax
10001208:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000120c:	8d 44 24 18          	lea    eax,[esp+0x18]
10001210:	50                   	push   eax
10001211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001219:	57                   	push   edi
1000121a:	53                   	push   ebx
1000121b:	56                   	push   esi
1000121c:	e8 fc ff ff ff       	call   1000121d <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	1000121d: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001221:	83 c4 20             	add    esp,0x20
10001224:	83 c4 2c             	add    esp,0x2c
10001227:	5b                   	pop    ebx
10001228:	5e                   	pop    esi
10001229:	5f                   	pop    edi
1000122a:	5d                   	pop    ebp
1000122b:	c3                   	ret    

1000122c <Context::drawHorizontalLine(int, int, int, unsigned int)>:
1000122c:	83 ec 14             	sub    esp,0x14
1000122f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001233:	6a 01                	push   0x1
10001235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000123d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001245:	e8 fc ff ff ff       	call   10001246 <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	10001246: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
1000124a:	83 c4 2c             	add    esp,0x2c
1000124d:	c3                   	ret    

1000124e <Context::drawVerticalLine(int, int, int, unsigned int)>:
1000124e:	83 ec 14             	sub    esp,0x14
10001251:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001259:	6a 01                	push   0x1
1000125b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000125f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001267:	e8 fc ff ff ff       	call   10001268 <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	10001268: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
1000126c:	83 c4 2c             	add    esp,0x2c
1000126f:	c3                   	ret    

10001270 <Context::drawRect(int, int, int, int, unsigned int)>:
10001270:	55                   	push   ebp
10001271:	57                   	push   edi
10001272:	56                   	push   esi
10001273:	53                   	push   ebx
10001274:	83 ec 28             	sub    esp,0x28
10001277:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000127b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000127f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001283:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10001287:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000128b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000128f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
10001293:	57                   	push   edi
10001294:	55                   	push   ebp
10001295:	52                   	push   edx
10001296:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
1000129a:	56                   	push   esi
1000129b:	53                   	push   ebx
1000129c:	e8 fc ff ff ff       	call   1000129d <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	1000129d: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100012a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100012a5:	8d 48 fe             	lea    ecx,[eax-0x2]
100012a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100012ac:	8d 42 01             	lea    eax,[edx+0x1]
100012af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100012b3:	83 c4 14             	add    esp,0x14
100012b6:	57                   	push   edi
100012b7:	51                   	push   ecx
100012b8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100012bc:	50                   	push   eax
100012bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100012c1:	56                   	push   esi
100012c2:	53                   	push   ebx
100012c3:	e8 fc ff ff ff       	call   100012c4 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	100012c4: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
100012c8:	83 c4 14             	add    esp,0x14
100012cb:	57                   	push   edi
100012cc:	55                   	push   ebp
100012cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100012d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100012d5:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
100012d9:	52                   	push   edx
100012da:	56                   	push   esi
100012db:	53                   	push   ebx
100012dc:	e8 fc ff ff ff       	call   100012dd <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	100012dd: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100012e1:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100012e5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
100012e9:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
100012ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100012f1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100012f5:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
100012f9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100012fd:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
10001301:	83 c4 3c             	add    esp,0x3c
10001304:	5b                   	pop    ebx
10001305:	5e                   	pop    esi
10001306:	5f                   	pop    edi
10001307:	5d                   	pop    ebp
10001308:	e9 41 ff ff ff       	jmp    1000124e <Context::drawVerticalLine(int, int, int, unsigned int)>
1000130d:	90                   	nop

1000130e <Context::ellipse(bool, int, int, int, int, unsigned int)>:
1000130e:	55                   	push   ebp
1000130f:	57                   	push   edi
10001310:	56                   	push   esi
10001311:	53                   	push   ebx
10001312:	83 ec 1c             	sub    esp,0x1c
10001315:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10001319:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
1000131d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10001321:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10001325:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
10001329:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
1000132d:	01 dd                	add    ebp,ebx
1000132f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001333:	01 fa                	add    edx,edi
10001335:	85 db                	test   ebx,ebx
10001337:	79 02                	jns    1000133b <Context::ellipse(bool, int, int, int, int, unsigned int)+0x2d>
10001339:	31 db                	xor    ebx,ebx
1000133b:	85 ff                	test   edi,edi
1000133d:	79 02                	jns    10001341 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x33>
1000133f:	31 ff                	xor    edi,edi
10001341:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001344:	39 e8                	cmp    eax,ebp
10001346:	7e 02                	jle    1000134a <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3c>
10001348:	89 e8                	mov    eax,ebp
1000134a:	29 d8                	sub    eax,ebx
1000134c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001350:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10001353:	39 d0                	cmp    eax,edx
10001355:	7e 02                	jle    10001359 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4b>
10001357:	89 d0                	mov    eax,edx
10001359:	29 f8                	sub    eax,edi
1000135b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000135f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001362:	8b 00                	mov    eax,DWORD PTR [eax]
10001364:	e8 07 f5 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001369:	85 c0                	test   eax,eax
1000136b:	74 44                	je     100013b1 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa3>
1000136d:	31 ed                	xor    ebp,ebp
1000136f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001374:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001378:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000137b:	8b 08                	mov    ecx,DWORD PTR [eax]
1000137d:	89 c8                	mov    eax,ecx
1000137f:	e8 ec f4 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001384:	39 e8                	cmp    eax,ebp
10001386:	7e 4c                	jle    100013d4 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
10001388:	89 ea                	mov    edx,ebp
1000138a:	89 c8                	mov    eax,ecx
1000138c:	e8 ef f4 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001391:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001395:	ff 30                	push   DWORD PTR [eax]
10001397:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000139b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000139f:	57                   	push   edi
100013a0:	53                   	push   ebx
100013a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100013a5:	56                   	push   esi
100013a6:	e8 fc ff ff ff       	call   100013a7 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x99>	100013a7: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100013ab:	45                   	inc    ebp
100013ac:	83 c4 20             	add    esp,0x20
100013af:	eb c7                	jmp    10001378 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x6a>
100013b1:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100013b5:	75 1d                	jne    100013d4 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
100013b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
100013bb:	6a 00                	push   0x0
100013bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100013c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100013c5:	57                   	push   edi
100013c6:	53                   	push   ebx
100013c7:	0f b6 c9             	movzx  ecx,cl
100013ca:	51                   	push   ecx
100013cb:	56                   	push   esi
100013cc:	e8 fc ff ff ff       	call   100013cd <Context::ellipse(bool, int, int, int, int, unsigned int)+0xbf>	100013cd: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100013d1:	83 c4 20             	add    esp,0x20
100013d4:	83 c4 1c             	add    esp,0x1c
100013d7:	5b                   	pop    ebx
100013d8:	5e                   	pop    esi
100013d9:	5f                   	pop    edi
100013da:	5d                   	pop    ebp
100013db:	c3                   	ret    

100013dc <Context::ellipse(bool, int, int, int, int, Brush*)>:
100013dc:	55                   	push   ebp
100013dd:	57                   	push   edi
100013de:	56                   	push   esi
100013df:	53                   	push   ebx
100013e0:	83 ec 1c             	sub    esp,0x1c
100013e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100013e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100013eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100013ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100013f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100013f7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100013fb:	01 dd                	add    ebp,ebx
100013fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001401:	01 fa                	add    edx,edi
10001403:	85 db                	test   ebx,ebx
10001405:	79 02                	jns    10001409 <Context::ellipse(bool, int, int, int, int, Brush*)+0x2d>
10001407:	31 db                	xor    ebx,ebx
10001409:	85 ff                	test   edi,edi
1000140b:	79 02                	jns    1000140f <Context::ellipse(bool, int, int, int, int, Brush*)+0x33>
1000140d:	31 ff                	xor    edi,edi
1000140f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001412:	39 e8                	cmp    eax,ebp
10001414:	7e 02                	jle    10001418 <Context::ellipse(bool, int, int, int, int, Brush*)+0x3c>
10001416:	89 e8                	mov    eax,ebp
10001418:	29 d8                	sub    eax,ebx
1000141a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000141e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10001421:	39 d0                	cmp    eax,edx
10001423:	7e 02                	jle    10001427 <Context::ellipse(bool, int, int, int, int, Brush*)+0x4b>
10001425:	89 d0                	mov    eax,edx
10001427:	29 f8                	sub    eax,edi
10001429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000142d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001430:	8b 00                	mov    eax,DWORD PTR [eax]
10001432:	e8 39 f4 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001437:	85 c0                	test   eax,eax
10001439:	74 44                	je     1000147f <Context::ellipse(bool, int, int, int, int, Brush*)+0xa3>
1000143b:	31 ed                	xor    ebp,ebp
1000143d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001442:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001446:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001449:	8b 08                	mov    ecx,DWORD PTR [eax]
1000144b:	89 c8                	mov    eax,ecx
1000144d:	e8 1e f4 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001452:	39 e8                	cmp    eax,ebp
10001454:	7e 4c                	jle    100014a2 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc6>
10001456:	89 ea                	mov    edx,ebp
10001458:	89 c8                	mov    eax,ecx
1000145a:	e8 21 f4 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000145f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001463:	ff 30                	push   DWORD PTR [eax]
10001465:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001469:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000146d:	57                   	push   edi
1000146e:	53                   	push   ebx
1000146f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001473:	56                   	push   esi
10001474:	e8 fc ff ff ff       	call   10001475 <Context::ellipse(bool, int, int, int, int, Brush*)+0x99>	10001475: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
10001479:	45                   	inc    ebp
1000147a:	83 c4 20             	add    esp,0x20
1000147d:	eb c7                	jmp    10001446 <Context::ellipse(bool, int, int, int, int, Brush*)+0x6a>
1000147f:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001483:	75 1d                	jne    100014a2 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc6>
10001485:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001489:	6a 00                	push   0x0
1000148b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000148f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001493:	57                   	push   edi
10001494:	53                   	push   ebx
10001495:	0f b6 c9             	movzx  ecx,cl
10001498:	51                   	push   ecx
10001499:	56                   	push   esi
1000149a:	e8 fc ff ff ff       	call   1000149b <Context::ellipse(bool, int, int, int, int, Brush*)+0xbf>	1000149b: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
1000149f:	83 c4 20             	add    esp,0x20
100014a2:	83 c4 1c             	add    esp,0x1c
100014a5:	5b                   	pop    ebx
100014a6:	5e                   	pop    esi
100014a7:	5f                   	pop    edi
100014a8:	5d                   	pop    ebp
100014a9:	c3                   	ret    

100014aa <CRect::split(CRect*)>:
100014aa:	55                   	push   ebp
100014ab:	57                   	push   edi
100014ac:	56                   	push   esi
100014ad:	53                   	push   ebx
100014ae:	83 ec 28             	sub    esp,0x28
100014b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100014b5:	6a 08                	push   0x8
100014b7:	e8 fc ff ff ff       	call   100014b8 <CRect::split(CRect*)+0xe>	100014b8: R_386_PC32	malloc
100014bc:	89 c3                	mov    ebx,eax
100014be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100014c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100014cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
100014cf:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
100014d2:	8b 3a                	mov    edi,DWORD PTR [edx]
100014d4:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
100014d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100014db:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100014de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100014e2:	8b 16                	mov    edx,DWORD PTR [esi]
100014e4:	83 c4 10             	add    esp,0x10
100014e7:	39 d7                	cmp    edi,edx
100014e9:	7f 36                	jg     10001521 <CRect::split(CRect*)+0x77>
100014eb:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100014ef:	7c 30                	jl     10001521 <CRect::split(CRect*)+0x77>
100014f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100014f5:	83 ec 0c             	sub    esp,0xc
100014f8:	6a 10                	push   0x10
100014fa:	e8 fc ff ff ff       	call   100014fb <CRect::split(CRect*)+0x51>	100014fb: R_386_PC32	malloc
100014ff:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10001502:	89 38                	mov    DWORD PTR [eax],edi
10001504:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001508:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
1000150b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000150f:	4a                   	dec    edx
10001510:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10001513:	59                   	pop    ecx
10001514:	5f                   	pop    edi
10001515:	50                   	push   eax
10001516:	53                   	push   ebx
10001517:	e8 fc ff ff ff       	call   10001518 <CRect::split(CRect*)+0x6e>	10001518: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000151c:	8b 3e                	mov    edi,DWORD PTR [esi]
1000151e:	83 c4 10             	add    esp,0x10
10001521:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001524:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10001528:	7c 35                	jl     1000155f <CRect::split(CRect*)+0xb5>
1000152a:	39 d5                	cmp    ebp,edx
1000152c:	7f 31                	jg     1000155f <CRect::split(CRect*)+0xb5>
1000152e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001532:	83 ec 0c             	sub    esp,0xc
10001535:	6a 10                	push   0x10
10001537:	e8 fc ff ff ff       	call   10001538 <CRect::split(CRect*)+0x8e>	10001538: R_386_PC32	malloc
1000153c:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000153f:	89 38                	mov    DWORD PTR [eax],edi
10001541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001545:	4a                   	dec    edx
10001546:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10001549:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000154d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001550:	5d                   	pop    ebp
10001551:	5a                   	pop    edx
10001552:	50                   	push   eax
10001553:	53                   	push   ebx
10001554:	e8 fc ff ff ff       	call   10001555 <CRect::split(CRect*)+0xab>	10001555: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001559:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
1000155c:	83 c4 10             	add    esp,0x10
1000155f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001562:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10001566:	7c 3d                	jl     100015a5 <CRect::split(CRect*)+0xfb>
10001568:	39 fa                	cmp    edx,edi
1000156a:	7c 39                	jl     100015a5 <CRect::split(CRect*)+0xfb>
1000156c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001570:	83 ec 0c             	sub    esp,0xc
10001573:	6a 10                	push   0x10
10001575:	e8 fc ff ff ff       	call   10001576 <CRect::split(CRect*)+0xcc>	10001576: R_386_PC32	malloc
1000157a:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000157d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001581:	42                   	inc    edx
10001582:	89 10                	mov    DWORD PTR [eax],edx
10001584:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001588:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
1000158b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000158f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001592:	5a                   	pop    edx
10001593:	59                   	pop    ecx
10001594:	50                   	push   eax
10001595:	53                   	push   ebx
10001596:	e8 fc ff ff ff       	call   10001597 <CRect::split(CRect*)+0xed>	10001597: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000159b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000159e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100015a2:	83 c4 10             	add    esp,0x10
100015a5:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
100015a8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100015ac:	7c 2e                	jl     100015dc <CRect::split(CRect*)+0x132>
100015ae:	39 ee                	cmp    esi,ebp
100015b0:	7c 2a                	jl     100015dc <CRect::split(CRect*)+0x132>
100015b2:	83 ec 0c             	sub    esp,0xc
100015b5:	6a 10                	push   0x10
100015b7:	e8 fc ff ff ff       	call   100015b8 <CRect::split(CRect*)+0x10e>	100015b8: R_386_PC32	malloc
100015bc:	46                   	inc    esi
100015bd:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
100015c0:	89 38                	mov    DWORD PTR [eax],edi
100015c2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100015c6:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
100015c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100015cd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100015d0:	5a                   	pop    edx
100015d1:	59                   	pop    ecx
100015d2:	50                   	push   eax
100015d3:	53                   	push   ebx
100015d4:	e8 fc ff ff ff       	call   100015d5 <CRect::split(CRect*)+0x12b>	100015d5: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100015d9:	83 c4 10             	add    esp,0x10
100015dc:	89 d8                	mov    eax,ebx
100015de:	83 c4 1c             	add    esp,0x1c
100015e1:	5b                   	pop    ebx
100015e2:	5e                   	pop    esi
100015e3:	5f                   	pop    edi
100015e4:	5d                   	pop    ebp
100015e5:	c3                   	ret    

100015e6 <Context::clearClipRects()>:
100015e6:	53                   	push   ebx
100015e7:	83 ec 08             	sub    esp,0x8
100015ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100015ee:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100015f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100015f5:	8b 08                	mov    ecx,DWORD PTR [eax]
100015f7:	89 c8                	mov    eax,ecx
100015f9:	e8 72 f2 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100015fe:	85 c0                	test   eax,eax
10001600:	74 19                	je     1000161b <Context::clearClipRects()+0x35>
10001602:	50                   	push   eax
10001603:	50                   	push   eax
10001604:	6a 10                	push   0x10
10001606:	ff 31                	push   DWORD PTR [ecx]
10001608:	e8 fc ff ff ff       	call   10001609 <Context::clearClipRects()+0x23>	10001609: R_386_PC32	operator delete(void*, unsigned long)
1000160d:	58                   	pop    eax
1000160e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
10001611:	e8 fc ff ff ff       	call   10001612 <Context::clearClipRects()+0x2c>	10001612: R_386_PC32	List<CRect*>::deleteHead()
10001616:	83 c4 10             	add    esp,0x10
10001619:	eb d7                	jmp    100015f2 <Context::clearClipRects()+0xc>
1000161b:	83 c4 08             	add    esp,0x8
1000161e:	5b                   	pop    ebx
1000161f:	c3                   	ret    

10001620 <Context::subClipRect(CRect*)>:
10001620:	55                   	push   ebp
10001621:	57                   	push   edi
10001622:	56                   	push   esi
10001623:	53                   	push   ebx
10001624:	83 ec 1c             	sub    esp,0x1c
10001627:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000162b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000162f:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
10001633:	31 db                	xor    ebx,ebx
10001635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001639:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
1000163c:	8b 29                	mov    ebp,DWORD PTR [ecx]
1000163e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001642:	89 e8                	mov    eax,ebp
10001644:	e8 27 f2 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001649:	39 d8                	cmp    eax,ebx
1000164b:	0f 8e d4 00 00 00    	jle    10001725 <Context::subClipRect(CRect*)+0x105>
10001651:	89 da                	mov    edx,ebx
10001653:	89 e8                	mov    eax,ebp
10001655:	e8 26 f2 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000165a:	8b 38                	mov    edi,DWORD PTR [eax]
1000165c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
1000165f:	39 17                	cmp    DWORD PTR [edi],edx
10001661:	7f 1b                	jg     1000167e <Context::subClipRect(CRect*)+0x5e>
10001663:	8b 16                	mov    edx,DWORD PTR [esi]
10001665:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
10001668:	7c 14                	jl     1000167e <Context::subClipRect(CRect*)+0x5e>
1000166a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
1000166d:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
10001670:	7f 0c                	jg     1000167e <Context::subClipRect(CRect*)+0x5e>
10001672:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001675:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
10001678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000167c:	7d 03                	jge    10001681 <Context::subClipRect(CRect*)+0x61>
1000167e:	43                   	inc    ebx
1000167f:	eb b4                	jmp    10001635 <Context::subClipRect(CRect*)+0x15>
10001681:	39 e8                	cmp    eax,ebp
10001683:	75 07                	jne    1000168c <Context::subClipRect(CRect*)+0x6c>
10001685:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10001688:	89 19                	mov    DWORD PTR [ecx],ebx
1000168a:	eb 19                	jmp    100016a5 <Context::subClipRect(CRect*)+0x85>
1000168c:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
1000168f:	75 08                	jne    10001699 <Context::subClipRect(CRect*)+0x79>
10001691:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
10001694:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10001697:	eb 0c                	jmp    100016a5 <Context::subClipRect(CRect*)+0x85>
10001699:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
1000169c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
1000169f:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
100016a2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
100016a5:	8b 19                	mov    ebx,DWORD PTR [ecx]
100016a7:	85 db                	test   ebx,ebx
100016a9:	74 0a                	je     100016b5 <Context::subClipRect(CRect*)+0x95>
100016ab:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100016b2:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100016b5:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100016bc:	55                   	push   ebp
100016bd:	55                   	push   ebp
100016be:	6a 0c                	push   0xc
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <Context::subClipRect(CRect*)+0xa2>	100016c2: R_386_PC32	operator delete(void*, unsigned long)
100016c6:	58                   	pop    eax
100016c7:	5a                   	pop    edx
100016c8:	56                   	push   esi
100016c9:	57                   	push   edi
100016ca:	e8 fc ff ff ff       	call   100016cb <Context::subClipRect(CRect*)+0xab>	100016cb: R_386_PC32	CRect::split(CRect*)
100016cf:	89 c5                	mov    ebp,eax
100016d1:	59                   	pop    ecx
100016d2:	5b                   	pop    ebx
100016d3:	6a 10                	push   0x10
100016d5:	57                   	push   edi
100016d6:	e8 fc ff ff ff       	call   100016d7 <Context::subClipRect(CRect*)+0xb7>	100016d7: R_386_PC32	operator delete(void*, unsigned long)
100016db:	83 c4 10             	add    esp,0x10
100016de:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100016e1:	89 c8                	mov    eax,ecx
100016e3:	e8 88 f1 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100016e8:	89 c3                	mov    ebx,eax
100016ea:	85 c0                	test   eax,eax
100016ec:	74 1c                	je     1000170a <Context::subClipRect(CRect*)+0xea>
100016ee:	8b 19                	mov    ebx,DWORD PTR [ecx]
100016f0:	83 ec 0c             	sub    esp,0xc
100016f3:	55                   	push   ebp
100016f4:	e8 fc ff ff ff       	call   100016f5 <Context::subClipRect(CRect*)+0xd5>	100016f5: R_386_PC32	List<CRect*>::deleteHead()
100016f9:	59                   	pop    ecx
100016fa:	5f                   	pop    edi
100016fb:	53                   	push   ebx
100016fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001700:	ff 70 18             	push   DWORD PTR [eax+0x18]
10001703:	e8 fc ff ff ff       	call   10001704 <Context::subClipRect(CRect*)+0xe4>	10001704: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001708:	eb d1                	jmp    100016db <Context::subClipRect(CRect*)+0xbb>
1000170a:	83 ec 0c             	sub    esp,0xc
1000170d:	55                   	push   ebp
1000170e:	e8 fc ff ff ff       	call   1000170f <Context::subClipRect(CRect*)+0xef>	1000170f: R_386_PC32	List<CRect*>::~List()
10001713:	58                   	pop    eax
10001714:	5a                   	pop    edx
10001715:	6a 08                	push   0x8
10001717:	55                   	push   ebp
10001718:	e8 fc ff ff ff       	call   10001719 <Context::subClipRect(CRect*)+0xf9>	10001719: R_386_PC32	operator delete(void*, unsigned long)
1000171d:	83 c4 10             	add    esp,0x10
10001720:	e9 10 ff ff ff       	jmp    10001635 <Context::subClipRect(CRect*)+0x15>
10001725:	83 c4 1c             	add    esp,0x1c
10001728:	5b                   	pop    ebx
10001729:	5e                   	pop    esi
1000172a:	5f                   	pop    edi
1000172b:	5d                   	pop    ebp
1000172c:	c3                   	ret    
1000172d:	90                   	nop

1000172e <Context::addClipRect(CRect*)>:
1000172e:	56                   	push   esi
1000172f:	53                   	push   ebx
10001730:	83 ec 0c             	sub    esp,0xc
10001733:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001737:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000173b:	56                   	push   esi
1000173c:	53                   	push   ebx
1000173d:	e8 fc ff ff ff       	call   1000173e <Context::addClipRect(CRect*)+0x10>	1000173e: R_386_PC32	Context::subClipRect(CRect*)
10001742:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001746:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10001749:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000174d:	83 c4 14             	add    esp,0x14
10001750:	5b                   	pop    ebx
10001751:	5e                   	pop    esi
10001752:	e9 fc ff ff ff       	jmp    10001753 <Context::addClipRect(CRect*)+0x25>	10001753: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001757:	90                   	nop

10001758 <Context::intersectClipRect(CRect*)>:
10001758:	55                   	push   ebp
10001759:	57                   	push   edi
1000175a:	56                   	push   esi
1000175b:	53                   	push   ebx
1000175c:	83 ec 28             	sub    esp,0x28
1000175f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001763:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001767:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
1000176b:	6a 08                	push   0x8
1000176d:	e8 fc ff ff ff       	call   1000176e <Context::intersectClipRect(CRect*)+0x16>	1000176e: R_386_PC32	malloc
10001772:	89 c7                	mov    edi,eax
10001774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000177b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001781:	83 c4 10             	add    esp,0x10
10001784:	31 db                	xor    ebx,ebx
10001786:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001789:	8b 08                	mov    ecx,DWORD PTR [eax]
1000178b:	89 c8                	mov    eax,ecx
1000178d:	e8 de f0 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
10001792:	39 d8                	cmp    eax,ebx
10001794:	7e 59                	jle    100017ef <Context::intersectClipRect(CRect*)+0x97>
10001796:	89 da                	mov    edx,ebx
10001798:	89 c8                	mov    eax,ecx
1000179a:	e8 e1 f0 ff ff       	call   10000880 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000179f:	51                   	push   ecx
100017a0:	51                   	push   ecx
100017a1:	55                   	push   ebp
100017a2:	ff 30                	push   DWORD PTR [eax]
100017a4:	e8 fc ff ff ff       	call   100017a5 <Context::intersectClipRect(CRect*)+0x4d>	100017a5: R_386_PC32	CRect::intersect(CRect*)
100017a9:	83 c4 10             	add    esp,0x10
100017ac:	85 c0                	test   eax,eax
100017ae:	74 0c                	je     100017bc <Context::intersectClipRect(CRect*)+0x64>
100017b0:	52                   	push   edx
100017b1:	52                   	push   edx
100017b2:	50                   	push   eax
100017b3:	57                   	push   edi
100017b4:	e8 fc ff ff ff       	call   100017b5 <Context::intersectClipRect(CRect*)+0x5d>	100017b5: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100017b9:	83 c4 10             	add    esp,0x10
100017bc:	43                   	inc    ebx
100017bd:	eb c7                	jmp    10001786 <Context::intersectClipRect(CRect*)+0x2e>
100017bf:	85 c0                	test   eax,eax
100017c1:	74 43                	je     10001806 <Context::intersectClipRect(CRect*)+0xae>
100017c3:	85 c9                	test   ecx,ecx
100017c5:	74 f8                	je     100017bf <Context::intersectClipRect(CRect*)+0x67>
100017c7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100017ca:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
100017cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100017d1:	51                   	push   ecx
100017d2:	51                   	push   ecx
100017d3:	6a 0c                	push   0xc
100017d5:	52                   	push   edx
100017d6:	e8 fc ff ff ff       	call   100017d7 <Context::intersectClipRect(CRect*)+0x7f>	100017d7: R_386_PC32	operator delete(void*, unsigned long)
100017db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100017df:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100017e2:	83 c4 10             	add    esp,0x10
100017e5:	85 c0                	test   eax,eax
100017e7:	75 14                	jne    100017fd <Context::intersectClipRect(CRect*)+0xa5>
100017e9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100017ef:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
100017f2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100017f4:	89 c8                	mov    eax,ecx
100017f6:	e8 75 f0 ff ff       	call   10000870 <List<CRect*>::length() [clone .isra.0]>
100017fb:	eb c2                	jmp    100017bf <Context::intersectClipRect(CRect*)+0x67>
100017fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001804:	eb e9                	jmp    100017ef <Context::intersectClipRect(CRect*)+0x97>
10001806:	83 ec 0c             	sub    esp,0xc
10001809:	53                   	push   ebx
1000180a:	e8 fc ff ff ff       	call   1000180b <Context::intersectClipRect(CRect*)+0xb3>	1000180b: R_386_PC32	List<CRect*>::~List()
1000180f:	58                   	pop    eax
10001810:	5a                   	pop    edx
10001811:	6a 08                	push   0x8
10001813:	53                   	push   ebx
10001814:	e8 fc ff ff ff       	call   10001815 <Context::intersectClipRect(CRect*)+0xbd>	10001815: R_386_PC32	operator delete(void*, unsigned long)
10001819:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
1000181c:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
10001824:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10001828:	83 c4 2c             	add    esp,0x2c
1000182b:	5b                   	pop    ebx
1000182c:	5e                   	pop    esi
1000182d:	5f                   	pop    edi
1000182e:	5d                   	pop    ebp
1000182f:	e9 fc ff ff ff       	jmp    10001830 <Context::intersectClipRect(CRect*)+0xd8>	10001830: R_386_PC32	operator delete(void*, unsigned long)

10001834 <startMouse()>:
10001834:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001836: R_386_32	guiMouseHandler
	1000183a: R_386_32	handleMouse
1000183e:	c3                   	ret    

1000183f <setupCursor()>:
1000183f:	55                   	push   ebp
10001840:	57                   	push   edi
10001841:	56                   	push   esi
10001842:	53                   	push   ebx
10001843:	83 ec 38             	sub    esp,0x38
10001846:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	10001848: R_386_32	krnlMouseX
10001850:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	10001852: R_386_32	krnlMouseY
1000185a:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	1000185c: R_386_32	rootRgn
10001864:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	10001866: R_386_32	rootRgn
1000186e:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	10001870: R_386_32	rootRgn
10001878:	68 14 01 00 00       	push   0x114
1000187d:	e8 fc ff ff ff       	call   1000187e <setupCursor()+0x3f>	1000187e: R_386_PC32	malloc
10001882:	89 c5                	mov    ebp,eax
10001884:	83 c4 0c             	add    esp,0xc
10001887:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001889: R_386_32	kernelProcess
1000188d:	68 58 2d 00 10       	push   0x10002d58	1000188e: R_386_32	.text
10001892:	50                   	push   eax
10001893:	e8 fc ff ff ff       	call   10001894 <setupCursor()+0x55>	10001894: R_386_PC32	File::File(char const*, Process*)
10001898:	58                   	pop    eax
10001899:	5a                   	pop    edx
1000189a:	6a 01                	push   0x1
1000189c:	55                   	push   ebp
1000189d:	e8 fc ff ff ff       	call   1000189e <setupCursor()+0x5f>	1000189e: R_386_PC32	File::open(FileOpenMode)
100018a2:	83 c4 10             	add    esp,0x10
100018a5:	85 c0                	test   eax,eax
100018a7:	74 0a                	je     100018b3 <setupCursor()+0x74>
100018a9:	83 ec 0c             	sub    esp,0xc
100018ac:	68 77 2d 00 10       	push   0x10002d77	100018ad: R_386_32	.text
100018b1:	eb 4c                	jmp    100018ff <setupCursor()+0xc0>
100018b3:	53                   	push   ebx
100018b4:	8d 44 24 17          	lea    eax,[esp+0x17]
100018b8:	50                   	push   eax
100018b9:	8d 44 24 20          	lea    eax,[esp+0x20]
100018bd:	50                   	push   eax
100018be:	55                   	push   ebp
100018bf:	e8 fc ff ff ff       	call   100018c0 <setupCursor()+0x81>	100018c0: R_386_PC32	File::stat(unsigned long long*, bool*)
100018c4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100018c8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100018cc:	89 34 24             	mov    DWORD PTR [esp],esi
100018cf:	e8 fc ff ff ff       	call   100018d0 <setupCursor()+0x91>	100018d0: R_386_PC32	malloc
100018d4:	89 c3                	mov    ebx,eax
100018d6:	58                   	pop    eax
100018d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100018da:	8d 54 24 20          	lea    edx,[esp+0x20]
100018de:	52                   	push   edx
100018df:	53                   	push   ebx
100018e0:	57                   	push   edi
100018e1:	56                   	push   esi
100018e2:	55                   	push   ebp
100018e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100018e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100018ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100018ee:	83 c4 20             	add    esp,0x20
100018f1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
100018f5:	74 12                	je     10001909 <setupCursor()+0xca>
100018f7:	83 ec 0c             	sub    esp,0xc
100018fa:	68 8b 2d 00 10       	push   0x10002d8b	100018fb: R_386_32	.text
100018ff:	e8 fc ff ff ff       	call   10001900 <setupCursor()+0xc1>	10001900: R_386_PC32	Dbg::kprintf(char const*, ...)
10001904:	e9 3d 01 00 00       	jmp    10001a46 <setupCursor()+0x207>
10001909:	6a 00                	push   0x0
1000190b:	68 04 01 00 00       	push   0x104
10001910:	52                   	push   edx
10001911:	50                   	push   eax
10001912:	e8 fc ff ff ff       	call   10001913 <setupCursor()+0xd4>	10001913: R_386_PC32	__udivdi3
10001917:	5a                   	pop    edx
10001918:	59                   	pop    ecx
10001919:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000191d:	50                   	push   eax
1000191e:	68 9f 2d 00 10       	push   0x10002d9f	1000191f: R_386_32	.text
10001923:	e8 fc ff ff ff       	call   10001924 <setupCursor()+0xe5>	10001924: R_386_PC32	Dbg::kprintf(char const*, ...)
10001928:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000192b:	e8 fc ff ff ff       	call   1000192c <setupCursor()+0xed>	1000192c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001934:	8d 04 83             	lea    eax,[ebx+eax*4]
10001937:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000193b:	83 c4 10             	add    esp,0x10
1000193e:	31 ed                	xor    ebp,ebp
10001940:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10001944:	0f 8d f3 00 00 00    	jge    10001a3d <setupCursor()+0x1fe>
1000194a:	8d 34 ab             	lea    esi,[ebx+ebp*4]
1000194d:	50                   	push   eax
1000194e:	6a 04                	push   0x4
10001950:	68 ac 2d 00 10       	push   0x10002dac	10001951: R_386_32	.text
10001955:	56                   	push   esi
10001956:	e8 fc ff ff ff       	call   10001957 <setupCursor()+0x118>	10001957: R_386_PC32	memcmp
1000195b:	83 c4 10             	add    esp,0x10
1000195e:	85 c0                	test   eax,eax
10001960:	0f 84 b8 00 00 00    	je     10001a1e <setupCursor()+0x1df>
10001966:	50                   	push   eax
10001967:	6a 04                	push   0x4
10001969:	68 b1 2d 00 10       	push   0x10002db1	1000196a: R_386_32	.text
1000196e:	56                   	push   esi
1000196f:	e8 fc ff ff ff       	call   10001970 <setupCursor()+0x131>	10001970: R_386_PC32	memcmp
10001974:	83 c4 10             	add    esp,0x10
10001977:	85 c0                	test   eax,eax
10001979:	74 7b                	je     100019f6 <setupCursor()+0x1b7>
1000197b:	50                   	push   eax
1000197c:	6a 04                	push   0x4
1000197e:	68 b6 2d 00 10       	push   0x10002db6	1000197f: R_386_32	.text
10001983:	56                   	push   esi
10001984:	e8 fc ff ff ff       	call   10001985 <setupCursor()+0x146>	10001985: R_386_PC32	memcmp
10001989:	83 c4 10             	add    esp,0x10
1000198c:	85 c0                	test   eax,eax
1000198e:	74 6d                	je     100019fd <setupCursor()+0x1be>
10001990:	57                   	push   edi
10001991:	6a 04                	push   0x4
10001993:	68 bb 2d 00 10       	push   0x10002dbb	10001994: R_386_32	.text
10001998:	56                   	push   esi
10001999:	e8 fc ff ff ff       	call   1000199a <setupCursor()+0x15b>	1000199a: R_386_PC32	memcmp
1000199e:	83 c4 10             	add    esp,0x10
100019a1:	85 c0                	test   eax,eax
100019a3:	74 5f                	je     10001a04 <setupCursor()+0x1c5>
100019a5:	51                   	push   ecx
100019a6:	6a 04                	push   0x4
100019a8:	68 c0 2d 00 10       	push   0x10002dc0	100019a9: R_386_32	.text
100019ad:	56                   	push   esi
100019ae:	e8 fc ff ff ff       	call   100019af <setupCursor()+0x170>	100019af: R_386_PC32	memcmp
100019b3:	83 c4 10             	add    esp,0x10
100019b6:	85 c0                	test   eax,eax
100019b8:	74 51                	je     10001a0b <setupCursor()+0x1cc>
100019ba:	52                   	push   edx
100019bb:	6a 04                	push   0x4
100019bd:	68 c5 2d 00 10       	push   0x10002dc5	100019be: R_386_32	.text
100019c2:	56                   	push   esi
100019c3:	e8 fc ff ff ff       	call   100019c4 <setupCursor()+0x185>	100019c4: R_386_PC32	memcmp
100019c8:	83 c4 10             	add    esp,0x10
100019cb:	85 c0                	test   eax,eax
100019cd:	74 43                	je     10001a12 <setupCursor()+0x1d3>
100019cf:	50                   	push   eax
100019d0:	6a 04                	push   0x4
100019d2:	68 ca 2d 00 10       	push   0x10002dca	100019d3: R_386_32	.text
100019d7:	56                   	push   esi
100019d8:	e8 fc ff ff ff       	call   100019d9 <setupCursor()+0x19a>	100019d9: R_386_PC32	memcmp
100019dd:	83 c4 10             	add    esp,0x10
100019e0:	85 c0                	test   eax,eax
100019e2:	74 35                	je     10001a19 <setupCursor()+0x1da>
100019e4:	83 ec 0c             	sub    esp,0xc
100019e7:	68 cf 2d 00 10       	push   0x10002dcf	100019e8: R_386_32	.text
100019ec:	e8 fc ff ff ff       	call   100019ed <setupCursor()+0x1ae>	100019ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100019f1:	83 c4 10             	add    esp,0x10
100019f4:	eb 47                	jmp    10001a3d <setupCursor()+0x1fe>
100019f6:	b8 00 02 00 00       	mov    eax,0x200
100019fb:	eb 21                	jmp    10001a1e <setupCursor()+0x1df>
100019fd:	b8 00 03 00 00       	mov    eax,0x300
10001a02:	eb 1a                	jmp    10001a1e <setupCursor()+0x1df>
10001a04:	b8 00 01 00 00       	mov    eax,0x100
10001a09:	eb 13                	jmp    10001a1e <setupCursor()+0x1df>
10001a0b:	b8 00 04 00 00       	mov    eax,0x400
10001a10:	eb 0c                	jmp    10001a1e <setupCursor()+0x1df>
10001a12:	b8 00 05 00 00       	mov    eax,0x500
10001a17:	eb 05                	jmp    10001a1e <setupCursor()+0x1df>
10001a19:	b8 00 06 00 00       	mov    eax,0x600
10001a1e:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10001a20: R_386_32	mouse_data
10001a24:	b9 00 01 00 00       	mov    ecx,0x100
10001a29:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10001a2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001a2f:	45                   	inc    ebp
10001a30:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10001a38:	e9 03 ff ff ff       	jmp    10001940 <setupCursor()+0x101>
10001a3d:	83 ec 0c             	sub    esp,0xc
10001a40:	53                   	push   ebx
10001a41:	e8 fc ff ff ff       	call   10001a42 <setupCursor()+0x203>	10001a42: R_386_PC32	free
10001a46:	83 c4 10             	add    esp,0x10
10001a49:	83 c4 2c             	add    esp,0x2c
10001a4c:	5b                   	pop    ebx
10001a4d:	5e                   	pop    esi
10001a4e:	5f                   	pop    edi
10001a4f:	5d                   	pop    ebp
10001a50:	c3                   	ret    

10001a51 <processMouse(int, int, int)>:
10001a51:	55                   	push   ebp
10001a52:	57                   	push   edi
10001a53:	56                   	push   esi
10001a54:	53                   	push   ebx
10001a55:	83 ec 0c             	sub    esp,0xc
10001a58:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10001a5c:	e8 fc ff ff ff       	call   10001a5d <processMouse(int, int, int)+0xc>	10001a5d: R_386_PC32	Krnl::userIOReceived()
10001a61:	83 ec 0c             	sub    esp,0xc
10001a64:	6a 08                	push   0x8
10001a66:	e8 fc ff ff ff       	call   10001a67 <processMouse(int, int, int)+0x16>	10001a67: R_386_PC32	malloc
10001a6b:	89 c6                	mov    esi,eax
10001a6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001a74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001a7a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001a81:	e8 fc ff ff ff       	call   10001a82 <processMouse(int, int, int)+0x31>	10001a82: R_386_PC32	malloc
10001a86:	89 c3                	mov    ebx,eax
10001a88:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	10001a8a: R_386_32	rootRgn
10001a8e:	a1 08 00 00 00       	mov    eax,ds:0x8	10001a8f: R_386_32	rootRgn
10001a93:	8d 69 1f             	lea    ebp,[ecx+0x1f]
10001a96:	89 2c 24             	mov    DWORD PTR [esp],ebp
10001a99:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001a9c:	55                   	push   ebp
10001a9d:	51                   	push   ecx
10001a9e:	50                   	push   eax
10001a9f:	53                   	push   ebx
10001aa0:	e8 fc ff ff ff       	call   10001aa1 <processMouse(int, int, int)+0x50>	10001aa1: R_386_PC32	CRect::CRect(int, int, int, int)
10001aa5:	83 c4 14             	add    esp,0x14
10001aa8:	6a 0c                	push   0xc
10001aaa:	e8 fc ff ff ff       	call   10001aab <processMouse(int, int, int)+0x5a>	10001aab: R_386_PC32	malloc
10001aaf:	89 18                	mov    DWORD PTR [eax],ebx
10001ab1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10001ab4:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10001ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001abe:	83 c4 10             	add    esp,0x10
10001ac1:	85 c9                	test   ecx,ecx
10001ac3:	74 05                	je     10001aca <processMouse(int, int, int)+0x79>
10001ac5:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
10001ac8:	eb 02                	jmp    10001acc <processMouse(int, int, int)+0x7b>
10001aca:	89 06                	mov    DWORD PTR [esi],eax
10001acc:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001acf:	55                   	push   ebp
10001ad0:	6a 01                	push   0x1
10001ad2:	56                   	push   esi
10001ad3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001ad5: R_386_32	rootRgn
10001ad9:	e8 fc ff ff ff       	call   10001ada <processMouse(int, int, int)+0x89>	10001ada: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001ade:	8b 06                	mov    eax,DWORD PTR [esi]
10001ae0:	83 c4 10             	add    esp,0x10
10001ae3:	85 c0                	test   eax,eax
10001ae5:	74 26                	je     10001b0d <processMouse(int, int, int)+0xbc>
10001ae7:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001aea:	51                   	push   ecx
10001aeb:	51                   	push   ecx
10001aec:	6a 0c                	push   0xc
10001aee:	50                   	push   eax
10001aef:	e8 fc ff ff ff       	call   10001af0 <processMouse(int, int, int)+0x9f>	10001af0: R_386_PC32	operator delete(void*, unsigned long)
10001af4:	89 2e                	mov    DWORD PTR [esi],ebp
10001af6:	83 c4 10             	add    esp,0x10
10001af9:	85 ed                	test   ebp,ebp
10001afb:	75 09                	jne    10001b06 <processMouse(int, int, int)+0xb5>
10001afd:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10001b04:	eb 07                	jmp    10001b0d <processMouse(int, int, int)+0xbc>
10001b06:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10001b0d:	8b 06                	mov    eax,DWORD PTR [esi]
10001b0f:	85 c0                	test   eax,eax
10001b11:	74 14                	je     10001b27 <processMouse(int, int, int)+0xd6>
10001b13:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001b16:	52                   	push   edx
10001b17:	52                   	push   edx
10001b18:	6a 0c                	push   0xc
10001b1a:	50                   	push   eax
10001b1b:	e8 fc ff ff ff       	call   10001b1c <processMouse(int, int, int)+0xcb>	10001b1c: R_386_PC32	operator delete(void*, unsigned long)
10001b20:	89 e8                	mov    eax,ebp
10001b22:	83 c4 10             	add    esp,0x10
10001b25:	eb e8                	jmp    10001b0f <processMouse(int, int, int)+0xbe>
10001b27:	50                   	push   eax
10001b28:	50                   	push   eax
10001b29:	6a 08                	push   0x8
10001b2b:	56                   	push   esi
10001b2c:	e8 fc ff ff ff       	call   10001b2d <processMouse(int, int, int)+0xdc>	10001b2d: R_386_PC32	operator delete(void*, unsigned long)
10001b31:	5a                   	pop    edx
10001b32:	59                   	pop    ecx
10001b33:	6a 10                	push   0x10
10001b35:	53                   	push   ebx
10001b36:	e8 fc ff ff ff       	call   10001b37 <processMouse(int, int, int)+0xe6>	10001b37: R_386_PC32	operator delete(void*, unsigned long)
10001b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001b3f:	a3 04 00 00 00       	mov    ds:0x4,eax	10001b40: R_386_32	rootRgn
10001b44:	89 3d 08 00 00 00    	mov    DWORD PTR ds:0x8,edi	10001b46: R_386_32	rootRgn
10001b4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b4b: R_386_32	rootRgn
10001b4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001b52:	8b 10                	mov    edx,DWORD PTR [eax]
10001b54:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001b56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001b5d:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001b5e: R_386_32	rootRgn
10001b62:	05 00 00 00 00       	add    eax,0x0	10001b63: R_386_32	mouse_data
10001b67:	50                   	push   eax
10001b68:	57                   	push   edi
10001b69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001b6d:	52                   	push   edx
10001b6e:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001b71:	83 c4 2c             	add    esp,0x2c
10001b74:	5b                   	pop    ebx
10001b75:	5e                   	pop    esi
10001b76:	5f                   	pop    edi
10001b77:	5d                   	pop    ebp
10001b78:	c3                   	ret    

10001b79 <handleMouse>:
10001b79:	53                   	push   ebx
10001b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001b7e:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001b80: R_386_32	krnlMouseX
10001b84:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001b88:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001b8a: R_386_32	krnlMouseX
10001b8e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001b90: R_386_32	krnlMouseY
10001b94:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001b98:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001b9a: R_386_32	krnlMouseY
10001b9e:	85 c9                	test   ecx,ecx
10001ba0:	7f 0a                	jg     10001bac <handleMouse+0x33>
10001ba2:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001ba4: R_386_32	krnlMouseX
10001bac:	85 d2                	test   edx,edx
10001bae:	7f 0a                	jg     10001bba <handleMouse+0x41>
10001bb0:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001bb2: R_386_32	krnlMouseY
10001bba:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001bbc: R_386_32	rootRgn
10001bc0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001bc3:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001bc6:	8d 5a ff             	lea    ebx,[edx-0x1]
10001bc9:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001bcb: R_386_32	krnlMouseX
10001bcf:	7f 09                	jg     10001bda <handleMouse+0x61>
10001bd1:	83 ea 02             	sub    edx,0x2
10001bd4:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001bd6: R_386_32	krnlMouseX
10001bda:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001bdd:	8d 4a ff             	lea    ecx,[edx-0x1]
10001be0:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001be2: R_386_32	krnlMouseY
10001be6:	7f 09                	jg     10001bf1 <handleMouse+0x78>
10001be8:	83 ea 02             	sub    edx,0x2
10001beb:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001bed: R_386_32	krnlMouseY
10001bf1:	83 e0 01             	and    eax,0x1
10001bf4:	a3 00 00 00 00       	mov    ds:0x0,eax	10001bf5: R_386_32	krnlButtons
10001bf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001bfd:	a1 00 00 00 00       	mov    eax,ds:0x0	10001bfe: R_386_32	krnlMouseY
10001c02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001c06:	a1 00 00 00 00       	mov    eax,ds:0x0	10001c07: R_386_32	krnlMouseX
10001c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001c0f:	5b                   	pop    ebx
10001c10:	e9 3c fe ff ff       	jmp    10001a51 <processMouse(int, int, int)>
10001c15:	90                   	nop

10001c16 <elpsDrawFunc(GDO*)>:
10001c16:	83 ec 10             	sub    esp,0x10
10001c19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001c1d:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001c20:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001c23:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001c26:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001c29:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001c2c:	6a 01                	push   0x1
10001c2e:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001c31:	e8 fc ff ff ff       	call   10001c32 <elpsDrawFunc(GDO*)+0x1c>	10001c32: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001c36:	83 c4 2c             	add    esp,0x2c
10001c39:	c3                   	ret    

10001c3a <elpsPtnDrawFunc(GDO*)>:
10001c3a:	83 ec 10             	sub    esp,0x10
10001c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001c41:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001c44:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001c47:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001c4a:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001c4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001c50:	6a 01                	push   0x1
10001c52:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001c55:	e8 fc ff ff ff       	call   10001c56 <elpsPtnDrawFunc(GDO*)+0x1c>	10001c56: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001c5a:	83 c4 2c             	add    esp,0x2c
10001c5d:	c3                   	ret    

10001c5e <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001c5e:	53                   	push   ebx
10001c5f:	83 ec 0c             	sub    esp,0xc
10001c62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001c66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001c6a:	6a 03                	push   0x3
10001c6c:	53                   	push   ebx
10001c6d:	e8 fc ff ff ff       	call   10001c6e <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001c6e: R_386_PC32	GDO::GDO(GDOType, Context*)
10001c72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001c76:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001c79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001c7d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001c80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001c84:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001c87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001c8b:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001c8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001c92:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001c95:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001c98: R_386_32	elpsPtnDrawFunc(GDO*)
10001c9c:	83 c4 18             	add    esp,0x18
10001c9f:	5b                   	pop    ebx
10001ca0:	c3                   	ret    
10001ca1:	90                   	nop

10001ca2 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001ca2:	53                   	push   ebx
10001ca3:	83 ec 0c             	sub    esp,0xc
10001ca6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001caa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001cae:	6a 01                	push   0x1
10001cb0:	53                   	push   ebx
10001cb1:	e8 fc ff ff ff       	call   10001cb2 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001cb2: R_386_PC32	GDO::GDO(GDOType, Context*)
10001cb6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001cba:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001cc1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001cc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001cc8:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ccf:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001cd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001cd6:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001cd9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001cdc: R_386_32	elpsDrawFunc(GDO*)
10001ce0:	83 c4 18             	add    esp,0x18
10001ce3:	5b                   	pop    ebx
10001ce4:	c3                   	ret    
10001ce5:	90                   	nop

10001ce6 <GDO::resetNext()>:
10001ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001cea:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001cf1:	c3                   	ret    

10001cf2 <GDO::GDO(GDOType, Context*)>:
10001cf2:	53                   	push   ebx
10001cf3:	83 ec 08             	sub    esp,0x8
10001cf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001cfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001d02:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001d05:	88 03                	mov    BYTE PTR [ebx],al
10001d07:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001d0e:	84 c0                	test   al,al
10001d10:	75 45                	jne    10001d57 <GDO::GDO(GDOType, Context*)+0x65>
10001d12:	83 ec 0c             	sub    esp,0xc
10001d15:	68 e3 2d 00 10       	push   0x10002de3	10001d16: R_386_32	.text
10001d1a:	e8 fc ff ff ff       	call   10001d1b <GDO::GDO(GDOType, Context*)+0x29>	10001d1b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d1f:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001d26:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001d2d:	e8 fc ff ff ff       	call   10001d2e <GDO::GDO(GDOType, Context*)+0x3c>	10001d2e: R_386_PC32	malloc
10001d32:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001d35:	59                   	pop    ecx
10001d36:	5a                   	pop    edx
10001d37:	50                   	push   eax
10001d38:	68 fe 2d 00 10       	push   0x10002dfe	10001d39: R_386_32	.text
10001d3d:	e8 fc ff ff ff       	call   10001d3e <GDO::GDO(GDOType, Context*)+0x4c>	10001d3e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d42:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001d45:	83 c4 10             	add    esp,0x10
10001d48:	31 c0                	xor    eax,eax
10001d4a:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001d51:	40                   	inc    eax
10001d52:	83 f8 10             	cmp    eax,0x10
10001d55:	75 f3                	jne    10001d4a <GDO::GDO(GDOType, Context*)+0x58>
10001d57:	83 c4 08             	add    esp,0x8
10001d5a:	5b                   	pop    ebx
10001d5b:	c3                   	ret    

10001d5c <GDO::~GDO()>:
10001d5c:	c3                   	ret    
10001d5d:	90                   	nop

10001d5e <GDO::getChild(int)>:
10001d5e:	56                   	push   esi
10001d5f:	53                   	push   ebx
10001d60:	51                   	push   ecx
10001d61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001d65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001d69:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001d6f:	7e 04                	jle    10001d75 <GDO::getChild(int)+0x17>
10001d71:	31 c0                	xor    eax,eax
10001d73:	eb 2b                	jmp    10001da0 <GDO::getChild(int)+0x42>
10001d75:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001d79:	75 10                	jne    10001d8b <GDO::getChild(int)+0x2d>
10001d7b:	83 ec 0c             	sub    esp,0xc
10001d7e:	68 0f 2e 00 10       	push   0x10002e0f	10001d7f: R_386_32	.text
10001d83:	e8 fc ff ff ff       	call   10001d84 <GDO::getChild(int)+0x26>	10001d84: R_386_PC32	Krnl::panic(char const*)
10001d88:	83 c4 10             	add    esp,0x10
10001d8b:	89 da                	mov    edx,ebx
10001d8d:	c1 ea 04             	shr    edx,0x4
10001d90:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001d93:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001d96:	85 c0                	test   eax,eax
10001d98:	74 d7                	je     10001d71 <GDO::getChild(int)+0x13>
10001d9a:	83 e3 0f             	and    ebx,0xf
10001d9d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001da0:	5a                   	pop    edx
10001da1:	5b                   	pop    ebx
10001da2:	5e                   	pop    esi
10001da3:	c3                   	ret    

10001da4 <GDO::hasNext()>:
10001da4:	56                   	push   esi
10001da5:	53                   	push   ebx
10001da6:	53                   	push   ebx
10001da7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001dab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001dae:	3d ff 00 00 00       	cmp    eax,0xff
10001db3:	7f 1b                	jg     10001dd0 <GDO::hasNext()+0x2c>
10001db5:	8d 70 01             	lea    esi,[eax+0x1]
10001db8:	51                   	push   ecx
10001db9:	51                   	push   ecx
10001dba:	50                   	push   eax
10001dbb:	53                   	push   ebx
10001dbc:	e8 fc ff ff ff       	call   10001dbd <GDO::hasNext()+0x19>	10001dbd: R_386_PC32	GDO::getChild(int)
10001dc1:	83 c4 10             	add    esp,0x10
10001dc4:	85 c0                	test   eax,eax
10001dc6:	75 04                	jne    10001dcc <GDO::hasNext()+0x28>
10001dc8:	89 f0                	mov    eax,esi
10001dca:	eb e2                	jmp    10001dae <GDO::hasNext()+0xa>
10001dcc:	b0 01                	mov    al,0x1
10001dce:	eb 02                	jmp    10001dd2 <GDO::hasNext()+0x2e>
10001dd0:	31 c0                	xor    eax,eax
10001dd2:	5a                   	pop    edx
10001dd3:	5b                   	pop    ebx
10001dd4:	5e                   	pop    esi
10001dd5:	c3                   	ret    

10001dd6 <GDO::getNext()>:
10001dd6:	53                   	push   ebx
10001dd7:	83 ec 08             	sub    esp,0x8
10001dda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001dde:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001de1:	3d ff 00 00 00       	cmp    eax,0xff
10001de6:	7f 18                	jg     10001e00 <GDO::getNext()+0x2a>
10001de8:	8d 50 01             	lea    edx,[eax+0x1]
10001deb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10001dee:	52                   	push   edx
10001def:	52                   	push   edx
10001df0:	50                   	push   eax
10001df1:	53                   	push   ebx
10001df2:	e8 fc ff ff ff       	call   10001df3 <GDO::getNext()+0x1d>	10001df3: R_386_PC32	GDO::getChild(int)
10001df7:	83 c4 10             	add    esp,0x10
10001dfa:	85 c0                	test   eax,eax
10001dfc:	74 e0                	je     10001dde <GDO::getNext()+0x8>
10001dfe:	eb 02                	jmp    10001e02 <GDO::getNext()+0x2c>
10001e00:	31 c0                	xor    eax,eax
10001e02:	83 c4 08             	add    esp,0x8
10001e05:	5b                   	pop    ebx
10001e06:	c3                   	ret    
10001e07:	90                   	nop

10001e08 <GDO::indexOf(GDO*)>:
10001e08:	56                   	push   esi
10001e09:	53                   	push   ebx
10001e0a:	53                   	push   ebx
10001e0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001e0f:	31 db                	xor    ebx,ebx
10001e11:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
10001e14:	8d 50 01             	lea    edx,[eax+0x1]
10001e17:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10001e1a:	51                   	push   ecx
10001e1b:	51                   	push   ecx
10001e1c:	50                   	push   eax
10001e1d:	56                   	push   esi
10001e1e:	e8 fc ff ff ff       	call   10001e1f <GDO::indexOf(GDO*)+0x17>	10001e1f: R_386_PC32	GDO::getChild(int)
10001e23:	83 c4 10             	add    esp,0x10
10001e26:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10001e2a:	74 0c                	je     10001e38 <GDO::indexOf(GDO*)+0x30>
10001e2c:	43                   	inc    ebx
10001e2d:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001e33:	75 dc                	jne    10001e11 <GDO::indexOf(GDO*)+0x9>
10001e35:	83 cb ff             	or     ebx,0xffffffff
10001e38:	89 d8                	mov    eax,ebx
10001e3a:	5a                   	pop    edx
10001e3b:	5b                   	pop    ebx
10001e3c:	5e                   	pop    esi
10001e3d:	c3                   	ret    

10001e3e <GDO::screenX()>:
10001e3e:	56                   	push   esi
10001e3f:	53                   	push   ebx
10001e40:	51                   	push   ecx
10001e41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001e45:	31 f6                	xor    esi,esi
10001e47:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001e4a:	74 10                	je     10001e5c <GDO::screenX()+0x1e>
10001e4c:	83 ec 0c             	sub    esp,0xc
10001e4f:	68 28 2e 00 10       	push   0x10002e28	10001e50: R_386_32	.text
10001e54:	e8 fc ff ff ff       	call   10001e55 <GDO::screenX()+0x17>	10001e55: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e59:	83 c4 10             	add    esp,0x10
10001e5c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001e5f:	85 c0                	test   eax,eax
10001e61:	74 1f                	je     10001e82 <GDO::screenX()+0x44>
10001e63:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001e66:	74 10                	je     10001e78 <GDO::screenX()+0x3a>
10001e68:	83 ec 0c             	sub    esp,0xc
10001e6b:	68 1c 2e 00 10       	push   0x10002e1c	10001e6c: R_386_32	.text
10001e70:	e8 fc ff ff ff       	call   10001e71 <GDO::screenX()+0x33>	10001e71: R_386_PC32	Krnl::panic(char const*)
10001e75:	83 c4 10             	add    esp,0x10
10001e78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001e7b:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001e7e:	01 c6                	add    esi,eax
10001e80:	eb c5                	jmp    10001e47 <GDO::screenX()+0x9>
10001e82:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001e85:	01 f0                	add    eax,esi
10001e87:	5a                   	pop    edx
10001e88:	5b                   	pop    ebx
10001e89:	5e                   	pop    esi
10001e8a:	c3                   	ret    
10001e8b:	90                   	nop

10001e8c <GDO::screenY()>:
10001e8c:	56                   	push   esi
10001e8d:	53                   	push   ebx
10001e8e:	51                   	push   ecx
10001e8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001e93:	31 f6                	xor    esi,esi
10001e95:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001e98:	74 10                	je     10001eaa <GDO::screenY()+0x1e>
10001e9a:	83 ec 0c             	sub    esp,0xc
10001e9d:	68 4f 2e 00 10       	push   0x10002e4f	10001e9e: R_386_32	.text
10001ea2:	e8 fc ff ff ff       	call   10001ea3 <GDO::screenY()+0x17>	10001ea3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ea7:	83 c4 10             	add    esp,0x10
10001eaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001ead:	85 c0                	test   eax,eax
10001eaf:	74 1f                	je     10001ed0 <GDO::screenY()+0x44>
10001eb1:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001eb4:	74 10                	je     10001ec6 <GDO::screenY()+0x3a>
10001eb6:	83 ec 0c             	sub    esp,0xc
10001eb9:	68 43 2e 00 10       	push   0x10002e43	10001eba: R_386_32	.text
10001ebe:	e8 fc ff ff ff       	call   10001ebf <GDO::screenY()+0x33>	10001ebf: R_386_PC32	Krnl::panic(char const*)
10001ec3:	83 c4 10             	add    esp,0x10
10001ec6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001ec9:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001ecc:	01 c6                	add    esi,eax
10001ece:	eb c5                	jmp    10001e95 <GDO::screenY()+0x9>
10001ed0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001ed3:	01 f0                	add    eax,esi
10001ed5:	5a                   	pop    edx
10001ed6:	5b                   	pop    ebx
10001ed7:	5e                   	pop    esi
10001ed8:	c3                   	ret    
10001ed9:	90                   	nop

10001eda <GDO::update(List<CRect*>*, bool)>:
10001eda:	55                   	push   ebp
10001edb:	57                   	push   edi
10001edc:	56                   	push   esi
10001edd:	53                   	push   ebx
10001ede:	83 ec 2c             	sub    esp,0x2c
10001ee1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001ee5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001eed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001ef1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001ef5:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001ef8:	74 14                	je     10001f0e <GDO::update(List<CRect*>*, bool)+0x34>
10001efa:	c7 44 24 40 6a 2e 00 10 	mov    DWORD PTR [esp+0x40],0x10002e6a	10001efe: R_386_32	.text
10001f02:	83 c4 2c             	add    esp,0x2c
10001f05:	5b                   	pop    ebx
10001f06:	5e                   	pop    esi
10001f07:	5f                   	pop    edi
10001f08:	5d                   	pop    ebp
10001f09:	e9 fc ff ff ff       	jmp    10001f0a <GDO::update(List<CRect*>*, bool)+0x30>	10001f0a: R_386_PC32	Krnl::panic(char const*)
10001f0e:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10001f12:	0f 84 02 02 00 00    	je     1000211a <GDO::update(List<CRect*>*, bool)+0x240>
10001f18:	56                   	push   esi
10001f19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001f1d:	6a 00                	push   0x0
10001f1f:	53                   	push   ebx
10001f20:	e8 fc ff ff ff       	call   10001f21 <GDO::update(List<CRect*>*, bool)+0x47>	10001f21: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10001f25:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001f28:	e8 fc ff ff ff       	call   10001f29 <GDO::update(List<CRect*>*, bool)+0x4f>	10001f29: R_386_PC32	GDO::screenX()
10001f2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001f31:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001f34:	e8 fc ff ff ff       	call   10001f35 <GDO::update(List<CRect*>*, bool)+0x5b>	10001f35: R_386_PC32	GDO::screenY()
10001f39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10001f3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001f40:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
10001f44:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001f4b:	83 c4 10             	add    esp,0x10
10001f4e:	83 ec 0c             	sub    esp,0xc
10001f51:	53                   	push   ebx
10001f52:	e8 fc ff ff ff       	call   10001f53 <GDO::update(List<CRect*>*, bool)+0x79>	10001f53: R_386_PC32	GDO::hasNext()
10001f57:	83 c4 10             	add    esp,0x10
10001f5a:	84 c0                	test   al,al
10001f5c:	74 6c                	je     10001fca <GDO::update(List<CRect*>*, bool)+0xf0>
10001f5e:	83 ec 0c             	sub    esp,0xc
10001f61:	53                   	push   ebx
10001f62:	e8 fc ff ff ff       	call   10001f63 <GDO::update(List<CRect*>*, bool)+0x89>	10001f63: R_386_PC32	GDO::getNext()
10001f67:	89 c6                	mov    esi,eax
10001f69:	83 c4 10             	add    esp,0x10
10001f6c:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001f6f:	75 dd                	jne    10001f4e <GDO::update(List<CRect*>*, bool)+0x74>
10001f71:	83 ec 0c             	sub    esp,0xc
10001f74:	50                   	push   eax
10001f75:	e8 fc ff ff ff       	call   10001f76 <GDO::update(List<CRect*>*, bool)+0x9c>	10001f76: R_386_PC32	GDO::screenX()
10001f7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f7e:	89 34 24             	mov    DWORD PTR [esp],esi
10001f81:	e8 fc ff ff ff       	call   10001f82 <GDO::update(List<CRect*>*, bool)+0xa8>	10001f82: R_386_PC32	GDO::screenY()
10001f86:	89 c5                	mov    ebp,eax
10001f88:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001f8f:	e8 fc ff ff ff       	call   10001f90 <GDO::update(List<CRect*>*, bool)+0xb6>	10001f90: R_386_PC32	malloc
10001f94:	89 c7                	mov    edi,eax
10001f96:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10001f9a:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10001f9d:	01 d0                	add    eax,edx
10001f9f:	48                   	dec    eax
10001fa0:	89 04 24             	mov    DWORD PTR [esp],eax
10001fa3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10001fa6:	01 e8                	add    eax,ebp
10001fa8:	48                   	dec    eax
10001fa9:	50                   	push   eax
10001faa:	52                   	push   edx
10001fab:	55                   	push   ebp
10001fac:	57                   	push   edi
10001fad:	e8 fc ff ff ff       	call   10001fae <GDO::update(List<CRect*>*, bool)+0xd4>	10001fae: R_386_PC32	CRect::CRect(int, int, int, int)
10001fb2:	83 c4 18             	add    esp,0x18
10001fb5:	57                   	push   edi
10001fb6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10001fb9:	e8 fc ff ff ff       	call   10001fba <GDO::update(List<CRect*>*, bool)+0xe0>	10001fba: R_386_PC32	Context::subClipRect(CRect*)
10001fbe:	5a                   	pop    edx
10001fbf:	59                   	pop    ecx
10001fc0:	6a 10                	push   0x10
10001fc2:	57                   	push   edi
10001fc3:	e8 fc ff ff ff       	call   10001fc4 <GDO::update(List<CRect*>*, bool)+0xea>	10001fc4: R_386_PC32	operator delete(void*, unsigned long)
10001fc8:	eb 81                	jmp    10001f4b <GDO::update(List<CRect*>*, bool)+0x71>
10001fca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001fcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001fd1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001fd4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10001fd8:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
10001fdb:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001fe2:	83 ec 0c             	sub    esp,0xc
10001fe5:	53                   	push   ebx
10001fe6:	e8 fc ff ff ff       	call   10001fe7 <GDO::update(List<CRect*>*, bool)+0x10d>	10001fe7: R_386_PC32	GDO::hasNext()
10001feb:	83 c4 10             	add    esp,0x10
10001fee:	84 c0                	test   al,al
10001ff0:	74 23                	je     10002015 <GDO::update(List<CRect*>*, bool)+0x13b>
10001ff2:	83 ec 0c             	sub    esp,0xc
10001ff5:	53                   	push   ebx
10001ff6:	e8 fc ff ff ff       	call   10001ff7 <GDO::update(List<CRect*>*, bool)+0x11d>	10001ff7: R_386_PC32	GDO::getNext()
10001ffb:	83 c4 10             	add    esp,0x10
10001ffe:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002001:	74 df                	je     10001fe2 <GDO::update(List<CRect*>*, bool)+0x108>
10002003:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
10002006:	85 d2                	test   edx,edx
10002008:	74 d8                	je     10001fe2 <GDO::update(List<CRect*>*, bool)+0x108>
1000200a:	83 ec 0c             	sub    esp,0xc
1000200d:	50                   	push   eax
1000200e:	ff d2                	call   edx
10002010:	83 c4 10             	add    esp,0x10
10002013:	eb cd                	jmp    10001fe2 <GDO::update(List<CRect*>*, bool)+0x108>
10002015:	83 ec 0c             	sub    esp,0xc
10002018:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000201b:	e8 fc ff ff ff       	call   1000201c <GDO::update(List<CRect*>*, bool)+0x142>	1000201c: R_386_PC32	Context::clearClipRects()
10002020:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002023:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
1000202a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002031:	83 c4 10             	add    esp,0x10
10002034:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10002039:	0f 84 db 00 00 00    	je     1000211a <GDO::update(List<CRect*>*, bool)+0x240>
1000203f:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10002046:	83 ec 0c             	sub    esp,0xc
10002049:	53                   	push   ebx
1000204a:	e8 fc ff ff ff       	call   1000204b <GDO::update(List<CRect*>*, bool)+0x171>	1000204b: R_386_PC32	GDO::hasNext()
1000204f:	83 c4 10             	add    esp,0x10
10002052:	84 c0                	test   al,al
10002054:	0f 84 c0 00 00 00    	je     1000211a <GDO::update(List<CRect*>*, bool)+0x240>
1000205a:	83 ec 0c             	sub    esp,0xc
1000205d:	53                   	push   ebx
1000205e:	e8 fc ff ff ff       	call   1000205f <GDO::update(List<CRect*>*, bool)+0x185>	1000205f: R_386_PC32	GDO::getNext()
10002063:	89 c7                	mov    edi,eax
10002065:	83 c4 10             	add    esp,0x10
10002068:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000206b:	75 d9                	jne    10002046 <GDO::update(List<CRect*>*, bool)+0x16c>
1000206d:	31 f6                	xor    esi,esi
1000206f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002074:	75 3b                	jne    100020b1 <GDO::update(List<CRect*>*, bool)+0x1d7>
10002076:	50                   	push   eax
10002077:	6a 01                	push   0x1
10002079:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000207d:	57                   	push   edi
1000207e:	e8 fc ff ff ff       	call   1000207f <GDO::update(List<CRect*>*, bool)+0x1a5>	1000207f: R_386_PC32	GDO::update(List<CRect*>*, bool)
10002083:	83 c4 10             	add    esp,0x10
10002086:	eb be                	jmp    10002046 <GDO::update(List<CRect*>*, bool)+0x16c>
10002088:	8b 28                	mov    ebp,DWORD PTR [eax]
1000208a:	83 ec 0c             	sub    esp,0xc
1000208d:	57                   	push   edi
1000208e:	e8 fc ff ff ff       	call   1000208f <GDO::update(List<CRect*>*, bool)+0x1b5>	1000208f: R_386_PC32	GDO::screenX()
10002093:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002097:	89 3c 24             	mov    DWORD PTR [esp],edi
1000209a:	e8 fc ff ff ff       	call   1000209b <GDO::update(List<CRect*>*, bool)+0x1c1>	1000209b: R_386_PC32	GDO::screenY()
1000209f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020a3:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
100020a6:	01 d1                	add    ecx,edx
100020a8:	83 c4 10             	add    esp,0x10
100020ab:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
100020ae:	7f 37                	jg     100020e7 <GDO::update(List<CRect*>*, bool)+0x20d>
100020b0:	46                   	inc    esi
100020b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100020b5:	8b 00                	mov    eax,DWORD PTR [eax]
100020b7:	89 c1                	mov    ecx,eax
100020b9:	31 d2                	xor    edx,edx
100020bb:	85 c9                	test   ecx,ecx
100020bd:	74 06                	je     100020c5 <GDO::update(List<CRect*>*, bool)+0x1eb>
100020bf:	42                   	inc    edx
100020c0:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100020c3:	eb f6                	jmp    100020bb <GDO::update(List<CRect*>*, bool)+0x1e1>
100020c5:	39 d6                	cmp    esi,edx
100020c7:	7d 32                	jge    100020fb <GDO::update(List<CRect*>*, bool)+0x221>
100020c9:	89 c1                	mov    ecx,eax
100020cb:	31 d2                	xor    edx,edx
100020cd:	85 c9                	test   ecx,ecx
100020cf:	74 06                	je     100020d7 <GDO::update(List<CRect*>*, bool)+0x1fd>
100020d1:	42                   	inc    edx
100020d2:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100020d5:	eb f6                	jmp    100020cd <GDO::update(List<CRect*>*, bool)+0x1f3>
100020d7:	39 d6                	cmp    esi,edx
100020d9:	7f ad                	jg     10002088 <GDO::update(List<CRect*>*, bool)+0x1ae>
100020db:	89 f2                	mov    edx,esi
100020dd:	85 d2                	test   edx,edx
100020df:	74 a7                	je     10002088 <GDO::update(List<CRect*>*, bool)+0x1ae>
100020e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100020e4:	4a                   	dec    edx
100020e5:	eb f6                	jmp    100020dd <GDO::update(List<CRect*>*, bool)+0x203>
100020e7:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
100020ea:	7c c4                	jl     100020b0 <GDO::update(List<CRect*>*, bool)+0x1d6>
100020ec:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
100020ef:	01 c2                	add    edx,eax
100020f1:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
100020f4:	7e ba                	jle    100020b0 <GDO::update(List<CRect*>*, bool)+0x1d6>
100020f6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100020f9:	7c b5                	jl     100020b0 <GDO::update(List<CRect*>*, bool)+0x1d6>
100020fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100020ff:	8b 10                	mov    edx,DWORD PTR [eax]
10002101:	31 c0                	xor    eax,eax
10002103:	85 d2                	test   edx,edx
10002105:	74 06                	je     1000210d <GDO::update(List<CRect*>*, bool)+0x233>
10002107:	40                   	inc    eax
10002108:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
1000210b:	eb f6                	jmp    10002103 <GDO::update(List<CRect*>*, bool)+0x229>
1000210d:	39 c6                	cmp    esi,eax
1000210f:	0f 85 61 ff ff ff    	jne    10002076 <GDO::update(List<CRect*>*, bool)+0x19c>
10002115:	e9 2c ff ff ff       	jmp    10002046 <GDO::update(List<CRect*>*, bool)+0x16c>
1000211a:	83 c4 2c             	add    esp,0x2c
1000211d:	5b                   	pop    ebx
1000211e:	5e                   	pop    esi
1000211f:	5f                   	pop    edi
10002120:	5d                   	pop    ebp
10002121:	c3                   	ret    

10002122 <GDO::addChild(GDO*)>:
10002122:	55                   	push   ebp
10002123:	57                   	push   edi
10002124:	56                   	push   esi
10002125:	53                   	push   ebx
10002126:	83 ec 1c             	sub    esp,0x1c
10002129:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
1000212d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002131:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
10002135:	74 17                	je     1000214e <GDO::addChild(GDO*)+0x2c>
10002137:	83 ec 0c             	sub    esp,0xc
1000213a:	68 86 2e 00 10       	push   0x10002e86	1000213b: R_386_32	.text
1000213f:	e8 fc ff ff ff       	call   10002140 <GDO::addChild(GDO*)+0x1e>	10002140: R_386_PC32	Krnl::panic(char const*)
10002144:	83 c4 10             	add    esp,0x10
10002147:	31 db                	xor    ebx,ebx
10002149:	e9 8c 00 00 00       	jmp    100021da <GDO::addChild(GDO*)+0xb8>
1000214e:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
10002151:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10002154:	31 c9                	xor    ecx,ecx
10002156:	83 cb ff             	or     ebx,0xffffffff
10002159:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
1000215c:	85 c0                	test   eax,eax
1000215e:	74 1c                	je     1000217c <GDO::addChild(GDO*)+0x5a>
10002160:	31 ff                	xor    edi,edi
10002162:	83 38 00             	cmp    DWORD PTR [eax],0x0
10002165:	75 0a                	jne    10002171 <GDO::addChild(GDO*)+0x4f>
10002167:	89 30                	mov    DWORD PTR [eax],esi
10002169:	c1 e1 04             	shl    ecx,0x4
1000216c:	8d 1c 39             	lea    ebx,[ecx+edi*1]
1000216f:	eb 69                	jmp    100021da <GDO::addChild(GDO*)+0xb8>
10002171:	47                   	inc    edi
10002172:	83 c0 04             	add    eax,0x4
10002175:	83 ff 10             	cmp    edi,0x10
10002178:	75 e8                	jne    10002162 <GDO::addChild(GDO*)+0x40>
1000217a:	eb 07                	jmp    10002183 <GDO::addChild(GDO*)+0x61>
1000217c:	83 fb ff             	cmp    ebx,0xffffffff
1000217f:	75 02                	jne    10002183 <GDO::addChild(GDO*)+0x61>
10002181:	89 cb                	mov    ebx,ecx
10002183:	41                   	inc    ecx
10002184:	83 f9 10             	cmp    ecx,0x10
10002187:	75 d0                	jne    10002159 <GDO::addChild(GDO*)+0x37>
10002189:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000218d:	83 fb ff             	cmp    ebx,0xffffffff
10002190:	74 38                	je     100021ca <GDO::addChild(GDO*)+0xa8>
10002192:	50                   	push   eax
10002193:	50                   	push   eax
10002194:	53                   	push   ebx
10002195:	68 a2 2e 00 10       	push   0x10002ea2	10002196: R_386_32	.text
1000219a:	e8 fc ff ff ff       	call   1000219b <GDO::addChild(GDO*)+0x79>	1000219b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000219f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100021a2:	8d 2c 98             	lea    ebp,[eax+ebx*4]
100021a5:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
100021ac:	e8 fc ff ff ff       	call   100021ad <GDO::addChild(GDO*)+0x8b>	100021ad: R_386_PC32	malloc
100021b1:	89 c2                	mov    edx,eax
100021b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100021b6:	31 c0                	xor    eax,eax
100021b8:	89 d7                	mov    edi,edx
100021ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100021be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100021c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100021c3:	89 30                	mov    DWORD PTR [eax],esi
100021c5:	c1 e3 04             	shl    ebx,0x4
100021c8:	eb 0d                	jmp    100021d7 <GDO::addChild(GDO*)+0xb5>
100021ca:	83 ec 0c             	sub    esp,0xc
100021cd:	68 bc 2e 00 10       	push   0x10002ebc	100021ce: R_386_32	.text
100021d2:	e8 fc ff ff ff       	call   100021d3 <GDO::addChild(GDO*)+0xb1>	100021d3: R_386_PC32	Krnl::panic(char const*)
100021d7:	83 c4 10             	add    esp,0x10
100021da:	89 d8                	mov    eax,ebx
100021dc:	83 c4 1c             	add    esp,0x1c
100021df:	5b                   	pop    ebx
100021e0:	5e                   	pop    esi
100021e1:	5f                   	pop    edi
100021e2:	5d                   	pop    ebp
100021e3:	c3                   	ret    

100021e4 <GDO::removeChild(int)>:
100021e4:	53                   	push   ebx
100021e5:	83 ec 08             	sub    esp,0x8
100021e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100021ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100021f0:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100021f3:	74 14                	je     10002209 <GDO::removeChild(int)+0x25>
100021f5:	83 ec 0c             	sub    esp,0xc
100021f8:	68 de 2e 00 10       	push   0x10002ede	100021f9: R_386_32	.text
100021fd:	e8 fc ff ff ff       	call   100021fe <GDO::removeChild(int)+0x1a>	100021fe: R_386_PC32	Krnl::panic(char const*)
10002202:	83 c4 10             	add    esp,0x10
10002205:	31 c0                	xor    eax,eax
10002207:	eb 2d                	jmp    10002236 <GDO::removeChild(int)+0x52>
10002209:	31 c0                	xor    eax,eax
1000220b:	81 fa ff 00 00 00    	cmp    edx,0xff
10002211:	7f 23                	jg     10002236 <GDO::removeChild(int)+0x52>
10002213:	89 d3                	mov    ebx,edx
10002215:	c1 eb 04             	shr    ebx,0x4
10002218:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
1000221b:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
1000221e:	31 c0                	xor    eax,eax
10002220:	85 c9                	test   ecx,ecx
10002222:	74 12                	je     10002236 <GDO::removeChild(int)+0x52>
10002224:	83 e2 0f             	and    edx,0xf
10002227:	8d 14 91             	lea    edx,[ecx+edx*4]
1000222a:	83 3a 00             	cmp    DWORD PTR [edx],0x0
1000222d:	0f 95 c0             	setne  al
10002230:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
10002236:	83 c4 08             	add    esp,0x8
10002239:	5b                   	pop    ebx
1000223a:	c3                   	ret    
1000223b:	90                   	nop

1000223c <GDO::removeChild(GDO*)>:
1000223c:	53                   	push   ebx
1000223d:	83 ec 10             	sub    esp,0x10
10002240:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10002248:	53                   	push   ebx
10002249:	e8 fc ff ff ff       	call   1000224a <GDO::removeChild(GDO*)+0xe>	1000224a: R_386_PC32	GDO::indexOf(GDO*)
1000224e:	83 c4 10             	add    esp,0x10
10002251:	83 f8 ff             	cmp    eax,0xffffffff
10002254:	74 0e                	je     10002264 <GDO::removeChild(GDO*)+0x28>
10002256:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000225a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
1000225e:	83 c4 08             	add    esp,0x8
10002261:	5b                   	pop    ebx
10002262:	eb 80                	jmp    100021e4 <GDO::removeChild(int)>
10002264:	31 c0                	xor    eax,eax
10002266:	83 c4 08             	add    esp,0x8
10002269:	5b                   	pop    ebx
1000226a:	c3                   	ret    
1000226b:	90                   	nop

1000226c <legacyDraw(GDO*)>:
1000226c:	55                   	push   ebp
1000226d:	57                   	push   edi
1000226e:	56                   	push   esi
1000226f:	53                   	push   ebx
10002270:	83 ec 1c             	sub    esp,0x1c
10002273:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002277:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
1000227a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
1000227d:	31 f6                	xor    esi,esi
1000227f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10002282:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
10002286:	84 c0                	test   al,al
10002288:	74 45                	je     100022cf <legacyDraw(GDO*)+0x63>
1000228a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
1000228d:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
10002293:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	10002297: R_386_32	FontWidths
1000229b:	83 ec 04             	sub    esp,0x4
1000229e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
100022a1:	6a 0e                	push   0xe
100022a3:	51                   	push   ecx
100022a4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100022a8:	55                   	push   ebp
100022a9:	57                   	push   edi
100022aa:	6b c0 0e             	imul   eax,eax,0xe
100022ad:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
100022b3:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	100022b6: R_386_32	Fonts
100022ba:	50                   	push   eax
100022bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100022be:	e8 fc ff ff ff       	call   100022bf <legacyDraw(GDO*)+0x53>	100022bf: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
100022c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100022c7:	01 cf                	add    edi,ecx
100022c9:	46                   	inc    esi
100022ca:	83 c4 20             	add    esp,0x20
100022cd:	eb b0                	jmp    1000227f <legacyDraw(GDO*)+0x13>
100022cf:	83 c4 1c             	add    esp,0x1c
100022d2:	5b                   	pop    ebx
100022d3:	5e                   	pop    esi
100022d4:	5f                   	pop    edi
100022d5:	5d                   	pop    ebp
100022d6:	c3                   	ret    

100022d7 <reverse(unsigned char)>:
100022d7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
100022db:	c3                   	ret    

100022dc <loadFontWithName(char*)>:
100022dc:	55                   	push   ebp
100022dd:	57                   	push   edi
100022de:	56                   	push   esi
100022df:	53                   	push   ebx
100022e0:	83 ec 34             	sub    esp,0x34
100022e3:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100022e7:	53                   	push   ebx
100022e8:	68 fd 2e 00 10       	push   0x10002efd	100022e9: R_386_32	.text
100022ed:	e8 fc ff ff ff       	call   100022ee <loadFontWithName(char*)+0x12>	100022ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100022f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100022f9:	e8 fc ff ff ff       	call   100022fa <loadFontWithName(char*)+0x1e>	100022fa: R_386_PC32	malloc
100022fe:	89 c6                	mov    esi,eax
10002300:	83 c4 0c             	add    esp,0xc
10002303:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002305: R_386_32	kernelProcess
10002309:	53                   	push   ebx
1000230a:	50                   	push   eax
1000230b:	e8 fc ff ff ff       	call   1000230c <loadFontWithName(char*)+0x30>	1000230c: R_386_PC32	File::File(char const*, Process*)
10002310:	59                   	pop    ecx
10002311:	5f                   	pop    edi
10002312:	6a 01                	push   0x1
10002314:	56                   	push   esi
10002315:	e8 fc ff ff ff       	call   10002316 <loadFontWithName(char*)+0x3a>	10002316: R_386_PC32	File::open(FileOpenMode)
1000231a:	83 c4 10             	add    esp,0x10
1000231d:	85 c0                	test   eax,eax
1000231f:	74 10                	je     10002331 <loadFontWithName(char*)+0x55>
10002321:	83 ec 0c             	sub    esp,0xc
10002324:	68 21 2f 00 10       	push   0x10002f21	10002325: R_386_32	.text
10002329:	e8 fc ff ff ff       	call   1000232a <loadFontWithName(char*)+0x4e>	1000232a: R_386_PC32	Krnl::panic(char const*)
1000232e:	83 c4 10             	add    esp,0x10
10002331:	83 ec 0c             	sub    esp,0xc
10002334:	8b 06                	mov    eax,DWORD PTR [esi]
10002336:	8d 54 24 28          	lea    edx,[esp+0x28]
1000233a:	52                   	push   edx
1000233b:	68 00 00 00 00       	push   0x0	1000233c: R_386_32	FONT
10002340:	6a 00                	push   0x0
10002342:	68 10 10 00 00       	push   0x1010
10002347:	56                   	push   esi
10002348:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000234b:	83 c4 14             	add    esp,0x14
1000234e:	56                   	push   esi
1000234f:	e8 fc ff ff ff       	call   10002350 <loadFontWithName(char*)+0x74>	10002350: R_386_PC32	File::close()
10002354:	8b 06                	mov    eax,DWORD PTR [esi]
10002356:	89 34 24             	mov    DWORD PTR [esp],esi
10002359:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000235c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000235d: R_386_32	nextfont_
10002361:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002365:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
1000236b:	83 c4 10             	add    esp,0x10
1000236e:	b8 00 02 00 00       	mov    eax,0x200
10002373:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
1000237b:	81 c6 00 00 00 00    	add    esi,0x0	1000237d: R_386_32	FontWidths
10002381:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002384: R_386_32	FONT
10002388:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000238a: R_386_32	FONT
1000238e:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
10002391:	6b d2 0e             	imul   edx,edx,0xe
10002394:	01 fa                	add    edx,edi
10002396:	31 ed                	xor    ebp,ebp
10002398:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	1000239b: R_386_32	FONT
1000239f:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	100023a2: R_386_32	Fonts
100023a6:	45                   	inc    ebp
100023a7:	83 fd 0e             	cmp    ebp,0xe
100023aa:	75 ec                	jne    10002398 <loadFontWithName(char*)+0xbc>
100023ac:	83 c0 10             	add    eax,0x10
100023af:	3d 00 08 00 00       	cmp    eax,0x800
100023b4:	75 cb                	jne    10002381 <loadFontWithName(char*)+0xa5>
100023b6:	43                   	inc    ebx
100023b7:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
100023bb:	75 f9                	jne    100023b6 <loadFontWithName(char*)+0xda>
100023bd:	8a 03                	mov    al,BYTE PTR [ebx]
100023bf:	3c 2f                	cmp    al,0x2f
100023c1:	74 07                	je     100023ca <loadFontWithName(char*)+0xee>
100023c3:	3c 5c                	cmp    al,0x5c
100023c5:	74 03                	je     100023ca <loadFontWithName(char*)+0xee>
100023c7:	4b                   	dec    ebx
100023c8:	eb f3                	jmp    100023bd <loadFontWithName(char*)+0xe1>
100023ca:	31 d2                	xor    edx,edx
100023cc:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
100023d4:	81 c7 00 00 00 00    	add    edi,0x0	100023d6: R_386_32	FontNames
100023da:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
100023de:	3c 2e                	cmp    al,0x2e
100023e0:	0f b7 f2             	movzx  esi,dx
100023e3:	74 13                	je     100023f8 <loadFontWithName(char*)+0x11c>
100023e5:	8d 68 9f             	lea    ebp,[eax-0x61]
100023e8:	89 e9                	mov    ecx,ebp
100023ea:	80 f9 19             	cmp    cl,0x19
100023ed:	77 03                	ja     100023f2 <loadFontWithName(char*)+0x116>
100023ef:	83 e8 20             	sub    eax,0x20
100023f2:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
100023f5:	42                   	inc    edx
100023f6:	eb e2                	jmp    100023da <loadFontWithName(char*)+0xfe>
100023f8:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
10002400:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	10002403: R_386_32	FontNames
10002408:	05 00 00 00 00       	add    eax,0x0	10002409: R_386_32	FontNames
1000240d:	52                   	push   edx
1000240e:	50                   	push   eax
1000240f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002413:	68 33 2f 00 10       	push   0x10002f33	10002414: R_386_32	.text
10002418:	e8 fc ff ff ff       	call   10002419 <loadFontWithName(char*)+0x13d>	10002419: R_386_PC32	Dbg::kprintf(char const*, ...)
1000241d:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	1000241f: R_386_32	nextfont_
10002423:	83 c4 3c             	add    esp,0x3c
10002426:	5b                   	pop    ebx
10002427:	5e                   	pop    esi
10002428:	5f                   	pop    edi
10002429:	5d                   	pop    ebp
1000242a:	c3                   	ret    

1000242b <loadbuiltinfonts()>:
1000242b:	56                   	push   esi
1000242c:	53                   	push   ebx
1000242d:	52                   	push   edx
1000242e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002430: R_386_32	nextfont_
10002438:	bb 00 00 00 00       	mov    ebx,0x0	10002439: R_386_32	FontWidths
1000243d:	ba f2 0d 00 00       	mov    edx,0xdf2
10002442:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
10002448:	89 de                	mov    esi,ebx
1000244a:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000244c: R_386_32	Fonts
10002451:	b9 01 00 00 00       	mov    ecx,0x1
10002456:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	10002459: R_386_32	Fonts
1000245e:	41                   	inc    ecx
1000245f:	83 f9 0d             	cmp    ecx,0xd
10002462:	75 f2                	jne    10002456 <loadbuiltinfonts()+0x2b>
10002464:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	10002466: R_386_32	Fonts
1000246b:	c6 06 08             	mov    BYTE PTR [esi],0x8
1000246e:	46                   	inc    esi
1000246f:	83 c0 0e             	add    eax,0xe
10002472:	39 d0                	cmp    eax,edx
10002474:	75 d4                	jne    1000244a <loadbuiltinfonts()+0x1f>
10002476:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
1000247c:	81 c3 ff 00 00 00    	add    ebx,0xff
10002482:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
10002488:	75 b8                	jne    10002442 <loadbuiltinfonts()+0x17>
1000248a:	b8 00 02 00 00       	mov    eax,0x200
1000248f:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002492: R_386_32	FONT
10002496:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	10002498: R_386_32	FONT
1000249c:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	1000249e: R_386_32	FontWidths
100024a2:	6b ca 0e             	imul   ecx,edx,0xe
100024a5:	31 d2                	xor    edx,edx
100024a7:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	100024aa: R_386_32	FONT
100024ae:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	100024b1: R_386_32	Fonts
100024b5:	42                   	inc    edx
100024b6:	83 fa 0e             	cmp    edx,0xe
100024b9:	75 ec                	jne    100024a7 <loadbuiltinfonts()+0x7c>
100024bb:	83 c0 10             	add    eax,0x10
100024be:	3d 00 08 00 00       	cmp    eax,0x800
100024c3:	75 ca                	jne    1000248f <loadbuiltinfonts()+0x64>
100024c5:	50                   	push   eax
100024c6:	50                   	push   eax
100024c7:	68 47 2f 00 10       	push   0x10002f47	100024c8: R_386_32	.text
100024cc:	68 00 00 00 00       	push   0x0	100024cd: R_386_32	FontNames
100024d1:	e8 fc ff ff ff       	call   100024d2 <loadbuiltinfonts()+0xa7>	100024d2: R_386_PC32	strcpy
100024d6:	83 c4 0c             	add    esp,0xc
100024d9:	68 00 00 00 00       	push   0x0	100024da: R_386_32	FontNames
100024de:	6a 00                	push   0x0
100024e0:	68 33 2f 00 10       	push   0x10002f33	100024e1: R_386_32	.text
100024e5:	e8 fc ff ff ff       	call   100024e6 <loadbuiltinfonts()+0xbb>	100024e6: R_386_PC32	Dbg::kprintf(char const*, ...)
100024ea:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100024ec: R_386_32	nextfont_
100024f4:	83 c4 14             	add    esp,0x14
100024f7:	5b                   	pop    ebx
100024f8:	5e                   	pop    esi
100024f9:	c3                   	ret    

100024fa <loadfonts()>:
100024fa:	57                   	push   edi
100024fb:	56                   	push   esi
100024fc:	53                   	push   ebx
100024fd:	81 ec 1c 02 00 00    	sub    esp,0x21c
10002503:	68 14 01 00 00       	push   0x114
10002508:	e8 fc ff ff ff       	call   10002509 <loadfonts()+0xf>	10002509: R_386_PC32	malloc
1000250d:	89 c3                	mov    ebx,eax
1000250f:	83 c4 0c             	add    esp,0xc
10002512:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002514: R_386_32	kernelProcess
10002518:	68 4e 2f 00 10       	push   0x10002f4e	10002519: R_386_32	.text
1000251d:	50                   	push   eax
1000251e:	e8 fc ff ff ff       	call   1000251f <loadfonts()+0x25>	1000251f: R_386_PC32	Directory::Directory(char const*, Process*)
10002523:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002526:	e8 fc ff ff ff       	call   10002527 <loadfonts()+0x2d>	10002527: R_386_PC32	Directory::open()
1000252b:	83 c4 10             	add    esp,0x10
1000252e:	51                   	push   ecx
1000252f:	51                   	push   ecx
10002530:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
10002537:	50                   	push   eax
10002538:	53                   	push   ebx
10002539:	e8 fc ff ff ff       	call   1000253a <loadfonts()+0x40>	1000253a: R_386_PC32	Directory::read(dirent*)
1000253e:	89 c6                	mov    esi,eax
10002540:	5f                   	pop    edi
10002541:	58                   	pop    eax
10002542:	56                   	push   esi
10002543:	68 65 2f 00 10       	push   0x10002f65	10002544: R_386_32	.text
10002548:	e8 fc ff ff ff       	call   10002549 <loadfonts()+0x4f>	10002549: R_386_PC32	Dbg::kprintf(char const*, ...)
1000254d:	83 c4 10             	add    esp,0x10
10002550:	85 f6                	test   esi,esi
10002552:	75 4c                	jne    100025a0 <loadfonts()+0xa6>
10002554:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
1000255c:	74 42                	je     100025a0 <loadfonts()+0xa6>
1000255e:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
10002566:	75 c6                	jne    1000252e <loadfonts()+0x34>
10002568:	50                   	push   eax
10002569:	50                   	push   eax
1000256a:	68 79 2f 00 10       	push   0x10002f79	1000256b: R_386_32	.text
1000256f:	8d 74 24 0c          	lea    esi,[esp+0xc]
10002573:	56                   	push   esi
10002574:	e8 fc ff ff ff       	call   10002575 <loadfonts()+0x7b>	10002575: R_386_PC32	strcpy
10002579:	5a                   	pop    edx
1000257a:	59                   	pop    ecx
1000257b:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
10002582:	57                   	push   edi
10002583:	56                   	push   esi
10002584:	e8 fc ff ff ff       	call   10002585 <loadfonts()+0x8b>	10002585: R_386_PC32	strcat
10002589:	58                   	pop    eax
1000258a:	5a                   	pop    edx
1000258b:	57                   	push   edi
1000258c:	68 91 2f 00 10       	push   0x10002f91	1000258d: R_386_32	.text
10002591:	e8 fc ff ff ff       	call   10002592 <loadfonts()+0x98>	10002592: R_386_PC32	Dbg::kprintf(char const*, ...)
10002596:	89 34 24             	mov    DWORD PTR [esp],esi
10002599:	e8 fc ff ff ff       	call   1000259a <loadfonts()+0xa0>	1000259a: R_386_PC32	loadFontWithName(char*)
1000259e:	eb 8b                	jmp    1000252b <loadfonts()+0x31>
100025a0:	83 ec 0c             	sub    esp,0xc
100025a3:	53                   	push   ebx
100025a4:	e8 fc ff ff ff       	call   100025a5 <loadfonts()+0xab>	100025a5: R_386_PC32	Directory::close()
100025a9:	83 c4 10             	add    esp,0x10
100025ac:	85 db                	test   ebx,ebx
100025ae:	74 0c                	je     100025bc <loadfonts()+0xc2>
100025b0:	83 ec 0c             	sub    esp,0xc
100025b3:	8b 03                	mov    eax,DWORD PTR [ebx]
100025b5:	53                   	push   ebx
100025b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
100025b9:	83 c4 10             	add    esp,0x10
100025bc:	81 c4 10 02 00 00    	add    esp,0x210
100025c2:	5b                   	pop    ebx
100025c3:	5e                   	pop    esi
100025c4:	5f                   	pop    edi
100025c5:	c3                   	ret    

100025c6 <getLegacyFont(char const*)>:
100025c6:	57                   	push   edi
100025c7:	56                   	push   esi
100025c8:	53                   	push   ebx
100025c9:	81 ec 08 01 00 00    	sub    esp,0x108
100025cf:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
100025d6:	68 9f 2f 00 10       	push   0x10002f9f	100025d7: R_386_32	.text
100025db:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
100025df:	53                   	push   ebx
100025e0:	e8 fc ff ff ff       	call   100025e1 <getLegacyFont(char const*)+0x1b>	100025e1: R_386_PC32	strcpy
100025e5:	59                   	pop    ecx
100025e6:	5f                   	pop    edi
100025e7:	56                   	push   esi
100025e8:	53                   	push   ebx
100025e9:	e8 fc ff ff ff       	call   100025ea <getLegacyFont(char const*)+0x24>	100025ea: R_386_PC32	strcat
100025ee:	58                   	pop    eax
100025ef:	5a                   	pop    edx
100025f0:	68 b7 2f 00 10       	push   0x10002fb7	100025f1: R_386_32	.text
100025f5:	53                   	push   ebx
100025f6:	e8 fc ff ff ff       	call   100025f7 <getLegacyFont(char const*)+0x31>	100025f7: R_386_PC32	strcat
100025fb:	83 c4 10             	add    esp,0x10
100025fe:	31 db                	xor    ebx,ebx
10002600:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10002602: R_386_32	nextfont_
10002606:	39 df                	cmp    edi,ebx
10002608:	7e 3b                	jle    10002645 <getLegacyFont(char const*)+0x7f>
1000260a:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
10002610:	81 c7 00 00 00 00    	add    edi,0x0	10002612: R_386_32	FontNames
10002616:	50                   	push   eax
10002617:	56                   	push   esi
10002618:	57                   	push   edi
10002619:	68 bc 2f 00 10       	push   0x10002fbc	1000261a: R_386_32	.text
1000261e:	e8 fc ff ff ff       	call   1000261f <getLegacyFont(char const*)+0x59>	1000261f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002623:	58                   	pop    eax
10002624:	5a                   	pop    edx
10002625:	56                   	push   esi
10002626:	57                   	push   edi
10002627:	e8 fc ff ff ff       	call   10002628 <getLegacyFont(char const*)+0x62>	10002628: R_386_PC32	strcmp
1000262c:	83 c4 10             	add    esp,0x10
1000262f:	85 c0                	test   eax,eax
10002631:	75 0f                	jne    10002642 <getLegacyFont(char const*)+0x7c>
10002633:	51                   	push   ecx
10002634:	53                   	push   ebx
10002635:	56                   	push   esi
10002636:	68 c7 2f 00 10       	push   0x10002fc7	10002637: R_386_32	.text
1000263b:	e8 fc ff ff ff       	call   1000263c <getLegacyFont(char const*)+0x76>	1000263c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002640:	eb 43                	jmp    10002685 <getLegacyFont(char const*)+0xbf>
10002642:	43                   	inc    ebx
10002643:	eb bb                	jmp    10002600 <getLegacyFont(char const*)+0x3a>
10002645:	83 ec 0c             	sub    esp,0xc
10002648:	56                   	push   esi
10002649:	e8 fc ff ff ff       	call   1000264a <getLegacyFont(char const*)+0x84>	1000264a: R_386_PC32	loadFontWithName(char*)
1000264e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000264f: R_386_32	nextfont_
10002653:	83 c4 10             	add    esp,0x10
10002656:	39 c7                	cmp    edi,eax
10002658:	75 15                	jne    1000266f <getLegacyFont(char const*)+0xa9>
1000265a:	83 ec 0c             	sub    esp,0xc
1000265d:	68 eb 2f 00 10       	push   0x10002feb	1000265e: R_386_32	.text
10002662:	e8 fc ff ff ff       	call   10002663 <getLegacyFont(char const*)+0x9d>	10002663: R_386_PC32	Dbg::kprintf(char const*, ...)
10002667:	83 c4 10             	add    esp,0x10
1000266a:	83 cb ff             	or     ebx,0xffffffff
1000266d:	eb 19                	jmp    10002688 <getLegacyFont(char const*)+0xc2>
1000266f:	52                   	push   edx
10002670:	48                   	dec    eax
10002671:	50                   	push   eax
10002672:	56                   	push   esi
10002673:	68 08 30 00 10       	push   0x10003008	10002674: R_386_32	.text
10002678:	e8 fc ff ff ff       	call   10002679 <getLegacyFont(char const*)+0xb3>	10002679: R_386_PC32	Dbg::kprintf(char const*, ...)
1000267d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000267e: R_386_32	nextfont_
10002682:	8d 58 ff             	lea    ebx,[eax-0x1]
10002685:	83 c4 10             	add    esp,0x10
10002688:	89 d8                	mov    eax,ebx
1000268a:	81 c4 00 01 00 00    	add    esp,0x100
10002690:	5b                   	pop    ebx
10002691:	5e                   	pop    esi
10002692:	5f                   	pop    edi
10002693:	c3                   	ret    

10002694 <getLegacyFont(LegacyFontType)>:
10002694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002698:	83 f8 05             	cmp    eax,0x5
1000269b:	77 46                	ja     100026e3 <getLegacyFont(LegacyFontType)+0x4f>
1000269d:	ff 24 85 54 30 00 10 	jmp    DWORD PTR [eax*4+0x10003054]	100026a0: R_386_32	.text
100026a4:	c7 44 24 04 47 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f47	100026a8: R_386_32	.text
100026ac:	eb 30                	jmp    100026de <getLegacyFont(LegacyFontType)+0x4a>
100026ae:	c7 44 24 04 29 30 00 10 	mov    DWORD PTR [esp+0x4],0x10003029	100026b2: R_386_32	.text
100026b6:	eb 26                	jmp    100026de <getLegacyFont(LegacyFontType)+0x4a>
100026b8:	c7 44 24 04 31 30 00 10 	mov    DWORD PTR [esp+0x4],0x10003031	100026bc: R_386_32	.text
100026c0:	eb 1c                	jmp    100026de <getLegacyFont(LegacyFontType)+0x4a>
100026c2:	c7 44 24 04 3a 30 00 10 	mov    DWORD PTR [esp+0x4],0x1000303a	100026c6: R_386_32	.text
100026ca:	eb 12                	jmp    100026de <getLegacyFont(LegacyFontType)+0x4a>
100026cc:	c7 44 24 04 42 30 00 10 	mov    DWORD PTR [esp+0x4],0x10003042	100026d0: R_386_32	.text
100026d4:	eb 08                	jmp    100026de <getLegacyFont(LegacyFontType)+0x4a>
100026d6:	c7 44 24 04 48 30 00 10 	mov    DWORD PTR [esp+0x4],0x10003048	100026da: R_386_32	.text
100026de:	e9 e3 fe ff ff       	jmp    100025c6 <getLegacyFont(char const*)>
100026e3:	83 c8 ff             	or     eax,0xffffffff
100026e6:	c3                   	ret    
100026e7:	90                   	nop

100026e8 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
100026e8:	57                   	push   edi
100026e9:	53                   	push   ebx
100026ea:	83 ec 08             	sub    esp,0x8
100026ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100026f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100026f5:	6a 02                	push   0x2
100026f7:	53                   	push   ebx
100026f8:	e8 fc ff ff ff       	call   100026f9 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	100026f9: R_386_PC32	GDO::GDO(GDOType, Context*)
100026fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002701:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10002704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002708:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000270b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000270f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
10002712:	a1 00 00 00 00       	mov    eax,ds:0x0	10002713: R_386_32	System
10002717:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
1000271a:	83 c9 ff             	or     ecx,0xffffffff
1000271d:	31 c0                	xor    eax,eax
1000271f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10002723:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10002725:	89 ca                	mov    edx,ecx
10002727:	f7 d2                	not    edx
10002729:	89 14 24             	mov    DWORD PTR [esp],edx
1000272c:	e8 fc ff ff ff       	call   1000272d <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	1000272d: R_386_PC32	malloc
10002731:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002734:	5a                   	pop    edx
10002735:	59                   	pop    ecx
10002736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000273a:	50                   	push   eax
1000273b:	e8 fc ff ff ff       	call   1000273c <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	1000273c: R_386_PC32	strcpy
10002740:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002743: R_386_32	legacyDraw(GDO*)
10002747:	83 c4 14             	add    esp,0x14
1000274a:	5b                   	pop    ebx
1000274b:	5f                   	pop    edi
1000274c:	c3                   	ret    
1000274d:	90                   	nop

1000274e <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
1000274e:	57                   	push   edi
1000274f:	53                   	push   ebx
10002750:	83 ec 08             	sub    esp,0x8
10002753:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000275b:	6a 02                	push   0x2
1000275d:	53                   	push   ebx
1000275e:	e8 fc ff ff ff       	call   1000275f <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	1000275f: R_386_PC32	GDO::GDO(GDOType, Context*)
10002763:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002767:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000276a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000276e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002771:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002775:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
10002778:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000277c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
1000277f:	83 c9 ff             	or     ecx,0xffffffff
10002782:	31 c0                	xor    eax,eax
10002784:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002788:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000278a:	89 ca                	mov    edx,ecx
1000278c:	f7 d2                	not    edx
1000278e:	89 14 24             	mov    DWORD PTR [esp],edx
10002791:	e8 fc ff ff ff       	call   10002792 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	10002792: R_386_PC32	malloc
10002796:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002799:	5a                   	pop    edx
1000279a:	59                   	pop    ecx
1000279b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000279f:	50                   	push   eax
100027a0:	e8 fc ff ff ff       	call   100027a1 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	100027a1: R_386_PC32	strcpy
100027a5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100027a8: R_386_32	legacyDraw(GDO*)
100027ac:	83 c4 14             	add    esp,0x14
100027af:	5b                   	pop    ebx
100027b0:	5f                   	pop    edi
100027b1:	c3                   	ret    

100027b2 <legacyFontInit()>:
100027b2:	83 ec 0c             	sub    esp,0xc
100027b5:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100027b7: R_386_32	nextfont_
100027bf:	e8 fc ff ff ff       	call   100027c0 <legacyFontInit()+0xe>	100027c0: R_386_PC32	loadbuiltinfonts()
100027c4:	e8 fc ff ff ff       	call   100027c5 <legacyFontInit()+0x13>	100027c5: R_386_PC32	loadfonts()
100027c9:	83 ec 0c             	sub    esp,0xc
100027cc:	68 47 2f 00 10       	push   0x10002f47	100027cd: R_386_32	.text
100027d1:	e8 fc ff ff ff       	call   100027d2 <legacyFontInit()+0x20>	100027d2: R_386_PC32	getLegacyFont(char const*)
100027d6:	a3 00 00 00 00       	mov    ds:0x0,eax	100027d7: R_386_32	System
100027db:	83 c4 1c             	add    esp,0x1c
100027de:	c3                   	ret    
100027df:	90                   	nop

100027e0 <rectDrawFunc(GDO*)>:
100027e0:	83 ec 14             	sub    esp,0x14
100027e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100027e7:	ff 70 50             	push   DWORD PTR [eax+0x50]
100027ea:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100027ed:	ff 70 48             	push   DWORD PTR [eax+0x48]
100027f0:	ff 70 44             	push   DWORD PTR [eax+0x44]
100027f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
100027f6:	ff 70 04             	push   DWORD PTR [eax+0x4]
100027f9:	e8 fc ff ff ff       	call   100027fa <rectDrawFunc(GDO*)+0x1a>	100027fa: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100027fe:	83 c4 2c             	add    esp,0x2c
10002801:	c3                   	ret    

10002802 <rectPtnDrawFunc(GDO*)>:
10002802:	83 ec 14             	sub    esp,0x14
10002805:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002809:	ff 70 50             	push   DWORD PTR [eax+0x50]
1000280c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
1000280f:	ff 70 48             	push   DWORD PTR [eax+0x48]
10002812:	ff 70 44             	push   DWORD PTR [eax+0x44]
10002815:	ff 70 40             	push   DWORD PTR [eax+0x40]
10002818:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000281b:	e8 fc ff ff ff       	call   1000281c <rectPtnDrawFunc(GDO*)+0x1a>	1000281c: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
10002820:	83 c4 2c             	add    esp,0x2c
10002823:	c3                   	ret    

10002824 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
10002824:	53                   	push   ebx
10002825:	83 ec 0c             	sub    esp,0xc
10002828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000282c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002830:	6a 01                	push   0x1
10002832:	53                   	push   ebx
10002833:	e8 fc ff ff ff       	call   10002834 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10002834: R_386_PC32	GDO::GDO(GDOType, Context*)
10002838:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000283c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
1000283f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002843:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002846:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000284a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
1000284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002851:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002854:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002858:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
1000285b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	1000285e: R_386_32	rectPtnDrawFunc(GDO*)
10002862:	83 c4 18             	add    esp,0x18
10002865:	5b                   	pop    ebx
10002866:	c3                   	ret    
10002867:	90                   	nop

10002868 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
10002868:	53                   	push   ebx
10002869:	83 ec 0c             	sub    esp,0xc
1000286c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002874:	6a 01                	push   0x1
10002876:	53                   	push   ebx
10002877:	e8 fc ff ff ff       	call   10002878 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	10002878: R_386_PC32	GDO::GDO(GDOType, Context*)
1000287c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002880:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002883:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002887:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000288a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000288e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002895:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002898:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000289c:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
1000289f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100028a2: R_386_32	rectDrawFunc(GDO*)
100028a6:	83 c4 18             	add    esp,0x18
100028a9:	5b                   	pop    ebx
100028aa:	c3                   	ret    
100028ab:	90                   	nop

100028ac <regnDrawFunc(GDO*)>:
100028ac:	c3                   	ret    
100028ad:	90                   	nop

100028ae <Region::Region(int, int, int, int, Context*)>:
100028ae:	53                   	push   ebx
100028af:	83 ec 0c             	sub    esp,0xc
100028b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100028b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100028ba:	6a 00                	push   0x0
100028bc:	53                   	push   ebx
100028bd:	e8 fc ff ff ff       	call   100028be <Region::Region(int, int, int, int, Context*)+0x10>	100028be: R_386_PC32	GDO::GDO(GDOType, Context*)
100028c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100028c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
100028c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100028cd:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
100028d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100028d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
100028d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100028db:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
100028de:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100028e1: R_386_32	regnDrawFunc(GDO*)
100028e5:	83 c4 18             	add    esp,0x18
100028e8:	5b                   	pop    ebx
100028e9:	c3                   	ret    

100028ea <Region::getRegionsAbove(Region*)>:
100028ea:	55                   	push   ebp
100028eb:	57                   	push   edi
100028ec:	56                   	push   esi
100028ed:	53                   	push   ebx
100028ee:	83 ec 28             	sub    esp,0x28
100028f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100028f5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100028f9:	6a 08                	push   0x8
100028fb:	e8 fc ff ff ff       	call   100028fc <Region::getRegionsAbove(Region*)+0x12>	100028fc: R_386_PC32	malloc
10002900:	89 c3                	mov    ebx,eax
10002902:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002909:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000290f:	89 3c 24             	mov    DWORD PTR [esp],edi
10002912:	e8 fc ff ff ff       	call   10002913 <Region::getRegionsAbove(Region*)+0x29>	10002913: R_386_PC32	GDO::resetNext()
10002917:	83 c4 10             	add    esp,0x10
1000291a:	83 ec 0c             	sub    esp,0xc
1000291d:	57                   	push   edi
1000291e:	e8 fc ff ff ff       	call   1000291f <Region::getRegionsAbove(Region*)+0x35>	1000291f: R_386_PC32	GDO::hasNext()
10002923:	83 c4 10             	add    esp,0x10
10002926:	84 c0                	test   al,al
10002928:	74 10                	je     1000293a <Region::getRegionsAbove(Region*)+0x50>
1000292a:	83 ec 0c             	sub    esp,0xc
1000292d:	57                   	push   edi
1000292e:	e8 fc ff ff ff       	call   1000292f <Region::getRegionsAbove(Region*)+0x45>	1000292f: R_386_PC32	GDO::getNext()
10002933:	83 c4 10             	add    esp,0x10
10002936:	39 e8                	cmp    eax,ebp
10002938:	75 e0                	jne    1000291a <Region::getRegionsAbove(Region*)+0x30>
1000293a:	83 ec 0c             	sub    esp,0xc
1000293d:	57                   	push   edi
1000293e:	e8 fc ff ff ff       	call   1000293f <Region::getRegionsAbove(Region*)+0x55>	1000293f: R_386_PC32	GDO::hasNext()
10002943:	83 c4 10             	add    esp,0x10
10002946:	84 c0                	test   al,al
10002948:	74 7b                	je     100029c5 <Region::getRegionsAbove(Region*)+0xdb>
1000294a:	83 ec 0c             	sub    esp,0xc
1000294d:	57                   	push   edi
1000294e:	e8 fc ff ff ff       	call   1000294f <Region::getRegionsAbove(Region*)+0x65>	1000294f: R_386_PC32	GDO::getNext()
10002953:	89 c6                	mov    esi,eax
10002955:	83 c4 10             	add    esp,0x10
10002958:	85 c0                	test   eax,eax
1000295a:	74 de                	je     1000293a <Region::getRegionsAbove(Region*)+0x50>
1000295c:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
1000295f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002963:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
10002966:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
10002969:	39 d0                	cmp    eax,edx
1000296b:	7e cd                	jle    1000293a <Region::getRegionsAbove(Region*)+0x50>
1000296d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002970:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002973:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002977:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
1000297a:	01 c8                	add    eax,ecx
1000297c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002980:	7e b8                	jle    1000293a <Region::getRegionsAbove(Region*)+0x50>
10002982:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002985:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10002989:	7d af                	jge    1000293a <Region::getRegionsAbove(Region*)+0x50>
1000298b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000298f:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002992:	39 c1                	cmp    ecx,eax
10002994:	7d a4                	jge    1000293a <Region::getRegionsAbove(Region*)+0x50>
10002996:	83 ec 0c             	sub    esp,0xc
10002999:	6a 0c                	push   0xc
1000299b:	e8 fc ff ff ff       	call   1000299c <Region::getRegionsAbove(Region*)+0xb2>	1000299c: R_386_PC32	malloc
100029a0:	89 30                	mov    DWORD PTR [eax],esi
100029a2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100029a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100029a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100029af:	83 c4 10             	add    esp,0x10
100029b2:	85 d2                	test   edx,edx
100029b4:	74 05                	je     100029bb <Region::getRegionsAbove(Region*)+0xd1>
100029b6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
100029b9:	eb 02                	jmp    100029bd <Region::getRegionsAbove(Region*)+0xd3>
100029bb:	89 03                	mov    DWORD PTR [ebx],eax
100029bd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100029c0:	e9 75 ff ff ff       	jmp    1000293a <Region::getRegionsAbove(Region*)+0x50>
100029c5:	89 d8                	mov    eax,ebx
100029c7:	83 c4 1c             	add    esp,0x1c
100029ca:	5b                   	pop    ebx
100029cb:	5e                   	pop    esi
100029cc:	5f                   	pop    edi
100029cd:	5d                   	pop    ebp
100029ce:	c3                   	ret    
100029cf:	90                   	nop

100029d0 <Region::applyBoundClipping(int, List<CRect*>*)>:
100029d0:	55                   	push   ebp
100029d1:	57                   	push   edi
100029d2:	56                   	push   esi
100029d3:	53                   	push   ebx
100029d4:	83 ec 1c             	sub    esp,0x1c
100029d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100029db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100029df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100029e3:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
100029e7:	0f 84 ef 01 00 00    	je     10002bdc <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
100029ed:	83 ec 0c             	sub    esp,0xc
100029f0:	53                   	push   ebx
100029f1:	e8 fc ff ff ff       	call   100029f2 <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	100029f2: R_386_PC32	GDO::screenX()
100029f6:	89 c5                	mov    ebp,eax
100029f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
100029fb:	e8 fc ff ff ff       	call   100029fc <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	100029fc: R_386_PC32	GDO::screenY()
10002a00:	89 c6                	mov    esi,eax
10002a02:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002a09:	e8 fc ff ff ff       	call   10002a0a <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	10002a0a: R_386_PC32	malloc
10002a0e:	89 c7                	mov    edi,eax
10002a10:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
10002a13:	01 e8                	add    eax,ebp
10002a15:	48                   	dec    eax
10002a16:	89 04 24             	mov    DWORD PTR [esp],eax
10002a19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10002a1c:	01 f0                	add    eax,esi
10002a1e:	48                   	dec    eax
10002a1f:	50                   	push   eax
10002a20:	55                   	push   ebp
10002a21:	56                   	push   esi
10002a22:	57                   	push   edi
10002a23:	e8 fc ff ff ff       	call   10002a24 <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	10002a24: R_386_PC32	CRect::CRect(int, int, int, int)
10002a28:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10002a2b:	83 c4 20             	add    esp,0x20
10002a2e:	85 c0                	test   eax,eax
10002a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002a34:	0f 85 ab 00 00 00    	jne    10002ae5 <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
10002a3a:	85 d2                	test   edx,edx
10002a3c:	0f 84 8c 00 00 00    	je     10002ace <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002a42:	31 f6                	xor    esi,esi
10002a44:	8b 02                	mov    eax,DWORD PTR [edx]
10002a46:	89 c5                	mov    ebp,eax
10002a48:	31 c9                	xor    ecx,ecx
10002a4a:	85 ed                	test   ebp,ebp
10002a4c:	74 06                	je     10002a54 <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002a4e:	41                   	inc    ecx
10002a4f:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002a52:	eb f6                	jmp    10002a4a <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002a54:	39 ce                	cmp    esi,ecx
10002a56:	7d 5f                	jge    10002ab7 <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
10002a58:	89 c5                	mov    ebp,eax
10002a5a:	31 c9                	xor    ecx,ecx
10002a5c:	85 ed                	test   ebp,ebp
10002a5e:	74 06                	je     10002a66 <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002a60:	41                   	inc    ecx
10002a61:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002a64:	eb f6                	jmp    10002a5c <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
10002a66:	39 ce                	cmp    esi,ecx
10002a68:	7f 0c                	jg     10002a76 <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002a6a:	89 f1                	mov    ecx,esi
10002a6c:	85 c9                	test   ecx,ecx
10002a6e:	74 06                	je     10002a76 <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002a73:	49                   	dec    ecx
10002a74:	eb f6                	jmp    10002a6c <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
10002a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10002a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
10002a7c:	83 ec 0c             	sub    esp,0xc
10002a7f:	6a 10                	push   0x10
10002a81:	e8 fc ff ff ff       	call   10002a82 <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002a82: R_386_PC32	malloc
10002a86:	59                   	pop    ecx
10002a87:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10002a8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002a8d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002a90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a93:	50                   	push   eax
10002a94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002a98:	e8 fc ff ff ff       	call   10002a99 <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	10002a99: R_386_PC32	CRect::CRect(int, int, int, int)
10002a9d:	83 c4 18             	add    esp,0x18
10002aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002aa4:	50                   	push   eax
10002aa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002aa8:	e8 fc ff ff ff       	call   10002aa9 <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	10002aa9: R_386_PC32	Context::addClipRect(CRect*)
10002aad:	46                   	inc    esi
10002aae:	83 c4 10             	add    esp,0x10
10002ab1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002ab5:	eb 8d                	jmp    10002a44 <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
10002ab7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002abb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002abe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002ac2:	83 c4 1c             	add    esp,0x1c
10002ac5:	5b                   	pop    ebx
10002ac6:	5e                   	pop    esi
10002ac7:	5f                   	pop    edi
10002ac8:	5d                   	pop    ebp
10002ac9:	e9 fc ff ff ff       	jmp    10002aca <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	10002aca: R_386_PC32	Context::intersectClipRect(CRect*)
10002ace:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002ad2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002ad5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002ad9:	83 c4 1c             	add    esp,0x1c
10002adc:	5b                   	pop    ebx
10002add:	5e                   	pop    esi
10002ade:	5f                   	pop    edi
10002adf:	5d                   	pop    ebp
10002ae0:	e9 fc ff ff ff       	jmp    10002ae1 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	10002ae1: R_386_PC32	Context::addClipRect(CRect*)
10002ae5:	51                   	push   ecx
10002ae6:	52                   	push   edx
10002ae7:	6a 01                	push   0x1
10002ae9:	50                   	push   eax
10002aea:	e8 fc ff ff ff       	call   10002aeb <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	10002aeb: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10002aef:	5e                   	pop    esi
10002af0:	5d                   	pop    ebp
10002af1:	57                   	push   edi
10002af2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002af5:	e8 fc ff ff ff       	call   10002af6 <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	10002af6: R_386_PC32	Context::intersectClipRect(CRect*)
10002afa:	58                   	pop    eax
10002afb:	5a                   	pop    edx
10002afc:	53                   	push   ebx
10002afd:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10002b00:	e8 fc ff ff ff       	call   10002b01 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	10002b01: R_386_PC32	Region::getRegionsAbove(Region*)
10002b05:	89 c6                	mov    esi,eax
10002b07:	83 c4 10             	add    esp,0x10
10002b0a:	8b 06                	mov    eax,DWORD PTR [esi]
10002b0c:	89 c1                	mov    ecx,eax
10002b0e:	31 d2                	xor    edx,edx
10002b10:	85 c9                	test   ecx,ecx
10002b12:	74 06                	je     10002b1a <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
10002b14:	42                   	inc    edx
10002b15:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002b18:	eb f6                	jmp    10002b10 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
10002b1a:	85 d2                	test   edx,edx
10002b1c:	0f 84 8a 00 00 00    	je     10002bac <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002b22:	8b 38                	mov    edi,DWORD PTR [eax]
10002b24:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10002b27:	52                   	push   edx
10002b28:	52                   	push   edx
10002b29:	6a 0c                	push   0xc
10002b2b:	50                   	push   eax
10002b2c:	e8 fc ff ff ff       	call   10002b2d <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002b2d: R_386_PC32	operator delete(void*, unsigned long)
10002b31:	89 2e                	mov    DWORD PTR [esi],ebp
10002b33:	83 c4 10             	add    esp,0x10
10002b36:	85 ed                	test   ebp,ebp
10002b38:	75 09                	jne    10002b43 <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002b3a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002b41:	eb 07                	jmp    10002b4a <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002b43:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002b4a:	83 ec 0c             	sub    esp,0xc
10002b4d:	57                   	push   edi
10002b4e:	e8 fc ff ff ff       	call   10002b4f <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002b4f: R_386_PC32	GDO::screenX()
10002b53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b57:	89 3c 24             	mov    DWORD PTR [esp],edi
10002b5a:	e8 fc ff ff ff       	call   10002b5b <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002b5b: R_386_PC32	GDO::screenY()
10002b5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002b63:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002b6a:	e8 fc ff ff ff       	call   10002b6b <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002b6b: R_386_PC32	malloc
10002b6f:	89 c5                	mov    ebp,eax
10002b71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002b75:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002b78:	01 c8                	add    eax,ecx
10002b7a:	48                   	dec    eax
10002b7b:	89 04 24             	mov    DWORD PTR [esp],eax
10002b7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002b82:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002b85:	01 d0                	add    eax,edx
10002b87:	48                   	dec    eax
10002b88:	50                   	push   eax
10002b89:	51                   	push   ecx
10002b8a:	52                   	push   edx
10002b8b:	55                   	push   ebp
10002b8c:	e8 fc ff ff ff       	call   10002b8d <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002b8d: R_386_PC32	CRect::CRect(int, int, int, int)
10002b91:	83 c4 18             	add    esp,0x18
10002b94:	55                   	push   ebp
10002b95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002b98:	e8 fc ff ff ff       	call   10002b99 <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002b99: R_386_PC32	Context::subClipRect(CRect*)
10002b9d:	59                   	pop    ecx
10002b9e:	5f                   	pop    edi
10002b9f:	6a 10                	push   0x10
10002ba1:	55                   	push   ebp
10002ba2:	e8 fc ff ff ff       	call   10002ba3 <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002ba3: R_386_PC32	operator delete(void*, unsigned long)
10002ba7:	e9 5b ff ff ff       	jmp    10002b07 <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002bac:	85 c0                	test   eax,eax
10002bae:	74 14                	je     10002bc4 <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002bb0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002bb3:	52                   	push   edx
10002bb4:	52                   	push   edx
10002bb5:	6a 0c                	push   0xc
10002bb7:	50                   	push   eax
10002bb8:	e8 fc ff ff ff       	call   10002bb9 <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002bb9: R_386_PC32	operator delete(void*, unsigned long)
10002bbd:	89 d8                	mov    eax,ebx
10002bbf:	83 c4 10             	add    esp,0x10
10002bc2:	eb e8                	jmp    10002bac <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002bc4:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002bcc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002bd0:	83 c4 1c             	add    esp,0x1c
10002bd3:	5b                   	pop    ebx
10002bd4:	5e                   	pop    esi
10002bd5:	5f                   	pop    edi
10002bd6:	5d                   	pop    ebp
10002bd7:	e9 fc ff ff ff       	jmp    10002bd8 <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002bd8: R_386_PC32	operator delete(void*, unsigned long)
10002bdc:	83 c4 1c             	add    esp,0x1c
10002bdf:	5b                   	pop    ebx
10002be0:	5e                   	pop    esi
10002be1:	5f                   	pop    edi
10002be2:	5d                   	pop    ebp
10002be3:	c3                   	ret    

10002be4 <List<CRect*>::insertAtTail(CRect*)>:
10002be4:	53                   	push   ebx
10002be5:	83 ec 14             	sub    esp,0x14
10002be8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002bec:	6a 0c                	push   0xc
10002bee:	e8 fc ff ff ff       	call   10002bef <List<CRect*>::insertAtTail(CRect*)+0xb>	10002bef: R_386_PC32	malloc
10002bf3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002bf7:	89 10                	mov    DWORD PTR [eax],edx
10002bf9:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002bfc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002c06:	83 c4 10             	add    esp,0x10
10002c09:	85 d2                	test   edx,edx
10002c0b:	74 05                	je     10002c12 <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002c0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002c10:	eb 02                	jmp    10002c14 <List<CRect*>::insertAtTail(CRect*)+0x30>
10002c12:	89 03                	mov    DWORD PTR [ebx],eax
10002c14:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002c17:	83 c4 08             	add    esp,0x8
10002c1a:	5b                   	pop    ebx
10002c1b:	c3                   	ret    

10002c1c <List<CRect*>::deleteHead()>:
10002c1c:	56                   	push   esi
10002c1d:	53                   	push   ebx
10002c1e:	51                   	push   ecx
10002c1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002c23:	8b 06                	mov    eax,DWORD PTR [esi]
10002c25:	85 c0                	test   eax,eax
10002c27:	74 26                	je     10002c4f <List<CRect*>::deleteHead()+0x33>
10002c29:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002c2c:	52                   	push   edx
10002c2d:	52                   	push   edx
10002c2e:	6a 0c                	push   0xc
10002c30:	50                   	push   eax
10002c31:	e8 fc ff ff ff       	call   10002c32 <List<CRect*>::deleteHead()+0x16>	10002c32: R_386_PC32	operator delete(void*, unsigned long)
10002c36:	89 1e                	mov    DWORD PTR [esi],ebx
10002c38:	83 c4 10             	add    esp,0x10
10002c3b:	85 db                	test   ebx,ebx
10002c3d:	75 09                	jne    10002c48 <List<CRect*>::deleteHead()+0x2c>
10002c3f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002c46:	eb 07                	jmp    10002c4f <List<CRect*>::deleteHead()+0x33>
10002c48:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002c4f:	58                   	pop    eax
10002c50:	5b                   	pop    ebx
10002c51:	5e                   	pop    esi
10002c52:	c3                   	ret    
10002c53:	90                   	nop

10002c54 <List<CRect*>::~List()>:
10002c54:	53                   	push   ebx
10002c55:	83 ec 08             	sub    esp,0x8
10002c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002c5c:	8b 00                	mov    eax,DWORD PTR [eax]
10002c5e:	85 c0                	test   eax,eax
10002c60:	74 14                	je     10002c76 <List<CRect*>::~List()+0x22>
10002c62:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002c65:	51                   	push   ecx
10002c66:	51                   	push   ecx
10002c67:	6a 0c                	push   0xc
10002c69:	50                   	push   eax
10002c6a:	e8 fc ff ff ff       	call   10002c6b <List<CRect*>::~List()+0x17>	10002c6b: R_386_PC32	operator delete(void*, unsigned long)
10002c6f:	89 d8                	mov    eax,ebx
10002c71:	83 c4 10             	add    esp,0x10
10002c74:	eb e8                	jmp    10002c5e <List<CRect*>::~List()+0xa>
10002c76:	83 c4 08             	add    esp,0x8
10002c79:	5b                   	pop    ebx
10002c7a:	c3                   	ret    
10002c7b:	43                   	inc    ebx
10002c7c:	4c                   	dec    esp
10002c7d:	49                   	dec    ecx
10002c7e:	50                   	push   eax
10002c7f:	44                   	inc    esp
10002c80:	52                   	push   edx
10002c81:	41                   	inc    ecx
10002c82:	57                   	push   edi
10002c83:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002c86:	41                   	inc    ecx
10002c87:	52                   	push   edx
10002c88:	54                   	push   esp
10002c89:	45                   	inc    ebp
10002c8a:	44                   	inc    esp
10002c8b:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002c8e:	54                   	push   esp
10002c8f:	68 65 20 53 79       	push   0x79532065
10002c94:	73 74                	jae    10002d0a <List<CRect*>::~List()+0xb6>
10002c96:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002c98:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002c9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002c9c:	74 21                	je     10002cbf <List<CRect*>::~List()+0x6b>
10002c9e:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002ca2:	65 73 20             	gs jae 10002cc5 <List<CRect*>::~List()+0x71>
10002ca5:	4e                   	dec    esi
10002ca6:	65 77 20             	gs ja  10002cc9 <List<CRect*>::~List()+0x75>
10002ca9:	52                   	push   edx
10002caa:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002cab:	6d                   	ins    DWORD PTR es:[edi],dx
10002cac:	61                   	popa   
10002cad:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002cae:	21 00                	and    DWORD PTR [eax],eax
10002cb0:	43                   	inc    ebx
10002cb1:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002cb2:	6d                   	ins    DWORD PTR es:[edi],dx
10002cb3:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002cba:	21 20                	and    DWORD PTR [eax],esp
10002cbc:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002cbe:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002cc1:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002cc8:	73 6f                	jae    10002d39 <List<CRect*>::~List()+0xe5>
10002cca:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002ccd:	72 69                	jb     10002d38 <List<CRect*>::~List()+0xe4>
10002ccf:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002cd0:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002cd7:	75 72                	jne    10002d4b <List<CRect*>::~List()+0xf7>
10002cd9:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002ce0:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002ce3:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ce4:	67 72 61             	addr16 jb 10002d48 <List<CRect*>::~List()+0xf4>
10002ce7:	6d                   	ins    DWORD PTR es:[edi],dx
10002ce8:	6d                   	ins    DWORD PTR es:[edi],dx
10002ce9:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002cf0:	50                   	push   eax
10002cf1:	55                   	push   ebp
10002cf2:	54                   	push   esp
10002cf3:	20 4d 4f             	and    BYTE PTR [ebp+0x4f],cl
10002cf6:	55                   	push   ebp
10002cf7:	53                   	push   ebx
10002cf8:	45                   	inc    ebp
10002cf9:	20 49 4e             	and    BYTE PTR [ecx+0x4e],cl
10002cfc:	20 54 4f 50          	and    BYTE PTR [edi+ecx*2+0x50],dl
10002d00:	20 52 49             	and    BYTE PTR [edx+0x49],dl
10002d03:	47                   	inc    edi
10002d04:	48                   	dec    eax
10002d05:	54                   	push   esp
10002d06:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10002d09:	52                   	push   edx
10002d0a:	4e                   	dec    esi
10002d0b:	45                   	inc    ebp
10002d0c:	52                   	push   edx
10002d0d:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002d11:	54                   	push   esp
10002d12:	45                   	inc    ebp
10002d13:	53                   	push   ebx
10002d14:	54                   	push   esp
10002d15:	20 42 53             	and    BYTE PTR [edx+0x53],al
10002d18:	4f                   	dec    edi
10002d19:	44                   	inc    esp
10002d1a:	00 90 c8 07 00 10    	add    BYTE PTR [eax+0x100007c8],dl	10002d1c: R_386_32	.text
10002d20:	cf                   	iret   	10002d20: R_386_32	.text
10002d21:	07                   	pop    es
10002d22:	00 10                	add    BYTE PTR [eax],dl
10002d24:	d6                   	(bad)  	10002d24: R_386_32	.text
10002d25:	07                   	pop    es
10002d26:	00 10                	add    BYTE PTR [eax],dl
10002d28:	dd 07                	fld    QWORD PTR [edi]	10002d28: R_386_32	.text
10002d2a:	00 10                	add    BYTE PTR [eax],dl
10002d2c:	e4 07                	in     al,0x7	10002d2c: R_386_32	.text
10002d2e:	00 10                	add    BYTE PTR [eax],dl
10002d30:	e9 07 00 10 f2       	jmp    2102d3c <start(void*)-0xdefd2c4>	10002d30: R_386_32	.text
	10002d34: R_386_32	.text
10002d35:	07                   	pop    es
10002d36:	00 10                	add    BYTE PTR [eax],dl
10002d38:	fb                   	sti    	10002d38: R_386_32	.text
10002d39:	07                   	pop    es
10002d3a:	00 10                	add    BYTE PTR [eax],dl
10002d3c:	04 08                	add    al,0x8	10002d3c: R_386_32	.text
10002d3e:	00 10                	add    BYTE PTR [eax],dl
10002d40:	20 08                	and    BYTE PTR [eax],cl	10002d40: R_386_32	.text
10002d42:	00 10                	add    BYTE PTR [eax],dl
10002d44:	29 08                	sub    DWORD PTR [eax],ecx	10002d44: R_386_32	.text
10002d46:	00 10                	add    BYTE PTR [eax],dl
10002d48:	35 08 00 10 3d       	xor    eax,0x3d100008	10002d48: R_386_32	.text
	10002d4c: R_386_32	.text
10002d4d:	08 00                	or     BYTE PTR [eax],al
10002d4f:	10 45 08             	adc    BYTE PTR [ebp+0x8],al	10002d50: R_386_32	.text
10002d52:	00 10                	add    BYTE PTR [eax],dl
10002d54:	5a                   	pop    edx	10002d54: R_386_32	.text
10002d55:	08 00                	or     BYTE PTR [eax],al
10002d57:	10 43 3a             	adc    BYTE PTR [ebx+0x3a],al
10002d5a:	2f                   	das    
10002d5b:	42                   	inc    edx
10002d5c:	61                   	popa   
10002d5d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d5e:	61                   	popa   
10002d5f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d60:	61                   	popa   
10002d61:	2f                   	das    
10002d62:	43                   	inc    ebx
10002d63:	75 72                	jne    10002dd7 <List<CRect*>::~List()+0x183>
10002d65:	73 6f                	jae    10002dd6 <List<CRect*>::~List()+0x182>
10002d67:	72 73                	jb     10002ddc <List<CRect*>::~List()+0x188>
10002d69:	2f                   	das    
10002d6a:	53                   	push   ebx
10002d6b:	54                   	push   esp
10002d6c:	41                   	inc    ecx
10002d6d:	4e                   	dec    esi
10002d6e:	44                   	inc    esp
10002d6f:	41                   	inc    ecx
10002d70:	52                   	push   edx
10002d71:	44                   	inc    esp
10002d72:	2e 43                	cs inc ebx
10002d74:	55                   	push   ebp
10002d75:	52                   	push   edx
10002d76:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002d79:	52                   	push   edx
10002d7a:	53                   	push   ebx
10002d7b:	4f                   	dec    edi
10002d7c:	52                   	push   edx
10002d7d:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002d81:	44                   	inc    esp
10002d82:	3a 20                	cmp    ah,BYTE PTR [eax]
10002d84:	42                   	inc    edx
10002d85:	41                   	inc    ecx
10002d86:	44                   	inc    esp
10002d87:	20 31                	and    BYTE PTR [ecx],dh
10002d89:	0a 00                	or     al,BYTE PTR [eax]
10002d8b:	43                   	inc    ebx
10002d8c:	55                   	push   ebp
10002d8d:	52                   	push   edx
10002d8e:	53                   	push   ebx
10002d8f:	4f                   	dec    edi
10002d90:	52                   	push   edx
10002d91:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002d95:	44                   	inc    esp
10002d96:	3a 20                	cmp    ah,BYTE PTR [eax]
10002d98:	42                   	inc    edx
10002d99:	41                   	inc    ecx
10002d9a:	44                   	inc    esp
10002d9b:	20 32                	and    BYTE PTR [edx],dh
10002d9d:	0a 00                	or     al,BYTE PTR [eax]
10002d9f:	43                   	inc    ebx
10002da0:	55                   	push   ebp
10002da1:	52                   	push   edx
10002da2:	53                   	push   ebx
10002da3:	4f                   	dec    edi
10002da4:	52                   	push   edx
10002da5:	53                   	push   ebx
10002da6:	3a 20                	cmp    ah,BYTE PTR [eax]
10002da8:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002dad:	52                   	push   edx
10002dae:	4d                   	dec    ebp
10002daf:	4c                   	dec    esp
10002db0:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002db3:	49                   	dec    ecx
10002db4:	54                   	push   esp
10002db5:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002db9:	52                   	push   edx
10002dba:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002dbe:	54                   	push   esp
10002dbf:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002dc2:	52                   	push   edx
10002dc3:	54                   	push   esp
10002dc4:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002dc7:	52                   	push   edx
10002dc8:	5a                   	pop    edx
10002dc9:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002dcc:	4e                   	dec    esi
10002dcd:	44                   	inc    esp
10002dce:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002dd1:	52                   	push   edx
10002dd2:	53                   	push   ebx
10002dd3:	4f                   	dec    edi
10002dd4:	52                   	push   edx
10002dd5:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002dd9:	44                   	inc    esp
10002dda:	3a 20                	cmp    ah,BYTE PTR [eax]
10002ddc:	42                   	inc    edx
10002ddd:	41                   	inc    ecx
10002dde:	44                   	inc    esp
10002ddf:	20 33                	and    BYTE PTR [ebx],dh
10002de1:	0a 00                	or     al,BYTE PTR [eax]
10002de3:	61                   	popa   
10002de4:	6c                   	ins    BYTE PTR es:[edi],dx
10002de5:	6c                   	ins    BYTE PTR es:[edi],dx
10002de6:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002de7:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10002dea:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10002df1:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10002df4:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
10002dfc:	0a 00                	or     al,BYTE PTR [eax]
10002dfe:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10002e01:	6c                   	ins    BYTE PTR es:[edi],dx
10002e02:	64 44                	fs inc esp
10002e04:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
10002e0b:	25 58 0a 00 4e       	and    eax,0x4e000a58
10002e10:	4f                   	dec    edi
10002e11:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10002e14:	49                   	dec    ecx
10002e15:	4c                   	dec    esp
10002e16:	44                   	inc    esp
10002e17:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002e1b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002e1e:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002e24:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002e2b:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002e2d:	73 63                	jae    10002e92 <List<CRect*>::~List()+0x23e>
10002e2f:	72 65                	jb     10002e96 <List<CRect*>::~List()+0x242>
10002e31:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002e33:	58                   	pop    eax
10002e34:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002e37:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002e3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e3b:	2d 72 65 67 69       	sub    eax,0x69676572
10002e40:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e41:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e42:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002e45:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002e4b:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002e52:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002e54:	73 63                	jae    10002eb9 <List<CRect*>::~List()+0x265>
10002e56:	72 65                	jb     10002ebd <List<CRect*>::~List()+0x269>
10002e58:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002e5a:	59                   	pop    ecx
10002e5b:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002e5e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002e61:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e62:	2d 72 65 67 69       	sub    eax,0x69676572
10002e67:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e68:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e69:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
10002e6c:	44                   	inc    esp
10002e6d:	41                   	inc    ecx
10002e6e:	54                   	push   esp
10002e6f:	45                   	inc    ebp
10002e70:	20 43 41             	and    BYTE PTR [ebx+0x41],al
10002e73:	4c                   	dec    esp
10002e74:	4c                   	dec    esp
10002e75:	45                   	inc    ebp
10002e76:	44                   	inc    esp
10002e77:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
10002e7a:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002e7d:	4e                   	dec    esi
10002e7e:	2d 52 45 47 49       	sub    eax,0x49474552
10002e83:	4f                   	dec    edi
10002e84:	4e                   	dec    esi
10002e85:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002e88:	4f                   	dec    edi
10002e89:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002e8b:	61                   	popa   
10002e8c:	64 64 43             	fs fs inc ebx
10002e8f:	68 69 6c 64 20       	push   0x20646c69
10002e94:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e95:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e96:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002e99:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e9a:	2d 72 65 67 69       	sub    eax,0x69676572
10002e9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ea0:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ea1:	00 43 52             	add    BYTE PTR [ebx+0x52],al
10002ea4:	45                   	inc    ebp
10002ea5:	41                   	inc    ecx
10002ea6:	54                   	push   esp
10002ea7:	49                   	dec    ecx
10002ea8:	4e                   	dec    esi
10002ea9:	47                   	inc    edi
10002eaa:	20 41 20             	and    BYTE PTR [ecx+0x20],al
10002ead:	4e                   	dec    esi
10002eae:	45                   	inc    ebp
10002eaf:	57                   	push   edi
10002eb0:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002eb4:	20 41 54             	and    BYTE PTR [ecx+0x54],al
10002eb7:	20 25 64 0a 00 47    	and    BYTE PTR ds:0x47000a64,ah
10002ebd:	44                   	inc    esp
10002ebe:	4f                   	dec    edi
10002ebf:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002ec1:	61                   	popa   
10002ec2:	64 64 43             	fs fs inc ebx
10002ec5:	68 69 6c 64 20       	push   0x20646c69
10002eca:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ecb:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ecc:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10002ecf:	72 65                	jb     10002f36 <List<CRect*>::~List()+0x2e2>
10002ed1:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10002ed4:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ed5:	74 73                	je     10002f4a <List<CRect*>::~List()+0x2f6>
10002ed7:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10002edb:	74 21                	je     10002efe <List<CRect*>::~List()+0x2aa>
10002edd:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002ee0:	4f                   	dec    edi
10002ee1:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002ee3:	72 65                	jb     10002f4a <List<CRect*>::~List()+0x2f6>
10002ee5:	6d                   	ins    DWORD PTR es:[edi],dx
10002ee6:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ee7:	76 65                	jbe    10002f4e <List<CRect*>::~List()+0x2fa>
10002ee9:	43                   	inc    ebx
10002eea:	68 69 6c 64 20       	push   0x20646c69
10002eef:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ef0:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ef1:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002ef4:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ef5:	2d 72 65 67 69       	sub    eax,0x69676572
10002efa:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002efb:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002efc:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10002f00:	44                   	inc    esp
10002f01:	49                   	dec    ecx
10002f02:	4e                   	dec    esi
10002f03:	47                   	inc    edi
10002f04:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002f08:	41                   	inc    ecx
10002f09:	43                   	inc    ebx
10002f0a:	59                   	pop    ecx
10002f0b:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002f0e:	4e                   	dec    esi
10002f0f:	54                   	push   esp
10002f10:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10002f13:	54                   	push   esp
10002f14:	48                   	dec    eax
10002f15:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10002f18:	4d                   	dec    ebp
10002f19:	45                   	inc    ebp
10002f1a:	20 27                	and    BYTE PTR [edi],ah
10002f1c:	25 73 27 0a 00       	and    eax,0xa2773
10002f21:	43                   	inc    ebx
10002f22:	41                   	inc    ecx
10002f23:	4e                   	dec    esi
10002f24:	4e                   	dec    esi
10002f25:	4f                   	dec    edi
10002f26:	54                   	push   esp
10002f27:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002f2b:	44                   	inc    esp
10002f2c:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002f2f:	4e                   	dec    esi
10002f30:	54                   	push   esp
10002f31:	53                   	push   ebx
10002f32:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10002f35:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f36:	74 4e                	je     10002f86 <List<CRect*>::~List()+0x332>
10002f38:	61                   	popa   
10002f39:	6d                   	ins    DWORD PTR es:[edi],dx
10002f3a:	65 73 5b             	gs jae 10002f98 <List<CRect*>::~List()+0x344>
10002f3d:	25 64 5d 20 3d       	and    eax,0x3d205d64
10002f42:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10002f48:	59                   	pop    ecx
10002f49:	53                   	push   ebx
10002f4a:	54                   	push   esp
10002f4b:	45                   	inc    ebp
10002f4c:	4d                   	dec    ebp
10002f4d:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002f50:	2f                   	das    
10002f51:	42                   	inc    edx
10002f52:	41                   	inc    ecx
10002f53:	4e                   	dec    esi
10002f54:	41                   	inc    ecx
10002f55:	4e                   	dec    esi
10002f56:	41                   	inc    ecx
10002f57:	2f                   	das    
10002f58:	46                   	inc    esi
10002f59:	4f                   	dec    edi
10002f5a:	4e                   	dec    esi
10002f5b:	54                   	push   esp
10002f5c:	53                   	push   ebx
10002f5d:	2f                   	das    
10002f5e:	4c                   	dec    esp
10002f5f:	45                   	inc    ebp
10002f60:	47                   	inc    edi
10002f61:	41                   	inc    ecx
10002f62:	43                   	inc    ebx
10002f63:	59                   	pop    ecx
10002f64:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10002f68:	2d 3e 72 65 61       	sub    eax,0x6165723e
10002f6d:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
10002f72:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002f78:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002f7b:	2f                   	das    
10002f7c:	42                   	inc    edx
10002f7d:	41                   	inc    ecx
10002f7e:	4e                   	dec    esi
10002f7f:	41                   	inc    ecx
10002f80:	4e                   	dec    esi
10002f81:	41                   	inc    ecx
10002f82:	2f                   	das    
10002f83:	46                   	inc    esi
10002f84:	4f                   	dec    edi
10002f85:	4e                   	dec    esi
10002f86:	54                   	push   esp
10002f87:	53                   	push   ebx
10002f88:	2f                   	das    
10002f89:	4c                   	dec    esp
10002f8a:	45                   	inc    ebp
10002f8b:	47                   	inc    edi
10002f8c:	41                   	inc    ecx
10002f8d:	43                   	inc    ebx
10002f8e:	59                   	pop    ecx
10002f8f:	2f                   	das    
10002f90:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
10002f94:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f95:	61                   	popa   
10002f96:	6d                   	ins    DWORD PTR es:[edi],dx
10002f97:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
10002f9e:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002fa1:	2f                   	das    
10002fa2:	42                   	inc    edx
10002fa3:	61                   	popa   
10002fa4:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fa5:	61                   	popa   
10002fa6:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fa7:	61                   	popa   
10002fa8:	2f                   	das    
10002fa9:	46                   	inc    esi
10002faa:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fab:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fac:	74 73                	je     10003021 <List<CRect*>::~List()+0x3cd>
10002fae:	2f                   	das    
10002faf:	4c                   	dec    esp
10002fb0:	65 67 61             	gs addr16 popa 
10002fb3:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
10002fb6:	00 2e                	add    BYTE PTR [esi],ch
10002fb8:	46                   	inc    esi
10002fb9:	4e                   	dec    esi
10002fba:	54                   	push   esp
10002fbb:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
10002fc1:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
10002fc8:	4f                   	dec    edi
10002fc9:	55                   	push   ebp
10002fca:	4e                   	dec    esi
10002fcb:	44                   	inc    esp
10002fcc:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002fd0:	41                   	inc    ecx
10002fd1:	43                   	inc    ebx
10002fd2:	59                   	pop    ecx
10002fd3:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002fd6:	4e                   	dec    esi
10002fd7:	54                   	push   esp
10002fd8:	20 27                	and    BYTE PTR [edi],ah
10002fda:	25 73 27 20 57       	and    eax,0x57202773
10002fdf:	49                   	dec    ecx
10002fe0:	54                   	push   esp
10002fe1:	48                   	dec    eax
10002fe2:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10002fe5:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10002feb:	43                   	inc    ebx
10002fec:	4f                   	dec    edi
10002fed:	55                   	push   ebp
10002fee:	4c                   	dec    esp
10002fef:	44                   	inc    esp
10002ff0:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002ff3:	54                   	push   esp
10002ff4:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ff8:	44                   	inc    esp
10002ff9:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002ffd:	41                   	inc    ecx
10002ffe:	43                   	inc    ebx
10002fff:	59                   	pop    ecx
10003000:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003003:	4e                   	dec    esi
10003004:	54                   	push   esp
10003005:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10003008:	4c                   	dec    esp
10003009:	4f                   	dec    edi
1000300a:	41                   	inc    ecx
1000300b:	44                   	inc    esp
1000300c:	45                   	inc    ebp
1000300d:	44                   	inc    esp
1000300e:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003012:	41                   	inc    ecx
10003013:	43                   	inc    ebx
10003014:	59                   	pop    ecx
10003015:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003018:	4e                   	dec    esi
10003019:	54                   	push   esp
1000301a:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10003020:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003023:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10003029:	43                   	inc    ebx
1000302a:	4f                   	dec    edi
1000302b:	55                   	push   ebp
1000302c:	52                   	push   edx
1000302d:	49                   	dec    ecx
1000302e:	45                   	inc    ebp
1000302f:	52                   	push   edx
10003030:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10003033:	55                   	push   ebp
10003034:	52                   	push   edx
10003035:	49                   	dec    ecx
10003036:	45                   	inc    ebp
10003037:	52                   	push   edx
10003038:	58                   	pop    eax
10003039:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
1000303d:	45                   	inc    ebp
1000303e:	53                   	push   ebx
1000303f:	4e                   	dec    esi
10003040:	52                   	push   edx
10003041:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10003044:	49                   	dec    ecx
10003045:	41                   	inc    ecx
10003046:	4c                   	dec    esp
10003047:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
1000304a:	4d                   	dec    ebp
1000304b:	49                   	dec    ecx
1000304c:	43                   	inc    ebx
1000304d:	53                   	push   ebx
1000304e:	41                   	inc    ecx
1000304f:	4e                   	dec    esi
10003050:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10003053:	90                   	nop
10003054:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]	10003054: R_386_32	.text
10003055:	26 00 10             	add    BYTE PTR es:[eax],dl
10003058:	ae                   	scas   al,BYTE PTR es:[edi]	10003058: R_386_32	.text
10003059:	26 00 10             	add    BYTE PTR es:[eax],dl
1000305c:	b8 26 00 10 c2       	mov    eax,0xc2100026	1000305c: R_386_32	.text
	10003060: R_386_32	.text
10003061:	26 00 10             	add    BYTE PTR es:[eax],dl
10003064:	cc                   	int3   	10003064: R_386_32	.text
10003065:	26 00 10             	add    BYTE PTR es:[eax],dl
10003068:	d6                   	(bad)  	10003068: R_386_32	.text
10003069:	26 00 10             	add    BYTE PTR es:[eax],dl
