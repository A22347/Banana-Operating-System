
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	6a 40                	push   0x40
1000009b:	e8 fc ff ff ff       	call   1000009c <NiMain(void*)+0x9c>	1000009c: R_386_PC32	malloc
100000a0:	59                   	pop    ecx
100000a1:	89 c5                	mov    ebp,eax
100000a3:	5b                   	pop    ebx
100000a4:	6a 01                	push   0x1
100000a6:	6a 01                	push   0x1
100000a8:	6a 00                	push   0x0
100000aa:	6a 00                	push   0x0
100000ac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ae: R_386_32	ctxt
100000b2:	50                   	push   eax
100000b3:	e8 fc ff ff ff       	call   100000b4 <NiMain(void*)+0xb4>	100000b4: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000b8:	83 c4 14             	add    esp,0x14
100000bb:	6a 40                	push   0x40
100000bd:	e8 fc ff ff ff       	call   100000be <NiMain(void*)+0xbe>	100000be: R_386_PC32	malloc
100000c2:	5e                   	pop    esi
100000c3:	89 c7                	mov    edi,eax
100000c5:	58                   	pop    eax
100000c6:	68 40 01 00 00       	push   0x140
100000cb:	68 90 01 00 00       	push   0x190
100000d0:	6a 32                	push   0x32
100000d2:	6a 32                	push   0x32
100000d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d6: R_386_32	ctxt
100000da:	57                   	push   edi
100000db:	e8 fc ff ff ff       	call   100000dc <NiMain(void*)+0xdc>	100000dc: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e0:	83 c4 14             	add    esp,0x14
100000e3:	6a 40                	push   0x40
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	malloc
100000ea:	89 c6                	mov    esi,eax
100000ec:	58                   	pop    eax
100000ed:	5a                   	pop    edx
100000ee:	68 7c 01 00 00       	push   0x17c
100000f3:	68 f4 01 00 00       	push   0x1f4
100000f8:	68 96 00 00 00       	push   0x96
100000fd:	68 c8 00 00 00       	push   0xc8
10000102:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000104: R_386_32	ctxt
10000108:	56                   	push   esi
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
1000010e:	83 c4 14             	add    esp,0x14
10000111:	6a 40                	push   0x40
10000113:	e8 fc ff ff ff       	call   10000114 <NiMain(void*)+0x114>	10000114: R_386_PC32	malloc
10000118:	59                   	pop    ecx
10000119:	89 c3                	mov    ebx,eax
1000011b:	58                   	pop    eax
1000011c:	68 af 00 00 00       	push   0xaf
10000121:	68 0e 01 00 00       	push   0x10e
10000126:	68 90 01 00 00       	push   0x190
1000012b:	6a 7d                	push   0x7d
1000012d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012f: R_386_32	ctxt
10000133:	53                   	push   ebx
10000134:	e8 fc ff ff ff       	call   10000135 <NiMain(void*)+0x135>	10000135: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000139:	83 c4 18             	add    esp,0x18
1000013c:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
10000140:	55                   	push   ebp
10000141:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000143: R_386_32	desktop
10000147:	e8 fc ff ff ff       	call   10000148 <NiMain(void*)+0x148>	10000148: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000014c:	58                   	pop    eax
1000014d:	5a                   	pop    edx
1000014e:	57                   	push   edi
1000014f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000151: R_386_32	desktop
10000155:	e8 fc ff ff ff       	call   10000156 <NiMain(void*)+0x156>	10000156: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015a:	59                   	pop    ecx
1000015b:	5f                   	pop    edi
1000015c:	56                   	push   esi
1000015d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000015f: R_386_32	desktop
10000163:	e8 fc ff ff ff       	call   10000164 <NiMain(void*)+0x164>	10000164: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000168:	5d                   	pop    ebp
10000169:	58                   	pop    eax
1000016a:	53                   	push   ebx
1000016b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016d: R_386_32	desktop
10000171:	e8 fc ff ff ff       	call   10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000176:	58                   	pop    eax
10000177:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000179: R_386_32	desktop
1000017d:	e8 fc ff ff ff       	call   1000017e <NiMain(void*)+0x17e>	1000017e: R_386_PC32	NIDesktop::completeRefresh()
10000182:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
10000189:	e8 fc ff ff ff       	call   1000018a <NiMain(void*)+0x18a>	1000018a: R_386_PC32	malloc
1000018e:	6a 00                	push   0x0
10000190:	89 c3                	mov    ebx,eax
10000192:	6a 00                	push   0x0
10000194:	68 17 55 00 10       	push   0x10005517	10000195: R_386_32	.text
10000199:	50                   	push   eax
1000019a:	e8 fc ff ff ff       	call   1000019b <NiMain(void*)+0x19b>	1000019b: R_386_PC32	Process::Process(char const*, Process*, char**)
1000019f:	83 c4 14             	add    esp,0x14
100001a2:	53                   	push   ebx
100001a3:	e8 fc ff ff ff       	call   100001a4 <NiMain(void*)+0x1a4>	100001a4: R_386_PC32	Process::createUserThread()
100001a8:	83 c4 10             	add    esp,0x10
100001ab:	fa                   	cli    
100001ac:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100001ae: R_386_32	irqDisableCounter
100001b2:	e8 fc ff ff ff       	call   100001b3 <NiMain(void*)+0x1b3>	100001b3: R_386_PC32	schedule()
100001b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100001b8: R_386_32	irqDisableCounter
100001bc:	48                   	dec    eax
100001bd:	a3 00 00 00 00       	mov    ds:0x0,eax	100001be: R_386_32	irqDisableCounter
100001c2:	75 e7                	jne    100001ab <NiMain(void*)+0x1ab>
100001c4:	fb                   	sti    
100001c5:	eb e4                	jmp    100001ab <NiMain(void*)+0x1ab>
100001c7:	90                   	nop

100001c8 <NiBegin(void*)>:
100001c8:	83 ec 18             	sub    esp,0x18
100001cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001cf:	e8 fc ff ff ff       	call   100001d0 <NiBegin(void*)+0x8>	100001d0: R_386_PC32	NiMain(void*)

100001d4 <_ssfn__bitreverse16>:
100001d4:	89 c2                	mov    edx,eax
100001d6:	01 c0                	add    eax,eax
100001d8:	d1 fa                	sar    edx,1
100001da:	25 aa aa 00 00       	and    eax,0xaaaa
100001df:	81 e2 55 55 00 00    	and    edx,0x5555
100001e5:	09 c2                	or     edx,eax
100001e7:	89 d0                	mov    eax,edx
100001e9:	c1 e2 02             	shl    edx,0x2
100001ec:	c1 f8 02             	sar    eax,0x2
100001ef:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001f5:	25 33 33 00 00       	and    eax,0x3333
100001fa:	09 d0                	or     eax,edx
100001fc:	89 c2                	mov    edx,eax
100001fe:	c1 e0 04             	shl    eax,0x4
10000201:	c1 fa 04             	sar    edx,0x4
10000204:	25 f0 f0 00 00       	and    eax,0xf0f0
10000209:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000020f:	09 c2                	or     edx,eax
10000211:	89 d1                	mov    ecx,edx
10000213:	c1 e2 08             	shl    edx,0x8
10000216:	c1 f9 08             	sar    ecx,0x8
10000219:	0f b7 c2             	movzx  eax,dx
1000021c:	09 c8                	or     eax,ecx
1000021e:	c3                   	ret    

1000021f <_ssfn__zhuffman_decode>:
1000021f:	55                   	push   ebp
10000220:	57                   	push   edi
10000221:	56                   	push   esi
10000222:	53                   	push   ebx
10000223:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000227:	7f 1d                	jg     10000246 <_ssfn__zhuffman_decode+0x27>
10000229:	8b 18                	mov    ebx,DWORD PTR [eax]
1000022b:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000022e:	89 08                	mov    DWORD PTR [eax],ecx
10000230:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000233:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000236:	d3 e3                	shl    ebx,cl
10000238:	83 c1 08             	add    ecx,0x8
1000023b:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000023e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000241:	83 f9 18             	cmp    ecx,0x18
10000244:	eb e1                	jmp    10000227 <_ssfn__zhuffman_decode+0x8>
10000246:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000249:	89 f9                	mov    ecx,edi
1000024b:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000251:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000255:	89 cb                	mov    ebx,ecx
10000257:	85 c9                	test   ecx,ecx
10000259:	74 15                	je     10000270 <_ssfn__zhuffman_decode+0x51>
1000025b:	c1 f9 09             	sar    ecx,0x9
1000025e:	89 da                	mov    edx,ebx
10000260:	d3 ef                	shr    edi,cl
10000262:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000265:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000268:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000026e:	eb 58                	jmp    100002c8 <_ssfn__zhuffman_decode+0xa9>
10000270:	89 d5                	mov    ebp,edx
10000272:	89 c3                	mov    ebx,eax
10000274:	be 0a 00 00 00       	mov    esi,0xa
10000279:	89 f8                	mov    eax,edi
1000027b:	e8 54 ff ff ff       	call   100001d4 <_ssfn__bitreverse16>
10000280:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000287:	7c 03                	jl     1000028c <_ssfn__zhuffman_decode+0x6d>
10000289:	46                   	inc    esi
1000028a:	eb f4                	jmp    10000280 <_ssfn__zhuffman_decode+0x61>
1000028c:	83 ca ff             	or     edx,0xffffffff
1000028f:	83 fe 10             	cmp    esi,0x10
10000292:	74 34                	je     100002c8 <_ssfn__zhuffman_decode+0xa9>
10000294:	8d 14 36             	lea    edx,[esi+esi*1]
10000297:	b9 10 00 00 00       	mov    ecx,0x10
1000029c:	01 ea                	add    edx,ebp
1000029e:	29 f1                	sub    ecx,esi
100002a0:	d3 f8                	sar    eax,cl
100002a2:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100002a9:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100002b0:	29 c8                	sub    eax,ecx
100002b2:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100002b5:	89 f1                	mov    ecx,esi
100002b7:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100002be:	d3 ef                	shr    edi,cl
100002c0:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100002c3:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002c8:	5b                   	pop    ebx
100002c9:	89 d0                	mov    eax,edx
100002cb:	5e                   	pop    esi
100002cc:	5f                   	pop    edi
100002cd:	5d                   	pop    ebp
100002ce:	c3                   	ret    

100002cf <_ssfn__zexpand>:
100002cf:	55                   	push   ebp
100002d0:	57                   	push   edi
100002d1:	56                   	push   esi
100002d2:	53                   	push   ebx
100002d3:	83 ec 0c             	sub    esp,0xc
100002d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002d9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002dc:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002df:	29 f9                	sub    ecx,edi
100002e1:	83 f9 08             	cmp    ecx,0x8
100002e4:	74 04                	je     100002ea <_ssfn__zexpand+0x1b>
100002e6:	31 c0                	xor    eax,eax
100002e8:	eb 3c                	jmp    10000326 <_ssfn__zexpand+0x57>
100002ea:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002ed:	75 f7                	jne    100002e6 <_ssfn__zexpand+0x17>
100002ef:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002f3:	75 f1                	jne    100002e6 <_ssfn__zexpand+0x17>
100002f5:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002f9:	75 eb                	jne    100002e6 <_ssfn__zexpand+0x17>
100002fb:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100002fe:	89 c3                	mov    ebx,eax
10000300:	89 d6                	mov    esi,edx
10000302:	50                   	push   eax
10000303:	50                   	push   eax
10000304:	55                   	push   ebp
10000305:	57                   	push   edi
10000306:	e8 fc ff ff ff       	call   10000307 <_ssfn__zexpand+0x38>	10000307: R_386_PC32	realloc
1000030b:	83 c4 10             	add    esp,0x10
1000030e:	85 c0                	test   eax,eax
10000310:	74 d4                	je     100002e6 <_ssfn__zexpand+0x17>
10000312:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000315:	29 fe                	sub    esi,edi
10000317:	01 c6                	add    esi,eax
10000319:	01 e8                	add    eax,ebp
1000031b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000031e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000321:	b8 01 00 00 00       	mov    eax,0x1
10000326:	83 c4 0c             	add    esp,0xc
10000329:	5b                   	pop    ebx
1000032a:	5e                   	pop    esi
1000032b:	5f                   	pop    edi
1000032c:	5d                   	pop    ebp
1000032d:	c3                   	ret    

1000032e <_ssfn__zbuild_huffman>:
1000032e:	55                   	push   ebp
1000032f:	57                   	push   edi
10000330:	56                   	push   esi
10000331:	53                   	push   ebx
10000332:	89 c3                	mov    ebx,eax
10000334:	81 ec a0 00 00 00    	sub    esp,0xa0
1000033a:	31 c0                	xor    eax,eax
1000033c:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000033f:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
10000343:	b9 11 00 00 00       	mov    ecx,0x11
10000348:	89 ef                	mov    edi,ebp
1000034a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000034e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000350:	b9 00 01 00 00       	mov    ecx,0x100
10000355:	89 df                	mov    edi,ebx
10000357:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000359:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000035c:	7d 0f                	jge    1000036d <_ssfn__zbuild_huffman+0x3f>
1000035e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
10000362:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000366:	40                   	inc    eax
10000367:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
1000036b:	eb ec                	jmp    10000359 <_ssfn__zbuild_huffman+0x2b>
1000036d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000375:	b9 01 00 00 00       	mov    ecx,0x1
1000037a:	b8 01 00 00 00       	mov    eax,0x1
1000037f:	89 c7                	mov    edi,eax
10000381:	d3 e7                	shl    edi,cl
10000383:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000387:	0f 8f 10 01 00 00    	jg     1000049d <_ssfn__zbuild_huffman+0x16f>
1000038d:	41                   	inc    ecx
1000038e:	83 f9 10             	cmp    ecx,0x10
10000391:	75 ec                	jne    1000037f <_ssfn__zbuild_huffman+0x51>
10000393:	31 ff                	xor    edi,edi
10000395:	31 f6                	xor    esi,esi
10000397:	b8 01 00 00 00       	mov    eax,0x1
1000039c:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100003a0:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100003a4:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100003ac:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100003b4:	01 ef                	add    edi,ebp
100003b6:	85 ed                	test   ebp,ebp
100003b8:	74 11                	je     100003cb <_ssfn__zbuild_huffman+0x9d>
100003ba:	ba 01 00 00 00       	mov    edx,0x1
100003bf:	88 c1                	mov    cl,al
100003c1:	d3 e2                	shl    edx,cl
100003c3:	39 fa                	cmp    edx,edi
100003c5:	0f 8c d2 00 00 00    	jl     1000049d <_ssfn__zbuild_huffman+0x16f>
100003cb:	89 fa                	mov    edx,edi
100003cd:	b9 10 00 00 00       	mov    ecx,0x10
100003d2:	01 ff                	add    edi,edi
100003d4:	29 c1                	sub    ecx,eax
100003d6:	01 ee                	add    esi,ebp
100003d8:	d3 e2                	shl    edx,cl
100003da:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003e1:	40                   	inc    eax
100003e2:	83 f8 10             	cmp    eax,0x10
100003e5:	75 b5                	jne    1000039c <_ssfn__zbuild_huffman+0x6e>
100003e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003ea:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003f8:	31 ff                	xor    edi,edi
100003fa:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100003fe:	0f 8d 9d 00 00 00    	jge    100004a1 <_ssfn__zbuild_huffman+0x173>
10000404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000408:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
1000040c:	89 f2                	mov    edx,esi
1000040e:	85 f6                	test   esi,esi
10000410:	0f 84 81 00 00 00    	je     10000497 <_ssfn__zbuild_huffman+0x169>
10000416:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000419:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
1000041d:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000420:	89 e9                	mov    ecx,ebp
10000422:	89 04 24             	mov    DWORD PTR [esp],eax
10000425:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
1000042c:	29 c1                	sub    ecx,eax
1000042e:	89 c8                	mov    eax,ecx
10000430:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000433:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000043a:	01 c8                	add    eax,ecx
1000043c:	83 fe 09             	cmp    esi,0x9
1000043f:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000446:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000044e:	7f 42                	jg     10000492 <_ssfn__zbuild_huffman+0x164>
10000450:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000454:	89 e8                	mov    eax,ebp
10000456:	e8 79 fd ff ff       	call   100001d4 <_ssfn__bitreverse16>
1000045b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000045f:	b9 10 00 00 00       	mov    ecx,0x10
10000464:	29 f1                	sub    ecx,esi
10000466:	d3 f8                	sar    eax,cl
10000468:	88 d1                	mov    cl,dl
1000046a:	89 04 24             	mov    DWORD PTR [esp],eax
1000046d:	89 f2                	mov    edx,esi
1000046f:	b8 01 00 00 00       	mov    eax,0x1
10000474:	c1 e2 09             	shl    edx,0x9
10000477:	d3 e0                	shl    eax,cl
10000479:	09 fa                	or     edx,edi
1000047b:	89 c1                	mov    ecx,eax
1000047d:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000484:	7f 0c                	jg     10000492 <_ssfn__zbuild_huffman+0x164>
10000486:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000489:	01 0c 24             	add    DWORD PTR [esp],ecx
1000048c:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10000490:	eb eb                	jmp    1000047d <_ssfn__zbuild_huffman+0x14f>
10000492:	45                   	inc    ebp
10000493:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
10000497:	47                   	inc    edi
10000498:	e9 5d ff ff ff       	jmp    100003fa <_ssfn__zbuild_huffman+0xcc>
1000049d:	31 c0                	xor    eax,eax
1000049f:	eb 05                	jmp    100004a6 <_ssfn__zbuild_huffman+0x178>
100004a1:	b8 01 00 00 00       	mov    eax,0x1
100004a6:	81 c4 a0 00 00 00    	add    esp,0xa0
100004ac:	5b                   	pop    ebx
100004ad:	5e                   	pop    esi
100004ae:	5f                   	pop    edi
100004af:	5d                   	pop    ebp
100004b0:	c3                   	ret    

100004b1 <_ssfn_fc.part.1>:
100004b1:	55                   	push   ebp
100004b2:	57                   	push   edi
100004b3:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100004b9:	56                   	push   esi
100004ba:	53                   	push   ebx
100004bb:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100004c1:	83 ec 0c             	sub    esp,0xc
100004c4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004c7:	74 5d                	je     10000526 <_ssfn_fc.part.1+0x75>
100004c9:	31 f6                	xor    esi,esi
100004cb:	8b 03                	mov    eax,DWORD PTR [ebx]
100004cd:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004d1:	74 35                	je     10000508 <_ssfn_fc.part.1+0x57>
100004d3:	31 ed                	xor    ebp,ebp
100004d5:	8b 03                	mov    eax,DWORD PTR [ebx]
100004d7:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004da:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004dd:	85 c0                	test   eax,eax
100004df:	74 0c                	je     100004ed <_ssfn_fc.part.1+0x3c>
100004e1:	83 ec 0c             	sub    esp,0xc
100004e4:	50                   	push   eax
100004e5:	e8 fc ff ff ff       	call   100004e6 <_ssfn_fc.part.1+0x35>	100004e6: R_386_PC32	free
100004ea:	83 c4 10             	add    esp,0x10
100004ed:	83 c5 04             	add    ebp,0x4
100004f0:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004f6:	75 dd                	jne    100004d5 <_ssfn_fc.part.1+0x24>
100004f8:	83 ec 0c             	sub    esp,0xc
100004fb:	8b 03                	mov    eax,DWORD PTR [ebx]
100004fd:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000500:	e8 fc ff ff ff       	call   10000501 <_ssfn_fc.part.1+0x50>	10000501: R_386_PC32	free
10000505:	83 c4 10             	add    esp,0x10
10000508:	83 c6 04             	add    esi,0x4
1000050b:	81 fe 00 04 00 00    	cmp    esi,0x400
10000511:	75 b8                	jne    100004cb <_ssfn_fc.part.1+0x1a>
10000513:	83 ec 0c             	sub    esp,0xc
10000516:	ff 33                	push   DWORD PTR [ebx]
10000518:	e8 fc ff ff ff       	call   10000519 <_ssfn_fc.part.1+0x68>	10000519: R_386_PC32	free
1000051d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000523:	83 c4 10             	add    esp,0x10
10000526:	83 c3 04             	add    ebx,0x4
10000529:	39 fb                	cmp    ebx,edi
1000052b:	75 97                	jne    100004c4 <_ssfn_fc.part.1+0x13>
1000052d:	83 c4 0c             	add    esp,0xc
10000530:	5b                   	pop    ebx
10000531:	5e                   	pop    esi
10000532:	5f                   	pop    edi
10000533:	5d                   	pop    ebp
10000534:	c3                   	ret    

10000535 <_ssfn_l>:
10000535:	57                   	push   edi
10000536:	56                   	push   esi
10000537:	53                   	push   ebx
10000538:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000053c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000540:	39 ce                	cmp    esi,ecx
10000542:	89 f3                	mov    ebx,esi
10000544:	0f 9d c1             	setge  cl
10000547:	c1 eb 1f             	shr    ebx,0x1f
1000054a:	09 d9                	or     ecx,ebx
1000054c:	89 fb                	mov    ebx,edi
1000054e:	c1 eb 1f             	shr    ebx,0x1f
10000551:	08 d9                	or     cl,bl
10000553:	0f 85 e9 00 00 00    	jne    10000642 <_ssfn_l+0x10d>
10000559:	39 d7                	cmp    edi,edx
1000055b:	0f 8d e1 00 00 00    	jge    10000642 <_ssfn_l+0x10d>
10000561:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000567:	8d 51 08             	lea    edx,[ecx+0x8]
1000056a:	8d 4f 08             	lea    ecx,[edi+0x8]
1000056d:	c1 fa 04             	sar    edx,0x4
10000570:	c1 f9 04             	sar    ecx,0x4
10000573:	39 ca                	cmp    edx,ecx
10000575:	75 1a                	jne    10000591 <_ssfn_l+0x5c>
10000577:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
1000057d:	8d 4e 08             	lea    ecx,[esi+0x8]
10000580:	83 c2 08             	add    edx,0x8
10000583:	c1 f9 04             	sar    ecx,0x4
10000586:	c1 fa 04             	sar    edx,0x4
10000589:	39 ca                	cmp    edx,ecx
1000058b:	0f 84 b1 00 00 00    	je     10000642 <_ssfn_l+0x10d>
10000591:	89 c3                	mov    ebx,eax
10000593:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
10000599:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
1000059f:	7f 3e                	jg     100005df <_ssfn_l+0xaa>
100005a1:	05 00 02 00 00       	add    eax,0x200
100005a6:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100005ac:	52                   	push   edx
100005ad:	01 c0                	add    eax,eax
100005af:	52                   	push   edx
100005b0:	50                   	push   eax
100005b1:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100005b7:	e8 fc ff ff ff       	call   100005b8 <_ssfn_l+0x83>	100005b8: R_386_PC32	realloc
100005bc:	83 c4 10             	add    esp,0x10
100005bf:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005c5:	85 c0                	test   eax,eax
100005c7:	75 16                	jne    100005df <_ssfn_l+0xaa>
100005c9:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005d3:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005dd:	eb 63                	jmp    10000642 <_ssfn_l+0x10d>
100005df:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005e6:	75 26                	jne    1000060e <_ssfn_l+0xd9>
100005e8:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005ee:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005f4:	66 89 10             	mov    WORD PTR [eax],dx
100005f7:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005fd:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000603:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000607:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000060e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000614:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000061a:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000061e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000624:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000062a:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000062f:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000635:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000063c:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000642:	5b                   	pop    ebx
10000643:	5e                   	pop    esi
10000644:	5f                   	pop    edi
10000645:	c3                   	ret    

10000646 <_ssfn_b>:
10000646:	55                   	push   ebp
10000647:	57                   	push   edi
10000648:	56                   	push   esi
10000649:	53                   	push   ebx
1000064a:	83 ec 4c             	sub    esp,0x4c
1000064d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000651:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000655:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000659:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000065d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000661:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000665:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000669:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
1000066d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000671:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000675:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000679:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
1000067d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000681:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000685:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000689:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10000690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000694:	83 f8 04             	cmp    eax,0x4
10000697:	75 28                	jne    100006c1 <_ssfn_b+0x7b>
10000699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000069d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100006a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100006a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100006a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100006b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100006b5:	83 c4 4c             	add    esp,0x4c
100006b8:	5b                   	pop    ebx
100006b9:	5e                   	pop    esi
100006ba:	5f                   	pop    edi
100006bb:	5d                   	pop    ebp
100006bc:	e9 74 fe ff ff       	jmp    10000535 <_ssfn_l>
100006c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006c5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006c9:	75 0e                	jne    100006d9 <_ssfn_b+0x93>
100006cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006cf:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006d3:	0f 84 19 01 00 00    	je     100007f2 <_ssfn_b+0x1ac>
100006d9:	be 02 00 00 00       	mov    esi,0x2
100006de:	89 d8                	mov    eax,ebx
100006e0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006e4:	99                   	cdq    
100006e5:	f7 fe                	idiv   esi
100006e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006ef:	89 e8                	mov    eax,ebp
100006f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006f5:	99                   	cdq    
100006f6:	f7 fe                	idiv   esi
100006f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
100006fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000700:	89 f8                	mov    eax,edi
10000702:	29 d8                	sub    eax,ebx
10000704:	99                   	cdq    
10000705:	f7 fe                	idiv   esi
10000707:	01 c3                	add    ebx,eax
10000709:	89 c8                	mov    eax,ecx
1000070b:	29 e8                	sub    eax,ebp
1000070d:	99                   	cdq    
1000070e:	f7 fe                	idiv   esi
10000710:	01 e8                	add    eax,ebp
10000712:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000071a:	29 f8                	sub    eax,edi
1000071c:	99                   	cdq    
1000071d:	f7 fe                	idiv   esi
1000071f:	01 f8                	add    eax,edi
10000721:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000725:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000072d:	29 c8                	sub    eax,ecx
1000072f:	99                   	cdq    
10000730:	f7 fe                	idiv   esi
10000732:	01 c8                	add    eax,ecx
10000734:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000738:	89 d8                	mov    eax,ebx
1000073a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000073e:	99                   	cdq    
1000073f:	f7 fe                	idiv   esi
10000741:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000074c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000750:	99                   	cdq    
10000751:	f7 fe                	idiv   esi
10000753:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000756:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000075a:	29 d8                	sub    eax,ebx
1000075c:	99                   	cdq    
1000075d:	f7 fe                	idiv   esi
1000075f:	83 ec 0c             	sub    esp,0xc
10000762:	01 d8                	add    eax,ebx
10000764:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000768:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000076c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10000770:	99                   	cdq    
10000771:	f7 fe                	idiv   esi
10000773:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000777:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000077b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000077f:	29 c8                	sub    eax,ecx
10000781:	99                   	cdq    
10000782:	f7 fe                	idiv   esi
10000784:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000787:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000078b:	29 e8                	sub    eax,ebp
1000078d:	99                   	cdq    
1000078e:	f7 fe                	idiv   esi
10000790:	8d 34 28             	lea    esi,[eax+ebp*1]
10000793:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000797:	8d 78 01             	lea    edi,[eax+0x1]
1000079a:	57                   	push   edi
1000079b:	56                   	push   esi
1000079c:	53                   	push   ebx
1000079d:	55                   	push   ebp
1000079e:	51                   	push   ecx
1000079f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007af:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007b3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007bb:	e8 86 fe ff ff       	call   10000646 <_ssfn_b>
100007c0:	83 c4 24             	add    esp,0x24
100007c3:	57                   	push   edi
100007c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007d8:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007dc:	56                   	push   esi
100007dd:	53                   	push   ebx
100007de:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007e2:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007ea:	e8 57 fe ff ff       	call   10000646 <_ssfn_b>
100007ef:	83 c4 30             	add    esp,0x30
100007f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007f7:	0f 85 9c fe ff ff    	jne    10000699 <_ssfn_b+0x53>
100007fd:	83 c4 4c             	add    esp,0x4c
10000800:	5b                   	pop    ebx
10000801:	5e                   	pop    esi
10000802:	5f                   	pop    edi
10000803:	5d                   	pop    ebp
10000804:	c3                   	ret    

10000805 <_ssfn__zreceive>:
10000805:	56                   	push   esi
10000806:	53                   	push   ebx
10000807:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000080a:	7d 1d                	jge    10000829 <_ssfn__zreceive+0x24>
1000080c:	8b 18                	mov    ebx,DWORD PTR [eax]
1000080e:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000811:	89 08                	mov    DWORD PTR [eax],ecx
10000813:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000816:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000819:	d3 e3                	shl    ebx,cl
1000081b:	83 c1 08             	add    ecx,0x8
1000081e:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000821:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000824:	83 f9 18             	cmp    ecx,0x18
10000827:	7e e3                	jle    1000080c <_ssfn__zreceive+0x7>
10000829:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
1000082c:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000082f:	89 f3                	mov    ebx,esi
10000831:	88 d1                	mov    cl,dl
10000833:	d3 eb                	shr    ebx,cl
10000835:	88 d1                	mov    cl,dl
10000837:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000083a:	bb 01 00 00 00       	mov    ebx,0x1
1000083f:	d3 e3                	shl    ebx,cl
10000841:	8d 43 ff             	lea    eax,[ebx-0x1]
10000844:	5b                   	pop    ebx
10000845:	21 f0                	and    eax,esi
10000847:	5e                   	pop    esi
10000848:	c3                   	ret    

10000849 <ssfn_utf8>:
10000849:	56                   	push   esi
1000084a:	53                   	push   ebx
1000084b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000084f:	8b 11                	mov    edx,DWORD PTR [ecx]
10000851:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000854:	89 f0                	mov    eax,esi
10000856:	84 c0                	test   al,al
10000858:	0f be d8             	movsx  ebx,al
1000085b:	78 04                	js     10000861 <ssfn_utf8+0x18>
1000085d:	89 d8                	mov    eax,ebx
1000085f:	eb 7d                	jmp    100008de <ssfn_utf8+0x95>
10000861:	f7 c6 20 00 00 00    	test   esi,0x20
10000867:	75 14                	jne    1000087d <ssfn_utf8+0x34>
10000869:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
1000086c:	c1 e3 06             	shl    ebx,0x6
1000086f:	83 e0 3f             	and    eax,0x3f
10000872:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000878:	42                   	inc    edx
10000879:	09 d8                	or     eax,ebx
1000087b:	eb 5f                	jmp    100008dc <ssfn_utf8+0x93>
1000087d:	f7 c6 10 00 00 00    	test   esi,0x10
10000883:	75 20                	jne    100008a5 <ssfn_utf8+0x5c>
10000885:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000889:	c1 e3 0c             	shl    ebx,0xc
1000088c:	c1 e0 06             	shl    eax,0x6
1000088f:	0f b7 db             	movzx  ebx,bx
10000892:	25 c0 0f 00 00       	and    eax,0xfc0
10000897:	83 c2 02             	add    edx,0x2
1000089a:	09 d8                	or     eax,ebx
1000089c:	8a 1a                	mov    bl,BYTE PTR [edx]
1000089e:	83 e3 3f             	and    ebx,0x3f
100008a1:	09 d8                	or     eax,ebx
100008a3:	eb 37                	jmp    100008dc <ssfn_utf8+0x93>
100008a5:	31 c0                	xor    eax,eax
100008a7:	83 e6 08             	and    esi,0x8
100008aa:	75 32                	jne    100008de <ssfn_utf8+0x95>
100008ac:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100008b0:	c1 e3 12             	shl    ebx,0x12
100008b3:	c1 e0 0c             	shl    eax,0xc
100008b6:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100008bc:	25 00 f0 03 00       	and    eax,0x3f000
100008c1:	83 c2 03             	add    edx,0x3
100008c4:	09 d8                	or     eax,ebx
100008c6:	8a 1a                	mov    bl,BYTE PTR [edx]
100008c8:	83 e3 3f             	and    ebx,0x3f
100008cb:	09 d8                	or     eax,ebx
100008cd:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008d1:	c1 e3 06             	shl    ebx,0x6
100008d4:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008da:	09 d8                	or     eax,ebx
100008dc:	89 11                	mov    DWORD PTR [ecx],edx
100008de:	ff 01                	inc    DWORD PTR [ecx]
100008e0:	5b                   	pop    ebx
100008e1:	5e                   	pop    esi
100008e2:	c3                   	ret    

100008e3 <_ssfn_c>:
100008e3:	55                   	push   ebp
100008e4:	57                   	push   edi
100008e5:	56                   	push   esi
100008e6:	53                   	push   ebx
100008e7:	83 ec 14             	sub    esp,0x14
100008ea:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008f0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008f4:	85 c0                	test   eax,eax
100008f6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
100008fc:	0f 84 e6 00 00 00    	je     100009e8 <_ssfn_c+0x105>
10000902:	31 ff                	xor    edi,edi
10000904:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000908:	0f 84 f3 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
1000090e:	85 d2                	test   edx,edx
10000910:	0f 84 eb 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
10000916:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000919:	0f 84 e2 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
1000091f:	89 d6                	mov    esi,edx
10000921:	89 cd                	mov    ebp,ecx
10000923:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000926:	89 c3                	mov    ebx,eax
10000928:	85 d2                	test   edx,edx
1000092a:	74 38                	je     10000964 <_ssfn_c+0x81>
1000092c:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000092f:	31 c0                	xor    eax,eax
10000931:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000937:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000093b:	66 85 d2             	test   dx,dx
1000093e:	74 24                	je     10000964 <_ssfn_c+0x81>
10000940:	01 da                	add    edx,ebx
10000942:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000946:	8a 0a                	mov    cl,BYTE PTR [edx]
10000948:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000094c:	84 c9                	test   cl,cl
1000094e:	0f 84 9e 00 00 00    	je     100009f2 <_ssfn_c+0x10f>
10000954:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000956:	0f 85 90 00 00 00    	jne    100009ec <_ssfn_c+0x109>
1000095c:	47                   	inc    edi
1000095d:	42                   	inc    edx
1000095e:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000962:	eb e2                	jmp    10000946 <_ssfn_c+0x63>
10000964:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000968:	8d 44 24 10          	lea    eax,[esp+0x10]
1000096c:	50                   	push   eax
1000096d:	e8 fc ff ff ff       	call   1000096e <_ssfn_c+0x8b>	1000096e: R_386_PC32	ssfn_utf8
10000972:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000976:	29 f2                	sub    edx,esi
10000978:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
1000097b:	5a                   	pop    edx
1000097c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000980:	89 06                	mov    DWORD PTR [esi],eax
10000982:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000985:	89 df                	mov    edi,ebx
10000987:	31 db                	xor    ebx,ebx
10000989:	8a 17                	mov    dl,BYTE PTR [edi]
1000098b:	80 fa ff             	cmp    dl,0xff
1000098e:	75 08                	jne    10000998 <_ssfn_c+0xb5>
10000990:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000996:	eb 2a                	jmp    100009c2 <_ssfn_c+0xdf>
10000998:	88 d1                	mov    cl,dl
1000099a:	83 e1 c0             	and    ecx,0xffffffc0
1000099d:	80 f9 c0             	cmp    cl,0xc0
100009a0:	75 16                	jne    100009b8 <_ssfn_c+0xd5>
100009a2:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009a6:	c1 e2 08             	shl    edx,0x8
100009a9:	83 c7 02             	add    edi,0x2
100009ac:	81 e2 00 3f 00 00    	and    edx,0x3f00
100009b2:	09 ca                	or     edx,ecx
100009b4:	01 d3                	add    ebx,edx
100009b6:	eb 27                	jmp    100009df <_ssfn_c+0xfc>
100009b8:	80 f9 80             	cmp    cl,0x80
100009bb:	75 08                	jne    100009c5 <_ssfn_c+0xe2>
100009bd:	83 e2 3f             	and    edx,0x3f
100009c0:	01 d3                	add    ebx,edx
100009c2:	47                   	inc    edi
100009c3:	eb 1a                	jmp    100009df <_ssfn_c+0xfc>
100009c5:	39 d8                	cmp    eax,ebx
100009c7:	74 38                	je     10000a01 <_ssfn_c+0x11e>
100009c9:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009cd:	83 e2 40             	and    edx,0x40
100009d0:	80 fa 01             	cmp    dl,0x1
100009d3:	19 d2                	sbb    edx,edx
100009d5:	83 c2 06             	add    edx,0x6
100009d8:	0f af d1             	imul   edx,ecx
100009db:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009df:	43                   	inc    ebx
100009e0:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009e6:	76 a1                	jbe    10000989 <_ssfn_c+0xa6>
100009e8:	31 ff                	xor    edi,edi
100009ea:	eb 15                	jmp    10000a01 <_ssfn_c+0x11e>
100009ec:	40                   	inc    eax
100009ed:	e9 42 ff ff ff       	jmp    10000934 <_ssfn_c+0x51>
100009f2:	29 f7                	sub    edi,esi
100009f4:	05 00 f0 00 00       	add    eax,0xf000
100009f9:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
100009fc:	e9 7b ff ff ff       	jmp    1000097c <_ssfn_c+0x99>
10000a01:	83 c4 14             	add    esp,0x14
10000a04:	89 f8                	mov    eax,edi
10000a06:	5b                   	pop    ebx
10000a07:	5e                   	pop    esi
10000a08:	5f                   	pop    edi
10000a09:	5d                   	pop    ebp
10000a0a:	c3                   	ret    

10000a0b <_ssfn_zlib_decode>:
10000a0b:	55                   	push   ebp
10000a0c:	57                   	push   edi
10000a0d:	56                   	push   esi
10000a0e:	53                   	push   ebx
10000a0f:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000a15:	6a 08                	push   0x8
10000a17:	e8 fc ff ff ff       	call   10000a18 <_ssfn_zlib_decode+0xd>	10000a18: R_386_PC32	malloc
10000a1c:	83 c4 10             	add    esp,0x10
10000a1f:	89 c2                	mov    edx,eax
10000a21:	85 c0                	test   eax,eax
10000a23:	0f 84 eb 04 00 00    	je     10000f14 <_ssfn_zlib_decode+0x509>
10000a29:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a30:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a37:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a3e:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a45:	31 c0                	xor    eax,eax
10000a47:	83 c2 08             	add    edx,0x8
10000a4a:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a51:	c6 80 00 5b 03 10 08 	mov    BYTE PTR [eax+0x10035b00],0x8	10000a53: R_386_32	.bss
10000a58:	40                   	inc    eax
10000a59:	3d 90 00 00 00       	cmp    eax,0x90
10000a5e:	75 f1                	jne    10000a51 <_ssfn_zlib_decode+0x46>
10000a60:	c6 80 00 5b 03 10 09 	mov    BYTE PTR [eax+0x10035b00],0x9	10000a62: R_386_32	.bss
10000a67:	40                   	inc    eax
10000a68:	3d 00 01 00 00       	cmp    eax,0x100
10000a6d:	75 f1                	jne    10000a60 <_ssfn_zlib_decode+0x55>
10000a6f:	c6 80 00 5b 03 10 07 	mov    BYTE PTR [eax+0x10035b00],0x7	10000a71: R_386_32	.bss
10000a76:	40                   	inc    eax
10000a77:	3d 18 01 00 00       	cmp    eax,0x118
10000a7c:	75 f1                	jne    10000a6f <_ssfn_zlib_decode+0x64>
10000a7e:	c7 05 18 5c 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035c18,0x8080808	10000a80: R_386_32	.bss
10000a88:	c7 05 1c 5c 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035c1c,0x8080808	10000a8a: R_386_32	.bss
10000a92:	31 c0                	xor    eax,eax
10000a94:	c6 80 e0 5a 03 10 05 	mov    BYTE PTR [eax+0x10035ae0],0x5	10000a96: R_386_32	.bss
10000a9b:	40                   	inc    eax
10000a9c:	83 f8 20             	cmp    eax,0x20
10000a9f:	75 f3                	jne    10000a94 <_ssfn_zlib_decode+0x89>
10000aa1:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000aac:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000ab7:	ba 01 00 00 00       	mov    edx,0x1
10000abc:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ac3:	e8 3d fd ff ff       	call   10000805 <_ssfn__zreceive>
10000ac8:	ba 02 00 00 00       	mov    edx,0x2
10000acd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000ad1:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ad8:	e8 28 fd ff ff       	call   10000805 <_ssfn__zreceive>
10000add:	89 c6                	mov    esi,eax
10000adf:	85 c0                	test   eax,eax
10000ae1:	0f 85 09 01 00 00    	jne    10000bf0 <_ssfn_zlib_decode+0x1e5>
10000ae7:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000aee:	83 e2 07             	and    edx,0x7
10000af1:	74 0c                	je     10000aff <_ssfn_zlib_decode+0xf4>
10000af3:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000afa:	e8 06 fd ff ff       	call   10000805 <_ssfn__zreceive>
10000aff:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000b06:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000b0d:	31 c0                	xor    eax,eax
10000b0f:	31 db                	xor    ebx,ebx
10000b11:	85 d2                	test   edx,edx
10000b13:	7f 14                	jg     10000b29 <_ssfn_zlib_decode+0x11e>
10000b15:	84 db                	test   bl,bl
10000b17:	74 22                	je     10000b3b <_ssfn_zlib_decode+0x130>
10000b19:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000b20:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b27:	eb 12                	jmp    10000b3b <_ssfn_zlib_decode+0x130>
10000b29:	40                   	inc    eax
10000b2a:	83 ea 08             	sub    edx,0x8
10000b2d:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b34:	b3 01                	mov    bl,0x1
10000b36:	c1 e9 08             	shr    ecx,0x8
10000b39:	eb d6                	jmp    10000b11 <_ssfn_zlib_decode+0x106>
10000b3b:	83 f8 04             	cmp    eax,0x4
10000b3e:	74 1d                	je     10000b5d <_ssfn_zlib_decode+0x152>
10000b40:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b47:	40                   	inc    eax
10000b48:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b4b:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b52:	8a 12                	mov    dl,BYTE PTR [edx]
10000b54:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b5b:	eb de                	jmp    10000b3b <_ssfn_zlib_decode+0x130>
10000b5d:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b65:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b6d:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b75:	c1 e3 08             	shl    ebx,0x8
10000b78:	01 c3                	add    ebx,eax
10000b7a:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b82:	c1 e0 08             	shl    eax,0x8
10000b85:	01 d0                	add    eax,edx
10000b87:	89 da                	mov    edx,ebx
10000b89:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b8f:	39 d0                	cmp    eax,edx
10000b91:	0f 85 69 03 00 00    	jne    10000f00 <_ssfn_zlib_decode+0x4f5>
10000b97:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000b9e:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ba1:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ba8:	73 14                	jae    10000bbe <_ssfn_zlib_decode+0x1b3>
10000baa:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bb1:	e8 19 f7 ff ff       	call   100002cf <_ssfn__zexpand>
10000bb6:	85 c0                	test   eax,eax
10000bb8:	0f 84 42 03 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000bbe:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000bc5:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000bcc:	39 f3                	cmp    ebx,esi
10000bce:	74 09                	je     10000bd9 <_ssfn_zlib_decode+0x1ce>
10000bd0:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000bd3:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000bd6:	46                   	inc    esi
10000bd7:	eb e5                	jmp    10000bbe <_ssfn_zlib_decode+0x1b3>
10000bd9:	01 da                	add    edx,ebx
10000bdb:	01 c3                	add    ebx,eax
10000bdd:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000be4:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000beb:	e9 fc 02 00 00       	jmp    10000eec <_ssfn_zlib_decode+0x4e1>
10000bf0:	83 f8 03             	cmp    eax,0x3
10000bf3:	0f 84 07 03 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000bf9:	4e                   	dec    esi
10000bfa:	75 2d                	jne    10000c29 <_ssfn_zlib_decode+0x21e>
10000bfc:	b9 20 01 00 00       	mov    ecx,0x120
10000c01:	ba 00 5b 03 10       	mov    edx,0x10035b00	10000c02: R_386_32	.bss
10000c06:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000c0d:	e8 1c f7 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000c12:	85 c0                	test   eax,eax
10000c14:	0f 84 e6 02 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000c1a:	b9 20 00 00 00       	mov    ecx,0x20
10000c1f:	ba e0 5a 03 10       	mov    edx,0x10035ae0	10000c20: R_386_32	.bss
10000c24:	e9 78 01 00 00       	jmp    10000da1 <_ssfn_zlib_decode+0x396>
10000c29:	ba 05 00 00 00       	mov    edx,0x5
10000c2e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c35:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c39:	e8 c7 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c3e:	89 df                	mov    edi,ebx
10000c40:	ba 05 00 00 00       	mov    edx,0x5
10000c45:	89 c5                	mov    ebp,eax
10000c47:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c4e:	e8 b2 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c53:	ba 04 00 00 00       	mov    edx,0x4
10000c58:	89 c6                	mov    esi,eax
10000c5a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c61:	e8 9f fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c66:	b9 13 00 00 00       	mov    ecx,0x13
10000c6b:	83 c0 04             	add    eax,0x4
10000c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c72:	31 c0                	xor    eax,eax
10000c74:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c76:	31 ff                	xor    edi,edi
10000c78:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c7c:	7e 1f                	jle    10000c9d <_ssfn_zlib_decode+0x292>
10000c7e:	ba 03 00 00 00       	mov    edx,0x3
10000c83:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c8a:	47                   	inc    edi
10000c8b:	e8 75 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c90:	0f b6 97 5f 56 00 10 	movzx  edx,BYTE PTR [edi+0x1000565f]	10000c93: R_386_32	.text
10000c97:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c9b:	eb db                	jmp    10000c78 <_ssfn_zlib_decode+0x26d>
10000c9d:	b9 13 00 00 00       	mov    ecx,0x13
10000ca2:	89 da                	mov    edx,ebx
10000ca4:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000cab:	e8 7e f6 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000cb0:	85 c0                	test   eax,eax
10000cb2:	0f 84 48 02 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000cb8:	8d 46 01             	lea    eax,[esi+0x1]
10000cbb:	81 c5 01 01 00 00    	add    ebp,0x101
10000cc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cc5:	31 f6                	xor    esi,esi
10000cc7:	01 e8                	add    eax,ebp
10000cc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000ccd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cd1:	0f 8e 9f 00 00 00    	jle    10000d76 <_ssfn_zlib_decode+0x36b>
10000cd7:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000cde:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ce5:	e8 35 f5 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000cea:	83 f8 12             	cmp    eax,0x12
10000ced:	0f 87 0d 02 00 00    	ja     10000f00 <_ssfn_zlib_decode+0x4f5>
10000cf3:	83 f8 0f             	cmp    eax,0xf
10000cf6:	7f 07                	jg     10000cff <_ssfn_zlib_decode+0x2f4>
10000cf8:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000cfc:	46                   	inc    esi
10000cfd:	eb ce                	jmp    10000ccd <_ssfn_zlib_decode+0x2c2>
10000cff:	83 f8 10             	cmp    eax,0x10
10000d02:	75 22                	jne    10000d26 <_ssfn_zlib_decode+0x31b>
10000d04:	ba 02 00 00 00       	mov    edx,0x2
10000d09:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d10:	e8 f0 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d15:	85 f6                	test   esi,esi
10000d17:	8d 58 03             	lea    ebx,[eax+0x3]
10000d1a:	0f 84 e0 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d20:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d24:	eb 31                	jmp    10000d57 <_ssfn_zlib_decode+0x34c>
10000d26:	83 f8 11             	cmp    eax,0x11
10000d29:	75 16                	jne    10000d41 <_ssfn_zlib_decode+0x336>
10000d2b:	ba 03 00 00 00       	mov    edx,0x3
10000d30:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d37:	e8 c9 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d3c:	8d 58 03             	lea    ebx,[eax+0x3]
10000d3f:	eb 14                	jmp    10000d55 <_ssfn_zlib_decode+0x34a>
10000d41:	ba 07 00 00 00       	mov    edx,0x7
10000d46:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d4d:	e8 b3 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d52:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d55:	31 c0                	xor    eax,eax
10000d57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d5b:	29 f2                	sub    edx,esi
10000d5d:	39 da                	cmp    edx,ebx
10000d5f:	0f 8c 9b 01 00 00    	jl     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d65:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d69:	89 d9                	mov    ecx,ebx
10000d6b:	89 d7                	mov    edi,edx
10000d6d:	01 de                	add    esi,ebx
10000d6f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d71:	e9 57 ff ff ff       	jmp    10000ccd <_ssfn_zlib_decode+0x2c2>
10000d76:	0f 85 84 01 00 00    	jne    10000f00 <_ssfn_zlib_decode+0x4f5>
10000d7c:	89 e9                	mov    ecx,ebp
10000d7e:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d82:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d89:	e8 a0 f5 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000d8e:	85 c0                	test   eax,eax
10000d90:	0f 84 6a 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d96:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000d9e:	8d 14 28             	lea    edx,[eax+ebp*1]
10000da1:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000da8:	e8 81 f5 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000dad:	85 c0                	test   eax,eax
10000daf:	0f 84 4b 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000db5:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dbc:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000dc3:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dca:	e8 50 f4 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000dcf:	89 c3                	mov    ebx,eax
10000dd1:	3d ff 00 00 00       	cmp    eax,0xff
10000dd6:	7f 34                	jg     10000e0c <_ssfn_zlib_decode+0x401>
10000dd8:	85 c0                	test   eax,eax
10000dda:	0f 88 20 01 00 00    	js     10000f00 <_ssfn_zlib_decode+0x4f5>
10000de0:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000de7:	77 1d                	ja     10000e06 <_ssfn_zlib_decode+0x3fb>
10000de9:	89 ea                	mov    edx,ebp
10000deb:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000df2:	e8 d8 f4 ff ff       	call   100002cf <_ssfn__zexpand>
10000df7:	85 c0                	test   eax,eax
10000df9:	0f 84 01 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000dff:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e06:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000e09:	45                   	inc    ebp
10000e0a:	eb b0                	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000e0c:	3d 00 01 00 00       	cmp    eax,0x100
10000e11:	75 0c                	jne    10000e1f <_ssfn_zlib_decode+0x414>
10000e13:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000e1a:	e9 cd 00 00 00       	jmp    10000eec <_ssfn_zlib_decode+0x4e1>
10000e1f:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e25:	8b 14 85 80 57 00 10 	mov    edx,DWORD PTR [eax*4+0x10005780]	10000e28: R_386_32	.text
10000e2c:	8b 1c 85 00 58 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005800]	10000e2f: R_386_32	.text
10000e33:	85 d2                	test   edx,edx
10000e35:	74 0e                	je     10000e45 <_ssfn_zlib_decode+0x43a>
10000e37:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e3e:	e8 c2 f9 ff ff       	call   10000805 <_ssfn__zreceive>
10000e43:	01 c3                	add    ebx,eax
10000e45:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e4c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e53:	e8 c7 f3 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000e58:	85 c0                	test   eax,eax
10000e5a:	0f 88 a0 00 00 00    	js     10000f00 <_ssfn_zlib_decode+0x4f5>
10000e60:	8b 14 85 80 56 00 10 	mov    edx,DWORD PTR [eax*4+0x10005680]	10000e63: R_386_32	.text
10000e67:	8b 3c 85 00 57 00 10 	mov    edi,DWORD PTR [eax*4+0x10005700]	10000e6a: R_386_32	.text
10000e6e:	85 d2                	test   edx,edx
10000e70:	74 0e                	je     10000e80 <_ssfn_zlib_decode+0x475>
10000e72:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e79:	e8 87 f9 ff ff       	call   10000805 <_ssfn__zreceive>
10000e7e:	01 c7                	add    edi,eax
10000e80:	89 e8                	mov    eax,ebp
10000e82:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e89:	39 f8                	cmp    eax,edi
10000e8b:	7c 73                	jl     10000f00 <_ssfn_zlib_decode+0x4f5>
10000e8d:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e91:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e98:	73 19                	jae    10000eb3 <_ssfn_zlib_decode+0x4a8>
10000e9a:	89 ea                	mov    edx,ebp
10000e9c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ea3:	e8 27 f4 ff ff       	call   100002cf <_ssfn__zexpand>
10000ea8:	85 c0                	test   eax,eax
10000eaa:	74 54                	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000eac:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000eb3:	89 ee                	mov    esi,ebp
10000eb5:	29 fe                	sub    esi,edi
10000eb7:	4f                   	dec    edi
10000eb8:	75 19                	jne    10000ed3 <_ssfn_zlib_decode+0x4c8>
10000eba:	85 db                	test   ebx,ebx
10000ebc:	0f 84 fa fe ff ff    	je     10000dbc <_ssfn_zlib_decode+0x3b1>
10000ec2:	8a 06                	mov    al,BYTE PTR [esi]
10000ec4:	01 eb                	add    ebx,ebp
10000ec6:	45                   	inc    ebp
10000ec7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000eca:	39 dd                	cmp    ebp,ebx
10000ecc:	75 f8                	jne    10000ec6 <_ssfn_zlib_decode+0x4bb>
10000ece:	e9 e9 fe ff ff       	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000ed3:	85 db                	test   ebx,ebx
10000ed5:	0f 84 e1 fe ff ff    	je     10000dbc <_ssfn_zlib_decode+0x3b1>
10000edb:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000ede:	89 ef                	mov    edi,ebp
10000ee0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000ee1:	39 f0                	cmp    eax,esi
10000ee3:	75 fb                	jne    10000ee0 <_ssfn_zlib_decode+0x4d5>
10000ee5:	01 dd                	add    ebp,ebx
10000ee7:	e9 d0 fe ff ff       	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000eec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000ef1:	0f 84 c0 fb ff ff    	je     10000ab7 <_ssfn_zlib_decode+0xac>
10000ef7:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000efe:	eb 14                	jmp    10000f14 <_ssfn_zlib_decode+0x509>
10000f00:	83 ec 0c             	sub    esp,0xc
10000f03:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000f0a:	e8 fc ff ff ff       	call   10000f0b <_ssfn_zlib_decode+0x500>	10000f0b: R_386_PC32	free
10000f0f:	83 c4 10             	add    esp,0x10
10000f12:	31 c0                	xor    eax,eax
10000f14:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000f1a:	5b                   	pop    ebx
10000f1b:	5e                   	pop    esi
10000f1c:	5f                   	pop    edi
10000f1d:	5d                   	pop    ebp
10000f1e:	c3                   	ret    

10000f1f <ssfn_load>:
10000f1f:	55                   	push   ebp
10000f20:	57                   	push   edi
10000f21:	56                   	push   esi
10000f22:	53                   	push   ebx
10000f23:	83 ec 1c             	sub    esp,0x1c
10000f26:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f2a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f2e:	85 ff                	test   edi,edi
10000f30:	0f 84 d0 01 00 00    	je     10001106 <ssfn_load+0x1e7>
10000f36:	85 f6                	test   esi,esi
10000f38:	0f 84 c8 01 00 00    	je     10001106 <ssfn_load+0x1e7>
10000f3e:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f41:	0f 85 a8 00 00 00    	jne    10000fef <ssfn_load+0xd0>
10000f47:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f4b:	0f 85 9e 00 00 00    	jne    10000fef <ssfn_load+0xd0>
10000f51:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f55:	74 0a                	je     10000f61 <ssfn_load+0x42>
10000f57:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f5c:	e9 aa 01 00 00       	jmp    1000110b <ssfn_load+0x1ec>
10000f61:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f64:	a8 04                	test   al,0x4
10000f66:	75 05                	jne    10000f6d <ssfn_load+0x4e>
10000f68:	83 c6 0a             	add    esi,0xa
10000f6b:	eb 08                	jmp    10000f75 <ssfn_load+0x56>
10000f6d:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f71:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f75:	a8 08                	test   al,0x8
10000f77:	74 07                	je     10000f80 <ssfn_load+0x61>
10000f79:	46                   	inc    esi
10000f7a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f7e:	eb f7                	jmp    10000f77 <ssfn_load+0x58>
10000f80:	a8 10                	test   al,0x10
10000f82:	74 07                	je     10000f8b <ssfn_load+0x6c>
10000f84:	46                   	inc    esi
10000f85:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f89:	eb f7                	jmp    10000f82 <ssfn_load+0x63>
10000f8b:	83 ec 0c             	sub    esp,0xc
10000f8e:	56                   	push   esi
10000f8f:	e8 fc ff ff ff       	call   10000f90 <ssfn_load+0x71>	10000f90: R_386_PC32	_ssfn_zlib_decode
10000f94:	83 c4 10             	add    esp,0x10
10000f97:	89 c6                	mov    esi,eax
10000f99:	85 c0                	test   eax,eax
10000f9b:	74 ba                	je     10000f57 <ssfn_load+0x38>
10000f9d:	50                   	push   eax
10000f9e:	50                   	push   eax
10000f9f:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000fa5:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000fac:	50                   	push   eax
10000fad:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000fb3:	e8 fc ff ff ff       	call   10000fb4 <ssfn_load+0x95>	10000fb4: R_386_PC32	realloc
10000fb8:	83 c4 10             	add    esp,0x10
10000fbb:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000fc1:	85 c0                	test   eax,eax
10000fc3:	75 0f                	jne    10000fd4 <ssfn_load+0xb5>
10000fc5:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fcf:	e9 1a 01 00 00       	jmp    100010ee <ssfn_load+0x1cf>
10000fd4:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fda:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fdd:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fe3:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000fe6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000fe9:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000fef:	50                   	push   eax
10000ff0:	6a 04                	push   0x4
10000ff2:	68 33 55 00 10       	push   0x10005533	10000ff3: R_386_32	.text
10000ff7:	56                   	push   esi
10000ff8:	e8 fc ff ff ff       	call   10000ff9 <ssfn_load+0xda>	10000ff9: R_386_PC32	memcmp
10000ffd:	83 c4 10             	add    esp,0x10
10001000:	89 c5                	mov    ebp,eax
10001002:	85 c0                	test   eax,eax
10001004:	75 29                	jne    1000102f <ssfn_load+0x110>
10001006:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001009:	01 f3                	add    ebx,esi
1000100b:	83 c6 08             	add    esi,0x8
1000100e:	39 de                	cmp    esi,ebx
10001010:	0f 83 f5 00 00 00    	jae    1000110b <ssfn_load+0x1ec>
10001016:	50                   	push   eax
10001017:	50                   	push   eax
10001018:	56                   	push   esi
10001019:	57                   	push   edi
1000101a:	e8 fc ff ff ff       	call   1000101b <ssfn_load+0xfc>	1000101b: R_386_PC32	ssfn_load
1000101f:	83 c4 10             	add    esp,0x10
10001022:	85 c0                	test   eax,eax
10001024:	0f 85 e1 00 00 00    	jne    1000110b <ssfn_load+0x1ec>
1000102a:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
1000102d:	eb df                	jmp    1000100e <ssfn_load+0xef>
1000102f:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10001032:	83 e0 0f             	and    eax,0xf
10001035:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001039:	53                   	push   ebx
1000103a:	6a 04                	push   0x4
1000103c:	68 38 55 00 10       	push   0x10005538	1000103d: R_386_32	.text
10001041:	56                   	push   esi
10001042:	e8 fc ff ff ff       	call   10001043 <ssfn_load+0x124>	10001043: R_386_PC32	memcmp
10001047:	83 c4 10             	add    esp,0x10
1000104a:	89 c5                	mov    ebp,eax
1000104c:	85 c0                	test   eax,eax
1000104e:	0f 85 03 ff ff ff    	jne    10000f57 <ssfn_load+0x38>
10001054:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001057:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
1000105b:	51                   	push   ecx
1000105c:	6a 04                	push   0x4
1000105e:	68 3d 55 00 10       	push   0x1000553d	1000105f: R_386_32	.text
10001063:	50                   	push   eax
10001064:	e8 fc ff ff ff       	call   10001065 <ssfn_load+0x146>	10001065: R_386_PC32	memcmp
10001069:	83 c4 10             	add    esp,0x10
1000106c:	85 c0                	test   eax,eax
1000106e:	0f 85 e3 fe ff ff    	jne    10000f57 <ssfn_load+0x38>
10001074:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001079:	0f 87 d8 fe ff ff    	ja     10000f57 <ssfn_load+0x38>
1000107f:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10001083:	39 cb                	cmp    ebx,ecx
10001085:	0f 86 cc fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
1000108b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000108e:	39 c3                	cmp    ebx,eax
10001090:	0f 86 c1 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
10001096:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10001099:	0f 86 b8 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
1000109f:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100010a2:	0f 86 af fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
100010a8:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100010ab:	0f 86 a6 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
100010b1:	39 c1                	cmp    ecx,eax
100010b3:	0f 83 9e fe ff ff    	jae    10000f57 <ssfn_load+0x38>
100010b9:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100010be:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100010c1:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010c7:	40                   	inc    eax
100010c8:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010ce:	52                   	push   edx
100010cf:	c1 e0 02             	shl    eax,0x2
100010d2:	52                   	push   edx
100010d3:	50                   	push   eax
100010d4:	ff 33                	push   DWORD PTR [ebx]
100010d6:	e8 fc ff ff ff       	call   100010d7 <ssfn_load+0x1b8>	100010d7: R_386_PC32	realloc
100010db:	83 c4 10             	add    esp,0x10
100010de:	89 03                	mov    DWORD PTR [ebx],eax
100010e0:	85 c0                	test   eax,eax
100010e2:	75 0f                	jne    100010f3 <ssfn_load+0x1d4>
100010e4:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010ee:	83 cd ff             	or     ebp,0xffffffff
100010f1:	eb 18                	jmp    1000110b <ssfn_load+0x1ec>
100010f3:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010f9:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100010fd:	89 f8                	mov    eax,edi
100010ff:	e8 ad f3 ff ff       	call   100004b1 <_ssfn_fc.part.1>
10001104:	eb 05                	jmp    1000110b <ssfn_load+0x1ec>
10001106:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000110b:	83 c4 1c             	add    esp,0x1c
1000110e:	89 e8                	mov    eax,ebp
10001110:	5b                   	pop    ebx
10001111:	5e                   	pop    esi
10001112:	5f                   	pop    edi
10001113:	5d                   	pop    ebp
10001114:	c3                   	ret    

10001115 <ssfn_free>:
10001115:	57                   	push   edi
10001116:	56                   	push   esi
10001117:	53                   	push   ebx
10001118:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000111c:	85 db                	test   ebx,ebx
1000111e:	74 7e                	je     1000119e <ssfn_free+0x89>
10001120:	89 d8                	mov    eax,ebx
10001122:	e8 8a f3 ff ff       	call   100004b1 <_ssfn_fc.part.1>
10001127:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000112e:	74 32                	je     10001162 <ssfn_free+0x4d>
10001130:	31 f6                	xor    esi,esi
10001132:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001138:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000113e:	7e 16                	jle    10001156 <ssfn_free+0x41>
10001140:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001143:	85 c0                	test   eax,eax
10001145:	74 0c                	je     10001153 <ssfn_free+0x3e>
10001147:	83 ec 0c             	sub    esp,0xc
1000114a:	50                   	push   eax
1000114b:	e8 fc ff ff ff       	call   1000114c <ssfn_free+0x37>	1000114c: R_386_PC32	free
10001150:	83 c4 10             	add    esp,0x10
10001153:	46                   	inc    esi
10001154:	eb dc                	jmp    10001132 <ssfn_free+0x1d>
10001156:	83 ec 0c             	sub    esp,0xc
10001159:	50                   	push   eax
1000115a:	e8 fc ff ff ff       	call   1000115b <ssfn_free+0x46>	1000115b: R_386_PC32	free
1000115f:	83 c4 10             	add    esp,0x10
10001162:	31 f6                	xor    esi,esi
10001164:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001167:	85 c0                	test   eax,eax
10001169:	74 0c                	je     10001177 <ssfn_free+0x62>
1000116b:	83 ec 0c             	sub    esp,0xc
1000116e:	50                   	push   eax
1000116f:	e8 fc ff ff ff       	call   10001170 <ssfn_free+0x5b>	10001170: R_386_PC32	free
10001174:	83 c4 10             	add    esp,0x10
10001177:	46                   	inc    esi
10001178:	83 fe 05             	cmp    esi,0x5
1000117b:	75 e7                	jne    10001164 <ssfn_free+0x4f>
1000117d:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10001183:	85 c0                	test   eax,eax
10001185:	74 0c                	je     10001193 <ssfn_free+0x7e>
10001187:	83 ec 0c             	sub    esp,0xc
1000118a:	50                   	push   eax
1000118b:	e8 fc ff ff ff       	call   1000118c <ssfn_free+0x77>	1000118c: R_386_PC32	free
10001190:	83 c4 10             	add    esp,0x10
10001193:	b9 72 3d 00 00       	mov    ecx,0x3d72
10001198:	31 c0                	xor    eax,eax
1000119a:	89 df                	mov    edi,ebx
1000119c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000119e:	5b                   	pop    ebx
1000119f:	5e                   	pop    esi
100011a0:	5f                   	pop    edi
100011a1:	c3                   	ret    

100011a2 <ssfn_mem>:
100011a2:	55                   	push   ebp
100011a3:	31 c0                	xor    eax,eax
100011a5:	57                   	push   edi
100011a6:	56                   	push   esi
100011a7:	53                   	push   ebx
100011a8:	83 ec 08             	sub    esp,0x8
100011ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100011af:	85 d2                	test   edx,edx
100011b1:	0f 84 8e 00 00 00    	je     10001245 <ssfn_mem+0xa3>
100011b7:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100011bc:	31 c9                	xor    ecx,ecx
100011be:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011c5:	41                   	inc    ecx
100011c6:	8d 04 98             	lea    eax,[eax+ebx*4]
100011c9:	83 f9 05             	cmp    ecx,0x5
100011cc:	75 f0                	jne    100011be <ssfn_mem+0x1c>
100011ce:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011d4:	31 c9                	xor    ecx,ecx
100011d6:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011dd:	89 34 24             	mov    DWORD PTR [esp],esi
100011e0:	85 f6                	test   esi,esi
100011e2:	74 48                	je     1000122c <ssfn_mem+0x8a>
100011e4:	31 db                	xor    ebx,ebx
100011e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011e9:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011ec:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011f0:	85 ff                	test   edi,edi
100011f2:	74 2a                	je     1000121e <ssfn_mem+0x7c>
100011f4:	31 f6                	xor    esi,esi
100011f6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011fa:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100011fd:	85 ed                	test   ebp,ebp
100011ff:	74 0f                	je     10001210 <ssfn_mem+0x6e>
10001201:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001205:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001209:	0f af fd             	imul   edi,ebp
1000120c:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001210:	46                   	inc    esi
10001211:	81 fe 00 01 00 00    	cmp    esi,0x100
10001217:	75 dd                	jne    100011f6 <ssfn_mem+0x54>
10001219:	05 00 04 00 00       	add    eax,0x400
1000121e:	43                   	inc    ebx
1000121f:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001225:	75 bf                	jne    100011e6 <ssfn_mem+0x44>
10001227:	05 00 04 00 00       	add    eax,0x400
1000122c:	41                   	inc    ecx
1000122d:	83 f9 11             	cmp    ecx,0x11
10001230:	75 a4                	jne    100011d6 <ssfn_mem+0x34>
10001232:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001239:	74 0a                	je     10001245 <ssfn_mem+0xa3>
1000123b:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001241:	01 d2                	add    edx,edx
10001243:	01 d0                	add    eax,edx
10001245:	83 c4 08             	add    esp,0x8
10001248:	5b                   	pop    ebx
10001249:	5e                   	pop    esi
1000124a:	5f                   	pop    edi
1000124b:	5d                   	pop    ebp
1000124c:	c3                   	ret    

1000124d <ssfn_select>:
1000124d:	55                   	push   ebp
1000124e:	57                   	push   edi
1000124f:	56                   	push   esi
10001250:	53                   	push   ebx
10001251:	83 ec 1c             	sub    esp,0x1c
10001254:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001258:	85 db                	test   ebx,ebx
1000125a:	75 0a                	jne    10001266 <ssfn_select+0x19>
1000125c:	be fc ff ff ff       	mov    esi,0xfffffffc
10001261:	e9 13 01 00 00       	jmp    10001379 <ssfn_select+0x12c>
10001266:	89 d8                	mov    eax,ebx
10001268:	e8 44 f2 ff ff       	call   100004b1 <_ssfn_fc.part.1>
1000126d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001271:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001277:	0f 85 e9 00 00 00    	jne    10001366 <ssfn_select+0x119>
1000127d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001281:	83 e8 08             	sub    eax,0x8
10001284:	3d b8 00 00 00       	cmp    eax,0xb8
10001289:	0f 87 de 00 00 00    	ja     1000136d <ssfn_select+0x120>
1000128f:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10001297:	75 76                	jne    1000130f <ssfn_select+0xc2>
10001299:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000129e:	74 bc                	je     1000125c <ssfn_select+0xf>
100012a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012a4:	80 38 00             	cmp    BYTE PTR [eax],0x0
100012a7:	74 b3                	je     1000125c <ssfn_select+0xf>
100012a9:	31 ed                	xor    ebp,ebp
100012ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012af:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100012b3:	74 03                	je     100012b8 <ssfn_select+0x6b>
100012b5:	45                   	inc    ebp
100012b6:	eb f3                	jmp    100012ab <ssfn_select+0x5e>
100012b8:	8d 43 14             	lea    eax,[ebx+0x14]
100012bb:	89 df                	mov    edi,ebx
100012bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012c1:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012c7:	31 d2                	xor    edx,edx
100012c9:	89 04 24             	mov    DWORD PTR [esp],eax
100012cc:	39 14 24             	cmp    DWORD PTR [esp],edx
100012cf:	7e 33                	jle    10001304 <ssfn_select+0xb7>
100012d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012d5:	8b 07                	mov    eax,DWORD PTR [edi]
100012d7:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012da:	50                   	push   eax
100012db:	8d 41 20             	lea    eax,[ecx+0x20]
100012de:	55                   	push   ebp
100012df:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012e3:	50                   	push   eax
100012e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012e8:	e8 fc ff ff ff       	call   100012e9 <ssfn_select+0x9c>	100012e9: R_386_PC32	memcmp
100012ed:	83 c4 10             	add    esp,0x10
100012f0:	85 c0                	test   eax,eax
100012f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012fa:	75 05                	jne    10001301 <ssfn_select+0xb4>
100012fc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100012ff:	eb 34                	jmp    10001335 <ssfn_select+0xe8>
10001301:	42                   	inc    edx
10001302:	eb c8                	jmp    100012cc <ssfn_select+0x7f>
10001304:	83 c7 04             	add    edi,0x4
10001307:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000130b:	75 b4                	jne    100012c1 <ssfn_select+0x74>
1000130d:	eb 65                	jmp    10001374 <ssfn_select+0x127>
1000130f:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001317:	74 15                	je     1000132e <ssfn_select+0xe1>
10001319:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000131e:	7f 54                	jg     10001374 <ssfn_select+0x127>
10001320:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001324:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
1000132c:	74 46                	je     10001374 <ssfn_select+0x127>
1000132e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001339:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001340:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001346:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001350:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001354:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
1000135a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000135e:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001364:	eb 13                	jmp    10001379 <ssfn_select+0x12c>
10001366:	be fb ff ff ff       	mov    esi,0xfffffffb
1000136b:	eb 0c                	jmp    10001379 <ssfn_select+0x12c>
1000136d:	be fa ff ff ff       	mov    esi,0xfffffffa
10001372:	eb 05                	jmp    10001379 <ssfn_select+0x12c>
10001374:	be fd ff ff ff       	mov    esi,0xfffffffd
10001379:	83 c4 1c             	add    esp,0x1c
1000137c:	89 f0                	mov    eax,esi
1000137e:	5b                   	pop    ebx
1000137f:	5e                   	pop    esi
10001380:	5f                   	pop    edi
10001381:	5d                   	pop    ebp
10001382:	c3                   	ret    

10001383 <ssfn_render>:
10001383:	55                   	push   ebp
10001384:	57                   	push   edi
10001385:	56                   	push   esi
10001386:	53                   	push   ebx
10001387:	81 ec dc 05 01 00    	sub    esp,0x105dc
1000138d:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001394:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
1000139f:	85 ed                	test   ebp,ebp
100013a1:	0f 94 c2             	sete   dl
100013a4:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100013ac:	0f 94 c0             	sete   al
100013af:	08 c2                	or     dl,al
100013b1:	74 0a                	je     100013bd <ssfn_render+0x3a>
100013b3:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100013b8:	e9 14 1e 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
100013bd:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013c4:	31 c9                	xor    ecx,ecx
100013c6:	8a 00                	mov    al,BYTE PTR [eax]
100013c8:	84 c0                	test   al,al
100013ca:	0f 84 01 1e 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100013d0:	3c 0d                	cmp    al,0xd
100013d2:	75 0f                	jne    100013e3 <ssfn_render+0x60>
100013d4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013e1:	eb 31                	jmp    10001414 <ssfn_render+0x91>
100013e3:	3c 0a                	cmp    al,0xa
100013e5:	75 37                	jne    1000141e <ssfn_render+0x9b>
100013e7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013ee:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013f7:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100013fd:	85 c0                	test   eax,eax
100013ff:	75 06                	jne    10001407 <ssfn_render+0x84>
10001401:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001407:	01 d0                	add    eax,edx
10001409:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001410:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001414:	b9 01 00 00 00       	mov    ecx,0x1
10001419:	e9 b3 1d 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000141e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001421:	85 c0                	test   eax,eax
10001423:	74 3e                	je     10001463 <ssfn_render+0xe0>
10001425:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001428:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000142f:	56                   	push   esi
10001430:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001437:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000143e:	e8 a0 f4 ff ff       	call   100008e3 <_ssfn_c>
10001443:	5b                   	pop    ebx
10001444:	85 c0                	test   eax,eax
10001446:	0f 85 71 02 00 00    	jne    100016bd <ssfn_render+0x33a>
1000144c:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001452:	81 e2 00 01 00 00    	and    edx,0x100
10001458:	0f 84 fd 01 00 00    	je     1000165b <ssfn_render+0x2d8>
1000145e:	e9 1d 02 00 00       	jmp    10001680 <ssfn_render+0x2fd>
10001463:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001469:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10001470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001474:	3d fd 00 00 00       	cmp    eax,0xfd
10001479:	7f 08                	jg     10001483 <ssfn_render+0x100>
1000147b:	89 c3                	mov    ebx,eax
1000147d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001481:	eb 3f                	jmp    100014c2 <ssfn_render+0x13f>
10001483:	31 db                	xor    ebx,ebx
10001485:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
1000148d:	eb 33                	jmp    100014c2 <ssfn_render+0x13f>
1000148f:	85 c0                	test   eax,eax
10001491:	0f 84 64 01 00 00    	je     100015fb <ssfn_render+0x278>
10001497:	43                   	inc    ebx
10001498:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
1000149c:	7e 28                	jle    100014c6 <ssfn_render+0x143>
1000149e:	85 c0                	test   eax,eax
100014a0:	0f 85 17 02 00 00    	jne    100016bd <ssfn_render+0x33a>
100014a6:	31 db                	xor    ebx,ebx
100014a8:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100014b0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100014b8:	74 92                	je     1000144c <ssfn_render+0xc9>
100014ba:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100014c2:	31 c0                	xor    eax,eax
100014c4:	eb d2                	jmp    10001498 <ssfn_render+0x115>
100014c6:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014ca:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014d1:	74 bc                	je     1000148f <ssfn_render+0x10c>
100014d3:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014de:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014e5:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014ec:	7e 50                	jle    1000153e <ssfn_render+0x1bb>
100014ee:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014f1:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014f5:	c1 fa 04             	sar    edx,0x4
100014f8:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
100014fe:	80 e2 03             	and    dl,0x3
10001501:	75 32                	jne    10001535 <ssfn_render+0x1b2>
10001503:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001507:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000150d:	75 26                	jne    10001535 <ssfn_render+0x1b2>
1000150f:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001516:	50                   	push   eax
10001517:	89 f8                	mov    eax,edi
10001519:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001520:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001527:	e8 b7 f3 ff ff       	call   100008e3 <_ssfn_c>
1000152c:	59                   	pop    ecx
1000152d:	85 c0                	test   eax,eax
1000152f:	0f 85 04 01 00 00    	jne    10001639 <ssfn_render+0x2b6>
10001535:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000153c:	eb a0                	jmp    100014de <ssfn_render+0x15b>
1000153e:	85 c0                	test   eax,eax
10001540:	0f 85 51 ff ff ff    	jne    10001497 <ssfn_render+0x114>
10001546:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001551:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001558:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000155f:	0f 8e f9 1b 00 00    	jle    1000315e <ssfn_render+0x1ddb>
10001565:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001568:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
1000156c:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001572:	74 09                	je     1000157d <ssfn_render+0x1fa>
10001574:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000157b:	eb d4                	jmp    10001551 <ssfn_render+0x1ce>
1000157d:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001584:	57                   	push   edi
10001585:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000158c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001593:	e8 4b f3 ff ff       	call   100008e3 <_ssfn_c>
10001598:	5a                   	pop    edx
10001599:	85 c0                	test   eax,eax
1000159b:	74 d7                	je     10001574 <ssfn_render+0x1f1>
1000159d:	e9 97 00 00 00       	jmp    10001639 <ssfn_render+0x2b6>
100015a2:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015a5:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100015a9:	c1 fa 04             	sar    edx,0x4
100015ac:	31 ca                	xor    edx,ecx
100015ae:	80 e2 03             	and    dl,0x3
100015b1:	0f 84 b7 1b 00 00    	je     1000316e <ssfn_render+0x1deb>
100015b7:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015be:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015c5:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015cb:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015d2:	7f ce                	jg     100015a2 <ssfn_render+0x21f>
100015d4:	83 e1 03             	and    ecx,0x3
100015d7:	83 f9 03             	cmp    ecx,0x3
100015da:	75 1f                	jne    100015fb <ssfn_render+0x278>
100015dc:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015e7:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015ee:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015f5:	0f 8f 9c 1b 00 00    	jg     10003197 <ssfn_render+0x1e14>
100015fb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001606:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000160d:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001614:	7e 3e                	jle    10001654 <ssfn_render+0x2d1>
10001616:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001619:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001620:	57                   	push   edi
10001621:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001628:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000162f:	e8 af f2 ff ff       	call   100008e3 <_ssfn_c>
10001634:	5a                   	pop    edx
10001635:	85 c0                	test   eax,eax
10001637:	74 12                	je     1000164b <ssfn_render+0x2c8>
10001639:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001640:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001643:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001646:	e9 4c fe ff ff       	jmp    10001497 <ssfn_render+0x114>
1000164b:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001652:	eb b2                	jmp    10001606 <ssfn_render+0x283>
10001654:	31 c0                	xor    eax,eax
10001656:	e9 3c fe ff ff       	jmp    10001497 <ssfn_render+0x114>
1000165b:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10001661:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
1000166c:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10001672:	7f 16                	jg     1000168a <ssfn_render+0x307>
10001674:	89 da                	mov    edx,ebx
10001676:	31 c0                	xor    eax,eax
10001678:	39 da                	cmp    edx,ebx
1000167a:	7e 15                	jle    10001691 <ssfn_render+0x30e>
1000167c:	85 c0                	test   eax,eax
1000167e:	75 3d                	jne    100016bd <ssfn_render+0x33a>
10001680:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001685:	e9 47 1b 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000168a:	bb 04 00 00 00       	mov    ebx,0x4
1000168f:	eb e5                	jmp    10001676 <ssfn_render+0x2f3>
10001691:	85 c0                	test   eax,eax
10001693:	75 28                	jne    100016bd <ssfn_render+0x33a>
10001695:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
1000169d:	74 1b                	je     100016ba <ssfn_render+0x337>
1000169f:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100016a3:	8b 09                	mov    ecx,DWORD PTR [ecx]
100016a5:	85 c9                	test   ecx,ecx
100016a7:	74 11                	je     100016ba <ssfn_render+0x337>
100016a9:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100016ac:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100016b0:	78 08                	js     100016ba <ssfn_render+0x337>
100016b2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100016b5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100016b8:	01 c8                	add    eax,ecx
100016ba:	42                   	inc    edx
100016bb:	eb bb                	jmp    10001678 <ssfn_render+0x2f5>
100016bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100016c0:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016c5:	85 d2                	test   edx,edx
100016c7:	0f 84 04 1b 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016cd:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016d1:	0f 84 fa 1a 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016d7:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016e1:	85 ff                	test   edi,edi
100016e3:	0f 84 e8 1a 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016e9:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016f0:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016f4:	c1 ef 10             	shr    edi,0x10
100016f7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016fb:	83 ff 10             	cmp    edi,0x10
100016fe:	0f 87 af fc ff ff    	ja     100013b3 <ssfn_render+0x30>
10001704:	8d 70 06             	lea    esi,[eax+0x6]
10001707:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
1000170d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001711:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001717:	89 f7                	mov    edi,esi
10001719:	81 e7 00 02 00 00    	and    edi,0x200
1000171f:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001723:	75 34                	jne    10001759 <ssfn_render+0x3d6>
10001725:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001729:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001730:	85 c9                	test   ecx,ecx
10001732:	74 25                	je     10001759 <ssfn_render+0x3d6>
10001734:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001738:	0f b6 ff             	movzx  edi,bh
1000173b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000173e:	85 c9                	test   ecx,ecx
10001740:	74 17                	je     10001759 <ssfn_render+0x3d6>
10001742:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001747:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000174a:	85 c9                	test   ecx,ecx
1000174c:	74 0b                	je     10001759 <ssfn_render+0x3d6>
1000174e:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001754:	e9 25 0d 00 00       	jmp    1000247e <ssfn_render+0x10fb>
10001759:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
1000175d:	f7 c6 40 00 00 00    	test   esi,0x40
10001763:	75 1a                	jne    1000177f <ssfn_render+0x3fc>
10001765:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001769:	7e 10                	jle    1000177b <ssfn_render+0x3f8>
1000176b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000176f:	83 c7 04             	add    edi,0x4
10001772:	83 e7 fc             	and    edi,0xfffffffc
10001775:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001779:	eb 04                	jmp    1000177f <ssfn_render+0x3fc>
1000177b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000177f:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001784:	f7 c6 02 00 00 00    	test   esi,0x2
1000178a:	74 14                	je     100017a0 <ssfn_render+0x41d>
1000178c:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
1000178f:	c0 eb 05             	shr    bl,0x5
10001792:	89 df                	mov    edi,ebx
10001794:	83 f7 01             	xor    edi,0x1
10001797:	83 e7 01             	and    edi,0x1
1000179a:	89 fb                	mov    ebx,edi
1000179c:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100017a0:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100017a5:	83 e6 01             	and    esi,0x1
100017a8:	74 10                	je     100017ba <ssfn_render+0x437>
100017aa:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100017ae:	75 0a                	jne    100017ba <ssfn_render+0x437>
100017b0:	8d 51 40             	lea    edx,[ecx+0x40]
100017b3:	c1 fa 06             	sar    edx,0x6
100017b6:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100017ba:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100017be:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100017c3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017c7:	99                   	cdq    
100017c8:	f7 f9                	idiv   ecx
100017ca:	89 c1                	mov    ecx,eax
100017cc:	31 c0                	xor    eax,eax
100017ce:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017d3:	74 0c                	je     100017e1 <ssfn_render+0x45e>
100017d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017d9:	be 04 00 00 00       	mov    esi,0x4
100017de:	99                   	cdq    
100017df:	f7 fe                	idiv   esi
100017e1:	01 c8                	add    eax,ecx
100017e3:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017e8:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017ed:	01 f0                	add    eax,esi
100017ef:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017fb:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001800:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001804:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001809:	0f 8f c2 19 00 00    	jg     100031d1 <ssfn_render+0x1e4e>
1000180f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001814:	0f 85 f0 00 00 00    	jne    1000190a <ssfn_render+0x587>
1000181a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000181e:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001822:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001829:	75 2f                	jne    1000185a <ssfn_render+0x4d7>
1000182b:	83 ec 0c             	sub    esp,0xc
1000182e:	68 00 04 00 00       	push   0x400
10001833:	e8 fc ff ff ff       	call   10001834 <ssfn_render+0x4b1>	10001834: R_386_PC32	malloc
10001838:	83 c4 10             	add    esp,0x10
1000183b:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001841:	85 c0                	test   eax,eax
10001843:	75 08                	jne    1000184d <ssfn_render+0x4ca>
10001845:	83 c9 ff             	or     ecx,0xffffffff
10001848:	e9 84 19 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000184d:	89 c7                	mov    edi,eax
1000184f:	b9 00 01 00 00       	mov    ecx,0x100
10001854:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001858:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000185a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000185e:	0f b6 dc             	movzx  ebx,ah
10001861:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001867:	8d 1c 98             	lea    ebx,[eax+ebx*4]
1000186a:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000186d:	75 3a                	jne    100018a9 <ssfn_render+0x526>
1000186f:	83 ec 0c             	sub    esp,0xc
10001872:	68 00 04 00 00       	push   0x400
10001877:	e8 fc ff ff ff       	call   10001878 <ssfn_render+0x4f5>	10001878: R_386_PC32	malloc
1000187c:	89 03                	mov    DWORD PTR [ebx],eax
1000187e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001885:	83 c4 10             	add    esp,0x10
10001888:	89 c2                	mov    edx,eax
1000188a:	0f b6 c4             	movzx  eax,ah
1000188d:	c1 ea 10             	shr    edx,0x10
10001890:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001897:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
1000189a:	85 d2                	test   edx,edx
1000189c:	74 a7                	je     10001845 <ssfn_render+0x4c2>
1000189e:	b9 00 01 00 00       	mov    ecx,0x100
100018a3:	31 c0                	xor    eax,eax
100018a5:	89 d7                	mov    edi,edx
100018a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100018a9:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100018b0:	83 ec 0c             	sub    esp,0xc
100018b3:	0f b6 cc             	movzx  ecx,ah
100018b6:	89 c2                	mov    edx,eax
100018b8:	0f b6 c0             	movzx  eax,al
100018bb:	c1 ea 10             	shr    edx,0x10
100018be:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018c5:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018c8:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018cf:	83 c0 08             	add    eax,0x8
100018d2:	50                   	push   eax
100018d3:	e8 fc ff ff ff       	call   100018d4 <ssfn_render+0x551>	100018d4: R_386_PC32	malloc
100018d8:	89 03                	mov    DWORD PTR [ebx],eax
100018da:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018e0:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018e7:	83 c4 10             	add    esp,0x10
100018ea:	89 c2                	mov    edx,eax
100018ec:	0f b6 cc             	movzx  ecx,ah
100018ef:	c1 ea 10             	shr    edx,0x10
100018f2:	0f b6 c0             	movzx  eax,al
100018f5:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018fc:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018ff:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001903:	75 0e                	jne    10001913 <ssfn_render+0x590>
10001905:	e9 3b ff ff ff       	jmp    10001845 <ssfn_render+0x4c2>
1000190a:	8d 45 1c             	lea    eax,[ebp+0x1c]
1000190d:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001913:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001919:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000191d:	74 2a                	je     10001949 <ssfn_render+0x5c6>
1000191f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001924:	74 23                	je     10001949 <ssfn_render+0x5c6>
10001926:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001929:	bb 04 00 00 00       	mov    ebx,0x4
1000192e:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001932:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001936:	89 cf                	mov    edi,ecx
10001938:	29 c7                	sub    edi,eax
1000193a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000193e:	0f af c7             	imul   eax,edi
10001941:	99                   	cdq    
10001942:	f7 fb                	idiv   ebx
10001944:	99                   	cdq    
10001945:	f7 f9                	idiv   ecx
10001947:	eb 02                	jmp    1000194b <ssfn_render+0x5c8>
10001949:	31 c0                	xor    eax,eax
1000194b:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001951:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001959:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001961:	66 89 32             	mov    WORD PTR [edx],si
10001964:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001969:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000196f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001972:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001978:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000197e:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001981:	01 c3                	add    ebx,eax
10001983:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001986:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000198c:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001992:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001995:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001998:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
1000199e:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019a4:	8a 12                	mov    dl,BYTE PTR [edx]
100019a6:	83 e2 3f             	and    edx,0x3f
100019a9:	01 d0                	add    eax,edx
100019ab:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100019ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100019b2:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019b8:	8d 50 08             	lea    edx,[eax+0x8]
100019bb:	b0 ff                	mov    al,0xff
100019bd:	89 d7                	mov    edi,edx
100019bf:	f3 aa                	rep stos BYTE PTR es:[edi],al
100019c1:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019c7:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019cb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019d1:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019d9:	c1 e0 04             	shl    eax,0x4
100019dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019e4:	c1 e0 04             	shl    eax,0x4
100019e7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019eb:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019f1:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019f5:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019f9:	0f 8e 4d 0a 00 00    	jle    1000244c <ssfn_render+0x10c9>
100019ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001a03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a07:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001a0a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001a0d:	8a 12                	mov    dl,BYTE PTR [edx]
10001a0f:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001a13:	83 e2 40             	and    edx,0x40
10001a16:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001a1a:	88 c2                	mov    dl,al
10001a1c:	21 ca                	and    edx,ecx
10001a1e:	fe c2                	inc    dl
10001a20:	75 14                	jne    10001a36 <ssfn_render+0x6b3>
10001a22:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a27:	19 c0                	sbb    eax,eax
10001a29:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a31:	e9 09 0a 00 00       	jmp    1000243f <ssfn_render+0x10bc>
10001a36:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a3a:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a3d:	c1 e0 04             	shl    eax,0x4
10001a40:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a44:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a49:	99                   	cdq    
10001a4a:	f7 fe                	idiv   esi
10001a4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a50:	0f b6 c1             	movzx  eax,cl
10001a53:	c1 e0 04             	shl    eax,0x4
10001a56:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a5b:	99                   	cdq    
10001a5c:	f7 fe                	idiv   esi
10001a5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a66:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a6a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a6e:	c1 e2 10             	shl    edx,0x10
10001a71:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a76:	74 0e                	je     10001a86 <ssfn_render+0x703>
10001a78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a7c:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a81:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a84:	eb 0c                	jmp    10001a92 <ssfn_render+0x70f>
10001a86:	c1 e0 08             	shl    eax,0x8
10001a89:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a8e:	09 d0                	or     eax,edx
10001a90:	09 c3                	or     ebx,eax
10001a92:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a95:	8a 01                	mov    al,BYTE PTR [ecx]
10001a97:	84 c0                	test   al,al
10001a99:	0f 88 17 05 00 00    	js     10001fb6 <ssfn_render+0xc33>
10001a9f:	89 c7                	mov    edi,eax
10001aa1:	83 e7 3f             	and    edi,0x3f
10001aa4:	a8 40                	test   al,0x40
10001aa6:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001aaa:	74 10                	je     10001abc <ssfn_render+0x739>
10001aac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001ab0:	89 f8                	mov    eax,edi
10001ab2:	41                   	inc    ecx
10001ab3:	c1 e0 08             	shl    eax,0x8
10001ab6:	09 c2                	or     edx,eax
10001ab8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001abc:	8d 41 01             	lea    eax,[ecx+0x1]
10001abf:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001ac9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001acd:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001adc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001ae0:	83 c0 04             	add    eax,0x4
10001ae3:	c1 f8 02             	sar    eax,0x2
10001ae6:	01 c7                	add    edi,eax
10001ae8:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001aef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001af3:	0f 8f d7 01 00 00    	jg     10001cd0 <ssfn_render+0x94d>
10001af9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001afc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001b00:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001b04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001b08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001b0c:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001b0f:	c1 e0 04             	shl    eax,0x4
10001b12:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b17:	99                   	cdq    
10001b18:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b1c:	01 c6                	add    esi,eax
10001b1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001b22:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b26:	c1 e0 04             	shl    eax,0x4
10001b29:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b2e:	99                   	cdq    
10001b2f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b37:	01 c3                	add    ebx,eax
10001b39:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b3d:	89 c8                	mov    eax,ecx
10001b3f:	01 c9                	add    ecx,ecx
10001b41:	c1 f8 02             	sar    eax,0x2
10001b44:	83 e1 06             	and    ecx,0x6
10001b47:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b4b:	d3 f8                	sar    eax,cl
10001b4d:	83 e0 03             	and    eax,0x3
10001b50:	89 c1                	mov    ecx,eax
10001b52:	83 f8 02             	cmp    eax,0x2
10001b55:	74 4a                	je     10001ba1 <ssfn_render+0x81e>
10001b57:	83 f8 03             	cmp    eax,0x3
10001b5a:	0f 84 e4 00 00 00    	je     10001c44 <ssfn_render+0x8c1>
10001b60:	49                   	dec    ecx
10001b61:	74 20                	je     10001b83 <ssfn_render+0x800>
10001b63:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b69:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b6f:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b75:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b7b:	83 c7 02             	add    edi,0x2
10001b7e:	e9 41 01 00 00       	jmp    10001cc4 <ssfn_render+0x941>
10001b83:	83 c7 02             	add    edi,0x2
10001b86:	50                   	push   eax
10001b87:	50                   	push   eax
10001b88:	89 e8                	mov    eax,ebp
10001b8a:	53                   	push   ebx
10001b8b:	56                   	push   esi
10001b8c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b90:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b94:	e8 9c e9 ff ff       	call   10000535 <_ssfn_l>
10001b99:	83 c4 10             	add    esp,0x10
10001b9c:	e9 23 01 00 00       	jmp    10001cc4 <ssfn_render+0x941>
10001ba1:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ba5:	83 c7 04             	add    edi,0x4
10001ba8:	c1 e0 04             	shl    eax,0x4
10001bab:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bb0:	99                   	cdq    
10001bb1:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001bb9:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001bbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001bc1:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bc5:	c1 e0 04             	shl    eax,0x4
10001bc8:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bcd:	99                   	cdq    
10001bce:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bd2:	83 ec 0c             	sub    esp,0xc
10001bd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001bd9:	6a 00                	push   0x0
10001bdb:	53                   	push   ebx
10001bdc:	56                   	push   esi
10001bdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001be1:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001be5:	99                   	cdq    
10001be6:	f7 f9                	idiv   ecx
10001be8:	01 d8                	add    eax,ebx
10001bea:	50                   	push   eax
10001beb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bef:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bf3:	99                   	cdq    
10001bf4:	f7 f9                	idiv   ecx
10001bf6:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001bfa:	50                   	push   eax
10001bfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001bff:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c03:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001c09:	99                   	cdq    
10001c0a:	f7 f9                	idiv   ecx
10001c0c:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001c12:	50                   	push   eax
10001c13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001c17:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001c1d:	99                   	cdq    
10001c1e:	f7 f9                	idiv   ecx
10001c20:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c26:	50                   	push   eax
10001c27:	89 e8                	mov    eax,ebp
10001c29:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c2f:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c35:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c39:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c3d:	e8 04 ea ff ff       	call   10000646 <_ssfn_b>
10001c42:	eb 7d                	jmp    10001cc1 <ssfn_render+0x93e>
10001c44:	83 ec 0c             	sub    esp,0xc
10001c47:	83 c7 06             	add    edi,0x6
10001c4a:	6a 00                	push   0x0
10001c4c:	53                   	push   ebx
10001c4d:	56                   	push   esi
10001c4e:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c52:	c1 e0 04             	shl    eax,0x4
10001c55:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c5a:	99                   	cdq    
10001c5b:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c5f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c63:	50                   	push   eax
10001c64:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c68:	c1 e0 04             	shl    eax,0x4
10001c6b:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c70:	99                   	cdq    
10001c71:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c75:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c79:	50                   	push   eax
10001c7a:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c7e:	c1 e0 04             	shl    eax,0x4
10001c81:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c86:	99                   	cdq    
10001c87:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c8b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c8f:	50                   	push   eax
10001c90:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c94:	c1 e0 04             	shl    eax,0x4
10001c97:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001c9c:	99                   	cdq    
10001c9d:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001ca1:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001ca5:	50                   	push   eax
10001ca6:	89 e8                	mov    eax,ebp
10001ca8:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001cae:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001cb4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001cb8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001cbc:	e8 85 e9 ff ff       	call   10000646 <_ssfn_b>
10001cc1:	83 c4 30             	add    esp,0x30
10001cc4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001ccb:	e9 18 fe ff ff       	jmp    10001ae8 <ssfn_render+0x765>
10001cd0:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001cd6:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001cdc:	75 0e                	jne    10001cec <ssfn_render+0x969>
10001cde:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001ce4:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cea:	74 2e                	je     10001d1a <ssfn_render+0x997>
10001cec:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cf2:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cf8:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001cfc:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001d02:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001d08:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001d0e:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001d13:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001d1a:	b3 fe                	mov    bl,0xfe
10001d1c:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001d23:	0f 8e 16 07 00 00    	jle    1000243f <ssfn_render+0x10bc>
10001d29:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d31:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d39:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d41:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d49:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d55:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d59:	0f 8d de 06 00 00    	jge    1000243d <ssfn_render+0x10ba>
10001d5f:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d65:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d70:	83 e8 03             	sub    eax,0x3
10001d73:	31 f6                	xor    esi,esi
10001d75:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d79:	89 f8                	mov    eax,edi
10001d7b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d7f:	c1 f8 02             	sar    eax,0x2
10001d82:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d86:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d8d:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d91:	0f 8e 16 01 00 00    	jle    10001ead <ssfn_render+0xb2a>
10001d97:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d9d:	8d 47 01             	lea    eax,[edi+0x1]
10001da0:	01 c0                	add    eax,eax
10001da2:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001da6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001daa:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001daf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001db3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001db7:	7d 0c                	jge    10001dc5 <ssfn_render+0xa42>
10001db9:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dbd:	0f 8f db 00 00 00    	jg     10001e9e <ssfn_render+0xb1b>
10001dc3:	eb 0a                	jmp    10001dcf <ssfn_render+0xa4c>
10001dc5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dc9:	0f 8e cf 00 00 00    	jle    10001e9e <ssfn_render+0xb1b>
10001dcf:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001dd4:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001dd8:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001ddd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001de1:	89 d8                	mov    eax,ebx
10001de3:	c1 fa 04             	sar    edx,0x4
10001de6:	c1 f8 04             	sar    eax,0x4
10001de9:	39 c2                	cmp    edx,eax
10001deb:	75 0a                	jne    10001df7 <ssfn_render+0xa74>
10001ded:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001df1:	01 c8                	add    eax,ecx
10001df3:	d1 f8                	sar    eax,1
10001df5:	eb 1a                	jmp    10001e11 <ssfn_render+0xa8e>
10001df7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001dfb:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001dff:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001e03:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001e07:	0f af c1             	imul   eax,ecx
10001e0a:	99                   	cdq    
10001e0b:	f7 fb                	idiv   ebx
10001e0d:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001e11:	c1 f8 04             	sar    eax,0x4
10001e14:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001e19:	74 04                	je     10001e1f <ssfn_render+0xa9c>
10001e1b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001e1f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e24:	75 3f                	jne    10001e65 <ssfn_render+0xae2>
10001e26:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e2b:	74 38                	je     10001e65 <ssfn_render+0xae2>
10001e2d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e31:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e37:	f7 db                	neg    ebx
10001e39:	01 c2                	add    edx,eax
10001e3b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e3f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e43:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e47:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e4b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e4f:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e53:	74 10                	je     10001e65 <ssfn_render+0xae2>
10001e55:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e59:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e5d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e61:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e65:	31 d2                	xor    edx,edx
10001e67:	39 f2                	cmp    edx,esi
10001e69:	75 0b                	jne    10001e76 <ssfn_render+0xaf3>
10001e6b:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e73:	46                   	inc    esi
10001e74:	eb 28                	jmp    10001e9e <ssfn_render+0xb1b>
10001e76:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e7e:	39 c1                	cmp    ecx,eax
10001e80:	7d 03                	jge    10001e85 <ssfn_render+0xb02>
10001e82:	42                   	inc    edx
10001e83:	eb e2                	jmp    10001e67 <ssfn_render+0xae4>
10001e85:	89 f1                	mov    ecx,esi
10001e87:	49                   	dec    ecx
10001e88:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e90:	39 d1                	cmp    ecx,edx
10001e92:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e9a:	7f eb                	jg     10001e87 <ssfn_render+0xb04>
10001e9c:	eb cd                	jmp    10001e6b <ssfn_render+0xae8>
10001e9e:	8d 47 02             	lea    eax,[edi+0x2]
10001ea1:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001ea8:	e9 d9 fe ff ff       	jmp    10001d86 <ssfn_render+0xa03>
10001ead:	83 fe 01             	cmp    esi,0x1
10001eb0:	7e 1f                	jle    10001ed1 <ssfn_render+0xb4e>
10001eb2:	f7 c6 01 00 00 00    	test   esi,0x1
10001eb8:	74 24                	je     10001ede <ssfn_render+0xb5b>
10001eba:	8d 46 ff             	lea    eax,[esi-0x1]
10001ebd:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001ec5:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001ecd:	89 c6                	mov    esi,eax
10001ecf:	eb 0d                	jmp    10001ede <ssfn_render+0xb5b>
10001ed1:	85 f6                	test   esi,esi
10001ed3:	0f 84 c7 00 00 00    	je     10001fa0 <ssfn_render+0xc1d>
10001ed9:	be 01 00 00 00       	mov    esi,0x1
10001ede:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ee4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001ee8:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001eec:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ef0:	39 d1                	cmp    ecx,edx
10001ef2:	7d 0b                	jge    10001eff <ssfn_render+0xb7c>
10001ef4:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001ef8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001efc:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001eff:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001f0a:	31 c0                	xor    eax,eax
10001f0c:	31 d2                	xor    edx,edx
10001f0e:	8d 4e ff             	lea    ecx,[esi-0x1]
10001f11:	39 d1                	cmp    ecx,edx
10001f13:	7e 7d                	jle    10001f92 <ssfn_render+0xc0f>
10001f15:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001f1d:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f25:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f29:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f2d:	79 02                	jns    10001f31 <ssfn_render+0xbae>
10001f2f:	31 c0                	xor    eax,eax
10001f31:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f35:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f39:	39 cf                	cmp    edi,ecx
10001f3b:	7e 04                	jle    10001f41 <ssfn_render+0xbbe>
10001f3d:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f41:	85 d2                	test   edx,edx
10001f43:	74 12                	je     10001f57 <ssfn_render+0xbd4>
10001f45:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f4d:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f51:	39 c8                	cmp    eax,ecx
10001f53:	7d 02                	jge    10001f57 <ssfn_render+0xbd4>
10001f55:	89 c8                	mov    eax,ecx
10001f57:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f5b:	7d 2b                	jge    10001f88 <ssfn_render+0xc05>
10001f5d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f61:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f67:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f6a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f6e:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f72:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f76:	75 05                	jne    10001f7d <ssfn_render+0xbfa>
10001f78:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f7d:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f81:	40                   	inc    eax
10001f82:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f86:	eb cf                	jmp    10001f57 <ssfn_render+0xbd4>
10001f88:	83 c2 02             	add    edx,0x2
10001f8b:	b0 01                	mov    al,0x1
10001f8d:	e9 7c ff ff ff       	jmp    10001f0e <ssfn_render+0xb8b>
10001f92:	83 e6 fe             	and    esi,0xfffffffe
10001f95:	84 c0                	test   al,al
10001f97:	74 07                	je     10001fa0 <ssfn_render+0xc1d>
10001f99:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001fa0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001fa4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001fa8:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001fac:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001fb1:	e9 9b fd ff ff       	jmp    10001d51 <ssfn_render+0x9ce>
10001fb6:	88 c2                	mov    dl,al
10001fb8:	80 e2 60             	and    dl,0x60
10001fbb:	0f 85 95 02 00 00    	jne    10002256 <ssfn_render+0xed3>
10001fc1:	83 e0 1f             	and    eax,0x1f
10001fc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fc8:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fcf:	c1 fb 04             	sar    ebx,0x4
10001fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fd6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fda:	40                   	inc    eax
10001fdb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fe3:	c1 f8 04             	sar    eax,0x4
10001fe6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fee:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001ff3:	99                   	cdq    
10001ff4:	f7 fe                	idiv   esi
10001ff6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ffe:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002003:	99                   	cdq    
10002004:	f7 fe                	idiv   esi
10002006:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000200a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002010:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002014:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002018:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000201b:	39 d6                	cmp    esi,edx
1000201d:	7d 0a                	jge    10002029 <ssfn_render+0xca6>
1000201f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002023:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002026:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000202d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002035:	0f af c3             	imul   eax,ebx
10002038:	31 ff                	xor    edi,edi
1000203a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000203e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002042:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002046:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000204a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000204e:	29 d8                	sub    eax,ebx
10002050:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002054:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002058:	0f 8d b1 00 00 00    	jge    1000210f <ssfn_render+0xd8c>
1000205e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002062:	99                   	cdq    
10002063:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002067:	89 c6                	mov    esi,eax
10002069:	31 c0                	xor    eax,eax
1000206b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002070:	74 0e                	je     10002080 <ssfn_render+0xcfd>
10002072:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002076:	bb 04 00 00 00       	mov    ebx,0x4
1000207b:	29 f8                	sub    eax,edi
1000207d:	99                   	cdq    
1000207e:	f7 fb                	idiv   ebx
10002080:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002084:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000208f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10002093:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10002098:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000209f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100020a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020a7:	39 d8                	cmp    eax,ebx
100020a9:	7d 4e                	jge    100020f9 <ssfn_render+0xd76>
100020ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100020af:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100020b4:	99                   	cdq    
100020b5:	f7 fb                	idiv   ebx
100020b7:	8d 14 06             	lea    edx,[esi+eax*1]
100020ba:	83 e0 07             	and    eax,0x7
100020bd:	c1 fa 03             	sar    edx,0x3
100020c0:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020c5:	0f a3 c2             	bt     edx,eax
100020c8:	72 0e                	jb     100020d8 <ssfn_render+0xd55>
100020ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020ce:	43                   	inc    ebx
100020cf:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020d6:	eb c0                	jmp    10002098 <ssfn_render+0xd15>
100020d8:	31 c0                	xor    eax,eax
100020da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020de:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020e2:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020e8:	40                   	inc    eax
100020e9:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020ed:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020f1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020f5:	7d e3                	jge    100020da <ssfn_render+0xd57>
100020f7:	eb d1                	jmp    100020ca <ssfn_render+0xd47>
100020f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100020fd:	47                   	inc    edi
100020fe:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002102:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002106:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000210a:	e9 45 ff ff ff       	jmp    10002054 <ssfn_render+0xcd1>
1000210f:	b3 fe                	mov    bl,0xfe
10002111:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002118:	0f 85 21 03 00 00    	jne    1000243f <ssfn_render+0x10bc>
1000211e:	31 c0                	xor    eax,eax
10002120:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002124:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002129:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
1000212d:	0f 95 c0             	setne  al
10002130:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002134:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002138:	4f                   	dec    edi
10002139:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000213d:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002145:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002149:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002150:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002154:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002158:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000215c:	31 c0                	xor    eax,eax
1000215e:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002161:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002165:	83 c1 04             	add    ecx,0x4
10002168:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
1000216c:	0f 8d c0 02 00 00    	jge    10002432 <ssfn_render+0x10af>
10002172:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002176:	8d 77 01             	lea    esi,[edi+0x1]
10002179:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000217d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
10002181:	4f                   	dec    edi
10002182:	be 01 00 00 00       	mov    esi,0x1
10002187:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000218b:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000218f:	7e 63                	jle    100021f4 <ssfn_render+0xe71>
10002191:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002195:	b9 01 00 00 00       	mov    ecx,0x1
1000219a:	89 ca                	mov    edx,ecx
1000219c:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100021a0:	7e 45                	jle    100021e7 <ssfn_render+0xe64>
100021a2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100021a8:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100021ad:	75 34                	jne    100021e3 <ssfn_render+0xe60>
100021af:	89 c7                	mov    edi,eax
100021b1:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021b5:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100021b9:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100021bd:	74 0c                	je     100021cb <ssfn_render+0xe48>
100021bf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100021c3:	01 d7                	add    edi,edx
100021c5:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021c9:	75 18                	jne    100021e3 <ssfn_render+0xe60>
100021cb:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021cf:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021d3:	74 06                	je     100021db <ssfn_render+0xe58>
100021d5:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021d9:	75 08                	jne    100021e3 <ssfn_render+0xe60>
100021db:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021df:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021e3:	41                   	inc    ecx
100021e4:	40                   	inc    eax
100021e5:	eb b3                	jmp    1000219a <ssfn_render+0xe17>
100021e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021eb:	46                   	inc    esi
100021ec:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021f0:	b0 01                	mov    al,0x1
100021f2:	eb 97                	jmp    1000218b <ssfn_render+0xe08>
100021f4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021f8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100021fc:	bb 01 00 00 00       	mov    ebx,0x1
10002201:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002205:	7e 3d                	jle    10002244 <ssfn_render+0xec1>
10002207:	b8 01 00 00 00       	mov    eax,0x1
1000220c:	89 c2                	mov    edx,eax
1000220e:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002212:	7e 23                	jle    10002237 <ssfn_render+0xeb4>
10002214:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002218:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000221e:	8d 14 07             	lea    edx,[edi+eax*1]
10002221:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002226:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000222a:	75 08                	jne    10002234 <ssfn_render+0xeb1>
1000222c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002230:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002234:	40                   	inc    eax
10002235:	eb d5                	jmp    1000220c <ssfn_render+0xe89>
10002237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000223b:	43                   	inc    ebx
1000223c:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002240:	b0 01                	mov    al,0x1
10002242:	eb bd                	jmp    10002201 <ssfn_render+0xe7e>
10002244:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002247:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
1000224b:	01 c9                	add    ecx,ecx
1000224d:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002251:	e9 08 ff ff ff       	jmp    1000215e <ssfn_render+0xddb>
10002256:	b3 fe                	mov    bl,0xfe
10002258:	80 fa 20             	cmp    dl,0x20
1000225b:	0f 85 de 01 00 00    	jne    1000243f <ssfn_render+0x10bc>
10002261:	89 c3                	mov    ebx,eax
10002263:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002267:	c1 e3 08             	shl    ebx,0x8
1000226a:	81 e3 00 1f 00 00    	and    ebx,0x1f00
10002270:	09 c3                	or     ebx,eax
10002272:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002276:	43                   	inc    ebx
10002277:	40                   	inc    eax
10002278:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000227c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
10002280:	40                   	inc    eax
10002281:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002285:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002289:	c1 f8 04             	sar    eax,0x4
1000228c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002294:	c1 f8 04             	sar    eax,0x4
10002297:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000229b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000229f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100022a4:	99                   	cdq    
100022a5:	f7 fe                	idiv   esi
100022a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100022ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022af:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100022b4:	99                   	cdq    
100022b5:	f7 fe                	idiv   esi
100022b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022bf:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022c5:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022c9:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022cd:	39 d6                	cmp    esi,edx
100022cf:	7d 0b                	jge    100022dc <ssfn_render+0xf59>
100022d1:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022d5:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022d9:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022dc:	83 c1 04             	add    ecx,0x4
100022df:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022ea:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022f1:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022f5:	72 35                	jb     1000232c <ssfn_render+0xfa9>
100022f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100022ff:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002304:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002308:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
1000230c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002313:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002317:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000231f:	31 d2                	xor    edx,edx
10002321:	31 ff                	xor    edi,edi
10002323:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002327:	e9 cc 00 00 00       	jmp    100023f8 <ssfn_render+0x1075>
1000232c:	8a 11                	mov    dl,BYTE PTR [ecx]
1000232e:	89 d0                	mov    eax,edx
10002330:	83 e0 7f             	and    eax,0x7f
10002333:	84 d2                	test   dl,dl
10002335:	8d 78 01             	lea    edi,[eax+0x1]
10002338:	78 09                	js     10002343 <ssfn_render+0xfc0>
1000233a:	41                   	inc    ecx
1000233b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000233f:	89 ca                	mov    edx,ecx
10002341:	eb 3d                	jmp    10002380 <ssfn_render+0xffd>
10002343:	48                   	dec    eax
10002344:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000234b:	83 f8 fe             	cmp    eax,0xfffffffe
1000234e:	74 16                	je     10002366 <ssfn_render+0xfe3>
10002350:	8d 5a 01             	lea    ebx,[edx+0x1]
10002353:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000235a:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
1000235d:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002364:	eb dd                	jmp    10002343 <ssfn_render+0xfc0>
10002366:	83 c1 02             	add    ecx,0x2
10002369:	eb 86                	jmp    100022f1 <ssfn_render+0xf6e>
1000236b:	42                   	inc    edx
1000236c:	8d 73 01             	lea    esi,[ebx+0x1]
1000236f:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002376:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002379:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
10002380:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002384:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
1000238b:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
10002390:	75 d9                	jne    1000236b <ssfn_render+0xfe8>
10002392:	01 f9                	add    ecx,edi
10002394:	e9 58 ff ff ff       	jmp    100022f1 <ssfn_render+0xf6e>
10002399:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000239d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100023a1:	99                   	cdq    
100023a2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100023a6:	0f af c8             	imul   ecx,eax
100023a9:	31 c0                	xor    eax,eax
100023ab:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100023b0:	74 0e                	je     100023c0 <ssfn_render+0x103d>
100023b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100023b6:	bb 04 00 00 00       	mov    ebx,0x4
100023bb:	29 f8                	sub    eax,edi
100023bd:	99                   	cdq    
100023be:	f7 fb                	idiv   ebx
100023c0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023c4:	31 db                	xor    ebx,ebx
100023c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023ca:	31 f6                	xor    esi,esi
100023cc:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023d3:	01 c1                	add    ecx,eax
100023d5:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023d9:	7f 30                	jg     1000240b <ssfn_render+0x1088>
100023db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023df:	85 c0                	test   eax,eax
100023e1:	79 02                	jns    100023e5 <ssfn_render+0x1062>
100023e3:	31 c0                	xor    eax,eax
100023e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023e9:	47                   	inc    edi
100023ea:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023ee:	b2 01                	mov    dl,0x1
100023f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023f4:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023f8:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100023fc:	7c 9b                	jl     10002399 <ssfn_render+0x1016>
100023fe:	84 d2                	test   dl,dl
10002400:	74 3b                	je     1000243d <ssfn_render+0x10ba>
10002402:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002409:	eb 32                	jmp    1000243d <ssfn_render+0x10ba>
1000240b:	89 d8                	mov    eax,ebx
1000240d:	99                   	cdq    
1000240e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002412:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002419:	3c ff                	cmp    al,0xff
1000241b:	74 0e                	je     1000242b <ssfn_render+0x10a8>
1000241d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002421:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002427:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000242b:	46                   	inc    esi
1000242c:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002430:	eb a3                	jmp    100023d5 <ssfn_render+0x1052>
10002432:	84 c0                	test   al,al
10002434:	74 07                	je     1000243d <ssfn_render+0x10ba>
10002436:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
1000243d:	b3 fe                	mov    bl,0xfe
1000243f:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002443:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002447:	e9 9f f5 ff ff       	jmp    100019eb <ssfn_render+0x668>
1000244c:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002452:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002455:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002458:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
1000245b:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002461:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002465:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002469:	89 f0                	mov    eax,esi
1000246b:	89 d9                	mov    ecx,ebx
1000246d:	43                   	inc    ebx
1000246e:	39 de                	cmp    esi,ebx
10002470:	7e 08                	jle    1000247a <ssfn_render+0x10f7>
10002472:	48                   	dec    eax
10002473:	29 c8                	sub    eax,ecx
10002475:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002478:	eb 04                	jmp    1000247e <ssfn_render+0x10fb>
1000247a:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
1000247e:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002486:	0f 84 c9 0c 00 00    	je     10003155 <ssfn_render+0x1dd2>
1000248c:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002492:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10002498:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000249c:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
1000249f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100024a3:	0f ba e0 0c          	bt     eax,0xc
100024a7:	72 22                	jb     100024cb <ssfn_render+0x1148>
100024a9:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100024ac:	83 e0 0f             	and    eax,0xf
100024af:	3c 03                	cmp    al,0x3
100024b1:	74 18                	je     100024cb <ssfn_render+0x1148>
100024b3:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100024b7:	84 c9                	test   cl,cl
100024b9:	74 10                	je     100024cb <ssfn_render+0x1148>
100024bb:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100024bf:	0f af d7             	imul   edx,edi
100024c2:	89 d0                	mov    eax,edx
100024c4:	99                   	cdq    
100024c5:	f7 f9                	idiv   ecx
100024c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024cf:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024d5:	7d 06                	jge    100024dd <ssfn_render+0x115a>
100024d7:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024dd:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024e3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024e7:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024ea:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024ef:	89 d0                	mov    eax,edx
100024f1:	99                   	cdq    
100024f2:	f7 f9                	idiv   ecx
100024f4:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024fc:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
100024ff:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002503:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002507:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000250b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002510:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002514:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002519:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000251d:	99                   	cdq    
1000251e:	f7 f9                	idiv   ecx
10002520:	31 d2                	xor    edx,edx
10002522:	83 ff 10             	cmp    edi,0x10
10002525:	0f 9f c2             	setg   dl
10002528:	42                   	inc    edx
10002529:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
1000252d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002531:	7d 08                	jge    1000253b <ssfn_render+0x11b8>
10002533:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002537:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000253b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000253f:	39 c2                	cmp    edx,eax
10002541:	7d 04                	jge    10002547 <ssfn_render+0x11c4>
10002543:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002547:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
1000254c:	74 4c                	je     1000259a <ssfn_render+0x1217>
1000254e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002552:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002557:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000255b:	99                   	cdq    
1000255c:	f7 f9                	idiv   ecx
1000255e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002562:	81 e2 00 08 00 00    	and    edx,0x800
10002568:	74 04                	je     1000256e <ssfn_render+0x11eb>
1000256a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000256e:	01 d0                	add    eax,edx
10002570:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002576:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000257a:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000257e:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
10002582:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002587:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000258b:	99                   	cdq    
1000258c:	f7 f9                	idiv   ecx
1000258e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002592:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10002598:	eb 22                	jmp    100025bc <ssfn_render+0x1239>
1000259a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000259e:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100025a8:	d1 f8                	sar    eax,1
100025aa:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100025b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100025b6:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100025bc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025c3:	8b 18                	mov    ebx,DWORD PTR [eax]
100025c5:	85 db                	test   ebx,ebx
100025c7:	0f 84 2e 09 00 00    	je     10002efb <ssfn_render+0x1b78>
100025cd:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025d1:	89 d1                	mov    ecx,edx
100025d3:	89 d0                	mov    eax,edx
100025d5:	66 c1 f9 0b          	sar    cx,0xb
100025d9:	c1 f8 1f             	sar    eax,0x1f
100025dc:	31 c2                	xor    edx,eax
100025de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025e2:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025e6:	88 c8                	mov    al,cl
100025e8:	83 e0 10             	and    eax,0x10
100025eb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025f3:	83 c0 40             	add    eax,0x40
100025f6:	c1 f8 06             	sar    eax,0x6
100025f9:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002600:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002604:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002608:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
1000260c:	7d 08                	jge    10002616 <ssfn_render+0x1293>
1000260e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002612:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002616:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002619:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002621:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002625:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
1000262d:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002631:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002636:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000263a:	99                   	cdq    
1000263b:	f7 f9                	idiv   ecx
1000263d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002641:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002648:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000264b:	0f b6 f4             	movzx  esi,ah
1000264e:	89 c2                	mov    edx,eax
10002650:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002654:	c1 ea 10             	shr    edx,0x10
10002657:	0f b6 fa             	movzx  edi,dl
1000265a:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000265e:	0f b6 f8             	movzx  edi,al
10002661:	c1 e8 18             	shr    eax,0x18
10002664:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000266c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002673:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002676:	0f b6 fc             	movzx  edi,ah
10002679:	89 c2                	mov    edx,eax
1000267b:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002682:	c1 ea 10             	shr    edx,0x10
10002685:	0f b6 c0             	movzx  eax,al
10002688:	0f b6 f2             	movzx  esi,dl
1000268b:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002692:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002699:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
1000269d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026a4:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100026ab:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026af:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026b3:	0f af c2             	imul   eax,edx
100026b6:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100026ba:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100026be:	8d 04 90             	lea    eax,[eax+edx*4]
100026c1:	01 d8                	add    eax,ebx
100026c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026ce:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026d5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026da:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026e1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026e5:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026e9:	0f 8d e2 04 00 00    	jge    10002bd1 <ssfn_render+0x184e>
100026ef:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026f6:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100026fd:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002701:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002705:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002709:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000270d:	39 d0                	cmp    eax,edx
1000270f:	0f 8d bc 04 00 00    	jge    10002bd1 <ssfn_render+0x184e>
10002715:	85 c0                	test   eax,eax
10002717:	0f 88 94 04 00 00    	js     10002bb1 <ssfn_render+0x182e>
1000271d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002723:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002727:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000272b:	c1 e1 08             	shl    ecx,0x8
1000272e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002736:	89 c8                	mov    eax,ecx
10002738:	0f af c3             	imul   eax,ebx
1000273b:	99                   	cdq    
1000273c:	f7 fe                	idiv   esi
1000273e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002745:	c1 f8 08             	sar    eax,0x8
10002748:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000274f:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002755:	0f af c3             	imul   eax,ebx
10002758:	99                   	cdq    
10002759:	f7 fe                	idiv   esi
1000275b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000275f:	c1 f8 08             	sar    eax,0x8
10002762:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002769:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
1000276d:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002774:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
1000277b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002782:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002786:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000278a:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000278e:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002792:	0f 8d 19 04 00 00    	jge    10002bb1 <ssfn_render+0x182e>
10002798:	85 c0                	test   eax,eax
1000279a:	0f 88 ff 03 00 00    	js     10002b9f <ssfn_render+0x181c>
100027a0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027a7:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100027ab:	75 42                	jne    100027ef <ssfn_render+0x146c>
100027ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100027b1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100027b8:	b9 10 00 00 00       	mov    ecx,0x10
100027bd:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100027c0:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027c7:	89 c2                	mov    edx,eax
100027c9:	0f b6 fc             	movzx  edi,ah
100027cc:	d3 ea                	shr    edx,cl
100027ce:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027d5:	0f b6 f2             	movzx  esi,dl
100027d8:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027dc:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027e3:	d3 e8                	shr    eax,cl
100027e5:	0f b6 c0             	movzx  eax,al
100027e8:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027ef:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027f9:	0f b7 18             	movzx  ebx,WORD PTR [eax]
100027fc:	c1 e1 08             	shl    ecx,0x8
100027ff:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002803:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000280b:	89 c8                	mov    eax,ecx
1000280d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002815:	0f af c3             	imul   eax,ebx
10002818:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002820:	99                   	cdq    
10002821:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002829:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
1000282d:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002835:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
1000283c:	c1 f8 08             	sar    eax,0x8
1000283f:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002846:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
1000284c:	0f af c3             	imul   eax,ebx
1000284f:	99                   	cdq    
10002850:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002854:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002858:	c1 f8 08             	sar    eax,0x8
1000285b:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10002862:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002869:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000286d:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002871:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002875:	0f 8d 3b 02 00 00    	jge    10002ab6 <ssfn_render+0x1733>
1000287b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
1000287f:	c1 fa 08             	sar    edx,0x8
10002882:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002889:	75 25                	jne    100028b0 <ssfn_render+0x152d>
1000288b:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
10002890:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
10002897:	b8 00 01 00 00       	mov    eax,0x100
1000289c:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100028a4:	29 c8                	sub    eax,ecx
100028a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100028aa:	39 c7                	cmp    edi,eax
100028ac:	7e 1c                	jle    100028ca <ssfn_render+0x1547>
100028ae:	eb 16                	jmp    100028c6 <ssfn_render+0x1543>
100028b0:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100028b8:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100028bf:	75 09                	jne    100028ca <ssfn_render+0x1547>
100028c1:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028ce:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028d1:	0f af c2             	imul   eax,edx
100028d4:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028db:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028e0:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028e5:	c1 f8 08             	sar    eax,0x8
100028e8:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028ef:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028fa:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
100028fe:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002902:	0f 8d a1 01 00 00    	jge    10002aa9 <ssfn_render+0x1726>
10002908:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000290c:	c1 f8 08             	sar    eax,0x8
1000290f:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002916:	75 3b                	jne    10002953 <ssfn_render+0x15d0>
10002918:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
1000291d:	ba 00 01 00 00       	mov    edx,0x100
10002922:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000292a:	29 ca                	sub    edx,ecx
1000292c:	89 f1                	mov    ecx,esi
1000292e:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002935:	39 d1                	cmp    ecx,edx
10002937:	7c 0e                	jl     10002947 <ssfn_render+0x15c4>
10002939:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000293d:	81 fa 00 01 00 00    	cmp    edx,0x100
10002943:	74 22                	je     10002967 <ssfn_render+0x15e4>
10002945:	89 d1                	mov    ecx,edx
10002947:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
1000294c:	89 cf                	mov    edi,ecx
1000294e:	c1 ff 08             	sar    edi,0x8
10002951:	eb 14                	jmp    10002967 <ssfn_render+0x15e4>
10002953:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
1000295a:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002961:	74 04                	je     10002967 <ssfn_render+0x15e4>
10002963:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002967:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
1000296b:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
1000296f:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002976:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
1000297b:	81 fa ff 00 00 00    	cmp    edx,0xff
10002981:	75 37                	jne    100029ba <ssfn_render+0x1637>
10002983:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
1000298a:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002992:	0f af c7             	imul   eax,edi
10002995:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002999:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100029a0:	0f af c7             	imul   eax,edi
100029a3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029a7:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100029ae:	0f af c7             	imul   eax,edi
100029b1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029b5:	e9 e2 00 00 00       	jmp    10002a9c <ssfn_render+0x1719>
100029ba:	81 fa fe 00 00 00    	cmp    edx,0xfe
100029c0:	74 2d                	je     100029ef <ssfn_render+0x166c>
100029c2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029c5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029c8:	85 c9                	test   ecx,ecx
100029ca:	74 23                	je     100029ef <ssfn_render+0x166c>
100029cc:	01 c8                	add    eax,ecx
100029ce:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029d1:	89 d9                	mov    ecx,ebx
100029d3:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029da:	c1 e9 10             	shr    ecx,0x10
100029dd:	0f b6 f7             	movzx  esi,bh
100029e0:	0f b6 c1             	movzx  eax,cl
100029e3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029e7:	0f b6 c3             	movzx  eax,bl
100029ea:	c1 eb 18             	shr    ebx,0x18
100029ed:	eb 14                	jmp    10002a03 <ssfn_render+0x1680>
100029ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029fb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
100029ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002a03:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a09:	75 25                	jne    10002a30 <ssfn_render+0x16ad>
10002a0b:	0f af c7             	imul   eax,edi
10002a0e:	0f af f7             	imul   esi,edi
10002a11:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a15:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a19:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002a1f:	0f af cf             	imul   ecx,edi
10002a22:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a26:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a2a:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a2e:	eb 6c                	jmp    10002a9c <ssfn_render+0x1719>
10002a30:	0f af f3             	imul   esi,ebx
10002a33:	0f af c3             	imul   eax,ebx
10002a36:	b9 ff 00 00 00       	mov    ecx,0xff
10002a3b:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a42:	29 d9                	sub    ecx,ebx
10002a44:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a48:	0f af d1             	imul   edx,ecx
10002a4b:	b9 ff 00 00 00       	mov    ecx,0xff
10002a50:	01 d0                	add    eax,edx
10002a52:	0f af c7             	imul   eax,edi
10002a55:	99                   	cdq    
10002a56:	f7 f9                	idiv   ecx
10002a58:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a5c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a60:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a68:	01 f0                	add    eax,esi
10002a6a:	89 ce                	mov    esi,ecx
10002a6c:	0f af c7             	imul   eax,edi
10002a6f:	99                   	cdq    
10002a70:	f7 f9                	idiv   ecx
10002a72:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a76:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a7a:	0f af cb             	imul   ecx,ebx
10002a7d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a81:	0f af df             	imul   ebx,edi
10002a84:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a8c:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a90:	01 c8                	add    eax,ecx
10002a92:	0f af c7             	imul   eax,edi
10002a95:	99                   	cdq    
10002a96:	f7 fe                	idiv   esi
10002a98:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002a9c:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002aa4:	e9 51 fe ff ff       	jmp    100028fa <ssfn_render+0x1577>
10002aa9:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002ab1:	e9 b7 fd ff ff       	jmp    1000286d <ssfn_render+0x14ea>
10002ab6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002abb:	74 30                	je     10002aed <ssfn_render+0x176a>
10002abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002ac1:	31 d2                	xor    edx,edx
10002ac3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ac7:	31 d2                	xor    edx,edx
10002ac9:	89 c1                	mov    ecx,eax
10002acb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002acf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ad3:	31 d2                	xor    edx,edx
10002ad5:	89 c6                	mov    esi,eax
10002ad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002adb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002adf:	31 d2                	xor    edx,edx
10002ae1:	89 c3                	mov    ebx,eax
10002ae3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ae7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aeb:	eb 1c                	jmp    10002b09 <ssfn_render+0x1786>
10002aed:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002af1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002af5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002af9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002afd:	c1 e9 08             	shr    ecx,0x8
10002b00:	c1 ee 08             	shr    esi,0x8
10002b03:	c1 eb 08             	shr    ebx,0x8
10002b06:	c1 e8 08             	shr    eax,0x8
10002b09:	83 f8 0f             	cmp    eax,0xf
10002b0c:	0f 86 8d 00 00 00    	jbe    10002b9f <ssfn_render+0x181c>
10002b12:	89 ca                	mov    edx,ecx
10002b14:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002b1a:	76 05                	jbe    10002b21 <ssfn_render+0x179e>
10002b1c:	ba ff 00 00 00       	mov    edx,0xff
10002b21:	b9 10 00 00 00       	mov    ecx,0x10
10002b26:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b2d:	d3 e2                	shl    edx,cl
10002b2f:	3d ff 00 00 00       	cmp    eax,0xff
10002b34:	89 d1                	mov    ecx,edx
10002b36:	76 05                	jbe    10002b3d <ssfn_render+0x17ba>
10002b38:	b8 ff 00 00 00       	mov    eax,0xff
10002b3d:	c1 e0 18             	shl    eax,0x18
10002b40:	09 c8                	or     eax,ecx
10002b42:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b48:	76 05                	jbe    10002b4f <ssfn_render+0x17cc>
10002b4a:	be ff 00 00 00       	mov    esi,0xff
10002b4f:	c1 e6 08             	shl    esi,0x8
10002b52:	09 f0                	or     eax,esi
10002b54:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b5a:	76 05                	jbe    10002b61 <ssfn_render+0x17de>
10002b5c:	bb ff 00 00 00       	mov    ebx,0xff
10002b61:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b69:	d3 e3                	shl    ebx,cl
10002b6b:	09 c3                	or     ebx,eax
10002b6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b74:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b77:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b7b:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b7f:	75 1e                	jne    10002b9f <ssfn_render+0x181c>
10002b81:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b88:	7e 07                	jle    10002b91 <ssfn_render+0x180e>
10002b8a:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b95:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b99:	7d 04                	jge    10002b9f <ssfn_render+0x181c>
10002b9b:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002b9f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ba7:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002bab:	0f 85 ca fb ff ff    	jne    1000277b <ssfn_render+0x13f8>
10002bb1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bb8:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002bbc:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bc0:	25 fc ff 00 00       	and    eax,0xfffc
10002bc5:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002bcc:	e9 10 fb ff ff       	jmp    100026e1 <ssfn_render+0x135e>
10002bd1:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002bd8:	0f 84 90 01 00 00    	je     10002d6e <ssfn_render+0x19eb>
10002bde:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002be6:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bf1:	40                   	inc    eax
10002bf2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002bf6:	29 c7                	sub    edi,eax
10002bf8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002bfc:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002c00:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002c04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c08:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002c0c:	7e 09                	jle    10002c17 <ssfn_render+0x1894>
10002c0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c12:	40                   	inc    eax
10002c13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c17:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c1e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c25:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c29:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c2d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c31:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c35:	0f af c2             	imul   eax,edx
10002c38:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c3c:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c40:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c44:	03 07                	add    eax,DWORD PTR [edi]
10002c46:	89 c7                	mov    edi,eax
10002c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c4c:	c1 e0 18             	shl    eax,0x18
10002c4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c53:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c5b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c60:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c68:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c6c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c70:	0f 8e f8 00 00 00    	jle    10002d6e <ssfn_render+0x19eb>
10002c76:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c7d:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c84:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c88:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c8c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c90:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c94:	39 d0                	cmp    eax,edx
10002c96:	0f 8d d2 00 00 00    	jge    10002d6e <ssfn_render+0x19eb>
10002c9c:	31 db                	xor    ebx,ebx
10002c9e:	85 c0                	test   eax,eax
10002ca0:	79 23                	jns    10002cc5 <ssfn_render+0x1942>
10002ca2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ca9:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cad:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002cb1:	25 fc ff 00 00       	and    eax,0xfffc
10002cb6:	01 c7                	add    edi,eax
10002cb8:	eb aa                	jmp    10002c64 <ssfn_render+0x18e1>
10002cba:	85 c0                	test   eax,eax
10002cbc:	79 20                	jns    10002cde <ssfn_render+0x195b>
10002cbe:	43                   	inc    ebx
10002cbf:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002cc3:	7c dd                	jl     10002ca2 <ssfn_render+0x191f>
10002cc5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ccc:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cd0:	01 d8                	add    eax,ebx
10002cd2:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002cd6:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002cda:	7c de                	jl     10002cba <ssfn_render+0x1937>
10002cdc:	eb c4                	jmp    10002ca2 <ssfn_render+0x191f>
10002cde:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002ce2:	7e 06                	jle    10002cea <ssfn_render+0x1967>
10002ce4:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002ce8:	7f d4                	jg     10002cbe <ssfn_render+0x193b>
10002cea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002ced:	b8 10 00 00 00       	mov    eax,0x10
10002cf2:	0f b6 f6             	movzx  esi,dh
10002cf5:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002cf9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002cfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d01:	89 d0                	mov    eax,edx
10002d03:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d07:	d3 e8                	shr    eax,cl
10002d09:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d0d:	0f b6 c0             	movzx  eax,al
10002d10:	d3 ea                	shr    edx,cl
10002d12:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002d16:	0f b6 f2             	movzx  esi,dl
10002d19:	29 c1                	sub    ecx,eax
10002d1b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d1f:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d24:	29 f2                	sub    edx,esi
10002d26:	c1 f9 08             	sar    ecx,0x8
10002d29:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d2e:	01 c8                	add    eax,ecx
10002d30:	c1 fa 08             	sar    edx,0x8
10002d33:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d37:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d3b:	d3 e0                	shl    eax,cl
10002d3d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d41:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d45:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d49:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d4d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d52:	d3 e6                	shl    esi,cl
10002d54:	c1 fa 08             	sar    edx,0x8
10002d57:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d5b:	c1 e2 08             	shl    edx,0x8
10002d5e:	09 d0                	or     eax,edx
10002d60:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d64:	09 c6                	or     esi,eax
10002d66:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d69:	e9 50 ff ff ff       	jmp    10002cbe <ssfn_render+0x193b>
10002d6e:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d75:	0f 84 80 01 00 00    	je     10002efb <ssfn_render+0x1b78>
10002d7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d83:	d1 fa                	sar    edx,1
10002d85:	40                   	inc    eax
10002d86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d8e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d92:	7e 09                	jle    10002d9d <ssfn_render+0x1a1a>
10002d94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d98:	40                   	inc    eax
10002d99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d9d:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002da4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002dab:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002daf:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002db3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002db7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dbb:	01 d0                	add    eax,edx
10002dbd:	0f af c1             	imul   eax,ecx
10002dc0:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002dc4:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002dc8:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002dcc:	03 03                	add    eax,DWORD PTR [ebx]
10002dce:	89 c7                	mov    edi,eax
10002dd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002dd4:	c1 e0 18             	shl    eax,0x18
10002dd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002ddb:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002de3:	01 d0                	add    eax,edx
10002de5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002de9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002df2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002df6:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002dfa:	0f 8e fb 00 00 00    	jle    10002efb <ssfn_render+0x1b78>
10002e00:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e07:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002e0b:	01 d8                	add    eax,ebx
10002e0d:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002e14:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002e18:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002e1c:	39 d0                	cmp    eax,edx
10002e1e:	0f 8d d7 00 00 00    	jge    10002efb <ssfn_render+0x1b78>
10002e24:	31 f6                	xor    esi,esi
10002e26:	85 c0                	test   eax,eax
10002e28:	0f 89 ad 00 00 00    	jns    10002edb <ssfn_render+0x1b58>
10002e2e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e35:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e39:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e3d:	25 fc ff 00 00       	and    eax,0xfffc
10002e42:	01 c7                	add    edi,eax
10002e44:	eb ac                	jmp    10002df2 <ssfn_render+0x1a6f>
10002e46:	85 c0                	test   eax,eax
10002e48:	0f 88 82 00 00 00    	js     10002ed0 <ssfn_render+0x1b4d>
10002e4e:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e51:	b8 10 00 00 00       	mov    eax,0x10
10002e56:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e5a:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e62:	89 d8                	mov    eax,ebx
10002e64:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e68:	d3 e8                	shr    eax,cl
10002e6a:	0f b6 cf             	movzx  ecx,bh
10002e6d:	0f b6 c0             	movzx  eax,al
10002e70:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e74:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e78:	d3 eb                	shr    ebx,cl
10002e7a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e7e:	0f b6 db             	movzx  ebx,bl
10002e81:	29 c1                	sub    ecx,eax
10002e83:	29 da                	sub    edx,ebx
10002e85:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e8a:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e8f:	c1 f9 08             	sar    ecx,0x8
10002e92:	c1 fa 08             	sar    edx,0x8
10002e95:	01 c8                	add    eax,ecx
10002e97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e9b:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e9f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002ea3:	d3 e0                	shl    eax,cl
10002ea5:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002ea9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002ead:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002eb2:	c1 fa 08             	sar    edx,0x8
10002eb5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002eb9:	c1 e2 08             	shl    edx,0x8
10002ebc:	09 d0                	or     eax,edx
10002ebe:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ec1:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002ec5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ec9:	d3 e2                	shl    edx,cl
10002ecb:	09 c2                	or     edx,eax
10002ecd:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002ed0:	46                   	inc    esi
10002ed1:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002ed5:	0f 8c 53 ff ff ff    	jl     10002e2e <ssfn_render+0x1aab>
10002edb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ee2:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002ee6:	01 f0                	add    eax,esi
10002ee8:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002eec:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ef0:	0f 8c 50 ff ff ff    	jl     10002e46 <ssfn_render+0x1ac3>
10002ef6:	e9 33 ff ff ff       	jmp    10002e2e <ssfn_render+0x1aab>
10002efb:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002f02:	74 04                	je     10002f08 <ssfn_render+0x1b85>
10002f04:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002f0c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002f10:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002f16:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f1d:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002f21:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f28:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f2b:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f2f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f35:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f39:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f3e:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f42:	99                   	cdq    
10002f43:	f7 f9                	idiv   ecx
10002f45:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f49:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f4f:	25 80 00 00 00       	and    eax,0x80
10002f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f58:	0f 85 f7 01 00 00    	jne    10003155 <ssfn_render+0x1dd2>
10002f5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f61:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f65:	0f 84 ea 01 00 00    	je     10003155 <ssfn_render+0x1dd2>
10002f6b:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f72:	83 ec 0c             	sub    esp,0xc
10002f75:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f7c:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f83:	51                   	push   ecx
10002f84:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f8b:	e8 53 d9 ff ff       	call   100008e3 <_ssfn_c>
10002f90:	83 c4 10             	add    esp,0x10
10002f93:	85 c0                	test   eax,eax
10002f95:	0f 84 ba 01 00 00    	je     10003155 <ssfn_render+0x1dd2>
10002f9b:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002fa3:	0f 86 ac 01 00 00    	jbe    10003155 <ssfn_render+0x1dd2>
10002fa9:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002faf:	8d 48 06             	lea    ecx,[eax+0x6]
10002fb2:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002fbc:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002fc0:	0f 8e 8f 01 00 00    	jle    10003155 <ssfn_render+0x1dd2>
10002fc6:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fc8:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fcc:	8a 18                	mov    bl,BYTE PTR [eax]
10002fce:	83 e3 40             	and    ebx,0x40
10002fd1:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fd6:	75 14                	jne    10002fec <ssfn_render+0x1c69>
10002fd8:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fdc:	75 0e                	jne    10002fec <ssfn_render+0x1c69>
10002fde:	80 fb 01             	cmp    bl,0x1
10002fe1:	19 c0                	sbb    eax,eax
10002fe3:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002fe7:	e9 60 01 00 00       	jmp    1000314c <ssfn_render+0x1dc9>
10002fec:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002ff0:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002ff4:	c1 e6 10             	shl    esi,0x10
10002ff7:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002ffb:	84 db                	test   bl,bl
10002ffd:	74 08                	je     10003007 <ssfn_render+0x1c84>
10002fff:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10003002:	83 c1 06             	add    ecx,0x6
10003005:	eb 0c                	jmp    10003013 <ssfn_render+0x1c90>
10003007:	c1 e2 08             	shl    edx,0x8
1000300a:	83 c1 05             	add    ecx,0x5
1000300d:	89 d0                	mov    eax,edx
1000300f:	09 f0                	or     eax,esi
10003011:	09 c7                	or     edi,eax
10003013:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003016:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000301a:	01 f8                	add    eax,edi
1000301c:	8a 10                	mov    dl,BYTE PTR [eax]
1000301e:	88 d3                	mov    bl,dl
10003020:	83 e3 e0             	and    ebx,0xffffffe0
10003023:	80 fb c0             	cmp    bl,0xc0
10003026:	0f 85 20 01 00 00    	jne    1000314c <ssfn_render+0x1dc9>
1000302c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10003030:	c1 e2 08             	shl    edx,0x8
10003033:	83 c0 02             	add    eax,0x2
10003036:	81 e2 00 1f 00 00    	and    edx,0x1f00
1000303c:	09 da                	or     edx,ebx
1000303e:	8d 72 01             	lea    esi,[edx+0x1]
10003041:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003045:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
1000304c:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10003050:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003055:	0f 84 f1 00 00 00    	je     1000314c <ssfn_render+0x1dc9>
1000305b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000305f:	0f b7 10             	movzx  edx,WORD PTR [eax]
10003062:	c1 e3 10             	shl    ebx,0x10
10003065:	81 e3 00 00 0f 00    	and    ebx,0xf0000
1000306b:	09 d3                	or     ebx,edx
1000306d:	39 de                	cmp    esi,ebx
1000306f:	0f 82 cf 00 00 00    	jb     10003144 <ssfn_render+0x1dc1>
10003075:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003078:	89 d7                	mov    edi,edx
1000307a:	c1 e7 10             	shl    edi,0x10
1000307d:	81 e7 00 00 0f 00    	and    edi,0xf0000
10003083:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003087:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
1000308b:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000308f:	39 fe                	cmp    esi,edi
10003091:	0f 87 ad 00 00 00    	ja     10003144 <ssfn_render+0x1dc1>
10003097:	29 de                	sub    esi,ebx
10003099:	c0 ea 04             	shr    dl,0x4
1000309c:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100030a3:	0f b6 d2             	movzx  edx,dl
100030a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100030aa:	89 d3                	mov    ebx,edx
100030ac:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100030b0:	c1 e3 10             	shl    ebx,0x10
100030b3:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100030b6:	09 da                	or     edx,ebx
100030b8:	c0 e8 04             	shr    al,0x4
100030bb:	c1 e0 18             	shl    eax,0x18
100030be:	09 c2                	or     edx,eax
100030c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030c4:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030c7:	01 c2                	add    edx,eax
100030c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030cc:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030d0:	39 d7                	cmp    edi,edx
100030d2:	76 78                	jbe    1000314c <ssfn_render+0x1dc9>
100030d4:	8a 1a                	mov    bl,BYTE PTR [edx]
100030d6:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030dd:	89 de                	mov    esi,ebx
100030df:	83 e6 7f             	and    esi,0x7f
100030e2:	39 c6                	cmp    esi,eax
100030e4:	73 1d                	jae    10003103 <ssfn_render+0x1d80>
100030e6:	48                   	dec    eax
100030e7:	bb 02 00 00 00       	mov    ebx,0x2
100030ec:	29 f0                	sub    eax,esi
100030ee:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030f8:	84 c0                	test   al,al
100030fa:	78 03                	js     100030ff <ssfn_render+0x1d7c>
100030fc:	8d 58 02             	lea    ebx,[eax+0x2]
100030ff:	01 da                	add    edx,ebx
10003101:	eb cd                	jmp    100030d0 <ssfn_render+0x1d4d>
10003103:	be 01 00 00 00       	mov    esi,0x1
10003108:	84 db                	test   bl,bl
1000310a:	78 03                	js     1000310f <ssfn_render+0x1d8c>
1000310c:	8d 70 01             	lea    esi,[eax+0x1]
1000310f:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003113:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003117:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000311c:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003120:	99                   	cdq    
10003121:	f7 fb                	idiv   ebx
10003123:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003128:	74 0d                	je     10003137 <ssfn_render+0x1db4>
1000312a:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003131:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003135:	eb 15                	jmp    1000314c <ssfn_render+0x1dc9>
10003137:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000313e:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
10003142:	eb 08                	jmp    1000314c <ssfn_render+0x1dc9>
10003144:	83 c0 08             	add    eax,0x8
10003147:	e9 00 ff ff ff       	jmp    1000304c <ssfn_render+0x1cc9>
1000314c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003150:	e9 5d fe ff ff       	jmp    10002fb2 <ssfn_render+0x1c2f>
10003155:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
1000315c:	eb 73                	jmp    100031d1 <ssfn_render+0x1e4e>
1000315e:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003169:	e9 50 e4 ff ff       	jmp    100015be <ssfn_render+0x23b>
1000316e:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003175:	57                   	push   edi
10003176:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000317d:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003184:	e8 5a d7 ff ff       	call   100008e3 <_ssfn_c>
10003189:	5f                   	pop    edi
1000318a:	85 c0                	test   eax,eax
1000318c:	0f 84 25 e4 ff ff    	je     100015b7 <ssfn_render+0x234>
10003192:	e9 a2 e4 ff ff       	jmp    10001639 <ssfn_render+0x2b6>
10003197:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000319a:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
1000319e:	75 0c                	jne    100031ac <ssfn_render+0x1e29>
100031a0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100031a7:	e9 3b e4 ff ff       	jmp    100015e7 <ssfn_render+0x264>
100031ac:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100031b3:	57                   	push   edi
100031b4:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100031bb:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100031c2:	e8 1c d7 ff ff       	call   100008e3 <_ssfn_c>
100031c7:	59                   	pop    ecx
100031c8:	85 c0                	test   eax,eax
100031ca:	74 d4                	je     100031a0 <ssfn_render+0x1e1d>
100031cc:	e9 68 e4 ff ff       	jmp    10001639 <ssfn_render+0x2b6>
100031d1:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031d7:	89 c8                	mov    eax,ecx
100031d9:	5b                   	pop    ebx
100031da:	5e                   	pop    esi
100031db:	5f                   	pop    edi
100031dc:	5d                   	pop    ebp
100031dd:	c3                   	ret    

100031de <ssfn_bbox>:
100031de:	55                   	push   ebp
100031df:	57                   	push   edi
100031e0:	56                   	push   esi
100031e1:	53                   	push   ebx
100031e2:	83 ec 3c             	sub    esp,0x3c
100031e5:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031ea:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031ee:	0f 94 c0             	sete   al
100031f1:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031f6:	0f 94 c2             	sete   dl
100031f9:	09 d0                	or     eax,edx
100031fb:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003200:	0f 94 c2             	sete   dl
10003203:	09 d0                	or     eax,edx
10003205:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000320a:	0f 94 c2             	sete   dl
1000320d:	09 d0                	or     eax,edx
1000320f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003214:	0f 94 c2             	sete   dl
10003217:	08 d0                	or     al,dl
10003219:	0f 85 7c 01 00 00    	jne    1000339b <ssfn_bbox+0x1bd>
1000321f:	85 db                	test   ebx,ebx
10003221:	0f 84 74 01 00 00    	je     1000339b <ssfn_bbox+0x1bd>
10003227:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000322b:	31 f6                	xor    esi,esi
1000322d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003233:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003237:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000323d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003241:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003247:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000324b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003251:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003255:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003258:	0f 84 42 01 00 00    	je     100033a0 <ssfn_bbox+0x1c2>
1000325e:	8d 54 24 18          	lea    edx,[esp+0x18]
10003262:	b9 06 00 00 00       	mov    ecx,0x6
10003267:	89 d7                	mov    edi,edx
10003269:	89 f0                	mov    eax,esi
1000326b:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003275:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000327f:	31 ff                	xor    edi,edi
10003281:	bd 01 00 00 00       	mov    ebp,0x1
10003286:	50                   	push   eax
10003287:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000328b:	8d 44 24 20          	lea    eax,[esp+0x20]
1000328f:	50                   	push   eax
10003290:	53                   	push   ebx
10003291:	e8 fc ff ff ff       	call   10003292 <ssfn_bbox+0xb4>	10003292: R_386_PC32	ssfn_render
10003296:	83 c4 10             	add    esp,0x10
10003299:	89 c6                	mov    esi,eax
1000329b:	85 c0                	test   eax,eax
1000329d:	74 6f                	je     1000330e <ssfn_bbox+0x130>
1000329f:	0f 88 fb 00 00 00    	js     100033a0 <ssfn_bbox+0x1c2>
100032a5:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032ab:	85 c0                	test   eax,eax
100032ad:	0f 84 ed 00 00 00    	je     100033a0 <ssfn_bbox+0x1c2>
100032b3:	85 ed                	test   ebp,ebp
100032b5:	74 0b                	je     100032c2 <ssfn_bbox+0xe4>
100032b7:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100032bd:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100032c2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032c6:	74 12                	je     100032da <ssfn_bbox+0xfc>
100032c8:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032ce:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032d2:	7d 2f                	jge    10003303 <ssfn_bbox+0x125>
100032d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032d8:	eb 29                	jmp    10003303 <ssfn_bbox+0x125>
100032da:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032dd:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032e2:	39 cd                	cmp    ebp,ecx
100032e4:	7d 05                	jge    100032eb <ssfn_bbox+0x10d>
100032e6:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032eb:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032ef:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032f4:	84 d2                	test   dl,dl
100032f6:	75 04                	jne    100032fc <ssfn_bbox+0x11e>
100032f8:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100032fc:	01 ca                	add    edx,ecx
100032fe:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003303:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003307:	31 ed                	xor    ebp,ebp
10003309:	e9 78 ff ff ff       	jmp    10003286 <ssfn_bbox+0xa8>
1000330e:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003315:	74 23                	je     1000333a <ssfn_bbox+0x15c>
10003317:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000331a:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000331e:	75 1a                	jne    1000333a <ssfn_bbox+0x15c>
10003320:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003326:	b9 04 00 00 00       	mov    ecx,0x4
1000332b:	99                   	cdq    
1000332c:	f7 f9                	idiv   ecx
1000332e:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003333:	29 f8                	sub    eax,edi
10003335:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000333a:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003340:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003344:	74 29                	je     1000336f <ssfn_bbox+0x191>
10003346:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000334b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000334f:	89 01                	mov    DWORD PTR [ecx],eax
10003351:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003355:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000335b:	89 01                	mov    DWORD PTR [ecx],eax
1000335d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003361:	89 38                	mov    DWORD PTR [eax],edi
10003363:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003367:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000336b:	89 38                	mov    DWORD PTR [eax],edi
1000336d:	eb 31                	jmp    100033a0 <ssfn_bbox+0x1c2>
1000336f:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003374:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003378:	89 07                	mov    DWORD PTR [edi],eax
1000337a:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000337f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
10003383:	89 07                	mov    DWORD PTR [edi],eax
10003385:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000338f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003393:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003399:	eb 05                	jmp    100033a0 <ssfn_bbox+0x1c2>
1000339b:	be fc ff ff ff       	mov    esi,0xfffffffc
100033a0:	83 c4 3c             	add    esp,0x3c
100033a3:	89 f0                	mov    eax,esi
100033a5:	5b                   	pop    ebx
100033a6:	5e                   	pop    esi
100033a7:	5f                   	pop    edi
100033a8:	5d                   	pop    ebp
100033a9:	c3                   	ret    

100033aa <ssfn_text>:
100033aa:	55                   	push   ebp
100033ab:	57                   	push   edi
100033ac:	56                   	push   esi
100033ad:	53                   	push   ebx
100033ae:	83 ec 1c             	sub    esp,0x1c
100033b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100033b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100033b9:	85 f6                	test   esi,esi
100033bb:	0f 84 b2 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033c1:	85 ed                	test   ebp,ebp
100033c3:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033c8:	0f 84 a5 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033ce:	83 ec 0c             	sub    esp,0xc
100033d1:	6a 18                	push   0x18
100033d3:	e8 fc ff ff ff       	call   100033d4 <ssfn_text+0x2a>	100033d4: R_386_PC32	malloc
100033d8:	83 c4 10             	add    esp,0x10
100033db:	89 c3                	mov    ebx,eax
100033dd:	85 c0                	test   eax,eax
100033df:	0f 84 8e 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033e5:	31 c0                	xor    eax,eax
100033e7:	b9 06 00 00 00       	mov    ecx,0x6
100033ec:	89 df                	mov    edi,ebx
100033ee:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033fa:	74 79                	je     10003475 <ssfn_text+0xcb>
100033fc:	8d 43 0c             	lea    eax,[ebx+0xc]
100033ff:	52                   	push   edx
10003400:	52                   	push   edx
10003401:	50                   	push   eax
10003402:	8d 43 0a             	lea    eax,[ebx+0xa]
10003405:	50                   	push   eax
10003406:	8d 43 06             	lea    eax,[ebx+0x6]
10003409:	50                   	push   eax
1000340a:	8d 43 04             	lea    eax,[ebx+0x4]
1000340d:	50                   	push   eax
1000340e:	56                   	push   esi
1000340f:	55                   	push   ebp
10003410:	e8 fc ff ff ff       	call   10003411 <ssfn_text+0x67>	10003411: R_386_PC32	ssfn_bbox
10003415:	83 c4 20             	add    esp,0x20
10003418:	85 c0                	test   eax,eax
1000341a:	75 59                	jne    10003475 <ssfn_text+0xcb>
1000341c:	83 ec 0c             	sub    esp,0xc
1000341f:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003423:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003427:	0f af c8             	imul   ecx,eax
1000342a:	c1 e1 02             	shl    ecx,0x2
1000342d:	51                   	push   ecx
1000342e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003432:	e8 fc ff ff ff       	call   10003433 <ssfn_text+0x89>	10003433: R_386_PC32	malloc
10003437:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000343b:	89 c7                	mov    edi,eax
1000343d:	89 03                	mov    DWORD PTR [ebx],eax
1000343f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003443:	83 c4 10             	add    esp,0x10
10003446:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003448:	50                   	push   eax
10003449:	56                   	push   esi
1000344a:	53                   	push   ebx
1000344b:	55                   	push   ebp
1000344c:	e8 fc ff ff ff       	call   1000344d <ssfn_text+0xa3>	1000344d: R_386_PC32	ssfn_render
10003451:	83 c4 10             	add    esp,0x10
10003454:	85 c0                	test   eax,eax
10003456:	7e 04                	jle    1000345c <ssfn_text+0xb2>
10003458:	01 c6                	add    esi,eax
1000345a:	eb ec                	jmp    10003448 <ssfn_text+0x9e>
1000345c:	74 17                	je     10003475 <ssfn_text+0xcb>
1000345e:	83 ec 0c             	sub    esp,0xc
10003461:	ff 33                	push   DWORD PTR [ebx]
10003463:	e8 fc ff ff ff       	call   10003464 <ssfn_text+0xba>	10003464: R_386_PC32	free
10003468:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000346b:	e8 fc ff ff ff       	call   1000346c <ssfn_text+0xc2>	1000346c: R_386_PC32	free
10003470:	83 c4 10             	add    esp,0x10
10003473:	31 db                	xor    ebx,ebx
10003475:	83 c4 1c             	add    esp,0x1c
10003478:	89 d8                	mov    eax,ebx
1000347a:	5b                   	pop    ebx
1000347b:	5e                   	pop    esi
1000347c:	5f                   	pop    edi
1000347d:	5d                   	pop    ebp
1000347e:	c3                   	ret    
1000347f:	90                   	nop

10003480 <NIContext::drvPutpixel4(int, int, unsigned int)>:
10003480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003484:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000348a:	8b 10                	mov    edx,DWORD PTR [eax]
1000348c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003490:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
10003493:	90                   	nop

10003494 <NIContext::drvDarken4(int, int, int)>:
10003494:	55                   	push   ebp
10003495:	57                   	push   edi
10003496:	56                   	push   esi
10003497:	53                   	push   ebx
10003498:	83 ec 20             	sub    esp,0x20
1000349b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000349f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100034a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100034a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100034ab:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100034b1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100034b5:	8b 10                	mov    edx,DWORD PTR [eax]
100034b7:	56                   	push   esi
100034b8:	53                   	push   ebx
100034b9:	50                   	push   eax
100034ba:	ff 52 34             	call   DWORD PTR [edx+0x34]
100034bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100034c1:	89 c2                	mov    edx,eax
100034c3:	0f b6 ec             	movzx  ebp,ah
100034c6:	c1 ea 10             	shr    edx,0x10
100034c9:	0f af e9             	imul   ebp,ecx
100034cc:	0f b6 d2             	movzx  edx,dl
100034cf:	0f b6 c0             	movzx  eax,al
100034d2:	0f af d1             	imul   edx,ecx
100034d5:	0f af c1             	imul   eax,ecx
100034d8:	c1 ea 07             	shr    edx,0x7
100034db:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034e1:	c1 e8 07             	shr    eax,0x7
100034e4:	8b 39                	mov    edi,DWORD PTR [ecx]
100034e6:	c1 e2 10             	shl    edx,0x10
100034e9:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034ed:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034f1:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034f5:	c1 ed 07             	shr    ebp,0x7
100034f8:	c1 e5 08             	shl    ebp,0x8
100034fb:	09 ea                	or     edx,ebp
100034fd:	09 c2                	or     edx,eax
100034ff:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003503:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003506:	83 c4 2c             	add    esp,0x2c
10003509:	5b                   	pop    ebx
1000350a:	5e                   	pop    esi
1000350b:	5f                   	pop    edi
1000350c:	5d                   	pop    ebp
1000350d:	ff e0                	jmp    eax
1000350f:	90                   	nop

10003510 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003510:	55                   	push   ebp
10003511:	b9 00 40 00 00       	mov    ecx,0x4000
10003516:	57                   	push   edi
10003517:	b0 ff                	mov    al,0xff
10003519:	56                   	push   esi
1000351a:	53                   	push   ebx
1000351b:	83 ec 3c             	sub    esp,0x3c
1000351e:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003522:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003526:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003529:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
1000352d:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000352f:	85 db                	test   ebx,ebx
10003531:	75 10                	jne    10003543 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003533:	83 ec 0c             	sub    esp,0xc
10003536:	68 42 55 00 10       	push   0x10005542	10003537: R_386_32	.text
1000353b:	e8 fc ff ff ff       	call   1000353c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	1000353c: R_386_PC32	KePanic(char const*)
10003540:	83 c4 10             	add    esp,0x10
10003543:	50                   	push   eax
10003544:	50                   	push   eax
10003545:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003549:	50                   	push   eax
1000354a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000354e:	50                   	push   eax
1000354f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003553:	50                   	push   eax
10003554:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003558:	50                   	push   eax
10003559:	56                   	push   esi
1000355a:	68 00 00 00 00       	push   0x0	1000355b: R_386_32	ssfn_ctx
1000355f:	e8 fc ff ff ff       	call   10003560 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	10003560: R_386_PC32	ssfn_bbox
10003564:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003567:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
1000356f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003573:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
1000357b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000357f:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003584:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003588:	0d 00 00 00 ff       	or     eax,0xff000000
1000358d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003591:	83 c4 1c             	add    esp,0x1c
10003594:	56                   	push   esi
10003595:	8d 44 24 20          	lea    eax,[esp+0x20]
10003599:	50                   	push   eax
1000359a:	68 00 00 00 00       	push   0x0	1000359b: R_386_32	ssfn_ctx
1000359f:	e8 fc ff ff ff       	call   100035a0 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100035a0: R_386_PC32	ssfn_render
100035a4:	83 c4 10             	add    esp,0x10
100035a7:	89 03                	mov    DWORD PTR [ebx],eax
100035a9:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100035ad:	31 db                	xor    ebx,ebx
100035af:	89 f0                	mov    eax,esi
100035b1:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100035b5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100035b9:	7e 3f                	jle    100035fa <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100035bb:	31 ff                	xor    edi,edi
100035bd:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035c2:	39 f8                	cmp    eax,edi
100035c4:	7e 2c                	jle    100035f2 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035c9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035cc:	83 f8 ff             	cmp    eax,0xffffffff
100035cf:	74 1d                	je     100035ee <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035d1:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035d7:	25 ff ff ff 00       	and    eax,0xffffff
100035dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035de:	50                   	push   eax
100035df:	56                   	push   esi
100035e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035e4:	01 f8                	add    eax,edi
100035e6:	50                   	push   eax
100035e7:	52                   	push   edx
100035e8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035eb:	83 c4 10             	add    esp,0x10
100035ee:	43                   	inc    ebx
100035ef:	47                   	inc    edi
100035f0:	eb cb                	jmp    100035bd <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035f2:	29 c3                	sub    ebx,eax
100035f4:	46                   	inc    esi
100035f5:	83 c3 40             	add    ebx,0x40
100035f8:	eb b5                	jmp    100035af <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035fa:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035ff:	83 c4 3c             	add    esp,0x3c
10003602:	5b                   	pop    ebx
10003603:	5e                   	pop    esi
10003604:	5f                   	pop    edi
10003605:	5d                   	pop    ebp
10003606:	c3                   	ret    
10003607:	90                   	nop

10003608 <NIContext::~NIContext()>:
10003608:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000360c: R_386_32	ssfn_ctx
10003610:	e9 00 db ff ff       	jmp    10001115 <ssfn_free>
10003615:	90                   	nop

10003616 <NIContext::NIContext(Video*, int, int, int, int)>:
10003616:	55                   	push   ebp
10003617:	ba 00 00 00 00       	mov    edx,0x0	10003618: R_386_32	ssfn_ctx
1000361c:	57                   	push   edi
1000361d:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003622:	56                   	push   esi
10003623:	89 d7                	mov    edi,edx
10003625:	53                   	push   ebx
10003626:	81 ec 48 02 00 00    	sub    esp,0x248
1000362c:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003633:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000363a:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003640:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003647:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
1000364d:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003654:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
1000365a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
10003661:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003667:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
1000366e:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003674:	31 c0                	xor    eax,eax
10003676:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003678:	68 00 40 00 00       	push   0x4000
1000367d:	e8 fc ff ff ff       	call   1000367e <NIContext::NIContext(Video*, int, int, int, int)+0x68>	1000367e: R_386_PC32	malloc
10003682:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
1000368c:	89 03                	mov    DWORD PTR [ebx],eax
1000368e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003695:	e8 fc ff ff ff       	call   10003696 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	10003696: R_386_PC32	malloc
1000369a:	83 c4 0c             	add    esp,0xc
1000369d:	89 c6                	mov    esi,eax
1000369f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036a1: R_386_32	kernelProcess
100036a5:	68 5b 55 00 10       	push   0x1000555b	100036a6: R_386_32	.text
100036aa:	50                   	push   eax
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100036ac: R_386_PC32	Directory::Directory(char const*, Process*)
100036b0:	83 c4 10             	add    esp,0x10
100036b3:	85 f6                	test   esi,esi
100036b5:	75 10                	jne    100036c7 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100036b7:	83 ec 0c             	sub    esp,0xc
100036ba:	68 6f 55 00 10       	push   0x1000556f	100036bb: R_386_32	.text
100036bf:	e8 fc ff ff ff       	call   100036c0 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100036c0: R_386_PC32	KePanic(char const*)
100036c4:	83 c4 10             	add    esp,0x10
100036c7:	83 ec 0c             	sub    esp,0xc
100036ca:	56                   	push   esi
100036cb:	e8 fc ff ff ff       	call   100036cc <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036cc: R_386_PC32	Directory::open()
100036d0:	83 c4 10             	add    esp,0x10
100036d3:	85 c0                	test   eax,eax
100036d5:	75 e0                	jne    100036b7 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036d7:	83 ec 0c             	sub    esp,0xc
100036da:	8b 06                	mov    eax,DWORD PTR [esi]
100036dc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036e0:	51                   	push   ecx
100036e1:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036e8:	52                   	push   edx
100036e9:	6a 00                	push   0x0
100036eb:	68 10 01 00 00       	push   0x110
100036f0:	56                   	push   esi
100036f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036f4:	83 c4 20             	add    esp,0x20
100036f7:	85 c0                	test   eax,eax
100036f9:	0f 85 a0 01 00 00    	jne    1000389f <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036ff:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003707:	0f 85 92 01 00 00    	jne    1000389f <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000370d:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003714:	83 c9 ff             	or     ecx,0xffffffff
10003717:	83 ec 0c             	sub    esp,0xc
1000371a:	89 ef                	mov    edi,ebp
1000371c:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000371e:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003724:	89 ca                	mov    edx,ecx
10003726:	f7 d2                	not    edx
10003728:	52                   	push   edx
10003729:	e8 fc ff ff ff       	call   1000372a <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000372a: R_386_PC32	malloc
1000372e:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003732:	47                   	inc    edi
10003733:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003739:	5a                   	pop    edx
1000373a:	59                   	pop    ecx
1000373b:	55                   	push   ebp
1000373c:	50                   	push   eax
1000373d:	e8 fc ff ff ff       	call   1000373e <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000373e: R_386_PC32	strcpy
10003742:	5f                   	pop    edi
10003743:	58                   	pop    eax
10003744:	68 8a 55 00 10       	push   0x1000558a	10003745: R_386_32	.text
10003749:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
1000374d:	57                   	push   edi
1000374e:	e8 fc ff ff ff       	call   1000374f <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000374f: R_386_PC32	strcpy
10003753:	58                   	pop    eax
10003754:	5a                   	pop    edx
10003755:	55                   	push   ebp
10003756:	57                   	push   edi
10003757:	e8 fc ff ff ff       	call   10003758 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003758: R_386_PC32	strcat
1000375c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003763:	e8 fc ff ff ff       	call   10003764 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003764: R_386_PC32	malloc
10003768:	83 c4 0c             	add    esp,0xc
1000376b:	89 c5                	mov    ebp,eax
1000376d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000376f: R_386_32	kernelProcess
10003773:	57                   	push   edi
10003774:	50                   	push   eax
10003775:	e8 fc ff ff ff       	call   10003776 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003776: R_386_PC32	File::File(char const*, Process*)
1000377a:	83 c4 10             	add    esp,0x10
1000377d:	85 ed                	test   ebp,ebp
1000377f:	0f 84 52 ff ff ff    	je     100036d7 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003785:	50                   	push   eax
10003786:	50                   	push   eax
10003787:	6a 01                	push   0x1
10003789:	55                   	push   ebp
1000378a:	e8 fc ff ff ff       	call   1000378b <NIContext::NIContext(Video*, int, int, int, int)+0x175>	1000378b: R_386_PC32	File::open(FileOpenMode)
1000378f:	83 c4 10             	add    esp,0x10
10003792:	85 c0                	test   eax,eax
10003794:	74 0c                	je     100037a2 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
10003796:	83 ec 0c             	sub    esp,0xc
10003799:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000379c:	55                   	push   ebp
1000379d:	e9 b4 00 00 00       	jmp    10003856 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100037a2:	50                   	push   eax
100037a3:	8d 44 24 17          	lea    eax,[esp+0x17]
100037a7:	50                   	push   eax
100037a8:	8d 44 24 20          	lea    eax,[esp+0x20]
100037ac:	50                   	push   eax
100037ad:	55                   	push   ebp
100037ae:	e8 fc ff ff ff       	call   100037af <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100037af: R_386_PC32	File::stat(unsigned long long*, bool*)
100037b3:	83 c4 10             	add    esp,0x10
100037b6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100037bb:	74 0e                	je     100037cb <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100037bd:	83 ec 0c             	sub    esp,0xc
100037c0:	55                   	push   ebp
100037c1:	e8 fc ff ff ff       	call   100037c2 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100037c2: R_386_PC32	File::close()
100037c6:	e9 85 00 00 00       	jmp    10003850 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037db:	83 ec 0c             	sub    esp,0xc
100037de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037e2:	e8 fc ff ff ff       	call   100037e3 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037e3: R_386_PC32	malloc
100037e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037eb:	58                   	pop    eax
100037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037ef:	8d 54 24 20          	lea    edx,[esp+0x20]
100037f3:	52                   	push   edx
100037f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003800:	55                   	push   ebp
10003801:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003804:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003808:	83 c4 1c             	add    esp,0x1c
1000380b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000380f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003813:	68 9f 55 00 10       	push   0x1000559f	10003814: R_386_32	.text
10003818:	e8 fc ff ff ff       	call   10003819 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003819: R_386_PC32	Dbg::kprintf(char const*, ...)
1000381d:	83 c4 10             	add    esp,0x10
10003820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003824:	85 c0                	test   eax,eax
10003826:	75 15                	jne    1000383d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000382c:	89 c1                	mov    ecx,eax
1000382e:	c1 f9 1f             	sar    ecx,0x1f
10003831:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003835:	75 06                	jne    1000383d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003837:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000383b:	74 24                	je     10003861 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
1000383d:	83 ec 0c             	sub    esp,0xc
10003840:	55                   	push   ebp
10003841:	e8 fc ff ff ff       	call   10003842 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003842: R_386_PC32	File::close()
10003846:	58                   	pop    eax
10003847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000384b:	e8 fc ff ff ff       	call   1000384c <NIContext::NIContext(Video*, int, int, int, int)+0x236>	1000384c: R_386_PC32	free
10003850:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003853:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003856:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003859:	83 c4 10             	add    esp,0x10
1000385c:	e9 76 fe ff ff       	jmp    100036d7 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003861:	50                   	push   eax
10003862:	50                   	push   eax
10003863:	57                   	push   edi
10003864:	68 b3 55 00 10       	push   0x100055b3	10003865: R_386_32	.text
10003869:	e8 fc ff ff ff       	call   1000386a <NIContext::NIContext(Video*, int, int, int, int)+0x254>	1000386a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000386e:	5a                   	pop    edx
1000386f:	59                   	pop    ecx
10003870:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003874:	68 00 00 00 00       	push   0x0	10003875: R_386_32	ssfn_ctx
10003879:	e8 fc ff ff ff       	call   1000387a <NIContext::NIContext(Video*, int, int, int, int)+0x264>	1000387a: R_386_PC32	ssfn_load
1000387e:	5b                   	pop    ebx
1000387f:	5f                   	pop    edi
10003880:	50                   	push   eax
10003881:	68 c4 55 00 10       	push   0x100055c4	10003882: R_386_32	.text
10003886:	e8 fc ff ff ff       	call   10003887 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003887: R_386_PC32	Dbg::kprintf(char const*, ...)
1000388b:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000388e:	e8 fc ff ff ff       	call   1000388f <NIContext::NIContext(Video*, int, int, int, int)+0x279>	1000388f: R_386_PC32	File::close()
10003893:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003896:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003899:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000389c:	83 c4 10             	add    esp,0x10
1000389f:	83 ec 0c             	sub    esp,0xc
100038a2:	56                   	push   esi
100038a3:	e8 fc ff ff ff       	call   100038a4 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100038a4: R_386_PC32	Directory::close()
100038a8:	8b 06                	mov    eax,DWORD PTR [esi]
100038aa:	89 34 24             	mov    DWORD PTR [esp],esi
100038ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038b0:	b8 00 00 00 00       	mov    eax,0x0	100038b1: R_386_32	ssfn_ctx
100038b5:	e8 f7 cb ff ff       	call   100004b1 <_ssfn_fc.part.1>
100038ba:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100038bc: R_386_32	ssfn_ctx
100038c4:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038c6: R_386_32	ssfn_ctx
100038ce:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038d0: R_386_32	ssfn_ctx
100038d8:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038da: R_386_32	ssfn_ctx
100038e2:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038e4: R_386_32	ssfn_ctx
100038ec:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038ee: R_386_32	ssfn_ctx
100038f6:	81 c4 4c 02 00 00    	add    esp,0x24c
100038fc:	5b                   	pop    ebx
100038fd:	5e                   	pop    esi
100038fe:	5f                   	pop    edi
100038ff:	5d                   	pop    ebp
10003900:	c3                   	ret    
10003901:	90                   	nop

10003902 <NiCreateEvent(NIWindow*, int, bool)>:
10003902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003906:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000390a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000390d:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
10003913:	81 e2 00 00 00 80    	and    edx,0x80000000
10003919:	09 ca                	or     edx,ecx
1000391b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000391f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003922:	c1 e1 07             	shl    ecx,0x7
10003925:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003928:	83 e2 7f             	and    edx,0x7f
1000392b:	09 ca                	or     edx,ecx
1000392d:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003934:	89 10                	mov    DWORD PTR [eax],edx
10003936:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003938: R_386_32	mouseDesktop
1000393c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
1000393f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10003942:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003946:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
1000394a:	c2 04 00             	ret    0x4

1000394d <NiLoadCursors()>:
1000394d:	55                   	push   ebp
1000394e:	57                   	push   edi
1000394f:	56                   	push   esi
10003950:	53                   	push   ebx
10003951:	83 ec 38             	sub    esp,0x38
10003954:	68 14 01 00 00       	push   0x114
10003959:	e8 fc ff ff ff       	call   1000395a <NiLoadCursors()+0xd>	1000395a: R_386_PC32	malloc
1000395e:	83 c4 0c             	add    esp,0xc
10003961:	89 c5                	mov    ebp,eax
10003963:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003965: R_386_32	kernelProcess
10003969:	68 7c 58 00 10       	push   0x1000587c	1000396a: R_386_32	.text
1000396e:	50                   	push   eax
1000396f:	e8 fc ff ff ff       	call   10003970 <NiLoadCursors()+0x23>	10003970: R_386_PC32	File::File(char const*, Process*)
10003974:	58                   	pop    eax
10003975:	5a                   	pop    edx
10003976:	6a 01                	push   0x1
10003978:	55                   	push   ebp
10003979:	e8 fc ff ff ff       	call   1000397a <NiLoadCursors()+0x2d>	1000397a: R_386_PC32	File::open(FileOpenMode)
1000397e:	83 c4 10             	add    esp,0x10
10003981:	85 c0                	test   eax,eax
10003983:	74 0a                	je     1000398f <NiLoadCursors()+0x42>
10003985:	83 ec 0c             	sub    esp,0xc
10003988:	68 9b 58 00 10       	push   0x1000589b	10003989: R_386_32	.text
1000398d:	eb 4c                	jmp    100039db <NiLoadCursors()+0x8e>
1000398f:	53                   	push   ebx
10003990:	8d 44 24 17          	lea    eax,[esp+0x17]
10003994:	50                   	push   eax
10003995:	8d 44 24 20          	lea    eax,[esp+0x20]
10003999:	50                   	push   eax
1000399a:	55                   	push   ebp
1000399b:	e8 fc ff ff ff       	call   1000399c <NiLoadCursors()+0x4f>	1000399c: R_386_PC32	File::stat(unsigned long long*, bool*)
100039a0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100039a4:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100039a8:	89 34 24             	mov    DWORD PTR [esp],esi
100039ab:	e8 fc ff ff ff       	call   100039ac <NiLoadCursors()+0x5f>	100039ac: R_386_PC32	malloc
100039b0:	89 c3                	mov    ebx,eax
100039b2:	58                   	pop    eax
100039b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100039b6:	8d 54 24 20          	lea    edx,[esp+0x20]
100039ba:	52                   	push   edx
100039bb:	53                   	push   ebx
100039bc:	57                   	push   edi
100039bd:	56                   	push   esi
100039be:	55                   	push   ebp
100039bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100039c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100039c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100039ca:	83 c4 20             	add    esp,0x20
100039cd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
100039d1:	74 12                	je     100039e5 <NiLoadCursors()+0x98>
100039d3:	83 ec 0c             	sub    esp,0xc
100039d6:	68 af 58 00 10       	push   0x100058af	100039d7: R_386_32	.text
100039db:	e8 fc ff ff ff       	call   100039dc <NiLoadCursors()+0x8f>	100039dc: R_386_PC32	Dbg::kprintf(char const*, ...)
100039e0:	e9 3d 01 00 00       	jmp    10003b22 <NiLoadCursors()+0x1d5>
100039e5:	6a 00                	push   0x0
100039e7:	31 ed                	xor    ebp,ebp
100039e9:	68 04 01 00 00       	push   0x104
100039ee:	52                   	push   edx
100039ef:	50                   	push   eax
100039f0:	e8 fc ff ff ff       	call   100039f1 <NiLoadCursors()+0xa4>	100039f1: R_386_PC32	__udivdi3
100039f5:	5a                   	pop    edx
100039f6:	59                   	pop    ecx
100039f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100039fb:	50                   	push   eax
100039fc:	68 c3 58 00 10       	push   0x100058c3	100039fd: R_386_32	.text
10003a01:	e8 fc ff ff ff       	call   10003a02 <NiLoadCursors()+0xb5>	10003a02: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a06:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003a09:	e8 fc ff ff ff       	call   10003a0a <NiLoadCursors()+0xbd>	10003a0a: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10003a12:	8d 04 83             	lea    eax,[ebx+eax*4]
10003a15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003a19:	83 c4 10             	add    esp,0x10
10003a1c:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003a20:	0f 8d f3 00 00 00    	jge    10003b19 <NiLoadCursors()+0x1cc>
10003a26:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003a29:	50                   	push   eax
10003a2a:	6a 04                	push   0x4
10003a2c:	68 d0 58 00 10       	push   0x100058d0	10003a2d: R_386_32	.text
10003a31:	56                   	push   esi
10003a32:	e8 fc ff ff ff       	call   10003a33 <NiLoadCursors()+0xe6>	10003a33: R_386_PC32	memcmp
10003a37:	83 c4 10             	add    esp,0x10
10003a3a:	85 c0                	test   eax,eax
10003a3c:	0f 84 b8 00 00 00    	je     10003afa <NiLoadCursors()+0x1ad>
10003a42:	50                   	push   eax
10003a43:	6a 04                	push   0x4
10003a45:	68 d5 58 00 10       	push   0x100058d5	10003a46: R_386_32	.text
10003a4a:	56                   	push   esi
10003a4b:	e8 fc ff ff ff       	call   10003a4c <NiLoadCursors()+0xff>	10003a4c: R_386_PC32	memcmp
10003a50:	83 c4 10             	add    esp,0x10
10003a53:	85 c0                	test   eax,eax
10003a55:	74 7b                	je     10003ad2 <NiLoadCursors()+0x185>
10003a57:	50                   	push   eax
10003a58:	6a 04                	push   0x4
10003a5a:	68 da 58 00 10       	push   0x100058da	10003a5b: R_386_32	.text
10003a5f:	56                   	push   esi
10003a60:	e8 fc ff ff ff       	call   10003a61 <NiLoadCursors()+0x114>	10003a61: R_386_PC32	memcmp
10003a65:	83 c4 10             	add    esp,0x10
10003a68:	85 c0                	test   eax,eax
10003a6a:	74 6d                	je     10003ad9 <NiLoadCursors()+0x18c>
10003a6c:	57                   	push   edi
10003a6d:	6a 04                	push   0x4
10003a6f:	68 df 58 00 10       	push   0x100058df	10003a70: R_386_32	.text
10003a74:	56                   	push   esi
10003a75:	e8 fc ff ff ff       	call   10003a76 <NiLoadCursors()+0x129>	10003a76: R_386_PC32	memcmp
10003a7a:	83 c4 10             	add    esp,0x10
10003a7d:	85 c0                	test   eax,eax
10003a7f:	74 5f                	je     10003ae0 <NiLoadCursors()+0x193>
10003a81:	51                   	push   ecx
10003a82:	6a 04                	push   0x4
10003a84:	68 e4 58 00 10       	push   0x100058e4	10003a85: R_386_32	.text
10003a89:	56                   	push   esi
10003a8a:	e8 fc ff ff ff       	call   10003a8b <NiLoadCursors()+0x13e>	10003a8b: R_386_PC32	memcmp
10003a8f:	83 c4 10             	add    esp,0x10
10003a92:	85 c0                	test   eax,eax
10003a94:	74 51                	je     10003ae7 <NiLoadCursors()+0x19a>
10003a96:	52                   	push   edx
10003a97:	6a 04                	push   0x4
10003a99:	68 e9 58 00 10       	push   0x100058e9	10003a9a: R_386_32	.text
10003a9e:	56                   	push   esi
10003a9f:	e8 fc ff ff ff       	call   10003aa0 <NiLoadCursors()+0x153>	10003aa0: R_386_PC32	memcmp
10003aa4:	83 c4 10             	add    esp,0x10
10003aa7:	85 c0                	test   eax,eax
10003aa9:	74 43                	je     10003aee <NiLoadCursors()+0x1a1>
10003aab:	50                   	push   eax
10003aac:	6a 04                	push   0x4
10003aae:	68 ee 58 00 10       	push   0x100058ee	10003aaf: R_386_32	.text
10003ab3:	56                   	push   esi
10003ab4:	e8 fc ff ff ff       	call   10003ab5 <NiLoadCursors()+0x168>	10003ab5: R_386_PC32	memcmp
10003ab9:	83 c4 10             	add    esp,0x10
10003abc:	85 c0                	test   eax,eax
10003abe:	74 35                	je     10003af5 <NiLoadCursors()+0x1a8>
10003ac0:	83 ec 0c             	sub    esp,0xc
10003ac3:	68 f3 58 00 10       	push   0x100058f3	10003ac4: R_386_32	.text
10003ac8:	e8 fc ff ff ff       	call   10003ac9 <NiLoadCursors()+0x17c>	10003ac9: R_386_PC32	Dbg::kprintf(char const*, ...)
10003acd:	83 c4 10             	add    esp,0x10
10003ad0:	eb 47                	jmp    10003b19 <NiLoadCursors()+0x1cc>
10003ad2:	b8 00 02 00 00       	mov    eax,0x200
10003ad7:	eb 21                	jmp    10003afa <NiLoadCursors()+0x1ad>
10003ad9:	b8 00 03 00 00       	mov    eax,0x300
10003ade:	eb 1a                	jmp    10003afa <NiLoadCursors()+0x1ad>
10003ae0:	b8 00 01 00 00       	mov    eax,0x100
10003ae5:	eb 13                	jmp    10003afa <NiLoadCursors()+0x1ad>
10003ae7:	b8 00 04 00 00       	mov    eax,0x400
10003aec:	eb 0c                	jmp    10003afa <NiLoadCursors()+0x1ad>
10003aee:	b8 00 05 00 00       	mov    eax,0x500
10003af3:	eb 05                	jmp    10003afa <NiLoadCursors()+0x1ad>
10003af5:	b8 00 06 00 00       	mov    eax,0x600
10003afa:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003afc: R_386_32	___mouse_data
10003b00:	b9 00 01 00 00       	mov    ecx,0x100
10003b05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003b09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003b0b:	45                   	inc    ebp
10003b0c:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003b14:	e9 03 ff ff ff       	jmp    10003a1c <NiLoadCursors()+0xcf>
10003b19:	83 ec 0c             	sub    esp,0xc
10003b1c:	53                   	push   ebx
10003b1d:	e8 fc ff ff ff       	call   10003b1e <NiLoadCursors()+0x1d1>	10003b1e: R_386_PC32	free
10003b22:	83 c4 10             	add    esp,0x10
10003b25:	83 c4 2c             	add    esp,0x2c
10003b28:	5b                   	pop    ebx
10003b29:	5e                   	pop    esi
10003b2a:	5f                   	pop    edi
10003b2b:	5d                   	pop    ebp
10003b2c:	c3                   	ret    
10003b2d:	90                   	nop

10003b2e <NIDesktop::NIDesktop(NIContext*)>:
10003b2e:	53                   	push   ebx
10003b2f:	83 ec 14             	sub    esp,0x14
10003b32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003b3a:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003b41:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003b44:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003b4b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003b52:	6a 08                	push   0x8
10003b54:	e8 fc ff ff ff       	call   10003b55 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003b55: R_386_PC32	malloc
10003b59:	89 03                	mov    DWORD PTR [ebx],eax
10003b5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003b62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003b68:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003b6a: R_386_32	mouseDesktop
10003b6e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b70: R_386_32	guiMouseHandler
	10003b74: R_386_32	NiHandleMouse(int, int, int, int)
10003b78:	83 c4 18             	add    esp,0x18
10003b7b:	5b                   	pop    ebx
10003b7c:	c3                   	ret    
10003b7d:	90                   	nop

10003b7e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b7e:	53                   	push   ebx
10003b7f:	83 ec 08             	sub    esp,0x8
10003b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b86:	8b 00                	mov    eax,DWORD PTR [eax]
10003b88:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b8a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b8e:	74 1d                	je     10003bad <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b90:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b92:	85 c0                	test   eax,eax
10003b94:	74 12                	je     10003ba8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b96:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b9a:	74 0c                	je     10003ba8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b9c:	83 ec 0c             	sub    esp,0xc
10003b9f:	50                   	push   eax
10003ba0:	e8 fc ff ff ff       	call   10003ba1 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003ba1: R_386_PC32	NIWindow::invalidate()
10003ba5:	83 c4 10             	add    esp,0x10
10003ba8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003bab:	eb dd                	jmp    10003b8a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003bad:	83 c4 08             	add    esp,0x8
10003bb0:	5b                   	pop    ebx
10003bb1:	c3                   	ret    

10003bb2 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003bb2:	57                   	push   edi
10003bb3:	56                   	push   esi
10003bb4:	53                   	push   ebx
10003bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003bb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003bbd:	8b 00                	mov    eax,DWORD PTR [eax]
10003bbf:	8b 00                	mov    eax,DWORD PTR [eax]
10003bc1:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003bc4:	85 db                	test   ebx,ebx
10003bc6:	74 52                	je     10003c1a <NIDesktop::getTopmostWindowAtPixel(int, int)+0x68>
10003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
10003bca:	85 c0                	test   eax,eax
10003bcc:	74 4e                	je     10003c1c <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003bce:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
10003bd4:	39 ca                	cmp    edx,ecx
10003bd6:	7e 04                	jle    10003bdc <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2a>
10003bd8:	89 d8                	mov    eax,ebx
10003bda:	eb e5                	jmp    10003bc1 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003bdc:	8b b0 70 01 00 00    	mov    esi,DWORD PTR [eax+0x170]
10003be2:	01 d6                	add    esi,edx
10003be4:	39 ce                	cmp    esi,ecx
10003be6:	7e f0                	jle    10003bd8 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003be8:	89 ce                	mov    esi,ecx
10003bea:	29 d6                	sub    esi,edx
10003bec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
10003bf2:	8d 34 b2             	lea    esi,[edx+esi*4]
10003bf5:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10003bfb:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003bfe:	01 d7                	add    edi,edx
10003c00:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003c04:	7f d2                	jg     10003bd8 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003c06:	03 90 6c 01 00 00    	add    edx,DWORD PTR [eax+0x16c]
10003c0c:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003c10:	29 f2                	sub    edx,esi
10003c12:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003c16:	7e c0                	jle    10003bd8 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003c18:	eb 02                	jmp    10003c1c <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003c1a:	31 c0                	xor    eax,eax
10003c1c:	5b                   	pop    ebx
10003c1d:	5e                   	pop    esi
10003c1e:	5f                   	pop    edi
10003c1f:	c3                   	ret    

10003c20 <NIDesktop::renderScanline(int, int, int)>:
10003c20:	55                   	push   ebp
10003c21:	57                   	push   edi
10003c22:	56                   	push   esi
10003c23:	53                   	push   ebx
10003c24:	83 ec 2c             	sub    esp,0x2c
10003c27:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003c2b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003c33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c3b:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003c3d: R_386_32	render
10003c41:	31 c0                	xor    eax,eax
10003c43:	89 d7                	mov    edi,edx
10003c45:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c4f:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003c51: R_386_32	shadow
10003c55:	b0 80                	mov    al,0x80
10003c57:	89 d7                	mov    edi,edx
10003c59:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003c5f:	8b 00                	mov    eax,DWORD PTR [eax]
10003c61:	8b 00                	mov    eax,DWORD PTR [eax]
10003c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003c6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003c6f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003c71: R_386_32	movingWin
10003c75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c7c:	85 c0                	test   eax,eax
10003c7e:	75 09                	jne    10003c89 <NIDesktop::renderScanline(int, int, int)+0x69>
10003c80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c84:	e9 31 03 00 00       	jmp    10003fba <NIDesktop::renderScanline(int, int, int)+0x39a>
10003c89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c8d:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c8f:	85 db                	test   ebx,ebx
10003c91:	74 ed                	je     10003c80 <NIDesktop::renderScanline(int, int, int)+0x60>
10003c93:	39 da                	cmp    edx,ebx
10003c95:	75 06                	jne    10003c9d <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c9b:	eb d8                	jmp    10003c75 <NIDesktop::renderScanline(int, int, int)+0x55>
10003c9d:	83 ec 0c             	sub    esp,0xc
10003ca0:	53                   	push   ebx
10003ca1:	e8 fc ff ff ff       	call   10003ca2 <NIDesktop::renderScanline(int, int, int)+0x82>	10003ca2: R_386_PC32	NIWindow::request()
10003ca6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003cac:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003cb2:	83 c4 10             	add    esp,0x10
10003cb5:	01 c2                	add    edx,eax
10003cb7:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003cbb:	0f 8e bf 00 00 00    	jle    10003d80 <NIDesktop::renderScanline(int, int, int)+0x160>
10003cc1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003cc8:	0f 85 b2 00 00 00    	jne    10003d80 <NIDesktop::renderScanline(int, int, int)+0x160>
10003cce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003cd2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10003cd8:	83 c0 06             	add    eax,0x6
10003cdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003cdf:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003ce5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10003ceb:	01 c8                	add    eax,ecx
10003ced:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003cf1:	39 d0                	cmp    eax,edx
10003cf3:	0f 8e 63 01 00 00    	jle    10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003cf9:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003cfd:	7c 7b                	jl     10003d7a <NIDesktop::renderScanline(int, int, int)+0x15a>
10003cff:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003d03:	0f 8f 53 01 00 00    	jg     10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003d09:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10003d0f:	89 d5                	mov    ebp,edx
10003d11:	6b fe fc             	imul   edi,esi,0xfffffffc
10003d14:	29 cd                	sub    ebp,ecx
10003d16:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003d1a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003d1e:	39 f0                	cmp    eax,esi
10003d20:	7c 20                	jl     10003d42 <NIDesktop::renderScanline(int, int, int)+0x122>
10003d22:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003d25:	03 8b 60 01 00 00    	add    ecx,DWORD PTR [ebx+0x160]
10003d2b:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003d2e:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003d32:	7f 0e                	jg     10003d42 <NIDesktop::renderScanline(int, int, int)+0x122>
10003d34:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003d38:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003d3c:	29 cd                	sub    ebp,ecx
10003d3e:	39 d5                	cmp    ebp,edx
10003d40:	7d 07                	jge    10003d49 <NIDesktop::renderScanline(int, int, int)+0x129>
10003d42:	40                   	inc    eax
10003d43:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003d47:	75 d5                	jne    10003d1e <NIDesktop::renderScanline(int, int, int)+0xfe>
10003d49:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003d4d:	48                   	dec    eax
10003d4e:	83 f8 03             	cmp    eax,0x3
10003d51:	77 27                	ja     10003d7a <NIDesktop::renderScanline(int, int, int)+0x15a>
10003d53:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003d55: R_386_32	render
10003d5a:	75 1e                	jne    10003d7a <NIDesktop::renderScanline(int, int, int)+0x15a>
10003d5c:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003d63:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003d66: R_386_32	shadow
10003d6a:	0f af c1             	imul   eax,ecx
10003d6d:	d1 f9                	sar    ecx,1
10003d6f:	c1 f8 08             	sar    eax,0x8
10003d72:	01 c1                	add    ecx,eax
10003d74:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003d76: R_386_32	shadow
10003d7a:	42                   	inc    edx
10003d7b:	e9 5f ff ff ff       	jmp    10003cdf <NIDesktop::renderScanline(int, int, int)+0xbf>
10003d80:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d84:	0f 8d d2 00 00 00    	jge    10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003d8a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003d91:	0f 85 c5 00 00 00    	jne    10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003d97:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d9b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10003da1:	8d 77 fa             	lea    esi,[edi-0x6]
10003da4:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003da8:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003dae:	8b b3 6c 01 00 00    	mov    esi,DWORD PTR [ebx+0x16c]
10003db4:	01 ce                	add    esi,ecx
10003db6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003dba:	39 c6                	cmp    esi,eax
10003dbc:	0f 8e 9a 00 00 00    	jle    10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003dc2:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003dc6:	0f 8c 8a 00 00 00    	jl     10003e56 <NIDesktop::renderScanline(int, int, int)+0x236>
10003dcc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003dd0:	0f 8f 86 00 00 00    	jg     10003e5c <NIDesktop::renderScanline(int, int, int)+0x23c>
10003dd6:	89 c7                	mov    edi,eax
10003dd8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003ddc:	29 cf                	sub    edi,ecx
10003dde:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003de2:	4a                   	dec    edx
10003de3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003de7:	29 d1                	sub    ecx,edx
10003de9:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003ded:	74 3b                	je     10003e2a <NIDesktop::renderScanline(int, int, int)+0x20a>
10003def:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
10003df5:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
10003dfb:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003dfe:	39 d5                	cmp    ebp,edx
10003e00:	7e e0                	jle    10003de2 <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003e02:	89 d5                	mov    ebp,edx
10003e04:	29 fd                	sub    ebp,edi
10003e06:	39 ee                	cmp    esi,ebp
10003e08:	7e 20                	jle    10003e2a <NIDesktop::renderScanline(int, int, int)+0x20a>
10003e0a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10003e10:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003e13:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e16:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003e1a:	7f c6                	jg     10003de2 <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003e1c:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e20:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003e24:	29 f7                	sub    edi,esi
10003e26:	39 c7                	cmp    edi,eax
10003e28:	7c b8                	jl     10003de2 <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003e2a:	83 f9 04             	cmp    ecx,0x4
10003e2d:	77 27                	ja     10003e56 <NIDesktop::renderScanline(int, int, int)+0x236>
10003e2f:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003e31: R_386_32	render
10003e36:	75 1e                	jne    10003e56 <NIDesktop::renderScanline(int, int, int)+0x236>
10003e38:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003e3f:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003e42: R_386_32	shadow
10003e46:	0f af d1             	imul   edx,ecx
10003e49:	d1 f9                	sar    ecx,1
10003e4b:	c1 fa 08             	sar    edx,0x8
10003e4e:	01 d1                	add    ecx,edx
10003e50:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003e52: R_386_32	shadow
10003e56:	40                   	inc    eax
10003e57:	e9 4c ff ff ff       	jmp    10003da8 <NIDesktop::renderScanline(int, int, int)+0x188>
10003e5c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003e62:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003e66:	0f 8f 27 01 00 00    	jg     10003f93 <NIDesktop::renderScanline(int, int, int)+0x373>
10003e6c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003e72:	01 c2                	add    edx,eax
10003e74:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003e78:	0f 8e 15 01 00 00    	jle    10003f93 <NIDesktop::renderScanline(int, int, int)+0x373>
10003e7e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003e82:	29 c2                	sub    edx,eax
10003e84:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10003e8a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003e91:	8d 14 90             	lea    edx,[eax+edx*4]
10003e94:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003e97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e9b:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003e9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003ea3:	74 0f                	je     10003eb4 <NIDesktop::renderScanline(int, int, int)+0x294>
10003ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003ea9:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
10003eaf:	e9 81 00 00 00       	jmp    10003f35 <NIDesktop::renderScanline(int, int, int)+0x315>
10003eb4:	31 c9                	xor    ecx,ecx
10003eb6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10003ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003ec0:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003ec4:	03 93 6c 01 00 00    	add    edx,DWORD PTR [ebx+0x16c]
10003eca:	01 cd                	add    ebp,ecx
10003ecc:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003ed0:	01 ca                	add    edx,ecx
10003ed2:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003ed4: R_386_32	render
10003ed9:	75 1f                	jne    10003efa <NIDesktop::renderScanline(int, int, int)+0x2da>
10003edb:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003ede: R_386_32	shadow
10003ee2:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003ee5:	83 c7 7d             	add    edi,0x7d
10003ee8:	0f af f7             	imul   esi,edi
10003eeb:	d1 ff                	sar    edi,1
10003eed:	c1 fe 08             	sar    esi,0x8
10003ef0:	01 f7                	add    edi,esi
10003ef2:	89 f8                	mov    eax,edi
10003ef4:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003ef6: R_386_32	shadow
10003efa:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003efc: R_386_32	render
10003f01:	75 20                	jne    10003f23 <NIDesktop::renderScanline(int, int, int)+0x303>
10003f03:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003f0a:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003f0d: R_386_32	shadow
10003f11:	0f af f7             	imul   esi,edi
10003f14:	d1 ff                	sar    edi,1
10003f16:	c1 fe 08             	sar    esi,0x8
10003f19:	01 f7                	add    edi,esi
10003f1b:	89 f8                	mov    eax,edi
10003f1d:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003f1f: R_386_32	shadow
10003f23:	41                   	inc    ecx
10003f24:	83 f9 04             	cmp    ecx,0x4
10003f27:	75 8d                	jne    10003eb6 <NIDesktop::renderScanline(int, int, int)+0x296>
10003f29:	e9 77 ff ff ff       	jmp    10003ea5 <NIDesktop::renderScanline(int, int, int)+0x285>
10003f2e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003f32:	7d 17                	jge    10003f4b <NIDesktop::renderScanline(int, int, int)+0x32b>
10003f34:	40                   	inc    eax
10003f35:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10003f3b:	03 93 64 01 00 00    	add    edx,DWORD PTR [ebx+0x164]
10003f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003f45:	39 c2                	cmp    edx,eax
10003f47:	7f e5                	jg     10003f2e <NIDesktop::renderScanline(int, int, int)+0x30e>
10003f49:	eb 48                	jmp    10003f93 <NIDesktop::renderScanline(int, int, int)+0x373>
10003f4b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f4f:	7f 42                	jg     10003f93 <NIDesktop::renderScanline(int, int, int)+0x373>
10003f51:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003f53: R_386_32	render
10003f58:	75 da                	jne    10003f34 <NIDesktop::renderScanline(int, int, int)+0x314>
10003f5a:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003f5c: R_386_32	render
10003f61:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003f65:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
10003f6b:	2b 93 68 01 00 00    	sub    edx,DWORD PTR [ebx+0x168]
10003f71:	0f af ca             	imul   ecx,edx
10003f74:	89 c2                	mov    edx,eax
10003f76:	2b 93 64 01 00 00    	sub    edx,DWORD PTR [ebx+0x164]
10003f7c:	01 ca                	add    edx,ecx
10003f7e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003f81:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003f85:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003f88:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003f8b: R_386_32	renderData
10003f8f:	75 a3                	jne    10003f34 <NIDesktop::renderScanline(int, int, int)+0x314>
10003f91:	eb 47                	jmp    10003fda <NIDesktop::renderScanline(int, int, int)+0x3ba>
10003f93:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003f9a:	0f 85 e0 fc ff ff    	jne    10003c80 <NIDesktop::renderScanline(int, int, int)+0x60>
10003fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003fab:	e9 bf fc ff ff       	jmp    10003c6f <NIDesktop::renderScanline(int, int, int)+0x4f>
10003fb0:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003fb2: R_386_32	render
10003fb7:	74 09                	je     10003fc2 <NIDesktop::renderScanline(int, int, int)+0x3a2>
10003fb9:	40                   	inc    eax
10003fba:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003fbe:	7c f0                	jl     10003fb0 <NIDesktop::renderScanline(int, int, int)+0x390>
10003fc0:	eb 18                	jmp    10003fda <NIDesktop::renderScanline(int, int, int)+0x3ba>
10003fc2:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003fc4: R_386_32	render
10003fc9:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003fcc: R_386_32	renderData
10003fd4:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003fd8:	75 df                	jne    10003fb9 <NIDesktop::renderScanline(int, int, int)+0x399>
10003fda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003fde:	8b 00                	mov    eax,DWORD PTR [eax]
10003fe0:	8b 00                	mov    eax,DWORD PTR [eax]
10003fe2:	85 c0                	test   eax,eax
10003fe4:	74 61                	je     10004047 <NIDesktop::renderScanline(int, int, int)+0x427>
10003fe6:	8b 00                	mov    eax,DWORD PTR [eax]
10003fe8:	85 c0                	test   eax,eax
10003fea:	74 5b                	je     10004047 <NIDesktop::renderScanline(int, int, int)+0x427>
10003fec:	80 b8 74 01 00 00 00 	cmp    BYTE PTR [eax+0x174],0x0
10003ff3:	75 52                	jne    10004047 <NIDesktop::renderScanline(int, int, int)+0x427>
10003ff5:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003ff9:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003ffd:	7d 48                	jge    10004047 <NIDesktop::renderScanline(int, int, int)+0x427>
10003fff:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10004001: R_386_32	shadow
10004005:	3c 80                	cmp    al,0x80
10004007:	74 3b                	je     10004044 <NIDesktop::renderScanline(int, int, int)+0x424>
10004009:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	1000400c: R_386_32	renderData
10004010:	0f b6 f0             	movzx  esi,al
10004013:	89 d1                	mov    ecx,edx
10004015:	0f b6 c6             	movzx  eax,dh
10004018:	c1 e9 10             	shr    ecx,0x10
1000401b:	0f af c6             	imul   eax,esi
1000401e:	0f b6 c9             	movzx  ecx,cl
10004021:	0f b6 d2             	movzx  edx,dl
10004024:	0f af ce             	imul   ecx,esi
10004027:	0f af d6             	imul   edx,esi
1000402a:	c1 e9 07             	shr    ecx,0x7
1000402d:	c1 e8 07             	shr    eax,0x7
10004030:	c1 e1 10             	shl    ecx,0x10
10004033:	c1 e0 08             	shl    eax,0x8
10004036:	c1 ea 07             	shr    edx,0x7
10004039:	09 c1                	or     ecx,eax
1000403b:	09 ca                	or     edx,ecx
1000403d:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10004040: R_386_32	renderData
10004044:	43                   	inc    ebx
10004045:	eb b2                	jmp    10003ff9 <NIDesktop::renderScanline(int, int, int)+0x3d9>
10004047:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000404b:	83 ec 0c             	sub    esp,0xc
1000404e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004051:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004057:	8b 10                	mov    edx,DWORD PTR [eax]
10004059:	68 00 00 00 00       	push   0x0	1000405a: R_386_32	renderData
1000405e:	6a 00                	push   0x0
10004060:	6a 01                	push   0x1
10004062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004066:	6a 00                	push   0x0
10004068:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
1000406c:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10004070:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10004074:	50                   	push   eax
10004075:	ff 52 38             	call   DWORD PTR [edx+0x38]
10004078:	83 c4 5c             	add    esp,0x5c
1000407b:	5b                   	pop    ebx
1000407c:	5e                   	pop    esi
1000407d:	5f                   	pop    edi
1000407e:	5d                   	pop    ebp
1000407f:	c3                   	ret    

10004080 <NIDesktop::rangeRefresh(int, int, int, int)>:
10004080:	53                   	push   ebx
10004081:	83 ec 08             	sub    esp,0x8
10004084:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004088:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
1000408c:	7d 18                	jge    100040a6 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
1000408e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004092:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004096:	53                   	push   ebx
10004097:	43                   	inc    ebx
10004098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000409c:	e8 fc ff ff ff       	call   1000409d <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	1000409d: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100040a1:	83 c4 10             	add    esp,0x10
100040a4:	eb e2                	jmp    10004088 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
100040a6:	83 c4 08             	add    esp,0x8
100040a9:	5b                   	pop    ebx
100040aa:	c3                   	ret    
100040ab:	90                   	nop

100040ac <NIDesktop::refreshWindowBounds(NIWindow*)>:
100040ac:	55                   	push   ebp
100040ad:	ba 05 00 00 00       	mov    edx,0x5
100040b2:	57                   	push   edi
100040b3:	56                   	push   esi
100040b4:	53                   	push   ebx
100040b5:	83 ec 0c             	sub    esp,0xc
100040b8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100040bc:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100040c2:	83 f8 05             	cmp    eax,0x5
100040c5:	7c 02                	jl     100040c9 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1d>
100040c7:	89 c2                	mov    edx,eax
100040c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100040cd:	03 83 70 01 00 00    	add    eax,DWORD PTR [ebx+0x170]
100040d3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
100040d6:	83 ea 05             	sub    edx,0x5
100040d9:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100040df:	8d 70 05             	lea    esi,[eax+0x5]
100040e2:	8d 69 fb             	lea    ebp,[ecx-0x5]
100040e5:	39 c5                	cmp    ebp,eax
100040e7:	7f 03                	jg     100040ec <NIDesktop::refreshWindowBounds(NIWindow*)+0x40>
100040e9:	8d 71 ff             	lea    esi,[ecx-0x1]
100040ec:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100040f2:	89 c1                	mov    ecx,eax
100040f4:	83 f8 05             	cmp    eax,0x5
100040f7:	7d 05                	jge    100040fe <NIDesktop::refreshWindowBounds(NIWindow*)+0x52>
100040f9:	b9 05 00 00 00       	mov    ecx,0x5
100040fe:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
10004104:	83 e9 05             	sub    ecx,0x5
10004107:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
1000410d:	8d 58 05             	lea    ebx,[eax+0x5]
10004110:	8d 6f fb             	lea    ebp,[edi-0x5]
10004113:	39 c5                	cmp    ebp,eax
10004115:	7f 03                	jg     1000411a <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>
10004117:	8d 5f ff             	lea    ebx,[edi-0x1]
1000411a:	83 ec 0c             	sub    esp,0xc
1000411d:	53                   	push   ebx
1000411e:	51                   	push   ecx
1000411f:	56                   	push   esi
10004120:	52                   	push   edx
10004121:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004125:	e8 fc ff ff ff       	call   10004126 <NIDesktop::refreshWindowBounds(NIWindow*)+0x7a>	10004126: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000412a:	83 c4 2c             	add    esp,0x2c
1000412d:	5b                   	pop    ebx
1000412e:	5e                   	pop    esi
1000412f:	5f                   	pop    edi
10004130:	5d                   	pop    ebp
10004131:	c3                   	ret    

10004132 <NIDesktop::completeRefresh()>:
10004132:	56                   	push   esi
10004133:	53                   	push   ebx
10004134:	31 f6                	xor    esi,esi
10004136:	50                   	push   eax
10004137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000413b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000413e:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004144:	7e 15                	jle    1000415b <NIDesktop::completeRefresh()+0x29>
10004146:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
1000414c:	6a 00                	push   0x0
1000414e:	56                   	push   esi
1000414f:	46                   	inc    esi
10004150:	53                   	push   ebx
10004151:	e8 fc ff ff ff       	call   10004152 <NIDesktop::completeRefresh()+0x20>	10004152: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004156:	83 c4 10             	add    esp,0x10
10004159:	eb e0                	jmp    1000413b <NIDesktop::completeRefresh()+0x9>
1000415b:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004161:	83 ec 0c             	sub    esp,0xc
10004164:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004166:	6a 00                	push   0x0
10004168:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000416b:	05 00 00 00 00       	add    eax,0x0	1000416c: R_386_32	___mouse_data
10004170:	50                   	push   eax
10004171:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004174:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004177:	52                   	push   edx
10004178:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000417b:	83 c4 24             	add    esp,0x24
1000417e:	5b                   	pop    ebx
1000417f:	5e                   	pop    esi
10004180:	c3                   	ret    
10004181:	90                   	nop

10004182 <NIDesktop::addWindow(NIWindow*)>:
10004182:	56                   	push   esi
10004183:	53                   	push   ebx
10004184:	83 ec 0c             	sub    esp,0xc
10004187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000418b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000418f:	56                   	push   esi
10004190:	ff 33                	push   DWORD PTR [ebx]
10004192:	e8 fc ff ff ff       	call   10004193 <NIDesktop::addWindow(NIWindow*)+0x11>	10004193: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004197:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000419b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000419f:	83 c4 14             	add    esp,0x14
100041a2:	5b                   	pop    ebx
100041a3:	5e                   	pop    esi
100041a4:	e9 03 ff ff ff       	jmp    100040ac <NIDesktop::refreshWindowBounds(NIWindow*)>
100041a9:	90                   	nop

100041aa <NIDesktop::raiseWindow(NIWindow*)>:
100041aa:	53                   	push   ebx
100041ab:	83 ec 10             	sub    esp,0x10
100041ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100041b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100041b6:	50                   	push   eax
100041b7:	ff 33                	push   DWORD PTR [ebx]
100041b9:	e8 fc ff ff ff       	call   100041ba <NIDesktop::raiseWindow(NIWindow*)+0x10>	100041ba: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100041be:	58                   	pop    eax
100041bf:	5a                   	pop    edx
100041c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100041c4:	ff 33                	push   DWORD PTR [ebx]
100041c6:	e8 fc ff ff ff       	call   100041c7 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100041c7: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100041cb:	59                   	pop    ecx
100041cc:	58                   	pop    eax
100041cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100041d1:	53                   	push   ebx
100041d2:	e8 fc ff ff ff       	call   100041d3 <NIDesktop::raiseWindow(NIWindow*)+0x29>	100041d3: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100041d7:	83 c4 18             	add    esp,0x18
100041da:	5b                   	pop    ebx
100041db:	c3                   	ret    

100041dc <NIDesktop::deleteWindow(NIWindow*)>:
100041dc:	53                   	push   ebx
100041dd:	83 ec 10             	sub    esp,0x10
100041e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100041e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100041e8:	50                   	push   eax
100041e9:	ff 33                	push   DWORD PTR [ebx]
100041eb:	e8 fc ff ff ff       	call   100041ec <NIDesktop::deleteWindow(NIWindow*)+0x10>	100041ec: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100041f0:	58                   	pop    eax
100041f1:	5a                   	pop    edx
100041f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100041f6:	53                   	push   ebx
100041f7:	e8 fc ff ff ff       	call   100041f8 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	100041f8: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100041fc:	83 c4 18             	add    esp,0x18
100041ff:	5b                   	pop    ebx
10004200:	c3                   	ret    
10004201:	90                   	nop

10004202 <NIDesktop::handleMouse(int, int, int, int)>:
10004202:	55                   	push   ebp
10004203:	57                   	push   edi
10004204:	56                   	push   esi
10004205:	53                   	push   ebx
10004206:	83 ec 68             	sub    esp,0x68
10004209:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
1000420d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004213:	8d 4a 20             	lea    ecx,[edx+0x20]
10004216:	51                   	push   ecx
10004217:	52                   	push   edx
10004218:	8d 50 20             	lea    edx,[eax+0x20]
1000421b:	52                   	push   edx
1000421c:	50                   	push   eax
1000421d:	53                   	push   ebx
1000421e:	e8 fc ff ff ff       	call   1000421f <NIDesktop::handleMouse(int, int, int, int)+0x1d>	1000421f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004223:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004226:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000422a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000422d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10004231:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004235:	03 94 24 94 00 00 00 	add    edx,DWORD PTR [esp+0x94]
1000423c:	03 84 24 98 00 00 00 	add    eax,DWORD PTR [esp+0x98]
10004243:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004246:	83 c4 20             	add    esp,0x20
10004249:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000424c:	85 d2                	test   edx,edx
1000424e:	79 07                	jns    10004257 <NIDesktop::handleMouse(int, int, int, int)+0x55>
10004250:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004257:	85 c0                	test   eax,eax
10004259:	79 07                	jns    10004262 <NIDesktop::handleMouse(int, int, int, int)+0x60>
1000425b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
10004262:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004265:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
1000426b:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
1000426e:	7f 04                	jg     10004274 <NIDesktop::handleMouse(int, int, int, int)+0x72>
10004270:	48                   	dec    eax
10004271:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004274:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
1000427a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
1000427d:	7f 04                	jg     10004283 <NIDesktop::handleMouse(int, int, int, int)+0x81>
1000427f:	48                   	dec    eax
10004280:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004283:	50                   	push   eax
10004284:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004287:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000428a:	53                   	push   ebx
1000428b:	e8 fc ff ff ff       	call   1000428c <NIDesktop::handleMouse(int, int, int, int)+0x8a>	1000428c: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
10004290:	83 c4 10             	add    esp,0x10
10004293:	89 c5                	mov    ebp,eax
10004295:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10004299:	83 e0 01             	and    eax,0x1
1000429c:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000429e: R_386_32	movingWin
100042a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100042a7:	0f 84 0e 02 00 00    	je     100044bb <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100042ad:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100042af: R_386_32	movingType
100042b4:	0f 85 01 02 00 00    	jne    100044bb <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100042ba:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
100042bf:	85 c0                	test   eax,eax
100042c1:	75 0c                	jne    100042cf <NIDesktop::handleMouse(int, int, int, int)+0xcd>
100042c3:	a0 58 8c 03 10       	mov    al,ds:0x10038c58	100042c4: R_386_32	.bss
100042c8:	83 e0 01             	and    eax,0x1
100042cb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
100042cf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
100042d7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042d9: R_386_32	movingWin
100042dd:	8b 82 70 01 00 00    	mov    eax,DWORD PTR [edx+0x170]
100042e3:	8d 48 ff             	lea    ecx,[eax-0x1]
100042e6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
100042ea:	0f 8e b6 00 00 00    	jle    100043a6 <NIDesktop::handleMouse(int, int, int, int)+0x1a4>
100042f0:	be 01 00 00 00       	mov    esi,0x1
100042f5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042f7: R_386_32	movingWin
100042fb:	8b 92 6c 01 00 00    	mov    edx,DWORD PTR [edx+0x16c]
10004301:	4a                   	dec    edx
10004302:	39 f2                	cmp    edx,esi
10004304:	0f 8e 93 00 00 00    	jle    1000439d <NIDesktop::handleMouse(int, int, int, int)+0x19b>
1000430a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000430e:	8d 14 30             	lea    edx,[eax+esi*1]
10004311:	89 c1                	mov    ecx,eax
10004313:	83 e2 1f             	and    edx,0x1f
10004316:	83 e1 03             	and    ecx,0x3
10004319:	09 ca                	or     edx,ecx
1000431b:	75 7a                	jne    10004397 <NIDesktop::handleMouse(int, int, int, int)+0x195>
1000431d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004321:	2b 15 54 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c54	10004323: R_386_32	.bss
10004327:	01 f2                	add    edx,esi
10004329:	78 2d                	js     10004358 <NIDesktop::handleMouse(int, int, int, int)+0x156>
1000432b:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000432e:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004334:	7d 22                	jge    10004358 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004336:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000433a:	8d 7a 01             	lea    edi,[edx+0x1]
1000433d:	83 ec 0c             	sub    esp,0xc
10004340:	2b 0d 50 8c 03 10    	sub    ecx,DWORD PTR ds:0x10038c50	10004342: R_386_32	.bss
10004346:	57                   	push   edi
10004347:	01 c1                	add    ecx,eax
10004349:	52                   	push   edx
1000434a:	8d 51 01             	lea    edx,[ecx+0x1]
1000434d:	52                   	push   edx
1000434e:	51                   	push   ecx
1000434f:	53                   	push   ebx
10004350:	e8 fc ff ff ff       	call   10004351 <NIDesktop::handleMouse(int, int, int, int)+0x14f>	10004351: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004355:	83 c4 20             	add    esp,0x20
10004358:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
1000435d:	75 38                	jne    10004397 <NIDesktop::handleMouse(int, int, int, int)+0x195>
1000435f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004362:	01 f2                	add    edx,esi
10004364:	2b 15 54 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c54	10004366: R_386_32	.bss
1000436a:	78 2b                	js     10004397 <NIDesktop::handleMouse(int, int, int, int)+0x195>
1000436c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000436f:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004375:	7d 20                	jge    10004397 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004377:	8b b9 08 04 00 00    	mov    edi,DWORD PTR [ecx+0x408]
1000437d:	8b 07                	mov    eax,DWORD PTR [edi]
1000437f:	6a 00                	push   0x0
10004381:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004385:	03 4b 0c             	add    ecx,DWORD PTR [ebx+0xc]
10004388:	2b 0d 50 8c 03 10    	sub    ecx,DWORD PTR ds:0x10038c50	1000438a: R_386_32	.bss
1000438e:	51                   	push   ecx
1000438f:	52                   	push   edx
10004390:	57                   	push   edi
10004391:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004394:	83 c4 10             	add    esp,0x10
10004397:	46                   	inc    esi
10004398:	e9 58 ff ff ff       	jmp    100042f5 <NIDesktop::handleMouse(int, int, int, int)+0xf3>
1000439d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
100043a1:	e9 31 ff ff ff       	jmp    100042d7 <NIDesktop::handleMouse(int, int, int, int)+0xd5>
100043a6:	8b 0d 54 8c 03 10    	mov    ecx,DWORD PTR ds:0x10038c54	100043a8: R_386_32	.bss
100043ac:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
100043af:	29 ce                	sub    esi,ecx
100043b1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100043b6:	0f 85 97 06 00 00    	jne    10004a53 <NIDesktop::handleMouse(int, int, int, int)+0x851>
100043bc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100043c0:	85 f6                	test   esi,esi
100043c2:	79 08                	jns    100043cc <NIDesktop::handleMouse(int, int, int, int)+0x1ca>
100043c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100043cc:	8b ba 6c 01 00 00    	mov    edi,DWORD PTR [edx+0x16c]
100043d2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100043d5:	01 fe                	add    esi,edi
100043d7:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
100043dd:	39 d6                	cmp    esi,edx
100043df:	7d 06                	jge    100043e7 <NIDesktop::handleMouse(int, int, int, int)+0x1e5>
100043e1:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100043e5:	eb 0c                	jmp    100043f3 <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
100043e7:	89 d6                	mov    esi,edx
100043e9:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100043ed:	0f 88 c8 00 00 00    	js     100044bb <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100043f3:	85 f6                	test   esi,esi
100043f5:	0f 84 c0 00 00 00    	je     100044bb <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100043fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100043ff:	29 c8                	sub    eax,ecx
10004401:	89 c1                	mov    ecx,eax
10004403:	79 02                	jns    10004407 <NIDesktop::handleMouse(int, int, int, int)+0x205>
10004405:	31 c0                	xor    eax,eax
10004407:	01 cf                	add    edi,ecx
10004409:	39 fa                	cmp    edx,edi
1000440b:	7e 04                	jle    10004411 <NIDesktop::handleMouse(int, int, int, int)+0x20f>
1000440d:	29 c7                	sub    edi,eax
1000440f:	eb 08                	jmp    10004419 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004411:	89 d7                	mov    edi,edx
10004413:	29 c7                	sub    edi,eax
10004415:	79 02                	jns    10004419 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004417:	31 ff                	xor    edi,edi
10004419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000441d:	01 c7                	add    edi,eax
1000441f:	83 ec 0c             	sub    esp,0xc
10004422:	2b 15 50 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c50	10004424: R_386_32	.bss
10004428:	57                   	push   edi
10004429:	8d 4a 01             	lea    ecx,[edx+0x1]
1000442c:	50                   	push   eax
1000442d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004431:	51                   	push   ecx
10004432:	52                   	push   edx
10004433:	53                   	push   ebx
10004434:	e8 fc ff ff ff       	call   10004435 <NIDesktop::handleMouse(int, int, int, int)+0x233>	10004435: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004439:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
1000443d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000443f: R_386_32	movingWin
10004443:	83 c4 14             	add    esp,0x14
10004446:	2b 15 50 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c50	10004448: R_386_32	.bss
1000444c:	03 91 70 01 00 00    	add    edx,DWORD PTR [ecx+0x170]
10004452:	57                   	push   edi
10004453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004457:	50                   	push   eax
10004458:	52                   	push   edx
10004459:	4a                   	dec    edx
1000445a:	52                   	push   edx
1000445b:	53                   	push   ebx
1000445c:	e8 fc ff ff ff       	call   1000445d <NIDesktop::handleMouse(int, int, int, int)+0x25b>	1000445d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004461:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004464:	83 c4 18             	add    esp,0x18
10004467:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
1000446d:	8b 39                	mov    edi,DWORD PTR [ecx]
1000446f:	6a 00                	push   0x0
10004471:	6a 01                	push   0x1
10004473:	56                   	push   esi
10004474:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004477:	2b 15 50 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c50	10004479: R_386_32	.bss
1000447d:	52                   	push   edx
1000447e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004482:	51                   	push   ecx
10004483:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004486:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004489:	83 c4 18             	add    esp,0x18
1000448c:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004492:	8b 39                	mov    edi,DWORD PTR [ecx]
10004494:	6a 00                	push   0x0
10004496:	6a 01                	push   0x1
10004498:	56                   	push   esi
10004499:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	1000449b: R_386_32	movingWin
1000449f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100044a2:	2b 15 50 8c 03 10    	sub    edx,DWORD PTR ds:0x10038c50	100044a4: R_386_32	.bss
100044a8:	03 96 70 01 00 00    	add    edx,DWORD PTR [esi+0x170]
100044ae:	4a                   	dec    edx
100044af:	52                   	push   edx
100044b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100044b4:	51                   	push   ecx
100044b5:	ff 57 28             	call   DWORD PTR [edi+0x28]
100044b8:	83 c4 20             	add    esp,0x20
100044bb:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100044bd: R_386_32	movingWin
100044c1:	85 c9                	test   ecx,ecx
100044c3:	0f 84 46 02 00 00    	je     1000470f <NIDesktop::handleMouse(int, int, int, int)+0x50d>
100044c9:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100044cb: R_386_32	movingType
100044cf:	8d 56 fe             	lea    edx,[esi-0x2]
100044d2:	83 fa 02             	cmp    edx,0x2
100044d5:	0f 87 34 02 00 00    	ja     1000470f <NIDesktop::handleMouse(int, int, int, int)+0x50d>
100044db:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
100044e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
100044e5:	75 0c                	jne    100044f3 <NIDesktop::handleMouse(int, int, int, int)+0x2f1>
100044e7:	a0 58 8c 03 10       	mov    al,ds:0x10038c58	100044e8: R_386_32	.bss
100044ec:	83 e0 01             	and    eax,0x1
100044ef:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
100044f3:	8b 91 6c 01 00 00    	mov    edx,DWORD PTR [ecx+0x16c]
100044f9:	a1 54 8c 03 10       	mov    eax,ds:0x10038c54	100044fa: R_386_32	.bss
100044fe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004502:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
10004508:	01 d7                	add    edi,edx
1000450a:	29 c7                	sub    edi,eax
1000450c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10004510:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004514:	01 cf                	add    edi,ecx
10004516:	2b 3d 50 8c 03 10    	sub    edi,DWORD PTR ds:0x10038c50	10004518: R_386_32	.bss
1000451c:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10004520:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10004523:	01 d7                	add    edi,edx
10004525:	29 c7                	sub    edi,eax
10004527:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000452b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
1000452e:	01 cf                	add    edi,ecx
10004530:	2b 3d 50 8c 03 10    	sub    edi,DWORD PTR ds:0x10038c50	10004532: R_386_32	.bss
10004536:	83 fe 03             	cmp    esi,0x3
10004539:	74 0d                	je     10004548 <NIDesktop::handleMouse(int, int, int, int)+0x346>
1000453b:	83 fe 04             	cmp    esi,0x4
1000453e:	75 10                	jne    10004550 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004540:	89 cf                	mov    edi,ecx
10004542:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10004546:	eb 08                	jmp    10004550 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004548:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000454c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10004550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004554:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004558:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
1000455c:	7d 08                	jge    10004566 <NIDesktop::handleMouse(int, int, int, int)+0x364>
1000455e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004562:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000456a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000456e:	39 f8                	cmp    eax,edi
10004570:	7d 04                	jge    10004576 <NIDesktop::handleMouse(int, int, int, int)+0x374>
10004572:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10004576:	b8 01 00 00 00       	mov    eax,0x1
1000457b:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
1000457f:	0f 8d c9 00 00 00    	jge    1000464e <NIDesktop::handleMouse(int, int, int, int)+0x44c>
10004585:	be 01 00 00 00       	mov    esi,0x1
1000458a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
1000458e:	0f 8d b4 00 00 00    	jge    10004648 <NIDesktop::handleMouse(int, int, int, int)+0x446>
10004594:	8d 14 30             	lea    edx,[eax+esi*1]
10004597:	89 c1                	mov    ecx,eax
10004599:	83 e2 1f             	and    edx,0x1f
1000459c:	83 e1 03             	and    ecx,0x3
1000459f:	09 ca                	or     edx,ecx
100045a1:	0f 85 9b 00 00 00    	jne    10004642 <NIDesktop::handleMouse(int, int, int, int)+0x440>
100045a7:	83 ec 0c             	sub    esp,0xc
100045aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045ac: R_386_32	movingWin
100045b0:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
100045b6:	8b 92 68 01 00 00    	mov    edx,DWORD PTR [edx+0x168]
100045bc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100045c0:	8d 54 31 01          	lea    edx,[ecx+esi*1+0x1]
100045c4:	01 f1                	add    ecx,esi
100045c6:	52                   	push   edx
100045c7:	51                   	push   ecx
100045c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100045cc:	8d 4c 01 01          	lea    ecx,[ecx+eax*1+0x1]
100045d0:	51                   	push   ecx
100045d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
100045d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100045d9:	01 c2                	add    edx,eax
100045db:	52                   	push   edx
100045dc:	53                   	push   ebx
100045dd:	e8 fc ff ff ff       	call   100045de <NIDesktop::handleMouse(int, int, int, int)+0x3dc>	100045de: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045e2:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
100045e6:	83 c4 20             	add    esp,0x20
100045e9:	83 f1 01             	xor    ecx,0x1
100045ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100045f0:	39 c7                	cmp    edi,eax
100045f2:	0f 9f c2             	setg   dl
100045f5:	84 d1                	test   cl,dl
100045f7:	74 49                	je     10004642 <NIDesktop::handleMouse(int, int, int, int)+0x440>
100045f9:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
100045fd:	7d 43                	jge    10004642 <NIDesktop::handleMouse(int, int, int, int)+0x440>
100045ff:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004602:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004608:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000460a: R_386_32	movingWin
1000460e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10004612:	8b 09                	mov    ecx,DWORD PTR [ecx]
10004614:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10004618:	6a 00                	push   0x0
1000461a:	89 c1                	mov    ecx,eax
1000461c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004620:	03 8a 68 01 00 00    	add    ecx,DWORD PTR [edx+0x168]
10004626:	51                   	push   ecx
10004627:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
1000462d:	01 f1                	add    ecx,esi
1000462f:	51                   	push   ecx
10004630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004634:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004638:	ff 50 24             	call   DWORD PTR [eax+0x24]
1000463b:	83 c4 10             	add    esp,0x10
1000463e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004642:	46                   	inc    esi
10004643:	e9 42 ff ff ff       	jmp    1000458a <NIDesktop::handleMouse(int, int, int, int)+0x388>
10004648:	40                   	inc    eax
10004649:	e9 2d ff ff ff       	jmp    1000457b <NIDesktop::handleMouse(int, int, int, int)+0x379>
1000464e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000464f: R_386_32	movingWin
10004653:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004658:	0f 85 60 03 00 00    	jne    100049be <NIDesktop::handleMouse(int, int, int, int)+0x7bc>
1000465e:	8b 88 64 01 00 00    	mov    ecx,DWORD PTR [eax+0x164]
10004664:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
1000466a:	83 ec 0c             	sub    esp,0xc
1000466d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004671:	8d 34 01             	lea    esi,[ecx+eax*1]
10004674:	56                   	push   esi
10004675:	51                   	push   ecx
10004676:	8d 4a 01             	lea    ecx,[edx+0x1]
10004679:	51                   	push   ecx
1000467a:	52                   	push   edx
1000467b:	53                   	push   ebx
1000467c:	e8 fc ff ff ff       	call   1000467d <NIDesktop::handleMouse(int, int, int, int)+0x47b>	1000467d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004681:	83 c4 18             	add    esp,0x18
10004684:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004687:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004689: R_386_32	movingWin
1000468d:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004693:	8b 32                	mov    esi,DWORD PTR [edx]
10004695:	6a 00                	push   0x0
10004697:	6a 01                	push   0x1
10004699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000469d:	ff b1 68 01 00 00    	push   DWORD PTR [ecx+0x168]
100046a3:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
100046a9:	52                   	push   edx
100046aa:	ff 56 28             	call   DWORD PTR [esi+0x28]
100046ad:	83 c4 14             	add    esp,0x14
100046b0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046b2: R_386_32	movingWin
100046b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100046ba:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
100046c0:	8b b2 64 01 00 00    	mov    esi,DWORD PTR [edx+0x164]
100046c6:	8d 14 06             	lea    edx,[esi+eax*1]
100046c9:	52                   	push   edx
100046ca:	56                   	push   esi
100046cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100046cf:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
100046d3:	52                   	push   edx
100046d4:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
100046d8:	51                   	push   ecx
100046d9:	53                   	push   ebx
100046da:	e8 fc ff ff ff       	call   100046db <NIDesktop::handleMouse(int, int, int, int)+0x4d9>	100046db: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100046df:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100046e2:	83 c4 18             	add    esp,0x18
100046e5:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
100046eb:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100046ed: R_386_32	movingWin
100046f1:	8b 32                	mov    esi,DWORD PTR [edx]
100046f3:	6a 00                	push   0x0
100046f5:	6a 01                	push   0x1
100046f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100046fb:	03 b9 68 01 00 00    	add    edi,DWORD PTR [ecx+0x168]
10004701:	57                   	push   edi
10004702:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
10004708:	52                   	push   edx
10004709:	ff 56 28             	call   DWORD PTR [esi+0x28]
1000470c:	83 c4 20             	add    esp,0x20
1000470f:	85 ed                	test   ebp,ebp
10004711:	0f 84 70 02 00 00    	je     10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004717:	f6 44 24 7c 01       	test   BYTE PTR [esp+0x7c],0x1
1000471c:	0f 84 65 02 00 00    	je     10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004722:	8b 15 58 8c 03 10    	mov    edx,DWORD PTR ds:0x10038c58	10004724: R_386_32	.bss
10004728:	83 e2 01             	and    edx,0x1
1000472b:	0f 85 34 01 00 00    	jne    10004865 <NIDesktop::handleMouse(int, int, int, int)+0x663>
10004731:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004733: R_386_32	milliTenthsSinceBoot
10004737:	8b 3d 04 00 00 00    	mov    edi,DWORD PTR ds:0x4	10004739: R_386_32	milliTenthsSinceBoot
1000473d:	2b 35 48 8c 03 10    	sub    esi,DWORD PTR ds:0x10038c48	1000473f: R_386_32	.bss
10004743:	b9 b7 0b 00 00       	mov    ecx,0xbb7
10004748:	1b 3d 4c 8c 03 10    	sbb    edi,DWORD PTR ds:0x10038c4c	1000474a: R_386_32	.bss
1000474e:	39 f1                	cmp    ecx,esi
10004750:	19 fa                	sbb    edx,edi
10004752:	0f 82 de 00 00 00    	jb     10004836 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004758:	8b 8d 68 01 00 00    	mov    ecx,DWORD PTR [ebp+0x168]
1000475e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004761:	29 ca                	sub    edx,ecx
10004763:	83 fa 18             	cmp    edx,0x18
10004766:	0f 8f ca 00 00 00    	jg     10004836 <NIDesktop::handleMouse(int, int, int, int)+0x634>
1000476c:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
10004773:	0f 85 bd 00 00 00    	jne    10004836 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004779:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004780:	74 3e                	je     100047c0 <NIDesktop::handleMouse(int, int, int, int)+0x5be>
10004782:	8b 95 78 01 00 00    	mov    edx,DWORD PTR [ebp+0x178]
10004788:	89 95 64 01 00 00    	mov    DWORD PTR [ebp+0x164],edx
1000478e:	8b 95 7c 01 00 00    	mov    edx,DWORD PTR [ebp+0x17c]
10004794:	89 95 68 01 00 00    	mov    DWORD PTR [ebp+0x168],edx
1000479a:	8b 95 80 01 00 00    	mov    edx,DWORD PTR [ebp+0x180]
100047a0:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
100047a6:	8b 95 84 01 00 00    	mov    edx,DWORD PTR [ebp+0x184]
100047ac:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
100047b2:	50                   	push   eax
100047b3:	50                   	push   eax
100047b4:	55                   	push   ebp
100047b5:	53                   	push   ebx
100047b6:	e8 fc ff ff ff       	call   100047b7 <NIDesktop::handleMouse(int, int, int, int)+0x5b5>	100047b7: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
100047bb:	83 c4 10             	add    esp,0x10
100047be:	eb 5c                	jmp    1000481c <NIDesktop::handleMouse(int, int, int, int)+0x61a>
100047c0:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
100047c6:	c7 85 68 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x168],0x0
100047d0:	8b 95 64 01 00 00    	mov    edx,DWORD PTR [ebp+0x164]
100047d6:	c7 85 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x164],0x0
100047e0:	89 95 78 01 00 00    	mov    DWORD PTR [ebp+0x178],edx
100047e6:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
100047ec:	89 95 80 01 00 00    	mov    DWORD PTR [ebp+0x180],edx
100047f2:	8b 95 70 01 00 00    	mov    edx,DWORD PTR [ebp+0x170]
100047f8:	89 95 84 01 00 00    	mov    DWORD PTR [ebp+0x184],edx
100047fe:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004801:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004807:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
1000480d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004810:	8b 92 10 04 00 00    	mov    edx,DWORD PTR [edx+0x410]
10004816:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
1000481c:	83 ec 0c             	sub    esp,0xc
1000481f:	80 b5 74 01 00 00 01 	xor    BYTE PTR [ebp+0x174],0x1
10004826:	55                   	push   ebp
10004827:	e8 fc ff ff ff       	call   10004828 <NIDesktop::handleMouse(int, int, int, int)+0x626>	10004828: R_386_PC32	NIWindow::rerender()
1000482c:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000482f:	e8 fc ff ff ff       	call   10004830 <NIDesktop::handleMouse(int, int, int, int)+0x62e>	10004830: R_386_PC32	NIDesktop::completeRefresh()
10004834:	eb 11                	jmp    10004847 <NIDesktop::handleMouse(int, int, int, int)+0x645>
10004836:	8b 13                	mov    edx,DWORD PTR [ebx]
10004838:	8b 12                	mov    edx,DWORD PTR [edx]
1000483a:	39 2a                	cmp    DWORD PTR [edx],ebp
1000483c:	74 0c                	je     1000484a <NIDesktop::handleMouse(int, int, int, int)+0x648>
1000483e:	50                   	push   eax
1000483f:	50                   	push   eax
10004840:	55                   	push   ebp
10004841:	53                   	push   ebx
10004842:	e8 fc ff ff ff       	call   10004843 <NIDesktop::handleMouse(int, int, int, int)+0x641>	10004843: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004847:	83 c4 10             	add    esp,0x10
1000484a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000484b: R_386_32	milliTenthsSinceBoot
1000484f:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004851: R_386_32	milliTenthsSinceBoot
10004855:	a3 48 8c 03 10       	mov    ds:0x10038c48,eax	10004856: R_386_32	.bss
1000485a:	89 15 4c 8c 03 10    	mov    DWORD PTR ds:0x10038c4c,edx	1000485c: R_386_32	.bss
10004860:	e9 22 01 00 00       	jmp    10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004865:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004867: R_386_32	movingWin
1000486c:	0f 85 15 01 00 00    	jne    10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004872:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004875:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
1000487b:	89 ce                	mov    esi,ecx
1000487d:	8d 50 f2             	lea    edx,[eax-0xe]
10004880:	2b b5 68 01 00 00    	sub    esi,DWORD PTR [ebp+0x168]
10004886:	39 f2                	cmp    edx,esi
10004888:	7f 3b                	jg     100048c5 <NIDesktop::handleMouse(int, int, int, int)+0x6c3>
1000488a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004891:	75 32                	jne    100048c5 <NIDesktop::handleMouse(int, int, int, int)+0x6c3>
10004893:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004896:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
1000489d:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	1000489f: R_386_32	movingWin
100048a3:	50                   	push   eax
100048a4:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	100048a6: R_386_32	movingType
100048ae:	50                   	push   eax
100048af:	89 15 54 8c 03 10    	mov    DWORD PTR ds:0x10038c54,edx	100048b1: R_386_32	.bss
100048b5:	55                   	push   ebp
100048b6:	89 0d 50 8c 03 10    	mov    DWORD PTR ds:0x10038c50,ecx	100048b8: R_386_32	.bss
100048bc:	53                   	push   ebx
100048bd:	e8 fc ff ff ff       	call   100048be <NIDesktop::handleMouse(int, int, int, int)+0x6bc>	100048be: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100048c2:	83 c4 10             	add    esp,0x10
100048c5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
100048c8:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
100048ce:	89 ce                	mov    esi,ecx
100048d0:	8d 50 f2             	lea    edx,[eax-0xe]
100048d3:	2b b5 64 01 00 00    	sub    esi,DWORD PTR [ebp+0x164]
100048d9:	39 f2                	cmp    edx,esi
100048db:	7f 59                	jg     10004936 <NIDesktop::handleMouse(int, int, int, int)+0x734>
100048dd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
100048e4:	75 50                	jne    10004936 <NIDesktop::handleMouse(int, int, int, int)+0x734>
100048e6:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100048e8: R_386_32	movingWin
100048ed:	75 34                	jne    10004923 <NIDesktop::handleMouse(int, int, int, int)+0x721>
100048ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100048f2:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
100048f9:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100048fb: R_386_32	movingWin
100048ff:	57                   	push   edi
10004900:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004902: R_386_32	movingType
1000490a:	57                   	push   edi
1000490b:	89 0d 54 8c 03 10    	mov    DWORD PTR ds:0x10038c54,ecx	1000490d: R_386_32	.bss
10004911:	55                   	push   ebp
10004912:	89 15 50 8c 03 10    	mov    DWORD PTR ds:0x10038c50,edx	10004914: R_386_32	.bss
10004918:	53                   	push   ebx
10004919:	e8 fc ff ff ff       	call   1000491a <NIDesktop::handleMouse(int, int, int, int)+0x718>	1000491a: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000491e:	83 c4 10             	add    esp,0x10
10004921:	eb 13                	jmp    10004936 <NIDesktop::handleMouse(int, int, int, int)+0x734>
10004923:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004925: R_386_32	movingType
1000492d:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
10004934:	eb 51                	jmp    10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004936:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004938: R_386_32	movingWin
1000493d:	75 48                	jne    10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
1000493f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004942:	2b 95 68 01 00 00    	sub    edx,DWORD PTR [ebp+0x168]
10004948:	83 fa 18             	cmp    edx,0x18
1000494b:	7f 3a                	jg     10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
1000494d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004954:	75 31                	jne    10004987 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004956:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004959:	2b 8d 64 01 00 00    	sub    ecx,DWORD PTR [ebp+0x164]
1000495f:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004961: R_386_32	movingWin
10004965:	56                   	push   esi
10004966:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004968: R_386_32	movingType
10004970:	56                   	push   esi
10004971:	89 0d 54 8c 03 10    	mov    DWORD PTR ds:0x10038c54,ecx	10004973: R_386_32	.bss
10004977:	55                   	push   ebp
10004978:	89 15 50 8c 03 10    	mov    DWORD PTR ds:0x10038c50,edx	1000497a: R_386_32	.bss
1000497e:	53                   	push   ebx
1000497f:	e8 fc ff ff ff       	call   10004980 <NIDesktop::handleMouse(int, int, int, int)+0x77e>	10004980: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004984:	83 c4 10             	add    esp,0x10
10004987:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000498a:	83 ec 0c             	sub    esp,0xc
1000498d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004993:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004995:	6a 00                	push   0x0
10004997:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000499a:	05 00 00 00 00       	add    eax,0x0	1000499b: R_386_32	___mouse_data
1000499f:	50                   	push   eax
100049a0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100049a3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100049a6:	52                   	push   edx
100049a7:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100049aa:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
100049b1:	a3 58 8c 03 10       	mov    ds:0x10038c58,eax	100049b2: R_386_32	.bss
100049b6:	83 c4 7c             	add    esp,0x7c
100049b9:	5b                   	pop    ebx
100049ba:	5e                   	pop    esi
100049bb:	5f                   	pop    edi
100049bc:	5d                   	pop    ebp
100049bd:	c3                   	ret    
100049be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100049c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100049c6:	c7 44 24 40 01 00 00 80 	mov    DWORD PTR [esp+0x40],0x80000001
100049ce:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100049d0: R_386_32	mouseDesktop
100049d4:	83 ec 0c             	sub    esp,0xc
100049d7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
100049da:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100049dc: R_386_32	movingWin
100049e4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
100049e7:	66 89 4c 24 50       	mov    WORD PTR [esp+0x50],cx
100049ec:	66 89 54 24 52       	mov    WORD PTR [esp+0x52],dx
100049f1:	89 b0 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],esi
100049f7:	89 b8 70 01 00 00    	mov    DWORD PTR [eax+0x170],edi
100049fd:	50                   	push   eax
100049fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004a02:	e8 fc ff ff ff       	call   10004a03 <NIDesktop::handleMouse(int, int, int, int)+0x801>	10004a03: R_386_PC32	NIWindow::rerender()
10004a07:	83 ec 0c             	sub    esp,0xc
10004a0a:	b9 05 00 00 00       	mov    ecx,0x5
10004a0f:	8d 74 24 58          	lea    esi,[esp+0x58]
10004a13:	89 e7                	mov    edi,esp
10004a15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004a1b:	50                   	push   eax
10004a1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004a20:	e8 fc ff ff ff       	call   10004a21 <NIDesktop::handleMouse(int, int, int, int)+0x81f>	10004a21: R_386_PC32	NIWindow::postEvent(NiEvent)
10004a25:	83 c4 18             	add    esp,0x18
10004a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004a2c:	50                   	push   eax
10004a2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004a31:	53                   	push   ebx
10004a32:	e8 fc ff ff ff       	call   10004a33 <NIDesktop::handleMouse(int, int, int, int)+0x831>	10004a33: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004a37:	5a                   	pop    edx
10004a38:	59                   	pop    ecx
10004a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004a3d:	50                   	push   eax
10004a3e:	53                   	push   ebx
10004a3f:	e8 fc ff ff ff       	call   10004a40 <NIDesktop::handleMouse(int, int, int, int)+0x83e>	10004a40: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004a44:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004a4b:	83 c4 10             	add    esp,0x10
10004a4e:	e9 bc fc ff ff       	jmp    1000470f <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004a53:	89 b2 64 01 00 00    	mov    DWORD PTR [edx+0x164],esi
10004a59:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004a5c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004a5e: R_386_32	movingWin
10004a66:	2b 0d 50 8c 03 10    	sub    ecx,DWORD PTR ds:0x10038c50	10004a68: R_386_32	.bss
10004a6c:	89 8a 68 01 00 00    	mov    DWORD PTR [edx+0x168],ecx
10004a72:	50                   	push   eax
10004a73:	50                   	push   eax
10004a74:	52                   	push   edx
10004a75:	53                   	push   ebx
10004a76:	e8 fc ff ff ff       	call   10004a77 <NIDesktop::handleMouse(int, int, int, int)+0x875>	10004a77: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004a7b:	83 c4 10             	add    esp,0x10
10004a7e:	e9 38 fa ff ff       	jmp    100044bb <NIDesktop::handleMouse(int, int, int, int)+0x2b9>

10004a83 <NiHandleMouse(int, int, int, int)>:
10004a83:	83 ec 18             	sub    esp,0x18
10004a86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004a8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004a8e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004a92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004a96:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a98: R_386_32	mouseDesktop
10004a9c:	e8 fc ff ff ff       	call   10004a9d <NiHandleMouse(int, int, int, int)+0x1a>	10004a9d: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10004aa1:	83 c4 2c             	add    esp,0x2c
10004aa4:	c3                   	ret    

10004aa5 <drawVGAChar(int, int, int)>:
10004aa5:	55                   	push   ebp
10004aa6:	57                   	push   edi
10004aa7:	56                   	push   esi
10004aa8:	53                   	push   ebx
10004aa9:	31 db                	xor    ebx,ebx
10004aab:	83 ec 1c             	sub    esp,0x1c
10004aae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004ab2:	c1 e0 04             	shl    eax,0x4
10004ab5:	89 04 24             	mov    DWORD PTR [esp],eax
10004ab8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004abc:	c1 e0 04             	shl    eax,0x4
10004abf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004ac3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004ac7:	c1 e0 03             	shl    eax,0x3
10004aca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004ace:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004ad1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004ad5:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10004ad8: R_386_32	cp
10004adc:	8d 3c 19             	lea    edi,[ecx+ebx*1]
10004adf:	31 f6                	xor    esi,esi
10004ae1:	84 c0                	test   al,al
10004ae3:	79 22                	jns    10004b07 <drawVGAChar(int, int, int)+0x62>
10004ae5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10004ae9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004aeb: R_386_32	screen
10004aef:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004af1:	6a 00                	push   0x0
10004af3:	57                   	push   edi
10004af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004af8:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004afb:	55                   	push   ebp
10004afc:	52                   	push   edx
10004afd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004b00:	83 c4 10             	add    esp,0x10
10004b03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10004b07:	d1 e0                	shl    eax,1
10004b09:	46                   	inc    esi
10004b0a:	83 fe 08             	cmp    esi,0x8
10004b0d:	75 d2                	jne    10004ae1 <drawVGAChar(int, int, int)+0x3c>
10004b0f:	43                   	inc    ebx
10004b10:	83 fb 10             	cmp    ebx,0x10
10004b13:	75 b9                	jne    10004ace <drawVGAChar(int, int, int)+0x29>
10004b15:	83 c4 1c             	add    esp,0x1c
10004b18:	5b                   	pop    ebx
10004b19:	5e                   	pop    esi
10004b1a:	5f                   	pop    edi
10004b1b:	5d                   	pop    ebp
10004b1c:	c3                   	ret    

10004b1d <NiDisplayRAM(void*)>:
10004b1d:	56                   	push   esi
10004b1e:	53                   	push   ebx
10004b1f:	83 ec 14             	sub    esp,0x14
10004b22:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b23: R_386_32	irqDisableCounter
10004b27:	48                   	dec    eax
10004b28:	a3 00 00 00 00       	mov    ds:0x0,eax	10004b29: R_386_32	irqDisableCounter
10004b2d:	75 01                	jne    10004b30 <NiDisplayRAM(void*)+0x13>
10004b2f:	fb                   	sti    
10004b30:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10004b32: R_386_32	Phys::usedPages
10004b37:	31 db                	xor    ebx,ebx
10004b39:	99                   	cdq    
10004b3a:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10004b3c: R_386_32	Phys::usablePages
10004b40:	31 f6                	xor    esi,esi
10004b42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b46:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004b48: R_386_32	screen
10004b4c:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004b4e:	68 ff ff ff 00       	push   0xffffff
10004b53:	53                   	push   ebx
10004b54:	56                   	push   esi
10004b55:	46                   	inc    esi
10004b56:	52                   	push   edx
10004b57:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004b5a:	83 c4 10             	add    esp,0x10
10004b5d:	83 fe 60             	cmp    esi,0x60
10004b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b64:	75 dc                	jne    10004b42 <NiDisplayRAM(void*)+0x25>
10004b66:	43                   	inc    ebx
10004b67:	83 fb 10             	cmp    ebx,0x10
10004b6a:	75 d4                	jne    10004b40 <NiDisplayRAM(void*)+0x23>
10004b6c:	b9 0a 00 00 00       	mov    ecx,0xa
10004b71:	52                   	push   edx
10004b72:	99                   	cdq    
10004b73:	f7 f9                	idiv   ecx
10004b75:	89 d3                	mov    ebx,edx
10004b77:	83 c0 30             	add    eax,0x30
10004b7a:	50                   	push   eax
10004b7b:	6a 00                	push   0x0
10004b7d:	6a 00                	push   0x0
10004b7f:	e8 fc ff ff ff       	call   10004b80 <NiDisplayRAM(void*)+0x63>	10004b80: R_386_PC32	drawVGAChar(int, int, int)
10004b84:	8d 43 30             	lea    eax,[ebx+0x30]
10004b87:	83 c4 0c             	add    esp,0xc
10004b8a:	50                   	push   eax
10004b8b:	6a 00                	push   0x0
10004b8d:	6a 01                	push   0x1
10004b8f:	e8 fc ff ff ff       	call   10004b90 <NiDisplayRAM(void*)+0x73>	10004b90: R_386_PC32	drawVGAChar(int, int, int)
10004b94:	83 c4 0c             	add    esp,0xc
10004b97:	6a 25                	push   0x25
10004b99:	6a 00                	push   0x0
10004b9b:	6a 02                	push   0x2
10004b9d:	e8 fc ff ff ff       	call   10004b9e <NiDisplayRAM(void*)+0x81>	10004b9e: R_386_PC32	drawVGAChar(int, int, int)
10004ba2:	83 c4 0c             	add    esp,0xc
10004ba5:	6a 20                	push   0x20
10004ba7:	6a 00                	push   0x0
10004ba9:	6a 03                	push   0x3
10004bab:	e8 fc ff ff ff       	call   10004bac <NiDisplayRAM(void*)+0x8f>	10004bac: R_386_PC32	drawVGAChar(int, int, int)
10004bb0:	83 c4 0c             	add    esp,0xc
10004bb3:	6a 52                	push   0x52
10004bb5:	6a 00                	push   0x0
10004bb7:	6a 04                	push   0x4
10004bb9:	e8 fc ff ff ff       	call   10004bba <NiDisplayRAM(void*)+0x9d>	10004bba: R_386_PC32	drawVGAChar(int, int, int)
10004bbe:	83 c4 0c             	add    esp,0xc
10004bc1:	6a 41                	push   0x41
10004bc3:	6a 00                	push   0x0
10004bc5:	6a 05                	push   0x5
10004bc7:	e8 fc ff ff ff       	call   10004bc8 <NiDisplayRAM(void*)+0xab>	10004bc8: R_386_PC32	drawVGAChar(int, int, int)
10004bcc:	83 c4 0c             	add    esp,0xc
10004bcf:	6a 4d                	push   0x4d
10004bd1:	6a 00                	push   0x0
10004bd3:	6a 06                	push   0x6
10004bd5:	e8 fc ff ff ff       	call   10004bd6 <NiDisplayRAM(void*)+0xb9>	10004bd6: R_386_PC32	drawVGAChar(int, int, int)
10004bda:	83 c4 0c             	add    esp,0xc
10004bdd:	6a 20                	push   0x20
10004bdf:	6a 00                	push   0x0
10004be1:	6a 07                	push   0x7
10004be3:	e8 fc ff ff ff       	call   10004be4 <NiDisplayRAM(void*)+0xc7>	10004be4: R_386_PC32	drawVGAChar(int, int, int)
10004be8:	83 c4 0c             	add    esp,0xc
10004beb:	6a 75                	push   0x75
10004bed:	6a 00                	push   0x0
10004bef:	6a 08                	push   0x8
10004bf1:	e8 fc ff ff ff       	call   10004bf2 <NiDisplayRAM(void*)+0xd5>	10004bf2: R_386_PC32	drawVGAChar(int, int, int)
10004bf6:	83 c4 0c             	add    esp,0xc
10004bf9:	6a 73                	push   0x73
10004bfb:	6a 00                	push   0x0
10004bfd:	6a 09                	push   0x9
10004bff:	e8 fc ff ff ff       	call   10004c00 <NiDisplayRAM(void*)+0xe3>	10004c00: R_386_PC32	drawVGAChar(int, int, int)
10004c04:	83 c4 0c             	add    esp,0xc
10004c07:	6a 65                	push   0x65
10004c09:	6a 00                	push   0x0
10004c0b:	6a 0a                	push   0xa
10004c0d:	e8 fc ff ff ff       	call   10004c0e <NiDisplayRAM(void*)+0xf1>	10004c0e: R_386_PC32	drawVGAChar(int, int, int)
10004c12:	83 c4 0c             	add    esp,0xc
10004c15:	6a 64                	push   0x64
10004c17:	6a 00                	push   0x0
10004c19:	6a 0b                	push   0xb
10004c1b:	e8 fc ff ff ff       	call   10004c1c <NiDisplayRAM(void*)+0xff>	10004c1c: R_386_PC32	drawVGAChar(int, int, int)
10004c20:	c7 04 24 c4 09 00 00 	mov    DWORD PTR [esp],0x9c4
10004c27:	e8 fc ff ff ff       	call   10004c28 <NiDisplayRAM(void*)+0x10b>	10004c28: R_386_PC32	milliTenthSleep(unsigned int)
10004c2c:	83 c4 10             	add    esp,0x10
10004c2f:	e9 fc fe ff ff       	jmp    10004b30 <NiDisplayRAM(void*)+0x13>

10004c34 <monikaBsod(char*)>:
10004c34:	55                   	push   ebp
10004c35:	57                   	push   edi
10004c36:	31 ff                	xor    edi,edi
10004c38:	56                   	push   esi
10004c39:	53                   	push   ebx
10004c3a:	31 db                	xor    ebx,ebx
10004c3c:	83 ec 24             	sub    esp,0x24
10004c3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c40: R_386_32	screen
10004c44:	8b 10                	mov    edx,DWORD PTR [eax]
10004c46:	68 ff ff ff 00       	push   0xffffff
10004c4b:	50                   	push   eax
10004c4c:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004c4f:	83 c4 10             	add    esp,0x10
10004c52:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004c54: R_386_32	justMonika
10004c58:	8d 43 01             	lea    eax,[ebx+0x1]
10004c5b:	84 c9                	test   cl,cl
10004c5d:	79 0e                	jns    10004c6d <monikaBsod(char*)+0x39>
10004c5f:	8d 51 80             	lea    edx,[ecx-0x80]
10004c62:	83 c3 02             	add    ebx,0x2
10004c65:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004c67: R_386_32	justMonika
10004c6b:	eb 04                	jmp    10004c71 <monikaBsod(char*)+0x3d>
10004c6d:	89 c3                	mov    ebx,eax
10004c6f:	b2 01                	mov    dl,0x1
10004c71:	0f b6 c1             	movzx  eax,cl
10004c74:	83 e1 03             	and    ecx,0x3
10004c77:	89 c6                	mov    esi,eax
10004c79:	6b c9 55             	imul   ecx,ecx,0x55
10004c7c:	c1 fe 05             	sar    esi,0x5
10004c7f:	c1 f8 02             	sar    eax,0x2
10004c82:	83 e6 03             	and    esi,0x3
10004c85:	83 e0 07             	and    eax,0x7
10004c88:	6b f6 55             	imul   esi,esi,0x55
10004c8b:	6b c0 24             	imul   eax,eax,0x24
10004c8e:	c1 e6 10             	shl    esi,0x10
10004c91:	c1 e0 08             	shl    eax,0x8
10004c94:	09 f0                	or     eax,esi
10004c96:	31 f6                	xor    esi,esi
10004c98:	09 c8                	or     eax,ecx
10004c9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004c9e:	0f b6 c2             	movzx  eax,dl
10004ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004ca5:	8d 04 37             	lea    eax,[edi+esi*1]
10004ca8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004cac:	7f 10                	jg     10004cbe <monikaBsod(char*)+0x8a>
10004cae:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004cb2:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004cb8:	7e 98                	jle    10004c52 <monikaBsod(char*)+0x1e>
10004cba:	31 db                	xor    ebx,ebx
10004cbc:	eb 25                	jmp    10004ce3 <monikaBsod(char*)+0xaf>
10004cbe:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004cc0: R_386_32	screen
10004cc4:	b9 80 02 00 00       	mov    ecx,0x280
10004cc9:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004ccb:	46                   	inc    esi
10004ccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004cd0:	99                   	cdq    
10004cd1:	f7 f9                	idiv   ecx
10004cd3:	50                   	push   eax
10004cd4:	52                   	push   edx
10004cd5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004cd7: R_386_32	screen
10004cdb:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004cde:	83 c4 10             	add    esp,0x10
10004ce1:	eb c2                	jmp    10004ca5 <monikaBsod(char*)+0x71>
10004ce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004ce7:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004ceb:	84 c0                	test   al,al
10004ced:	74 1d                	je     10004d0c <monikaBsod(char*)+0xd8>
10004cef:	b9 19 00 00 00       	mov    ecx,0x19
10004cf4:	52                   	push   edx
10004cf5:	50                   	push   eax
10004cf6:	89 d8                	mov    eax,ebx
10004cf8:	43                   	inc    ebx
10004cf9:	99                   	cdq    
10004cfa:	f7 f9                	idiv   ecx
10004cfc:	83 c0 0a             	add    eax,0xa
10004cff:	42                   	inc    edx
10004d00:	50                   	push   eax
10004d01:	52                   	push   edx
10004d02:	e8 fc ff ff ff       	call   10004d03 <monikaBsod(char*)+0xcf>	10004d03: R_386_PC32	drawVGAChar(int, int, int)
10004d07:	83 c4 10             	add    esp,0x10
10004d0a:	eb d7                	jmp    10004ce3 <monikaBsod(char*)+0xaf>
10004d0c:	f4                   	hlt    
10004d0d:	eb fd                	jmp    10004d0c <monikaBsod(char*)+0xd8>

10004d0f <NiInstallSysHooks()>:
10004d0f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004d11: R_386_32	guiPanicHandler
	10004d15: R_386_32	monikaBsod(char*)
10004d19:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004d1b: R_386_32	systemCallHandlers
	10004d1f: R_386_32	NiSystemCallHandler(regs*)
10004d23:	c3                   	ret    

10004d24 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004d24:	56                   	push   esi
10004d25:	53                   	push   ebx
10004d26:	83 ec 10             	sub    esp,0x10
10004d29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004d2d:	68 07 59 00 10       	push   0x10005907	10004d2e: R_386_32	.text
10004d32:	e8 fc ff ff ff       	call   10004d33 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004d33: R_386_PC32	Dbg::kprintf(char const*, ...)
10004d37:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
10004d3e:	e8 fc ff ff ff       	call   10004d3f <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004d3f: R_386_PC32	malloc
10004d43:	89 c6                	mov    esi,eax
10004d45:	58                   	pop    eax
10004d46:	5a                   	pop    edx
10004d47:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004d4d:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004d53:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004d59:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004d5f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d61: R_386_32	ctxt
10004d65:	56                   	push   esi
10004d66:	e8 fc ff ff ff       	call   10004d67 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004d67: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004d6b:	83 c4 18             	add    esp,0x18
10004d6e:	56                   	push   esi
10004d6f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d71: R_386_32	desktop
10004d75:	e8 fc ff ff ff       	call   10004d76 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004d76: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004d7a:	59                   	pop    ecx
10004d7b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d7d: R_386_32	desktop
10004d81:	e8 fc ff ff ff       	call   10004d82 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004d82: R_386_PC32	NIDesktop::completeRefresh()
10004d86:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004d8c:	89 34 24             	mov    DWORD PTR [esp],esi
10004d8f:	e8 fc ff ff ff       	call   10004d90 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004d90: R_386_PC32	NIWindow::drawBasicWindow()
10004d94:	83 c4 14             	add    esp,0x14
10004d97:	31 c0                	xor    eax,eax
10004d99:	31 d2                	xor    edx,edx
10004d9b:	5b                   	pop    ebx
10004d9c:	5e                   	pop    esi
10004d9d:	c3                   	ret    

10004d9e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004d9e:	55                   	push   ebp
10004d9f:	57                   	push   edi
10004da0:	56                   	push   esi
10004da1:	31 f6                	xor    esi,esi
10004da3:	53                   	push   ebx
10004da4:	83 ec 28             	sub    esp,0x28
10004da7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004dab:	68 22 59 00 10       	push   0x10005922	10004dac: R_386_32	.text
10004db0:	e8 fc ff ff ff       	call   10004db1 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004db1: R_386_PC32	Dbg::kprintf(char const*, ...)
10004db5:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004dbe:	e8 fc ff ff ff       	call   10004dbf <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x21>	10004dbf: R_386_PC32	NIWindow::request()
10004dc3:	83 c4 10             	add    esp,0x10
10004dc6:	31 c0                	xor    eax,eax
10004dc8:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10004dce:	7e 33                	jle    10004e03 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x65>
10004dd0:	31 ff                	xor    edi,edi
10004dd2:	39 bb 6c 01 00 00    	cmp    DWORD PTR [ebx+0x16c],edi
10004dd8:	7e 26                	jle    10004e00 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x62>
10004dda:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004de0:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004de3:	83 fa ff             	cmp    edx,0xffffffff
10004de6:	74 14                	je     10004dfc <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5e>
10004de8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004dec:	52                   	push   edx
10004ded:	56                   	push   esi
10004dee:	57                   	push   edi
10004def:	53                   	push   ebx
10004df0:	e8 fc ff ff ff       	call   10004df1 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x53>	10004df1: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004df5:	83 c4 10             	add    esp,0x10
10004df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004dfc:	40                   	inc    eax
10004dfd:	47                   	inc    edi
10004dfe:	eb d2                	jmp    10004dd2 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x34>
10004e00:	46                   	inc    esi
10004e01:	eb c5                	jmp    10004dc8 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x2a>
10004e03:	50                   	push   eax
10004e04:	50                   	push   eax
10004e05:	53                   	push   ebx
10004e06:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004e08: R_386_32	desktop
10004e0c:	e8 fc ff ff ff       	call   10004e0d <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x6f>	10004e0d: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004e11:	83 c4 2c             	add    esp,0x2c
10004e14:	31 c0                	xor    eax,eax
10004e16:	5b                   	pop    ebx
10004e17:	31 d2                	xor    edx,edx
10004e19:	5e                   	pop    esi
10004e1a:	5f                   	pop    edi
10004e1b:	5d                   	pop    ebp
10004e1c:	c3                   	ret    

10004e1d <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004e1d:	53                   	push   ebx
10004e1e:	83 ec 14             	sub    esp,0x14
10004e21:	68 44 59 00 10       	push   0x10005944	10004e22: R_386_32	.text
10004e26:	e8 fc ff ff ff       	call   10004e27 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0xa>	10004e27: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004e2f:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10004e35:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004e38:	e8 fc ff ff ff       	call   10004e39 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x1c>	10004e39: R_386_PC32	NIWindow::request()
10004e3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004e40:	e8 fc ff ff ff       	call   10004e41 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x24>	10004e41: R_386_PC32	NIWindow::drawBasicWindow()
10004e45:	31 c0                	xor    eax,eax
10004e47:	31 d2                	xor    edx,edx
10004e49:	83 c4 18             	add    esp,0x18
10004e4c:	5b                   	pop    ebx
10004e4d:	c3                   	ret    

10004e4e <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10004e4e:	55                   	push   ebp
10004e4f:	57                   	push   edi
10004e50:	56                   	push   esi
10004e51:	53                   	push   ebx
10004e52:	83 ec 38             	sub    esp,0x38
10004e55:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10004e59:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004e5f:	53                   	push   ebx
10004e60:	e8 fc ff ff ff       	call   10004e61 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10004e61: R_386_PC32	NIWindow::getEventCount()
10004e65:	83 c4 10             	add    esp,0x10
10004e68:	85 c0                	test   eax,eax
10004e6a:	74 54                	je     10004ec0 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10004e6c:	89 e6                	mov    esi,esp
10004e6e:	8d bd bc 00 00 00    	lea    edi,[ebp+0xbc]
10004e74:	50                   	push   eax
10004e75:	50                   	push   eax
10004e76:	53                   	push   ebx
10004e77:	56                   	push   esi
10004e78:	e8 fc ff ff ff       	call   10004e79 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10004e79: R_386_PC32	NIWindow::grabEvent()
10004e7d:	b9 05 00 00 00       	mov    ecx,0x5
10004e82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004e84:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10004e8a:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10004e90:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10004e96:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10004e9c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10004ea2:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10004ea8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10004eae:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10004eb4:	53                   	push   ebx
10004eb5:	e8 fc ff ff ff       	call   10004eb6 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10004eb6: R_386_PC32	NIWindow::getEventCount()
10004eba:	83 c4 10             	add    esp,0x10
10004ebd:	99                   	cdq    
10004ebe:	eb 05                	jmp    10004ec5 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10004ec0:	83 c8 ff             	or     eax,0xffffffff
10004ec3:	89 c2                	mov    edx,eax
10004ec5:	83 c4 2c             	add    esp,0x2c
10004ec8:	5b                   	pop    ebx
10004ec9:	5e                   	pop    esi
10004eca:	5f                   	pop    edi
10004ecb:	5d                   	pop    ebp
10004ecc:	c3                   	ret    

10004ecd <NiSystemCallHandler(regs*)>:
10004ecd:	53                   	push   ebx
10004ece:	83 ec 14             	sub    esp,0x14
10004ed1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004ed5:	68 63 59 00 10       	push   0x10005963	10004ed6: R_386_32	.text
10004eda:	e8 fc ff ff ff       	call   10004edb <NiSystemCallHandler(regs*)+0xe>	10004edb: R_386_PC32	Dbg::kprintf(char const*, ...)
10004edf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10004ee2:	83 c4 10             	add    esp,0x10
10004ee5:	83 f8 04             	cmp    eax,0x4
10004ee8:	74 28                	je     10004f12 <NiSystemCallHandler(regs*)+0x45>
10004eea:	77 06                	ja     10004ef2 <NiSystemCallHandler(regs*)+0x25>
10004eec:	85 c0                	test   eax,eax
10004eee:	74 13                	je     10004f03 <NiSystemCallHandler(regs*)+0x36>
10004ef0:	eb 0a                	jmp    10004efc <NiSystemCallHandler(regs*)+0x2f>
10004ef2:	83 f8 05             	cmp    eax,0x5
10004ef5:	74 2a                	je     10004f21 <NiSystemCallHandler(regs*)+0x54>
10004ef7:	83 f8 06             	cmp    eax,0x6
10004efa:	74 34                	je     10004f30 <NiSystemCallHandler(regs*)+0x63>
10004efc:	83 c8 ff             	or     eax,0xffffffff
10004eff:	89 c2                	mov    edx,eax
10004f01:	eb 3d                	jmp    10004f40 <NiSystemCallHandler(regs*)+0x73>
10004f03:	50                   	push   eax
10004f04:	50                   	push   eax
10004f05:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004f08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004f0b:	e8 fc ff ff ff       	call   10004f0c <NiSystemCallHandler(regs*)+0x3f>	10004f0c: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004f10:	eb 2b                	jmp    10004f3d <NiSystemCallHandler(regs*)+0x70>
10004f12:	50                   	push   eax
10004f13:	50                   	push   eax
10004f14:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004f17:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004f1a:	e8 fc ff ff ff       	call   10004f1b <NiSystemCallHandler(regs*)+0x4e>	10004f1b: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004f1f:	eb 1c                	jmp    10004f3d <NiSystemCallHandler(regs*)+0x70>
10004f21:	50                   	push   eax
10004f22:	50                   	push   eax
10004f23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004f26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004f29:	e8 fc ff ff ff       	call   10004f2a <NiSystemCallHandler(regs*)+0x5d>	10004f2a: R_386_PC32	NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)
10004f2e:	eb 0d                	jmp    10004f3d <NiSystemCallHandler(regs*)+0x70>
10004f30:	50                   	push   eax
10004f31:	50                   	push   eax
10004f32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004f35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004f38:	e8 fc ff ff ff       	call   10004f39 <NiSystemCallHandler(regs*)+0x6c>	10004f39: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
10004f3d:	83 c4 10             	add    esp,0x10
10004f40:	83 c4 08             	add    esp,0x8
10004f43:	5b                   	pop    ebx
10004f44:	c3                   	ret    
10004f45:	90                   	nop

10004f46 <NIWindow::postEvent(NiEvent)>:
10004f46:	57                   	push   edi
10004f47:	b9 05 00 00 00       	mov    ecx,0x5
10004f4c:	56                   	push   esi
10004f4d:	53                   	push   ebx
10004f4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004f52:	8d 74 24 14          	lea    esi,[esp+0x14]
10004f56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004f59:	6b d0 14             	imul   edx,eax,0x14
10004f5c:	40                   	inc    eax
10004f5d:	8d 7c 13 18          	lea    edi,[ebx+edx*1+0x18]
10004f61:	99                   	cdq    
10004f62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004f64:	b9 10 00 00 00       	mov    ecx,0x10
10004f69:	ff 43 0c             	inc    DWORD PTR [ebx+0xc]
10004f6c:	f7 f9                	idiv   ecx
10004f6e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
10004f71:	5b                   	pop    ebx
10004f72:	5e                   	pop    esi
10004f73:	5f                   	pop    edi
10004f74:	c3                   	ret    
10004f75:	90                   	nop

10004f76 <NIWindow::getEventCount()>:
10004f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004f7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10004f7d:	c3                   	ret    

10004f7e <NIWindow::grabEvent()>:
10004f7e:	57                   	push   edi
10004f7f:	b9 05 00 00 00       	mov    ecx,0x5
10004f84:	56                   	push   esi
10004f85:	53                   	push   ebx
10004f86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004f8a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004f8e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004f91:	6b d0 14             	imul   edx,eax,0x14
10004f94:	40                   	inc    eax
10004f95:	8d 74 13 18          	lea    esi,[ebx+edx*1+0x18]
10004f99:	99                   	cdq    
10004f9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004f9c:	ff 4b 0c             	dec    DWORD PTR [ebx+0xc]
10004f9f:	b9 10 00 00 00       	mov    ecx,0x10
10004fa4:	f7 f9                	idiv   ecx
10004fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004faa:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
10004fad:	5b                   	pop    ebx
10004fae:	5e                   	pop    esi
10004faf:	5f                   	pop    edi
10004fb0:	c2 04 00             	ret    0x4
10004fb3:	90                   	nop

10004fb4 <NIWindow::invalidate()>:
10004fb4:	53                   	push   ebx
10004fb5:	83 ec 08             	sub    esp,0x8
10004fb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004fbc:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
10004fc3:	74 23                	je     10004fe8 <NIWindow::invalidate()+0x34>
10004fc5:	83 bb 60 01 00 00 00 	cmp    DWORD PTR [ebx+0x160],0x0
10004fcc:	74 1a                	je     10004fe8 <NIWindow::invalidate()+0x34>
10004fce:	83 ec 0c             	sub    esp,0xc
10004fd1:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004fd4:	e8 fc ff ff ff       	call   10004fd5 <NIWindow::invalidate()+0x21>	10004fd5: R_386_PC32	free
10004fd9:	59                   	pop    ecx
10004fda:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
10004fe0:	e8 fc ff ff ff       	call   10004fe1 <NIWindow::invalidate()+0x2d>	10004fe1: R_386_PC32	free
10004fe5:	83 c4 10             	add    esp,0x10
10004fe8:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
10004ff2:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10004ffc:	c6 83 58 01 00 00 00 	mov    BYTE PTR [ebx+0x158],0x0
10005003:	83 c4 08             	add    esp,0x8
10005006:	5b                   	pop    ebx
10005007:	c3                   	ret    

10005008 <NIWindow::putpixel(int, int, unsigned int)>:
10005008:	56                   	push   esi
10005009:	53                   	push   ebx
1000500a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000500e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005012:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10005015:	0f af 83 6c 01 00 00 	imul   eax,DWORD PTR [ebx+0x16c]
1000501c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005020:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10005024:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005027:	83 fe 04             	cmp    esi,0x4
1000502a:	75 05                	jne    10005031 <NIWindow::putpixel(int, int, unsigned int)+0x29>
1000502c:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
1000502f:	eb 0e                	jmp    1000503f <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005031:	83 fe 02             	cmp    esi,0x2
10005034:	75 06                	jne    1000503c <NIWindow::putpixel(int, int, unsigned int)+0x34>
10005036:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
1000503a:	eb 03                	jmp    1000503f <NIWindow::putpixel(int, int, unsigned int)+0x37>
1000503c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
1000503f:	5b                   	pop    ebx
10005040:	5e                   	pop    esi
10005041:	c3                   	ret    

10005042 <NIWindow::drawBasicWindow()>:
10005042:	55                   	push   ebp
10005043:	57                   	push   edi
10005044:	56                   	push   esi
10005045:	31 f6                	xor    esi,esi
10005047:	53                   	push   ebx
10005048:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
1000504c:	39 b5 70 01 00 00    	cmp    DWORD PTR [ebp+0x170],esi
10005052:	7e 31                	jle    10005085 <NIWindow::drawBasicWindow()+0x43>
10005054:	31 db                	xor    ebx,ebx
10005056:	83 fe 19             	cmp    esi,0x19
10005059:	0f 9e c3             	setle  bl
1000505c:	31 ff                	xor    edi,edi
1000505e:	4b                   	dec    ebx
1000505f:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10005065:	81 c3 ff ff ff 00    	add    ebx,0xffffff
1000506b:	39 bd 6c 01 00 00    	cmp    DWORD PTR [ebp+0x16c],edi
10005071:	7e 0f                	jle    10005082 <NIWindow::drawBasicWindow()+0x40>
10005073:	53                   	push   ebx
10005074:	56                   	push   esi
10005075:	57                   	push   edi
10005076:	47                   	inc    edi
10005077:	55                   	push   ebp
10005078:	e8 fc ff ff ff       	call   10005079 <NIWindow::drawBasicWindow()+0x37>	10005079: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000507d:	83 c4 10             	add    esp,0x10
10005080:	eb e9                	jmp    1000506b <NIWindow::drawBasicWindow()+0x29>
10005082:	46                   	inc    esi
10005083:	eb c7                	jmp    1000504c <NIWindow::drawBasicWindow()+0xa>
10005085:	5b                   	pop    ebx
10005086:	5e                   	pop    esi
10005087:	5f                   	pop    edi
10005088:	5d                   	pop    ebp
10005089:	c3                   	ret    

1000508a <NIWindow::rerender()>:
1000508a:	57                   	push   edi
1000508b:	56                   	push   esi
1000508c:	53                   	push   ebx
1000508d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005091:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
10005098:	74 0c                	je     100050a6 <NIWindow::rerender()+0x1c>
1000509a:	83 ec 0c             	sub    esp,0xc
1000509d:	53                   	push   ebx
1000509e:	e8 fc ff ff ff       	call   1000509f <NIWindow::rerender()+0x15>	1000509f: R_386_PC32	NIWindow::invalidate()
100050a3:	83 c4 10             	add    esp,0x10
100050a6:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
100050ac:	83 ec 0c             	sub    esp,0xc
100050af:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
100050b5:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100050bc:	50                   	push   eax
100050bd:	e8 fc ff ff ff       	call   100050be <NIWindow::rerender()+0x34>	100050be: R_386_PC32	malloc
100050c2:	0f af b3 6c 01 00 00 	imul   esi,DWORD PTR [ebx+0x16c]
100050c9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100050cf:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
100050d3:	89 34 24             	mov    DWORD PTR [esp],esi
100050d6:	e8 fc ff ff ff       	call   100050d7 <NIWindow::rerender()+0x4d>	100050d7: R_386_PC32	malloc
100050db:	83 c4 10             	add    esp,0x10
100050de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100050e1:	31 c0                	xor    eax,eax
100050e3:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
100050e9:	7e 7f                	jle    1000516a <NIWindow::rerender()+0xe0>
100050eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100050f2:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
100050f8:	01 d6                	add    esi,edx
100050fa:	83 f8 06             	cmp    eax,0x6
100050fd:	7f 1e                	jg     1000511d <NIWindow::rerender()+0x93>
100050ff:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10005102: R_386_32	curveLookup7
10005106:	66 89 0e             	mov    WORD PTR [esi],cx
10005109:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
1000510f:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005112: R_386_32	curveLookup7
10005116:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
1000511b:	eb 47                	jmp    10005164 <NIWindow::rerender()+0xda>
1000511d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005123:	8d 79 fa             	lea    edi,[ecx-0x6]
10005126:	39 c7                	cmp    edi,eax
10005128:	7f 28                	jg     10005152 <NIWindow::rerender()+0xc8>
1000512a:	29 c1                	sub    ecx,eax
1000512c:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	1000512f: R_386_32	curveLookup7
10005133:	66 89 0e             	mov    WORD PTR [esi],cx
10005136:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
1000513c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10005142:	29 c1                	sub    ecx,eax
10005144:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005147: R_386_32	curveLookup7
1000514b:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10005150:	eb 12                	jmp    10005164 <NIWindow::rerender()+0xda>
10005152:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10005157:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
1000515d:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10005164:	40                   	inc    eax
10005165:	e9 79 ff ff ff       	jmp    100050e3 <NIWindow::rerender()+0x59>
1000516a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
10005171:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10005175:	5b                   	pop    ebx
10005176:	5e                   	pop    esi
10005177:	5f                   	pop    edi
10005178:	e9 c5 fe ff ff       	jmp    10005042 <NIWindow::drawBasicWindow()>
1000517d:	90                   	nop

1000517e <NIWindow::changeContext(NIContext*, int, int)>:
1000517e:	55                   	push   ebp
1000517f:	57                   	push   edi
10005180:	56                   	push   esi
10005181:	53                   	push   ebx
10005182:	83 ec 18             	sub    esp,0x18
10005185:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005189:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000518d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10005191:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10005195:	53                   	push   ebx
10005196:	e8 fc ff ff ff       	call   10005197 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10005197: R_386_PC32	NIWindow::invalidate()
1000519b:	89 33                	mov    DWORD PTR [ebx],esi
1000519d:	89 ab 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ebp
100051a3:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100051a9:	83 c4 10             	add    esp,0x10
100051ac:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
100051b2:	83 f8 08             	cmp    eax,0x8
100051b5:	7f 09                	jg     100051c0 <NIWindow::changeContext(NIContext*, int, int)+0x42>
100051b7:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
100051be:	eb 15                	jmp    100051d5 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100051c0:	83 f8 10             	cmp    eax,0x10
100051c3:	7f 09                	jg     100051ce <NIWindow::changeContext(NIContext*, int, int)+0x50>
100051c5:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
100051cc:	eb 07                	jmp    100051d5 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100051ce:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
100051d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100051d9:	83 c4 0c             	add    esp,0xc
100051dc:	5b                   	pop    ebx
100051dd:	5e                   	pop    esi
100051de:	5f                   	pop    edi
100051df:	5d                   	pop    ebp
100051e0:	e9 a5 fe ff ff       	jmp    1000508a <NIWindow::rerender()>
100051e5:	90                   	nop

100051e6 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
100051e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100051ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100051ee:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
100051f5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
100051fb:	c7 80 88 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x188],0x0
10005205:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10005209:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10005210:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10005216:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
10005220:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
1000522a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10005231:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10005238:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000523f:	e9 3a ff ff ff       	jmp    1000517e <NIWindow::changeContext(NIContext*, int, int)>

10005244 <NIWindow::request()>:
10005244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005248:	80 b8 58 01 00 00 00 	cmp    BYTE PTR [eax+0x158],0x0
1000524f:	75 05                	jne    10005256 <NIWindow::request()+0x12>
10005251:	e9 34 fe ff ff       	jmp    1000508a <NIWindow::rerender()>
10005256:	c3                   	ret    
10005257:	90                   	nop

10005258 <NIWindow::SHADOW_TEST()>:
10005258:	55                   	push   ebp
10005259:	57                   	push   edi
1000525a:	56                   	push   esi
1000525b:	53                   	push   ebx
1000525c:	83 ec 28             	sub    esp,0x28
1000525f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10005263:	53                   	push   ebx
10005264:	e8 fc ff ff ff       	call   10005265 <NIWindow::SHADOW_TEST()+0xd>	10005265: R_386_PC32	NIWindow::request()
10005269:	83 c4 10             	add    esp,0x10
1000526c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10005272:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
10005278:	74 10                	je     1000528a <NIWindow::SHADOW_TEST()+0x32>
1000527a:	83 ec 0c             	sub    esp,0xc
1000527d:	68 78 59 00 10       	push   0x10005978	1000527e: R_386_32	.text
10005282:	e8 fc ff ff ff       	call   10005283 <NIWindow::SHADOW_TEST()+0x2b>	10005283: R_386_PC32	KePanic(char const*)
10005287:	83 c4 10             	add    esp,0x10
1000528a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000528e:	0f 85 3a 01 00 00    	jne    100053ce <NIWindow::SHADOW_TEST()+0x176>
10005294:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
1000529c:	31 ff                	xor    edi,edi
1000529e:	39 bb 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],edi
100052a4:	0f 8e 24 01 00 00    	jle    100053ce <NIWindow::SHADOW_TEST()+0x176>
100052aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
100052b0:	8d 04 b8             	lea    eax,[eax+edi*4]
100052b3:	0f b7 30             	movzx  esi,WORD PTR [eax]
100052b6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100052ba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100052be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100052c2:	89 34 24             	mov    DWORD PTR [esp],esi
100052c5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
100052cb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
100052d1:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
100052d5:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100052d8:	0f 8e da 00 00 00    	jle    100053b8 <NIWindow::SHADOW_TEST()+0x160>
100052de:	83 ff 05             	cmp    edi,0x5
100052e1:	7e 1f                	jle    10005302 <NIWindow::SHADOW_TEST()+0xaa>
100052e3:	8d 41 fb             	lea    eax,[ecx-0x5]
100052e6:	39 f8                	cmp    eax,edi
100052e8:	7e 18                	jle    10005302 <NIWindow::SHADOW_TEST()+0xaa>
100052ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100052ee:	83 c0 05             	add    eax,0x5
100052f1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100052f4:	7d 0c                	jge    10005302 <NIWindow::SHADOW_TEST()+0xaa>
100052f6:	8d 45 fb             	lea    eax,[ebp-0x5]
100052f9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100052fc:	0f 8f ae 00 00 00    	jg     100053b0 <NIWindow::SHADOW_TEST()+0x158>
10005302:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10005306:	be ea 01 00 00       	mov    esi,0x1ea
1000530b:	29 f9                	sub    ecx,edi
1000530d:	89 f0                	mov    eax,esi
1000530f:	83 c1 04             	add    ecx,0x4
10005312:	99                   	cdq    
10005313:	f7 f9                	idiv   ecx
10005315:	89 c1                	mov    ecx,eax
10005317:	89 f0                	mov    eax,esi
10005319:	99                   	cdq    
1000531a:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
1000531e:	83 f8 0a             	cmp    eax,0xa
10005321:	7d 05                	jge    10005328 <NIWindow::SHADOW_TEST()+0xd0>
10005323:	b8 0a 00 00 00       	mov    eax,0xa
10005328:	39 c1                	cmp    ecx,eax
1000532a:	7d 02                	jge    1000532e <NIWindow::SHADOW_TEST()+0xd6>
1000532c:	89 c1                	mov    ecx,eax
1000532e:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10005331:	b8 ea 01 00 00       	mov    eax,0x1ea
10005336:	83 c5 04             	add    ebp,0x4
10005339:	99                   	cdq    
1000533a:	f7 fd                	idiv   ebp
1000533c:	89 c6                	mov    esi,eax
1000533e:	83 f8 0a             	cmp    eax,0xa
10005341:	7d 05                	jge    10005348 <NIWindow::SHADOW_TEST()+0xf0>
10005343:	be 0a 00 00 00       	mov    esi,0xa
10005348:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000534b:	8d 68 05             	lea    ebp,[eax+0x5]
1000534e:	b8 ea 01 00 00       	mov    eax,0x1ea
10005353:	99                   	cdq    
10005354:	f7 fd                	idiv   ebp
10005356:	39 c6                	cmp    esi,eax
10005358:	7d 02                	jge    1000535c <NIWindow::SHADOW_TEST()+0x104>
1000535a:	89 c6                	mov    esi,eax
1000535c:	89 f0                	mov    eax,esi
1000535e:	89 ca                	mov    edx,ecx
10005360:	0f af c6             	imul   eax,esi
10005363:	0f af d1             	imul   edx,ecx
10005366:	0f af f1             	imul   esi,ecx
10005369:	01 d0                	add    eax,edx
1000536b:	8d 04 c6             	lea    eax,[esi+eax*8]
1000536e:	c1 f8 08             	sar    eax,0x8
10005371:	83 f8 66             	cmp    eax,0x66
10005374:	7e 4c                	jle    100053c2 <NIWindow::SHADOW_TEST()+0x16a>
10005376:	8d 50 9a             	lea    edx,[eax-0x66]
10005379:	d1 fa                	sar    edx,1
1000537b:	8d 42 66             	lea    eax,[edx+0x66]
1000537e:	83 f8 73             	cmp    eax,0x73
10005381:	7e 3f                	jle    100053c2 <NIWindow::SHADOW_TEST()+0x16a>
10005383:	83 ea 0d             	sub    edx,0xd
10005386:	c1 fa 02             	sar    edx,0x2
10005389:	8d 42 73             	lea    eax,[edx+0x73]
1000538c:	83 f8 7f             	cmp    eax,0x7f
1000538f:	7f 1f                	jg     100053b0 <NIWindow::SHADOW_TEST()+0x158>
10005391:	50                   	push   eax
10005392:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005398:	01 f8                	add    eax,edi
1000539a:	50                   	push   eax
1000539b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000539f:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
100053a5:	50                   	push   eax
100053a6:	ff 33                	push   DWORD PTR [ebx]
100053a8:	e8 fc ff ff ff       	call   100053a9 <NIWindow::SHADOW_TEST()+0x151>	100053a9: R_386_PC32	NIContext::drvDarken4(int, int, int)
100053ad:	83 c4 10             	add    esp,0x10
100053b0:	ff 04 24             	inc    DWORD PTR [esp]
100053b3:	e9 0d ff ff ff       	jmp    100052c5 <NIWindow::SHADOW_TEST()+0x6d>
100053b8:	47                   	inc    edi
100053b9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100053bd:	e9 dc fe ff ff       	jmp    1000529e <NIWindow::SHADOW_TEST()+0x46>
100053c2:	83 f8 0a             	cmp    eax,0xa
100053c5:	7d ca                	jge    10005391 <NIWindow::SHADOW_TEST()+0x139>
100053c7:	b8 0a 00 00 00       	mov    eax,0xa
100053cc:	eb c3                	jmp    10005391 <NIWindow::SHADOW_TEST()+0x139>
100053ce:	83 c4 1c             	add    esp,0x1c
100053d1:	5b                   	pop    ebx
100053d2:	5e                   	pop    esi
100053d3:	5f                   	pop    edi
100053d4:	5d                   	pop    ebp
100053d5:	c3                   	ret    

100053d6 <NIWindow::realdraw()>:
100053d6:	55                   	push   ebp
100053d7:	57                   	push   edi
100053d8:	56                   	push   esi
100053d9:	53                   	push   ebx
100053da:	83 ec 18             	sub    esp,0x18
100053dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100053e1:	53                   	push   ebx
100053e2:	e8 fc ff ff ff       	call   100053e3 <NIWindow::realdraw()+0xd>	100053e3: R_386_PC32	NIWindow::request()
100053e7:	83 c4 10             	add    esp,0x10
100053ea:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
100053f0:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
100053f6:	74 10                	je     10005408 <NIWindow::realdraw()+0x32>
100053f8:	83 ec 0c             	sub    esp,0xc
100053fb:	68 78 59 00 10       	push   0x10005978	100053fc: R_386_32	.text
10005400:	e8 fc ff ff ff       	call   10005401 <NIWindow::realdraw()+0x2b>	10005401: R_386_PC32	KePanic(char const*)
10005405:	83 c4 10             	add    esp,0x10
10005408:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000540c:	75 55                	jne    10005463 <NIWindow::realdraw()+0x8d>
1000540e:	31 f6                	xor    esi,esi
10005410:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10005416:	7e 4b                	jle    10005463 <NIWindow::realdraw()+0x8d>
10005418:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
1000541e:	8d 04 b0             	lea    eax,[eax+esi*4]
10005421:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10005424:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005428:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
1000542e:	89 c2                	mov    edx,eax
10005430:	29 fa                	sub    edx,edi
10005432:	39 ea                	cmp    edx,ebp
10005434:	7e 2a                	jle    10005460 <NIWindow::realdraw()+0x8a>
10005436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005439:	0f af c6             	imul   eax,esi
1000543c:	01 e8                	add    eax,ebp
1000543e:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005441:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005447:	01 f0                	add    eax,esi
10005449:	50                   	push   eax
1000544a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10005450:	01 e8                	add    eax,ebp
10005452:	45                   	inc    ebp
10005453:	50                   	push   eax
10005454:	ff 33                	push   DWORD PTR [ebx]
10005456:	e8 fc ff ff ff       	call   10005457 <NIWindow::realdraw()+0x81>	10005457: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
1000545b:	83 c4 10             	add    esp,0x10
1000545e:	eb c8                	jmp    10005428 <NIWindow::realdraw()+0x52>
10005460:	46                   	inc    esi
10005461:	eb ad                	jmp    10005410 <NIWindow::realdraw()+0x3a>
10005463:	83 c4 0c             	add    esp,0xc
10005466:	5b                   	pop    ebx
10005467:	5e                   	pop    esi
10005468:	5f                   	pop    edi
10005469:	5d                   	pop    ebp
1000546a:	c3                   	ret    
1000546b:	90                   	nop

1000546c <List<NIWindow*>::insertAtHead(NIWindow*)>:
1000546c:	53                   	push   ebx
1000546d:	83 ec 14             	sub    esp,0x14
10005470:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005474:	6a 0c                	push   0xc
10005476:	e8 fc ff ff ff       	call   10005477 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005477: R_386_PC32	malloc
1000547b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000547f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005486:	89 10                	mov    DWORD PTR [eax],edx
10005488:	83 c4 10             	add    esp,0x10
1000548b:	8b 13                	mov    edx,DWORD PTR [ebx]
1000548d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005490:	85 d2                	test   edx,edx
10005492:	74 05                	je     10005499 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005494:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005497:	eb 03                	jmp    1000549c <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10005499:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000549c:	89 03                	mov    DWORD PTR [ebx],eax
1000549e:	83 c4 08             	add    esp,0x8
100054a1:	5b                   	pop    ebx
100054a2:	c3                   	ret    
100054a3:	90                   	nop

100054a4 <List<NIWindow*>::deleteElement(NIWindow*&)>:
100054a4:	57                   	push   edi
100054a5:	56                   	push   esi
100054a6:	53                   	push   ebx
100054a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100054ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100054af:	8b 19                	mov    ebx,DWORD PTR [ecx]
100054b1:	85 db                	test   ebx,ebx
100054b3:	74 5e                	je     10005513 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100054b5:	8b 30                	mov    esi,DWORD PTR [eax]
100054b7:	89 da                	mov    edx,ebx
100054b9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100054bc:	8b 3a                	mov    edi,DWORD PTR [edx]
100054be:	85 c0                	test   eax,eax
100054c0:	74 08                	je     100054ca <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100054c2:	39 f7                	cmp    edi,esi
100054c4:	73 04                	jae    100054ca <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100054c6:	89 c2                	mov    edx,eax
100054c8:	eb ef                	jmp    100054b9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
100054ca:	39 f7                	cmp    edi,esi
100054cc:	75 45                	jne    10005513 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100054ce:	39 d3                	cmp    ebx,edx
100054d0:	75 18                	jne    100054ea <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
100054d2:	89 01                	mov    DWORD PTR [ecx],eax
100054d4:	85 c0                	test   eax,eax
100054d6:	75 09                	jne    100054e1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
100054d8:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100054df:	eb 1e                	jmp    100054ff <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100054e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100054e8:	eb 15                	jmp    100054ff <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100054ea:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100054ed:	85 c0                	test   eax,eax
100054ef:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100054f2:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100054f5:	74 05                	je     100054fc <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100054f7:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100054fa:	eb 03                	jmp    100054ff <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100054fc:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100054ff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005507:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000550b:	5b                   	pop    ebx
1000550c:	5e                   	pop    esi
1000550d:	5f                   	pop    edi
1000550e:	e9 fc ff ff ff       	jmp    1000550f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	1000550f: R_386_PC32	operator delete(void*, unsigned long)
10005513:	5b                   	pop    ebx
10005514:	5e                   	pop    esi
10005515:	5f                   	pop    edi
10005516:	c3                   	ret    
10005517:	43                   	inc    ebx
10005518:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000551a:	42                   	inc    edx
1000551b:	61                   	popa   
1000551c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000551d:	61                   	popa   
1000551e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000551f:	61                   	popa   
10005520:	2f                   	das    
10005521:	53                   	push   ebx
10005522:	79 73                	jns    10005597 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005524:	74 65                	je     1000558b <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005526:	6d                   	ins    DWORD PTR es:[edi],dx
10005527:	2f                   	das    
10005528:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005529:	65 77 67             	gs ja  10005593 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
1000552c:	75 69                	jne    10005597 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000552e:	2e 65 78 65          	cs gs js 10005597 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005532:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005535:	4e                   	dec    esi
10005536:	43                   	inc    ebx
10005537:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
1000553a:	4e                   	dec    esi
1000553b:	32 00                	xor    al,BYTE PTR [eax]
1000553d:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10005540:	53                   	push   ebx
10005541:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005544:	43                   	inc    ebx
10005545:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005546:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005547:	74 65                	je     100055ae <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
10005549:	78 74                	js     100055bf <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
1000554b:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000554d:	64 72 76             	fs jb  100055c6 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
10005550:	52                   	push   edx
10005551:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005553:	64 65 72 54          	fs gs jb 100055ab <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
10005557:	54                   	push   esp
10005558:	46                   	inc    esi
10005559:	34 00                	xor    al,0x0
1000555b:	43                   	inc    ebx
1000555c:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000555e:	42                   	inc    edx
1000555f:	61                   	popa   
10005560:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005561:	61                   	popa   
10005562:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005563:	61                   	popa   
10005564:	2f                   	das    
10005565:	46                   	inc    esi
10005566:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005567:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005568:	74 73                	je     100055dd <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
1000556a:	2f                   	das    
1000556b:	53                   	push   ebx
1000556c:	46                   	inc    esi
1000556d:	4e                   	dec    esi
1000556e:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10005571:	4e                   	dec    esi
10005572:	4e                   	dec    esi
10005573:	4f                   	dec    edi
10005574:	54                   	push   esp
10005575:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005579:	44                   	inc    esp
1000557a:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000557d:	4e                   	dec    esi
1000557e:	54                   	push   esp
1000557f:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005583:	45                   	inc    ebp
10005584:	43                   	inc    ebx
10005585:	54                   	push   esp
10005586:	4f                   	dec    edi
10005587:	52                   	push   edx
10005588:	59                   	pop    ecx
10005589:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
1000558c:	2f                   	das    
1000558d:	42                   	inc    edx
1000558e:	61                   	popa   
1000558f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005590:	61                   	popa   
10005591:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005592:	61                   	popa   
10005593:	2f                   	das    
10005594:	46                   	inc    esi
10005595:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005596:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005597:	74 73                	je     1000560c <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
10005599:	2f                   	das    
1000559a:	53                   	push   ebx
1000559b:	46                   	inc    esi
1000559c:	4e                   	dec    esi
1000559d:	2f                   	das    
1000559e:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
100055a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
100055a2:	74 20                	je     100055c4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
100055a4:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100055ab:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100055b2:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
100055b6:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
100055bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
100055bd:	74 3a                	je     100055f9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100055bf:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100055c5:	53                   	push   ebx
100055c6:	46                   	inc    esi
100055c7:	4e                   	dec    esi
100055c8:	5f                   	pop    edi
100055c9:	52                   	push   edx
100055ca:	45                   	inc    ebp
100055cb:	53                   	push   ebx
100055cc:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100055d2:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
100055d5:	6d                   	ins    DWORD PTR es:[edi],dx
100055d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
100055d7:	72 79                	jb     10005652 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ae>
100055d9:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
100055dc:	6c                   	ins    BYTE PTR es:[edi],dx
100055dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
100055de:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
100055e1:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
100055e8:	6f                   	outs   dx,DWORD PTR ds:[esi]
100055e9:	72 00                	jb     100055eb <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
100055eb:	42                   	inc    edx
100055ec:	61                   	popa   
100055ed:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
100055f1:	6c                   	ins    BYTE PTR es:[edi],dx
100055f2:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
100055f6:	72 6d                	jb     10005665 <_ssfn__compute_huffman_codes::length_dezigzag+0x5>
100055f8:	61                   	popa   
100055f9:	74 00                	je     100055fb <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
100055fb:	4e                   	dec    esi
100055fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
100055fd:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005600:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005601:	74 20                	je     10005623 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
10005603:	66 61                	popaw  
10005605:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10005608:	66 6f                	outs   dx,WORD PTR ds:[esi]
1000560a:	75 6e                	jne    1000567a <_ssfn__compute_huffman_codes::length_dezigzag+0x1a>
1000560c:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10005610:	76 61                	jbe    10005673 <_ssfn__compute_huffman_codes::length_dezigzag+0x13>
10005612:	6c                   	ins    BYTE PTR es:[edi],dx
10005613:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
1000561b:	20 76 61             	and    BYTE PTR [esi+0x61],dh
1000561e:	6c                   	ins    BYTE PTR es:[edi],dx
1000561f:	75 65                	jne    10005686 <_ssfn__zdist_extra+0x6>
10005621:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005624:	76 61                	jbe    10005687 <_ssfn__zdist_extra+0x7>
10005626:	6c                   	ins    BYTE PTR es:[edi],dx
10005627:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
1000562f:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005632:	76 61                	jbe    10005695 <_ssfn__zdist_extra+0x15>
10005634:	6c                   	ins    BYTE PTR es:[edi],dx
10005635:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
1000563d:	47                   	inc    edi
1000563e:	6c                   	ins    BYTE PTR es:[edi],dx
1000563f:	79 70                	jns    100056b1 <_ssfn__zdist_extra+0x31>
10005641:	68 20 6e 6f 74       	push   0x746f6e20
10005646:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005649:	75 6e                	jne    100056b9 <_ssfn__zdist_extra+0x39>
1000564b:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
1000564f:	66 90                	xchg   ax,ax
10005651:	66 90                	xchg   ax,ax
10005653:	66 90                	xchg   ax,ax
10005655:	66 90                	xchg   ax,ax
10005657:	66 90                	xchg   ax,ax
10005659:	66 90                	xchg   ax,ax
1000565b:	66 90                	xchg   ax,ax
1000565d:	66 90                	xchg   ax,ax
1000565f:	90                   	nop

10005660 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005660:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005670:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005680 <_ssfn__zdist_extra>:
	...
10005690:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
100056a0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
100056b0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
100056c0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
100056d0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
100056e0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
100056f0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005700 <_ssfn__zdist_base>:
10005700:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005710:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005720:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005730:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005740:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005750:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005760:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005770:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005780 <_ssfn__zlength_extra>:
	...
100057a0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
100057b0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
100057c0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
100057d0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
100057e0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005800 <_ssfn__zlength_base>:
10005800:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005810:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005820:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005830:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005840:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005850:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005860:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005870:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005880:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005890:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
100058a0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
100058b0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
100058c0:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
100058d0:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
100058e0:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
100058f0:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005900:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005910:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005920:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005930:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005940:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005950:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005960:	72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c 48     r..NiSystemCallH
10005970:	61 6e 64 6c 65 72 0a 00 41 53 53 45 52 54 49 4f     andler..ASSERTIO
10005980:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
