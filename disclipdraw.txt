
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10000080:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000082: R_386_32	desktop
10000086:	e8 fc ff ff ff       	call   10000087 <NiMain(void*)+0x87>	10000087: R_386_PC32	malloc
1000008b:	59                   	pop    ecx
1000008c:	89 c5                	mov    ebp,eax
1000008e:	5b                   	pop    ebx
1000008f:	6a 01                	push   0x1
10000091:	6a 01                	push   0x1
10000093:	6a 00                	push   0x0
10000095:	6a 00                	push   0x0
10000097:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000099: R_386_32	ctxt
1000009d:	50                   	push   eax
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000a3:	83 c4 14             	add    esp,0x14
100000a6:	6a 40                	push   0x40
100000a8:	e8 fc ff ff ff       	call   100000a9 <NiMain(void*)+0xa9>	100000a9: R_386_PC32	malloc
100000ad:	5e                   	pop    esi
100000ae:	89 c7                	mov    edi,eax
100000b0:	58                   	pop    eax
100000b1:	68 40 01 00 00       	push   0x140
100000b6:	68 90 01 00 00       	push   0x190
100000bb:	6a 32                	push   0x32
100000bd:	6a 32                	push   0x32
100000bf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000c1: R_386_32	ctxt
100000c5:	57                   	push   edi
100000c6:	e8 fc ff ff ff       	call   100000c7 <NiMain(void*)+0xc7>	100000c7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000cb:	83 c4 14             	add    esp,0x14
100000ce:	6a 40                	push   0x40
100000d0:	e8 fc ff ff ff       	call   100000d1 <NiMain(void*)+0xd1>	100000d1: R_386_PC32	malloc
100000d5:	89 c6                	mov    esi,eax
100000d7:	58                   	pop    eax
100000d8:	5a                   	pop    edx
100000d9:	68 7c 01 00 00       	push   0x17c
100000de:	68 f4 01 00 00       	push   0x1f4
100000e3:	68 96 00 00 00       	push   0x96
100000e8:	68 c8 00 00 00       	push   0xc8
100000ed:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ef: R_386_32	ctxt
100000f3:	56                   	push   esi
100000f4:	e8 fc ff ff ff       	call   100000f5 <NiMain(void*)+0xf5>	100000f5: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000f9:	83 c4 14             	add    esp,0x14
100000fc:	6a 40                	push   0x40
100000fe:	e8 fc ff ff ff       	call   100000ff <NiMain(void*)+0xff>	100000ff: R_386_PC32	malloc
10000103:	59                   	pop    ecx
10000104:	89 c3                	mov    ebx,eax
10000106:	58                   	pop    eax
10000107:	68 af 00 00 00       	push   0xaf
1000010c:	68 0e 01 00 00       	push   0x10e
10000111:	68 90 01 00 00       	push   0x190
10000116:	6a 7d                	push   0x7d
10000118:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000011a: R_386_32	ctxt
1000011e:	53                   	push   ebx
1000011f:	e8 fc ff ff ff       	call   10000120 <NiMain(void*)+0x120>	10000120: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000124:	83 c4 18             	add    esp,0x18
10000127:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
1000012b:	55                   	push   ebp
1000012c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012e: R_386_32	desktop
10000132:	e8 fc ff ff ff       	call   10000133 <NiMain(void*)+0x133>	10000133: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000137:	58                   	pop    eax
10000138:	5a                   	pop    edx
10000139:	57                   	push   edi
1000013a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000013c: R_386_32	desktop
10000140:	e8 fc ff ff ff       	call   10000141 <NiMain(void*)+0x141>	10000141: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000145:	59                   	pop    ecx
10000146:	5f                   	pop    edi
10000147:	56                   	push   esi
10000148:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000014a: R_386_32	desktop
1000014e:	e8 fc ff ff ff       	call   1000014f <NiMain(void*)+0x14f>	1000014f: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000153:	5d                   	pop    ebp
10000154:	58                   	pop    eax
10000155:	53                   	push   ebx
10000156:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000158: R_386_32	desktop
1000015c:	e8 fc ff ff ff       	call   1000015d <NiMain(void*)+0x15d>	1000015d: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000161:	a1 00 00 00 00       	mov    eax,ds:0x0	10000162: R_386_32	desktop
10000166:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000016a:	83 c4 1c             	add    esp,0x1c
1000016d:	5b                   	pop    ebx
1000016e:	5e                   	pop    esi
1000016f:	5f                   	pop    edi
10000170:	5d                   	pop    ebp
10000171:	e9 fc ff ff ff       	jmp    10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::completeRefresh()
10000176:	66 90                	xchg   ax,ax

10000178 <NiBegin(void*)>:
10000178:	83 ec 18             	sub    esp,0x18
1000017b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000017f:	e8 fc ff ff ff       	call   10000180 <NiBegin(void*)+0x8>	10000180: R_386_PC32	NiMain(void*)
10000184:	83 c4 1c             	add    esp,0x1c
10000187:	c3                   	ret    

10000188 <_ssfn__bitreverse16>:
10000188:	89 c2                	mov    edx,eax
1000018a:	01 c0                	add    eax,eax
1000018c:	d1 fa                	sar    edx,1
1000018e:	25 aa aa 00 00       	and    eax,0xaaaa
10000193:	81 e2 55 55 00 00    	and    edx,0x5555
10000199:	09 c2                	or     edx,eax
1000019b:	89 d0                	mov    eax,edx
1000019d:	c1 e2 02             	shl    edx,0x2
100001a0:	c1 f8 02             	sar    eax,0x2
100001a3:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001a9:	25 33 33 00 00       	and    eax,0x3333
100001ae:	09 d0                	or     eax,edx
100001b0:	89 c2                	mov    edx,eax
100001b2:	c1 e0 04             	shl    eax,0x4
100001b5:	c1 fa 04             	sar    edx,0x4
100001b8:	25 f0 f0 00 00       	and    eax,0xf0f0
100001bd:	81 e2 0f 0f 00 00    	and    edx,0xf0f
100001c3:	09 c2                	or     edx,eax
100001c5:	89 d1                	mov    ecx,edx
100001c7:	c1 e2 08             	shl    edx,0x8
100001ca:	c1 f9 08             	sar    ecx,0x8
100001cd:	0f b7 c2             	movzx  eax,dx
100001d0:	09 c8                	or     eax,ecx
100001d2:	c3                   	ret    

100001d3 <_ssfn__zhuffman_decode>:
100001d3:	55                   	push   ebp
100001d4:	57                   	push   edi
100001d5:	56                   	push   esi
100001d6:	53                   	push   ebx
100001d7:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
100001db:	7f 1d                	jg     100001fa <_ssfn__zhuffman_decode+0x27>
100001dd:	8b 18                	mov    ebx,DWORD PTR [eax]
100001df:	8d 4b 01             	lea    ecx,[ebx+0x1]
100001e2:	89 08                	mov    DWORD PTR [eax],ecx
100001e4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
100001e7:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
100001ea:	d3 e3                	shl    ebx,cl
100001ec:	83 c1 08             	add    ecx,0x8
100001ef:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
100001f2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100001f5:	83 f9 18             	cmp    ecx,0x18
100001f8:	eb e1                	jmp    100001db <_ssfn__zhuffman_decode+0x8>
100001fa:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
100001fd:	89 f9                	mov    ecx,edi
100001ff:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000205:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000209:	89 cb                	mov    ebx,ecx
1000020b:	85 c9                	test   ecx,ecx
1000020d:	74 15                	je     10000224 <_ssfn__zhuffman_decode+0x51>
1000020f:	c1 f9 09             	sar    ecx,0x9
10000212:	89 da                	mov    edx,ebx
10000214:	d3 ef                	shr    edi,cl
10000216:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000219:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
1000021c:	81 e2 ff 01 00 00    	and    edx,0x1ff
10000222:	eb 58                	jmp    1000027c <_ssfn__zhuffman_decode+0xa9>
10000224:	89 d5                	mov    ebp,edx
10000226:	89 c3                	mov    ebx,eax
10000228:	be 0a 00 00 00       	mov    esi,0xa
1000022d:	89 f8                	mov    eax,edi
1000022f:	e8 54 ff ff ff       	call   10000188 <_ssfn__bitreverse16>
10000234:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
1000023b:	7c 03                	jl     10000240 <_ssfn__zhuffman_decode+0x6d>
1000023d:	46                   	inc    esi
1000023e:	eb f4                	jmp    10000234 <_ssfn__zhuffman_decode+0x61>
10000240:	83 ca ff             	or     edx,0xffffffff
10000243:	83 fe 10             	cmp    esi,0x10
10000246:	74 34                	je     1000027c <_ssfn__zhuffman_decode+0xa9>
10000248:	8d 14 36             	lea    edx,[esi+esi*1]
1000024b:	b9 10 00 00 00       	mov    ecx,0x10
10000250:	01 ea                	add    edx,ebp
10000252:	29 f1                	sub    ecx,esi
10000254:	d3 f8                	sar    eax,cl
10000256:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
1000025d:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
10000264:	29 c8                	sub    eax,ecx
10000266:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
10000269:	89 f1                	mov    ecx,esi
1000026b:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
10000272:	d3 ef                	shr    edi,cl
10000274:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10000277:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
1000027c:	5b                   	pop    ebx
1000027d:	89 d0                	mov    eax,edx
1000027f:	5e                   	pop    esi
10000280:	5f                   	pop    edi
10000281:	5d                   	pop    ebp
10000282:	c3                   	ret    

10000283 <_ssfn__zexpand>:
10000283:	55                   	push   ebp
10000284:	57                   	push   edi
10000285:	56                   	push   esi
10000286:	53                   	push   ebx
10000287:	83 ec 0c             	sub    esp,0xc
1000028a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000028d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000290:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
10000293:	29 f9                	sub    ecx,edi
10000295:	83 f9 08             	cmp    ecx,0x8
10000298:	74 04                	je     1000029e <_ssfn__zexpand+0x1b>
1000029a:	31 c0                	xor    eax,eax
1000029c:	eb 3c                	jmp    100002da <_ssfn__zexpand+0x57>
1000029e:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002a1:	75 f7                	jne    1000029a <_ssfn__zexpand+0x17>
100002a3:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002a7:	75 f1                	jne    1000029a <_ssfn__zexpand+0x17>
100002a9:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002ad:	75 eb                	jne    1000029a <_ssfn__zexpand+0x17>
100002af:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100002b2:	89 c3                	mov    ebx,eax
100002b4:	89 d6                	mov    esi,edx
100002b6:	50                   	push   eax
100002b7:	50                   	push   eax
100002b8:	55                   	push   ebp
100002b9:	57                   	push   edi
100002ba:	e8 fc ff ff ff       	call   100002bb <_ssfn__zexpand+0x38>	100002bb: R_386_PC32	realloc
100002bf:	83 c4 10             	add    esp,0x10
100002c2:	85 c0                	test   eax,eax
100002c4:	74 d4                	je     1000029a <_ssfn__zexpand+0x17>
100002c6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100002c9:	29 fe                	sub    esi,edi
100002cb:	01 c6                	add    esi,eax
100002cd:	01 e8                	add    eax,ebp
100002cf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
100002d2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100002d5:	b8 01 00 00 00       	mov    eax,0x1
100002da:	83 c4 0c             	add    esp,0xc
100002dd:	5b                   	pop    ebx
100002de:	5e                   	pop    esi
100002df:	5f                   	pop    edi
100002e0:	5d                   	pop    ebp
100002e1:	c3                   	ret    

100002e2 <_ssfn__zbuild_huffman>:
100002e2:	55                   	push   ebp
100002e3:	57                   	push   edi
100002e4:	56                   	push   esi
100002e5:	53                   	push   ebx
100002e6:	89 c3                	mov    ebx,eax
100002e8:	81 ec a0 00 00 00    	sub    esp,0xa0
100002ee:	31 c0                	xor    eax,eax
100002f0:	89 0c 24             	mov    DWORD PTR [esp],ecx
100002f3:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
100002f7:	b9 11 00 00 00       	mov    ecx,0x11
100002fc:	89 ef                	mov    edi,ebp
100002fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10000302:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000304:	b9 00 01 00 00       	mov    ecx,0x100
10000309:	89 df                	mov    edi,ebx
1000030b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000030d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000310:	7d 0f                	jge    10000321 <_ssfn__zbuild_huffman+0x3f>
10000312:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
10000316:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
1000031a:	40                   	inc    eax
1000031b:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
1000031f:	eb ec                	jmp    1000030d <_ssfn__zbuild_huffman+0x2b>
10000321:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000329:	b9 01 00 00 00       	mov    ecx,0x1
1000032e:	b8 01 00 00 00       	mov    eax,0x1
10000333:	89 c7                	mov    edi,eax
10000335:	d3 e7                	shl    edi,cl
10000337:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
1000033b:	0f 8f 10 01 00 00    	jg     10000451 <_ssfn__zbuild_huffman+0x16f>
10000341:	41                   	inc    ecx
10000342:	83 f9 10             	cmp    ecx,0x10
10000345:	75 ec                	jne    10000333 <_ssfn__zbuild_huffman+0x51>
10000347:	31 ff                	xor    edi,edi
10000349:	31 f6                	xor    esi,esi
1000034b:	b8 01 00 00 00       	mov    eax,0x1
10000350:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
10000354:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
10000358:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
10000360:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
10000368:	01 ef                	add    edi,ebp
1000036a:	85 ed                	test   ebp,ebp
1000036c:	74 11                	je     1000037f <_ssfn__zbuild_huffman+0x9d>
1000036e:	ba 01 00 00 00       	mov    edx,0x1
10000373:	88 c1                	mov    cl,al
10000375:	d3 e2                	shl    edx,cl
10000377:	39 fa                	cmp    edx,edi
10000379:	0f 8c d2 00 00 00    	jl     10000451 <_ssfn__zbuild_huffman+0x16f>
1000037f:	89 fa                	mov    edx,edi
10000381:	b9 10 00 00 00       	mov    ecx,0x10
10000386:	01 ff                	add    edi,edi
10000388:	29 c1                	sub    ecx,eax
1000038a:	01 ee                	add    esi,ebp
1000038c:	d3 e2                	shl    edx,cl
1000038e:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
10000395:	40                   	inc    eax
10000396:	83 f8 10             	cmp    eax,0x10
10000399:	75 b5                	jne    10000350 <_ssfn__zbuild_huffman+0x6e>
1000039b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000039e:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003ac:	31 ff                	xor    edi,edi
100003ae:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100003b2:	0f 8d 9d 00 00 00    	jge    10000455 <_ssfn__zbuild_huffman+0x173>
100003b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100003bc:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
100003c0:	89 f2                	mov    edx,esi
100003c2:	85 f6                	test   esi,esi
100003c4:	0f 84 81 00 00 00    	je     1000044b <_ssfn__zbuild_huffman+0x169>
100003ca:	8d 0c 36             	lea    ecx,[esi+esi*1]
100003cd:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
100003d1:	8d 04 19             	lea    eax,[ecx+ebx*1]
100003d4:	89 e9                	mov    ecx,ebp
100003d6:	89 04 24             	mov    DWORD PTR [esp],eax
100003d9:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
100003e0:	29 c1                	sub    ecx,eax
100003e2:	89 c8                	mov    eax,ecx
100003e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100003e7:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
100003ee:	01 c8                	add    eax,ecx
100003f0:	83 fe 09             	cmp    esi,0x9
100003f3:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
100003fa:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10000402:	7f 42                	jg     10000446 <_ssfn__zbuild_huffman+0x164>
10000404:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000408:	89 e8                	mov    eax,ebp
1000040a:	e8 79 fd ff ff       	call   10000188 <_ssfn__bitreverse16>
1000040f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10000413:	b9 10 00 00 00       	mov    ecx,0x10
10000418:	29 f1                	sub    ecx,esi
1000041a:	d3 f8                	sar    eax,cl
1000041c:	88 d1                	mov    cl,dl
1000041e:	89 04 24             	mov    DWORD PTR [esp],eax
10000421:	89 f2                	mov    edx,esi
10000423:	b8 01 00 00 00       	mov    eax,0x1
10000428:	c1 e2 09             	shl    edx,0x9
1000042b:	d3 e0                	shl    eax,cl
1000042d:	09 fa                	or     edx,edi
1000042f:	89 c1                	mov    ecx,eax
10000431:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000438:	7f 0c                	jg     10000446 <_ssfn__zbuild_huffman+0x164>
1000043a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000043d:	01 0c 24             	add    DWORD PTR [esp],ecx
10000440:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10000444:	eb eb                	jmp    10000431 <_ssfn__zbuild_huffman+0x14f>
10000446:	45                   	inc    ebp
10000447:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
1000044b:	47                   	inc    edi
1000044c:	e9 5d ff ff ff       	jmp    100003ae <_ssfn__zbuild_huffman+0xcc>
10000451:	31 c0                	xor    eax,eax
10000453:	eb 05                	jmp    1000045a <_ssfn__zbuild_huffman+0x178>
10000455:	b8 01 00 00 00       	mov    eax,0x1
1000045a:	81 c4 a0 00 00 00    	add    esp,0xa0
10000460:	5b                   	pop    ebx
10000461:	5e                   	pop    esi
10000462:	5f                   	pop    edi
10000463:	5d                   	pop    ebp
10000464:	c3                   	ret    

10000465 <_ssfn_fc.part.1>:
10000465:	55                   	push   ebp
10000466:	57                   	push   edi
10000467:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
1000046d:	56                   	push   esi
1000046e:	53                   	push   ebx
1000046f:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000475:	83 ec 0c             	sub    esp,0xc
10000478:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000047b:	74 5d                	je     100004da <_ssfn_fc.part.1+0x75>
1000047d:	31 f6                	xor    esi,esi
1000047f:	8b 03                	mov    eax,DWORD PTR [ebx]
10000481:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000485:	74 35                	je     100004bc <_ssfn_fc.part.1+0x57>
10000487:	31 ed                	xor    ebp,ebp
10000489:	8b 03                	mov    eax,DWORD PTR [ebx]
1000048b:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
1000048e:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000491:	85 c0                	test   eax,eax
10000493:	74 0c                	je     100004a1 <_ssfn_fc.part.1+0x3c>
10000495:	83 ec 0c             	sub    esp,0xc
10000498:	50                   	push   eax
10000499:	e8 fc ff ff ff       	call   1000049a <_ssfn_fc.part.1+0x35>	1000049a: R_386_PC32	free
1000049e:	83 c4 10             	add    esp,0x10
100004a1:	83 c5 04             	add    ebp,0x4
100004a4:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004aa:	75 dd                	jne    10000489 <_ssfn_fc.part.1+0x24>
100004ac:	83 ec 0c             	sub    esp,0xc
100004af:	8b 03                	mov    eax,DWORD PTR [ebx]
100004b1:	ff 34 30             	push   DWORD PTR [eax+esi*1]
100004b4:	e8 fc ff ff ff       	call   100004b5 <_ssfn_fc.part.1+0x50>	100004b5: R_386_PC32	free
100004b9:	83 c4 10             	add    esp,0x10
100004bc:	83 c6 04             	add    esi,0x4
100004bf:	81 fe 00 04 00 00    	cmp    esi,0x400
100004c5:	75 b8                	jne    1000047f <_ssfn_fc.part.1+0x1a>
100004c7:	83 ec 0c             	sub    esp,0xc
100004ca:	ff 33                	push   DWORD PTR [ebx]
100004cc:	e8 fc ff ff ff       	call   100004cd <_ssfn_fc.part.1+0x68>	100004cd: R_386_PC32	free
100004d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100004d7:	83 c4 10             	add    esp,0x10
100004da:	83 c3 04             	add    ebx,0x4
100004dd:	39 fb                	cmp    ebx,edi
100004df:	75 97                	jne    10000478 <_ssfn_fc.part.1+0x13>
100004e1:	83 c4 0c             	add    esp,0xc
100004e4:	5b                   	pop    ebx
100004e5:	5e                   	pop    esi
100004e6:	5f                   	pop    edi
100004e7:	5d                   	pop    ebp
100004e8:	c3                   	ret    

100004e9 <_ssfn_l>:
100004e9:	57                   	push   edi
100004ea:	56                   	push   esi
100004eb:	53                   	push   ebx
100004ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100004f0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100004f4:	39 ce                	cmp    esi,ecx
100004f6:	89 f3                	mov    ebx,esi
100004f8:	0f 9d c1             	setge  cl
100004fb:	c1 eb 1f             	shr    ebx,0x1f
100004fe:	09 d9                	or     ecx,ebx
10000500:	89 fb                	mov    ebx,edi
10000502:	c1 eb 1f             	shr    ebx,0x1f
10000505:	08 d9                	or     cl,bl
10000507:	0f 85 e9 00 00 00    	jne    100005f6 <_ssfn_l+0x10d>
1000050d:	39 d7                	cmp    edi,edx
1000050f:	0f 8d e1 00 00 00    	jge    100005f6 <_ssfn_l+0x10d>
10000515:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
1000051b:	8d 51 08             	lea    edx,[ecx+0x8]
1000051e:	8d 4f 08             	lea    ecx,[edi+0x8]
10000521:	c1 fa 04             	sar    edx,0x4
10000524:	c1 f9 04             	sar    ecx,0x4
10000527:	39 ca                	cmp    edx,ecx
10000529:	75 1a                	jne    10000545 <_ssfn_l+0x5c>
1000052b:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000531:	8d 4e 08             	lea    ecx,[esi+0x8]
10000534:	83 c2 08             	add    edx,0x8
10000537:	c1 f9 04             	sar    ecx,0x4
1000053a:	c1 fa 04             	sar    edx,0x4
1000053d:	39 ca                	cmp    edx,ecx
1000053f:	0f 84 b1 00 00 00    	je     100005f6 <_ssfn_l+0x10d>
10000545:	89 c3                	mov    ebx,eax
10000547:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
1000054d:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
10000553:	7f 3e                	jg     10000593 <_ssfn_l+0xaa>
10000555:	05 00 02 00 00       	add    eax,0x200
1000055a:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10000560:	52                   	push   edx
10000561:	01 c0                	add    eax,eax
10000563:	52                   	push   edx
10000564:	50                   	push   eax
10000565:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
1000056b:	e8 fc ff ff ff       	call   1000056c <_ssfn_l+0x83>	1000056c: R_386_PC32	realloc
10000570:	83 c4 10             	add    esp,0x10
10000573:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000579:	85 c0                	test   eax,eax
1000057b:	75 16                	jne    10000593 <_ssfn_l+0xaa>
1000057d:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10000587:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000591:	eb 63                	jmp    100005f6 <_ssfn_l+0x10d>
10000593:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
1000059a:	75 26                	jne    100005c2 <_ssfn_l+0xd9>
1000059c:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005a2:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005a8:	66 89 10             	mov    WORD PTR [eax],dx
100005ab:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005b1:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
100005b7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
100005bb:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
100005c2:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
100005c8:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005ce:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
100005d2:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
100005d8:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005de:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
100005e3:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
100005e9:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
100005f0:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
100005f6:	5b                   	pop    ebx
100005f7:	5e                   	pop    esi
100005f8:	5f                   	pop    edi
100005f9:	c3                   	ret    

100005fa <_ssfn_b>:
100005fa:	55                   	push   ebp
100005fb:	57                   	push   edi
100005fc:	56                   	push   esi
100005fd:	53                   	push   ebx
100005fe:	83 ec 4c             	sub    esp,0x4c
10000601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000605:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000609:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000060d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000611:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000615:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000619:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000061d:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000625:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000629:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
1000062d:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000635:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000639:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000063d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10000644:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000648:	83 f8 04             	cmp    eax,0x4
1000064b:	75 28                	jne    10000675 <_ssfn_b+0x7b>
1000064d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000651:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10000655:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10000659:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000065d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10000665:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000669:	83 c4 4c             	add    esp,0x4c
1000066c:	5b                   	pop    ebx
1000066d:	5e                   	pop    esi
1000066e:	5f                   	pop    edi
1000066f:	5d                   	pop    ebp
10000670:	e9 74 fe ff ff       	jmp    100004e9 <_ssfn_l>
10000675:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000679:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000067d:	75 0e                	jne    1000068d <_ssfn_b+0x93>
1000067f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000683:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10000687:	0f 84 19 01 00 00    	je     100007a6 <_ssfn_b+0x1ac>
1000068d:	be 02 00 00 00       	mov    esi,0x2
10000692:	89 d8                	mov    eax,ebx
10000694:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000698:	99                   	cdq    
10000699:	f7 fe                	idiv   esi
1000069b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
1000069f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006a3:	89 e8                	mov    eax,ebp
100006a5:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006a9:	99                   	cdq    
100006aa:	f7 fe                	idiv   esi
100006ac:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
100006b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100006b4:	89 f8                	mov    eax,edi
100006b6:	29 d8                	sub    eax,ebx
100006b8:	99                   	cdq    
100006b9:	f7 fe                	idiv   esi
100006bb:	01 c3                	add    ebx,eax
100006bd:	89 c8                	mov    eax,ecx
100006bf:	29 e8                	sub    eax,ebp
100006c1:	99                   	cdq    
100006c2:	f7 fe                	idiv   esi
100006c4:	01 e8                	add    eax,ebp
100006c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100006ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006ce:	29 f8                	sub    eax,edi
100006d0:	99                   	cdq    
100006d1:	f7 fe                	idiv   esi
100006d3:	01 f8                	add    eax,edi
100006d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100006d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100006dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100006e1:	29 c8                	sub    eax,ecx
100006e3:	99                   	cdq    
100006e4:	f7 fe                	idiv   esi
100006e6:	01 c8                	add    eax,ecx
100006e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100006ec:	89 d8                	mov    eax,ebx
100006ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
100006f2:	99                   	cdq    
100006f3:	f7 fe                	idiv   esi
100006f5:	8d 0c 38             	lea    ecx,[eax+edi*1]
100006f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100006fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000700:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000704:	99                   	cdq    
10000705:	f7 fe                	idiv   esi
10000707:	8d 2c 38             	lea    ebp,[eax+edi*1]
1000070a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000070e:	29 d8                	sub    eax,ebx
10000710:	99                   	cdq    
10000711:	f7 fe                	idiv   esi
10000713:	83 ec 0c             	sub    esp,0xc
10000716:	01 d8                	add    eax,ebx
10000718:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000071c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000720:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10000724:	99                   	cdq    
10000725:	f7 fe                	idiv   esi
10000727:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000072b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000072f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000733:	29 c8                	sub    eax,ecx
10000735:	99                   	cdq    
10000736:	f7 fe                	idiv   esi
10000738:	8d 1c 08             	lea    ebx,[eax+ecx*1]
1000073b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000073f:	29 e8                	sub    eax,ebp
10000741:	99                   	cdq    
10000742:	f7 fe                	idiv   esi
10000744:	8d 34 28             	lea    esi,[eax+ebp*1]
10000747:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
1000074b:	8d 78 01             	lea    edi,[eax+0x1]
1000074e:	57                   	push   edi
1000074f:	56                   	push   esi
10000750:	53                   	push   ebx
10000751:	55                   	push   ebp
10000752:	51                   	push   ecx
10000753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000075b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000075f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000763:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000767:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000076b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000076f:	e8 86 fe ff ff       	call   100005fa <_ssfn_b>
10000774:	83 c4 24             	add    esp,0x24
10000777:	57                   	push   edi
10000778:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000077c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000780:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000784:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
1000078c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000790:	56                   	push   esi
10000791:	53                   	push   ebx
10000792:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000796:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000079a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000079e:	e8 57 fe ff ff       	call   100005fa <_ssfn_b>
100007a3:	83 c4 30             	add    esp,0x30
100007a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007ab:	0f 85 9c fe ff ff    	jne    1000064d <_ssfn_b+0x53>
100007b1:	83 c4 4c             	add    esp,0x4c
100007b4:	5b                   	pop    ebx
100007b5:	5e                   	pop    esi
100007b6:	5f                   	pop    edi
100007b7:	5d                   	pop    ebp
100007b8:	c3                   	ret    

100007b9 <_ssfn__zreceive>:
100007b9:	56                   	push   esi
100007ba:	53                   	push   ebx
100007bb:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
100007be:	7d 1d                	jge    100007dd <_ssfn__zreceive+0x24>
100007c0:	8b 18                	mov    ebx,DWORD PTR [eax]
100007c2:	8d 4b 01             	lea    ecx,[ebx+0x1]
100007c5:	89 08                	mov    DWORD PTR [eax],ecx
100007c7:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
100007ca:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
100007cd:	d3 e3                	shl    ebx,cl
100007cf:	83 c1 08             	add    ecx,0x8
100007d2:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
100007d5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100007d8:	83 f9 18             	cmp    ecx,0x18
100007db:	7e e3                	jle    100007c0 <_ssfn__zreceive+0x7>
100007dd:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
100007e0:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
100007e3:	89 f3                	mov    ebx,esi
100007e5:	88 d1                	mov    cl,dl
100007e7:	d3 eb                	shr    ebx,cl
100007e9:	88 d1                	mov    cl,dl
100007eb:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100007ee:	bb 01 00 00 00       	mov    ebx,0x1
100007f3:	d3 e3                	shl    ebx,cl
100007f5:	8d 43 ff             	lea    eax,[ebx-0x1]
100007f8:	5b                   	pop    ebx
100007f9:	21 f0                	and    eax,esi
100007fb:	5e                   	pop    esi
100007fc:	c3                   	ret    

100007fd <ssfn_utf8>:
100007fd:	56                   	push   esi
100007fe:	53                   	push   ebx
100007ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10000803:	8b 11                	mov    edx,DWORD PTR [ecx]
10000805:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000808:	89 f0                	mov    eax,esi
1000080a:	84 c0                	test   al,al
1000080c:	0f be d8             	movsx  ebx,al
1000080f:	78 04                	js     10000815 <ssfn_utf8+0x18>
10000811:	89 d8                	mov    eax,ebx
10000813:	eb 7d                	jmp    10000892 <ssfn_utf8+0x95>
10000815:	f7 c6 20 00 00 00    	test   esi,0x20
1000081b:	75 14                	jne    10000831 <ssfn_utf8+0x34>
1000081d:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000820:	c1 e3 06             	shl    ebx,0x6
10000823:	83 e0 3f             	and    eax,0x3f
10000826:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000082c:	42                   	inc    edx
1000082d:	09 d8                	or     eax,ebx
1000082f:	eb 5f                	jmp    10000890 <ssfn_utf8+0x93>
10000831:	f7 c6 10 00 00 00    	test   esi,0x10
10000837:	75 20                	jne    10000859 <ssfn_utf8+0x5c>
10000839:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
1000083d:	c1 e3 0c             	shl    ebx,0xc
10000840:	c1 e0 06             	shl    eax,0x6
10000843:	0f b7 db             	movzx  ebx,bx
10000846:	25 c0 0f 00 00       	and    eax,0xfc0
1000084b:	83 c2 02             	add    edx,0x2
1000084e:	09 d8                	or     eax,ebx
10000850:	8a 1a                	mov    bl,BYTE PTR [edx]
10000852:	83 e3 3f             	and    ebx,0x3f
10000855:	09 d8                	or     eax,ebx
10000857:	eb 37                	jmp    10000890 <ssfn_utf8+0x93>
10000859:	31 c0                	xor    eax,eax
1000085b:	83 e6 08             	and    esi,0x8
1000085e:	75 32                	jne    10000892 <ssfn_utf8+0x95>
10000860:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000864:	c1 e3 12             	shl    ebx,0x12
10000867:	c1 e0 0c             	shl    eax,0xc
1000086a:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000870:	25 00 f0 03 00       	and    eax,0x3f000
10000875:	83 c2 03             	add    edx,0x3
10000878:	09 d8                	or     eax,ebx
1000087a:	8a 1a                	mov    bl,BYTE PTR [edx]
1000087c:	83 e3 3f             	and    ebx,0x3f
1000087f:	09 d8                	or     eax,ebx
10000881:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000885:	c1 e3 06             	shl    ebx,0x6
10000888:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000088e:	09 d8                	or     eax,ebx
10000890:	89 11                	mov    DWORD PTR [ecx],edx
10000892:	ff 01                	inc    DWORD PTR [ecx]
10000894:	5b                   	pop    ebx
10000895:	5e                   	pop    esi
10000896:	c3                   	ret    

10000897 <_ssfn_c>:
10000897:	55                   	push   ebp
10000898:	57                   	push   edi
10000899:	56                   	push   esi
1000089a:	53                   	push   ebx
1000089b:	83 ec 14             	sub    esp,0x14
1000089e:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008a8:	85 c0                	test   eax,eax
100008aa:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
100008b0:	0f 84 e6 00 00 00    	je     1000099c <_ssfn_c+0x105>
100008b6:	31 ff                	xor    edi,edi
100008b8:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100008bc:	0f 84 f3 00 00 00    	je     100009b5 <_ssfn_c+0x11e>
100008c2:	85 d2                	test   edx,edx
100008c4:	0f 84 eb 00 00 00    	je     100009b5 <_ssfn_c+0x11e>
100008ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
100008cd:	0f 84 e2 00 00 00    	je     100009b5 <_ssfn_c+0x11e>
100008d3:	89 d6                	mov    esi,edx
100008d5:	89 cd                	mov    ebp,ecx
100008d7:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100008da:	89 c3                	mov    ebx,eax
100008dc:	85 d2                	test   edx,edx
100008de:	74 38                	je     10000918 <_ssfn_c+0x81>
100008e0:	8d 0c 13             	lea    ecx,[ebx+edx*1]
100008e3:	31 c0                	xor    eax,eax
100008e5:	89 0c 24             	mov    DWORD PTR [esp],ecx
100008e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100008eb:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
100008ef:	66 85 d2             	test   dx,dx
100008f2:	74 24                	je     10000918 <_ssfn_c+0x81>
100008f4:	01 da                	add    edx,ebx
100008f6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008fa:	8a 0a                	mov    cl,BYTE PTR [edx]
100008fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000900:	84 c9                	test   cl,cl
10000902:	0f 84 9e 00 00 00    	je     100009a6 <_ssfn_c+0x10f>
10000908:	3a 0f                	cmp    cl,BYTE PTR [edi]
1000090a:	0f 85 90 00 00 00    	jne    100009a0 <_ssfn_c+0x109>
10000910:	47                   	inc    edi
10000911:	42                   	inc    edx
10000912:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000916:	eb e2                	jmp    100008fa <_ssfn_c+0x63>
10000918:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000091c:	8d 44 24 10          	lea    eax,[esp+0x10]
10000920:	50                   	push   eax
10000921:	e8 fc ff ff ff       	call   10000922 <_ssfn_c+0x8b>	10000922: R_386_PC32	ssfn_utf8
10000926:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000092a:	29 f2                	sub    edx,esi
1000092c:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
1000092f:	5a                   	pop    edx
10000930:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000934:	89 06                	mov    DWORD PTR [esi],eax
10000936:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000939:	89 df                	mov    edi,ebx
1000093b:	31 db                	xor    ebx,ebx
1000093d:	8a 17                	mov    dl,BYTE PTR [edi]
1000093f:	80 fa ff             	cmp    dl,0xff
10000942:	75 08                	jne    1000094c <_ssfn_c+0xb5>
10000944:	81 c3 ff ff 00 00    	add    ebx,0xffff
1000094a:	eb 2a                	jmp    10000976 <_ssfn_c+0xdf>
1000094c:	88 d1                	mov    cl,dl
1000094e:	83 e1 c0             	and    ecx,0xffffffc0
10000951:	80 f9 c0             	cmp    cl,0xc0
10000954:	75 16                	jne    1000096c <_ssfn_c+0xd5>
10000956:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
1000095a:	c1 e2 08             	shl    edx,0x8
1000095d:	83 c7 02             	add    edi,0x2
10000960:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000966:	09 ca                	or     edx,ecx
10000968:	01 d3                	add    ebx,edx
1000096a:	eb 27                	jmp    10000993 <_ssfn_c+0xfc>
1000096c:	80 f9 80             	cmp    cl,0x80
1000096f:	75 08                	jne    10000979 <_ssfn_c+0xe2>
10000971:	83 e2 3f             	and    edx,0x3f
10000974:	01 d3                	add    ebx,edx
10000976:	47                   	inc    edi
10000977:	eb 1a                	jmp    10000993 <_ssfn_c+0xfc>
10000979:	39 d8                	cmp    eax,ebx
1000097b:	74 38                	je     100009b5 <_ssfn_c+0x11e>
1000097d:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000981:	83 e2 40             	and    edx,0x40
10000984:	80 fa 01             	cmp    dl,0x1
10000987:	19 d2                	sbb    edx,edx
10000989:	83 c2 06             	add    edx,0x6
1000098c:	0f af d1             	imul   edx,ecx
1000098f:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000993:	43                   	inc    ebx
10000994:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
1000099a:	76 a1                	jbe    1000093d <_ssfn_c+0xa6>
1000099c:	31 ff                	xor    edi,edi
1000099e:	eb 15                	jmp    100009b5 <_ssfn_c+0x11e>
100009a0:	40                   	inc    eax
100009a1:	e9 42 ff ff ff       	jmp    100008e8 <_ssfn_c+0x51>
100009a6:	29 f7                	sub    edi,esi
100009a8:	05 00 f0 00 00       	add    eax,0xf000
100009ad:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
100009b0:	e9 7b ff ff ff       	jmp    10000930 <_ssfn_c+0x99>
100009b5:	83 c4 14             	add    esp,0x14
100009b8:	89 f8                	mov    eax,edi
100009ba:	5b                   	pop    ebx
100009bb:	5e                   	pop    esi
100009bc:	5f                   	pop    edi
100009bd:	5d                   	pop    ebp
100009be:	c3                   	ret    

100009bf <_ssfn_zlib_decode>:
100009bf:	55                   	push   ebp
100009c0:	57                   	push   edi
100009c1:	56                   	push   esi
100009c2:	53                   	push   ebx
100009c3:	81 ec c8 19 00 00    	sub    esp,0x19c8
100009c9:	6a 08                	push   0x8
100009cb:	e8 fc ff ff ff       	call   100009cc <_ssfn_zlib_decode+0xd>	100009cc: R_386_PC32	malloc
100009d0:	83 c4 10             	add    esp,0x10
100009d3:	89 c2                	mov    edx,eax
100009d5:	85 c0                	test   eax,eax
100009d7:	0f 84 eb 04 00 00    	je     10000ec8 <_ssfn_zlib_decode+0x509>
100009dd:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
100009e4:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
100009eb:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
100009f2:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
100009f9:	31 c0                	xor    eax,eax
100009fb:	83 c2 08             	add    edx,0x8
100009fe:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a05:	c6 80 a0 56 03 10 08 	mov    BYTE PTR [eax+0x100356a0],0x8	10000a07: R_386_32	.bss
10000a0c:	40                   	inc    eax
10000a0d:	3d 90 00 00 00       	cmp    eax,0x90
10000a12:	75 f1                	jne    10000a05 <_ssfn_zlib_decode+0x46>
10000a14:	c6 80 a0 56 03 10 09 	mov    BYTE PTR [eax+0x100356a0],0x9	10000a16: R_386_32	.bss
10000a1b:	40                   	inc    eax
10000a1c:	3d 00 01 00 00       	cmp    eax,0x100
10000a21:	75 f1                	jne    10000a14 <_ssfn_zlib_decode+0x55>
10000a23:	c6 80 a0 56 03 10 07 	mov    BYTE PTR [eax+0x100356a0],0x7	10000a25: R_386_32	.bss
10000a2a:	40                   	inc    eax
10000a2b:	3d 18 01 00 00       	cmp    eax,0x118
10000a30:	75 f1                	jne    10000a23 <_ssfn_zlib_decode+0x64>
10000a32:	c7 05 b8 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357b8,0x8080808	10000a34: R_386_32	.bss
10000a3c:	c7 05 bc 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357bc,0x8080808	10000a3e: R_386_32	.bss
10000a46:	31 c0                	xor    eax,eax
10000a48:	c6 80 80 56 03 10 05 	mov    BYTE PTR [eax+0x10035680],0x5	10000a4a: R_386_32	.bss
10000a4f:	40                   	inc    eax
10000a50:	83 f8 20             	cmp    eax,0x20
10000a53:	75 f3                	jne    10000a48 <_ssfn_zlib_decode+0x89>
10000a55:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000a60:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000a6b:	ba 01 00 00 00       	mov    edx,0x1
10000a70:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a77:	e8 3d fd ff ff       	call   100007b9 <_ssfn__zreceive>
10000a7c:	ba 02 00 00 00       	mov    edx,0x2
10000a81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a85:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a8c:	e8 28 fd ff ff       	call   100007b9 <_ssfn__zreceive>
10000a91:	89 c6                	mov    esi,eax
10000a93:	85 c0                	test   eax,eax
10000a95:	0f 85 09 01 00 00    	jne    10000ba4 <_ssfn_zlib_decode+0x1e5>
10000a9b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000aa2:	83 e2 07             	and    edx,0x7
10000aa5:	74 0c                	je     10000ab3 <_ssfn_zlib_decode+0xf4>
10000aa7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000aae:	e8 06 fd ff ff       	call   100007b9 <_ssfn__zreceive>
10000ab3:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000aba:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000ac1:	31 c0                	xor    eax,eax
10000ac3:	31 db                	xor    ebx,ebx
10000ac5:	85 d2                	test   edx,edx
10000ac7:	7f 14                	jg     10000add <_ssfn_zlib_decode+0x11e>
10000ac9:	84 db                	test   bl,bl
10000acb:	74 22                	je     10000aef <_ssfn_zlib_decode+0x130>
10000acd:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000ad4:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000adb:	eb 12                	jmp    10000aef <_ssfn_zlib_decode+0x130>
10000add:	40                   	inc    eax
10000ade:	83 ea 08             	sub    edx,0x8
10000ae1:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000ae8:	b3 01                	mov    bl,0x1
10000aea:	c1 e9 08             	shr    ecx,0x8
10000aed:	eb d6                	jmp    10000ac5 <_ssfn_zlib_decode+0x106>
10000aef:	83 f8 04             	cmp    eax,0x4
10000af2:	74 1d                	je     10000b11 <_ssfn_zlib_decode+0x152>
10000af4:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000afb:	40                   	inc    eax
10000afc:	8d 4a 01             	lea    ecx,[edx+0x1]
10000aff:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b06:	8a 12                	mov    dl,BYTE PTR [edx]
10000b08:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b0f:	eb de                	jmp    10000aef <_ssfn_zlib_decode+0x130>
10000b11:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b19:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b21:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b29:	c1 e3 08             	shl    ebx,0x8
10000b2c:	01 c3                	add    ebx,eax
10000b2e:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b36:	c1 e0 08             	shl    eax,0x8
10000b39:	01 d0                	add    eax,edx
10000b3b:	89 da                	mov    edx,ebx
10000b3d:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b43:	39 d0                	cmp    eax,edx
10000b45:	0f 85 69 03 00 00    	jne    10000eb4 <_ssfn_zlib_decode+0x4f5>
10000b4b:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000b52:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000b55:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000b5c:	73 14                	jae    10000b72 <_ssfn_zlib_decode+0x1b3>
10000b5e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b65:	e8 19 f7 ff ff       	call   10000283 <_ssfn__zexpand>
10000b6a:	85 c0                	test   eax,eax
10000b6c:	0f 84 42 03 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000b72:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b79:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b80:	39 f3                	cmp    ebx,esi
10000b82:	74 09                	je     10000b8d <_ssfn_zlib_decode+0x1ce>
10000b84:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b87:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b8a:	46                   	inc    esi
10000b8b:	eb e5                	jmp    10000b72 <_ssfn_zlib_decode+0x1b3>
10000b8d:	01 da                	add    edx,ebx
10000b8f:	01 c3                	add    ebx,eax
10000b91:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b98:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b9f:	e9 fc 02 00 00       	jmp    10000ea0 <_ssfn_zlib_decode+0x4e1>
10000ba4:	83 f8 03             	cmp    eax,0x3
10000ba7:	0f 84 07 03 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000bad:	4e                   	dec    esi
10000bae:	75 2d                	jne    10000bdd <_ssfn_zlib_decode+0x21e>
10000bb0:	b9 20 01 00 00       	mov    ecx,0x120
10000bb5:	ba a0 56 03 10       	mov    edx,0x100356a0	10000bb6: R_386_32	.bss
10000bba:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000bc1:	e8 1c f7 ff ff       	call   100002e2 <_ssfn__zbuild_huffman>
10000bc6:	85 c0                	test   eax,eax
10000bc8:	0f 84 e6 02 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000bce:	b9 20 00 00 00       	mov    ecx,0x20
10000bd3:	ba 80 56 03 10       	mov    edx,0x10035680	10000bd4: R_386_32	.bss
10000bd8:	e9 78 01 00 00       	jmp    10000d55 <_ssfn_zlib_decode+0x396>
10000bdd:	ba 05 00 00 00       	mov    edx,0x5
10000be2:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000be9:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000bed:	e8 c7 fb ff ff       	call   100007b9 <_ssfn__zreceive>
10000bf2:	89 df                	mov    edi,ebx
10000bf4:	ba 05 00 00 00       	mov    edx,0x5
10000bf9:	89 c5                	mov    ebp,eax
10000bfb:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c02:	e8 b2 fb ff ff       	call   100007b9 <_ssfn__zreceive>
10000c07:	ba 04 00 00 00       	mov    edx,0x4
10000c0c:	89 c6                	mov    esi,eax
10000c0e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c15:	e8 9f fb ff ff       	call   100007b9 <_ssfn__zreceive>
10000c1a:	b9 13 00 00 00       	mov    ecx,0x13
10000c1f:	83 c0 04             	add    eax,0x4
10000c22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c26:	31 c0                	xor    eax,eax
10000c28:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c2a:	31 ff                	xor    edi,edi
10000c2c:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c30:	7e 1f                	jle    10000c51 <_ssfn_zlib_decode+0x292>
10000c32:	ba 03 00 00 00       	mov    edx,0x3
10000c37:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c3e:	47                   	inc    edi
10000c3f:	e8 75 fb ff ff       	call   100007b9 <_ssfn__zreceive>
10000c44:	0f b6 97 ff 51 00 10 	movzx  edx,BYTE PTR [edi+0x100051ff]	10000c47: R_386_32	.text
10000c4b:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c4f:	eb db                	jmp    10000c2c <_ssfn_zlib_decode+0x26d>
10000c51:	b9 13 00 00 00       	mov    ecx,0x13
10000c56:	89 da                	mov    edx,ebx
10000c58:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000c5f:	e8 7e f6 ff ff       	call   100002e2 <_ssfn__zbuild_huffman>
10000c64:	85 c0                	test   eax,eax
10000c66:	0f 84 48 02 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000c6c:	8d 46 01             	lea    eax,[esi+0x1]
10000c6f:	81 c5 01 01 00 00    	add    ebp,0x101
10000c75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c79:	31 f6                	xor    esi,esi
10000c7b:	01 e8                	add    eax,ebp
10000c7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c81:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c85:	0f 8e 9f 00 00 00    	jle    10000d2a <_ssfn_zlib_decode+0x36b>
10000c8b:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c92:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c99:	e8 35 f5 ff ff       	call   100001d3 <_ssfn__zhuffman_decode>
10000c9e:	83 f8 12             	cmp    eax,0x12
10000ca1:	0f 87 0d 02 00 00    	ja     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000ca7:	83 f8 0f             	cmp    eax,0xf
10000caa:	7f 07                	jg     10000cb3 <_ssfn_zlib_decode+0x2f4>
10000cac:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000cb0:	46                   	inc    esi
10000cb1:	eb ce                	jmp    10000c81 <_ssfn_zlib_decode+0x2c2>
10000cb3:	83 f8 10             	cmp    eax,0x10
10000cb6:	75 22                	jne    10000cda <_ssfn_zlib_decode+0x31b>
10000cb8:	ba 02 00 00 00       	mov    edx,0x2
10000cbd:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cc4:	e8 f0 fa ff ff       	call   100007b9 <_ssfn__zreceive>
10000cc9:	85 f6                	test   esi,esi
10000ccb:	8d 58 03             	lea    ebx,[eax+0x3]
10000cce:	0f 84 e0 01 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000cd4:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000cd8:	eb 31                	jmp    10000d0b <_ssfn_zlib_decode+0x34c>
10000cda:	83 f8 11             	cmp    eax,0x11
10000cdd:	75 16                	jne    10000cf5 <_ssfn_zlib_decode+0x336>
10000cdf:	ba 03 00 00 00       	mov    edx,0x3
10000ce4:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ceb:	e8 c9 fa ff ff       	call   100007b9 <_ssfn__zreceive>
10000cf0:	8d 58 03             	lea    ebx,[eax+0x3]
10000cf3:	eb 14                	jmp    10000d09 <_ssfn_zlib_decode+0x34a>
10000cf5:	ba 07 00 00 00       	mov    edx,0x7
10000cfa:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d01:	e8 b3 fa ff ff       	call   100007b9 <_ssfn__zreceive>
10000d06:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d09:	31 c0                	xor    eax,eax
10000d0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d0f:	29 f2                	sub    edx,esi
10000d11:	39 da                	cmp    edx,ebx
10000d13:	0f 8c 9b 01 00 00    	jl     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000d19:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d1d:	89 d9                	mov    ecx,ebx
10000d1f:	89 d7                	mov    edi,edx
10000d21:	01 de                	add    esi,ebx
10000d23:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d25:	e9 57 ff ff ff       	jmp    10000c81 <_ssfn_zlib_decode+0x2c2>
10000d2a:	0f 85 84 01 00 00    	jne    10000eb4 <_ssfn_zlib_decode+0x4f5>
10000d30:	89 e9                	mov    ecx,ebp
10000d32:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d36:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d3d:	e8 a0 f5 ff ff       	call   100002e2 <_ssfn__zbuild_huffman>
10000d42:	85 c0                	test   eax,eax
10000d44:	0f 84 6a 01 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000d4a:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000d52:	8d 14 28             	lea    edx,[eax+ebp*1]
10000d55:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000d5c:	e8 81 f5 ff ff       	call   100002e2 <_ssfn__zbuild_huffman>
10000d61:	85 c0                	test   eax,eax
10000d63:	0f 84 4b 01 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000d69:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d70:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d77:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d7e:	e8 50 f4 ff ff       	call   100001d3 <_ssfn__zhuffman_decode>
10000d83:	89 c3                	mov    ebx,eax
10000d85:	3d ff 00 00 00       	cmp    eax,0xff
10000d8a:	7f 34                	jg     10000dc0 <_ssfn_zlib_decode+0x401>
10000d8c:	85 c0                	test   eax,eax
10000d8e:	0f 88 20 01 00 00    	js     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000d94:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d9b:	77 1d                	ja     10000dba <_ssfn_zlib_decode+0x3fb>
10000d9d:	89 ea                	mov    edx,ebp
10000d9f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000da6:	e8 d8 f4 ff ff       	call   10000283 <_ssfn__zexpand>
10000dab:	85 c0                	test   eax,eax
10000dad:	0f 84 01 01 00 00    	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000db3:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dba:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000dbd:	45                   	inc    ebp
10000dbe:	eb b0                	jmp    10000d70 <_ssfn_zlib_decode+0x3b1>
10000dc0:	3d 00 01 00 00       	cmp    eax,0x100
10000dc5:	75 0c                	jne    10000dd3 <_ssfn_zlib_decode+0x414>
10000dc7:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000dce:	e9 cd 00 00 00       	jmp    10000ea0 <_ssfn_zlib_decode+0x4e1>
10000dd3:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000dd9:	8b 14 85 20 53 00 10 	mov    edx,DWORD PTR [eax*4+0x10005320]	10000ddc: R_386_32	.text
10000de0:	8b 1c 85 a0 53 00 10 	mov    ebx,DWORD PTR [eax*4+0x100053a0]	10000de3: R_386_32	.text
10000de7:	85 d2                	test   edx,edx
10000de9:	74 0e                	je     10000df9 <_ssfn_zlib_decode+0x43a>
10000deb:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000df2:	e8 c2 f9 ff ff       	call   100007b9 <_ssfn__zreceive>
10000df7:	01 c3                	add    ebx,eax
10000df9:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e00:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e07:	e8 c7 f3 ff ff       	call   100001d3 <_ssfn__zhuffman_decode>
10000e0c:	85 c0                	test   eax,eax
10000e0e:	0f 88 a0 00 00 00    	js     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000e14:	8b 14 85 20 52 00 10 	mov    edx,DWORD PTR [eax*4+0x10005220]	10000e17: R_386_32	.text
10000e1b:	8b 3c 85 a0 52 00 10 	mov    edi,DWORD PTR [eax*4+0x100052a0]	10000e1e: R_386_32	.text
10000e22:	85 d2                	test   edx,edx
10000e24:	74 0e                	je     10000e34 <_ssfn_zlib_decode+0x475>
10000e26:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e2d:	e8 87 f9 ff ff       	call   100007b9 <_ssfn__zreceive>
10000e32:	01 c7                	add    edi,eax
10000e34:	89 e8                	mov    eax,ebp
10000e36:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e3d:	39 f8                	cmp    eax,edi
10000e3f:	7c 73                	jl     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000e41:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e45:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e4c:	73 19                	jae    10000e67 <_ssfn_zlib_decode+0x4a8>
10000e4e:	89 ea                	mov    edx,ebp
10000e50:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e57:	e8 27 f4 ff ff       	call   10000283 <_ssfn__zexpand>
10000e5c:	85 c0                	test   eax,eax
10000e5e:	74 54                	je     10000eb4 <_ssfn_zlib_decode+0x4f5>
10000e60:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e67:	89 ee                	mov    esi,ebp
10000e69:	29 fe                	sub    esi,edi
10000e6b:	4f                   	dec    edi
10000e6c:	75 19                	jne    10000e87 <_ssfn_zlib_decode+0x4c8>
10000e6e:	85 db                	test   ebx,ebx
10000e70:	0f 84 fa fe ff ff    	je     10000d70 <_ssfn_zlib_decode+0x3b1>
10000e76:	8a 06                	mov    al,BYTE PTR [esi]
10000e78:	01 eb                	add    ebx,ebp
10000e7a:	45                   	inc    ebp
10000e7b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e7e:	39 dd                	cmp    ebp,ebx
10000e80:	75 f8                	jne    10000e7a <_ssfn_zlib_decode+0x4bb>
10000e82:	e9 e9 fe ff ff       	jmp    10000d70 <_ssfn_zlib_decode+0x3b1>
10000e87:	85 db                	test   ebx,ebx
10000e89:	0f 84 e1 fe ff ff    	je     10000d70 <_ssfn_zlib_decode+0x3b1>
10000e8f:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e92:	89 ef                	mov    edi,ebp
10000e94:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e95:	39 f0                	cmp    eax,esi
10000e97:	75 fb                	jne    10000e94 <_ssfn_zlib_decode+0x4d5>
10000e99:	01 dd                	add    ebp,ebx
10000e9b:	e9 d0 fe ff ff       	jmp    10000d70 <_ssfn_zlib_decode+0x3b1>
10000ea0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000ea5:	0f 84 c0 fb ff ff    	je     10000a6b <_ssfn_zlib_decode+0xac>
10000eab:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000eb2:	eb 14                	jmp    10000ec8 <_ssfn_zlib_decode+0x509>
10000eb4:	83 ec 0c             	sub    esp,0xc
10000eb7:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000ebe:	e8 fc ff ff ff       	call   10000ebf <_ssfn_zlib_decode+0x500>	10000ebf: R_386_PC32	free
10000ec3:	83 c4 10             	add    esp,0x10
10000ec6:	31 c0                	xor    eax,eax
10000ec8:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000ece:	5b                   	pop    ebx
10000ecf:	5e                   	pop    esi
10000ed0:	5f                   	pop    edi
10000ed1:	5d                   	pop    ebp
10000ed2:	c3                   	ret    

10000ed3 <ssfn_load>:
10000ed3:	55                   	push   ebp
10000ed4:	57                   	push   edi
10000ed5:	56                   	push   esi
10000ed6:	53                   	push   ebx
10000ed7:	83 ec 1c             	sub    esp,0x1c
10000eda:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000ede:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000ee2:	85 ff                	test   edi,edi
10000ee4:	0f 84 d0 01 00 00    	je     100010ba <ssfn_load+0x1e7>
10000eea:	85 f6                	test   esi,esi
10000eec:	0f 84 c8 01 00 00    	je     100010ba <ssfn_load+0x1e7>
10000ef2:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000ef5:	0f 85 a8 00 00 00    	jne    10000fa3 <ssfn_load+0xd0>
10000efb:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000eff:	0f 85 9e 00 00 00    	jne    10000fa3 <ssfn_load+0xd0>
10000f05:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f09:	74 0a                	je     10000f15 <ssfn_load+0x42>
10000f0b:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f10:	e9 aa 01 00 00       	jmp    100010bf <ssfn_load+0x1ec>
10000f15:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f18:	a8 04                	test   al,0x4
10000f1a:	75 05                	jne    10000f21 <ssfn_load+0x4e>
10000f1c:	83 c6 0a             	add    esi,0xa
10000f1f:	eb 08                	jmp    10000f29 <ssfn_load+0x56>
10000f21:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f25:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f29:	a8 08                	test   al,0x8
10000f2b:	74 07                	je     10000f34 <ssfn_load+0x61>
10000f2d:	46                   	inc    esi
10000f2e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f32:	eb f7                	jmp    10000f2b <ssfn_load+0x58>
10000f34:	a8 10                	test   al,0x10
10000f36:	74 07                	je     10000f3f <ssfn_load+0x6c>
10000f38:	46                   	inc    esi
10000f39:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f3d:	eb f7                	jmp    10000f36 <ssfn_load+0x63>
10000f3f:	83 ec 0c             	sub    esp,0xc
10000f42:	56                   	push   esi
10000f43:	e8 fc ff ff ff       	call   10000f44 <ssfn_load+0x71>	10000f44: R_386_PC32	_ssfn_zlib_decode
10000f48:	83 c4 10             	add    esp,0x10
10000f4b:	89 c6                	mov    esi,eax
10000f4d:	85 c0                	test   eax,eax
10000f4f:	74 ba                	je     10000f0b <ssfn_load+0x38>
10000f51:	50                   	push   eax
10000f52:	50                   	push   eax
10000f53:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000f59:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000f60:	50                   	push   eax
10000f61:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000f67:	e8 fc ff ff ff       	call   10000f68 <ssfn_load+0x95>	10000f68: R_386_PC32	realloc
10000f6c:	83 c4 10             	add    esp,0x10
10000f6f:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f75:	85 c0                	test   eax,eax
10000f77:	75 0f                	jne    10000f88 <ssfn_load+0xb5>
10000f79:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f83:	e9 1a 01 00 00       	jmp    100010a2 <ssfn_load+0x1cf>
10000f88:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f8e:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f91:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f97:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f9d:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000fa3:	50                   	push   eax
10000fa4:	6a 04                	push   0x4
10000fa6:	68 c9 50 00 10       	push   0x100050c9	10000fa7: R_386_32	.text
10000fab:	56                   	push   esi
10000fac:	e8 fc ff ff ff       	call   10000fad <ssfn_load+0xda>	10000fad: R_386_PC32	memcmp
10000fb1:	83 c4 10             	add    esp,0x10
10000fb4:	89 c5                	mov    ebp,eax
10000fb6:	85 c0                	test   eax,eax
10000fb8:	75 29                	jne    10000fe3 <ssfn_load+0x110>
10000fba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000fbd:	01 f3                	add    ebx,esi
10000fbf:	83 c6 08             	add    esi,0x8
10000fc2:	39 de                	cmp    esi,ebx
10000fc4:	0f 83 f5 00 00 00    	jae    100010bf <ssfn_load+0x1ec>
10000fca:	50                   	push   eax
10000fcb:	50                   	push   eax
10000fcc:	56                   	push   esi
10000fcd:	57                   	push   edi
10000fce:	e8 fc ff ff ff       	call   10000fcf <ssfn_load+0xfc>	10000fcf: R_386_PC32	ssfn_load
10000fd3:	83 c4 10             	add    esp,0x10
10000fd6:	85 c0                	test   eax,eax
10000fd8:	0f 85 e1 00 00 00    	jne    100010bf <ssfn_load+0x1ec>
10000fde:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000fe1:	eb df                	jmp    10000fc2 <ssfn_load+0xef>
10000fe3:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000fe6:	83 e0 0f             	and    eax,0xf
10000fe9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000fed:	53                   	push   ebx
10000fee:	6a 04                	push   0x4
10000ff0:	68 ce 50 00 10       	push   0x100050ce	10000ff1: R_386_32	.text
10000ff5:	56                   	push   esi
10000ff6:	e8 fc ff ff ff       	call   10000ff7 <ssfn_load+0x124>	10000ff7: R_386_PC32	memcmp
10000ffb:	83 c4 10             	add    esp,0x10
10000ffe:	89 c5                	mov    ebp,eax
10001000:	85 c0                	test   eax,eax
10001002:	0f 85 03 ff ff ff    	jne    10000f0b <ssfn_load+0x38>
10001008:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
1000100b:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
1000100f:	51                   	push   ecx
10001010:	6a 04                	push   0x4
10001012:	68 d3 50 00 10       	push   0x100050d3	10001013: R_386_32	.text
10001017:	50                   	push   eax
10001018:	e8 fc ff ff ff       	call   10001019 <ssfn_load+0x146>	10001019: R_386_PC32	memcmp
1000101d:	83 c4 10             	add    esp,0x10
10001020:	85 c0                	test   eax,eax
10001022:	0f 85 e3 fe ff ff    	jne    10000f0b <ssfn_load+0x38>
10001028:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
1000102d:	0f 87 d8 fe ff ff    	ja     10000f0b <ssfn_load+0x38>
10001033:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10001037:	39 cb                	cmp    ebx,ecx
10001039:	0f 86 cc fe ff ff    	jbe    10000f0b <ssfn_load+0x38>
1000103f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10001042:	39 c3                	cmp    ebx,eax
10001044:	0f 86 c1 fe ff ff    	jbe    10000f0b <ssfn_load+0x38>
1000104a:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
1000104d:	0f 86 b8 fe ff ff    	jbe    10000f0b <ssfn_load+0x38>
10001053:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10001056:	0f 86 af fe ff ff    	jbe    10000f0b <ssfn_load+0x38>
1000105c:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
1000105f:	0f 86 a6 fe ff ff    	jbe    10000f0b <ssfn_load+0x38>
10001065:	39 c1                	cmp    ecx,eax
10001067:	0f 83 9e fe ff ff    	jae    10000f0b <ssfn_load+0x38>
1000106d:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10001072:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10001075:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
1000107b:	40                   	inc    eax
1000107c:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10001082:	52                   	push   edx
10001083:	c1 e0 02             	shl    eax,0x2
10001086:	52                   	push   edx
10001087:	50                   	push   eax
10001088:	ff 33                	push   DWORD PTR [ebx]
1000108a:	e8 fc ff ff ff       	call   1000108b <ssfn_load+0x1b8>	1000108b: R_386_PC32	realloc
1000108f:	83 c4 10             	add    esp,0x10
10001092:	89 03                	mov    DWORD PTR [ebx],eax
10001094:	85 c0                	test   eax,eax
10001096:	75 0f                	jne    100010a7 <ssfn_load+0x1d4>
10001098:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010a2:	83 cd ff             	or     ebp,0xffffffff
100010a5:	eb 18                	jmp    100010bf <ssfn_load+0x1ec>
100010a7:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010ad:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100010b1:	89 f8                	mov    eax,edi
100010b3:	e8 ad f3 ff ff       	call   10000465 <_ssfn_fc.part.1>
100010b8:	eb 05                	jmp    100010bf <ssfn_load+0x1ec>
100010ba:	bd fc ff ff ff       	mov    ebp,0xfffffffc
100010bf:	83 c4 1c             	add    esp,0x1c
100010c2:	89 e8                	mov    eax,ebp
100010c4:	5b                   	pop    ebx
100010c5:	5e                   	pop    esi
100010c6:	5f                   	pop    edi
100010c7:	5d                   	pop    ebp
100010c8:	c3                   	ret    

100010c9 <ssfn_free>:
100010c9:	57                   	push   edi
100010ca:	56                   	push   esi
100010cb:	53                   	push   ebx
100010cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100010d0:	85 db                	test   ebx,ebx
100010d2:	74 7e                	je     10001152 <ssfn_free+0x89>
100010d4:	89 d8                	mov    eax,ebx
100010d6:	e8 8a f3 ff ff       	call   10000465 <_ssfn_fc.part.1>
100010db:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
100010e2:	74 32                	je     10001116 <ssfn_free+0x4d>
100010e4:	31 f6                	xor    esi,esi
100010e6:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
100010ec:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
100010f2:	7e 16                	jle    1000110a <ssfn_free+0x41>
100010f4:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100010f7:	85 c0                	test   eax,eax
100010f9:	74 0c                	je     10001107 <ssfn_free+0x3e>
100010fb:	83 ec 0c             	sub    esp,0xc
100010fe:	50                   	push   eax
100010ff:	e8 fc ff ff ff       	call   10001100 <ssfn_free+0x37>	10001100: R_386_PC32	free
10001104:	83 c4 10             	add    esp,0x10
10001107:	46                   	inc    esi
10001108:	eb dc                	jmp    100010e6 <ssfn_free+0x1d>
1000110a:	83 ec 0c             	sub    esp,0xc
1000110d:	50                   	push   eax
1000110e:	e8 fc ff ff ff       	call   1000110f <ssfn_free+0x46>	1000110f: R_386_PC32	free
10001113:	83 c4 10             	add    esp,0x10
10001116:	31 f6                	xor    esi,esi
10001118:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
1000111b:	85 c0                	test   eax,eax
1000111d:	74 0c                	je     1000112b <ssfn_free+0x62>
1000111f:	83 ec 0c             	sub    esp,0xc
10001122:	50                   	push   eax
10001123:	e8 fc ff ff ff       	call   10001124 <ssfn_free+0x5b>	10001124: R_386_PC32	free
10001128:	83 c4 10             	add    esp,0x10
1000112b:	46                   	inc    esi
1000112c:	83 fe 05             	cmp    esi,0x5
1000112f:	75 e7                	jne    10001118 <ssfn_free+0x4f>
10001131:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10001137:	85 c0                	test   eax,eax
10001139:	74 0c                	je     10001147 <ssfn_free+0x7e>
1000113b:	83 ec 0c             	sub    esp,0xc
1000113e:	50                   	push   eax
1000113f:	e8 fc ff ff ff       	call   10001140 <ssfn_free+0x77>	10001140: R_386_PC32	free
10001144:	83 c4 10             	add    esp,0x10
10001147:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000114c:	31 c0                	xor    eax,eax
1000114e:	89 df                	mov    edi,ebx
10001150:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001152:	5b                   	pop    ebx
10001153:	5e                   	pop    esi
10001154:	5f                   	pop    edi
10001155:	c3                   	ret    

10001156 <ssfn_mem>:
10001156:	55                   	push   ebp
10001157:	31 c0                	xor    eax,eax
10001159:	57                   	push   edi
1000115a:	56                   	push   esi
1000115b:	53                   	push   ebx
1000115c:	83 ec 08             	sub    esp,0x8
1000115f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001163:	85 d2                	test   edx,edx
10001165:	0f 84 8e 00 00 00    	je     100011f9 <ssfn_mem+0xa3>
1000116b:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001170:	31 c9                	xor    ecx,ecx
10001172:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001179:	41                   	inc    ecx
1000117a:	8d 04 98             	lea    eax,[eax+ebx*4]
1000117d:	83 f9 05             	cmp    ecx,0x5
10001180:	75 f0                	jne    10001172 <ssfn_mem+0x1c>
10001182:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001188:	31 c9                	xor    ecx,ecx
1000118a:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001191:	89 34 24             	mov    DWORD PTR [esp],esi
10001194:	85 f6                	test   esi,esi
10001196:	74 48                	je     100011e0 <ssfn_mem+0x8a>
10001198:	31 db                	xor    ebx,ebx
1000119a:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000119d:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011a0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011a4:	85 ff                	test   edi,edi
100011a6:	74 2a                	je     100011d2 <ssfn_mem+0x7c>
100011a8:	31 f6                	xor    esi,esi
100011aa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011ae:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100011b1:	85 ed                	test   ebp,ebp
100011b3:	74 0f                	je     100011c4 <ssfn_mem+0x6e>
100011b5:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
100011b9:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
100011bd:	0f af fd             	imul   edi,ebp
100011c0:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
100011c4:	46                   	inc    esi
100011c5:	81 fe 00 01 00 00    	cmp    esi,0x100
100011cb:	75 dd                	jne    100011aa <ssfn_mem+0x54>
100011cd:	05 00 04 00 00       	add    eax,0x400
100011d2:	43                   	inc    ebx
100011d3:	81 fb 00 01 00 00    	cmp    ebx,0x100
100011d9:	75 bf                	jne    1000119a <ssfn_mem+0x44>
100011db:	05 00 04 00 00       	add    eax,0x400
100011e0:	41                   	inc    ecx
100011e1:	83 f9 11             	cmp    ecx,0x11
100011e4:	75 a4                	jne    1000118a <ssfn_mem+0x34>
100011e6:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
100011ed:	74 0a                	je     100011f9 <ssfn_mem+0xa3>
100011ef:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100011f5:	01 d2                	add    edx,edx
100011f7:	01 d0                	add    eax,edx
100011f9:	83 c4 08             	add    esp,0x8
100011fc:	5b                   	pop    ebx
100011fd:	5e                   	pop    esi
100011fe:	5f                   	pop    edi
100011ff:	5d                   	pop    ebp
10001200:	c3                   	ret    

10001201 <ssfn_select>:
10001201:	55                   	push   ebp
10001202:	57                   	push   edi
10001203:	56                   	push   esi
10001204:	53                   	push   ebx
10001205:	83 ec 1c             	sub    esp,0x1c
10001208:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000120c:	85 db                	test   ebx,ebx
1000120e:	75 0a                	jne    1000121a <ssfn_select+0x19>
10001210:	be fc ff ff ff       	mov    esi,0xfffffffc
10001215:	e9 13 01 00 00       	jmp    1000132d <ssfn_select+0x12c>
1000121a:	89 d8                	mov    eax,ebx
1000121c:	e8 44 f2 ff ff       	call   10000465 <_ssfn_fc.part.1>
10001221:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001225:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
1000122b:	0f 85 e9 00 00 00    	jne    1000131a <ssfn_select+0x119>
10001231:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001235:	83 e8 08             	sub    eax,0x8
10001238:	3d b8 00 00 00       	cmp    eax,0xb8
1000123d:	0f 87 de 00 00 00    	ja     10001321 <ssfn_select+0x120>
10001243:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
1000124b:	75 76                	jne    100012c3 <ssfn_select+0xc2>
1000124d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001252:	74 bc                	je     10001210 <ssfn_select+0xf>
10001254:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001258:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000125b:	74 b3                	je     10001210 <ssfn_select+0xf>
1000125d:	31 ed                	xor    ebp,ebp
1000125f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001263:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
10001267:	74 03                	je     1000126c <ssfn_select+0x6b>
10001269:	45                   	inc    ebp
1000126a:	eb f3                	jmp    1000125f <ssfn_select+0x5e>
1000126c:	8d 43 14             	lea    eax,[ebx+0x14]
1000126f:	89 df                	mov    edi,ebx
10001271:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001275:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
1000127b:	31 d2                	xor    edx,edx
1000127d:	89 04 24             	mov    DWORD PTR [esp],eax
10001280:	39 14 24             	cmp    DWORD PTR [esp],edx
10001283:	7e 33                	jle    100012b8 <ssfn_select+0xb7>
10001285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001289:	8b 07                	mov    eax,DWORD PTR [edi]
1000128b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
1000128e:	50                   	push   eax
1000128f:	8d 41 20             	lea    eax,[ecx+0x20]
10001292:	55                   	push   ebp
10001293:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10001297:	50                   	push   eax
10001298:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
1000129c:	e8 fc ff ff ff       	call   1000129d <ssfn_select+0x9c>	1000129d: R_386_PC32	memcmp
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	85 c0                	test   eax,eax
100012a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012ae:	75 05                	jne    100012b5 <ssfn_select+0xb4>
100012b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100012b3:	eb 34                	jmp    100012e9 <ssfn_select+0xe8>
100012b5:	42                   	inc    edx
100012b6:	eb c8                	jmp    10001280 <ssfn_select+0x7f>
100012b8:	83 c7 04             	add    edi,0x4
100012bb:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
100012bf:	75 b4                	jne    10001275 <ssfn_select+0x74>
100012c1:	eb 65                	jmp    10001328 <ssfn_select+0x127>
100012c3:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
100012cb:	74 15                	je     100012e2 <ssfn_select+0xe1>
100012cd:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
100012d2:	7f 54                	jg     10001328 <ssfn_select+0x127>
100012d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100012d8:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
100012e0:	74 46                	je     10001328 <ssfn_select+0x127>
100012e2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
100012e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100012ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100012f4:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100012fa:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001304:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001308:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
1000130e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001312:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001318:	eb 13                	jmp    1000132d <ssfn_select+0x12c>
1000131a:	be fb ff ff ff       	mov    esi,0xfffffffb
1000131f:	eb 0c                	jmp    1000132d <ssfn_select+0x12c>
10001321:	be fa ff ff ff       	mov    esi,0xfffffffa
10001326:	eb 05                	jmp    1000132d <ssfn_select+0x12c>
10001328:	be fd ff ff ff       	mov    esi,0xfffffffd
1000132d:	83 c4 1c             	add    esp,0x1c
10001330:	89 f0                	mov    eax,esi
10001332:	5b                   	pop    ebx
10001333:	5e                   	pop    esi
10001334:	5f                   	pop    edi
10001335:	5d                   	pop    ebp
10001336:	c3                   	ret    

10001337 <ssfn_render>:
10001337:	55                   	push   ebp
10001338:	57                   	push   edi
10001339:	56                   	push   esi
1000133a:	53                   	push   ebx
1000133b:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001341:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001348:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
10001353:	85 ed                	test   ebp,ebp
10001355:	0f 94 c2             	sete   dl
10001358:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
10001360:	0f 94 c0             	sete   al
10001363:	08 c2                	or     dl,al
10001365:	74 0a                	je     10001371 <ssfn_render+0x3a>
10001367:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
1000136c:	e9 14 1e 00 00       	jmp    10003185 <ssfn_render+0x1e4e>
10001371:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001378:	31 c9                	xor    ecx,ecx
1000137a:	8a 00                	mov    al,BYTE PTR [eax]
1000137c:	84 c0                	test   al,al
1000137e:	0f 84 01 1e 00 00    	je     10003185 <ssfn_render+0x1e4e>
10001384:	3c 0d                	cmp    al,0xd
10001386:	75 0f                	jne    10001397 <ssfn_render+0x60>
10001388:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000138f:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001395:	eb 31                	jmp    100013c8 <ssfn_render+0x91>
10001397:	3c 0a                	cmp    al,0xa
10001399:	75 37                	jne    100013d2 <ssfn_render+0x9b>
1000139b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013a2:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013ab:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100013b1:	85 c0                	test   eax,eax
100013b3:	75 06                	jne    100013bb <ssfn_render+0x84>
100013b5:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
100013bb:	01 d0                	add    eax,edx
100013bd:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100013c4:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
100013c8:	b9 01 00 00 00       	mov    ecx,0x1
100013cd:	e9 b3 1d 00 00       	jmp    10003185 <ssfn_render+0x1e4e>
100013d2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100013d5:	85 c0                	test   eax,eax
100013d7:	74 3e                	je     10001417 <ssfn_render+0xe0>
100013d9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
100013dc:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
100013e3:	56                   	push   esi
100013e4:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100013eb:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100013f2:	e8 a0 f4 ff ff       	call   10000897 <_ssfn_c>
100013f7:	5b                   	pop    ebx
100013f8:	85 c0                	test   eax,eax
100013fa:	0f 85 71 02 00 00    	jne    10001671 <ssfn_render+0x33a>
10001400:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001406:	81 e2 00 01 00 00    	and    edx,0x100
1000140c:	0f 84 fd 01 00 00    	je     1000160f <ssfn_render+0x2d8>
10001412:	e9 1d 02 00 00       	jmp    10001634 <ssfn_render+0x2fd>
10001417:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
1000141d:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10001424:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001428:	3d fd 00 00 00       	cmp    eax,0xfd
1000142d:	7f 08                	jg     10001437 <ssfn_render+0x100>
1000142f:	89 c3                	mov    ebx,eax
10001431:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001435:	eb 3f                	jmp    10001476 <ssfn_render+0x13f>
10001437:	31 db                	xor    ebx,ebx
10001439:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001441:	eb 33                	jmp    10001476 <ssfn_render+0x13f>
10001443:	85 c0                	test   eax,eax
10001445:	0f 84 64 01 00 00    	je     100015af <ssfn_render+0x278>
1000144b:	43                   	inc    ebx
1000144c:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
10001450:	7e 28                	jle    1000147a <ssfn_render+0x143>
10001452:	85 c0                	test   eax,eax
10001454:	0f 85 17 02 00 00    	jne    10001671 <ssfn_render+0x33a>
1000145a:	31 db                	xor    ebx,ebx
1000145c:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001464:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
1000146c:	74 92                	je     10001400 <ssfn_render+0xc9>
1000146e:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
10001476:	31 c0                	xor    eax,eax
10001478:	eb d2                	jmp    1000144c <ssfn_render+0x115>
1000147a:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
1000147e:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001485:	74 bc                	je     10001443 <ssfn_render+0x10c>
10001487:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001492:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001499:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014a0:	7e 50                	jle    100014f2 <ssfn_render+0x1bb>
100014a2:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014a5:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014a9:	c1 fa 04             	sar    edx,0x4
100014ac:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
100014b2:	80 e2 03             	and    dl,0x3
100014b5:	75 32                	jne    100014e9 <ssfn_render+0x1b2>
100014b7:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
100014bb:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014c1:	75 26                	jne    100014e9 <ssfn_render+0x1b2>
100014c3:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
100014ca:	50                   	push   eax
100014cb:	89 f8                	mov    eax,edi
100014cd:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014d4:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014db:	e8 b7 f3 ff ff       	call   10000897 <_ssfn_c>
100014e0:	59                   	pop    ecx
100014e1:	85 c0                	test   eax,eax
100014e3:	0f 85 04 01 00 00    	jne    100015ed <ssfn_render+0x2b6>
100014e9:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014f0:	eb a0                	jmp    10001492 <ssfn_render+0x15b>
100014f2:	85 c0                	test   eax,eax
100014f4:	0f 85 51 ff ff ff    	jne    1000144b <ssfn_render+0x114>
100014fa:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001505:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000150c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001513:	0f 8e f9 1b 00 00    	jle    10003112 <ssfn_render+0x1ddb>
10001519:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000151c:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001520:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001526:	74 09                	je     10001531 <ssfn_render+0x1fa>
10001528:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000152f:	eb d4                	jmp    10001505 <ssfn_render+0x1ce>
10001531:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001538:	57                   	push   edi
10001539:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001540:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001547:	e8 4b f3 ff ff       	call   10000897 <_ssfn_c>
1000154c:	5a                   	pop    edx
1000154d:	85 c0                	test   eax,eax
1000154f:	74 d7                	je     10001528 <ssfn_render+0x1f1>
10001551:	e9 97 00 00 00       	jmp    100015ed <ssfn_render+0x2b6>
10001556:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001559:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
1000155d:	c1 fa 04             	sar    edx,0x4
10001560:	31 ca                	xor    edx,ecx
10001562:	80 e2 03             	and    dl,0x3
10001565:	0f 84 b7 1b 00 00    	je     10003122 <ssfn_render+0x1deb>
1000156b:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001572:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001579:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
1000157f:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001586:	7f ce                	jg     10001556 <ssfn_render+0x21f>
10001588:	83 e1 03             	and    ecx,0x3
1000158b:	83 f9 03             	cmp    ecx,0x3
1000158e:	75 1f                	jne    100015af <ssfn_render+0x278>
10001590:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000159b:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015a2:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015a9:	0f 8f 9c 1b 00 00    	jg     1000314b <ssfn_render+0x1e14>
100015af:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015ba:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015c1:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015c8:	7e 3e                	jle    10001608 <ssfn_render+0x2d1>
100015ca:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015cd:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100015d4:	57                   	push   edi
100015d5:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100015dc:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100015e3:	e8 af f2 ff ff       	call   10000897 <_ssfn_c>
100015e8:	5a                   	pop    edx
100015e9:	85 c0                	test   eax,eax
100015eb:	74 12                	je     100015ff <ssfn_render+0x2c8>
100015ed:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100015f4:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
100015f7:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
100015fa:	e9 4c fe ff ff       	jmp    1000144b <ssfn_render+0x114>
100015ff:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001606:	eb b2                	jmp    100015ba <ssfn_render+0x283>
10001608:	31 c0                	xor    eax,eax
1000160a:	e9 3c fe ff ff       	jmp    1000144b <ssfn_render+0x114>
1000160f:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10001615:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001620:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10001626:	7f 16                	jg     1000163e <ssfn_render+0x307>
10001628:	89 da                	mov    edx,ebx
1000162a:	31 c0                	xor    eax,eax
1000162c:	39 da                	cmp    edx,ebx
1000162e:	7e 15                	jle    10001645 <ssfn_render+0x30e>
10001630:	85 c0                	test   eax,eax
10001632:	75 3d                	jne    10001671 <ssfn_render+0x33a>
10001634:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001639:	e9 47 1b 00 00       	jmp    10003185 <ssfn_render+0x1e4e>
1000163e:	bb 04 00 00 00       	mov    ebx,0x4
10001643:	eb e5                	jmp    1000162a <ssfn_render+0x2f3>
10001645:	85 c0                	test   eax,eax
10001647:	75 28                	jne    10001671 <ssfn_render+0x33a>
10001649:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
10001651:	74 1b                	je     1000166e <ssfn_render+0x337>
10001653:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
10001657:	8b 09                	mov    ecx,DWORD PTR [ecx]
10001659:	85 c9                	test   ecx,ecx
1000165b:	74 11                	je     1000166e <ssfn_render+0x337>
1000165d:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
10001660:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
10001664:	78 08                	js     1000166e <ssfn_render+0x337>
10001666:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001669:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
1000166c:	01 c8                	add    eax,ecx
1000166e:	42                   	inc    edx
1000166f:	eb bb                	jmp    1000162c <ssfn_render+0x2f5>
10001671:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001674:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001679:	85 d2                	test   edx,edx
1000167b:	0f 84 04 1b 00 00    	je     10003185 <ssfn_render+0x1e4e>
10001681:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001685:	0f 84 fa 1a 00 00    	je     10003185 <ssfn_render+0x1e4e>
1000168b:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001691:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001695:	85 ff                	test   edi,edi
10001697:	0f 84 e8 1a 00 00    	je     10003185 <ssfn_render+0x1e4e>
1000169d:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016a4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016a8:	c1 ef 10             	shr    edi,0x10
100016ab:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016af:	83 ff 10             	cmp    edi,0x10
100016b2:	0f 87 af fc ff ff    	ja     10001367 <ssfn_render+0x30>
100016b8:	8d 70 06             	lea    esi,[eax+0x6]
100016bb:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
100016c1:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100016c5:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
100016cb:	89 f7                	mov    edi,esi
100016cd:	81 e7 00 02 00 00    	and    edi,0x200
100016d3:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100016d7:	75 34                	jne    1000170d <ssfn_render+0x3d6>
100016d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100016dd:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
100016e4:	85 c9                	test   ecx,ecx
100016e6:	74 25                	je     1000170d <ssfn_render+0x3d6>
100016e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100016ec:	0f b6 ff             	movzx  edi,bh
100016ef:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
100016f2:	85 c9                	test   ecx,ecx
100016f4:	74 17                	je     1000170d <ssfn_render+0x3d6>
100016f6:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
100016fb:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
100016fe:	85 c9                	test   ecx,ecx
10001700:	74 0b                	je     1000170d <ssfn_render+0x3d6>
10001702:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001708:	e9 25 0d 00 00       	jmp    10002432 <ssfn_render+0x10fb>
1000170d:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001711:	f7 c6 40 00 00 00    	test   esi,0x40
10001717:	75 1a                	jne    10001733 <ssfn_render+0x3fc>
10001719:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
1000171d:	7e 10                	jle    1000172f <ssfn_render+0x3f8>
1000171f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001723:	83 c7 04             	add    edi,0x4
10001726:	83 e7 fc             	and    edi,0xfffffffc
10001729:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000172d:	eb 04                	jmp    10001733 <ssfn_render+0x3fc>
1000172f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001733:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001738:	f7 c6 02 00 00 00    	test   esi,0x2
1000173e:	74 14                	je     10001754 <ssfn_render+0x41d>
10001740:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
10001743:	c0 eb 05             	shr    bl,0x5
10001746:	89 df                	mov    edi,ebx
10001748:	83 f7 01             	xor    edi,0x1
1000174b:	83 e7 01             	and    edi,0x1
1000174e:	89 fb                	mov    ebx,edi
10001750:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
10001754:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
10001759:	83 e6 01             	and    esi,0x1
1000175c:	74 10                	je     1000176e <ssfn_render+0x437>
1000175e:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
10001762:	75 0a                	jne    1000176e <ssfn_render+0x437>
10001764:	8d 51 40             	lea    edx,[ecx+0x40]
10001767:	c1 fa 06             	sar    edx,0x6
1000176a:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
1000176e:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10001772:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001777:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000177b:	99                   	cdq    
1000177c:	f7 f9                	idiv   ecx
1000177e:	89 c1                	mov    ecx,eax
10001780:	31 c0                	xor    eax,eax
10001782:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001787:	74 0c                	je     10001795 <ssfn_render+0x45e>
10001789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000178d:	be 04 00 00 00       	mov    esi,0x4
10001792:	99                   	cdq    
10001793:	f7 fe                	idiv   esi
10001795:	01 c8                	add    eax,ecx
10001797:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
1000179c:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017a1:	01 f0                	add    eax,esi
100017a3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017af:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
100017b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100017b8:	3d ff f4 00 00       	cmp    eax,0xf4ff
100017bd:	0f 8f c2 19 00 00    	jg     10003185 <ssfn_render+0x1e4e>
100017c3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
100017c8:	0f 85 f0 00 00 00    	jne    100018be <ssfn_render+0x587>
100017ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100017d2:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
100017d6:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
100017dd:	75 2f                	jne    1000180e <ssfn_render+0x4d7>
100017df:	83 ec 0c             	sub    esp,0xc
100017e2:	68 00 04 00 00       	push   0x400
100017e7:	e8 fc ff ff ff       	call   100017e8 <ssfn_render+0x4b1>	100017e8: R_386_PC32	malloc
100017ec:	83 c4 10             	add    esp,0x10
100017ef:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
100017f5:	85 c0                	test   eax,eax
100017f7:	75 08                	jne    10001801 <ssfn_render+0x4ca>
100017f9:	83 c9 ff             	or     ecx,0xffffffff
100017fc:	e9 84 19 00 00       	jmp    10003185 <ssfn_render+0x1e4e>
10001801:	89 c7                	mov    edi,eax
10001803:	b9 00 01 00 00       	mov    ecx,0x100
10001808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000180c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000180e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001812:	0f b6 dc             	movzx  ebx,ah
10001815:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
1000181b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
1000181e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001821:	75 3a                	jne    1000185d <ssfn_render+0x526>
10001823:	83 ec 0c             	sub    esp,0xc
10001826:	68 00 04 00 00       	push   0x400
1000182b:	e8 fc ff ff ff       	call   1000182c <ssfn_render+0x4f5>	1000182c: R_386_PC32	malloc
10001830:	89 03                	mov    DWORD PTR [ebx],eax
10001832:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001839:	83 c4 10             	add    esp,0x10
1000183c:	89 c2                	mov    edx,eax
1000183e:	0f b6 c4             	movzx  eax,ah
10001841:	c1 ea 10             	shr    edx,0x10
10001844:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
1000184b:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
1000184e:	85 d2                	test   edx,edx
10001850:	74 a7                	je     100017f9 <ssfn_render+0x4c2>
10001852:	b9 00 01 00 00       	mov    ecx,0x100
10001857:	31 c0                	xor    eax,eax
10001859:	89 d7                	mov    edi,edx
1000185b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000185d:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
10001864:	83 ec 0c             	sub    esp,0xc
10001867:	0f b6 cc             	movzx  ecx,ah
1000186a:	89 c2                	mov    edx,eax
1000186c:	0f b6 c0             	movzx  eax,al
1000186f:	c1 ea 10             	shr    edx,0x10
10001872:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001879:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000187c:	8d 1c 82             	lea    ebx,[edx+eax*4]
1000187f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001883:	83 c0 08             	add    eax,0x8
10001886:	50                   	push   eax
10001887:	e8 fc ff ff ff       	call   10001888 <ssfn_render+0x551>	10001888: R_386_PC32	malloc
1000188c:	89 03                	mov    DWORD PTR [ebx],eax
1000188e:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001894:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
1000189b:	83 c4 10             	add    esp,0x10
1000189e:	89 c2                	mov    edx,eax
100018a0:	0f b6 cc             	movzx  ecx,ah
100018a3:	c1 ea 10             	shr    edx,0x10
100018a6:	0f b6 c0             	movzx  eax,al
100018a9:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018b0:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018b3:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
100018b7:	75 0e                	jne    100018c7 <ssfn_render+0x590>
100018b9:	e9 3b ff ff ff       	jmp    100017f9 <ssfn_render+0x4c2>
100018be:	8d 45 1c             	lea    eax,[ebp+0x1c]
100018c1:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018c7:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100018cd:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100018d1:	74 2a                	je     100018fd <ssfn_render+0x5c6>
100018d3:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100018d8:	74 23                	je     100018fd <ssfn_render+0x5c6>
100018da:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100018dd:	bb 04 00 00 00       	mov    ebx,0x4
100018e2:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
100018e6:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
100018ea:	89 cf                	mov    edi,ecx
100018ec:	29 c7                	sub    edi,eax
100018ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100018f2:	0f af c7             	imul   eax,edi
100018f5:	99                   	cdq    
100018f6:	f7 fb                	idiv   ebx
100018f8:	99                   	cdq    
100018f9:	f7 f9                	idiv   ecx
100018fb:	eb 02                	jmp    100018ff <ssfn_render+0x5c8>
100018fd:	31 c0                	xor    eax,eax
100018ff:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001905:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001909:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000190d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001915:	66 89 32             	mov    WORD PTR [edx],si
10001918:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
1000191d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001923:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001926:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000192c:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001932:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001935:	01 c3                	add    ebx,eax
10001937:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
1000193a:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001940:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001946:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001949:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
1000194c:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10001952:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001958:	8a 12                	mov    dl,BYTE PTR [edx]
1000195a:	83 e2 3f             	and    edx,0x3f
1000195d:	01 d0                	add    eax,edx
1000195f:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10001962:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001966:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000196c:	8d 50 08             	lea    edx,[eax+0x8]
1000196f:	b0 ff                	mov    al,0xff
10001971:	89 d7                	mov    edi,edx
10001973:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001975:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000197b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000197f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001985:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000198d:	c1 e0 04             	shl    eax,0x4
10001990:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001998:	c1 e0 04             	shl    eax,0x4
1000199b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000199f:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019a5:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019a9:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019ad:	0f 8e 4d 0a 00 00    	jle    10002400 <ssfn_render+0x10c9>
100019b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100019b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019bb:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
100019be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100019c1:	8a 12                	mov    dl,BYTE PTR [edx]
100019c3:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
100019c7:	83 e2 40             	and    edx,0x40
100019ca:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
100019ce:	88 c2                	mov    dl,al
100019d0:	21 ca                	and    edx,ecx
100019d2:	fe c2                	inc    dl
100019d4:	75 14                	jne    100019ea <ssfn_render+0x6b3>
100019d6:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
100019db:	19 c0                	sbb    eax,eax
100019dd:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
100019e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100019e5:	e9 09 0a 00 00       	jmp    100023f3 <ssfn_render+0x10bc>
100019ea:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
100019ee:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
100019f1:	c1 e0 04             	shl    eax,0x4
100019f4:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
100019f8:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100019fd:	99                   	cdq    
100019fe:	f7 fe                	idiv   esi
10001a00:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a04:	0f b6 c1             	movzx  eax,cl
10001a07:	c1 e0 04             	shl    eax,0x4
10001a0a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a0f:	99                   	cdq    
10001a10:	f7 fe                	idiv   esi
10001a12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a1a:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a1e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a22:	c1 e2 10             	shl    edx,0x10
10001a25:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a2a:	74 0e                	je     10001a3a <ssfn_render+0x703>
10001a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a30:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a35:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a38:	eb 0c                	jmp    10001a46 <ssfn_render+0x70f>
10001a3a:	c1 e0 08             	shl    eax,0x8
10001a3d:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a42:	09 d0                	or     eax,edx
10001a44:	09 c3                	or     ebx,eax
10001a46:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a49:	8a 01                	mov    al,BYTE PTR [ecx]
10001a4b:	84 c0                	test   al,al
10001a4d:	0f 88 17 05 00 00    	js     10001f6a <ssfn_render+0xc33>
10001a53:	89 c7                	mov    edi,eax
10001a55:	83 e7 3f             	and    edi,0x3f
10001a58:	a8 40                	test   al,0x40
10001a5a:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001a5e:	74 10                	je     10001a70 <ssfn_render+0x739>
10001a60:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001a64:	89 f8                	mov    eax,edi
10001a66:	41                   	inc    ecx
10001a67:	c1 e0 08             	shl    eax,0x8
10001a6a:	09 c2                	or     edx,eax
10001a6c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a70:	8d 41 01             	lea    eax,[ecx+0x1]
10001a73:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a7d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a81:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a94:	83 c0 04             	add    eax,0x4
10001a97:	c1 f8 02             	sar    eax,0x2
10001a9a:	01 c7                	add    edi,eax
10001a9c:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001aa3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001aa7:	0f 8f d7 01 00 00    	jg     10001c84 <ssfn_render+0x94d>
10001aad:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001ab0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001ab4:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001ab8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001abc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001ac0:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001ac3:	c1 e0 04             	shl    eax,0x4
10001ac6:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001acb:	99                   	cdq    
10001acc:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001ad0:	01 c6                	add    esi,eax
10001ad2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001ad6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001ada:	c1 e0 04             	shl    eax,0x4
10001add:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001ae2:	99                   	cdq    
10001ae3:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001ae7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001aeb:	01 c3                	add    ebx,eax
10001aed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001af1:	89 c8                	mov    eax,ecx
10001af3:	01 c9                	add    ecx,ecx
10001af5:	c1 f8 02             	sar    eax,0x2
10001af8:	83 e1 06             	and    ecx,0x6
10001afb:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001aff:	d3 f8                	sar    eax,cl
10001b01:	83 e0 03             	and    eax,0x3
10001b04:	89 c1                	mov    ecx,eax
10001b06:	83 f8 02             	cmp    eax,0x2
10001b09:	74 4a                	je     10001b55 <ssfn_render+0x81e>
10001b0b:	83 f8 03             	cmp    eax,0x3
10001b0e:	0f 84 e4 00 00 00    	je     10001bf8 <ssfn_render+0x8c1>
10001b14:	49                   	dec    ecx
10001b15:	74 20                	je     10001b37 <ssfn_render+0x800>
10001b17:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b1d:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b23:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b29:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b2f:	83 c7 02             	add    edi,0x2
10001b32:	e9 41 01 00 00       	jmp    10001c78 <ssfn_render+0x941>
10001b37:	83 c7 02             	add    edi,0x2
10001b3a:	50                   	push   eax
10001b3b:	50                   	push   eax
10001b3c:	89 e8                	mov    eax,ebp
10001b3e:	53                   	push   ebx
10001b3f:	56                   	push   esi
10001b40:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b44:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b48:	e8 9c e9 ff ff       	call   100004e9 <_ssfn_l>
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	e9 23 01 00 00       	jmp    10001c78 <ssfn_render+0x941>
10001b55:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001b59:	83 c7 04             	add    edi,0x4
10001b5c:	c1 e0 04             	shl    eax,0x4
10001b5f:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b64:	99                   	cdq    
10001b65:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001b6d:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b75:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b79:	c1 e0 04             	shl    eax,0x4
10001b7c:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b81:	99                   	cdq    
10001b82:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b86:	83 ec 0c             	sub    esp,0xc
10001b89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b8d:	6a 00                	push   0x0
10001b8f:	53                   	push   ebx
10001b90:	56                   	push   esi
10001b91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b95:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b99:	99                   	cdq    
10001b9a:	f7 f9                	idiv   ecx
10001b9c:	01 d8                	add    eax,ebx
10001b9e:	50                   	push   eax
10001b9f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001ba3:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001ba7:	99                   	cdq    
10001ba8:	f7 f9                	idiv   ecx
10001baa:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001bae:	50                   	push   eax
10001baf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001bb3:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bb7:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001bbd:	99                   	cdq    
10001bbe:	f7 f9                	idiv   ecx
10001bc0:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001bc6:	50                   	push   eax
10001bc7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001bcb:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001bd1:	99                   	cdq    
10001bd2:	f7 f9                	idiv   ecx
10001bd4:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001bda:	50                   	push   eax
10001bdb:	89 e8                	mov    eax,ebp
10001bdd:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001be3:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001be9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001bed:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001bf1:	e8 04 ea ff ff       	call   100005fa <_ssfn_b>
10001bf6:	eb 7d                	jmp    10001c75 <ssfn_render+0x93e>
10001bf8:	83 ec 0c             	sub    esp,0xc
10001bfb:	83 c7 06             	add    edi,0x6
10001bfe:	6a 00                	push   0x0
10001c00:	53                   	push   ebx
10001c01:	56                   	push   esi
10001c02:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c06:	c1 e0 04             	shl    eax,0x4
10001c09:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c0e:	99                   	cdq    
10001c0f:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c13:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c17:	50                   	push   eax
10001c18:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c1c:	c1 e0 04             	shl    eax,0x4
10001c1f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c24:	99                   	cdq    
10001c25:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c29:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c2d:	50                   	push   eax
10001c2e:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c32:	c1 e0 04             	shl    eax,0x4
10001c35:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c3a:	99                   	cdq    
10001c3b:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c3f:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c43:	50                   	push   eax
10001c44:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c48:	c1 e0 04             	shl    eax,0x4
10001c4b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001c50:	99                   	cdq    
10001c51:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001c55:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001c59:	50                   	push   eax
10001c5a:	89 e8                	mov    eax,ebp
10001c5c:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c62:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c68:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c6c:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c70:	e8 85 e9 ff ff       	call   100005fa <_ssfn_b>
10001c75:	83 c4 30             	add    esp,0x30
10001c78:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c7f:	e9 18 fe ff ff       	jmp    10001a9c <ssfn_render+0x765>
10001c84:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c8a:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c90:	75 0e                	jne    10001ca0 <ssfn_render+0x969>
10001c92:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c98:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c9e:	74 2e                	je     10001cce <ssfn_render+0x997>
10001ca0:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001ca6:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cac:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001cb0:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001cb6:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001cbc:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001cc2:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001cc7:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001cce:	b3 fe                	mov    bl,0xfe
10001cd0:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001cd7:	0f 8e 16 07 00 00    	jle    100023f3 <ssfn_render+0x10bc>
10001cdd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001ce5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001ced:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001cf5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001cfd:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d05:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d09:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d0d:	0f 8d de 06 00 00    	jge    100023f1 <ssfn_render+0x10ba>
10001d13:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d19:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d24:	83 e8 03             	sub    eax,0x3
10001d27:	31 f6                	xor    esi,esi
10001d29:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d2d:	89 f8                	mov    eax,edi
10001d2f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d33:	c1 f8 02             	sar    eax,0x2
10001d36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d3a:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d41:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d45:	0f 8e 16 01 00 00    	jle    10001e61 <ssfn_render+0xb2a>
10001d4b:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d51:	8d 47 01             	lea    eax,[edi+0x1]
10001d54:	01 c0                	add    eax,eax
10001d56:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001d5a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001d5e:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001d63:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001d67:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001d6b:	7d 0c                	jge    10001d79 <ssfn_render+0xa42>
10001d6d:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d71:	0f 8f db 00 00 00    	jg     10001e52 <ssfn_render+0xb1b>
10001d77:	eb 0a                	jmp    10001d83 <ssfn_render+0xa4c>
10001d79:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d7d:	0f 8e cf 00 00 00    	jle    10001e52 <ssfn_render+0xb1b>
10001d83:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d88:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d8c:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d91:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d95:	89 d8                	mov    eax,ebx
10001d97:	c1 fa 04             	sar    edx,0x4
10001d9a:	c1 f8 04             	sar    eax,0x4
10001d9d:	39 c2                	cmp    edx,eax
10001d9f:	75 0a                	jne    10001dab <ssfn_render+0xa74>
10001da1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001da5:	01 c8                	add    eax,ecx
10001da7:	d1 f8                	sar    eax,1
10001da9:	eb 1a                	jmp    10001dc5 <ssfn_render+0xa8e>
10001dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001daf:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001db3:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001db7:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001dbb:	0f af c1             	imul   eax,ecx
10001dbe:	99                   	cdq    
10001dbf:	f7 fb                	idiv   ebx
10001dc1:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001dc5:	c1 f8 04             	sar    eax,0x4
10001dc8:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001dcd:	74 04                	je     10001dd3 <ssfn_render+0xa9c>
10001dcf:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001dd3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001dd8:	75 3f                	jne    10001e19 <ssfn_render+0xae2>
10001dda:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001ddf:	74 38                	je     10001e19 <ssfn_render+0xae2>
10001de1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001de5:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001deb:	f7 db                	neg    ebx
10001ded:	01 c2                	add    edx,eax
10001def:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001df3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001df7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001dfb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001dff:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e03:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e07:	74 10                	je     10001e19 <ssfn_render+0xae2>
10001e09:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e0d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e11:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e15:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e19:	31 d2                	xor    edx,edx
10001e1b:	39 f2                	cmp    edx,esi
10001e1d:	75 0b                	jne    10001e2a <ssfn_render+0xaf3>
10001e1f:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e27:	46                   	inc    esi
10001e28:	eb 28                	jmp    10001e52 <ssfn_render+0xb1b>
10001e2a:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e32:	39 c1                	cmp    ecx,eax
10001e34:	7d 03                	jge    10001e39 <ssfn_render+0xb02>
10001e36:	42                   	inc    edx
10001e37:	eb e2                	jmp    10001e1b <ssfn_render+0xae4>
10001e39:	89 f1                	mov    ecx,esi
10001e3b:	49                   	dec    ecx
10001e3c:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e44:	39 d1                	cmp    ecx,edx
10001e46:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e4e:	7f eb                	jg     10001e3b <ssfn_render+0xb04>
10001e50:	eb cd                	jmp    10001e1f <ssfn_render+0xae8>
10001e52:	8d 47 02             	lea    eax,[edi+0x2]
10001e55:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001e5c:	e9 d9 fe ff ff       	jmp    10001d3a <ssfn_render+0xa03>
10001e61:	83 fe 01             	cmp    esi,0x1
10001e64:	7e 1f                	jle    10001e85 <ssfn_render+0xb4e>
10001e66:	f7 c6 01 00 00 00    	test   esi,0x1
10001e6c:	74 24                	je     10001e92 <ssfn_render+0xb5b>
10001e6e:	8d 46 ff             	lea    eax,[esi-0x1]
10001e71:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e79:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e81:	89 c6                	mov    esi,eax
10001e83:	eb 0d                	jmp    10001e92 <ssfn_render+0xb5b>
10001e85:	85 f6                	test   esi,esi
10001e87:	0f 84 c7 00 00 00    	je     10001f54 <ssfn_render+0xc1d>
10001e8d:	be 01 00 00 00       	mov    esi,0x1
10001e92:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e9c:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001ea0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ea4:	39 d1                	cmp    ecx,edx
10001ea6:	7d 0b                	jge    10001eb3 <ssfn_render+0xb7c>
10001ea8:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001eac:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001eb0:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001eb3:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ebe:	31 c0                	xor    eax,eax
10001ec0:	31 d2                	xor    edx,edx
10001ec2:	8d 4e ff             	lea    ecx,[esi-0x1]
10001ec5:	39 d1                	cmp    ecx,edx
10001ec7:	7e 7d                	jle    10001f46 <ssfn_render+0xc0f>
10001ec9:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001ed1:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001ed9:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001edd:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001ee1:	79 02                	jns    10001ee5 <ssfn_render+0xbae>
10001ee3:	31 c0                	xor    eax,eax
10001ee5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001ee9:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001eed:	39 cf                	cmp    edi,ecx
10001eef:	7e 04                	jle    10001ef5 <ssfn_render+0xbbe>
10001ef1:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001ef5:	85 d2                	test   edx,edx
10001ef7:	74 12                	je     10001f0b <ssfn_render+0xbd4>
10001ef9:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f01:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f05:	39 c8                	cmp    eax,ecx
10001f07:	7d 02                	jge    10001f0b <ssfn_render+0xbd4>
10001f09:	89 c8                	mov    eax,ecx
10001f0b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f0f:	7d 2b                	jge    10001f3c <ssfn_render+0xc05>
10001f11:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f15:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f1b:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f1e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f22:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f26:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f2a:	75 05                	jne    10001f31 <ssfn_render+0xbfa>
10001f2c:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f31:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f35:	40                   	inc    eax
10001f36:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f3a:	eb cf                	jmp    10001f0b <ssfn_render+0xbd4>
10001f3c:	83 c2 02             	add    edx,0x2
10001f3f:	b0 01                	mov    al,0x1
10001f41:	e9 7c ff ff ff       	jmp    10001ec2 <ssfn_render+0xb8b>
10001f46:	83 e6 fe             	and    esi,0xfffffffe
10001f49:	84 c0                	test   al,al
10001f4b:	74 07                	je     10001f54 <ssfn_render+0xc1d>
10001f4d:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001f54:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f58:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001f5c:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001f60:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001f65:	e9 9b fd ff ff       	jmp    10001d05 <ssfn_render+0x9ce>
10001f6a:	88 c2                	mov    dl,al
10001f6c:	80 e2 60             	and    dl,0x60
10001f6f:	0f 85 95 02 00 00    	jne    1000220a <ssfn_render+0xed3>
10001f75:	83 e0 1f             	and    eax,0x1f
10001f78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f7c:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f83:	c1 fb 04             	sar    ebx,0x4
10001f86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f8a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f8e:	40                   	inc    eax
10001f8f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f97:	c1 f8 04             	sar    eax,0x4
10001f9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fa2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001fa7:	99                   	cdq    
10001fa8:	f7 fe                	idiv   esi
10001faa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fb2:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001fb7:	99                   	cdq    
10001fb8:	f7 fe                	idiv   esi
10001fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001fbe:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001fc4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001fc8:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001fcc:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001fcf:	39 d6                	cmp    esi,edx
10001fd1:	7d 0a                	jge    10001fdd <ssfn_render+0xca6>
10001fd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001fd7:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001fda:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001fe1:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001fe9:	0f af c3             	imul   eax,ebx
10001fec:	31 ff                	xor    edi,edi
10001fee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001ff2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001ff6:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001ffa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002002:	29 d8                	sub    eax,ebx
10002004:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002008:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
1000200c:	0f 8d b1 00 00 00    	jge    100020c3 <ssfn_render+0xd8c>
10002012:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002016:	99                   	cdq    
10002017:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000201b:	89 c6                	mov    esi,eax
1000201d:	31 c0                	xor    eax,eax
1000201f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002024:	74 0e                	je     10002034 <ssfn_render+0xcfd>
10002026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000202a:	bb 04 00 00 00       	mov    ebx,0x4
1000202f:	29 f8                	sub    eax,edi
10002031:	99                   	cdq    
10002032:	f7 fb                	idiv   ebx
10002034:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002038:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002043:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10002047:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
1000204c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002053:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10002057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000205b:	39 d8                	cmp    eax,ebx
1000205d:	7d 4e                	jge    100020ad <ssfn_render+0xd76>
1000205f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002063:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10002068:	99                   	cdq    
10002069:	f7 fb                	idiv   ebx
1000206b:	8d 14 06             	lea    edx,[esi+eax*1]
1000206e:	83 e0 07             	and    eax,0x7
10002071:	c1 fa 03             	sar    edx,0x3
10002074:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002079:	0f a3 c2             	bt     edx,eax
1000207c:	72 0e                	jb     1000208c <ssfn_render+0xd55>
1000207e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002082:	43                   	inc    ebx
10002083:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000208a:	eb c0                	jmp    1000204c <ssfn_render+0xd15>
1000208c:	31 c0                	xor    eax,eax
1000208e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002092:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002096:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000209c:	40                   	inc    eax
1000209d:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020a1:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020a5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020a9:	7d e3                	jge    1000208e <ssfn_render+0xd57>
100020ab:	eb d1                	jmp    1000207e <ssfn_render+0xd47>
100020ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100020b1:	47                   	inc    edi
100020b2:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100020b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100020ba:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
100020be:	e9 45 ff ff ff       	jmp    10002008 <ssfn_render+0xcd1>
100020c3:	b3 fe                	mov    bl,0xfe
100020c5:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
100020cc:	0f 85 21 03 00 00    	jne    100023f3 <ssfn_render+0x10bc>
100020d2:	31 c0                	xor    eax,eax
100020d4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100020d8:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
100020dd:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100020e1:	0f 95 c0             	setne  al
100020e4:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100020e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020ec:	4f                   	dec    edi
100020ed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100020f1:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
100020f9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100020fd:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002104:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002108:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
1000210c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002110:	31 c0                	xor    eax,eax
10002112:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002115:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002119:	83 c1 04             	add    ecx,0x4
1000211c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002120:	0f 8d c0 02 00 00    	jge    100023e6 <ssfn_render+0x10af>
10002126:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
1000212a:	8d 77 01             	lea    esi,[edi+0x1]
1000212d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002131:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
10002135:	4f                   	dec    edi
10002136:	be 01 00 00 00       	mov    esi,0x1
1000213b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000213f:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002143:	7e 63                	jle    100021a8 <ssfn_render+0xe71>
10002145:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002149:	b9 01 00 00 00       	mov    ecx,0x1
1000214e:	89 ca                	mov    edx,ecx
10002150:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
10002154:	7e 45                	jle    1000219b <ssfn_render+0xe64>
10002156:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000215c:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10002161:	75 34                	jne    10002197 <ssfn_render+0xe60>
10002163:	89 c7                	mov    edi,eax
10002165:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002169:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
1000216d:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002171:	74 0c                	je     1000217f <ssfn_render+0xe48>
10002173:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002177:	01 d7                	add    edi,edx
10002179:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000217d:	75 18                	jne    10002197 <ssfn_render+0xe60>
1000217f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002183:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10002187:	74 06                	je     1000218f <ssfn_render+0xe58>
10002189:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000218d:	75 08                	jne    10002197 <ssfn_render+0xe60>
1000218f:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
10002193:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10002197:	41                   	inc    ecx
10002198:	40                   	inc    eax
10002199:	eb b3                	jmp    1000214e <ssfn_render+0xe17>
1000219b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000219f:	46                   	inc    esi
100021a0:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021a4:	b0 01                	mov    al,0x1
100021a6:	eb 97                	jmp    1000213f <ssfn_render+0xe08>
100021a8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021ac:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100021b0:	bb 01 00 00 00       	mov    ebx,0x1
100021b5:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
100021b9:	7e 3d                	jle    100021f8 <ssfn_render+0xec1>
100021bb:	b8 01 00 00 00       	mov    eax,0x1
100021c0:	89 c2                	mov    edx,eax
100021c2:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
100021c6:	7e 23                	jle    100021eb <ssfn_render+0xeb4>
100021c8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100021cc:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
100021d2:	8d 14 07             	lea    edx,[edi+eax*1]
100021d5:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
100021da:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100021de:	75 08                	jne    100021e8 <ssfn_render+0xeb1>
100021e0:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
100021e4:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
100021e8:	40                   	inc    eax
100021e9:	eb d5                	jmp    100021c0 <ssfn_render+0xe89>
100021eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100021ef:	43                   	inc    ebx
100021f0:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
100021f4:	b0 01                	mov    al,0x1
100021f6:	eb bd                	jmp    100021b5 <ssfn_render+0xe7e>
100021f8:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100021fb:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100021ff:	01 c9                	add    ecx,ecx
10002201:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002205:	e9 08 ff ff ff       	jmp    10002112 <ssfn_render+0xddb>
1000220a:	b3 fe                	mov    bl,0xfe
1000220c:	80 fa 20             	cmp    dl,0x20
1000220f:	0f 85 de 01 00 00    	jne    100023f3 <ssfn_render+0x10bc>
10002215:	89 c3                	mov    ebx,eax
10002217:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
1000221b:	c1 e3 08             	shl    ebx,0x8
1000221e:	81 e3 00 1f 00 00    	and    ebx,0x1f00
10002224:	09 c3                	or     ebx,eax
10002226:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
1000222a:	43                   	inc    ebx
1000222b:	40                   	inc    eax
1000222c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002230:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
10002234:	40                   	inc    eax
10002235:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002239:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000223d:	c1 f8 04             	sar    eax,0x4
10002240:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002248:	c1 f8 04             	sar    eax,0x4
1000224b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000224f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002253:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10002258:	99                   	cdq    
10002259:	f7 fe                	idiv   esi
1000225b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000225f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002263:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002268:	99                   	cdq    
10002269:	f7 fe                	idiv   esi
1000226b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000226f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002273:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002279:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000227d:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002281:	39 d6                	cmp    esi,edx
10002283:	7d 0b                	jge    10002290 <ssfn_render+0xf59>
10002285:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002289:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000228d:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002290:	83 c1 04             	add    ecx,0x4
10002293:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000229e:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022a1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022a5:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022a9:	72 35                	jb     100022e0 <ssfn_render+0xfa9>
100022ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100022b3:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
100022b8:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
100022bc:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100022c0:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100022c7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
100022cb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
100022d3:	31 d2                	xor    edx,edx
100022d5:	31 ff                	xor    edi,edi
100022d7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
100022db:	e9 cc 00 00 00       	jmp    100023ac <ssfn_render+0x1075>
100022e0:	8a 11                	mov    dl,BYTE PTR [ecx]
100022e2:	89 d0                	mov    eax,edx
100022e4:	83 e0 7f             	and    eax,0x7f
100022e7:	84 d2                	test   dl,dl
100022e9:	8d 78 01             	lea    edi,[eax+0x1]
100022ec:	78 09                	js     100022f7 <ssfn_render+0xfc0>
100022ee:	41                   	inc    ecx
100022ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100022f3:	89 ca                	mov    edx,ecx
100022f5:	eb 3d                	jmp    10002334 <ssfn_render+0xffd>
100022f7:	48                   	dec    eax
100022f8:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100022ff:	83 f8 fe             	cmp    eax,0xfffffffe
10002302:	74 16                	je     1000231a <ssfn_render+0xfe3>
10002304:	8d 5a 01             	lea    ebx,[edx+0x1]
10002307:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000230e:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002311:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002318:	eb dd                	jmp    100022f7 <ssfn_render+0xfc0>
1000231a:	83 c1 02             	add    ecx,0x2
1000231d:	eb 86                	jmp    100022a5 <ssfn_render+0xf6e>
1000231f:	42                   	inc    edx
10002320:	8d 73 01             	lea    esi,[ebx+0x1]
10002323:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
1000232a:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
1000232d:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
10002334:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002338:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
1000233f:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
10002344:	75 d9                	jne    1000231f <ssfn_render+0xfe8>
10002346:	01 f9                	add    ecx,edi
10002348:	e9 58 ff ff ff       	jmp    100022a5 <ssfn_render+0xf6e>
1000234d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002351:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10002355:	99                   	cdq    
10002356:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
1000235a:	0f af c8             	imul   ecx,eax
1000235d:	31 c0                	xor    eax,eax
1000235f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002364:	74 0e                	je     10002374 <ssfn_render+0x103d>
10002366:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000236a:	bb 04 00 00 00       	mov    ebx,0x4
1000236f:	29 f8                	sub    eax,edi
10002371:	99                   	cdq    
10002372:	f7 fb                	idiv   ebx
10002374:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002378:	31 db                	xor    ebx,ebx
1000237a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000237e:	31 f6                	xor    esi,esi
10002380:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
10002387:	01 c1                	add    ecx,eax
10002389:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
1000238d:	7f 30                	jg     100023bf <ssfn_render+0x1088>
1000238f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002393:	85 c0                	test   eax,eax
10002395:	79 02                	jns    10002399 <ssfn_render+0x1062>
10002397:	31 c0                	xor    eax,eax
10002399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000239d:	47                   	inc    edi
1000239e:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023a2:	b2 01                	mov    dl,0x1
100023a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023a8:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023ac:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100023b0:	7c 9b                	jl     1000234d <ssfn_render+0x1016>
100023b2:	84 d2                	test   dl,dl
100023b4:	74 3b                	je     100023f1 <ssfn_render+0x10ba>
100023b6:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
100023bd:	eb 32                	jmp    100023f1 <ssfn_render+0x10ba>
100023bf:	89 d8                	mov    eax,ebx
100023c1:	99                   	cdq    
100023c2:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100023c6:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
100023cd:	3c ff                	cmp    al,0xff
100023cf:	74 0e                	je     100023df <ssfn_render+0x10a8>
100023d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100023d5:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100023db:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
100023df:	46                   	inc    esi
100023e0:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
100023e4:	eb a3                	jmp    10002389 <ssfn_render+0x1052>
100023e6:	84 c0                	test   al,al
100023e8:	74 07                	je     100023f1 <ssfn_render+0x10ba>
100023ea:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
100023f1:	b3 fe                	mov    bl,0xfe
100023f3:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
100023f7:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
100023fb:	e9 9f f5 ff ff       	jmp    1000199f <ssfn_render+0x668>
10002400:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002406:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002409:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
1000240c:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
1000240f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002415:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002419:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
1000241d:	89 f0                	mov    eax,esi
1000241f:	89 d9                	mov    ecx,ebx
10002421:	43                   	inc    ebx
10002422:	39 de                	cmp    esi,ebx
10002424:	7e 08                	jle    1000242e <ssfn_render+0x10f7>
10002426:	48                   	dec    eax
10002427:	29 c8                	sub    eax,ecx
10002429:	88 42 07             	mov    BYTE PTR [edx+0x7],al
1000242c:	eb 04                	jmp    10002432 <ssfn_render+0x10fb>
1000242e:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10002432:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
1000243a:	0f 84 c9 0c 00 00    	je     10003109 <ssfn_render+0x1dd2>
10002440:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002446:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
1000244c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002450:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10002453:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10002457:	0f ba e0 0c          	bt     eax,0xc
1000245b:	72 22                	jb     1000247f <ssfn_render+0x1148>
1000245d:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10002460:	83 e0 0f             	and    eax,0xf
10002463:	3c 03                	cmp    al,0x3
10002465:	74 18                	je     1000247f <ssfn_render+0x1148>
10002467:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
1000246b:	84 c9                	test   cl,cl
1000246d:	74 10                	je     1000247f <ssfn_render+0x1148>
1000246f:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
10002473:	0f af d7             	imul   edx,edi
10002476:	89 d0                	mov    eax,edx
10002478:	99                   	cdq    
10002479:	f7 f9                	idiv   ecx
1000247b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000247f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002483:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002489:	7d 06                	jge    10002491 <ssfn_render+0x115a>
1000248b:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002491:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002497:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
1000249b:	0f b7 13             	movzx  edx,WORD PTR [ebx]
1000249e:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024a3:	89 d0                	mov    eax,edx
100024a5:	99                   	cdq    
100024a6:	f7 f9                	idiv   ecx
100024a8:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024b0:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
100024b3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
100024b7:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
100024bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024bf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
100024c4:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100024c8:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024cd:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024d1:	99                   	cdq    
100024d2:	f7 f9                	idiv   ecx
100024d4:	31 d2                	xor    edx,edx
100024d6:	83 ff 10             	cmp    edi,0x10
100024d9:	0f 9f c2             	setg   dl
100024dc:	42                   	inc    edx
100024dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
100024e1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
100024e5:	7d 08                	jge    100024ef <ssfn_render+0x11b8>
100024e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100024eb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
100024ef:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
100024f3:	39 c2                	cmp    edx,eax
100024f5:	7d 04                	jge    100024fb <ssfn_render+0x11c4>
100024f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024fb:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002500:	74 4c                	je     1000254e <ssfn_render+0x1217>
10002502:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002506:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000250b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000250f:	99                   	cdq    
10002510:	f7 f9                	idiv   ecx
10002512:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002516:	81 e2 00 08 00 00    	and    edx,0x800
1000251c:	74 04                	je     10002522 <ssfn_render+0x11eb>
1000251e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002522:	01 d0                	add    eax,edx
10002524:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
1000252a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000252e:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002532:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
10002536:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000253b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000253f:	99                   	cdq    
10002540:	f7 f9                	idiv   ecx
10002542:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002546:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
1000254c:	eb 22                	jmp    10002570 <ssfn_render+0x1239>
1000254e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002552:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
1000255c:	d1 f8                	sar    eax,1
1000255e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10002566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000256a:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002570:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002577:	8b 18                	mov    ebx,DWORD PTR [eax]
10002579:	85 db                	test   ebx,ebx
1000257b:	0f 84 2e 09 00 00    	je     10002eaf <ssfn_render+0x1b78>
10002581:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002585:	89 d1                	mov    ecx,edx
10002587:	89 d0                	mov    eax,edx
10002589:	66 c1 f9 0b          	sar    cx,0xb
1000258d:	c1 f8 1f             	sar    eax,0x1f
10002590:	31 c2                	xor    edx,eax
10002592:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10002596:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
1000259a:	88 c8                	mov    al,cl
1000259c:	83 e0 10             	and    eax,0x10
1000259f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025a7:	83 c0 40             	add    eax,0x40
100025aa:	c1 f8 06             	sar    eax,0x6
100025ad:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
100025b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100025b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
100025bc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
100025c0:	7d 08                	jge    100025ca <ssfn_render+0x1293>
100025c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100025c6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
100025ca:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100025cd:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
100025d5:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
100025d9:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
100025e1:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
100025e5:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100025ea:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100025ee:	99                   	cdq    
100025ef:	f7 f9                	idiv   ecx
100025f1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100025f5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100025ff:	0f b6 f4             	movzx  esi,ah
10002602:	89 c2                	mov    edx,eax
10002604:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002608:	c1 ea 10             	shr    edx,0x10
1000260b:	0f b6 fa             	movzx  edi,dl
1000260e:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
10002612:	0f b6 f8             	movzx  edi,al
10002615:	c1 e8 18             	shr    eax,0x18
10002618:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
1000261c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002620:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002627:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
1000262a:	0f b6 fc             	movzx  edi,ah
1000262d:	89 c2                	mov    edx,eax
1000262f:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002636:	c1 ea 10             	shr    edx,0x10
10002639:	0f b6 c0             	movzx  eax,al
1000263c:	0f b6 f2             	movzx  esi,dl
1000263f:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002646:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000264d:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002651:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002658:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000265f:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002663:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002667:	0f af c2             	imul   eax,edx
1000266a:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
1000266e:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002672:	8d 04 90             	lea    eax,[eax+edx*4]
10002675:	01 d8                	add    eax,ebx
10002677:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
1000267e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002689:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
1000268e:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002695:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002699:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
1000269d:	0f 8d e2 04 00 00    	jge    10002b85 <ssfn_render+0x184e>
100026a3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026aa:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100026b1:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026b5:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
100026b9:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100026bd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026c1:	39 d0                	cmp    eax,edx
100026c3:	0f 8d bc 04 00 00    	jge    10002b85 <ssfn_render+0x184e>
100026c9:	85 c0                	test   eax,eax
100026cb:	0f 88 94 04 00 00    	js     10002b65 <ssfn_render+0x182e>
100026d1:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100026d7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
100026db:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
100026df:	c1 e1 08             	shl    ecx,0x8
100026e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100026ea:	89 c8                	mov    eax,ecx
100026ec:	0f af c3             	imul   eax,ebx
100026ef:	99                   	cdq    
100026f0:	f7 fe                	idiv   esi
100026f2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
100026f9:	c1 f8 08             	sar    eax,0x8
100026fc:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10002703:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002709:	0f af c3             	imul   eax,ebx
1000270c:	99                   	cdq    
1000270d:	f7 fe                	idiv   esi
1000270f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002713:	c1 f8 08             	sar    eax,0x8
10002716:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
1000271d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002721:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002728:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
1000272f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002736:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
1000273a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000273e:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002742:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002746:	0f 8d 19 04 00 00    	jge    10002b65 <ssfn_render+0x182e>
1000274c:	85 c0                	test   eax,eax
1000274e:	0f 88 ff 03 00 00    	js     10002b53 <ssfn_render+0x181c>
10002754:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000275b:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
1000275f:	75 42                	jne    100027a3 <ssfn_render+0x146c>
10002761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002765:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000276c:	b9 10 00 00 00       	mov    ecx,0x10
10002771:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002774:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
1000277b:	89 c2                	mov    edx,eax
1000277d:	0f b6 fc             	movzx  edi,ah
10002780:	d3 ea                	shr    edx,cl
10002782:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002789:	0f b6 f2             	movzx  esi,dl
1000278c:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002790:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002797:	d3 e8                	shr    eax,cl
10002799:	0f b6 c0             	movzx  eax,al
1000279c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027a3:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027ad:	0f b7 18             	movzx  ebx,WORD PTR [eax]
100027b0:	c1 e1 08             	shl    ecx,0x8
100027b3:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
100027b7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
100027bf:	89 c8                	mov    eax,ecx
100027c1:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
100027c9:	0f af c3             	imul   eax,ebx
100027cc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100027d4:	99                   	cdq    
100027d5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
100027dd:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
100027e1:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
100027e9:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
100027f0:	c1 f8 08             	sar    eax,0x8
100027f3:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
100027fa:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002800:	0f af c3             	imul   eax,ebx
10002803:	99                   	cdq    
10002804:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002808:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
1000280c:	c1 f8 08             	sar    eax,0x8
1000280f:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10002816:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
1000281d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002821:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002825:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002829:	0f 8d 3b 02 00 00    	jge    10002a6a <ssfn_render+0x1733>
1000282f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
10002833:	c1 fa 08             	sar    edx,0x8
10002836:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
1000283d:	75 25                	jne    10002864 <ssfn_render+0x152d>
1000283f:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
10002844:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
1000284b:	b8 00 01 00 00       	mov    eax,0x100
10002850:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
10002858:	29 c8                	sub    eax,ecx
1000285a:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000285e:	39 c7                	cmp    edi,eax
10002860:	7e 1c                	jle    1000287e <ssfn_render+0x1547>
10002862:	eb 16                	jmp    1000287a <ssfn_render+0x1543>
10002864:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
1000286c:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002873:	75 09                	jne    1000287e <ssfn_render+0x1547>
10002875:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
1000287a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000287e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002882:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002885:	0f af c2             	imul   eax,edx
10002888:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
1000288f:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002894:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002899:	c1 f8 08             	sar    eax,0x8
1000289c:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028a3:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028ae:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
100028b2:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
100028b6:	0f 8d a1 01 00 00    	jge    10002a5d <ssfn_render+0x1726>
100028bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100028c0:	c1 f8 08             	sar    eax,0x8
100028c3:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
100028ca:	75 3b                	jne    10002907 <ssfn_render+0x15d0>
100028cc:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
100028d1:	ba 00 01 00 00       	mov    edx,0x100
100028d6:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
100028de:	29 ca                	sub    edx,ecx
100028e0:	89 f1                	mov    ecx,esi
100028e2:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
100028e9:	39 d1                	cmp    ecx,edx
100028eb:	7c 0e                	jl     100028fb <ssfn_render+0x15c4>
100028ed:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028f1:	81 fa 00 01 00 00    	cmp    edx,0x100
100028f7:	74 22                	je     1000291b <ssfn_render+0x15e4>
100028f9:	89 d1                	mov    ecx,edx
100028fb:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002900:	89 cf                	mov    edi,ecx
10002902:	c1 ff 08             	sar    edi,0x8
10002905:	eb 14                	jmp    1000291b <ssfn_render+0x15e4>
10002907:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
1000290e:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002915:	74 04                	je     1000291b <ssfn_render+0x15e4>
10002917:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000291b:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
1000291f:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
10002923:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
1000292a:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
1000292f:	81 fa ff 00 00 00    	cmp    edx,0xff
10002935:	75 37                	jne    1000296e <ssfn_render+0x1637>
10002937:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
1000293e:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002946:	0f af c7             	imul   eax,edi
10002949:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
1000294d:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002954:	0f af c7             	imul   eax,edi
10002957:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
1000295b:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002962:	0f af c7             	imul   eax,edi
10002965:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002969:	e9 e2 00 00 00       	jmp    10002a50 <ssfn_render+0x1719>
1000296e:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002974:	74 2d                	je     100029a3 <ssfn_render+0x166c>
10002976:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002979:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
1000297c:	85 c9                	test   ecx,ecx
1000297e:	74 23                	je     100029a3 <ssfn_render+0x166c>
10002980:	01 c8                	add    eax,ecx
10002982:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002985:	89 d9                	mov    ecx,ebx
10002987:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
1000298e:	c1 e9 10             	shr    ecx,0x10
10002991:	0f b6 f7             	movzx  esi,bh
10002994:	0f b6 c1             	movzx  eax,cl
10002997:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000299b:	0f b6 c3             	movzx  eax,bl
1000299e:	c1 eb 18             	shr    ebx,0x18
100029a1:	eb 14                	jmp    100029b7 <ssfn_render+0x1680>
100029a3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029af:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
100029b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100029b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
100029bd:	75 25                	jne    100029e4 <ssfn_render+0x16ad>
100029bf:	0f af c7             	imul   eax,edi
100029c2:	0f af f7             	imul   esi,edi
100029c5:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029c9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029cd:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
100029d3:	0f af cf             	imul   ecx,edi
100029d6:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
100029da:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
100029de:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
100029e2:	eb 6c                	jmp    10002a50 <ssfn_render+0x1719>
100029e4:	0f af f3             	imul   esi,ebx
100029e7:	0f af c3             	imul   eax,ebx
100029ea:	b9 ff 00 00 00       	mov    ecx,0xff
100029ef:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
100029f6:	29 d9                	sub    ecx,ebx
100029f8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
100029fc:	0f af d1             	imul   edx,ecx
100029ff:	b9 ff 00 00 00       	mov    ecx,0xff
10002a04:	01 d0                	add    eax,edx
10002a06:	0f af c7             	imul   eax,edi
10002a09:	99                   	cdq    
10002a0a:	f7 f9                	idiv   ecx
10002a0c:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a10:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a14:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a1c:	01 f0                	add    eax,esi
10002a1e:	89 ce                	mov    esi,ecx
10002a20:	0f af c7             	imul   eax,edi
10002a23:	99                   	cdq    
10002a24:	f7 f9                	idiv   ecx
10002a26:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a2a:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a2e:	0f af cb             	imul   ecx,ebx
10002a31:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a35:	0f af df             	imul   ebx,edi
10002a38:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a40:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a44:	01 c8                	add    eax,ecx
10002a46:	0f af c7             	imul   eax,edi
10002a49:	99                   	cdq    
10002a4a:	f7 fe                	idiv   esi
10002a4c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002a50:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002a58:	e9 51 fe ff ff       	jmp    100028ae <ssfn_render+0x1577>
10002a5d:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002a65:	e9 b7 fd ff ff       	jmp    10002821 <ssfn_render+0x14ea>
10002a6a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002a6f:	74 30                	je     10002aa1 <ssfn_render+0x176a>
10002a71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a75:	31 d2                	xor    edx,edx
10002a77:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a7b:	31 d2                	xor    edx,edx
10002a7d:	89 c1                	mov    ecx,eax
10002a7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a83:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a87:	31 d2                	xor    edx,edx
10002a89:	89 c6                	mov    esi,eax
10002a8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a8f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a93:	31 d2                	xor    edx,edx
10002a95:	89 c3                	mov    ebx,eax
10002a97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a9b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a9f:	eb 1c                	jmp    10002abd <ssfn_render+0x1786>
10002aa1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002aa5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002aa9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002aad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ab1:	c1 e9 08             	shr    ecx,0x8
10002ab4:	c1 ee 08             	shr    esi,0x8
10002ab7:	c1 eb 08             	shr    ebx,0x8
10002aba:	c1 e8 08             	shr    eax,0x8
10002abd:	83 f8 0f             	cmp    eax,0xf
10002ac0:	0f 86 8d 00 00 00    	jbe    10002b53 <ssfn_render+0x181c>
10002ac6:	89 ca                	mov    edx,ecx
10002ac8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002ace:	76 05                	jbe    10002ad5 <ssfn_render+0x179e>
10002ad0:	ba ff 00 00 00       	mov    edx,0xff
10002ad5:	b9 10 00 00 00       	mov    ecx,0x10
10002ada:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002ae1:	d3 e2                	shl    edx,cl
10002ae3:	3d ff 00 00 00       	cmp    eax,0xff
10002ae8:	89 d1                	mov    ecx,edx
10002aea:	76 05                	jbe    10002af1 <ssfn_render+0x17ba>
10002aec:	b8 ff 00 00 00       	mov    eax,0xff
10002af1:	c1 e0 18             	shl    eax,0x18
10002af4:	09 c8                	or     eax,ecx
10002af6:	81 fe ff 00 00 00    	cmp    esi,0xff
10002afc:	76 05                	jbe    10002b03 <ssfn_render+0x17cc>
10002afe:	be ff 00 00 00       	mov    esi,0xff
10002b03:	c1 e6 08             	shl    esi,0x8
10002b06:	09 f0                	or     eax,esi
10002b08:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b0e:	76 05                	jbe    10002b15 <ssfn_render+0x17de>
10002b10:	bb ff 00 00 00       	mov    ebx,0xff
10002b15:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b1d:	d3 e3                	shl    ebx,cl
10002b1f:	09 c3                	or     ebx,eax
10002b21:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b28:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b2b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b2f:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b33:	75 1e                	jne    10002b53 <ssfn_render+0x181c>
10002b35:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b3c:	7e 07                	jle    10002b45 <ssfn_render+0x180e>
10002b3e:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b49:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b4d:	7d 04                	jge    10002b53 <ssfn_render+0x181c>
10002b4f:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002b53:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b5b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002b5f:	0f 85 ca fb ff ff    	jne    1000272f <ssfn_render+0x13f8>
10002b65:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b6c:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b70:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b74:	25 fc ff 00 00       	and    eax,0xfffc
10002b79:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b80:	e9 10 fb ff ff       	jmp    10002695 <ssfn_render+0x135e>
10002b85:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b8c:	0f 84 90 01 00 00    	je     10002d22 <ssfn_render+0x19eb>
10002b92:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b9a:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002ba1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002ba5:	40                   	inc    eax
10002ba6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002baa:	29 c7                	sub    edi,eax
10002bac:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002bb0:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002bb4:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002bb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002bbc:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002bc0:	7e 09                	jle    10002bcb <ssfn_render+0x1894>
10002bc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002bc6:	40                   	inc    eax
10002bc7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002bcb:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002bd2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bd9:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002bdd:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002be1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002be5:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002be9:	0f af c2             	imul   eax,edx
10002bec:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002bf0:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002bf4:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002bf8:	03 07                	add    eax,DWORD PTR [edi]
10002bfa:	89 c7                	mov    edi,eax
10002bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c00:	c1 e0 18             	shl    eax,0x18
10002c03:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c07:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c0f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c1c:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c20:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c24:	0f 8e f8 00 00 00    	jle    10002d22 <ssfn_render+0x19eb>
10002c2a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c31:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c38:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c3c:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c40:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c44:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c48:	39 d0                	cmp    eax,edx
10002c4a:	0f 8d d2 00 00 00    	jge    10002d22 <ssfn_render+0x19eb>
10002c50:	31 db                	xor    ebx,ebx
10002c52:	85 c0                	test   eax,eax
10002c54:	79 23                	jns    10002c79 <ssfn_render+0x1942>
10002c56:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c5d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002c61:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002c65:	25 fc ff 00 00       	and    eax,0xfffc
10002c6a:	01 c7                	add    edi,eax
10002c6c:	eb aa                	jmp    10002c18 <ssfn_render+0x18e1>
10002c6e:	85 c0                	test   eax,eax
10002c70:	79 20                	jns    10002c92 <ssfn_render+0x195b>
10002c72:	43                   	inc    ebx
10002c73:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c77:	7c dd                	jl     10002c56 <ssfn_render+0x191f>
10002c79:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c80:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c84:	01 d8                	add    eax,ebx
10002c86:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c8a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c8e:	7c de                	jl     10002c6e <ssfn_render+0x1937>
10002c90:	eb c4                	jmp    10002c56 <ssfn_render+0x191f>
10002c92:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c96:	7e 06                	jle    10002c9e <ssfn_render+0x1967>
10002c98:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c9c:	7f d4                	jg     10002c72 <ssfn_render+0x193b>
10002c9e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002ca1:	b8 10 00 00 00       	mov    eax,0x10
10002ca6:	0f b6 f6             	movzx  esi,dh
10002ca9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002cad:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002cb1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002cb5:	89 d0                	mov    eax,edx
10002cb7:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002cbb:	d3 e8                	shr    eax,cl
10002cbd:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002cc1:	0f b6 c0             	movzx  eax,al
10002cc4:	d3 ea                	shr    edx,cl
10002cc6:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002cca:	0f b6 f2             	movzx  esi,dl
10002ccd:	29 c1                	sub    ecx,eax
10002ccf:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002cd3:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002cd8:	29 f2                	sub    edx,esi
10002cda:	c1 f9 08             	sar    ecx,0x8
10002cdd:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002ce2:	01 c8                	add    eax,ecx
10002ce4:	c1 fa 08             	sar    edx,0x8
10002ce7:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002ceb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002cef:	d3 e0                	shl    eax,cl
10002cf1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002cf5:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002cf9:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002cfd:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d01:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d06:	d3 e6                	shl    esi,cl
10002d08:	c1 fa 08             	sar    edx,0x8
10002d0b:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d0f:	c1 e2 08             	shl    edx,0x8
10002d12:	09 d0                	or     eax,edx
10002d14:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d18:	09 c6                	or     esi,eax
10002d1a:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d1d:	e9 50 ff ff ff       	jmp    10002c72 <ssfn_render+0x193b>
10002d22:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d29:	0f 84 80 01 00 00    	je     10002eaf <ssfn_render+0x1b78>
10002d2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d37:	d1 fa                	sar    edx,1
10002d39:	40                   	inc    eax
10002d3a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d42:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d46:	7e 09                	jle    10002d51 <ssfn_render+0x1a1a>
10002d48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d4c:	40                   	inc    eax
10002d4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d51:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d58:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d5f:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002d63:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002d6b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d6f:	01 d0                	add    eax,edx
10002d71:	0f af c1             	imul   eax,ecx
10002d74:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d78:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d7c:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d80:	03 03                	add    eax,DWORD PTR [ebx]
10002d82:	89 c7                	mov    edi,eax
10002d84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d88:	c1 e0 18             	shl    eax,0x18
10002d8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d8f:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d97:	01 d0                	add    eax,edx
10002d99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d9d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002da2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002da6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002daa:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002dae:	0f 8e fb 00 00 00    	jle    10002eaf <ssfn_render+0x1b78>
10002db4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002dbb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002dbf:	01 d8                	add    eax,ebx
10002dc1:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002dc8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dcc:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002dd0:	39 d0                	cmp    eax,edx
10002dd2:	0f 8d d7 00 00 00    	jge    10002eaf <ssfn_render+0x1b78>
10002dd8:	31 f6                	xor    esi,esi
10002dda:	85 c0                	test   eax,eax
10002ddc:	0f 89 ad 00 00 00    	jns    10002e8f <ssfn_render+0x1b58>
10002de2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002de9:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002ded:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002df1:	25 fc ff 00 00       	and    eax,0xfffc
10002df6:	01 c7                	add    edi,eax
10002df8:	eb ac                	jmp    10002da6 <ssfn_render+0x1a6f>
10002dfa:	85 c0                	test   eax,eax
10002dfc:	0f 88 82 00 00 00    	js     10002e84 <ssfn_render+0x1b4d>
10002e02:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e05:	b8 10 00 00 00       	mov    eax,0x10
10002e0a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e0e:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e16:	89 d8                	mov    eax,ebx
10002e18:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e1c:	d3 e8                	shr    eax,cl
10002e1e:	0f b6 cf             	movzx  ecx,bh
10002e21:	0f b6 c0             	movzx  eax,al
10002e24:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e28:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e2c:	d3 eb                	shr    ebx,cl
10002e2e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e32:	0f b6 db             	movzx  ebx,bl
10002e35:	29 c1                	sub    ecx,eax
10002e37:	29 da                	sub    edx,ebx
10002e39:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e3e:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e43:	c1 f9 08             	sar    ecx,0x8
10002e46:	c1 fa 08             	sar    edx,0x8
10002e49:	01 c8                	add    eax,ecx
10002e4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e4f:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e53:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e57:	d3 e0                	shl    eax,cl
10002e59:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002e5d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002e61:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e66:	c1 fa 08             	sar    edx,0x8
10002e69:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002e6d:	c1 e2 08             	shl    edx,0x8
10002e70:	09 d0                	or     eax,edx
10002e72:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e75:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e79:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e7d:	d3 e2                	shl    edx,cl
10002e7f:	09 c2                	or     edx,eax
10002e81:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e84:	46                   	inc    esi
10002e85:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e89:	0f 8c 53 ff ff ff    	jl     10002de2 <ssfn_render+0x1aab>
10002e8f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e96:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e9a:	01 f0                	add    eax,esi
10002e9c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ea0:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ea4:	0f 8c 50 ff ff ff    	jl     10002dfa <ssfn_render+0x1ac3>
10002eaa:	e9 33 ff ff ff       	jmp    10002de2 <ssfn_render+0x1aab>
10002eaf:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002eb6:	74 04                	je     10002ebc <ssfn_render+0x1b85>
10002eb8:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ec0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002ec4:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002eca:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ed1:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002ed5:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002edc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002edf:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002ee3:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002ee9:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002eed:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002ef2:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002ef6:	99                   	cdq    
10002ef7:	f7 f9                	idiv   ecx
10002ef9:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002efd:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f03:	25 80 00 00 00       	and    eax,0x80
10002f08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f0c:	0f 85 f7 01 00 00    	jne    10003109 <ssfn_render+0x1dd2>
10002f12:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f15:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f19:	0f 84 ea 01 00 00    	je     10003109 <ssfn_render+0x1dd2>
10002f1f:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f26:	83 ec 0c             	sub    esp,0xc
10002f29:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f30:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f37:	51                   	push   ecx
10002f38:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f3f:	e8 53 d9 ff ff       	call   10000897 <_ssfn_c>
10002f44:	83 c4 10             	add    esp,0x10
10002f47:	85 c0                	test   eax,eax
10002f49:	0f 84 ba 01 00 00    	je     10003109 <ssfn_render+0x1dd2>
10002f4f:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002f57:	0f 86 ac 01 00 00    	jbe    10003109 <ssfn_render+0x1dd2>
10002f5d:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f63:	8d 48 06             	lea    ecx,[eax+0x6]
10002f66:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f6c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f70:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f74:	0f 8e 8f 01 00 00    	jle    10003109 <ssfn_render+0x1dd2>
10002f7a:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f7c:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f80:	8a 18                	mov    bl,BYTE PTR [eax]
10002f82:	83 e3 40             	and    ebx,0x40
10002f85:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f8a:	75 14                	jne    10002fa0 <ssfn_render+0x1c69>
10002f8c:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f90:	75 0e                	jne    10002fa0 <ssfn_render+0x1c69>
10002f92:	80 fb 01             	cmp    bl,0x1
10002f95:	19 c0                	sbb    eax,eax
10002f97:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f9b:	e9 60 01 00 00       	jmp    10003100 <ssfn_render+0x1dc9>
10002fa0:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002fa4:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002fa8:	c1 e6 10             	shl    esi,0x10
10002fab:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002faf:	84 db                	test   bl,bl
10002fb1:	74 08                	je     10002fbb <ssfn_render+0x1c84>
10002fb3:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002fb6:	83 c1 06             	add    ecx,0x6
10002fb9:	eb 0c                	jmp    10002fc7 <ssfn_render+0x1c90>
10002fbb:	c1 e2 08             	shl    edx,0x8
10002fbe:	83 c1 05             	add    ecx,0x5
10002fc1:	89 d0                	mov    eax,edx
10002fc3:	09 f0                	or     eax,esi
10002fc5:	09 c7                	or     edi,eax
10002fc7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002fca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002fce:	01 f8                	add    eax,edi
10002fd0:	8a 10                	mov    dl,BYTE PTR [eax]
10002fd2:	88 d3                	mov    bl,dl
10002fd4:	83 e3 e0             	and    ebx,0xffffffe0
10002fd7:	80 fb c0             	cmp    bl,0xc0
10002fda:	0f 85 20 01 00 00    	jne    10003100 <ssfn_render+0x1dc9>
10002fe0:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002fe4:	c1 e2 08             	shl    edx,0x8
10002fe7:	83 c0 02             	add    eax,0x2
10002fea:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002ff0:	09 da                	or     edx,ebx
10002ff2:	8d 72 01             	lea    esi,[edx+0x1]
10002ff5:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002ff9:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003000:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10003004:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003009:	0f 84 f1 00 00 00    	je     10003100 <ssfn_render+0x1dc9>
1000300f:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10003013:	0f b7 10             	movzx  edx,WORD PTR [eax]
10003016:	c1 e3 10             	shl    ebx,0x10
10003019:	81 e3 00 00 0f 00    	and    ebx,0xf0000
1000301f:	09 d3                	or     ebx,edx
10003021:	39 de                	cmp    esi,ebx
10003023:	0f 82 cf 00 00 00    	jb     100030f8 <ssfn_render+0x1dc1>
10003029:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
1000302c:	89 d7                	mov    edi,edx
1000302e:	c1 e7 10             	shl    edi,0x10
10003031:	81 e7 00 00 0f 00    	and    edi,0xf0000
10003037:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000303b:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
1000303f:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10003043:	39 fe                	cmp    esi,edi
10003045:	0f 87 ad 00 00 00    	ja     100030f8 <ssfn_render+0x1dc1>
1000304b:	29 de                	sub    esi,ebx
1000304d:	c0 ea 04             	shr    dl,0x4
10003050:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10003057:	0f b6 d2             	movzx  edx,dl
1000305a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000305e:	89 d3                	mov    ebx,edx
10003060:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10003064:	c1 e3 10             	shl    ebx,0x10
10003067:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
1000306a:	09 da                	or     edx,ebx
1000306c:	c0 e8 04             	shr    al,0x4
1000306f:	c1 e0 18             	shl    eax,0x18
10003072:	09 c2                	or     edx,eax
10003074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003078:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
1000307b:	01 c2                	add    edx,eax
1000307d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003080:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
10003084:	39 d7                	cmp    edi,edx
10003086:	76 78                	jbe    10003100 <ssfn_render+0x1dc9>
10003088:	8a 1a                	mov    bl,BYTE PTR [edx]
1000308a:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003091:	89 de                	mov    esi,ebx
10003093:	83 e6 7f             	and    esi,0x7f
10003096:	39 c6                	cmp    esi,eax
10003098:	73 1d                	jae    100030b7 <ssfn_render+0x1d80>
1000309a:	48                   	dec    eax
1000309b:	bb 02 00 00 00       	mov    ebx,0x2
100030a0:	29 f0                	sub    eax,esi
100030a2:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030a9:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030ac:	84 c0                	test   al,al
100030ae:	78 03                	js     100030b3 <ssfn_render+0x1d7c>
100030b0:	8d 58 02             	lea    ebx,[eax+0x2]
100030b3:	01 da                	add    edx,ebx
100030b5:	eb cd                	jmp    10003084 <ssfn_render+0x1d4d>
100030b7:	be 01 00 00 00       	mov    esi,0x1
100030bc:	84 db                	test   bl,bl
100030be:	78 03                	js     100030c3 <ssfn_render+0x1d8c>
100030c0:	8d 70 01             	lea    esi,[eax+0x1]
100030c3:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
100030c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100030cb:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100030d0:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
100030d4:	99                   	cdq    
100030d5:	f7 fb                	idiv   ebx
100030d7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100030dc:	74 0d                	je     100030eb <ssfn_render+0x1db4>
100030de:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100030e5:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
100030e9:	eb 15                	jmp    10003100 <ssfn_render+0x1dc9>
100030eb:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
100030f2:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
100030f6:	eb 08                	jmp    10003100 <ssfn_render+0x1dc9>
100030f8:	83 c0 08             	add    eax,0x8
100030fb:	e9 00 ff ff ff       	jmp    10003000 <ssfn_render+0x1cc9>
10003100:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003104:	e9 5d fe ff ff       	jmp    10002f66 <ssfn_render+0x1c2f>
10003109:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003110:	eb 73                	jmp    10003185 <ssfn_render+0x1e4e>
10003112:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000311d:	e9 50 e4 ff ff       	jmp    10001572 <ssfn_render+0x23b>
10003122:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003129:	57                   	push   edi
1000312a:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003131:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003138:	e8 5a d7 ff ff       	call   10000897 <_ssfn_c>
1000313d:	5f                   	pop    edi
1000313e:	85 c0                	test   eax,eax
10003140:	0f 84 25 e4 ff ff    	je     1000156b <ssfn_render+0x234>
10003146:	e9 a2 e4 ff ff       	jmp    100015ed <ssfn_render+0x2b6>
1000314b:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000314e:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
10003152:	75 0c                	jne    10003160 <ssfn_render+0x1e29>
10003154:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000315b:	e9 3b e4 ff ff       	jmp    1000159b <ssfn_render+0x264>
10003160:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003167:	57                   	push   edi
10003168:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000316f:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003176:	e8 1c d7 ff ff       	call   10000897 <_ssfn_c>
1000317b:	59                   	pop    ecx
1000317c:	85 c0                	test   eax,eax
1000317e:	74 d4                	je     10003154 <ssfn_render+0x1e1d>
10003180:	e9 68 e4 ff ff       	jmp    100015ed <ssfn_render+0x2b6>
10003185:	81 c4 dc 05 01 00    	add    esp,0x105dc
1000318b:	89 c8                	mov    eax,ecx
1000318d:	5b                   	pop    ebx
1000318e:	5e                   	pop    esi
1000318f:	5f                   	pop    edi
10003190:	5d                   	pop    ebp
10003191:	c3                   	ret    

10003192 <ssfn_bbox>:
10003192:	55                   	push   ebp
10003193:	57                   	push   edi
10003194:	56                   	push   esi
10003195:	53                   	push   ebx
10003196:	83 ec 3c             	sub    esp,0x3c
10003199:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000319e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031a2:	0f 94 c0             	sete   al
100031a5:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031aa:	0f 94 c2             	sete   dl
100031ad:	09 d0                	or     eax,edx
100031af:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
100031b4:	0f 94 c2             	sete   dl
100031b7:	09 d0                	or     eax,edx
100031b9:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
100031be:	0f 94 c2             	sete   dl
100031c1:	09 d0                	or     eax,edx
100031c3:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
100031c8:	0f 94 c2             	sete   dl
100031cb:	08 d0                	or     al,dl
100031cd:	0f 85 7c 01 00 00    	jne    1000334f <ssfn_bbox+0x1bd>
100031d3:	85 db                	test   ebx,ebx
100031d5:	0f 84 74 01 00 00    	je     1000334f <ssfn_bbox+0x1bd>
100031db:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100031df:	31 f6                	xor    esi,esi
100031e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031e7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100031eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031f1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100031f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031fb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100031ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003205:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003209:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000320c:	0f 84 42 01 00 00    	je     10003354 <ssfn_bbox+0x1c2>
10003212:	8d 54 24 18          	lea    edx,[esp+0x18]
10003216:	b9 06 00 00 00       	mov    ecx,0x6
1000321b:	89 d7                	mov    edi,edx
1000321d:	89 f0                	mov    eax,esi
1000321f:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003229:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000322b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10003233:	31 ff                	xor    edi,edi
10003235:	bd 01 00 00 00       	mov    ebp,0x1
1000323a:	50                   	push   eax
1000323b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000323f:	8d 44 24 20          	lea    eax,[esp+0x20]
10003243:	50                   	push   eax
10003244:	53                   	push   ebx
10003245:	e8 fc ff ff ff       	call   10003246 <ssfn_bbox+0xb4>	10003246: R_386_PC32	ssfn_render
1000324a:	83 c4 10             	add    esp,0x10
1000324d:	89 c6                	mov    esi,eax
1000324f:	85 c0                	test   eax,eax
10003251:	74 6f                	je     100032c2 <ssfn_bbox+0x130>
10003253:	0f 88 fb 00 00 00    	js     10003354 <ssfn_bbox+0x1c2>
10003259:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000325f:	85 c0                	test   eax,eax
10003261:	0f 84 ed 00 00 00    	je     10003354 <ssfn_bbox+0x1c2>
10003267:	85 ed                	test   ebp,ebp
10003269:	74 0b                	je     10003276 <ssfn_bbox+0xe4>
1000326b:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003271:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10003276:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000327a:	74 12                	je     1000328e <ssfn_bbox+0xfc>
1000327c:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
10003282:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003286:	7d 2f                	jge    100032b7 <ssfn_bbox+0x125>
10003288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000328c:	eb 29                	jmp    100032b7 <ssfn_bbox+0x125>
1000328e:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003291:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10003296:	39 cd                	cmp    ebp,ecx
10003298:	7d 05                	jge    1000329f <ssfn_bbox+0x10d>
1000329a:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000329f:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032a3:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032a8:	84 d2                	test   dl,dl
100032aa:	75 04                	jne    100032b0 <ssfn_bbox+0x11e>
100032ac:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100032b0:	01 ca                	add    edx,ecx
100032b2:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
100032b7:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100032bb:	31 ed                	xor    ebp,ebp
100032bd:	e9 78 ff ff ff       	jmp    1000323a <ssfn_bbox+0xa8>
100032c2:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
100032c9:	74 23                	je     100032ee <ssfn_bbox+0x15c>
100032cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100032ce:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
100032d2:	75 1a                	jne    100032ee <ssfn_bbox+0x15c>
100032d4:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
100032da:	b9 04 00 00 00       	mov    ecx,0x4
100032df:	99                   	cdq    
100032e0:	f7 f9                	idiv   ecx
100032e2:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
100032e7:	29 f8                	sub    eax,edi
100032e9:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
100032ee:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032f4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032f8:	74 29                	je     10003323 <ssfn_bbox+0x191>
100032fa:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100032ff:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10003303:	89 01                	mov    DWORD PTR [ecx],eax
10003305:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003309:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000330f:	89 01                	mov    DWORD PTR [ecx],eax
10003311:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003315:	89 38                	mov    DWORD PTR [eax],edi
10003317:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000331b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000331f:	89 38                	mov    DWORD PTR [eax],edi
10003321:	eb 31                	jmp    10003354 <ssfn_bbox+0x1c2>
10003323:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003328:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
1000332c:	89 07                	mov    DWORD PTR [edi],eax
1000332e:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
10003333:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
10003337:	89 07                	mov    DWORD PTR [edi],eax
10003339:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000333d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003343:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003347:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000334d:	eb 05                	jmp    10003354 <ssfn_bbox+0x1c2>
1000334f:	be fc ff ff ff       	mov    esi,0xfffffffc
10003354:	83 c4 3c             	add    esp,0x3c
10003357:	89 f0                	mov    eax,esi
10003359:	5b                   	pop    ebx
1000335a:	5e                   	pop    esi
1000335b:	5f                   	pop    edi
1000335c:	5d                   	pop    ebp
1000335d:	c3                   	ret    

1000335e <ssfn_text>:
1000335e:	55                   	push   ebp
1000335f:	57                   	push   edi
10003360:	56                   	push   esi
10003361:	53                   	push   ebx
10003362:	83 ec 1c             	sub    esp,0x1c
10003365:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003369:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
1000336d:	85 f6                	test   esi,esi
1000336f:	0f 84 b2 00 00 00    	je     10003427 <ssfn_text+0xc9>
10003375:	85 ed                	test   ebp,ebp
10003377:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
1000337c:	0f 84 a5 00 00 00    	je     10003427 <ssfn_text+0xc9>
10003382:	83 ec 0c             	sub    esp,0xc
10003385:	6a 18                	push   0x18
10003387:	e8 fc ff ff ff       	call   10003388 <ssfn_text+0x2a>	10003388: R_386_PC32	malloc
1000338c:	83 c4 10             	add    esp,0x10
1000338f:	89 c3                	mov    ebx,eax
10003391:	85 c0                	test   eax,eax
10003393:	0f 84 8e 00 00 00    	je     10003427 <ssfn_text+0xc9>
10003399:	31 c0                	xor    eax,eax
1000339b:	b9 06 00 00 00       	mov    ecx,0x6
100033a0:	89 df                	mov    edi,ebx
100033a2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033ae:	74 79                	je     10003429 <ssfn_text+0xcb>
100033b0:	8d 43 0c             	lea    eax,[ebx+0xc]
100033b3:	52                   	push   edx
100033b4:	52                   	push   edx
100033b5:	50                   	push   eax
100033b6:	8d 43 0a             	lea    eax,[ebx+0xa]
100033b9:	50                   	push   eax
100033ba:	8d 43 06             	lea    eax,[ebx+0x6]
100033bd:	50                   	push   eax
100033be:	8d 43 04             	lea    eax,[ebx+0x4]
100033c1:	50                   	push   eax
100033c2:	56                   	push   esi
100033c3:	55                   	push   ebp
100033c4:	e8 fc ff ff ff       	call   100033c5 <ssfn_text+0x67>	100033c5: R_386_PC32	ssfn_bbox
100033c9:	83 c4 20             	add    esp,0x20
100033cc:	85 c0                	test   eax,eax
100033ce:	75 59                	jne    10003429 <ssfn_text+0xcb>
100033d0:	83 ec 0c             	sub    esp,0xc
100033d3:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
100033d7:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
100033db:	0f af c8             	imul   ecx,eax
100033de:	c1 e1 02             	shl    ecx,0x2
100033e1:	51                   	push   ecx
100033e2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100033e6:	e8 fc ff ff ff       	call   100033e7 <ssfn_text+0x89>	100033e7: R_386_PC32	malloc
100033eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100033ef:	89 c7                	mov    edi,eax
100033f1:	89 03                	mov    DWORD PTR [ebx],eax
100033f3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
100033f7:	83 c4 10             	add    esp,0x10
100033fa:	f3 aa                	rep stos BYTE PTR es:[edi],al
100033fc:	50                   	push   eax
100033fd:	56                   	push   esi
100033fe:	53                   	push   ebx
100033ff:	55                   	push   ebp
10003400:	e8 fc ff ff ff       	call   10003401 <ssfn_text+0xa3>	10003401: R_386_PC32	ssfn_render
10003405:	83 c4 10             	add    esp,0x10
10003408:	85 c0                	test   eax,eax
1000340a:	7e 04                	jle    10003410 <ssfn_text+0xb2>
1000340c:	01 c6                	add    esi,eax
1000340e:	eb ec                	jmp    100033fc <ssfn_text+0x9e>
10003410:	74 17                	je     10003429 <ssfn_text+0xcb>
10003412:	83 ec 0c             	sub    esp,0xc
10003415:	ff 33                	push   DWORD PTR [ebx]
10003417:	e8 fc ff ff ff       	call   10003418 <ssfn_text+0xba>	10003418: R_386_PC32	free
1000341c:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000341f:	e8 fc ff ff ff       	call   10003420 <ssfn_text+0xc2>	10003420: R_386_PC32	free
10003424:	83 c4 10             	add    esp,0x10
10003427:	31 db                	xor    ebx,ebx
10003429:	83 c4 1c             	add    esp,0x1c
1000342c:	89 d8                	mov    eax,ebx
1000342e:	5b                   	pop    ebx
1000342f:	5e                   	pop    esi
10003430:	5f                   	pop    edi
10003431:	5d                   	pop    ebp
10003432:	c3                   	ret    
10003433:	90                   	nop

10003434 <NIContext::drvPutpixel4(int, int, unsigned int)>:
10003434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003438:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000343e:	8b 10                	mov    edx,DWORD PTR [eax]
10003440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003444:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
10003447:	90                   	nop

10003448 <NIContext::drvDarken4(int, int, int)>:
10003448:	55                   	push   ebp
10003449:	57                   	push   edi
1000344a:	56                   	push   esi
1000344b:	53                   	push   ebx
1000344c:	83 ec 20             	sub    esp,0x20
1000344f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10003453:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10003457:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000345b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
1000345f:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
10003465:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003469:	8b 10                	mov    edx,DWORD PTR [eax]
1000346b:	56                   	push   esi
1000346c:	53                   	push   ebx
1000346d:	50                   	push   eax
1000346e:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003471:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003475:	89 c2                	mov    edx,eax
10003477:	0f b6 ec             	movzx  ebp,ah
1000347a:	c1 ea 10             	shr    edx,0x10
1000347d:	0f af e9             	imul   ebp,ecx
10003480:	0f b6 d2             	movzx  edx,dl
10003483:	0f b6 c0             	movzx  eax,al
10003486:	0f af d1             	imul   edx,ecx
10003489:	0f af c1             	imul   eax,ecx
1000348c:	c1 ea 07             	shr    edx,0x7
1000348f:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003495:	c1 e8 07             	shr    eax,0x7
10003498:	8b 39                	mov    edi,DWORD PTR [ecx]
1000349a:	c1 e2 10             	shl    edx,0x10
1000349d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034a1:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034a5:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034a9:	c1 ed 07             	shr    ebp,0x7
100034ac:	c1 e5 08             	shl    ebp,0x8
100034af:	09 ea                	or     edx,ebp
100034b1:	09 c2                	or     edx,eax
100034b3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
100034b7:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
100034ba:	83 c4 2c             	add    esp,0x2c
100034bd:	5b                   	pop    ebx
100034be:	5e                   	pop    esi
100034bf:	5f                   	pop    edi
100034c0:	5d                   	pop    ebp
100034c1:	ff e0                	jmp    eax
100034c3:	90                   	nop

100034c4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
100034c4:	55                   	push   ebp
100034c5:	b9 00 40 00 00       	mov    ecx,0x4000
100034ca:	57                   	push   edi
100034cb:	b0 ff                	mov    al,0xff
100034cd:	56                   	push   esi
100034ce:	53                   	push   ebx
100034cf:	83 ec 3c             	sub    esp,0x3c
100034d2:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
100034d6:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
100034da:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
100034dd:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
100034e1:	f3 aa                	rep stos BYTE PTR es:[edi],al
100034e3:	85 db                	test   ebx,ebx
100034e5:	75 10                	jne    100034f7 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
100034e7:	83 ec 0c             	sub    esp,0xc
100034ea:	68 d8 50 00 10       	push   0x100050d8	100034eb: R_386_32	.text
100034ef:	e8 fc ff ff ff       	call   100034f0 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	100034f0: R_386_PC32	KePanic(char const*)
100034f4:	83 c4 10             	add    esp,0x10
100034f7:	50                   	push   eax
100034f8:	50                   	push   eax
100034f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034fd:	50                   	push   eax
100034fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003502:	50                   	push   eax
10003503:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003507:	50                   	push   eax
10003508:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000350c:	50                   	push   eax
1000350d:	56                   	push   esi
1000350e:	68 00 00 00 00       	push   0x0	1000350f: R_386_32	ssfn_ctx
10003513:	e8 fc ff ff ff       	call   10003514 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	10003514: R_386_PC32	ssfn_bbox
10003518:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000351b:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
10003523:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003527:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
1000352f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10003533:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003538:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
1000353c:	0d 00 00 00 ff       	or     eax,0xff000000
10003541:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003545:	83 c4 1c             	add    esp,0x1c
10003548:	56                   	push   esi
10003549:	8d 44 24 20          	lea    eax,[esp+0x20]
1000354d:	50                   	push   eax
1000354e:	68 00 00 00 00       	push   0x0	1000354f: R_386_32	ssfn_ctx
10003553:	e8 fc ff ff ff       	call   10003554 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	10003554: R_386_PC32	ssfn_render
10003558:	83 c4 10             	add    esp,0x10
1000355b:	89 03                	mov    DWORD PTR [ebx],eax
1000355d:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
10003561:	31 db                	xor    ebx,ebx
10003563:	89 f0                	mov    eax,esi
10003565:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003569:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000356d:	7e 3f                	jle    100035ae <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
1000356f:	31 ff                	xor    edi,edi
10003571:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003576:	39 f8                	cmp    eax,edi
10003578:	7e 2c                	jle    100035a6 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
1000357a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000357d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003580:	83 f8 ff             	cmp    eax,0xffffffff
10003583:	74 1d                	je     100035a2 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003585:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
1000358b:	25 ff ff ff 00       	and    eax,0xffffff
10003590:	8b 0a                	mov    ecx,DWORD PTR [edx]
10003592:	50                   	push   eax
10003593:	56                   	push   esi
10003594:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003598:	01 f8                	add    eax,edi
1000359a:	50                   	push   eax
1000359b:	52                   	push   edx
1000359c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000359f:	83 c4 10             	add    esp,0x10
100035a2:	43                   	inc    ebx
100035a3:	47                   	inc    edi
100035a4:	eb cb                	jmp    10003571 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035a6:	29 c3                	sub    ebx,eax
100035a8:	46                   	inc    esi
100035a9:	83 c3 40             	add    ebx,0x40
100035ac:	eb b5                	jmp    10003563 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035ae:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035b3:	83 c4 3c             	add    esp,0x3c
100035b6:	5b                   	pop    ebx
100035b7:	5e                   	pop    esi
100035b8:	5f                   	pop    edi
100035b9:	5d                   	pop    ebp
100035ba:	c3                   	ret    
100035bb:	90                   	nop

100035bc <NIContext::~NIContext()>:
100035bc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100035c0: R_386_32	ssfn_ctx
100035c4:	e9 00 db ff ff       	jmp    100010c9 <ssfn_free>
100035c9:	90                   	nop

100035ca <NIContext::NIContext(Video*, int, int, int, int)>:
100035ca:	55                   	push   ebp
100035cb:	ba 00 00 00 00       	mov    edx,0x0	100035cc: R_386_32	ssfn_ctx
100035d0:	57                   	push   edi
100035d1:	b9 72 3d 00 00       	mov    ecx,0x3d72
100035d6:	56                   	push   esi
100035d7:	89 d7                	mov    edi,edx
100035d9:	53                   	push   ebx
100035da:	81 ec 48 02 00 00    	sub    esp,0x248
100035e0:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
100035e7:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
100035ee:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
100035f4:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
100035fb:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003601:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003608:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
1000360e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
10003615:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
1000361b:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
10003622:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003628:	31 c0                	xor    eax,eax
1000362a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000362c:	68 00 40 00 00       	push   0x4000
10003631:	e8 fc ff ff ff       	call   10003632 <NIContext::NIContext(Video*, int, int, int, int)+0x68>	10003632: R_386_PC32	malloc
10003636:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003640:	89 03                	mov    DWORD PTR [ebx],eax
10003642:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003649:	e8 fc ff ff ff       	call   1000364a <NIContext::NIContext(Video*, int, int, int, int)+0x80>	1000364a: R_386_PC32	malloc
1000364e:	83 c4 0c             	add    esp,0xc
10003651:	89 c6                	mov    esi,eax
10003653:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003655: R_386_32	kernelProcess
10003659:	68 f1 50 00 10       	push   0x100050f1	1000365a: R_386_32	.text
1000365e:	50                   	push   eax
1000365f:	e8 fc ff ff ff       	call   10003660 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	10003660: R_386_PC32	Directory::Directory(char const*, Process*)
10003664:	83 c4 10             	add    esp,0x10
10003667:	85 f6                	test   esi,esi
10003669:	75 10                	jne    1000367b <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
1000366b:	83 ec 0c             	sub    esp,0xc
1000366e:	68 05 51 00 10       	push   0x10005105	1000366f: R_386_32	.text
10003673:	e8 fc ff ff ff       	call   10003674 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003674: R_386_PC32	KePanic(char const*)
10003678:	83 c4 10             	add    esp,0x10
1000367b:	83 ec 0c             	sub    esp,0xc
1000367e:	56                   	push   esi
1000367f:	e8 fc ff ff ff       	call   10003680 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003680: R_386_PC32	Directory::open()
10003684:	83 c4 10             	add    esp,0x10
10003687:	85 c0                	test   eax,eax
10003689:	75 e0                	jne    1000366b <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
1000368b:	83 ec 0c             	sub    esp,0xc
1000368e:	8b 06                	mov    eax,DWORD PTR [esi]
10003690:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003694:	51                   	push   ecx
10003695:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
1000369c:	52                   	push   edx
1000369d:	6a 00                	push   0x0
1000369f:	68 10 01 00 00       	push   0x110
100036a4:	56                   	push   esi
100036a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036a8:	83 c4 20             	add    esp,0x20
100036ab:	85 c0                	test   eax,eax
100036ad:	0f 85 a0 01 00 00    	jne    10003853 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036b3:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
100036bb:	0f 85 92 01 00 00    	jne    10003853 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036c1:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
100036c8:	83 c9 ff             	or     ecx,0xffffffff
100036cb:	83 ec 0c             	sub    esp,0xc
100036ce:	89 ef                	mov    edi,ebp
100036d0:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100036d2:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
100036d8:	89 ca                	mov    edx,ecx
100036da:	f7 d2                	not    edx
100036dc:	52                   	push   edx
100036dd:	e8 fc ff ff ff       	call   100036de <NIContext::NIContext(Video*, int, int, int, int)+0x114>	100036de: R_386_PC32	malloc
100036e2:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
100036e6:	47                   	inc    edi
100036e7:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
100036ed:	5a                   	pop    edx
100036ee:	59                   	pop    ecx
100036ef:	55                   	push   ebp
100036f0:	50                   	push   eax
100036f1:	e8 fc ff ff ff       	call   100036f2 <NIContext::NIContext(Video*, int, int, int, int)+0x128>	100036f2: R_386_PC32	strcpy
100036f6:	5f                   	pop    edi
100036f7:	58                   	pop    eax
100036f8:	68 20 51 00 10       	push   0x10005120	100036f9: R_386_32	.text
100036fd:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003701:	57                   	push   edi
10003702:	e8 fc ff ff ff       	call   10003703 <NIContext::NIContext(Video*, int, int, int, int)+0x139>	10003703: R_386_PC32	strcpy
10003707:	58                   	pop    eax
10003708:	5a                   	pop    edx
10003709:	55                   	push   ebp
1000370a:	57                   	push   edi
1000370b:	e8 fc ff ff ff       	call   1000370c <NIContext::NIContext(Video*, int, int, int, int)+0x142>	1000370c: R_386_PC32	strcat
10003710:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003717:	e8 fc ff ff ff       	call   10003718 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003718: R_386_PC32	malloc
1000371c:	83 c4 0c             	add    esp,0xc
1000371f:	89 c5                	mov    ebp,eax
10003721:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003723: R_386_32	kernelProcess
10003727:	57                   	push   edi
10003728:	50                   	push   eax
10003729:	e8 fc ff ff ff       	call   1000372a <NIContext::NIContext(Video*, int, int, int, int)+0x160>	1000372a: R_386_PC32	File::File(char const*, Process*)
1000372e:	83 c4 10             	add    esp,0x10
10003731:	85 ed                	test   ebp,ebp
10003733:	0f 84 52 ff ff ff    	je     1000368b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003739:	50                   	push   eax
1000373a:	50                   	push   eax
1000373b:	6a 01                	push   0x1
1000373d:	55                   	push   ebp
1000373e:	e8 fc ff ff ff       	call   1000373f <NIContext::NIContext(Video*, int, int, int, int)+0x175>	1000373f: R_386_PC32	File::open(FileOpenMode)
10003743:	83 c4 10             	add    esp,0x10
10003746:	85 c0                	test   eax,eax
10003748:	74 0c                	je     10003756 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
1000374a:	83 ec 0c             	sub    esp,0xc
1000374d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003750:	55                   	push   ebp
10003751:	e9 b4 00 00 00       	jmp    1000380a <NIContext::NIContext(Video*, int, int, int, int)+0x240>
10003756:	50                   	push   eax
10003757:	8d 44 24 17          	lea    eax,[esp+0x17]
1000375b:	50                   	push   eax
1000375c:	8d 44 24 20          	lea    eax,[esp+0x20]
10003760:	50                   	push   eax
10003761:	55                   	push   ebp
10003762:	e8 fc ff ff ff       	call   10003763 <NIContext::NIContext(Video*, int, int, int, int)+0x199>	10003763: R_386_PC32	File::stat(unsigned long long*, bool*)
10003767:	83 c4 10             	add    esp,0x10
1000376a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
1000376f:	74 0e                	je     1000377f <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003771:	83 ec 0c             	sub    esp,0xc
10003774:	55                   	push   ebp
10003775:	e8 fc ff ff ff       	call   10003776 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	10003776: R_386_PC32	File::close()
1000377a:	e9 85 00 00 00       	jmp    10003804 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
1000377f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003783:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000378b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000378f:	83 ec 0c             	sub    esp,0xc
10003792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003796:	e8 fc ff ff ff       	call   10003797 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	10003797: R_386_PC32	malloc
1000379b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000379f:	58                   	pop    eax
100037a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037a3:	8d 54 24 20          	lea    edx,[esp+0x20]
100037a7:	52                   	push   edx
100037a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037b4:	55                   	push   ebp
100037b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100037b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100037bc:	83 c4 1c             	add    esp,0x1c
100037bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037c7:	68 35 51 00 10       	push   0x10005135	100037c8: R_386_32	.text
100037cc:	e8 fc ff ff ff       	call   100037cd <NIContext::NIContext(Video*, int, int, int, int)+0x203>	100037cd: R_386_PC32	Dbg::kprintf(char const*, ...)
100037d1:	83 c4 10             	add    esp,0x10
100037d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100037d8:	85 c0                	test   eax,eax
100037da:	75 15                	jne    100037f1 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
100037dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100037e0:	89 c1                	mov    ecx,eax
100037e2:	c1 f9 1f             	sar    ecx,0x1f
100037e5:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
100037e9:	75 06                	jne    100037f1 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
100037eb:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
100037ef:	74 24                	je     10003815 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
100037f1:	83 ec 0c             	sub    esp,0xc
100037f4:	55                   	push   ebp
100037f5:	e8 fc ff ff ff       	call   100037f6 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	100037f6: R_386_PC32	File::close()
100037fa:	58                   	pop    eax
100037fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100037ff:	e8 fc ff ff ff       	call   10003800 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003800: R_386_PC32	free
10003804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003807:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000380a:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000380d:	83 c4 10             	add    esp,0x10
10003810:	e9 76 fe ff ff       	jmp    1000368b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003815:	50                   	push   eax
10003816:	50                   	push   eax
10003817:	57                   	push   edi
10003818:	68 49 51 00 10       	push   0x10005149	10003819: R_386_32	.text
1000381d:	e8 fc ff ff ff       	call   1000381e <NIContext::NIContext(Video*, int, int, int, int)+0x254>	1000381e: R_386_PC32	Dbg::kprintf(char const*, ...)
10003822:	5a                   	pop    edx
10003823:	59                   	pop    ecx
10003824:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003828:	68 00 00 00 00       	push   0x0	10003829: R_386_32	ssfn_ctx
1000382d:	e8 fc ff ff ff       	call   1000382e <NIContext::NIContext(Video*, int, int, int, int)+0x264>	1000382e: R_386_PC32	ssfn_load
10003832:	5b                   	pop    ebx
10003833:	5f                   	pop    edi
10003834:	50                   	push   eax
10003835:	68 5a 51 00 10       	push   0x1000515a	10003836: R_386_32	.text
1000383a:	e8 fc ff ff ff       	call   1000383b <NIContext::NIContext(Video*, int, int, int, int)+0x271>	1000383b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000383f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003842:	e8 fc ff ff ff       	call   10003843 <NIContext::NIContext(Video*, int, int, int, int)+0x279>	10003843: R_386_PC32	File::close()
10003847:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000384a:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000384d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003850:	83 c4 10             	add    esp,0x10
10003853:	83 ec 0c             	sub    esp,0xc
10003856:	56                   	push   esi
10003857:	e8 fc ff ff ff       	call   10003858 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	10003858: R_386_PC32	Directory::close()
1000385c:	8b 06                	mov    eax,DWORD PTR [esi]
1000385e:	89 34 24             	mov    DWORD PTR [esp],esi
10003861:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003864:	b8 00 00 00 00       	mov    eax,0x0	10003865: R_386_32	ssfn_ctx
10003869:	e8 f7 cb ff ff       	call   10000465 <_ssfn_fc.part.1>
1000386e:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003870: R_386_32	ssfn_ctx
10003878:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	1000387a: R_386_32	ssfn_ctx
10003882:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003884: R_386_32	ssfn_ctx
1000388c:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	1000388e: R_386_32	ssfn_ctx
10003896:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003898: R_386_32	ssfn_ctx
100038a0:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038a2: R_386_32	ssfn_ctx
100038aa:	81 c4 4c 02 00 00    	add    esp,0x24c
100038b0:	5b                   	pop    ebx
100038b1:	5e                   	pop    esi
100038b2:	5f                   	pop    edi
100038b3:	5d                   	pop    ebp
100038b4:	c3                   	ret    
100038b5:	90                   	nop

100038b6 <NiLoadCursors()>:
100038b6:	55                   	push   ebp
100038b7:	57                   	push   edi
100038b8:	56                   	push   esi
100038b9:	53                   	push   ebx
100038ba:	83 ec 38             	sub    esp,0x38
100038bd:	68 14 01 00 00       	push   0x114
100038c2:	e8 fc ff ff ff       	call   100038c3 <NiLoadCursors()+0xd>	100038c3: R_386_PC32	malloc
100038c7:	83 c4 0c             	add    esp,0xc
100038ca:	89 c5                	mov    ebp,eax
100038cc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100038ce: R_386_32	kernelProcess
100038d2:	68 1c 54 00 10       	push   0x1000541c	100038d3: R_386_32	.text
100038d7:	50                   	push   eax
100038d8:	e8 fc ff ff ff       	call   100038d9 <NiLoadCursors()+0x23>	100038d9: R_386_PC32	File::File(char const*, Process*)
100038dd:	58                   	pop    eax
100038de:	5a                   	pop    edx
100038df:	6a 01                	push   0x1
100038e1:	55                   	push   ebp
100038e2:	e8 fc ff ff ff       	call   100038e3 <NiLoadCursors()+0x2d>	100038e3: R_386_PC32	File::open(FileOpenMode)
100038e7:	83 c4 10             	add    esp,0x10
100038ea:	85 c0                	test   eax,eax
100038ec:	74 0a                	je     100038f8 <NiLoadCursors()+0x42>
100038ee:	83 ec 0c             	sub    esp,0xc
100038f1:	68 3b 54 00 10       	push   0x1000543b	100038f2: R_386_32	.text
100038f6:	eb 4c                	jmp    10003944 <NiLoadCursors()+0x8e>
100038f8:	53                   	push   ebx
100038f9:	8d 44 24 17          	lea    eax,[esp+0x17]
100038fd:	50                   	push   eax
100038fe:	8d 44 24 20          	lea    eax,[esp+0x20]
10003902:	50                   	push   eax
10003903:	55                   	push   ebp
10003904:	e8 fc ff ff ff       	call   10003905 <NiLoadCursors()+0x4f>	10003905: R_386_PC32	File::stat(unsigned long long*, bool*)
10003909:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000390d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003911:	89 34 24             	mov    DWORD PTR [esp],esi
10003914:	e8 fc ff ff ff       	call   10003915 <NiLoadCursors()+0x5f>	10003915: R_386_PC32	malloc
10003919:	89 c3                	mov    ebx,eax
1000391b:	58                   	pop    eax
1000391c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000391f:	8d 54 24 20          	lea    edx,[esp+0x20]
10003923:	52                   	push   edx
10003924:	53                   	push   ebx
10003925:	57                   	push   edi
10003926:	56                   	push   esi
10003927:	55                   	push   ebp
10003928:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000392b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000392f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003933:	83 c4 20             	add    esp,0x20
10003936:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
1000393a:	74 12                	je     1000394e <NiLoadCursors()+0x98>
1000393c:	83 ec 0c             	sub    esp,0xc
1000393f:	68 4f 54 00 10       	push   0x1000544f	10003940: R_386_32	.text
10003944:	e8 fc ff ff ff       	call   10003945 <NiLoadCursors()+0x8f>	10003945: R_386_PC32	Dbg::kprintf(char const*, ...)
10003949:	e9 3d 01 00 00       	jmp    10003a8b <NiLoadCursors()+0x1d5>
1000394e:	6a 00                	push   0x0
10003950:	31 ed                	xor    ebp,ebp
10003952:	68 04 01 00 00       	push   0x104
10003957:	52                   	push   edx
10003958:	50                   	push   eax
10003959:	e8 fc ff ff ff       	call   1000395a <NiLoadCursors()+0xa4>	1000395a: R_386_PC32	__udivdi3
1000395e:	5a                   	pop    edx
1000395f:	59                   	pop    ecx
10003960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003964:	50                   	push   eax
10003965:	68 63 54 00 10       	push   0x10005463	10003966: R_386_32	.text
1000396a:	e8 fc ff ff ff       	call   1000396b <NiLoadCursors()+0xb5>	1000396b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000396f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003972:	e8 fc ff ff ff       	call   10003973 <NiLoadCursors()+0xbd>	10003973: R_386_PC32	Dbg::kprintf(char const*, ...)
10003977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000397b:	8d 04 83             	lea    eax,[ebx+eax*4]
1000397e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003982:	83 c4 10             	add    esp,0x10
10003985:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003989:	0f 8d f3 00 00 00    	jge    10003a82 <NiLoadCursors()+0x1cc>
1000398f:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003992:	50                   	push   eax
10003993:	6a 04                	push   0x4
10003995:	68 70 54 00 10       	push   0x10005470	10003996: R_386_32	.text
1000399a:	56                   	push   esi
1000399b:	e8 fc ff ff ff       	call   1000399c <NiLoadCursors()+0xe6>	1000399c: R_386_PC32	memcmp
100039a0:	83 c4 10             	add    esp,0x10
100039a3:	85 c0                	test   eax,eax
100039a5:	0f 84 b8 00 00 00    	je     10003a63 <NiLoadCursors()+0x1ad>
100039ab:	50                   	push   eax
100039ac:	6a 04                	push   0x4
100039ae:	68 75 54 00 10       	push   0x10005475	100039af: R_386_32	.text
100039b3:	56                   	push   esi
100039b4:	e8 fc ff ff ff       	call   100039b5 <NiLoadCursors()+0xff>	100039b5: R_386_PC32	memcmp
100039b9:	83 c4 10             	add    esp,0x10
100039bc:	85 c0                	test   eax,eax
100039be:	74 7b                	je     10003a3b <NiLoadCursors()+0x185>
100039c0:	50                   	push   eax
100039c1:	6a 04                	push   0x4
100039c3:	68 7a 54 00 10       	push   0x1000547a	100039c4: R_386_32	.text
100039c8:	56                   	push   esi
100039c9:	e8 fc ff ff ff       	call   100039ca <NiLoadCursors()+0x114>	100039ca: R_386_PC32	memcmp
100039ce:	83 c4 10             	add    esp,0x10
100039d1:	85 c0                	test   eax,eax
100039d3:	74 6d                	je     10003a42 <NiLoadCursors()+0x18c>
100039d5:	57                   	push   edi
100039d6:	6a 04                	push   0x4
100039d8:	68 7f 54 00 10       	push   0x1000547f	100039d9: R_386_32	.text
100039dd:	56                   	push   esi
100039de:	e8 fc ff ff ff       	call   100039df <NiLoadCursors()+0x129>	100039df: R_386_PC32	memcmp
100039e3:	83 c4 10             	add    esp,0x10
100039e6:	85 c0                	test   eax,eax
100039e8:	74 5f                	je     10003a49 <NiLoadCursors()+0x193>
100039ea:	51                   	push   ecx
100039eb:	6a 04                	push   0x4
100039ed:	68 84 54 00 10       	push   0x10005484	100039ee: R_386_32	.text
100039f2:	56                   	push   esi
100039f3:	e8 fc ff ff ff       	call   100039f4 <NiLoadCursors()+0x13e>	100039f4: R_386_PC32	memcmp
100039f8:	83 c4 10             	add    esp,0x10
100039fb:	85 c0                	test   eax,eax
100039fd:	74 51                	je     10003a50 <NiLoadCursors()+0x19a>
100039ff:	52                   	push   edx
10003a00:	6a 04                	push   0x4
10003a02:	68 89 54 00 10       	push   0x10005489	10003a03: R_386_32	.text
10003a07:	56                   	push   esi
10003a08:	e8 fc ff ff ff       	call   10003a09 <NiLoadCursors()+0x153>	10003a09: R_386_PC32	memcmp
10003a0d:	83 c4 10             	add    esp,0x10
10003a10:	85 c0                	test   eax,eax
10003a12:	74 43                	je     10003a57 <NiLoadCursors()+0x1a1>
10003a14:	50                   	push   eax
10003a15:	6a 04                	push   0x4
10003a17:	68 8e 54 00 10       	push   0x1000548e	10003a18: R_386_32	.text
10003a1c:	56                   	push   esi
10003a1d:	e8 fc ff ff ff       	call   10003a1e <NiLoadCursors()+0x168>	10003a1e: R_386_PC32	memcmp
10003a22:	83 c4 10             	add    esp,0x10
10003a25:	85 c0                	test   eax,eax
10003a27:	74 35                	je     10003a5e <NiLoadCursors()+0x1a8>
10003a29:	83 ec 0c             	sub    esp,0xc
10003a2c:	68 93 54 00 10       	push   0x10005493	10003a2d: R_386_32	.text
10003a31:	e8 fc ff ff ff       	call   10003a32 <NiLoadCursors()+0x17c>	10003a32: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a36:	83 c4 10             	add    esp,0x10
10003a39:	eb 47                	jmp    10003a82 <NiLoadCursors()+0x1cc>
10003a3b:	b8 00 02 00 00       	mov    eax,0x200
10003a40:	eb 21                	jmp    10003a63 <NiLoadCursors()+0x1ad>
10003a42:	b8 00 03 00 00       	mov    eax,0x300
10003a47:	eb 1a                	jmp    10003a63 <NiLoadCursors()+0x1ad>
10003a49:	b8 00 01 00 00       	mov    eax,0x100
10003a4e:	eb 13                	jmp    10003a63 <NiLoadCursors()+0x1ad>
10003a50:	b8 00 04 00 00       	mov    eax,0x400
10003a55:	eb 0c                	jmp    10003a63 <NiLoadCursors()+0x1ad>
10003a57:	b8 00 05 00 00       	mov    eax,0x500
10003a5c:	eb 05                	jmp    10003a63 <NiLoadCursors()+0x1ad>
10003a5e:	b8 00 06 00 00       	mov    eax,0x600
10003a63:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003a65: R_386_32	___mouse_data
10003a69:	b9 00 01 00 00       	mov    ecx,0x100
10003a6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003a72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003a74:	45                   	inc    ebp
10003a75:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003a7d:	e9 03 ff ff ff       	jmp    10003985 <NiLoadCursors()+0xcf>
10003a82:	83 ec 0c             	sub    esp,0xc
10003a85:	53                   	push   ebx
10003a86:	e8 fc ff ff ff       	call   10003a87 <NiLoadCursors()+0x1d1>	10003a87: R_386_PC32	free
10003a8b:	83 c4 10             	add    esp,0x10
10003a8e:	83 c4 2c             	add    esp,0x2c
10003a91:	5b                   	pop    ebx
10003a92:	5e                   	pop    esi
10003a93:	5f                   	pop    edi
10003a94:	5d                   	pop    ebp
10003a95:	c3                   	ret    

10003a96 <NIDesktop::NIDesktop(NIContext*)>:
10003a96:	53                   	push   ebx
10003a97:	83 ec 14             	sub    esp,0x14
10003a9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003aa2:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003aa9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003aac:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003ab3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003aba:	6a 08                	push   0x8
10003abc:	e8 fc ff ff ff       	call   10003abd <NIDesktop::NIDesktop(NIContext*)+0x27>	10003abd: R_386_PC32	malloc
10003ac1:	89 03                	mov    DWORD PTR [ebx],eax
10003ac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003aca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003ad0:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003ad2: R_386_32	mouseDesktop
10003ad6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003ad8: R_386_32	guiMouseHandler
	10003adc: R_386_32	NiHandleMouse(int, int, int, int)
10003ae0:	83 c4 18             	add    esp,0x18
10003ae3:	5b                   	pop    ebx
10003ae4:	c3                   	ret    
10003ae5:	90                   	nop

10003ae6 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003ae6:	53                   	push   ebx
10003ae7:	83 ec 08             	sub    esp,0x8
10003aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003aee:	8b 00                	mov    eax,DWORD PTR [eax]
10003af0:	8b 18                	mov    ebx,DWORD PTR [eax]
10003af2:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003af6:	74 1d                	je     10003b15 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003af8:	8b 03                	mov    eax,DWORD PTR [ebx]
10003afa:	85 c0                	test   eax,eax
10003afc:	74 12                	je     10003b10 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003afe:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b02:	74 0c                	je     10003b10 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b04:	83 ec 0c             	sub    esp,0xc
10003b07:	50                   	push   eax
10003b08:	e8 fc ff ff ff       	call   10003b09 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b09: R_386_PC32	NIWindow::invalidate()
10003b0d:	83 c4 10             	add    esp,0x10
10003b10:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b13:	eb dd                	jmp    10003af2 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b15:	83 c4 08             	add    esp,0x8
10003b18:	5b                   	pop    ebx
10003b19:	c3                   	ret    

10003b1a <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b1a:	57                   	push   edi
10003b1b:	56                   	push   esi
10003b1c:	53                   	push   ebx
10003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b21:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b25:	8b 00                	mov    eax,DWORD PTR [eax]
10003b27:	8b 00                	mov    eax,DWORD PTR [eax]
10003b29:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b2c:	85 db                	test   ebx,ebx
10003b2e:	74 43                	je     10003b73 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b30:	8b 00                	mov    eax,DWORD PTR [eax]
10003b32:	85 c0                	test   eax,eax
10003b34:	74 3f                	je     10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b36:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b39:	39 ca                	cmp    edx,ecx
10003b3b:	7e 04                	jle    10003b41 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b3d:	89 d8                	mov    eax,ebx
10003b3f:	eb e8                	jmp    10003b29 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b41:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b44:	01 d6                	add    esi,edx
10003b46:	39 ce                	cmp    esi,ecx
10003b48:	7e f3                	jle    10003b3d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b4a:	89 ce                	mov    esi,ecx
10003b4c:	29 d6                	sub    esi,edx
10003b4e:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003b51:	8d 34 b2             	lea    esi,[edx+esi*4]
10003b54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003b57:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003b5a:	01 d7                	add    edi,edx
10003b5c:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003b60:	7f db                	jg     10003b3d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b62:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003b65:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003b69:	29 f2                	sub    edx,esi
10003b6b:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003b6f:	7e cc                	jle    10003b3d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b71:	eb 02                	jmp    10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b73:	31 c0                	xor    eax,eax
10003b75:	5b                   	pop    ebx
10003b76:	5e                   	pop    esi
10003b77:	5f                   	pop    edi
10003b78:	c3                   	ret    
10003b79:	90                   	nop

10003b7a <NIDesktop::renderScanline(int, int, int)>:
10003b7a:	55                   	push   ebp
10003b7b:	57                   	push   edi
10003b7c:	56                   	push   esi
10003b7d:	53                   	push   ebx
10003b7e:	83 ec 2c             	sub    esp,0x2c
10003b81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003b85:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003b89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003b8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003b91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003b95:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003b97: R_386_32	render
10003b9b:	31 c0                	xor    eax,eax
10003b9d:	89 d7                	mov    edi,edx
10003b9f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003ba1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003ba5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003ba9:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bab: R_386_32	shadow
10003baf:	b0 80                	mov    al,0x80
10003bb1:	89 d7                	mov    edi,edx
10003bb3:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003bb9:	8b 00                	mov    eax,DWORD PTR [eax]
10003bbb:	8b 00                	mov    eax,DWORD PTR [eax]
10003bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003bc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003bc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003bc9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003bcb: R_386_32	movingWin
10003bcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003bd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003bd6:	85 c0                	test   eax,eax
10003bd8:	75 09                	jne    10003be3 <NIDesktop::renderScanline(int, int, int)+0x69>
10003bda:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bde:	e9 cf 02 00 00       	jmp    10003eb2 <NIDesktop::renderScanline(int, int, int)+0x338>
10003be3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003be7:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003be9:	85 db                	test   ebx,ebx
10003beb:	74 ed                	je     10003bda <NIDesktop::renderScanline(int, int, int)+0x60>
10003bed:	39 da                	cmp    edx,ebx
10003bef:	75 06                	jne    10003bf7 <NIDesktop::renderScanline(int, int, int)+0x7d>
10003bf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003bf5:	eb d8                	jmp    10003bcf <NIDesktop::renderScanline(int, int, int)+0x55>
10003bf7:	83 ec 0c             	sub    esp,0xc
10003bfa:	53                   	push   ebx
10003bfb:	e8 fc ff ff ff       	call   10003bfc <NIDesktop::renderScanline(int, int, int)+0x82>	10003bfc: R_386_PC32	NIWindow::request()
10003c00:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c03:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c06:	83 c4 10             	add    esp,0x10
10003c09:	01 c2                	add    edx,eax
10003c0b:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c0f:	0f 8e ad 00 00 00    	jle    10003cc2 <NIDesktop::renderScanline(int, int, int)+0x148>
10003c15:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c19:	0f 85 a3 00 00 00    	jne    10003cc2 <NIDesktop::renderScanline(int, int, int)+0x148>
10003c1f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c23:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c26:	83 c0 06             	add    eax,0x6
10003c29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c33:	01 c8                	add    eax,ecx
10003c35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c39:	39 d0                	cmp    eax,edx
10003c3b:	0f 8e 40 01 00 00    	jle    10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c41:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c45:	7c 75                	jl     10003cbc <NIDesktop::renderScanline(int, int, int)+0x142>
10003c47:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003c4b:	0f 8f 30 01 00 00    	jg     10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c51:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003c54:	89 d5                	mov    ebp,edx
10003c56:	6b fe fc             	imul   edi,esi,0xfffffffc
10003c59:	29 cd                	sub    ebp,ecx
10003c5b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c5f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003c63:	39 f0                	cmp    eax,esi
10003c65:	7c 1d                	jl     10003c84 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003c67:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003c6a:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003c6d:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003c70:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003c74:	7f 0e                	jg     10003c84 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003c76:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003c7a:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003c7e:	29 cd                	sub    ebp,ecx
10003c80:	39 d5                	cmp    ebp,edx
10003c82:	7d 07                	jge    10003c8b <NIDesktop::renderScanline(int, int, int)+0x111>
10003c84:	40                   	inc    eax
10003c85:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003c89:	75 d8                	jne    10003c63 <NIDesktop::renderScanline(int, int, int)+0xe9>
10003c8b:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003c8f:	48                   	dec    eax
10003c90:	83 f8 03             	cmp    eax,0x3
10003c93:	77 27                	ja     10003cbc <NIDesktop::renderScanline(int, int, int)+0x142>
10003c95:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003c97: R_386_32	render
10003c9c:	75 1e                	jne    10003cbc <NIDesktop::renderScanline(int, int, int)+0x142>
10003c9e:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003ca5:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003ca8: R_386_32	shadow
10003cac:	0f af c1             	imul   eax,ecx
10003caf:	d1 f9                	sar    ecx,1
10003cb1:	c1 f8 08             	sar    eax,0x8
10003cb4:	01 c1                	add    ecx,eax
10003cb6:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003cb8: R_386_32	shadow
10003cbc:	42                   	inc    edx
10003cbd:	e9 6b ff ff ff       	jmp    10003c2d <NIDesktop::renderScanline(int, int, int)+0xb3>
10003cc2:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003cc6:	0f 8d b5 00 00 00    	jge    10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003ccc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003cd0:	0f 85 ab 00 00 00    	jne    10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003cd6:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003cda:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003cdd:	8d 77 fa             	lea    esi,[edi-0x6]
10003ce0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003ce4:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003ce7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003cea:	01 ce                	add    esi,ecx
10003cec:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003cf0:	39 c6                	cmp    esi,eax
10003cf2:	0f 8e 89 00 00 00    	jle    10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003cf8:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003cfc:	7c 7d                	jl     10003d7b <NIDesktop::renderScanline(int, int, int)+0x201>
10003cfe:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d02:	7f 7d                	jg     10003d81 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d04:	89 c7                	mov    edi,eax
10003d06:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d0a:	29 cf                	sub    edi,ecx
10003d0c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d10:	4a                   	dec    edx
10003d11:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d15:	29 d1                	sub    ecx,edx
10003d17:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d1b:	74 32                	je     10003d4f <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d1d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d20:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d23:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d26:	39 d5                	cmp    ebp,edx
10003d28:	7e e6                	jle    10003d10 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d2a:	89 d5                	mov    ebp,edx
10003d2c:	29 fd                	sub    ebp,edi
10003d2e:	39 ee                	cmp    esi,ebp
10003d30:	7e 1d                	jle    10003d4f <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d32:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d35:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d38:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d3b:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d3f:	7f cf                	jg     10003d10 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d41:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d45:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003d49:	29 f7                	sub    edi,esi
10003d4b:	39 c7                	cmp    edi,eax
10003d4d:	7c c1                	jl     10003d10 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d4f:	83 f9 04             	cmp    ecx,0x4
10003d52:	77 27                	ja     10003d7b <NIDesktop::renderScanline(int, int, int)+0x201>
10003d54:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003d56: R_386_32	render
10003d5b:	75 1e                	jne    10003d7b <NIDesktop::renderScanline(int, int, int)+0x201>
10003d5d:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003d64:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003d67: R_386_32	shadow
10003d6b:	0f af d1             	imul   edx,ecx
10003d6e:	d1 f9                	sar    ecx,1
10003d70:	c1 fa 08             	sar    edx,0x8
10003d73:	01 d1                	add    ecx,edx
10003d75:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003d77: R_386_32	shadow
10003d7b:	40                   	inc    eax
10003d7c:	e9 63 ff ff ff       	jmp    10003ce4 <NIDesktop::renderScanline(int, int, int)+0x16a>
10003d81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003d84:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d88:	0f 8f 00 01 00 00    	jg     10003e8e <NIDesktop::renderScanline(int, int, int)+0x314>
10003d8e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003d91:	01 c2                	add    edx,eax
10003d93:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003d97:	0f 8e f1 00 00 00    	jle    10003e8e <NIDesktop::renderScanline(int, int, int)+0x314>
10003d9d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003da1:	29 c2                	sub    edx,eax
10003da3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003da6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003daa:	8d 14 90             	lea    edx,[eax+edx*4]
10003dad:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003db0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003db4:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003db8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003dbc:	74 09                	je     10003dc7 <NIDesktop::renderScanline(int, int, int)+0x24d>
10003dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003dc2:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003dc5:	eb 78                	jmp    10003e3f <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003dc7:	31 c9                	xor    ecx,ecx
10003dc9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003dd0:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003dd4:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003dd7:	01 cd                	add    ebp,ecx
10003dd9:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003ddd:	01 ca                	add    edx,ecx
10003ddf:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003de1: R_386_32	render
10003de6:	75 1f                	jne    10003e07 <NIDesktop::renderScanline(int, int, int)+0x28d>
10003de8:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003deb: R_386_32	shadow
10003def:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003df2:	83 c7 7d             	add    edi,0x7d
10003df5:	0f af f7             	imul   esi,edi
10003df8:	d1 ff                	sar    edi,1
10003dfa:	c1 fe 08             	sar    esi,0x8
10003dfd:	01 f7                	add    edi,esi
10003dff:	89 f8                	mov    eax,edi
10003e01:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e03: R_386_32	shadow
10003e07:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e09: R_386_32	render
10003e0e:	75 20                	jne    10003e30 <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e10:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e17:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e1a: R_386_32	shadow
10003e1e:	0f af f7             	imul   esi,edi
10003e21:	d1 ff                	sar    edi,1
10003e23:	c1 fe 08             	sar    esi,0x8
10003e26:	01 f7                	add    edi,esi
10003e28:	89 f8                	mov    eax,edi
10003e2a:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e2c: R_386_32	shadow
10003e30:	41                   	inc    ecx
10003e31:	83 f9 04             	cmp    ecx,0x4
10003e34:	75 93                	jne    10003dc9 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e36:	eb 86                	jmp    10003dbe <NIDesktop::renderScanline(int, int, int)+0x244>
10003e38:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e3c:	7d 11                	jge    10003e4f <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e3e:	40                   	inc    eax
10003e3f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e42:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e45:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e49:	39 c2                	cmp    edx,eax
10003e4b:	7f eb                	jg     10003e38 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003e4d:	eb 3f                	jmp    10003e8e <NIDesktop::renderScanline(int, int, int)+0x314>
10003e4f:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003e53:	7f 39                	jg     10003e8e <NIDesktop::renderScanline(int, int, int)+0x314>
10003e55:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003e57: R_386_32	render
10003e5c:	75 e0                	jne    10003e3e <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003e5e:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003e60: R_386_32	render
10003e65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003e69:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003e6c:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003e6f:	0f af ca             	imul   ecx,edx
10003e72:	89 c2                	mov    edx,eax
10003e74:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003e77:	01 ca                	add    edx,ecx
10003e79:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003e7c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003e80:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003e83:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003e86: R_386_32	renderData
10003e8a:	75 b2                	jne    10003e3e <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003e8c:	eb 44                	jmp    10003ed2 <NIDesktop::renderScanline(int, int, int)+0x358>
10003e8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003e92:	0f 85 42 fd ff ff    	jne    10003bda <NIDesktop::renderScanline(int, int, int)+0x60>
10003e98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003e9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003ea3:	e9 21 fd ff ff       	jmp    10003bc9 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003ea8:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003eaa: R_386_32	render
10003eaf:	74 09                	je     10003eba <NIDesktop::renderScanline(int, int, int)+0x340>
10003eb1:	40                   	inc    eax
10003eb2:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003eb6:	7c f0                	jl     10003ea8 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003eb8:	eb 18                	jmp    10003ed2 <NIDesktop::renderScanline(int, int, int)+0x358>
10003eba:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003ebc: R_386_32	render
10003ec1:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003ec4: R_386_32	renderData
10003ecc:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ed0:	75 df                	jne    10003eb1 <NIDesktop::renderScanline(int, int, int)+0x337>
10003ed2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003ed6:	8b 00                	mov    eax,DWORD PTR [eax]
10003ed8:	8b 00                	mov    eax,DWORD PTR [eax]
10003eda:	85 c0                	test   eax,eax
10003edc:	74 5e                	je     10003f3c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003ede:	8b 00                	mov    eax,DWORD PTR [eax]
10003ee0:	85 c0                	test   eax,eax
10003ee2:	74 58                	je     10003f3c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003ee4:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003ee8:	75 52                	jne    10003f3c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003eea:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003eee:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003ef2:	7d 48                	jge    10003f3c <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003ef4:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003ef6: R_386_32	shadow
10003efa:	3c 80                	cmp    al,0x80
10003efc:	74 3b                	je     10003f39 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003efe:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f01: R_386_32	renderData
10003f05:	0f b6 f0             	movzx  esi,al
10003f08:	89 d1                	mov    ecx,edx
10003f0a:	0f b6 c6             	movzx  eax,dh
10003f0d:	c1 e9 10             	shr    ecx,0x10
10003f10:	0f af c6             	imul   eax,esi
10003f13:	0f b6 c9             	movzx  ecx,cl
10003f16:	0f b6 d2             	movzx  edx,dl
10003f19:	0f af ce             	imul   ecx,esi
10003f1c:	0f af d6             	imul   edx,esi
10003f1f:	c1 e9 07             	shr    ecx,0x7
10003f22:	c1 e8 07             	shr    eax,0x7
10003f25:	c1 e1 10             	shl    ecx,0x10
10003f28:	c1 e0 08             	shl    eax,0x8
10003f2b:	c1 ea 07             	shr    edx,0x7
10003f2e:	09 c1                	or     ecx,eax
10003f30:	09 ca                	or     edx,ecx
10003f32:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f35: R_386_32	renderData
10003f39:	43                   	inc    ebx
10003f3a:	eb b2                	jmp    10003eee <NIDesktop::renderScanline(int, int, int)+0x374>
10003f3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f40:	83 ec 0c             	sub    esp,0xc
10003f43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f46:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003f4c:	8b 10                	mov    edx,DWORD PTR [eax]
10003f4e:	68 00 00 00 00       	push   0x0	10003f4f: R_386_32	renderData
10003f53:	6a 00                	push   0x0
10003f55:	6a 01                	push   0x1
10003f57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003f5b:	6a 00                	push   0x0
10003f5d:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f61:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f65:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003f69:	50                   	push   eax
10003f6a:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003f6d:	83 c4 5c             	add    esp,0x5c
10003f70:	5b                   	pop    ebx
10003f71:	5e                   	pop    esi
10003f72:	5f                   	pop    edi
10003f73:	5d                   	pop    ebp
10003f74:	c3                   	ret    
10003f75:	90                   	nop

10003f76 <NIDesktop::rangeRefresh(int, int, int, int)>:
10003f76:	53                   	push   ebx
10003f77:	83 ec 08             	sub    esp,0x8
10003f7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003f7e:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003f82:	7d 18                	jge    10003f9c <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003f84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003f88:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003f8c:	53                   	push   ebx
10003f8d:	43                   	inc    ebx
10003f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003f92:	e8 fc ff ff ff       	call   10003f93 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003f93: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003f97:	83 c4 10             	add    esp,0x10
10003f9a:	eb e2                	jmp    10003f7e <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003f9c:	83 c4 08             	add    esp,0x8
10003f9f:	5b                   	pop    ebx
10003fa0:	c3                   	ret    
10003fa1:	90                   	nop

10003fa2 <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003fa2:	55                   	push   ebp
10003fa3:	ba 05 00 00 00       	mov    edx,0x5
10003fa8:	57                   	push   edi
10003fa9:	56                   	push   esi
10003faa:	53                   	push   ebx
10003fab:	83 ec 0c             	sub    esp,0xc
10003fae:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003fb2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003fb5:	83 f8 05             	cmp    eax,0x5
10003fb8:	7c 02                	jl     10003fbc <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
10003fba:	89 c2                	mov    edx,eax
10003fbc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003fc0:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
10003fc3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10003fc6:	83 ea 05             	sub    edx,0x5
10003fc9:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
10003fcf:	8d 70 05             	lea    esi,[eax+0x5]
10003fd2:	8d 69 fb             	lea    ebp,[ecx-0x5]
10003fd5:	39 c5                	cmp    ebp,eax
10003fd7:	7f 03                	jg     10003fdc <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10003fd9:	8d 71 ff             	lea    esi,[ecx-0x1]
10003fdc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003fdf:	89 c1                	mov    ecx,eax
10003fe1:	83 f8 05             	cmp    eax,0x5
10003fe4:	7d 05                	jge    10003feb <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
10003fe6:	b9 05 00 00 00       	mov    ecx,0x5
10003feb:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
10003fee:	83 e9 05             	sub    ecx,0x5
10003ff1:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10003ff7:	8d 58 05             	lea    ebx,[eax+0x5]
10003ffa:	8d 6f fb             	lea    ebp,[edi-0x5]
10003ffd:	39 c5                	cmp    ebp,eax
10003fff:	7f 03                	jg     10004004 <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
10004001:	8d 5f ff             	lea    ebx,[edi-0x1]
10004004:	83 ec 0c             	sub    esp,0xc
10004007:	53                   	push   ebx
10004008:	51                   	push   ecx
10004009:	56                   	push   esi
1000400a:	52                   	push   edx
1000400b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000400f:	e8 fc ff ff ff       	call   10004010 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	10004010: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004014:	83 c4 2c             	add    esp,0x2c
10004017:	5b                   	pop    ebx
10004018:	5e                   	pop    esi
10004019:	5f                   	pop    edi
1000401a:	5d                   	pop    ebp
1000401b:	c3                   	ret    

1000401c <NIDesktop::completeRefresh()>:
1000401c:	56                   	push   esi
1000401d:	53                   	push   ebx
1000401e:	31 f6                	xor    esi,esi
10004020:	50                   	push   eax
10004021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004025:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004028:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
1000402e:	7e 15                	jle    10004045 <NIDesktop::completeRefresh()+0x29>
10004030:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004036:	6a 00                	push   0x0
10004038:	56                   	push   esi
10004039:	46                   	inc    esi
1000403a:	53                   	push   ebx
1000403b:	e8 fc ff ff ff       	call   1000403c <NIDesktop::completeRefresh()+0x20>	1000403c: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004040:	83 c4 10             	add    esp,0x10
10004043:	eb e0                	jmp    10004025 <NIDesktop::completeRefresh()+0x9>
10004045:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000404b:	83 ec 0c             	sub    esp,0xc
1000404e:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004050:	6a 00                	push   0x0
10004052:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004055:	05 00 00 00 00       	add    eax,0x0	10004056: R_386_32	___mouse_data
1000405a:	50                   	push   eax
1000405b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
1000405e:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004061:	52                   	push   edx
10004062:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004065:	83 c4 24             	add    esp,0x24
10004068:	5b                   	pop    ebx
10004069:	5e                   	pop    esi
1000406a:	c3                   	ret    
1000406b:	90                   	nop

1000406c <NIDesktop::addWindow(NIWindow*)>:
1000406c:	56                   	push   esi
1000406d:	53                   	push   ebx
1000406e:	83 ec 0c             	sub    esp,0xc
10004071:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004075:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004079:	56                   	push   esi
1000407a:	ff 33                	push   DWORD PTR [ebx]
1000407c:	e8 fc ff ff ff       	call   1000407d <NIDesktop::addWindow(NIWindow*)+0x11>	1000407d: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004081:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10004085:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004089:	83 c4 14             	add    esp,0x14
1000408c:	5b                   	pop    ebx
1000408d:	5e                   	pop    esi
1000408e:	e9 0f ff ff ff       	jmp    10003fa2 <NIDesktop::refreshWindowBounds(NIWindow*)>
10004093:	90                   	nop

10004094 <NIDesktop::raiseWindow(NIWindow*)>:
10004094:	53                   	push   ebx
10004095:	83 ec 10             	sub    esp,0x10
10004098:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000409c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040a0:	50                   	push   eax
100040a1:	ff 33                	push   DWORD PTR [ebx]
100040a3:	e8 fc ff ff ff       	call   100040a4 <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040a4: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040a8:	58                   	pop    eax
100040a9:	5a                   	pop    edx
100040aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040ae:	ff 33                	push   DWORD PTR [ebx]
100040b0:	e8 fc ff ff ff       	call   100040b1 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100040b1: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040b5:	59                   	pop    ecx
100040b6:	58                   	pop    eax
100040b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040bb:	53                   	push   ebx
100040bc:	e8 fc ff ff ff       	call   100040bd <NIDesktop::raiseWindow(NIWindow*)+0x29>	100040bd: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100040c1:	83 c4 18             	add    esp,0x18
100040c4:	5b                   	pop    ebx
100040c5:	c3                   	ret    

100040c6 <NIDesktop::deleteWindow(NIWindow*)>:
100040c6:	53                   	push   ebx
100040c7:	83 ec 10             	sub    esp,0x10
100040ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040d2:	50                   	push   eax
100040d3:	ff 33                	push   DWORD PTR [ebx]
100040d5:	e8 fc ff ff ff       	call   100040d6 <NIDesktop::deleteWindow(NIWindow*)+0x10>	100040d6: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040da:	58                   	pop    eax
100040db:	5a                   	pop    edx
100040dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040e0:	53                   	push   ebx
100040e1:	e8 fc ff ff ff       	call   100040e2 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	100040e2: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100040e6:	83 c4 18             	add    esp,0x18
100040e9:	5b                   	pop    ebx
100040ea:	c3                   	ret    
100040eb:	90                   	nop

100040ec <NIDesktop::handleMouse(int, int, int, int)>:
100040ec:	55                   	push   ebp
100040ed:	57                   	push   edi
100040ee:	56                   	push   esi
100040ef:	53                   	push   ebx
100040f0:	83 ec 38             	sub    esp,0x38
100040f3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
100040f7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100040fa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100040fd:	8d 4a 20             	lea    ecx,[edx+0x20]
10004100:	51                   	push   ecx
10004101:	52                   	push   edx
10004102:	8d 50 20             	lea    edx,[eax+0x20]
10004105:	52                   	push   edx
10004106:	50                   	push   eax
10004107:	53                   	push   ebx
10004108:	e8 fc ff ff ff       	call   10004109 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004109: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000410d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004110:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004114:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004117:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000411b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000411f:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
10004123:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
10004127:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
1000412a:	83 c4 20             	add    esp,0x20
1000412d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004130:	85 d2                	test   edx,edx
10004132:	79 07                	jns    1000413b <NIDesktop::handleMouse(int, int, int, int)+0x4f>
10004134:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
1000413b:	85 c0                	test   eax,eax
1000413d:	79 07                	jns    10004146 <NIDesktop::handleMouse(int, int, int, int)+0x5a>
1000413f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
10004146:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004149:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
1000414f:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
10004152:	7f 04                	jg     10004158 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
10004154:	48                   	dec    eax
10004155:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004158:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
1000415e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
10004161:	7f 04                	jg     10004167 <NIDesktop::handleMouse(int, int, int, int)+0x7b>
10004163:	48                   	dec    eax
10004164:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004167:	50                   	push   eax
10004168:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
1000416b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000416e:	53                   	push   ebx
1000416f:	e8 fc ff ff ff       	call   10004170 <NIDesktop::handleMouse(int, int, int, int)+0x84>	10004170: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
10004174:	83 c4 10             	add    esp,0x10
10004177:	89 c6                	mov    esi,eax
10004179:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000417d:	83 e0 01             	and    eax,0x1
10004180:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004182: R_386_32	movingWin
10004187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000418b:	0f 84 f0 01 00 00    	je     10004381 <NIDesktop::handleMouse(int, int, int, int)+0x295>
10004191:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004193: R_386_32	movingType
10004198:	0f 85 e3 01 00 00    	jne    10004381 <NIDesktop::handleMouse(int, int, int, int)+0x295>
1000419e:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041a2:	85 c0                	test   eax,eax
100041a4:	75 0b                	jne    100041b1 <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041a6:	a0 f8 87 03 10       	mov    al,ds:0x100387f8	100041a7: R_386_32	.bss
100041ab:	83 e0 01             	and    eax,0x1
100041ae:	88 04 24             	mov    BYTE PTR [esp],al
100041b1:	bd 01 00 00 00       	mov    ebp,0x1
100041b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100041b7: R_386_32	movingWin
100041bb:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
100041be:	8d 51 ff             	lea    edx,[ecx-0x1]
100041c1:	39 ea                	cmp    edx,ebp
100041c3:	0f 8e b1 00 00 00    	jle    1000427a <NIDesktop::handleMouse(int, int, int, int)+0x18e>
100041c9:	bf 01 00 00 00       	mov    edi,0x1
100041ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100041cf: R_386_32	movingWin
100041d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
100041d6:	48                   	dec    eax
100041d7:	39 f8                	cmp    eax,edi
100041d9:	0f 8e 95 00 00 00    	jle    10004274 <NIDesktop::handleMouse(int, int, int, int)+0x188>
100041df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
100041e3:	89 ea                	mov    edx,ebp
100041e5:	83 e0 1f             	and    eax,0x1f
100041e8:	83 e2 03             	and    edx,0x3
100041eb:	09 d0                	or     eax,edx
100041ed:	75 7f                	jne    1000426e <NIDesktop::handleMouse(int, int, int, int)+0x182>
100041ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100041f3:	2b 05 f4 87 03 10    	sub    eax,DWORD PTR ds:0x100387f4	100041f5: R_386_32	.bss
100041f9:	01 f8                	add    eax,edi
100041fb:	78 2d                	js     1000422a <NIDesktop::handleMouse(int, int, int, int)+0x13e>
100041fd:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004200:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004206:	7d 22                	jge    1000422a <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004208:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000420c:	8d 48 01             	lea    ecx,[eax+0x1]
1000420f:	83 ec 0c             	sub    esp,0xc
10004212:	2b 15 f0 87 03 10    	sub    edx,DWORD PTR ds:0x100387f0	10004214: R_386_32	.bss
10004218:	51                   	push   ecx
10004219:	01 ea                	add    edx,ebp
1000421b:	50                   	push   eax
1000421c:	8d 42 01             	lea    eax,[edx+0x1]
1000421f:	50                   	push   eax
10004220:	52                   	push   edx
10004221:	53                   	push   ebx
10004222:	e8 fc ff ff ff       	call   10004223 <NIDesktop::handleMouse(int, int, int, int)+0x137>	10004223: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004227:	83 c4 20             	add    esp,0x20
1000422a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
1000422e:	75 3e                	jne    1000426e <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004230:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004233:	01 f8                	add    eax,edi
10004235:	2b 05 f4 87 03 10    	sub    eax,DWORD PTR ds:0x100387f4	10004237: R_386_32	.bss
1000423b:	78 31                	js     1000426e <NIDesktop::handleMouse(int, int, int, int)+0x182>
1000423d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004240:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004246:	7d 26                	jge    1000426e <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004248:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
1000424e:	8b 11                	mov    edx,DWORD PTR [ecx]
10004250:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10004254:	6a 00                	push   0x0
10004256:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004259:	01 ea                	add    edx,ebp
1000425b:	2b 15 f0 87 03 10    	sub    edx,DWORD PTR ds:0x100387f0	1000425d: R_386_32	.bss
10004261:	52                   	push   edx
10004262:	50                   	push   eax
10004263:	51                   	push   ecx
10004264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004268:	ff 50 24             	call   DWORD PTR [eax+0x24]
1000426b:	83 c4 10             	add    esp,0x10
1000426e:	47                   	inc    edi
1000426f:	e9 5a ff ff ff       	jmp    100041ce <NIDesktop::handleMouse(int, int, int, int)+0xe2>
10004274:	45                   	inc    ebp
10004275:	e9 3c ff ff ff       	jmp    100041b6 <NIDesktop::handleMouse(int, int, int, int)+0xca>
1000427a:	8b 15 f4 87 03 10    	mov    edx,DWORD PTR ds:0x100387f4	1000427c: R_386_32	.bss
10004280:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10004283:	29 d7                	sub    edi,edx
10004285:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004289:	0f 85 86 05 00 00    	jne    10004815 <NIDesktop::handleMouse(int, int, int, int)+0x729>
1000428f:	89 3c 24             	mov    DWORD PTR [esp],edi
10004292:	85 ff                	test   edi,edi
10004294:	79 07                	jns    1000429d <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
10004296:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000429d:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042a0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042a3:	01 ef                	add    edi,ebp
100042a5:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100042ab:	39 c7                	cmp    edi,eax
100042ad:	7d 05                	jge    100042b4 <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
100042af:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042b2:	eb 0b                	jmp    100042bf <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
100042b4:	89 c7                	mov    edi,eax
100042b6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042b9:	0f 88 c2 00 00 00    	js     10004381 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042bf:	85 ff                	test   edi,edi
100042c1:	0f 84 ba 00 00 00    	je     10004381 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100042cb:	29 d1                	sub    ecx,edx
100042cd:	89 ca                	mov    edx,ecx
100042cf:	79 02                	jns    100042d3 <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
100042d1:	31 d2                	xor    edx,edx
100042d3:	01 cd                	add    ebp,ecx
100042d5:	39 e8                	cmp    eax,ebp
100042d7:	7e 04                	jle    100042dd <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
100042d9:	29 d5                	sub    ebp,edx
100042db:	eb 08                	jmp    100042e5 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
100042dd:	29 d0                	sub    eax,edx
100042df:	89 c5                	mov    ebp,eax
100042e1:	79 02                	jns    100042e5 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
100042e3:	31 ed                	xor    ebp,ebp
100042e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100042e9:	01 d5                	add    ebp,edx
100042eb:	83 ec 0c             	sub    esp,0xc
100042ee:	2b 05 f0 87 03 10    	sub    eax,DWORD PTR ds:0x100387f0	100042f0: R_386_32	.bss
100042f4:	55                   	push   ebp
100042f5:	8d 48 01             	lea    ecx,[eax+0x1]
100042f8:	52                   	push   edx
100042f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
100042fd:	51                   	push   ecx
100042fe:	50                   	push   eax
100042ff:	53                   	push   ebx
10004300:	e8 fc ff ff ff       	call   10004301 <NIDesktop::handleMouse(int, int, int, int)+0x215>	10004301: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004305:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004309:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000430b: R_386_32	movingWin
1000430f:	83 c4 14             	add    esp,0x14
10004312:	2b 05 f0 87 03 10    	sub    eax,DWORD PTR ds:0x100387f0	10004314: R_386_32	.bss
10004318:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
1000431b:	55                   	push   ebp
1000431c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10004320:	52                   	push   edx
10004321:	50                   	push   eax
10004322:	48                   	dec    eax
10004323:	50                   	push   eax
10004324:	53                   	push   ebx
10004325:	e8 fc ff ff ff       	call   10004326 <NIDesktop::handleMouse(int, int, int, int)+0x23a>	10004326: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000432a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000432d:	83 c4 18             	add    esp,0x18
10004330:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004336:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004338:	6a 00                	push   0x0
1000433a:	6a 01                	push   0x1
1000433c:	57                   	push   edi
1000433d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004340:	2b 05 f0 87 03 10    	sub    eax,DWORD PTR ds:0x100387f0	10004342: R_386_32	.bss
10004346:	50                   	push   eax
10004347:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000434b:	52                   	push   edx
1000434c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000434f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004352:	83 c4 18             	add    esp,0x18
10004355:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000435b:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000435d:	6a 00                	push   0x0
1000435f:	6a 01                	push   0x1
10004361:	57                   	push   edi
10004362:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004364: R_386_32	movingWin
10004368:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000436b:	2b 05 f0 87 03 10    	sub    eax,DWORD PTR ds:0x100387f0	1000436d: R_386_32	.bss
10004371:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
10004374:	48                   	dec    eax
10004375:	50                   	push   eax
10004376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000437a:	52                   	push   edx
1000437b:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000437e:	83 c4 20             	add    esp,0x20
10004381:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004383: R_386_32	movingWin
10004387:	85 d2                	test   edx,edx
10004389:	0f 84 05 02 00 00    	je     10004594 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
1000438f:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004391: R_386_32	movingType
10004395:	8d 41 fe             	lea    eax,[ecx-0x2]
10004398:	83 f8 02             	cmp    eax,0x2
1000439b:	0f 87 f3 01 00 00    	ja     10004594 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043a1:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100043ab:	75 0c                	jne    100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
100043ad:	a0 f8 87 03 10       	mov    al,ds:0x100387f8	100043ae: R_386_32	.bss
100043b2:	83 e0 01             	and    eax,0x1
100043b5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
100043b9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
100043bc:	8b 2d f4 87 03 10    	mov    ebp,DWORD PTR ds:0x100387f4	100043be: R_386_32	.bss
100043c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100043c6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
100043c9:	01 c7                	add    edi,eax
100043cb:	29 ef                	sub    edi,ebp
100043cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100043d1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100043d5:	01 d7                	add    edi,edx
100043d7:	2b 3d f0 87 03 10    	sub    edi,DWORD PTR ds:0x100387f0	100043d9: R_386_32	.bss
100043dd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
100043e1:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100043e4:	01 c7                	add    edi,eax
100043e6:	29 ef                	sub    edi,ebp
100043e8:	89 fd                	mov    ebp,edi
100043ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100043ed:	01 d7                	add    edi,edx
100043ef:	2b 3d f0 87 03 10    	sub    edi,DWORD PTR ds:0x100387f0	100043f1: R_386_32	.bss
100043f5:	83 f9 03             	cmp    ecx,0x3
100043f8:	89 3c 24             	mov    DWORD PTR [esp],edi
100043fb:	74 0e                	je     1000440b <NIDesktop::handleMouse(int, int, int, int)+0x31f>
100043fd:	83 f9 04             	cmp    ecx,0x4
10004400:	75 0f                	jne    10004411 <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004402:	89 14 24             	mov    DWORD PTR [esp],edx
10004405:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004409:	eb 06                	jmp    10004411 <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000440b:	89 c5                	mov    ebp,eax
1000440d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004415:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004419:	39 e8                	cmp    eax,ebp
1000441b:	7d 04                	jge    10004421 <NIDesktop::handleMouse(int, int, int, int)+0x335>
1000441d:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
10004421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004429:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000442c:	7d 07                	jge    10004435 <NIDesktop::handleMouse(int, int, int, int)+0x349>
1000442e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004431:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004435:	bf 01 00 00 00       	mov    edi,0x1
1000443a:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
1000443e:	0f 8d ab 00 00 00    	jge    100044ef <NIDesktop::handleMouse(int, int, int, int)+0x403>
10004444:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
1000444c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10004450:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
10004454:	0f 8d 8f 00 00 00    	jge    100044e9 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
1000445a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000445e:	89 fa                	mov    edx,edi
10004460:	01 f8                	add    eax,edi
10004462:	83 e2 03             	and    edx,0x3
10004465:	83 e0 1f             	and    eax,0x1f
10004468:	09 d0                	or     eax,edx
1000446a:	75 74                	jne    100044e0 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
1000446c:	83 ec 0c             	sub    esp,0xc
1000446f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004470: R_386_32	movingWin
10004474:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004478:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
1000447b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
1000447e:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
10004482:	51                   	push   ecx
10004483:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
10004487:	52                   	push   edx
10004488:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
1000448c:	01 f8                	add    eax,edi
1000448e:	52                   	push   edx
1000448f:	50                   	push   eax
10004490:	53                   	push   ebx
10004491:	e8 fc ff ff ff       	call   10004492 <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	10004492: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004496:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
1000449a:	83 c4 20             	add    esp,0x20
1000449d:	83 f2 01             	xor    edx,0x1
100044a0:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044a3:	0f 9f c0             	setg   al
100044a6:	84 c2                	test   dl,al
100044a8:	74 36                	je     100044e0 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044aa:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100044ae:	7d 30                	jge    100044e0 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100044b3:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100044b9:	8b 08                	mov    ecx,DWORD PTR [eax]
100044bb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100044bf:	6a 00                	push   0x0
100044c1:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100044c3: R_386_32	movingWin
100044c7:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
100044ca:	01 fa                	add    edx,edi
100044cc:	52                   	push   edx
100044cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100044d1:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
100044d4:	52                   	push   edx
100044d5:	50                   	push   eax
100044d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100044da:	ff 50 24             	call   DWORD PTR [eax+0x24]
100044dd:	83 c4 10             	add    esp,0x10
100044e0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100044e4:	e9 63 ff ff ff       	jmp    1000444c <NIDesktop::handleMouse(int, int, int, int)+0x360>
100044e9:	47                   	inc    edi
100044ea:	e9 4b ff ff ff       	jmp    1000443a <NIDesktop::handleMouse(int, int, int, int)+0x34e>
100044ef:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100044f1: R_386_32	movingWin
100044f5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
100044fa:	0f 85 d8 02 00 00    	jne    100047d8 <NIDesktop::handleMouse(int, int, int, int)+0x6ec>
10004500:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
10004503:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
10004506:	83 ec 0c             	sub    esp,0xc
10004509:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000450d:	01 d1                	add    ecx,edx
1000450f:	51                   	push   ecx
10004510:	52                   	push   edx
10004511:	8d 50 01             	lea    edx,[eax+0x1]
10004514:	52                   	push   edx
10004515:	50                   	push   eax
10004516:	53                   	push   ebx
10004517:	e8 fc ff ff ff       	call   10004518 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004518: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000451c:	83 c4 18             	add    esp,0x18
1000451f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004522:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004524: R_386_32	movingWin
10004528:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000452e:	8b 08                	mov    ecx,DWORD PTR [eax]
10004530:	6a 00                	push   0x0
10004532:	6a 01                	push   0x1
10004534:	55                   	push   ebp
10004535:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004538:	ff 72 18             	push   DWORD PTR [edx+0x18]
1000453b:	50                   	push   eax
1000453c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000453f:	83 c4 14             	add    esp,0x14
10004542:	a1 00 00 00 00       	mov    eax,ds:0x0	10004543: R_386_32	movingWin
10004547:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
1000454a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
1000454d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004551:	01 c8                	add    eax,ecx
10004553:	50                   	push   eax
10004554:	51                   	push   ecx
10004555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004559:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
1000455d:	50                   	push   eax
1000455e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10004562:	52                   	push   edx
10004563:	53                   	push   ebx
10004564:	e8 fc ff ff ff       	call   10004565 <NIDesktop::handleMouse(int, int, int, int)+0x479>	10004565: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004569:	83 c4 18             	add    esp,0x18
1000456c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000456f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004571: R_386_32	movingWin
10004575:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000457b:	8b 08                	mov    ecx,DWORD PTR [eax]
1000457d:	6a 00                	push   0x0
1000457f:	6a 01                	push   0x1
10004581:	55                   	push   ebp
10004582:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004586:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
10004589:	57                   	push   edi
1000458a:	ff 72 18             	push   DWORD PTR [edx+0x18]
1000458d:	50                   	push   eax
1000458e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004591:	83 c4 20             	add    esp,0x20
10004594:	85 f6                	test   esi,esi
10004596:	0f 84 08 02 00 00    	je     100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
1000459c:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045a1:	0f 84 fd 01 00 00    	je     100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045a7:	8b 0d f8 87 03 10    	mov    ecx,DWORD PTR ds:0x100387f8	100045a9: R_386_32	.bss
100045ad:	83 e1 01             	and    ecx,0x1
100045b0:	0f 85 ea 00 00 00    	jne    100046a0 <NIDesktop::handleMouse(int, int, int, int)+0x5b4>
100045b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b7: R_386_32	milliTenthsSinceBoot
100045bb:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100045bd: R_386_32	milliTenthsSinceBoot
100045c1:	2b 05 e8 87 03 10    	sub    eax,DWORD PTR ds:0x100387e8	100045c3: R_386_32	.bss
100045c7:	bf b7 0b 00 00       	mov    edi,0xbb7
100045cc:	1b 15 ec 87 03 10    	sbb    edx,DWORD PTR ds:0x100387ec	100045ce: R_386_32	.bss
100045d2:	39 c7                	cmp    edi,eax
100045d4:	19 d1                	sbb    ecx,edx
100045d6:	0f 82 95 00 00 00    	jb     10004671 <NIDesktop::handleMouse(int, int, int, int)+0x585>
100045dc:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
100045df:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100045e2:	29 d0                	sub    eax,edx
100045e4:	83 f8 18             	cmp    eax,0x18
100045e7:	0f 8f 84 00 00 00    	jg     10004671 <NIDesktop::handleMouse(int, int, int, int)+0x585>
100045ed:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
100045f1:	75 7e                	jne    10004671 <NIDesktop::handleMouse(int, int, int, int)+0x585>
100045f3:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100045f7:	74 26                	je     1000461f <NIDesktop::handleMouse(int, int, int, int)+0x533>
100045f9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
100045fc:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
100045ff:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10004602:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
10004605:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004608:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
1000460b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
1000460e:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
10004611:	50                   	push   eax
10004612:	50                   	push   eax
10004613:	56                   	push   esi
10004614:	53                   	push   ebx
10004615:	e8 fc ff ff ff       	call   10004616 <NIDesktop::handleMouse(int, int, int, int)+0x52a>	10004616: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
1000461a:	83 c4 10             	add    esp,0x10
1000461d:	eb 3b                	jmp    1000465a <NIDesktop::handleMouse(int, int, int, int)+0x56e>
1000461f:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
10004622:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004629:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000462c:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
10004633:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
10004636:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004639:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
1000463c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
1000463f:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
10004642:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004645:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
1000464b:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
1000464e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004651:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
10004657:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
1000465a:	83 ec 0c             	sub    esp,0xc
1000465d:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
10004661:	56                   	push   esi
10004662:	e8 fc ff ff ff       	call   10004663 <NIDesktop::handleMouse(int, int, int, int)+0x577>	10004663: R_386_PC32	NIWindow::rerender()
10004667:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000466a:	e8 fc ff ff ff       	call   1000466b <NIDesktop::handleMouse(int, int, int, int)+0x57f>	1000466b: R_386_PC32	NIDesktop::completeRefresh()
1000466f:	eb 11                	jmp    10004682 <NIDesktop::handleMouse(int, int, int, int)+0x596>
10004671:	8b 03                	mov    eax,DWORD PTR [ebx]
10004673:	8b 00                	mov    eax,DWORD PTR [eax]
10004675:	39 30                	cmp    DWORD PTR [eax],esi
10004677:	74 0c                	je     10004685 <NIDesktop::handleMouse(int, int, int, int)+0x599>
10004679:	50                   	push   eax
1000467a:	50                   	push   eax
1000467b:	56                   	push   esi
1000467c:	53                   	push   ebx
1000467d:	e8 fc ff ff ff       	call   1000467e <NIDesktop::handleMouse(int, int, int, int)+0x592>	1000467e: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004682:	83 c4 10             	add    esp,0x10
10004685:	a1 00 00 00 00       	mov    eax,ds:0x0	10004686: R_386_32	milliTenthsSinceBoot
1000468a:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	1000468c: R_386_32	milliTenthsSinceBoot
10004690:	a3 e8 87 03 10       	mov    ds:0x100387e8,eax	10004691: R_386_32	.bss
10004695:	89 15 ec 87 03 10    	mov    DWORD PTR ds:0x100387ec,edx	10004697: R_386_32	.bss
1000469b:	e9 04 01 00 00       	jmp    100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046a0:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046a2: R_386_32	movingWin
100046a7:	0f 85 f7 00 00 00    	jne    100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046ad:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100046b0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
100046b3:	89 d1                	mov    ecx,edx
100046b5:	83 e8 0e             	sub    eax,0xe
100046b8:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
100046bb:	39 c8                	cmp    eax,ecx
100046bd:	7f 37                	jg     100046f6 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
100046bf:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100046c3:	75 31                	jne    100046f6 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
100046c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
100046c8:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
100046cf:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100046d1: R_386_32	movingWin
100046d5:	55                   	push   ebp
100046d6:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	100046d8: R_386_32	movingType
100046e0:	55                   	push   ebp
100046e1:	a3 f4 87 03 10       	mov    ds:0x100387f4,eax	100046e2: R_386_32	.bss
100046e6:	56                   	push   esi
100046e7:	89 15 f0 87 03 10    	mov    DWORD PTR ds:0x100387f0,edx	100046e9: R_386_32	.bss
100046ed:	53                   	push   ebx
100046ee:	e8 fc ff ff ff       	call   100046ef <NIDesktop::handleMouse(int, int, int, int)+0x603>	100046ef: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100046f3:	83 c4 10             	add    esp,0x10
100046f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100046f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
100046fc:	89 d1                	mov    ecx,edx
100046fe:	83 e8 0e             	sub    eax,0xe
10004701:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
10004704:	39 c8                	cmp    eax,ecx
10004706:	7f 55                	jg     1000475d <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004708:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000470c:	75 4f                	jne    1000475d <NIDesktop::handleMouse(int, int, int, int)+0x671>
1000470e:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004710: R_386_32	movingWin
10004715:	75 33                	jne    1000474a <NIDesktop::handleMouse(int, int, int, int)+0x65e>
10004717:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000471a:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004721:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10004723: R_386_32	movingWin
10004727:	57                   	push   edi
10004728:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	1000472a: R_386_32	movingType
10004732:	57                   	push   edi
10004733:	89 15 f4 87 03 10    	mov    DWORD PTR ds:0x100387f4,edx	10004735: R_386_32	.bss
10004739:	56                   	push   esi
1000473a:	a3 f0 87 03 10       	mov    ds:0x100387f0,eax	1000473b: R_386_32	.bss
1000473f:	53                   	push   ebx
10004740:	e8 fc ff ff ff       	call   10004741 <NIDesktop::handleMouse(int, int, int, int)+0x655>	10004741: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004745:	83 c4 10             	add    esp,0x10
10004748:	eb 13                	jmp    1000475d <NIDesktop::handleMouse(int, int, int, int)+0x671>
1000474a:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	1000474c: R_386_32	movingType
10004754:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
1000475b:	eb 47                	jmp    100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
1000475d:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000475f: R_386_32	movingWin
10004764:	75 3e                	jne    100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004766:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004769:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
1000476c:	83 f8 18             	cmp    eax,0x18
1000476f:	7f 33                	jg     100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004771:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004775:	75 2d                	jne    100047a4 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004777:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000477a:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
1000477d:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000477f: R_386_32	movingWin
10004783:	51                   	push   ecx
10004784:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004786: R_386_32	movingType
1000478e:	51                   	push   ecx
1000478f:	89 15 f4 87 03 10    	mov    DWORD PTR ds:0x100387f4,edx	10004791: R_386_32	.bss
10004795:	56                   	push   esi
10004796:	a3 f0 87 03 10       	mov    ds:0x100387f0,eax	10004797: R_386_32	.bss
1000479b:	53                   	push   ebx
1000479c:	e8 fc ff ff ff       	call   1000479d <NIDesktop::handleMouse(int, int, int, int)+0x6b1>	1000479d: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047a1:	83 c4 10             	add    esp,0x10
100047a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047a7:	83 ec 0c             	sub    esp,0xc
100047aa:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100047b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
100047b2:	6a 00                	push   0x0
100047b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100047b7:	05 00 00 00 00       	add    eax,0x0	100047b8: R_386_32	___mouse_data
100047bc:	50                   	push   eax
100047bd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100047c0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100047c3:	52                   	push   edx
100047c4:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100047c7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
100047cb:	a3 f8 87 03 10       	mov    ds:0x100387f8,eax	100047cc: R_386_32	.bss
100047d0:	83 c4 4c             	add    esp,0x4c
100047d3:	5b                   	pop    ebx
100047d4:	5e                   	pop    esi
100047d5:	5f                   	pop    edi
100047d6:	5d                   	pop    ebp
100047d7:	c3                   	ret    
100047d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
100047db:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
100047de:	83 ec 0c             	sub    esp,0xc
100047e1:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
100047e4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100047e6: R_386_32	movingWin
100047ee:	57                   	push   edi
100047ef:	e8 fc ff ff ff       	call   100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x704>	100047f0: R_386_PC32	NIWindow::rerender()
100047f4:	59                   	pop    ecx
100047f5:	5d                   	pop    ebp
100047f6:	57                   	push   edi
100047f7:	53                   	push   ebx
100047f8:	e8 fc ff ff ff       	call   100047f9 <NIDesktop::handleMouse(int, int, int, int)+0x70d>	100047f9: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100047fd:	58                   	pop    eax
100047fe:	5a                   	pop    edx
100047ff:	57                   	push   edi
10004800:	53                   	push   ebx
10004801:	e8 fc ff ff ff       	call   10004802 <NIDesktop::handleMouse(int, int, int, int)+0x716>	10004802: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004806:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
1000480d:	83 c4 10             	add    esp,0x10
10004810:	e9 7f fd ff ff       	jmp    10004594 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
10004815:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004818:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000481a: R_386_32	movingWin
10004822:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004825:	2b 15 f0 87 03 10    	sub    edx,DWORD PTR ds:0x100387f0	10004827: R_386_32	.bss
1000482b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
1000482e:	52                   	push   edx
1000482f:	52                   	push   edx
10004830:	50                   	push   eax
10004831:	53                   	push   ebx
10004832:	e8 fc ff ff ff       	call   10004833 <NIDesktop::handleMouse(int, int, int, int)+0x747>	10004833: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004837:	83 c4 10             	add    esp,0x10
1000483a:	e9 42 fb ff ff       	jmp    10004381 <NIDesktop::handleMouse(int, int, int, int)+0x295>

1000483f <NiHandleMouse(int, int, int, int)>:
1000483f:	83 ec 18             	sub    esp,0x18
10004842:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000484a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000484e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004852:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004854: R_386_32	mouseDesktop
10004858:	e8 fc ff ff ff       	call   10004859 <NiHandleMouse(int, int, int, int)+0x1a>	10004859: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
1000485d:	83 c4 2c             	add    esp,0x2c
10004860:	c3                   	ret    

10004861 <drawVGAChar(int, int, int)>:
10004861:	55                   	push   ebp
10004862:	57                   	push   edi
10004863:	56                   	push   esi
10004864:	53                   	push   ebx
10004865:	31 db                	xor    ebx,ebx
10004867:	83 ec 1c             	sub    esp,0x1c
1000486a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000486e:	c1 e0 04             	shl    eax,0x4
10004871:	89 04 24             	mov    DWORD PTR [esp],eax
10004874:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004878:	c1 e0 04             	shl    eax,0x4
1000487b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000487f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004883:	c1 e0 03             	shl    eax,0x3
10004886:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000488a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000488d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004891:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10004894: R_386_32	cp
10004898:	8d 3c 19             	lea    edi,[ecx+ebx*1]
1000489b:	31 f6                	xor    esi,esi
1000489d:	84 c0                	test   al,al
1000489f:	79 22                	jns    100048c3 <drawVGAChar(int, int, int)+0x62>
100048a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048a5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048a7: R_386_32	screen
100048ab:	8b 0a                	mov    ecx,DWORD PTR [edx]
100048ad:	6a 00                	push   0x0
100048af:	57                   	push   edi
100048b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100048b4:	8d 2c 06             	lea    ebp,[esi+eax*1]
100048b7:	55                   	push   ebp
100048b8:	52                   	push   edx
100048b9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100048bc:	83 c4 10             	add    esp,0x10
100048bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
100048c3:	d1 e0                	shl    eax,1
100048c5:	46                   	inc    esi
100048c6:	83 fe 08             	cmp    esi,0x8
100048c9:	75 d2                	jne    1000489d <drawVGAChar(int, int, int)+0x3c>
100048cb:	43                   	inc    ebx
100048cc:	83 fb 10             	cmp    ebx,0x10
100048cf:	75 b9                	jne    1000488a <drawVGAChar(int, int, int)+0x29>
100048d1:	83 c4 1c             	add    esp,0x1c
100048d4:	5b                   	pop    ebx
100048d5:	5e                   	pop    esi
100048d6:	5f                   	pop    edi
100048d7:	5d                   	pop    ebp
100048d8:	c3                   	ret    

100048d9 <NiDisplayRAM(void*)>:
100048d9:	83 ec 0c             	sub    esp,0xc
100048dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100048dd: R_386_32	irqDisableCounter
100048e1:	48                   	dec    eax
100048e2:	a3 00 00 00 00       	mov    ds:0x0,eax	100048e3: R_386_32	irqDisableCounter
100048e7:	75 01                	jne    100048ea <NiDisplayRAM(void*)+0x11>
100048e9:	fb                   	sti    
100048ea:	50                   	push   eax
100048eb:	6a 3f                	push   0x3f
100048ed:	6a 00                	push   0x0
100048ef:	6a 00                	push   0x0
100048f1:	e8 fc ff ff ff       	call   100048f2 <NiDisplayRAM(void*)+0x19>	100048f2: R_386_PC32	drawVGAChar(int, int, int)
100048f6:	83 c4 0c             	add    esp,0xc
100048f9:	6a 3f                	push   0x3f
100048fb:	6a 00                	push   0x0
100048fd:	6a 01                	push   0x1
100048ff:	e8 fc ff ff ff       	call   10004900 <NiDisplayRAM(void*)+0x27>	10004900: R_386_PC32	drawVGAChar(int, int, int)
10004904:	83 c4 0c             	add    esp,0xc
10004907:	6a 25                	push   0x25
10004909:	6a 00                	push   0x0
1000490b:	6a 02                	push   0x2
1000490d:	e8 fc ff ff ff       	call   1000490e <NiDisplayRAM(void*)+0x35>	1000490e: R_386_PC32	drawVGAChar(int, int, int)
10004912:	83 c4 0c             	add    esp,0xc
10004915:	6a 20                	push   0x20
10004917:	6a 00                	push   0x0
10004919:	6a 03                	push   0x3
1000491b:	e8 fc ff ff ff       	call   1000491c <NiDisplayRAM(void*)+0x43>	1000491c: R_386_PC32	drawVGAChar(int, int, int)
10004920:	83 c4 0c             	add    esp,0xc
10004923:	6a 52                	push   0x52
10004925:	6a 00                	push   0x0
10004927:	6a 04                	push   0x4
10004929:	e8 fc ff ff ff       	call   1000492a <NiDisplayRAM(void*)+0x51>	1000492a: R_386_PC32	drawVGAChar(int, int, int)
1000492e:	83 c4 0c             	add    esp,0xc
10004931:	6a 41                	push   0x41
10004933:	6a 00                	push   0x0
10004935:	6a 05                	push   0x5
10004937:	e8 fc ff ff ff       	call   10004938 <NiDisplayRAM(void*)+0x5f>	10004938: R_386_PC32	drawVGAChar(int, int, int)
1000493c:	83 c4 0c             	add    esp,0xc
1000493f:	6a 4d                	push   0x4d
10004941:	6a 00                	push   0x0
10004943:	6a 06                	push   0x6
10004945:	e8 fc ff ff ff       	call   10004946 <NiDisplayRAM(void*)+0x6d>	10004946: R_386_PC32	drawVGAChar(int, int, int)
1000494a:	83 c4 0c             	add    esp,0xc
1000494d:	6a 20                	push   0x20
1000494f:	6a 00                	push   0x0
10004951:	6a 07                	push   0x7
10004953:	e8 fc ff ff ff       	call   10004954 <NiDisplayRAM(void*)+0x7b>	10004954: R_386_PC32	drawVGAChar(int, int, int)
10004958:	83 c4 0c             	add    esp,0xc
1000495b:	6a 75                	push   0x75
1000495d:	6a 00                	push   0x0
1000495f:	6a 08                	push   0x8
10004961:	e8 fc ff ff ff       	call   10004962 <NiDisplayRAM(void*)+0x89>	10004962: R_386_PC32	drawVGAChar(int, int, int)
10004966:	83 c4 0c             	add    esp,0xc
10004969:	6a 73                	push   0x73
1000496b:	6a 00                	push   0x0
1000496d:	6a 09                	push   0x9
1000496f:	e8 fc ff ff ff       	call   10004970 <NiDisplayRAM(void*)+0x97>	10004970: R_386_PC32	drawVGAChar(int, int, int)
10004974:	83 c4 0c             	add    esp,0xc
10004977:	6a 65                	push   0x65
10004979:	6a 00                	push   0x0
1000497b:	6a 0a                	push   0xa
1000497d:	e8 fc ff ff ff       	call   1000497e <NiDisplayRAM(void*)+0xa5>	1000497e: R_386_PC32	drawVGAChar(int, int, int)
10004982:	83 c4 0c             	add    esp,0xc
10004985:	6a 64                	push   0x64
10004987:	6a 00                	push   0x0
10004989:	6a 0b                	push   0xb
1000498b:	e8 fc ff ff ff       	call   1000498c <NiDisplayRAM(void*)+0xb3>	1000498c: R_386_PC32	drawVGAChar(int, int, int)
10004990:	83 c4 10             	add    esp,0x10
10004993:	e9 52 ff ff ff       	jmp    100048ea <NiDisplayRAM(void*)+0x11>

10004998 <monikaBsod(char*)>:
10004998:	55                   	push   ebp
10004999:	57                   	push   edi
1000499a:	31 ff                	xor    edi,edi
1000499c:	56                   	push   esi
1000499d:	53                   	push   ebx
1000499e:	31 db                	xor    ebx,ebx
100049a0:	83 ec 24             	sub    esp,0x24
100049a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100049a4: R_386_32	screen
100049a8:	8b 10                	mov    edx,DWORD PTR [eax]
100049aa:	68 ff ff ff 00       	push   0xffffff
100049af:	50                   	push   eax
100049b0:	ff 52 40             	call   DWORD PTR [edx+0x40]
100049b3:	83 c4 10             	add    esp,0x10
100049b6:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	100049b8: R_386_32	justMonika
100049bc:	8d 43 01             	lea    eax,[ebx+0x1]
100049bf:	84 c9                	test   cl,cl
100049c1:	79 0e                	jns    100049d1 <monikaBsod(char*)+0x39>
100049c3:	8d 51 80             	lea    edx,[ecx-0x80]
100049c6:	83 c3 02             	add    ebx,0x2
100049c9:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	100049cb: R_386_32	justMonika
100049cf:	eb 04                	jmp    100049d5 <monikaBsod(char*)+0x3d>
100049d1:	89 c3                	mov    ebx,eax
100049d3:	b2 01                	mov    dl,0x1
100049d5:	0f b6 c1             	movzx  eax,cl
100049d8:	83 e1 03             	and    ecx,0x3
100049db:	89 c6                	mov    esi,eax
100049dd:	6b c9 55             	imul   ecx,ecx,0x55
100049e0:	c1 fe 05             	sar    esi,0x5
100049e3:	c1 f8 02             	sar    eax,0x2
100049e6:	83 e6 03             	and    esi,0x3
100049e9:	83 e0 07             	and    eax,0x7
100049ec:	6b f6 55             	imul   esi,esi,0x55
100049ef:	6b c0 24             	imul   eax,eax,0x24
100049f2:	c1 e6 10             	shl    esi,0x10
100049f5:	c1 e0 08             	shl    eax,0x8
100049f8:	09 f0                	or     eax,esi
100049fa:	31 f6                	xor    esi,esi
100049fc:	09 c8                	or     eax,ecx
100049fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a02:	0f b6 c2             	movzx  eax,dl
10004a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004a09:	8d 04 37             	lea    eax,[edi+esi*1]
10004a0c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004a10:	7f 10                	jg     10004a22 <monikaBsod(char*)+0x8a>
10004a12:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004a16:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004a1c:	7e 98                	jle    100049b6 <monikaBsod(char*)+0x1e>
10004a1e:	31 db                	xor    ebx,ebx
10004a20:	eb 25                	jmp    10004a47 <monikaBsod(char*)+0xaf>
10004a22:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a24: R_386_32	screen
10004a28:	b9 80 02 00 00       	mov    ecx,0x280
10004a2d:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004a2f:	46                   	inc    esi
10004a30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004a34:	99                   	cdq    
10004a35:	f7 f9                	idiv   ecx
10004a37:	50                   	push   eax
10004a38:	52                   	push   edx
10004a39:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a3b: R_386_32	screen
10004a3f:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004a42:	83 c4 10             	add    esp,0x10
10004a45:	eb c2                	jmp    10004a09 <monikaBsod(char*)+0x71>
10004a47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004a4b:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004a4f:	84 c0                	test   al,al
10004a51:	74 1d                	je     10004a70 <monikaBsod(char*)+0xd8>
10004a53:	b9 19 00 00 00       	mov    ecx,0x19
10004a58:	52                   	push   edx
10004a59:	50                   	push   eax
10004a5a:	89 d8                	mov    eax,ebx
10004a5c:	43                   	inc    ebx
10004a5d:	99                   	cdq    
10004a5e:	f7 f9                	idiv   ecx
10004a60:	83 c0 0a             	add    eax,0xa
10004a63:	42                   	inc    edx
10004a64:	50                   	push   eax
10004a65:	52                   	push   edx
10004a66:	e8 fc ff ff ff       	call   10004a67 <monikaBsod(char*)+0xcf>	10004a67: R_386_PC32	drawVGAChar(int, int, int)
10004a6b:	83 c4 10             	add    esp,0x10
10004a6e:	eb d7                	jmp    10004a47 <monikaBsod(char*)+0xaf>
10004a70:	f4                   	hlt    
10004a71:	eb fd                	jmp    10004a70 <monikaBsod(char*)+0xd8>

10004a73 <NiInstallSysHooks()>:
10004a73:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004a75: R_386_32	guiPanicHandler
	10004a79: R_386_32	monikaBsod(char*)
10004a7d:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004a7f: R_386_32	systemCallHandlers
	10004a83: R_386_32	NiSystemCallHandler(regs*)
10004a87:	c3                   	ret    

10004a88 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004a88:	56                   	push   esi
10004a89:	53                   	push   ebx
10004a8a:	83 ec 10             	sub    esp,0x10
10004a8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004a91:	68 a7 54 00 10       	push   0x100054a7	10004a92: R_386_32	.text
10004a96:	e8 fc ff ff ff       	call   10004a97 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004a97: R_386_PC32	Dbg::kprintf(char const*, ...)
10004a9b:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004aa2:	e8 fc ff ff ff       	call   10004aa3 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004aa3: R_386_PC32	malloc
10004aa7:	89 c6                	mov    esi,eax
10004aa9:	58                   	pop    eax
10004aaa:	5a                   	pop    edx
10004aab:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004ab1:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004ab7:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004abd:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004ac3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ac5: R_386_32	ctxt
10004ac9:	56                   	push   esi
10004aca:	e8 fc ff ff ff       	call   10004acb <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004acb: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004acf:	83 c4 18             	add    esp,0x18
10004ad2:	56                   	push   esi
10004ad3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ad5: R_386_32	desktop
10004ad9:	e8 fc ff ff ff       	call   10004ada <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004ada: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004ade:	59                   	pop    ecx
10004adf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ae1: R_386_32	desktop
10004ae5:	e8 fc ff ff ff       	call   10004ae6 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004ae6: R_386_PC32	NIDesktop::completeRefresh()
10004aea:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004af0:	89 34 24             	mov    DWORD PTR [esp],esi
10004af3:	e8 fc ff ff ff       	call   10004af4 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004af4: R_386_PC32	NIWindow::drawBasicWindow()
10004af8:	83 c4 14             	add    esp,0x14
10004afb:	31 c0                	xor    eax,eax
10004afd:	31 d2                	xor    edx,edx
10004aff:	5b                   	pop    ebx
10004b00:	5e                   	pop    esi
10004b01:	c3                   	ret    

10004b02 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b02:	55                   	push   ebp
10004b03:	57                   	push   edi
10004b04:	56                   	push   esi
10004b05:	31 f6                	xor    esi,esi
10004b07:	53                   	push   ebx
10004b08:	83 ec 28             	sub    esp,0x28
10004b0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004b0f:	68 c2 54 00 10       	push   0x100054c2	10004b10: R_386_32	.text
10004b14:	e8 fc ff ff ff       	call   10004b15 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004b15: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b19:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004b1f:	83 c4 10             	add    esp,0x10
10004b22:	31 c0                	xor    eax,eax
10004b24:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004b27:	7e 30                	jle    10004b59 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004b29:	31 ff                	xor    edi,edi
10004b2b:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004b2e:	7e 26                	jle    10004b56 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004b30:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004b36:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004b39:	83 fa ff             	cmp    edx,0xffffffff
10004b3c:	74 14                	je     10004b52 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004b3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b42:	52                   	push   edx
10004b43:	56                   	push   esi
10004b44:	57                   	push   edi
10004b45:	53                   	push   ebx
10004b46:	e8 fc ff ff ff       	call   10004b47 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004b47: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004b4b:	83 c4 10             	add    esp,0x10
10004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b52:	40                   	inc    eax
10004b53:	47                   	inc    edi
10004b54:	eb d5                	jmp    10004b2b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004b56:	46                   	inc    esi
10004b57:	eb cb                	jmp    10004b24 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004b59:	50                   	push   eax
10004b5a:	50                   	push   eax
10004b5b:	53                   	push   ebx
10004b5c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b5e: R_386_32	desktop
10004b62:	e8 fc ff ff ff       	call   10004b63 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004b63: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004b67:	83 c4 2c             	add    esp,0x2c
10004b6a:	31 c0                	xor    eax,eax
10004b6c:	5b                   	pop    ebx
10004b6d:	31 d2                	xor    edx,edx
10004b6f:	5e                   	pop    esi
10004b70:	5f                   	pop    edi
10004b71:	5d                   	pop    ebp
10004b72:	c3                   	ret    

10004b73 <NiSystemCallHandler(regs*)>:
10004b73:	53                   	push   ebx
10004b74:	83 ec 14             	sub    esp,0x14
10004b77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004b7b:	68 e4 54 00 10       	push   0x100054e4	10004b7c: R_386_32	.text
10004b80:	e8 fc ff ff ff       	call   10004b81 <NiSystemCallHandler(regs*)+0xe>	10004b81: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b85:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10004b88:	83 c4 10             	add    esp,0x10
10004b8b:	83 f9 04             	cmp    ecx,0x4
10004b8e:	74 1d                	je     10004bad <NiSystemCallHandler(regs*)+0x3a>
10004b90:	83 f9 05             	cmp    ecx,0x5
10004b93:	74 2a                	je     10004bbf <NiSystemCallHandler(regs*)+0x4c>
10004b95:	83 c8 ff             	or     eax,0xffffffff
10004b98:	85 c9                	test   ecx,ecx
10004b9a:	89 c2                	mov    edx,eax
10004b9c:	75 44                	jne    10004be2 <NiSystemCallHandler(regs*)+0x6f>
10004b9e:	50                   	push   eax
10004b9f:	50                   	push   eax
10004ba0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004ba3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004ba6:	e8 fc ff ff ff       	call   10004ba7 <NiSystemCallHandler(regs*)+0x34>	10004ba7: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004bab:	eb 0d                	jmp    10004bba <NiSystemCallHandler(regs*)+0x47>
10004bad:	50                   	push   eax
10004bae:	50                   	push   eax
10004baf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004bb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004bb5:	e8 fc ff ff ff       	call   10004bb6 <NiSystemCallHandler(regs*)+0x43>	10004bb6: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004bba:	83 c4 10             	add    esp,0x10
10004bbd:	eb 23                	jmp    10004be2 <NiSystemCallHandler(regs*)+0x6f>
10004bbf:	83 ec 0c             	sub    esp,0xc
10004bc2:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
10004bc5:	68 f9 54 00 10       	push   0x100054f9	10004bc6: R_386_32	.text
10004bca:	e8 fc ff ff ff       	call   10004bcb <NiSystemCallHandler(regs*)+0x58>	10004bcb: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bcf:	58                   	pop    eax
10004bd0:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004bd6:	e8 fc ff ff ff       	call   10004bd7 <NiSystemCallHandler(regs*)+0x64>	10004bd7: R_386_PC32	NIWindow::drawBasicWindow()
10004bdb:	83 c4 10             	add    esp,0x10
10004bde:	31 c0                	xor    eax,eax
10004be0:	31 d2                	xor    edx,edx
10004be2:	83 c4 08             	add    esp,0x8
10004be5:	5b                   	pop    ebx
10004be6:	c3                   	ret    

10004be7 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004be7:	83 ec 18             	sub    esp,0x18
10004bea:	68 f9 54 00 10       	push   0x100054f9	10004beb: R_386_32	.text
10004bef:	e8 fc ff ff ff       	call   10004bf0 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004bf0: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bf4:	58                   	pop    eax
10004bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004bf9:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004bff:	e8 fc ff ff ff       	call   10004c00 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004c00: R_386_PC32	NIWindow::drawBasicWindow()
10004c04:	31 c0                	xor    eax,eax
10004c06:	31 d2                	xor    edx,edx
10004c08:	83 c4 1c             	add    esp,0x1c
10004c0b:	c3                   	ret    

10004c0c <NIWindow::invalidate()>:
10004c0c:	53                   	push   ebx
10004c0d:	83 ec 08             	sub    esp,0x8
10004c10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004c14:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004c18:	74 1d                	je     10004c37 <NIWindow::invalidate()+0x2b>
10004c1a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004c1e:	74 17                	je     10004c37 <NIWindow::invalidate()+0x2b>
10004c20:	83 ec 0c             	sub    esp,0xc
10004c23:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004c26:	e8 fc ff ff ff       	call   10004c27 <NIWindow::invalidate()+0x1b>	10004c27: R_386_PC32	free
10004c2b:	59                   	pop    ecx
10004c2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004c2f:	e8 fc ff ff ff       	call   10004c30 <NIWindow::invalidate()+0x24>	10004c30: R_386_PC32	free
10004c34:	83 c4 10             	add    esp,0x10
10004c37:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004c3e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004c45:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004c49:	83 c4 08             	add    esp,0x8
10004c4c:	5b                   	pop    ebx
10004c4d:	c3                   	ret    

10004c4e <NIWindow::putpixel(int, int, unsigned int)>:
10004c4e:	56                   	push   esi
10004c4f:	53                   	push   ebx
10004c50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004c58:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004c5b:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004c5f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004c63:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004c67:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004c6a:	83 fe 04             	cmp    esi,0x4
10004c6d:	75 05                	jne    10004c74 <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004c6f:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004c72:	eb 0e                	jmp    10004c82 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004c74:	83 fe 02             	cmp    esi,0x2
10004c77:	75 06                	jne    10004c7f <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004c79:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004c7d:	eb 03                	jmp    10004c82 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004c7f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004c82:	5b                   	pop    ebx
10004c83:	5e                   	pop    esi
10004c84:	c3                   	ret    
10004c85:	90                   	nop

10004c86 <NIWindow::drawBasicWindow()>:
10004c86:	55                   	push   ebp
10004c87:	57                   	push   edi
10004c88:	56                   	push   esi
10004c89:	31 f6                	xor    esi,esi
10004c8b:	53                   	push   ebx
10004c8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004c90:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004c93:	7e 2e                	jle    10004cc3 <NIWindow::drawBasicWindow()+0x3d>
10004c95:	31 db                	xor    ebx,ebx
10004c97:	83 fe 19             	cmp    esi,0x19
10004c9a:	0f 9e c3             	setle  bl
10004c9d:	31 ff                	xor    edi,edi
10004c9f:	4b                   	dec    ebx
10004ca0:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004ca6:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004cac:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004caf:	7e 0f                	jle    10004cc0 <NIWindow::drawBasicWindow()+0x3a>
10004cb1:	53                   	push   ebx
10004cb2:	56                   	push   esi
10004cb3:	57                   	push   edi
10004cb4:	47                   	inc    edi
10004cb5:	55                   	push   ebp
10004cb6:	e8 fc ff ff ff       	call   10004cb7 <NIWindow::drawBasicWindow()+0x31>	10004cb7: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004cbb:	83 c4 10             	add    esp,0x10
10004cbe:	eb ec                	jmp    10004cac <NIWindow::drawBasicWindow()+0x26>
10004cc0:	46                   	inc    esi
10004cc1:	eb cd                	jmp    10004c90 <NIWindow::drawBasicWindow()+0xa>
10004cc3:	5b                   	pop    ebx
10004cc4:	5e                   	pop    esi
10004cc5:	5f                   	pop    edi
10004cc6:	5d                   	pop    ebp
10004cc7:	c3                   	ret    

10004cc8 <NIWindow::rerender()>:
10004cc8:	57                   	push   edi
10004cc9:	56                   	push   esi
10004cca:	53                   	push   ebx
10004ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004ccf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004cd3:	74 0c                	je     10004ce1 <NIWindow::rerender()+0x19>
10004cd5:	83 ec 0c             	sub    esp,0xc
10004cd8:	53                   	push   ebx
10004cd9:	e8 fc ff ff ff       	call   10004cda <NIWindow::rerender()+0x12>	10004cda: R_386_PC32	NIWindow::invalidate()
10004cde:	83 c4 10             	add    esp,0x10
10004ce1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004ce4:	83 ec 0c             	sub    esp,0xc
10004ce7:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004cea:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004cf1:	50                   	push   eax
10004cf2:	e8 fc ff ff ff       	call   10004cf3 <NIWindow::rerender()+0x2b>	10004cf3: R_386_PC32	malloc
10004cf7:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004cfb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004cfe:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004d02:	89 34 24             	mov    DWORD PTR [esp],esi
10004d05:	e8 fc ff ff ff       	call   10004d06 <NIWindow::rerender()+0x3e>	10004d06: R_386_PC32	malloc
10004d0a:	83 c4 10             	add    esp,0x10
10004d0d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004d10:	31 c0                	xor    eax,eax
10004d12:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004d15:	7e 6a                	jle    10004d81 <NIWindow::rerender()+0xb9>
10004d17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004d1e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d21:	01 d6                	add    esi,edx
10004d23:	83 f8 06             	cmp    eax,0x6
10004d26:	7f 1b                	jg     10004d43 <NIWindow::rerender()+0x7b>
10004d28:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004d2b: R_386_32	curveLookup7
10004d2f:	66 89 0e             	mov    WORD PTR [esi],cx
10004d32:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004d35:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004d38: R_386_32	curveLookup7
10004d3c:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004d41:	eb 3b                	jmp    10004d7e <NIWindow::rerender()+0xb6>
10004d43:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d46:	8d 79 fa             	lea    edi,[ecx-0x6]
10004d49:	39 c7                	cmp    edi,eax
10004d4b:	7f 22                	jg     10004d6f <NIWindow::rerender()+0xa7>
10004d4d:	29 c1                	sub    ecx,eax
10004d4f:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d52: R_386_32	curveLookup7
10004d56:	66 89 0e             	mov    WORD PTR [esi],cx
10004d59:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d5c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d5f:	29 c1                	sub    ecx,eax
10004d61:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d64: R_386_32	curveLookup7
10004d68:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004d6d:	eb 0f                	jmp    10004d7e <NIWindow::rerender()+0xb6>
10004d6f:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004d74:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004d77:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004d7e:	40                   	inc    eax
10004d7f:	eb 91                	jmp    10004d12 <NIWindow::rerender()+0x4a>
10004d81:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004d85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004d89:	5b                   	pop    ebx
10004d8a:	5e                   	pop    esi
10004d8b:	5f                   	pop    edi
10004d8c:	e9 f5 fe ff ff       	jmp    10004c86 <NIWindow::drawBasicWindow()>
10004d91:	90                   	nop

10004d92 <NIWindow::changeContext(NIContext*, int, int)>:
10004d92:	55                   	push   ebp
10004d93:	57                   	push   edi
10004d94:	56                   	push   esi
10004d95:	53                   	push   ebx
10004d96:	83 ec 18             	sub    esp,0x18
10004d99:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004d9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004da1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004da5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004da9:	53                   	push   ebx
10004daa:	e8 fc ff ff ff       	call   10004dab <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004dab: R_386_PC32	NIWindow::invalidate()
10004daf:	89 33                	mov    DWORD PTR [ebx],esi
10004db1:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004db4:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004db7:	83 c4 10             	add    esp,0x10
10004dba:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004dc0:	83 f8 08             	cmp    eax,0x8
10004dc3:	7f 09                	jg     10004dce <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004dc5:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004dcc:	eb 15                	jmp    10004de3 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004dce:	83 f8 10             	cmp    eax,0x10
10004dd1:	7f 09                	jg     10004ddc <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004dd3:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004dda:	eb 07                	jmp    10004de3 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004ddc:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004de3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004de7:	83 c4 0c             	add    esp,0xc
10004dea:	5b                   	pop    ebx
10004deb:	5e                   	pop    esi
10004dec:	5f                   	pop    edi
10004ded:	5d                   	pop    ebp
10004dee:	e9 d5 fe ff ff       	jmp    10004cc8 <NIWindow::rerender()>
10004df3:	90                   	nop

10004df4 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004df8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004dfc:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004e00:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004e03:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004e0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004e0e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004e12:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004e15:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004e1c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004e23:	e9 6a ff ff ff       	jmp    10004d92 <NIWindow::changeContext(NIContext*, int, int)>

10004e28 <NIWindow::request()>:
10004e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e2c:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004e30:	75 05                	jne    10004e37 <NIWindow::request()+0xf>
10004e32:	e9 91 fe ff ff       	jmp    10004cc8 <NIWindow::rerender()>
10004e37:	c3                   	ret    

10004e38 <NIWindow::SHADOW_TEST()>:
10004e38:	55                   	push   ebp
10004e39:	57                   	push   edi
10004e3a:	56                   	push   esi
10004e3b:	53                   	push   ebx
10004e3c:	83 ec 28             	sub    esp,0x28
10004e3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004e43:	53                   	push   ebx
10004e44:	e8 fc ff ff ff       	call   10004e45 <NIWindow::SHADOW_TEST()+0xd>	10004e45: R_386_PC32	NIWindow::request()
10004e49:	83 c4 10             	add    esp,0x10
10004e4c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004e4f:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004e52:	74 10                	je     10004e64 <NIWindow::SHADOW_TEST()+0x2c>
10004e54:	83 ec 0c             	sub    esp,0xc
10004e57:	68 18 55 00 10       	push   0x10005518	10004e58: R_386_32	.text
10004e5c:	e8 fc ff ff ff       	call   10004e5d <NIWindow::SHADOW_TEST()+0x25>	10004e5d: R_386_PC32	KePanic(char const*)
10004e61:	83 c4 10             	add    esp,0x10
10004e64:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004e68:	0f 85 28 01 00 00    	jne    10004f96 <NIWindow::SHADOW_TEST()+0x15e>
10004e6e:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004e76:	31 ff                	xor    edi,edi
10004e78:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004e7b:	0f 8e 15 01 00 00    	jle    10004f96 <NIWindow::SHADOW_TEST()+0x15e>
10004e81:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004e84:	8d 04 b8             	lea    eax,[eax+edi*4]
10004e87:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004e8a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004e8e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004e96:	89 34 24             	mov    DWORD PTR [esp],esi
10004e99:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004e9c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004e9f:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004ea3:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004ea6:	0f 8e d4 00 00 00    	jle    10004f80 <NIWindow::SHADOW_TEST()+0x148>
10004eac:	83 ff 05             	cmp    edi,0x5
10004eaf:	7e 1f                	jle    10004ed0 <NIWindow::SHADOW_TEST()+0x98>
10004eb1:	8d 41 fb             	lea    eax,[ecx-0x5]
10004eb4:	39 f8                	cmp    eax,edi
10004eb6:	7e 18                	jle    10004ed0 <NIWindow::SHADOW_TEST()+0x98>
10004eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004ebc:	83 c0 05             	add    eax,0x5
10004ebf:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004ec2:	7d 0c                	jge    10004ed0 <NIWindow::SHADOW_TEST()+0x98>
10004ec4:	8d 45 fb             	lea    eax,[ebp-0x5]
10004ec7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004eca:	0f 8f a8 00 00 00    	jg     10004f78 <NIWindow::SHADOW_TEST()+0x140>
10004ed0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004ed4:	be ea 01 00 00       	mov    esi,0x1ea
10004ed9:	29 f9                	sub    ecx,edi
10004edb:	89 f0                	mov    eax,esi
10004edd:	83 c1 04             	add    ecx,0x4
10004ee0:	99                   	cdq    
10004ee1:	f7 f9                	idiv   ecx
10004ee3:	89 c1                	mov    ecx,eax
10004ee5:	89 f0                	mov    eax,esi
10004ee7:	99                   	cdq    
10004ee8:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004eec:	83 f8 0a             	cmp    eax,0xa
10004eef:	7d 05                	jge    10004ef6 <NIWindow::SHADOW_TEST()+0xbe>
10004ef1:	b8 0a 00 00 00       	mov    eax,0xa
10004ef6:	39 c1                	cmp    ecx,eax
10004ef8:	7d 02                	jge    10004efc <NIWindow::SHADOW_TEST()+0xc4>
10004efa:	89 c1                	mov    ecx,eax
10004efc:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004eff:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f04:	83 c5 04             	add    ebp,0x4
10004f07:	99                   	cdq    
10004f08:	f7 fd                	idiv   ebp
10004f0a:	89 c6                	mov    esi,eax
10004f0c:	83 f8 0a             	cmp    eax,0xa
10004f0f:	7d 05                	jge    10004f16 <NIWindow::SHADOW_TEST()+0xde>
10004f11:	be 0a 00 00 00       	mov    esi,0xa
10004f16:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004f19:	8d 68 05             	lea    ebp,[eax+0x5]
10004f1c:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f21:	99                   	cdq    
10004f22:	f7 fd                	idiv   ebp
10004f24:	39 c6                	cmp    esi,eax
10004f26:	7d 02                	jge    10004f2a <NIWindow::SHADOW_TEST()+0xf2>
10004f28:	89 c6                	mov    esi,eax
10004f2a:	89 f0                	mov    eax,esi
10004f2c:	89 ca                	mov    edx,ecx
10004f2e:	0f af c6             	imul   eax,esi
10004f31:	0f af d1             	imul   edx,ecx
10004f34:	0f af f1             	imul   esi,ecx
10004f37:	01 d0                	add    eax,edx
10004f39:	8d 04 c6             	lea    eax,[esi+eax*8]
10004f3c:	c1 f8 08             	sar    eax,0x8
10004f3f:	83 f8 66             	cmp    eax,0x66
10004f42:	7e 46                	jle    10004f8a <NIWindow::SHADOW_TEST()+0x152>
10004f44:	8d 50 9a             	lea    edx,[eax-0x66]
10004f47:	d1 fa                	sar    edx,1
10004f49:	8d 42 66             	lea    eax,[edx+0x66]
10004f4c:	83 f8 73             	cmp    eax,0x73
10004f4f:	7e 39                	jle    10004f8a <NIWindow::SHADOW_TEST()+0x152>
10004f51:	83 ea 0d             	sub    edx,0xd
10004f54:	c1 fa 02             	sar    edx,0x2
10004f57:	8d 42 73             	lea    eax,[edx+0x73]
10004f5a:	83 f8 7f             	cmp    eax,0x7f
10004f5d:	7f 19                	jg     10004f78 <NIWindow::SHADOW_TEST()+0x140>
10004f5f:	50                   	push   eax
10004f60:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004f63:	01 f8                	add    eax,edi
10004f65:	50                   	push   eax
10004f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004f6a:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10004f6d:	50                   	push   eax
10004f6e:	ff 33                	push   DWORD PTR [ebx]
10004f70:	e8 fc ff ff ff       	call   10004f71 <NIWindow::SHADOW_TEST()+0x139>	10004f71: R_386_PC32	NIContext::drvDarken4(int, int, int)
10004f75:	83 c4 10             	add    esp,0x10
10004f78:	ff 04 24             	inc    DWORD PTR [esp]
10004f7b:	e9 19 ff ff ff       	jmp    10004e99 <NIWindow::SHADOW_TEST()+0x61>
10004f80:	47                   	inc    edi
10004f81:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004f85:	e9 ee fe ff ff       	jmp    10004e78 <NIWindow::SHADOW_TEST()+0x40>
10004f8a:	83 f8 0a             	cmp    eax,0xa
10004f8d:	7d d0                	jge    10004f5f <NIWindow::SHADOW_TEST()+0x127>
10004f8f:	b8 0a 00 00 00       	mov    eax,0xa
10004f94:	eb c9                	jmp    10004f5f <NIWindow::SHADOW_TEST()+0x127>
10004f96:	83 c4 1c             	add    esp,0x1c
10004f99:	5b                   	pop    ebx
10004f9a:	5e                   	pop    esi
10004f9b:	5f                   	pop    edi
10004f9c:	5d                   	pop    ebp
10004f9d:	c3                   	ret    

10004f9e <NIWindow::realdraw()>:
10004f9e:	55                   	push   ebp
10004f9f:	57                   	push   edi
10004fa0:	56                   	push   esi
10004fa1:	53                   	push   ebx
10004fa2:	83 ec 18             	sub    esp,0x18
10004fa5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004fa9:	53                   	push   ebx
10004faa:	e8 fc ff ff ff       	call   10004fab <NIWindow::realdraw()+0xd>	10004fab: R_386_PC32	NIWindow::request()
10004faf:	83 c4 10             	add    esp,0x10
10004fb2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004fb5:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004fb8:	74 10                	je     10004fca <NIWindow::realdraw()+0x2c>
10004fba:	83 ec 0c             	sub    esp,0xc
10004fbd:	68 18 55 00 10       	push   0x10005518	10004fbe: R_386_32	.text
10004fc2:	e8 fc ff ff ff       	call   10004fc3 <NIWindow::realdraw()+0x25>	10004fc3: R_386_PC32	KePanic(char const*)
10004fc7:	83 c4 10             	add    esp,0x10
10004fca:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004fce:	75 46                	jne    10005016 <NIWindow::realdraw()+0x78>
10004fd0:	31 f6                	xor    esi,esi
10004fd2:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004fd5:	7e 3f                	jle    10005016 <NIWindow::realdraw()+0x78>
10004fd7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004fda:	8d 04 b0             	lea    eax,[eax+esi*4]
10004fdd:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10004fe0:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10004fe4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10004fe7:	89 c2                	mov    edx,eax
10004fe9:	29 fa                	sub    edx,edi
10004feb:	39 ea                	cmp    edx,ebp
10004fed:	7e 24                	jle    10005013 <NIWindow::realdraw()+0x75>
10004fef:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004ff2:	0f af c6             	imul   eax,esi
10004ff5:	01 e8                	add    eax,ebp
10004ff7:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10004ffa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004ffd:	01 f0                	add    eax,esi
10004fff:	50                   	push   eax
10005000:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10005003:	01 e8                	add    eax,ebp
10005005:	45                   	inc    ebp
10005006:	50                   	push   eax
10005007:	ff 33                	push   DWORD PTR [ebx]
10005009:	e8 fc ff ff ff       	call   1000500a <NIWindow::realdraw()+0x6c>	1000500a: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
1000500e:	83 c4 10             	add    esp,0x10
10005011:	eb d1                	jmp    10004fe4 <NIWindow::realdraw()+0x46>
10005013:	46                   	inc    esi
10005014:	eb bc                	jmp    10004fd2 <NIWindow::realdraw()+0x34>
10005016:	83 c4 0c             	add    esp,0xc
10005019:	5b                   	pop    ebx
1000501a:	5e                   	pop    esi
1000501b:	5f                   	pop    edi
1000501c:	5d                   	pop    ebp
1000501d:	c3                   	ret    

1000501e <List<NIWindow*>::insertAtHead(NIWindow*)>:
1000501e:	53                   	push   ebx
1000501f:	83 ec 14             	sub    esp,0x14
10005022:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005026:	6a 0c                	push   0xc
10005028:	e8 fc ff ff ff       	call   10005029 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005029: R_386_PC32	malloc
1000502d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10005031:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005038:	89 10                	mov    DWORD PTR [eax],edx
1000503a:	83 c4 10             	add    esp,0x10
1000503d:	8b 13                	mov    edx,DWORD PTR [ebx]
1000503f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005042:	85 d2                	test   edx,edx
10005044:	74 05                	je     1000504b <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005046:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005049:	eb 03                	jmp    1000504e <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
1000504b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000504e:	89 03                	mov    DWORD PTR [ebx],eax
10005050:	83 c4 08             	add    esp,0x8
10005053:	5b                   	pop    ebx
10005054:	c3                   	ret    
10005055:	90                   	nop

10005056 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10005056:	57                   	push   edi
10005057:	56                   	push   esi
10005058:	53                   	push   ebx
10005059:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000505d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005061:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005063:	85 db                	test   ebx,ebx
10005065:	74 5e                	je     100050c5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005067:	8b 30                	mov    esi,DWORD PTR [eax]
10005069:	89 da                	mov    edx,ebx
1000506b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000506e:	8b 3a                	mov    edi,DWORD PTR [edx]
10005070:	85 c0                	test   eax,eax
10005072:	74 08                	je     1000507c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005074:	39 f7                	cmp    edi,esi
10005076:	73 04                	jae    1000507c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005078:	89 c2                	mov    edx,eax
1000507a:	eb ef                	jmp    1000506b <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
1000507c:	39 f7                	cmp    edi,esi
1000507e:	75 45                	jne    100050c5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005080:	39 d3                	cmp    ebx,edx
10005082:	75 18                	jne    1000509c <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005084:	89 01                	mov    DWORD PTR [ecx],eax
10005086:	85 c0                	test   eax,eax
10005088:	75 09                	jne    10005093 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
1000508a:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10005091:	eb 1e                	jmp    100050b1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005093:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000509a:	eb 15                	jmp    100050b1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000509c:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
1000509f:	85 c0                	test   eax,eax
100050a1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100050a4:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050a7:	74 05                	je     100050ae <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100050a9:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100050ac:	eb 03                	jmp    100050b1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050ae:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100050b1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
100050b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100050bd:	5b                   	pop    ebx
100050be:	5e                   	pop    esi
100050bf:	5f                   	pop    edi
100050c0:	e9 fc ff ff ff       	jmp    100050c1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	100050c1: R_386_PC32	operator delete(void*, unsigned long)
100050c5:	5b                   	pop    ebx
100050c6:	5e                   	pop    esi
100050c7:	5f                   	pop    edi
100050c8:	c3                   	ret    
100050c9:	53                   	push   ebx
100050ca:	46                   	inc    esi
100050cb:	4e                   	dec    esi
100050cc:	43                   	inc    ebx
100050cd:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100050d0:	4e                   	dec    esi
100050d1:	32 00                	xor    al,BYTE PTR [eax]
100050d3:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
100050d6:	53                   	push   ebx
100050d7:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
100050da:	43                   	inc    ebx
100050db:	6f                   	outs   dx,DWORD PTR ds:[esi]
100050dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050dd:	74 65                	je     10005144 <List<NIWindow*>::deleteElement(NIWindow*&)+0xee>
100050df:	78 74                	js     10005155 <List<NIWindow*>::deleteElement(NIWindow*&)+0xff>
100050e1:	3a 3a                	cmp    bh,BYTE PTR [edx]
100050e3:	64 72 76             	fs jb  1000515c <List<NIWindow*>::deleteElement(NIWindow*&)+0x106>
100050e6:	52                   	push   edx
100050e7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
100050e9:	64 65 72 54          	fs gs jb 10005141 <List<NIWindow*>::deleteElement(NIWindow*&)+0xeb>
100050ed:	54                   	push   esp
100050ee:	46                   	inc    esi
100050ef:	34 00                	xor    al,0x0
100050f1:	43                   	inc    ebx
100050f2:	3a 2f                	cmp    ch,BYTE PTR [edi]
100050f4:	42                   	inc    edx
100050f5:	61                   	popa   
100050f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050f7:	61                   	popa   
100050f8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050f9:	61                   	popa   
100050fa:	2f                   	das    
100050fb:	46                   	inc    esi
100050fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
100050fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050fe:	74 73                	je     10005173 <List<NIWindow*>::deleteElement(NIWindow*&)+0x11d>
10005100:	2f                   	das    
10005101:	53                   	push   ebx
10005102:	46                   	inc    esi
10005103:	4e                   	dec    esi
10005104:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10005107:	4e                   	dec    esi
10005108:	4e                   	dec    esi
10005109:	4f                   	dec    edi
1000510a:	54                   	push   esp
1000510b:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000510f:	44                   	inc    esp
10005110:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10005113:	4e                   	dec    esi
10005114:	54                   	push   esp
10005115:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005119:	45                   	inc    ebp
1000511a:	43                   	inc    ebx
1000511b:	54                   	push   esp
1000511c:	4f                   	dec    edi
1000511d:	52                   	push   edx
1000511e:	59                   	pop    ecx
1000511f:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005122:	2f                   	das    
10005123:	42                   	inc    edx
10005124:	61                   	popa   
10005125:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005126:	61                   	popa   
10005127:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005128:	61                   	popa   
10005129:	2f                   	das    
1000512a:	46                   	inc    esi
1000512b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000512c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000512d:	74 73                	je     100051a2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x14c>
1000512f:	2f                   	das    
10005130:	53                   	push   ebx
10005131:	46                   	inc    esi
10005132:	4e                   	dec    esi
10005133:	2f                   	das    
10005134:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10005137:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005138:	74 20                	je     1000515a <List<NIWindow*>::deleteElement(NIWindow*&)+0x104>
1000513a:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005141:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10005148:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
1000514c:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005152:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005153:	74 3a                	je     1000518f <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005155:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
1000515b:	53                   	push   ebx
1000515c:	46                   	inc    esi
1000515d:	4e                   	dec    esi
1000515e:	5f                   	pop    edi
1000515f:	52                   	push   edx
10005160:	45                   	inc    ebp
10005161:	53                   	push   ebx
10005162:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005168:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
1000516b:	6d                   	ins    DWORD PTR es:[edi],dx
1000516c:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000516d:	72 79                	jb     100051e8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x192>
1000516f:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005172:	6c                   	ins    BYTE PTR es:[edi],dx
10005173:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005174:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10005177:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
1000517e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000517f:	72 00                	jb     10005181 <List<NIWindow*>::deleteElement(NIWindow*&)+0x12b>
10005181:	42                   	inc    edx
10005182:	61                   	popa   
10005183:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10005187:	6c                   	ins    BYTE PTR es:[edi],dx
10005188:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
1000518c:	72 6d                	jb     100051fb <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a5>
1000518e:	61                   	popa   
1000518f:	74 00                	je     10005191 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13b>
10005191:	4e                   	dec    esi
10005192:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005193:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005196:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005197:	74 20                	je     100051b9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x163>
10005199:	66 61                	popaw  
1000519b:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
1000519e:	66 6f                	outs   dx,WORD PTR ds:[esi]
100051a0:	75 6e                	jne    10005210 <_ssfn__compute_huffman_codes::length_dezigzag+0x10>
100051a2:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
100051a6:	76 61                	jbe    10005209 <_ssfn__compute_huffman_codes::length_dezigzag+0x9>
100051a8:	6c                   	ins    BYTE PTR es:[edi],dx
100051a9:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
100051b1:	20 76 61             	and    BYTE PTR [esi+0x61],dh
100051b4:	6c                   	ins    BYTE PTR es:[edi],dx
100051b5:	75 65                	jne    1000521c <_ssfn__compute_huffman_codes::length_dezigzag+0x1c>
100051b7:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100051ba:	76 61                	jbe    1000521d <_ssfn__compute_huffman_codes::length_dezigzag+0x1d>
100051bc:	6c                   	ins    BYTE PTR es:[edi],dx
100051bd:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
100051c5:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100051c8:	76 61                	jbe    1000522b <_ssfn__zdist_extra+0xb>
100051ca:	6c                   	ins    BYTE PTR es:[edi],dx
100051cb:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
100051d3:	47                   	inc    edi
100051d4:	6c                   	ins    BYTE PTR es:[edi],dx
100051d5:	79 70                	jns    10005247 <_ssfn__zdist_extra+0x27>
100051d7:	68 20 6e 6f 74       	push   0x746f6e20
100051dc:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100051df:	75 6e                	jne    1000524f <_ssfn__zdist_extra+0x2f>
100051e1:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
100051e5:	66 90                	xchg   ax,ax
100051e7:	66 90                	xchg   ax,ax
100051e9:	66 90                	xchg   ax,ax
100051eb:	66 90                	xchg   ax,ax
100051ed:	66 90                	xchg   ax,ax
100051ef:	66 90                	xchg   ax,ax
100051f1:	66 90                	xchg   ax,ax
100051f3:	66 90                	xchg   ax,ax
100051f5:	66 90                	xchg   ax,ax
100051f7:	66 90                	xchg   ax,ax
100051f9:	66 90                	xchg   ax,ax
100051fb:	66 90                	xchg   ax,ax
100051fd:	66 90                	xchg   ax,ax
100051ff:	90                   	nop

10005200 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005200:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005210:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005220 <_ssfn__zdist_extra>:
	...
10005230:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005240:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005250:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005260:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005270:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005280:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005290:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

100052a0 <_ssfn__zdist_base>:
100052a0:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
100052b0:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
100052c0:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
100052d0:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
100052e0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
100052f0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005300:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005310:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005320 <_ssfn__zlength_extra>:
	...
10005340:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005350:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005360:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005370:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005380:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

100053a0 <_ssfn__zlength_base>:
100053a0:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
100053b0:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
100053c0:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
100053d0:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
100053e0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
100053f0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005400:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005410:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005420:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005430:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10005440:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10005450:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10005460:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
10005470:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10005480:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10005490:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
100054a0:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
100054b0:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
100054c0:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
100054d0:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
100054e0:	65 72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c     er..NiSystemCall
100054f0:	48 61 6e 64 6c 65 72 0a 00 4e 69 4c 69 6e 6b 43     Handler..NiLinkC
10005500:	6f 6d 6d 61 6e 64 43 6c 65 61 72 46 72 61 6d 65     ommandClearFrame
10005510:	62 75 66 66 65 72 0a 00 41 53 53 45 52 54 49 4f     buffer..ASSERTIO
10005520:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
