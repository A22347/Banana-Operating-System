
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	6a 40                	push   0x40
1000009b:	e8 fc ff ff ff       	call   1000009c <NiMain(void*)+0x9c>	1000009c: R_386_PC32	malloc
100000a0:	59                   	pop    ecx
100000a1:	89 c5                	mov    ebp,eax
100000a3:	5b                   	pop    ebx
100000a4:	6a 01                	push   0x1
100000a6:	6a 01                	push   0x1
100000a8:	6a 00                	push   0x0
100000aa:	6a 00                	push   0x0
100000ac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ae: R_386_32	ctxt
100000b2:	50                   	push   eax
100000b3:	e8 fc ff ff ff       	call   100000b4 <NiMain(void*)+0xb4>	100000b4: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000b8:	83 c4 14             	add    esp,0x14
100000bb:	6a 40                	push   0x40
100000bd:	e8 fc ff ff ff       	call   100000be <NiMain(void*)+0xbe>	100000be: R_386_PC32	malloc
100000c2:	5e                   	pop    esi
100000c3:	89 c7                	mov    edi,eax
100000c5:	58                   	pop    eax
100000c6:	68 40 01 00 00       	push   0x140
100000cb:	68 90 01 00 00       	push   0x190
100000d0:	6a 32                	push   0x32
100000d2:	6a 32                	push   0x32
100000d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d6: R_386_32	ctxt
100000da:	57                   	push   edi
100000db:	e8 fc ff ff ff       	call   100000dc <NiMain(void*)+0xdc>	100000dc: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e0:	83 c4 14             	add    esp,0x14
100000e3:	6a 40                	push   0x40
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	malloc
100000ea:	89 c6                	mov    esi,eax
100000ec:	58                   	pop    eax
100000ed:	5a                   	pop    edx
100000ee:	68 7c 01 00 00       	push   0x17c
100000f3:	68 f4 01 00 00       	push   0x1f4
100000f8:	68 96 00 00 00       	push   0x96
100000fd:	68 c8 00 00 00       	push   0xc8
10000102:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000104: R_386_32	ctxt
10000108:	56                   	push   esi
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
1000010e:	83 c4 14             	add    esp,0x14
10000111:	6a 40                	push   0x40
10000113:	e8 fc ff ff ff       	call   10000114 <NiMain(void*)+0x114>	10000114: R_386_PC32	malloc
10000118:	59                   	pop    ecx
10000119:	89 c3                	mov    ebx,eax
1000011b:	58                   	pop    eax
1000011c:	68 af 00 00 00       	push   0xaf
10000121:	68 0e 01 00 00       	push   0x10e
10000126:	68 90 01 00 00       	push   0x190
1000012b:	6a 7d                	push   0x7d
1000012d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012f: R_386_32	ctxt
10000133:	53                   	push   ebx
10000134:	e8 fc ff ff ff       	call   10000135 <NiMain(void*)+0x135>	10000135: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000139:	83 c4 18             	add    esp,0x18
1000013c:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
10000140:	55                   	push   ebp
10000141:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000143: R_386_32	desktop
10000147:	e8 fc ff ff ff       	call   10000148 <NiMain(void*)+0x148>	10000148: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000014c:	58                   	pop    eax
1000014d:	5a                   	pop    edx
1000014e:	57                   	push   edi
1000014f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000151: R_386_32	desktop
10000155:	e8 fc ff ff ff       	call   10000156 <NiMain(void*)+0x156>	10000156: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015a:	59                   	pop    ecx
1000015b:	5f                   	pop    edi
1000015c:	56                   	push   esi
1000015d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000015f: R_386_32	desktop
10000163:	e8 fc ff ff ff       	call   10000164 <NiMain(void*)+0x164>	10000164: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000168:	5d                   	pop    ebp
10000169:	58                   	pop    eax
1000016a:	53                   	push   ebx
1000016b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016d: R_386_32	desktop
10000171:	e8 fc ff ff ff       	call   10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000176:	58                   	pop    eax
10000177:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000179: R_386_32	desktop
1000017d:	e8 fc ff ff ff       	call   1000017e <NiMain(void*)+0x17e>	1000017e: R_386_PC32	NIDesktop::completeRefresh()
10000182:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
10000189:	e8 fc ff ff ff       	call   1000018a <NiMain(void*)+0x18a>	1000018a: R_386_PC32	malloc
1000018e:	6a 00                	push   0x0
10000190:	89 c3                	mov    ebx,eax
10000192:	6a 00                	push   0x0
10000194:	68 63 51 00 10       	push   0x10005163	10000195: R_386_32	.text
10000199:	50                   	push   eax
1000019a:	e8 fc ff ff ff       	call   1000019b <NiMain(void*)+0x19b>	1000019b: R_386_PC32	Process::Process(char const*, Process*, char**)
1000019f:	83 c4 14             	add    esp,0x14
100001a2:	53                   	push   ebx
100001a3:	e8 fc ff ff ff       	call   100001a4 <NiMain(void*)+0x1a4>	100001a4: R_386_PC32	Process::createUserThread()
100001a8:	83 c4 10             	add    esp,0x10
100001ab:	fa                   	cli    
100001ac:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100001ae: R_386_32	irqDisableCounter
100001b2:	e8 fc ff ff ff       	call   100001b3 <NiMain(void*)+0x1b3>	100001b3: R_386_PC32	schedule()
100001b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100001b8: R_386_32	irqDisableCounter
100001bc:	48                   	dec    eax
100001bd:	a3 00 00 00 00       	mov    ds:0x0,eax	100001be: R_386_32	irqDisableCounter
100001c2:	75 e7                	jne    100001ab <NiMain(void*)+0x1ab>
100001c4:	fb                   	sti    
100001c5:	eb e4                	jmp    100001ab <NiMain(void*)+0x1ab>
100001c7:	90                   	nop

100001c8 <NiBegin(void*)>:
100001c8:	83 ec 18             	sub    esp,0x18
100001cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001cf:	e8 fc ff ff ff       	call   100001d0 <NiBegin(void*)+0x8>	100001d0: R_386_PC32	NiMain(void*)

100001d4 <_ssfn__bitreverse16>:
100001d4:	89 c2                	mov    edx,eax
100001d6:	01 c0                	add    eax,eax
100001d8:	d1 fa                	sar    edx,1
100001da:	25 aa aa 00 00       	and    eax,0xaaaa
100001df:	81 e2 55 55 00 00    	and    edx,0x5555
100001e5:	09 c2                	or     edx,eax
100001e7:	89 d0                	mov    eax,edx
100001e9:	c1 e2 02             	shl    edx,0x2
100001ec:	c1 f8 02             	sar    eax,0x2
100001ef:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001f5:	25 33 33 00 00       	and    eax,0x3333
100001fa:	09 d0                	or     eax,edx
100001fc:	89 c2                	mov    edx,eax
100001fe:	c1 e0 04             	shl    eax,0x4
10000201:	c1 fa 04             	sar    edx,0x4
10000204:	25 f0 f0 00 00       	and    eax,0xf0f0
10000209:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000020f:	09 c2                	or     edx,eax
10000211:	89 d1                	mov    ecx,edx
10000213:	c1 e2 08             	shl    edx,0x8
10000216:	c1 f9 08             	sar    ecx,0x8
10000219:	0f b7 c2             	movzx  eax,dx
1000021c:	09 c8                	or     eax,ecx
1000021e:	c3                   	ret    

1000021f <_ssfn__zhuffman_decode>:
1000021f:	55                   	push   ebp
10000220:	57                   	push   edi
10000221:	56                   	push   esi
10000222:	53                   	push   ebx
10000223:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000227:	7f 1d                	jg     10000246 <_ssfn__zhuffman_decode+0x27>
10000229:	8b 18                	mov    ebx,DWORD PTR [eax]
1000022b:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000022e:	89 08                	mov    DWORD PTR [eax],ecx
10000230:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000233:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000236:	d3 e3                	shl    ebx,cl
10000238:	83 c1 08             	add    ecx,0x8
1000023b:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000023e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000241:	83 f9 18             	cmp    ecx,0x18
10000244:	eb e1                	jmp    10000227 <_ssfn__zhuffman_decode+0x8>
10000246:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000249:	89 f9                	mov    ecx,edi
1000024b:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000251:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000255:	89 cb                	mov    ebx,ecx
10000257:	85 c9                	test   ecx,ecx
10000259:	74 15                	je     10000270 <_ssfn__zhuffman_decode+0x51>
1000025b:	c1 f9 09             	sar    ecx,0x9
1000025e:	89 da                	mov    edx,ebx
10000260:	d3 ef                	shr    edi,cl
10000262:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000265:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000268:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000026e:	eb 58                	jmp    100002c8 <_ssfn__zhuffman_decode+0xa9>
10000270:	89 d5                	mov    ebp,edx
10000272:	89 c3                	mov    ebx,eax
10000274:	be 0a 00 00 00       	mov    esi,0xa
10000279:	89 f8                	mov    eax,edi
1000027b:	e8 54 ff ff ff       	call   100001d4 <_ssfn__bitreverse16>
10000280:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000287:	7c 03                	jl     1000028c <_ssfn__zhuffman_decode+0x6d>
10000289:	46                   	inc    esi
1000028a:	eb f4                	jmp    10000280 <_ssfn__zhuffman_decode+0x61>
1000028c:	83 ca ff             	or     edx,0xffffffff
1000028f:	83 fe 10             	cmp    esi,0x10
10000292:	74 34                	je     100002c8 <_ssfn__zhuffman_decode+0xa9>
10000294:	8d 14 36             	lea    edx,[esi+esi*1]
10000297:	b9 10 00 00 00       	mov    ecx,0x10
1000029c:	01 ea                	add    edx,ebp
1000029e:	29 f1                	sub    ecx,esi
100002a0:	d3 f8                	sar    eax,cl
100002a2:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100002a9:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100002b0:	29 c8                	sub    eax,ecx
100002b2:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100002b5:	89 f1                	mov    ecx,esi
100002b7:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100002be:	d3 ef                	shr    edi,cl
100002c0:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100002c3:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002c8:	5b                   	pop    ebx
100002c9:	89 d0                	mov    eax,edx
100002cb:	5e                   	pop    esi
100002cc:	5f                   	pop    edi
100002cd:	5d                   	pop    ebp
100002ce:	c3                   	ret    

100002cf <_ssfn__zexpand>:
100002cf:	55                   	push   ebp
100002d0:	57                   	push   edi
100002d1:	56                   	push   esi
100002d2:	53                   	push   ebx
100002d3:	83 ec 0c             	sub    esp,0xc
100002d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002d9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002dc:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002df:	29 f9                	sub    ecx,edi
100002e1:	83 f9 08             	cmp    ecx,0x8
100002e4:	74 04                	je     100002ea <_ssfn__zexpand+0x1b>
100002e6:	31 c0                	xor    eax,eax
100002e8:	eb 3c                	jmp    10000326 <_ssfn__zexpand+0x57>
100002ea:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002ed:	75 f7                	jne    100002e6 <_ssfn__zexpand+0x17>
100002ef:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002f3:	75 f1                	jne    100002e6 <_ssfn__zexpand+0x17>
100002f5:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002f9:	75 eb                	jne    100002e6 <_ssfn__zexpand+0x17>
100002fb:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100002fe:	89 c3                	mov    ebx,eax
10000300:	89 d6                	mov    esi,edx
10000302:	50                   	push   eax
10000303:	50                   	push   eax
10000304:	55                   	push   ebp
10000305:	57                   	push   edi
10000306:	e8 fc ff ff ff       	call   10000307 <_ssfn__zexpand+0x38>	10000307: R_386_PC32	realloc
1000030b:	83 c4 10             	add    esp,0x10
1000030e:	85 c0                	test   eax,eax
10000310:	74 d4                	je     100002e6 <_ssfn__zexpand+0x17>
10000312:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000315:	29 fe                	sub    esi,edi
10000317:	01 c6                	add    esi,eax
10000319:	01 e8                	add    eax,ebp
1000031b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000031e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000321:	b8 01 00 00 00       	mov    eax,0x1
10000326:	83 c4 0c             	add    esp,0xc
10000329:	5b                   	pop    ebx
1000032a:	5e                   	pop    esi
1000032b:	5f                   	pop    edi
1000032c:	5d                   	pop    ebp
1000032d:	c3                   	ret    

1000032e <_ssfn__zbuild_huffman>:
1000032e:	55                   	push   ebp
1000032f:	57                   	push   edi
10000330:	56                   	push   esi
10000331:	53                   	push   ebx
10000332:	89 c3                	mov    ebx,eax
10000334:	81 ec a0 00 00 00    	sub    esp,0xa0
1000033a:	31 c0                	xor    eax,eax
1000033c:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000033f:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
10000343:	b9 11 00 00 00       	mov    ecx,0x11
10000348:	89 ef                	mov    edi,ebp
1000034a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000034e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000350:	b9 00 01 00 00       	mov    ecx,0x100
10000355:	89 df                	mov    edi,ebx
10000357:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000359:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000035c:	7d 0f                	jge    1000036d <_ssfn__zbuild_huffman+0x3f>
1000035e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
10000362:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000366:	40                   	inc    eax
10000367:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
1000036b:	eb ec                	jmp    10000359 <_ssfn__zbuild_huffman+0x2b>
1000036d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000375:	b9 01 00 00 00       	mov    ecx,0x1
1000037a:	b8 01 00 00 00       	mov    eax,0x1
1000037f:	89 c7                	mov    edi,eax
10000381:	d3 e7                	shl    edi,cl
10000383:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000387:	0f 8f 10 01 00 00    	jg     1000049d <_ssfn__zbuild_huffman+0x16f>
1000038d:	41                   	inc    ecx
1000038e:	83 f9 10             	cmp    ecx,0x10
10000391:	75 ec                	jne    1000037f <_ssfn__zbuild_huffman+0x51>
10000393:	31 ff                	xor    edi,edi
10000395:	31 f6                	xor    esi,esi
10000397:	b8 01 00 00 00       	mov    eax,0x1
1000039c:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100003a0:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100003a4:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100003ac:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100003b4:	01 ef                	add    edi,ebp
100003b6:	85 ed                	test   ebp,ebp
100003b8:	74 11                	je     100003cb <_ssfn__zbuild_huffman+0x9d>
100003ba:	ba 01 00 00 00       	mov    edx,0x1
100003bf:	88 c1                	mov    cl,al
100003c1:	d3 e2                	shl    edx,cl
100003c3:	39 fa                	cmp    edx,edi
100003c5:	0f 8c d2 00 00 00    	jl     1000049d <_ssfn__zbuild_huffman+0x16f>
100003cb:	89 fa                	mov    edx,edi
100003cd:	b9 10 00 00 00       	mov    ecx,0x10
100003d2:	01 ff                	add    edi,edi
100003d4:	29 c1                	sub    ecx,eax
100003d6:	01 ee                	add    esi,ebp
100003d8:	d3 e2                	shl    edx,cl
100003da:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003e1:	40                   	inc    eax
100003e2:	83 f8 10             	cmp    eax,0x10
100003e5:	75 b5                	jne    1000039c <_ssfn__zbuild_huffman+0x6e>
100003e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003ea:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003f8:	31 ff                	xor    edi,edi
100003fa:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100003fe:	0f 8d 9d 00 00 00    	jge    100004a1 <_ssfn__zbuild_huffman+0x173>
10000404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000408:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
1000040c:	89 f2                	mov    edx,esi
1000040e:	85 f6                	test   esi,esi
10000410:	0f 84 81 00 00 00    	je     10000497 <_ssfn__zbuild_huffman+0x169>
10000416:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000419:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
1000041d:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000420:	89 e9                	mov    ecx,ebp
10000422:	89 04 24             	mov    DWORD PTR [esp],eax
10000425:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
1000042c:	29 c1                	sub    ecx,eax
1000042e:	89 c8                	mov    eax,ecx
10000430:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000433:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000043a:	01 c8                	add    eax,ecx
1000043c:	83 fe 09             	cmp    esi,0x9
1000043f:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000446:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000044e:	7f 42                	jg     10000492 <_ssfn__zbuild_huffman+0x164>
10000450:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000454:	89 e8                	mov    eax,ebp
10000456:	e8 79 fd ff ff       	call   100001d4 <_ssfn__bitreverse16>
1000045b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000045f:	b9 10 00 00 00       	mov    ecx,0x10
10000464:	29 f1                	sub    ecx,esi
10000466:	d3 f8                	sar    eax,cl
10000468:	88 d1                	mov    cl,dl
1000046a:	89 04 24             	mov    DWORD PTR [esp],eax
1000046d:	89 f2                	mov    edx,esi
1000046f:	b8 01 00 00 00       	mov    eax,0x1
10000474:	c1 e2 09             	shl    edx,0x9
10000477:	d3 e0                	shl    eax,cl
10000479:	09 fa                	or     edx,edi
1000047b:	89 c1                	mov    ecx,eax
1000047d:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000484:	7f 0c                	jg     10000492 <_ssfn__zbuild_huffman+0x164>
10000486:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000489:	01 0c 24             	add    DWORD PTR [esp],ecx
1000048c:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10000490:	eb eb                	jmp    1000047d <_ssfn__zbuild_huffman+0x14f>
10000492:	45                   	inc    ebp
10000493:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
10000497:	47                   	inc    edi
10000498:	e9 5d ff ff ff       	jmp    100003fa <_ssfn__zbuild_huffman+0xcc>
1000049d:	31 c0                	xor    eax,eax
1000049f:	eb 05                	jmp    100004a6 <_ssfn__zbuild_huffman+0x178>
100004a1:	b8 01 00 00 00       	mov    eax,0x1
100004a6:	81 c4 a0 00 00 00    	add    esp,0xa0
100004ac:	5b                   	pop    ebx
100004ad:	5e                   	pop    esi
100004ae:	5f                   	pop    edi
100004af:	5d                   	pop    ebp
100004b0:	c3                   	ret    

100004b1 <_ssfn_fc.part.1>:
100004b1:	55                   	push   ebp
100004b2:	57                   	push   edi
100004b3:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100004b9:	56                   	push   esi
100004ba:	53                   	push   ebx
100004bb:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100004c1:	83 ec 0c             	sub    esp,0xc
100004c4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004c7:	74 5d                	je     10000526 <_ssfn_fc.part.1+0x75>
100004c9:	31 f6                	xor    esi,esi
100004cb:	8b 03                	mov    eax,DWORD PTR [ebx]
100004cd:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004d1:	74 35                	je     10000508 <_ssfn_fc.part.1+0x57>
100004d3:	31 ed                	xor    ebp,ebp
100004d5:	8b 03                	mov    eax,DWORD PTR [ebx]
100004d7:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004da:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004dd:	85 c0                	test   eax,eax
100004df:	74 0c                	je     100004ed <_ssfn_fc.part.1+0x3c>
100004e1:	83 ec 0c             	sub    esp,0xc
100004e4:	50                   	push   eax
100004e5:	e8 fc ff ff ff       	call   100004e6 <_ssfn_fc.part.1+0x35>	100004e6: R_386_PC32	free
100004ea:	83 c4 10             	add    esp,0x10
100004ed:	83 c5 04             	add    ebp,0x4
100004f0:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004f6:	75 dd                	jne    100004d5 <_ssfn_fc.part.1+0x24>
100004f8:	83 ec 0c             	sub    esp,0xc
100004fb:	8b 03                	mov    eax,DWORD PTR [ebx]
100004fd:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000500:	e8 fc ff ff ff       	call   10000501 <_ssfn_fc.part.1+0x50>	10000501: R_386_PC32	free
10000505:	83 c4 10             	add    esp,0x10
10000508:	83 c6 04             	add    esi,0x4
1000050b:	81 fe 00 04 00 00    	cmp    esi,0x400
10000511:	75 b8                	jne    100004cb <_ssfn_fc.part.1+0x1a>
10000513:	83 ec 0c             	sub    esp,0xc
10000516:	ff 33                	push   DWORD PTR [ebx]
10000518:	e8 fc ff ff ff       	call   10000519 <_ssfn_fc.part.1+0x68>	10000519: R_386_PC32	free
1000051d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000523:	83 c4 10             	add    esp,0x10
10000526:	83 c3 04             	add    ebx,0x4
10000529:	39 fb                	cmp    ebx,edi
1000052b:	75 97                	jne    100004c4 <_ssfn_fc.part.1+0x13>
1000052d:	83 c4 0c             	add    esp,0xc
10000530:	5b                   	pop    ebx
10000531:	5e                   	pop    esi
10000532:	5f                   	pop    edi
10000533:	5d                   	pop    ebp
10000534:	c3                   	ret    

10000535 <_ssfn_l>:
10000535:	57                   	push   edi
10000536:	56                   	push   esi
10000537:	53                   	push   ebx
10000538:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000053c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000540:	39 ce                	cmp    esi,ecx
10000542:	89 f3                	mov    ebx,esi
10000544:	0f 9d c1             	setge  cl
10000547:	c1 eb 1f             	shr    ebx,0x1f
1000054a:	09 d9                	or     ecx,ebx
1000054c:	89 fb                	mov    ebx,edi
1000054e:	c1 eb 1f             	shr    ebx,0x1f
10000551:	08 d9                	or     cl,bl
10000553:	0f 85 e9 00 00 00    	jne    10000642 <_ssfn_l+0x10d>
10000559:	39 d7                	cmp    edi,edx
1000055b:	0f 8d e1 00 00 00    	jge    10000642 <_ssfn_l+0x10d>
10000561:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000567:	8d 51 08             	lea    edx,[ecx+0x8]
1000056a:	8d 4f 08             	lea    ecx,[edi+0x8]
1000056d:	c1 fa 04             	sar    edx,0x4
10000570:	c1 f9 04             	sar    ecx,0x4
10000573:	39 ca                	cmp    edx,ecx
10000575:	75 1a                	jne    10000591 <_ssfn_l+0x5c>
10000577:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
1000057d:	8d 4e 08             	lea    ecx,[esi+0x8]
10000580:	83 c2 08             	add    edx,0x8
10000583:	c1 f9 04             	sar    ecx,0x4
10000586:	c1 fa 04             	sar    edx,0x4
10000589:	39 ca                	cmp    edx,ecx
1000058b:	0f 84 b1 00 00 00    	je     10000642 <_ssfn_l+0x10d>
10000591:	89 c3                	mov    ebx,eax
10000593:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
10000599:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
1000059f:	7f 3e                	jg     100005df <_ssfn_l+0xaa>
100005a1:	05 00 02 00 00       	add    eax,0x200
100005a6:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100005ac:	52                   	push   edx
100005ad:	01 c0                	add    eax,eax
100005af:	52                   	push   edx
100005b0:	50                   	push   eax
100005b1:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100005b7:	e8 fc ff ff ff       	call   100005b8 <_ssfn_l+0x83>	100005b8: R_386_PC32	realloc
100005bc:	83 c4 10             	add    esp,0x10
100005bf:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005c5:	85 c0                	test   eax,eax
100005c7:	75 16                	jne    100005df <_ssfn_l+0xaa>
100005c9:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005d3:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005dd:	eb 63                	jmp    10000642 <_ssfn_l+0x10d>
100005df:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005e6:	75 26                	jne    1000060e <_ssfn_l+0xd9>
100005e8:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005ee:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005f4:	66 89 10             	mov    WORD PTR [eax],dx
100005f7:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005fd:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000603:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000607:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000060e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000614:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000061a:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000061e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000624:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000062a:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000062f:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000635:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000063c:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000642:	5b                   	pop    ebx
10000643:	5e                   	pop    esi
10000644:	5f                   	pop    edi
10000645:	c3                   	ret    

10000646 <_ssfn_b>:
10000646:	55                   	push   ebp
10000647:	57                   	push   edi
10000648:	56                   	push   esi
10000649:	53                   	push   ebx
1000064a:	83 ec 4c             	sub    esp,0x4c
1000064d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000651:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000655:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000659:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000065d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000661:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000665:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000669:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
1000066d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000671:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000675:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000679:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
1000067d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000681:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000685:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000689:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10000690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000694:	83 f8 04             	cmp    eax,0x4
10000697:	75 28                	jne    100006c1 <_ssfn_b+0x7b>
10000699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000069d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100006a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100006a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100006a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100006b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100006b5:	83 c4 4c             	add    esp,0x4c
100006b8:	5b                   	pop    ebx
100006b9:	5e                   	pop    esi
100006ba:	5f                   	pop    edi
100006bb:	5d                   	pop    ebp
100006bc:	e9 74 fe ff ff       	jmp    10000535 <_ssfn_l>
100006c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006c5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006c9:	75 0e                	jne    100006d9 <_ssfn_b+0x93>
100006cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006cf:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006d3:	0f 84 19 01 00 00    	je     100007f2 <_ssfn_b+0x1ac>
100006d9:	be 02 00 00 00       	mov    esi,0x2
100006de:	89 d8                	mov    eax,ebx
100006e0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006e4:	99                   	cdq    
100006e5:	f7 fe                	idiv   esi
100006e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006ef:	89 e8                	mov    eax,ebp
100006f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006f5:	99                   	cdq    
100006f6:	f7 fe                	idiv   esi
100006f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
100006fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000700:	89 f8                	mov    eax,edi
10000702:	29 d8                	sub    eax,ebx
10000704:	99                   	cdq    
10000705:	f7 fe                	idiv   esi
10000707:	01 c3                	add    ebx,eax
10000709:	89 c8                	mov    eax,ecx
1000070b:	29 e8                	sub    eax,ebp
1000070d:	99                   	cdq    
1000070e:	f7 fe                	idiv   esi
10000710:	01 e8                	add    eax,ebp
10000712:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000071a:	29 f8                	sub    eax,edi
1000071c:	99                   	cdq    
1000071d:	f7 fe                	idiv   esi
1000071f:	01 f8                	add    eax,edi
10000721:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000725:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000072d:	29 c8                	sub    eax,ecx
1000072f:	99                   	cdq    
10000730:	f7 fe                	idiv   esi
10000732:	01 c8                	add    eax,ecx
10000734:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000738:	89 d8                	mov    eax,ebx
1000073a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000073e:	99                   	cdq    
1000073f:	f7 fe                	idiv   esi
10000741:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000074c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000750:	99                   	cdq    
10000751:	f7 fe                	idiv   esi
10000753:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000756:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000075a:	29 d8                	sub    eax,ebx
1000075c:	99                   	cdq    
1000075d:	f7 fe                	idiv   esi
1000075f:	83 ec 0c             	sub    esp,0xc
10000762:	01 d8                	add    eax,ebx
10000764:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000768:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000076c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10000770:	99                   	cdq    
10000771:	f7 fe                	idiv   esi
10000773:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000777:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000077b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000077f:	29 c8                	sub    eax,ecx
10000781:	99                   	cdq    
10000782:	f7 fe                	idiv   esi
10000784:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000787:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000078b:	29 e8                	sub    eax,ebp
1000078d:	99                   	cdq    
1000078e:	f7 fe                	idiv   esi
10000790:	8d 34 28             	lea    esi,[eax+ebp*1]
10000793:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000797:	8d 78 01             	lea    edi,[eax+0x1]
1000079a:	57                   	push   edi
1000079b:	56                   	push   esi
1000079c:	53                   	push   ebx
1000079d:	55                   	push   ebp
1000079e:	51                   	push   ecx
1000079f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007af:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007b3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007bb:	e8 86 fe ff ff       	call   10000646 <_ssfn_b>
100007c0:	83 c4 24             	add    esp,0x24
100007c3:	57                   	push   edi
100007c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007d8:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007dc:	56                   	push   esi
100007dd:	53                   	push   ebx
100007de:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007e2:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007ea:	e8 57 fe ff ff       	call   10000646 <_ssfn_b>
100007ef:	83 c4 30             	add    esp,0x30
100007f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007f7:	0f 85 9c fe ff ff    	jne    10000699 <_ssfn_b+0x53>
100007fd:	83 c4 4c             	add    esp,0x4c
10000800:	5b                   	pop    ebx
10000801:	5e                   	pop    esi
10000802:	5f                   	pop    edi
10000803:	5d                   	pop    ebp
10000804:	c3                   	ret    

10000805 <_ssfn__zreceive>:
10000805:	56                   	push   esi
10000806:	53                   	push   ebx
10000807:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000080a:	7d 1d                	jge    10000829 <_ssfn__zreceive+0x24>
1000080c:	8b 18                	mov    ebx,DWORD PTR [eax]
1000080e:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000811:	89 08                	mov    DWORD PTR [eax],ecx
10000813:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000816:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000819:	d3 e3                	shl    ebx,cl
1000081b:	83 c1 08             	add    ecx,0x8
1000081e:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000821:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000824:	83 f9 18             	cmp    ecx,0x18
10000827:	7e e3                	jle    1000080c <_ssfn__zreceive+0x7>
10000829:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
1000082c:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000082f:	89 f3                	mov    ebx,esi
10000831:	88 d1                	mov    cl,dl
10000833:	d3 eb                	shr    ebx,cl
10000835:	88 d1                	mov    cl,dl
10000837:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000083a:	bb 01 00 00 00       	mov    ebx,0x1
1000083f:	d3 e3                	shl    ebx,cl
10000841:	8d 43 ff             	lea    eax,[ebx-0x1]
10000844:	5b                   	pop    ebx
10000845:	21 f0                	and    eax,esi
10000847:	5e                   	pop    esi
10000848:	c3                   	ret    

10000849 <ssfn_utf8>:
10000849:	56                   	push   esi
1000084a:	53                   	push   ebx
1000084b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000084f:	8b 11                	mov    edx,DWORD PTR [ecx]
10000851:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000854:	89 f0                	mov    eax,esi
10000856:	84 c0                	test   al,al
10000858:	0f be d8             	movsx  ebx,al
1000085b:	78 04                	js     10000861 <ssfn_utf8+0x18>
1000085d:	89 d8                	mov    eax,ebx
1000085f:	eb 7d                	jmp    100008de <ssfn_utf8+0x95>
10000861:	f7 c6 20 00 00 00    	test   esi,0x20
10000867:	75 14                	jne    1000087d <ssfn_utf8+0x34>
10000869:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
1000086c:	c1 e3 06             	shl    ebx,0x6
1000086f:	83 e0 3f             	and    eax,0x3f
10000872:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000878:	42                   	inc    edx
10000879:	09 d8                	or     eax,ebx
1000087b:	eb 5f                	jmp    100008dc <ssfn_utf8+0x93>
1000087d:	f7 c6 10 00 00 00    	test   esi,0x10
10000883:	75 20                	jne    100008a5 <ssfn_utf8+0x5c>
10000885:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000889:	c1 e3 0c             	shl    ebx,0xc
1000088c:	c1 e0 06             	shl    eax,0x6
1000088f:	0f b7 db             	movzx  ebx,bx
10000892:	25 c0 0f 00 00       	and    eax,0xfc0
10000897:	83 c2 02             	add    edx,0x2
1000089a:	09 d8                	or     eax,ebx
1000089c:	8a 1a                	mov    bl,BYTE PTR [edx]
1000089e:	83 e3 3f             	and    ebx,0x3f
100008a1:	09 d8                	or     eax,ebx
100008a3:	eb 37                	jmp    100008dc <ssfn_utf8+0x93>
100008a5:	31 c0                	xor    eax,eax
100008a7:	83 e6 08             	and    esi,0x8
100008aa:	75 32                	jne    100008de <ssfn_utf8+0x95>
100008ac:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100008b0:	c1 e3 12             	shl    ebx,0x12
100008b3:	c1 e0 0c             	shl    eax,0xc
100008b6:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100008bc:	25 00 f0 03 00       	and    eax,0x3f000
100008c1:	83 c2 03             	add    edx,0x3
100008c4:	09 d8                	or     eax,ebx
100008c6:	8a 1a                	mov    bl,BYTE PTR [edx]
100008c8:	83 e3 3f             	and    ebx,0x3f
100008cb:	09 d8                	or     eax,ebx
100008cd:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008d1:	c1 e3 06             	shl    ebx,0x6
100008d4:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008da:	09 d8                	or     eax,ebx
100008dc:	89 11                	mov    DWORD PTR [ecx],edx
100008de:	ff 01                	inc    DWORD PTR [ecx]
100008e0:	5b                   	pop    ebx
100008e1:	5e                   	pop    esi
100008e2:	c3                   	ret    

100008e3 <_ssfn_c>:
100008e3:	55                   	push   ebp
100008e4:	57                   	push   edi
100008e5:	56                   	push   esi
100008e6:	53                   	push   ebx
100008e7:	83 ec 14             	sub    esp,0x14
100008ea:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008f0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008f4:	85 c0                	test   eax,eax
100008f6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
100008fc:	0f 84 e6 00 00 00    	je     100009e8 <_ssfn_c+0x105>
10000902:	31 ff                	xor    edi,edi
10000904:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000908:	0f 84 f3 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
1000090e:	85 d2                	test   edx,edx
10000910:	0f 84 eb 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
10000916:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000919:	0f 84 e2 00 00 00    	je     10000a01 <_ssfn_c+0x11e>
1000091f:	89 d6                	mov    esi,edx
10000921:	89 cd                	mov    ebp,ecx
10000923:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000926:	89 c3                	mov    ebx,eax
10000928:	85 d2                	test   edx,edx
1000092a:	74 38                	je     10000964 <_ssfn_c+0x81>
1000092c:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000092f:	31 c0                	xor    eax,eax
10000931:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000937:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000093b:	66 85 d2             	test   dx,dx
1000093e:	74 24                	je     10000964 <_ssfn_c+0x81>
10000940:	01 da                	add    edx,ebx
10000942:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000946:	8a 0a                	mov    cl,BYTE PTR [edx]
10000948:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000094c:	84 c9                	test   cl,cl
1000094e:	0f 84 9e 00 00 00    	je     100009f2 <_ssfn_c+0x10f>
10000954:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000956:	0f 85 90 00 00 00    	jne    100009ec <_ssfn_c+0x109>
1000095c:	47                   	inc    edi
1000095d:	42                   	inc    edx
1000095e:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000962:	eb e2                	jmp    10000946 <_ssfn_c+0x63>
10000964:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000968:	8d 44 24 10          	lea    eax,[esp+0x10]
1000096c:	50                   	push   eax
1000096d:	e8 fc ff ff ff       	call   1000096e <_ssfn_c+0x8b>	1000096e: R_386_PC32	ssfn_utf8
10000972:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000976:	29 f2                	sub    edx,esi
10000978:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
1000097b:	5a                   	pop    edx
1000097c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000980:	89 06                	mov    DWORD PTR [esi],eax
10000982:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000985:	89 df                	mov    edi,ebx
10000987:	31 db                	xor    ebx,ebx
10000989:	8a 17                	mov    dl,BYTE PTR [edi]
1000098b:	80 fa ff             	cmp    dl,0xff
1000098e:	75 08                	jne    10000998 <_ssfn_c+0xb5>
10000990:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000996:	eb 2a                	jmp    100009c2 <_ssfn_c+0xdf>
10000998:	88 d1                	mov    cl,dl
1000099a:	83 e1 c0             	and    ecx,0xffffffc0
1000099d:	80 f9 c0             	cmp    cl,0xc0
100009a0:	75 16                	jne    100009b8 <_ssfn_c+0xd5>
100009a2:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009a6:	c1 e2 08             	shl    edx,0x8
100009a9:	83 c7 02             	add    edi,0x2
100009ac:	81 e2 00 3f 00 00    	and    edx,0x3f00
100009b2:	09 ca                	or     edx,ecx
100009b4:	01 d3                	add    ebx,edx
100009b6:	eb 27                	jmp    100009df <_ssfn_c+0xfc>
100009b8:	80 f9 80             	cmp    cl,0x80
100009bb:	75 08                	jne    100009c5 <_ssfn_c+0xe2>
100009bd:	83 e2 3f             	and    edx,0x3f
100009c0:	01 d3                	add    ebx,edx
100009c2:	47                   	inc    edi
100009c3:	eb 1a                	jmp    100009df <_ssfn_c+0xfc>
100009c5:	39 d8                	cmp    eax,ebx
100009c7:	74 38                	je     10000a01 <_ssfn_c+0x11e>
100009c9:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009cd:	83 e2 40             	and    edx,0x40
100009d0:	80 fa 01             	cmp    dl,0x1
100009d3:	19 d2                	sbb    edx,edx
100009d5:	83 c2 06             	add    edx,0x6
100009d8:	0f af d1             	imul   edx,ecx
100009db:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009df:	43                   	inc    ebx
100009e0:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009e6:	76 a1                	jbe    10000989 <_ssfn_c+0xa6>
100009e8:	31 ff                	xor    edi,edi
100009ea:	eb 15                	jmp    10000a01 <_ssfn_c+0x11e>
100009ec:	40                   	inc    eax
100009ed:	e9 42 ff ff ff       	jmp    10000934 <_ssfn_c+0x51>
100009f2:	29 f7                	sub    edi,esi
100009f4:	05 00 f0 00 00       	add    eax,0xf000
100009f9:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
100009fc:	e9 7b ff ff ff       	jmp    1000097c <_ssfn_c+0x99>
10000a01:	83 c4 14             	add    esp,0x14
10000a04:	89 f8                	mov    eax,edi
10000a06:	5b                   	pop    ebx
10000a07:	5e                   	pop    esi
10000a08:	5f                   	pop    edi
10000a09:	5d                   	pop    ebp
10000a0a:	c3                   	ret    

10000a0b <_ssfn_zlib_decode>:
10000a0b:	55                   	push   ebp
10000a0c:	57                   	push   edi
10000a0d:	56                   	push   esi
10000a0e:	53                   	push   ebx
10000a0f:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000a15:	6a 08                	push   0x8
10000a17:	e8 fc ff ff ff       	call   10000a18 <_ssfn_zlib_decode+0xd>	10000a18: R_386_PC32	malloc
10000a1c:	83 c4 10             	add    esp,0x10
10000a1f:	89 c2                	mov    edx,eax
10000a21:	85 c0                	test   eax,eax
10000a23:	0f 84 eb 04 00 00    	je     10000f14 <_ssfn_zlib_decode+0x509>
10000a29:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a30:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a37:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a3e:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a45:	31 c0                	xor    eax,eax
10000a47:	83 c2 08             	add    edx,0x8
10000a4a:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a51:	c6 80 40 57 03 10 08 	mov    BYTE PTR [eax+0x10035740],0x8	10000a53: R_386_32	.bss
10000a58:	40                   	inc    eax
10000a59:	3d 90 00 00 00       	cmp    eax,0x90
10000a5e:	75 f1                	jne    10000a51 <_ssfn_zlib_decode+0x46>
10000a60:	c6 80 40 57 03 10 09 	mov    BYTE PTR [eax+0x10035740],0x9	10000a62: R_386_32	.bss
10000a67:	40                   	inc    eax
10000a68:	3d 00 01 00 00       	cmp    eax,0x100
10000a6d:	75 f1                	jne    10000a60 <_ssfn_zlib_decode+0x55>
10000a6f:	c6 80 40 57 03 10 07 	mov    BYTE PTR [eax+0x10035740],0x7	10000a71: R_386_32	.bss
10000a76:	40                   	inc    eax
10000a77:	3d 18 01 00 00       	cmp    eax,0x118
10000a7c:	75 f1                	jne    10000a6f <_ssfn_zlib_decode+0x64>
10000a7e:	c7 05 58 58 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035858,0x8080808	10000a80: R_386_32	.bss
10000a88:	c7 05 5c 58 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003585c,0x8080808	10000a8a: R_386_32	.bss
10000a92:	31 c0                	xor    eax,eax
10000a94:	c6 80 20 57 03 10 05 	mov    BYTE PTR [eax+0x10035720],0x5	10000a96: R_386_32	.bss
10000a9b:	40                   	inc    eax
10000a9c:	83 f8 20             	cmp    eax,0x20
10000a9f:	75 f3                	jne    10000a94 <_ssfn_zlib_decode+0x89>
10000aa1:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000aac:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000ab7:	ba 01 00 00 00       	mov    edx,0x1
10000abc:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ac3:	e8 3d fd ff ff       	call   10000805 <_ssfn__zreceive>
10000ac8:	ba 02 00 00 00       	mov    edx,0x2
10000acd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000ad1:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ad8:	e8 28 fd ff ff       	call   10000805 <_ssfn__zreceive>
10000add:	89 c6                	mov    esi,eax
10000adf:	85 c0                	test   eax,eax
10000ae1:	0f 85 09 01 00 00    	jne    10000bf0 <_ssfn_zlib_decode+0x1e5>
10000ae7:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000aee:	83 e2 07             	and    edx,0x7
10000af1:	74 0c                	je     10000aff <_ssfn_zlib_decode+0xf4>
10000af3:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000afa:	e8 06 fd ff ff       	call   10000805 <_ssfn__zreceive>
10000aff:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000b06:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000b0d:	31 c0                	xor    eax,eax
10000b0f:	31 db                	xor    ebx,ebx
10000b11:	85 d2                	test   edx,edx
10000b13:	7f 14                	jg     10000b29 <_ssfn_zlib_decode+0x11e>
10000b15:	84 db                	test   bl,bl
10000b17:	74 22                	je     10000b3b <_ssfn_zlib_decode+0x130>
10000b19:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000b20:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b27:	eb 12                	jmp    10000b3b <_ssfn_zlib_decode+0x130>
10000b29:	40                   	inc    eax
10000b2a:	83 ea 08             	sub    edx,0x8
10000b2d:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b34:	b3 01                	mov    bl,0x1
10000b36:	c1 e9 08             	shr    ecx,0x8
10000b39:	eb d6                	jmp    10000b11 <_ssfn_zlib_decode+0x106>
10000b3b:	83 f8 04             	cmp    eax,0x4
10000b3e:	74 1d                	je     10000b5d <_ssfn_zlib_decode+0x152>
10000b40:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b47:	40                   	inc    eax
10000b48:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b4b:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b52:	8a 12                	mov    dl,BYTE PTR [edx]
10000b54:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b5b:	eb de                	jmp    10000b3b <_ssfn_zlib_decode+0x130>
10000b5d:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b65:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b6d:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b75:	c1 e3 08             	shl    ebx,0x8
10000b78:	01 c3                	add    ebx,eax
10000b7a:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b82:	c1 e0 08             	shl    eax,0x8
10000b85:	01 d0                	add    eax,edx
10000b87:	89 da                	mov    edx,ebx
10000b89:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b8f:	39 d0                	cmp    eax,edx
10000b91:	0f 85 69 03 00 00    	jne    10000f00 <_ssfn_zlib_decode+0x4f5>
10000b97:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000b9e:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ba1:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ba8:	73 14                	jae    10000bbe <_ssfn_zlib_decode+0x1b3>
10000baa:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bb1:	e8 19 f7 ff ff       	call   100002cf <_ssfn__zexpand>
10000bb6:	85 c0                	test   eax,eax
10000bb8:	0f 84 42 03 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000bbe:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000bc5:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000bcc:	39 f3                	cmp    ebx,esi
10000bce:	74 09                	je     10000bd9 <_ssfn_zlib_decode+0x1ce>
10000bd0:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000bd3:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000bd6:	46                   	inc    esi
10000bd7:	eb e5                	jmp    10000bbe <_ssfn_zlib_decode+0x1b3>
10000bd9:	01 da                	add    edx,ebx
10000bdb:	01 c3                	add    ebx,eax
10000bdd:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000be4:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000beb:	e9 fc 02 00 00       	jmp    10000eec <_ssfn_zlib_decode+0x4e1>
10000bf0:	83 f8 03             	cmp    eax,0x3
10000bf3:	0f 84 07 03 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000bf9:	4e                   	dec    esi
10000bfa:	75 2d                	jne    10000c29 <_ssfn_zlib_decode+0x21e>
10000bfc:	b9 20 01 00 00       	mov    ecx,0x120
10000c01:	ba 40 57 03 10       	mov    edx,0x10035740	10000c02: R_386_32	.bss
10000c06:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000c0d:	e8 1c f7 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000c12:	85 c0                	test   eax,eax
10000c14:	0f 84 e6 02 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000c1a:	b9 20 00 00 00       	mov    ecx,0x20
10000c1f:	ba 20 57 03 10       	mov    edx,0x10035720	10000c20: R_386_32	.bss
10000c24:	e9 78 01 00 00       	jmp    10000da1 <_ssfn_zlib_decode+0x396>
10000c29:	ba 05 00 00 00       	mov    edx,0x5
10000c2e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c35:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c39:	e8 c7 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c3e:	89 df                	mov    edi,ebx
10000c40:	ba 05 00 00 00       	mov    edx,0x5
10000c45:	89 c5                	mov    ebp,eax
10000c47:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c4e:	e8 b2 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c53:	ba 04 00 00 00       	mov    edx,0x4
10000c58:	89 c6                	mov    esi,eax
10000c5a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c61:	e8 9f fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c66:	b9 13 00 00 00       	mov    ecx,0x13
10000c6b:	83 c0 04             	add    eax,0x4
10000c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c72:	31 c0                	xor    eax,eax
10000c74:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c76:	31 ff                	xor    edi,edi
10000c78:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c7c:	7e 1f                	jle    10000c9d <_ssfn_zlib_decode+0x292>
10000c7e:	ba 03 00 00 00       	mov    edx,0x3
10000c83:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c8a:	47                   	inc    edi
10000c8b:	e8 75 fb ff ff       	call   10000805 <_ssfn__zreceive>
10000c90:	0f b6 97 9f 52 00 10 	movzx  edx,BYTE PTR [edi+0x1000529f]	10000c93: R_386_32	.text
10000c97:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c9b:	eb db                	jmp    10000c78 <_ssfn_zlib_decode+0x26d>
10000c9d:	b9 13 00 00 00       	mov    ecx,0x13
10000ca2:	89 da                	mov    edx,ebx
10000ca4:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000cab:	e8 7e f6 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000cb0:	85 c0                	test   eax,eax
10000cb2:	0f 84 48 02 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000cb8:	8d 46 01             	lea    eax,[esi+0x1]
10000cbb:	81 c5 01 01 00 00    	add    ebp,0x101
10000cc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cc5:	31 f6                	xor    esi,esi
10000cc7:	01 e8                	add    eax,ebp
10000cc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000ccd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cd1:	0f 8e 9f 00 00 00    	jle    10000d76 <_ssfn_zlib_decode+0x36b>
10000cd7:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000cde:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ce5:	e8 35 f5 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000cea:	83 f8 12             	cmp    eax,0x12
10000ced:	0f 87 0d 02 00 00    	ja     10000f00 <_ssfn_zlib_decode+0x4f5>
10000cf3:	83 f8 0f             	cmp    eax,0xf
10000cf6:	7f 07                	jg     10000cff <_ssfn_zlib_decode+0x2f4>
10000cf8:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000cfc:	46                   	inc    esi
10000cfd:	eb ce                	jmp    10000ccd <_ssfn_zlib_decode+0x2c2>
10000cff:	83 f8 10             	cmp    eax,0x10
10000d02:	75 22                	jne    10000d26 <_ssfn_zlib_decode+0x31b>
10000d04:	ba 02 00 00 00       	mov    edx,0x2
10000d09:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d10:	e8 f0 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d15:	85 f6                	test   esi,esi
10000d17:	8d 58 03             	lea    ebx,[eax+0x3]
10000d1a:	0f 84 e0 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d20:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d24:	eb 31                	jmp    10000d57 <_ssfn_zlib_decode+0x34c>
10000d26:	83 f8 11             	cmp    eax,0x11
10000d29:	75 16                	jne    10000d41 <_ssfn_zlib_decode+0x336>
10000d2b:	ba 03 00 00 00       	mov    edx,0x3
10000d30:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d37:	e8 c9 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d3c:	8d 58 03             	lea    ebx,[eax+0x3]
10000d3f:	eb 14                	jmp    10000d55 <_ssfn_zlib_decode+0x34a>
10000d41:	ba 07 00 00 00       	mov    edx,0x7
10000d46:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d4d:	e8 b3 fa ff ff       	call   10000805 <_ssfn__zreceive>
10000d52:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d55:	31 c0                	xor    eax,eax
10000d57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d5b:	29 f2                	sub    edx,esi
10000d5d:	39 da                	cmp    edx,ebx
10000d5f:	0f 8c 9b 01 00 00    	jl     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d65:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d69:	89 d9                	mov    ecx,ebx
10000d6b:	89 d7                	mov    edi,edx
10000d6d:	01 de                	add    esi,ebx
10000d6f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d71:	e9 57 ff ff ff       	jmp    10000ccd <_ssfn_zlib_decode+0x2c2>
10000d76:	0f 85 84 01 00 00    	jne    10000f00 <_ssfn_zlib_decode+0x4f5>
10000d7c:	89 e9                	mov    ecx,ebp
10000d7e:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d82:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d89:	e8 a0 f5 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000d8e:	85 c0                	test   eax,eax
10000d90:	0f 84 6a 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000d96:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000d9e:	8d 14 28             	lea    edx,[eax+ebp*1]
10000da1:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000da8:	e8 81 f5 ff ff       	call   1000032e <_ssfn__zbuild_huffman>
10000dad:	85 c0                	test   eax,eax
10000daf:	0f 84 4b 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000db5:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dbc:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000dc3:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dca:	e8 50 f4 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000dcf:	89 c3                	mov    ebx,eax
10000dd1:	3d ff 00 00 00       	cmp    eax,0xff
10000dd6:	7f 34                	jg     10000e0c <_ssfn_zlib_decode+0x401>
10000dd8:	85 c0                	test   eax,eax
10000dda:	0f 88 20 01 00 00    	js     10000f00 <_ssfn_zlib_decode+0x4f5>
10000de0:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000de7:	77 1d                	ja     10000e06 <_ssfn_zlib_decode+0x3fb>
10000de9:	89 ea                	mov    edx,ebp
10000deb:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000df2:	e8 d8 f4 ff ff       	call   100002cf <_ssfn__zexpand>
10000df7:	85 c0                	test   eax,eax
10000df9:	0f 84 01 01 00 00    	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000dff:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e06:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000e09:	45                   	inc    ebp
10000e0a:	eb b0                	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000e0c:	3d 00 01 00 00       	cmp    eax,0x100
10000e11:	75 0c                	jne    10000e1f <_ssfn_zlib_decode+0x414>
10000e13:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000e1a:	e9 cd 00 00 00       	jmp    10000eec <_ssfn_zlib_decode+0x4e1>
10000e1f:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e25:	8b 14 85 c0 53 00 10 	mov    edx,DWORD PTR [eax*4+0x100053c0]	10000e28: R_386_32	.text
10000e2c:	8b 1c 85 40 54 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005440]	10000e2f: R_386_32	.text
10000e33:	85 d2                	test   edx,edx
10000e35:	74 0e                	je     10000e45 <_ssfn_zlib_decode+0x43a>
10000e37:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e3e:	e8 c2 f9 ff ff       	call   10000805 <_ssfn__zreceive>
10000e43:	01 c3                	add    ebx,eax
10000e45:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e4c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e53:	e8 c7 f3 ff ff       	call   1000021f <_ssfn__zhuffman_decode>
10000e58:	85 c0                	test   eax,eax
10000e5a:	0f 88 a0 00 00 00    	js     10000f00 <_ssfn_zlib_decode+0x4f5>
10000e60:	8b 14 85 c0 52 00 10 	mov    edx,DWORD PTR [eax*4+0x100052c0]	10000e63: R_386_32	.text
10000e67:	8b 3c 85 40 53 00 10 	mov    edi,DWORD PTR [eax*4+0x10005340]	10000e6a: R_386_32	.text
10000e6e:	85 d2                	test   edx,edx
10000e70:	74 0e                	je     10000e80 <_ssfn_zlib_decode+0x475>
10000e72:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e79:	e8 87 f9 ff ff       	call   10000805 <_ssfn__zreceive>
10000e7e:	01 c7                	add    edi,eax
10000e80:	89 e8                	mov    eax,ebp
10000e82:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e89:	39 f8                	cmp    eax,edi
10000e8b:	7c 73                	jl     10000f00 <_ssfn_zlib_decode+0x4f5>
10000e8d:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e91:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e98:	73 19                	jae    10000eb3 <_ssfn_zlib_decode+0x4a8>
10000e9a:	89 ea                	mov    edx,ebp
10000e9c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ea3:	e8 27 f4 ff ff       	call   100002cf <_ssfn__zexpand>
10000ea8:	85 c0                	test   eax,eax
10000eaa:	74 54                	je     10000f00 <_ssfn_zlib_decode+0x4f5>
10000eac:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000eb3:	89 ee                	mov    esi,ebp
10000eb5:	29 fe                	sub    esi,edi
10000eb7:	4f                   	dec    edi
10000eb8:	75 19                	jne    10000ed3 <_ssfn_zlib_decode+0x4c8>
10000eba:	85 db                	test   ebx,ebx
10000ebc:	0f 84 fa fe ff ff    	je     10000dbc <_ssfn_zlib_decode+0x3b1>
10000ec2:	8a 06                	mov    al,BYTE PTR [esi]
10000ec4:	01 eb                	add    ebx,ebp
10000ec6:	45                   	inc    ebp
10000ec7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000eca:	39 dd                	cmp    ebp,ebx
10000ecc:	75 f8                	jne    10000ec6 <_ssfn_zlib_decode+0x4bb>
10000ece:	e9 e9 fe ff ff       	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000ed3:	85 db                	test   ebx,ebx
10000ed5:	0f 84 e1 fe ff ff    	je     10000dbc <_ssfn_zlib_decode+0x3b1>
10000edb:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000ede:	89 ef                	mov    edi,ebp
10000ee0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000ee1:	39 f0                	cmp    eax,esi
10000ee3:	75 fb                	jne    10000ee0 <_ssfn_zlib_decode+0x4d5>
10000ee5:	01 dd                	add    ebp,ebx
10000ee7:	e9 d0 fe ff ff       	jmp    10000dbc <_ssfn_zlib_decode+0x3b1>
10000eec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000ef1:	0f 84 c0 fb ff ff    	je     10000ab7 <_ssfn_zlib_decode+0xac>
10000ef7:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000efe:	eb 14                	jmp    10000f14 <_ssfn_zlib_decode+0x509>
10000f00:	83 ec 0c             	sub    esp,0xc
10000f03:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000f0a:	e8 fc ff ff ff       	call   10000f0b <_ssfn_zlib_decode+0x500>	10000f0b: R_386_PC32	free
10000f0f:	83 c4 10             	add    esp,0x10
10000f12:	31 c0                	xor    eax,eax
10000f14:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000f1a:	5b                   	pop    ebx
10000f1b:	5e                   	pop    esi
10000f1c:	5f                   	pop    edi
10000f1d:	5d                   	pop    ebp
10000f1e:	c3                   	ret    

10000f1f <ssfn_load>:
10000f1f:	55                   	push   ebp
10000f20:	57                   	push   edi
10000f21:	56                   	push   esi
10000f22:	53                   	push   ebx
10000f23:	83 ec 1c             	sub    esp,0x1c
10000f26:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f2a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f2e:	85 ff                	test   edi,edi
10000f30:	0f 84 d0 01 00 00    	je     10001106 <ssfn_load+0x1e7>
10000f36:	85 f6                	test   esi,esi
10000f38:	0f 84 c8 01 00 00    	je     10001106 <ssfn_load+0x1e7>
10000f3e:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f41:	0f 85 a8 00 00 00    	jne    10000fef <ssfn_load+0xd0>
10000f47:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f4b:	0f 85 9e 00 00 00    	jne    10000fef <ssfn_load+0xd0>
10000f51:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f55:	74 0a                	je     10000f61 <ssfn_load+0x42>
10000f57:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f5c:	e9 aa 01 00 00       	jmp    1000110b <ssfn_load+0x1ec>
10000f61:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f64:	a8 04                	test   al,0x4
10000f66:	75 05                	jne    10000f6d <ssfn_load+0x4e>
10000f68:	83 c6 0a             	add    esi,0xa
10000f6b:	eb 08                	jmp    10000f75 <ssfn_load+0x56>
10000f6d:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f71:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f75:	a8 08                	test   al,0x8
10000f77:	74 07                	je     10000f80 <ssfn_load+0x61>
10000f79:	46                   	inc    esi
10000f7a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f7e:	eb f7                	jmp    10000f77 <ssfn_load+0x58>
10000f80:	a8 10                	test   al,0x10
10000f82:	74 07                	je     10000f8b <ssfn_load+0x6c>
10000f84:	46                   	inc    esi
10000f85:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f89:	eb f7                	jmp    10000f82 <ssfn_load+0x63>
10000f8b:	83 ec 0c             	sub    esp,0xc
10000f8e:	56                   	push   esi
10000f8f:	e8 fc ff ff ff       	call   10000f90 <ssfn_load+0x71>	10000f90: R_386_PC32	_ssfn_zlib_decode
10000f94:	83 c4 10             	add    esp,0x10
10000f97:	89 c6                	mov    esi,eax
10000f99:	85 c0                	test   eax,eax
10000f9b:	74 ba                	je     10000f57 <ssfn_load+0x38>
10000f9d:	50                   	push   eax
10000f9e:	50                   	push   eax
10000f9f:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000fa5:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000fac:	50                   	push   eax
10000fad:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000fb3:	e8 fc ff ff ff       	call   10000fb4 <ssfn_load+0x95>	10000fb4: R_386_PC32	realloc
10000fb8:	83 c4 10             	add    esp,0x10
10000fbb:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000fc1:	85 c0                	test   eax,eax
10000fc3:	75 0f                	jne    10000fd4 <ssfn_load+0xb5>
10000fc5:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fcf:	e9 1a 01 00 00       	jmp    100010ee <ssfn_load+0x1cf>
10000fd4:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fda:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fdd:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fe3:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000fe6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000fe9:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000fef:	50                   	push   eax
10000ff0:	6a 04                	push   0x4
10000ff2:	68 7f 51 00 10       	push   0x1000517f	10000ff3: R_386_32	.text
10000ff7:	56                   	push   esi
10000ff8:	e8 fc ff ff ff       	call   10000ff9 <ssfn_load+0xda>	10000ff9: R_386_PC32	memcmp
10000ffd:	83 c4 10             	add    esp,0x10
10001000:	89 c5                	mov    ebp,eax
10001002:	85 c0                	test   eax,eax
10001004:	75 29                	jne    1000102f <ssfn_load+0x110>
10001006:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001009:	01 f3                	add    ebx,esi
1000100b:	83 c6 08             	add    esi,0x8
1000100e:	39 de                	cmp    esi,ebx
10001010:	0f 83 f5 00 00 00    	jae    1000110b <ssfn_load+0x1ec>
10001016:	50                   	push   eax
10001017:	50                   	push   eax
10001018:	56                   	push   esi
10001019:	57                   	push   edi
1000101a:	e8 fc ff ff ff       	call   1000101b <ssfn_load+0xfc>	1000101b: R_386_PC32	ssfn_load
1000101f:	83 c4 10             	add    esp,0x10
10001022:	85 c0                	test   eax,eax
10001024:	0f 85 e1 00 00 00    	jne    1000110b <ssfn_load+0x1ec>
1000102a:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
1000102d:	eb df                	jmp    1000100e <ssfn_load+0xef>
1000102f:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10001032:	83 e0 0f             	and    eax,0xf
10001035:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001039:	53                   	push   ebx
1000103a:	6a 04                	push   0x4
1000103c:	68 84 51 00 10       	push   0x10005184	1000103d: R_386_32	.text
10001041:	56                   	push   esi
10001042:	e8 fc ff ff ff       	call   10001043 <ssfn_load+0x124>	10001043: R_386_PC32	memcmp
10001047:	83 c4 10             	add    esp,0x10
1000104a:	89 c5                	mov    ebp,eax
1000104c:	85 c0                	test   eax,eax
1000104e:	0f 85 03 ff ff ff    	jne    10000f57 <ssfn_load+0x38>
10001054:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001057:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
1000105b:	51                   	push   ecx
1000105c:	6a 04                	push   0x4
1000105e:	68 89 51 00 10       	push   0x10005189	1000105f: R_386_32	.text
10001063:	50                   	push   eax
10001064:	e8 fc ff ff ff       	call   10001065 <ssfn_load+0x146>	10001065: R_386_PC32	memcmp
10001069:	83 c4 10             	add    esp,0x10
1000106c:	85 c0                	test   eax,eax
1000106e:	0f 85 e3 fe ff ff    	jne    10000f57 <ssfn_load+0x38>
10001074:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001079:	0f 87 d8 fe ff ff    	ja     10000f57 <ssfn_load+0x38>
1000107f:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10001083:	39 cb                	cmp    ebx,ecx
10001085:	0f 86 cc fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
1000108b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000108e:	39 c3                	cmp    ebx,eax
10001090:	0f 86 c1 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
10001096:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10001099:	0f 86 b8 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
1000109f:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100010a2:	0f 86 af fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
100010a8:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100010ab:	0f 86 a6 fe ff ff    	jbe    10000f57 <ssfn_load+0x38>
100010b1:	39 c1                	cmp    ecx,eax
100010b3:	0f 83 9e fe ff ff    	jae    10000f57 <ssfn_load+0x38>
100010b9:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100010be:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100010c1:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010c7:	40                   	inc    eax
100010c8:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010ce:	52                   	push   edx
100010cf:	c1 e0 02             	shl    eax,0x2
100010d2:	52                   	push   edx
100010d3:	50                   	push   eax
100010d4:	ff 33                	push   DWORD PTR [ebx]
100010d6:	e8 fc ff ff ff       	call   100010d7 <ssfn_load+0x1b8>	100010d7: R_386_PC32	realloc
100010db:	83 c4 10             	add    esp,0x10
100010de:	89 03                	mov    DWORD PTR [ebx],eax
100010e0:	85 c0                	test   eax,eax
100010e2:	75 0f                	jne    100010f3 <ssfn_load+0x1d4>
100010e4:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010ee:	83 cd ff             	or     ebp,0xffffffff
100010f1:	eb 18                	jmp    1000110b <ssfn_load+0x1ec>
100010f3:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010f9:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100010fd:	89 f8                	mov    eax,edi
100010ff:	e8 ad f3 ff ff       	call   100004b1 <_ssfn_fc.part.1>
10001104:	eb 05                	jmp    1000110b <ssfn_load+0x1ec>
10001106:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000110b:	83 c4 1c             	add    esp,0x1c
1000110e:	89 e8                	mov    eax,ebp
10001110:	5b                   	pop    ebx
10001111:	5e                   	pop    esi
10001112:	5f                   	pop    edi
10001113:	5d                   	pop    ebp
10001114:	c3                   	ret    

10001115 <ssfn_free>:
10001115:	57                   	push   edi
10001116:	56                   	push   esi
10001117:	53                   	push   ebx
10001118:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000111c:	85 db                	test   ebx,ebx
1000111e:	74 7e                	je     1000119e <ssfn_free+0x89>
10001120:	89 d8                	mov    eax,ebx
10001122:	e8 8a f3 ff ff       	call   100004b1 <_ssfn_fc.part.1>
10001127:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000112e:	74 32                	je     10001162 <ssfn_free+0x4d>
10001130:	31 f6                	xor    esi,esi
10001132:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001138:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000113e:	7e 16                	jle    10001156 <ssfn_free+0x41>
10001140:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001143:	85 c0                	test   eax,eax
10001145:	74 0c                	je     10001153 <ssfn_free+0x3e>
10001147:	83 ec 0c             	sub    esp,0xc
1000114a:	50                   	push   eax
1000114b:	e8 fc ff ff ff       	call   1000114c <ssfn_free+0x37>	1000114c: R_386_PC32	free
10001150:	83 c4 10             	add    esp,0x10
10001153:	46                   	inc    esi
10001154:	eb dc                	jmp    10001132 <ssfn_free+0x1d>
10001156:	83 ec 0c             	sub    esp,0xc
10001159:	50                   	push   eax
1000115a:	e8 fc ff ff ff       	call   1000115b <ssfn_free+0x46>	1000115b: R_386_PC32	free
1000115f:	83 c4 10             	add    esp,0x10
10001162:	31 f6                	xor    esi,esi
10001164:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001167:	85 c0                	test   eax,eax
10001169:	74 0c                	je     10001177 <ssfn_free+0x62>
1000116b:	83 ec 0c             	sub    esp,0xc
1000116e:	50                   	push   eax
1000116f:	e8 fc ff ff ff       	call   10001170 <ssfn_free+0x5b>	10001170: R_386_PC32	free
10001174:	83 c4 10             	add    esp,0x10
10001177:	46                   	inc    esi
10001178:	83 fe 05             	cmp    esi,0x5
1000117b:	75 e7                	jne    10001164 <ssfn_free+0x4f>
1000117d:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10001183:	85 c0                	test   eax,eax
10001185:	74 0c                	je     10001193 <ssfn_free+0x7e>
10001187:	83 ec 0c             	sub    esp,0xc
1000118a:	50                   	push   eax
1000118b:	e8 fc ff ff ff       	call   1000118c <ssfn_free+0x77>	1000118c: R_386_PC32	free
10001190:	83 c4 10             	add    esp,0x10
10001193:	b9 72 3d 00 00       	mov    ecx,0x3d72
10001198:	31 c0                	xor    eax,eax
1000119a:	89 df                	mov    edi,ebx
1000119c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000119e:	5b                   	pop    ebx
1000119f:	5e                   	pop    esi
100011a0:	5f                   	pop    edi
100011a1:	c3                   	ret    

100011a2 <ssfn_mem>:
100011a2:	55                   	push   ebp
100011a3:	31 c0                	xor    eax,eax
100011a5:	57                   	push   edi
100011a6:	56                   	push   esi
100011a7:	53                   	push   ebx
100011a8:	83 ec 08             	sub    esp,0x8
100011ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100011af:	85 d2                	test   edx,edx
100011b1:	0f 84 8e 00 00 00    	je     10001245 <ssfn_mem+0xa3>
100011b7:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100011bc:	31 c9                	xor    ecx,ecx
100011be:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011c5:	41                   	inc    ecx
100011c6:	8d 04 98             	lea    eax,[eax+ebx*4]
100011c9:	83 f9 05             	cmp    ecx,0x5
100011cc:	75 f0                	jne    100011be <ssfn_mem+0x1c>
100011ce:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011d4:	31 c9                	xor    ecx,ecx
100011d6:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011dd:	89 34 24             	mov    DWORD PTR [esp],esi
100011e0:	85 f6                	test   esi,esi
100011e2:	74 48                	je     1000122c <ssfn_mem+0x8a>
100011e4:	31 db                	xor    ebx,ebx
100011e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011e9:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011ec:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011f0:	85 ff                	test   edi,edi
100011f2:	74 2a                	je     1000121e <ssfn_mem+0x7c>
100011f4:	31 f6                	xor    esi,esi
100011f6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011fa:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100011fd:	85 ed                	test   ebp,ebp
100011ff:	74 0f                	je     10001210 <ssfn_mem+0x6e>
10001201:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001205:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001209:	0f af fd             	imul   edi,ebp
1000120c:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001210:	46                   	inc    esi
10001211:	81 fe 00 01 00 00    	cmp    esi,0x100
10001217:	75 dd                	jne    100011f6 <ssfn_mem+0x54>
10001219:	05 00 04 00 00       	add    eax,0x400
1000121e:	43                   	inc    ebx
1000121f:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001225:	75 bf                	jne    100011e6 <ssfn_mem+0x44>
10001227:	05 00 04 00 00       	add    eax,0x400
1000122c:	41                   	inc    ecx
1000122d:	83 f9 11             	cmp    ecx,0x11
10001230:	75 a4                	jne    100011d6 <ssfn_mem+0x34>
10001232:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001239:	74 0a                	je     10001245 <ssfn_mem+0xa3>
1000123b:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001241:	01 d2                	add    edx,edx
10001243:	01 d0                	add    eax,edx
10001245:	83 c4 08             	add    esp,0x8
10001248:	5b                   	pop    ebx
10001249:	5e                   	pop    esi
1000124a:	5f                   	pop    edi
1000124b:	5d                   	pop    ebp
1000124c:	c3                   	ret    

1000124d <ssfn_select>:
1000124d:	55                   	push   ebp
1000124e:	57                   	push   edi
1000124f:	56                   	push   esi
10001250:	53                   	push   ebx
10001251:	83 ec 1c             	sub    esp,0x1c
10001254:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001258:	85 db                	test   ebx,ebx
1000125a:	75 0a                	jne    10001266 <ssfn_select+0x19>
1000125c:	be fc ff ff ff       	mov    esi,0xfffffffc
10001261:	e9 13 01 00 00       	jmp    10001379 <ssfn_select+0x12c>
10001266:	89 d8                	mov    eax,ebx
10001268:	e8 44 f2 ff ff       	call   100004b1 <_ssfn_fc.part.1>
1000126d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001271:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001277:	0f 85 e9 00 00 00    	jne    10001366 <ssfn_select+0x119>
1000127d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001281:	83 e8 08             	sub    eax,0x8
10001284:	3d b8 00 00 00       	cmp    eax,0xb8
10001289:	0f 87 de 00 00 00    	ja     1000136d <ssfn_select+0x120>
1000128f:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10001297:	75 76                	jne    1000130f <ssfn_select+0xc2>
10001299:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000129e:	74 bc                	je     1000125c <ssfn_select+0xf>
100012a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012a4:	80 38 00             	cmp    BYTE PTR [eax],0x0
100012a7:	74 b3                	je     1000125c <ssfn_select+0xf>
100012a9:	31 ed                	xor    ebp,ebp
100012ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012af:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100012b3:	74 03                	je     100012b8 <ssfn_select+0x6b>
100012b5:	45                   	inc    ebp
100012b6:	eb f3                	jmp    100012ab <ssfn_select+0x5e>
100012b8:	8d 43 14             	lea    eax,[ebx+0x14]
100012bb:	89 df                	mov    edi,ebx
100012bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012c1:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012c7:	31 d2                	xor    edx,edx
100012c9:	89 04 24             	mov    DWORD PTR [esp],eax
100012cc:	39 14 24             	cmp    DWORD PTR [esp],edx
100012cf:	7e 33                	jle    10001304 <ssfn_select+0xb7>
100012d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012d5:	8b 07                	mov    eax,DWORD PTR [edi]
100012d7:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012da:	50                   	push   eax
100012db:	8d 41 20             	lea    eax,[ecx+0x20]
100012de:	55                   	push   ebp
100012df:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012e3:	50                   	push   eax
100012e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012e8:	e8 fc ff ff ff       	call   100012e9 <ssfn_select+0x9c>	100012e9: R_386_PC32	memcmp
100012ed:	83 c4 10             	add    esp,0x10
100012f0:	85 c0                	test   eax,eax
100012f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012fa:	75 05                	jne    10001301 <ssfn_select+0xb4>
100012fc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100012ff:	eb 34                	jmp    10001335 <ssfn_select+0xe8>
10001301:	42                   	inc    edx
10001302:	eb c8                	jmp    100012cc <ssfn_select+0x7f>
10001304:	83 c7 04             	add    edi,0x4
10001307:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000130b:	75 b4                	jne    100012c1 <ssfn_select+0x74>
1000130d:	eb 65                	jmp    10001374 <ssfn_select+0x127>
1000130f:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001317:	74 15                	je     1000132e <ssfn_select+0xe1>
10001319:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000131e:	7f 54                	jg     10001374 <ssfn_select+0x127>
10001320:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001324:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
1000132c:	74 46                	je     10001374 <ssfn_select+0x127>
1000132e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001339:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001340:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001346:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001350:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001354:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
1000135a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000135e:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001364:	eb 13                	jmp    10001379 <ssfn_select+0x12c>
10001366:	be fb ff ff ff       	mov    esi,0xfffffffb
1000136b:	eb 0c                	jmp    10001379 <ssfn_select+0x12c>
1000136d:	be fa ff ff ff       	mov    esi,0xfffffffa
10001372:	eb 05                	jmp    10001379 <ssfn_select+0x12c>
10001374:	be fd ff ff ff       	mov    esi,0xfffffffd
10001379:	83 c4 1c             	add    esp,0x1c
1000137c:	89 f0                	mov    eax,esi
1000137e:	5b                   	pop    ebx
1000137f:	5e                   	pop    esi
10001380:	5f                   	pop    edi
10001381:	5d                   	pop    ebp
10001382:	c3                   	ret    

10001383 <ssfn_render>:
10001383:	55                   	push   ebp
10001384:	57                   	push   edi
10001385:	56                   	push   esi
10001386:	53                   	push   ebx
10001387:	81 ec dc 05 01 00    	sub    esp,0x105dc
1000138d:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001394:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
1000139f:	85 ed                	test   ebp,ebp
100013a1:	0f 94 c2             	sete   dl
100013a4:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100013ac:	0f 94 c0             	sete   al
100013af:	08 c2                	or     dl,al
100013b1:	74 0a                	je     100013bd <ssfn_render+0x3a>
100013b3:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100013b8:	e9 14 1e 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
100013bd:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013c4:	31 c9                	xor    ecx,ecx
100013c6:	8a 00                	mov    al,BYTE PTR [eax]
100013c8:	84 c0                	test   al,al
100013ca:	0f 84 01 1e 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100013d0:	3c 0d                	cmp    al,0xd
100013d2:	75 0f                	jne    100013e3 <ssfn_render+0x60>
100013d4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013e1:	eb 31                	jmp    10001414 <ssfn_render+0x91>
100013e3:	3c 0a                	cmp    al,0xa
100013e5:	75 37                	jne    1000141e <ssfn_render+0x9b>
100013e7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013ee:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013f7:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100013fd:	85 c0                	test   eax,eax
100013ff:	75 06                	jne    10001407 <ssfn_render+0x84>
10001401:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001407:	01 d0                	add    eax,edx
10001409:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001410:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001414:	b9 01 00 00 00       	mov    ecx,0x1
10001419:	e9 b3 1d 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000141e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001421:	85 c0                	test   eax,eax
10001423:	74 3e                	je     10001463 <ssfn_render+0xe0>
10001425:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001428:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000142f:	56                   	push   esi
10001430:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001437:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000143e:	e8 a0 f4 ff ff       	call   100008e3 <_ssfn_c>
10001443:	5b                   	pop    ebx
10001444:	85 c0                	test   eax,eax
10001446:	0f 85 71 02 00 00    	jne    100016bd <ssfn_render+0x33a>
1000144c:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001452:	81 e2 00 01 00 00    	and    edx,0x100
10001458:	0f 84 fd 01 00 00    	je     1000165b <ssfn_render+0x2d8>
1000145e:	e9 1d 02 00 00       	jmp    10001680 <ssfn_render+0x2fd>
10001463:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001469:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10001470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001474:	3d fd 00 00 00       	cmp    eax,0xfd
10001479:	7f 08                	jg     10001483 <ssfn_render+0x100>
1000147b:	89 c3                	mov    ebx,eax
1000147d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001481:	eb 3f                	jmp    100014c2 <ssfn_render+0x13f>
10001483:	31 db                	xor    ebx,ebx
10001485:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
1000148d:	eb 33                	jmp    100014c2 <ssfn_render+0x13f>
1000148f:	85 c0                	test   eax,eax
10001491:	0f 84 64 01 00 00    	je     100015fb <ssfn_render+0x278>
10001497:	43                   	inc    ebx
10001498:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
1000149c:	7e 28                	jle    100014c6 <ssfn_render+0x143>
1000149e:	85 c0                	test   eax,eax
100014a0:	0f 85 17 02 00 00    	jne    100016bd <ssfn_render+0x33a>
100014a6:	31 db                	xor    ebx,ebx
100014a8:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100014b0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100014b8:	74 92                	je     1000144c <ssfn_render+0xc9>
100014ba:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100014c2:	31 c0                	xor    eax,eax
100014c4:	eb d2                	jmp    10001498 <ssfn_render+0x115>
100014c6:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014ca:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014d1:	74 bc                	je     1000148f <ssfn_render+0x10c>
100014d3:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014de:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014e5:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014ec:	7e 50                	jle    1000153e <ssfn_render+0x1bb>
100014ee:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014f1:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014f5:	c1 fa 04             	sar    edx,0x4
100014f8:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
100014fe:	80 e2 03             	and    dl,0x3
10001501:	75 32                	jne    10001535 <ssfn_render+0x1b2>
10001503:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001507:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000150d:	75 26                	jne    10001535 <ssfn_render+0x1b2>
1000150f:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001516:	50                   	push   eax
10001517:	89 f8                	mov    eax,edi
10001519:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001520:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001527:	e8 b7 f3 ff ff       	call   100008e3 <_ssfn_c>
1000152c:	59                   	pop    ecx
1000152d:	85 c0                	test   eax,eax
1000152f:	0f 85 04 01 00 00    	jne    10001639 <ssfn_render+0x2b6>
10001535:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000153c:	eb a0                	jmp    100014de <ssfn_render+0x15b>
1000153e:	85 c0                	test   eax,eax
10001540:	0f 85 51 ff ff ff    	jne    10001497 <ssfn_render+0x114>
10001546:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001551:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001558:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000155f:	0f 8e f9 1b 00 00    	jle    1000315e <ssfn_render+0x1ddb>
10001565:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001568:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
1000156c:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001572:	74 09                	je     1000157d <ssfn_render+0x1fa>
10001574:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000157b:	eb d4                	jmp    10001551 <ssfn_render+0x1ce>
1000157d:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001584:	57                   	push   edi
10001585:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000158c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001593:	e8 4b f3 ff ff       	call   100008e3 <_ssfn_c>
10001598:	5a                   	pop    edx
10001599:	85 c0                	test   eax,eax
1000159b:	74 d7                	je     10001574 <ssfn_render+0x1f1>
1000159d:	e9 97 00 00 00       	jmp    10001639 <ssfn_render+0x2b6>
100015a2:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015a5:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100015a9:	c1 fa 04             	sar    edx,0x4
100015ac:	31 ca                	xor    edx,ecx
100015ae:	80 e2 03             	and    dl,0x3
100015b1:	0f 84 b7 1b 00 00    	je     1000316e <ssfn_render+0x1deb>
100015b7:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015be:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015c5:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015cb:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015d2:	7f ce                	jg     100015a2 <ssfn_render+0x21f>
100015d4:	83 e1 03             	and    ecx,0x3
100015d7:	83 f9 03             	cmp    ecx,0x3
100015da:	75 1f                	jne    100015fb <ssfn_render+0x278>
100015dc:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015e7:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015ee:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015f5:	0f 8f 9c 1b 00 00    	jg     10003197 <ssfn_render+0x1e14>
100015fb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001606:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000160d:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001614:	7e 3e                	jle    10001654 <ssfn_render+0x2d1>
10001616:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001619:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001620:	57                   	push   edi
10001621:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001628:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000162f:	e8 af f2 ff ff       	call   100008e3 <_ssfn_c>
10001634:	5a                   	pop    edx
10001635:	85 c0                	test   eax,eax
10001637:	74 12                	je     1000164b <ssfn_render+0x2c8>
10001639:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001640:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001643:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001646:	e9 4c fe ff ff       	jmp    10001497 <ssfn_render+0x114>
1000164b:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001652:	eb b2                	jmp    10001606 <ssfn_render+0x283>
10001654:	31 c0                	xor    eax,eax
10001656:	e9 3c fe ff ff       	jmp    10001497 <ssfn_render+0x114>
1000165b:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10001661:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
1000166c:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10001672:	7f 16                	jg     1000168a <ssfn_render+0x307>
10001674:	89 da                	mov    edx,ebx
10001676:	31 c0                	xor    eax,eax
10001678:	39 da                	cmp    edx,ebx
1000167a:	7e 15                	jle    10001691 <ssfn_render+0x30e>
1000167c:	85 c0                	test   eax,eax
1000167e:	75 3d                	jne    100016bd <ssfn_render+0x33a>
10001680:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001685:	e9 47 1b 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000168a:	bb 04 00 00 00       	mov    ebx,0x4
1000168f:	eb e5                	jmp    10001676 <ssfn_render+0x2f3>
10001691:	85 c0                	test   eax,eax
10001693:	75 28                	jne    100016bd <ssfn_render+0x33a>
10001695:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
1000169d:	74 1b                	je     100016ba <ssfn_render+0x337>
1000169f:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100016a3:	8b 09                	mov    ecx,DWORD PTR [ecx]
100016a5:	85 c9                	test   ecx,ecx
100016a7:	74 11                	je     100016ba <ssfn_render+0x337>
100016a9:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100016ac:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100016b0:	78 08                	js     100016ba <ssfn_render+0x337>
100016b2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100016b5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100016b8:	01 c8                	add    eax,ecx
100016ba:	42                   	inc    edx
100016bb:	eb bb                	jmp    10001678 <ssfn_render+0x2f5>
100016bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100016c0:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016c5:	85 d2                	test   edx,edx
100016c7:	0f 84 04 1b 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016cd:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016d1:	0f 84 fa 1a 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016d7:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016e1:	85 ff                	test   edi,edi
100016e3:	0f 84 e8 1a 00 00    	je     100031d1 <ssfn_render+0x1e4e>
100016e9:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016f0:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016f4:	c1 ef 10             	shr    edi,0x10
100016f7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016fb:	83 ff 10             	cmp    edi,0x10
100016fe:	0f 87 af fc ff ff    	ja     100013b3 <ssfn_render+0x30>
10001704:	8d 70 06             	lea    esi,[eax+0x6]
10001707:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
1000170d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001711:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001717:	89 f7                	mov    edi,esi
10001719:	81 e7 00 02 00 00    	and    edi,0x200
1000171f:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001723:	75 34                	jne    10001759 <ssfn_render+0x3d6>
10001725:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001729:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001730:	85 c9                	test   ecx,ecx
10001732:	74 25                	je     10001759 <ssfn_render+0x3d6>
10001734:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001738:	0f b6 ff             	movzx  edi,bh
1000173b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000173e:	85 c9                	test   ecx,ecx
10001740:	74 17                	je     10001759 <ssfn_render+0x3d6>
10001742:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001747:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000174a:	85 c9                	test   ecx,ecx
1000174c:	74 0b                	je     10001759 <ssfn_render+0x3d6>
1000174e:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001754:	e9 25 0d 00 00       	jmp    1000247e <ssfn_render+0x10fb>
10001759:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
1000175d:	f7 c6 40 00 00 00    	test   esi,0x40
10001763:	75 1a                	jne    1000177f <ssfn_render+0x3fc>
10001765:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001769:	7e 10                	jle    1000177b <ssfn_render+0x3f8>
1000176b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000176f:	83 c7 04             	add    edi,0x4
10001772:	83 e7 fc             	and    edi,0xfffffffc
10001775:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001779:	eb 04                	jmp    1000177f <ssfn_render+0x3fc>
1000177b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000177f:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001784:	f7 c6 02 00 00 00    	test   esi,0x2
1000178a:	74 14                	je     100017a0 <ssfn_render+0x41d>
1000178c:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
1000178f:	c0 eb 05             	shr    bl,0x5
10001792:	89 df                	mov    edi,ebx
10001794:	83 f7 01             	xor    edi,0x1
10001797:	83 e7 01             	and    edi,0x1
1000179a:	89 fb                	mov    ebx,edi
1000179c:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100017a0:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100017a5:	83 e6 01             	and    esi,0x1
100017a8:	74 10                	je     100017ba <ssfn_render+0x437>
100017aa:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100017ae:	75 0a                	jne    100017ba <ssfn_render+0x437>
100017b0:	8d 51 40             	lea    edx,[ecx+0x40]
100017b3:	c1 fa 06             	sar    edx,0x6
100017b6:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100017ba:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100017be:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100017c3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017c7:	99                   	cdq    
100017c8:	f7 f9                	idiv   ecx
100017ca:	89 c1                	mov    ecx,eax
100017cc:	31 c0                	xor    eax,eax
100017ce:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017d3:	74 0c                	je     100017e1 <ssfn_render+0x45e>
100017d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017d9:	be 04 00 00 00       	mov    esi,0x4
100017de:	99                   	cdq    
100017df:	f7 fe                	idiv   esi
100017e1:	01 c8                	add    eax,ecx
100017e3:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017e8:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017ed:	01 f0                	add    eax,esi
100017ef:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017fb:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001800:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001804:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001809:	0f 8f c2 19 00 00    	jg     100031d1 <ssfn_render+0x1e4e>
1000180f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001814:	0f 85 f0 00 00 00    	jne    1000190a <ssfn_render+0x587>
1000181a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000181e:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001822:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001829:	75 2f                	jne    1000185a <ssfn_render+0x4d7>
1000182b:	83 ec 0c             	sub    esp,0xc
1000182e:	68 00 04 00 00       	push   0x400
10001833:	e8 fc ff ff ff       	call   10001834 <ssfn_render+0x4b1>	10001834: R_386_PC32	malloc
10001838:	83 c4 10             	add    esp,0x10
1000183b:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001841:	85 c0                	test   eax,eax
10001843:	75 08                	jne    1000184d <ssfn_render+0x4ca>
10001845:	83 c9 ff             	or     ecx,0xffffffff
10001848:	e9 84 19 00 00       	jmp    100031d1 <ssfn_render+0x1e4e>
1000184d:	89 c7                	mov    edi,eax
1000184f:	b9 00 01 00 00       	mov    ecx,0x100
10001854:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001858:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000185a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000185e:	0f b6 dc             	movzx  ebx,ah
10001861:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001867:	8d 1c 98             	lea    ebx,[eax+ebx*4]
1000186a:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000186d:	75 3a                	jne    100018a9 <ssfn_render+0x526>
1000186f:	83 ec 0c             	sub    esp,0xc
10001872:	68 00 04 00 00       	push   0x400
10001877:	e8 fc ff ff ff       	call   10001878 <ssfn_render+0x4f5>	10001878: R_386_PC32	malloc
1000187c:	89 03                	mov    DWORD PTR [ebx],eax
1000187e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001885:	83 c4 10             	add    esp,0x10
10001888:	89 c2                	mov    edx,eax
1000188a:	0f b6 c4             	movzx  eax,ah
1000188d:	c1 ea 10             	shr    edx,0x10
10001890:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001897:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
1000189a:	85 d2                	test   edx,edx
1000189c:	74 a7                	je     10001845 <ssfn_render+0x4c2>
1000189e:	b9 00 01 00 00       	mov    ecx,0x100
100018a3:	31 c0                	xor    eax,eax
100018a5:	89 d7                	mov    edi,edx
100018a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100018a9:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100018b0:	83 ec 0c             	sub    esp,0xc
100018b3:	0f b6 cc             	movzx  ecx,ah
100018b6:	89 c2                	mov    edx,eax
100018b8:	0f b6 c0             	movzx  eax,al
100018bb:	c1 ea 10             	shr    edx,0x10
100018be:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018c5:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018c8:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018cf:	83 c0 08             	add    eax,0x8
100018d2:	50                   	push   eax
100018d3:	e8 fc ff ff ff       	call   100018d4 <ssfn_render+0x551>	100018d4: R_386_PC32	malloc
100018d8:	89 03                	mov    DWORD PTR [ebx],eax
100018da:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018e0:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018e7:	83 c4 10             	add    esp,0x10
100018ea:	89 c2                	mov    edx,eax
100018ec:	0f b6 cc             	movzx  ecx,ah
100018ef:	c1 ea 10             	shr    edx,0x10
100018f2:	0f b6 c0             	movzx  eax,al
100018f5:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018fc:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018ff:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001903:	75 0e                	jne    10001913 <ssfn_render+0x590>
10001905:	e9 3b ff ff ff       	jmp    10001845 <ssfn_render+0x4c2>
1000190a:	8d 45 1c             	lea    eax,[ebp+0x1c]
1000190d:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001913:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001919:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000191d:	74 2a                	je     10001949 <ssfn_render+0x5c6>
1000191f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001924:	74 23                	je     10001949 <ssfn_render+0x5c6>
10001926:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001929:	bb 04 00 00 00       	mov    ebx,0x4
1000192e:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001932:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001936:	89 cf                	mov    edi,ecx
10001938:	29 c7                	sub    edi,eax
1000193a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000193e:	0f af c7             	imul   eax,edi
10001941:	99                   	cdq    
10001942:	f7 fb                	idiv   ebx
10001944:	99                   	cdq    
10001945:	f7 f9                	idiv   ecx
10001947:	eb 02                	jmp    1000194b <ssfn_render+0x5c8>
10001949:	31 c0                	xor    eax,eax
1000194b:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001951:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001959:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001961:	66 89 32             	mov    WORD PTR [edx],si
10001964:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001969:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000196f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001972:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001978:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000197e:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001981:	01 c3                	add    ebx,eax
10001983:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001986:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000198c:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001992:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001995:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001998:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
1000199e:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019a4:	8a 12                	mov    dl,BYTE PTR [edx]
100019a6:	83 e2 3f             	and    edx,0x3f
100019a9:	01 d0                	add    eax,edx
100019ab:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100019ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100019b2:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019b8:	8d 50 08             	lea    edx,[eax+0x8]
100019bb:	b0 ff                	mov    al,0xff
100019bd:	89 d7                	mov    edi,edx
100019bf:	f3 aa                	rep stos BYTE PTR es:[edi],al
100019c1:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019c7:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019cb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019d1:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019d9:	c1 e0 04             	shl    eax,0x4
100019dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019e4:	c1 e0 04             	shl    eax,0x4
100019e7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019eb:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019f1:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019f5:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019f9:	0f 8e 4d 0a 00 00    	jle    1000244c <ssfn_render+0x10c9>
100019ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001a03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a07:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001a0a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001a0d:	8a 12                	mov    dl,BYTE PTR [edx]
10001a0f:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001a13:	83 e2 40             	and    edx,0x40
10001a16:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001a1a:	88 c2                	mov    dl,al
10001a1c:	21 ca                	and    edx,ecx
10001a1e:	fe c2                	inc    dl
10001a20:	75 14                	jne    10001a36 <ssfn_render+0x6b3>
10001a22:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a27:	19 c0                	sbb    eax,eax
10001a29:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a31:	e9 09 0a 00 00       	jmp    1000243f <ssfn_render+0x10bc>
10001a36:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a3a:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a3d:	c1 e0 04             	shl    eax,0x4
10001a40:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a44:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a49:	99                   	cdq    
10001a4a:	f7 fe                	idiv   esi
10001a4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a50:	0f b6 c1             	movzx  eax,cl
10001a53:	c1 e0 04             	shl    eax,0x4
10001a56:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a5b:	99                   	cdq    
10001a5c:	f7 fe                	idiv   esi
10001a5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a66:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a6a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a6e:	c1 e2 10             	shl    edx,0x10
10001a71:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a76:	74 0e                	je     10001a86 <ssfn_render+0x703>
10001a78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a7c:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a81:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a84:	eb 0c                	jmp    10001a92 <ssfn_render+0x70f>
10001a86:	c1 e0 08             	shl    eax,0x8
10001a89:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a8e:	09 d0                	or     eax,edx
10001a90:	09 c3                	or     ebx,eax
10001a92:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a95:	8a 01                	mov    al,BYTE PTR [ecx]
10001a97:	84 c0                	test   al,al
10001a99:	0f 88 17 05 00 00    	js     10001fb6 <ssfn_render+0xc33>
10001a9f:	89 c7                	mov    edi,eax
10001aa1:	83 e7 3f             	and    edi,0x3f
10001aa4:	a8 40                	test   al,0x40
10001aa6:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001aaa:	74 10                	je     10001abc <ssfn_render+0x739>
10001aac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001ab0:	89 f8                	mov    eax,edi
10001ab2:	41                   	inc    ecx
10001ab3:	c1 e0 08             	shl    eax,0x8
10001ab6:	09 c2                	or     edx,eax
10001ab8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001abc:	8d 41 01             	lea    eax,[ecx+0x1]
10001abf:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001ac9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001acd:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001adc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001ae0:	83 c0 04             	add    eax,0x4
10001ae3:	c1 f8 02             	sar    eax,0x2
10001ae6:	01 c7                	add    edi,eax
10001ae8:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001aef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001af3:	0f 8f d7 01 00 00    	jg     10001cd0 <ssfn_render+0x94d>
10001af9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001afc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001b00:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001b04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001b08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001b0c:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001b0f:	c1 e0 04             	shl    eax,0x4
10001b12:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b17:	99                   	cdq    
10001b18:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b1c:	01 c6                	add    esi,eax
10001b1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001b22:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b26:	c1 e0 04             	shl    eax,0x4
10001b29:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b2e:	99                   	cdq    
10001b2f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b37:	01 c3                	add    ebx,eax
10001b39:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b3d:	89 c8                	mov    eax,ecx
10001b3f:	01 c9                	add    ecx,ecx
10001b41:	c1 f8 02             	sar    eax,0x2
10001b44:	83 e1 06             	and    ecx,0x6
10001b47:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b4b:	d3 f8                	sar    eax,cl
10001b4d:	83 e0 03             	and    eax,0x3
10001b50:	89 c1                	mov    ecx,eax
10001b52:	83 f8 02             	cmp    eax,0x2
10001b55:	74 4a                	je     10001ba1 <ssfn_render+0x81e>
10001b57:	83 f8 03             	cmp    eax,0x3
10001b5a:	0f 84 e4 00 00 00    	je     10001c44 <ssfn_render+0x8c1>
10001b60:	49                   	dec    ecx
10001b61:	74 20                	je     10001b83 <ssfn_render+0x800>
10001b63:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b69:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b6f:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b75:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b7b:	83 c7 02             	add    edi,0x2
10001b7e:	e9 41 01 00 00       	jmp    10001cc4 <ssfn_render+0x941>
10001b83:	83 c7 02             	add    edi,0x2
10001b86:	50                   	push   eax
10001b87:	50                   	push   eax
10001b88:	89 e8                	mov    eax,ebp
10001b8a:	53                   	push   ebx
10001b8b:	56                   	push   esi
10001b8c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b90:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b94:	e8 9c e9 ff ff       	call   10000535 <_ssfn_l>
10001b99:	83 c4 10             	add    esp,0x10
10001b9c:	e9 23 01 00 00       	jmp    10001cc4 <ssfn_render+0x941>
10001ba1:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ba5:	83 c7 04             	add    edi,0x4
10001ba8:	c1 e0 04             	shl    eax,0x4
10001bab:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bb0:	99                   	cdq    
10001bb1:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001bb9:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001bbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001bc1:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bc5:	c1 e0 04             	shl    eax,0x4
10001bc8:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bcd:	99                   	cdq    
10001bce:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bd2:	83 ec 0c             	sub    esp,0xc
10001bd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001bd9:	6a 00                	push   0x0
10001bdb:	53                   	push   ebx
10001bdc:	56                   	push   esi
10001bdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001be1:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001be5:	99                   	cdq    
10001be6:	f7 f9                	idiv   ecx
10001be8:	01 d8                	add    eax,ebx
10001bea:	50                   	push   eax
10001beb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bef:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bf3:	99                   	cdq    
10001bf4:	f7 f9                	idiv   ecx
10001bf6:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001bfa:	50                   	push   eax
10001bfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001bff:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c03:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001c09:	99                   	cdq    
10001c0a:	f7 f9                	idiv   ecx
10001c0c:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001c12:	50                   	push   eax
10001c13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001c17:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001c1d:	99                   	cdq    
10001c1e:	f7 f9                	idiv   ecx
10001c20:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c26:	50                   	push   eax
10001c27:	89 e8                	mov    eax,ebp
10001c29:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c2f:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c35:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c39:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c3d:	e8 04 ea ff ff       	call   10000646 <_ssfn_b>
10001c42:	eb 7d                	jmp    10001cc1 <ssfn_render+0x93e>
10001c44:	83 ec 0c             	sub    esp,0xc
10001c47:	83 c7 06             	add    edi,0x6
10001c4a:	6a 00                	push   0x0
10001c4c:	53                   	push   ebx
10001c4d:	56                   	push   esi
10001c4e:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c52:	c1 e0 04             	shl    eax,0x4
10001c55:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c5a:	99                   	cdq    
10001c5b:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c5f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c63:	50                   	push   eax
10001c64:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c68:	c1 e0 04             	shl    eax,0x4
10001c6b:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c70:	99                   	cdq    
10001c71:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c75:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c79:	50                   	push   eax
10001c7a:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c7e:	c1 e0 04             	shl    eax,0x4
10001c81:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c86:	99                   	cdq    
10001c87:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c8b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c8f:	50                   	push   eax
10001c90:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c94:	c1 e0 04             	shl    eax,0x4
10001c97:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001c9c:	99                   	cdq    
10001c9d:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001ca1:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001ca5:	50                   	push   eax
10001ca6:	89 e8                	mov    eax,ebp
10001ca8:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001cae:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001cb4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001cb8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001cbc:	e8 85 e9 ff ff       	call   10000646 <_ssfn_b>
10001cc1:	83 c4 30             	add    esp,0x30
10001cc4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001ccb:	e9 18 fe ff ff       	jmp    10001ae8 <ssfn_render+0x765>
10001cd0:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001cd6:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001cdc:	75 0e                	jne    10001cec <ssfn_render+0x969>
10001cde:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001ce4:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cea:	74 2e                	je     10001d1a <ssfn_render+0x997>
10001cec:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cf2:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cf8:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001cfc:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001d02:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001d08:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001d0e:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001d13:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001d1a:	b3 fe                	mov    bl,0xfe
10001d1c:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001d23:	0f 8e 16 07 00 00    	jle    1000243f <ssfn_render+0x10bc>
10001d29:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d31:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d39:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d41:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d49:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d55:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d59:	0f 8d de 06 00 00    	jge    1000243d <ssfn_render+0x10ba>
10001d5f:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d65:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d70:	83 e8 03             	sub    eax,0x3
10001d73:	31 f6                	xor    esi,esi
10001d75:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d79:	89 f8                	mov    eax,edi
10001d7b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d7f:	c1 f8 02             	sar    eax,0x2
10001d82:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d86:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d8d:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d91:	0f 8e 16 01 00 00    	jle    10001ead <ssfn_render+0xb2a>
10001d97:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d9d:	8d 47 01             	lea    eax,[edi+0x1]
10001da0:	01 c0                	add    eax,eax
10001da2:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001da6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001daa:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001daf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001db3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001db7:	7d 0c                	jge    10001dc5 <ssfn_render+0xa42>
10001db9:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dbd:	0f 8f db 00 00 00    	jg     10001e9e <ssfn_render+0xb1b>
10001dc3:	eb 0a                	jmp    10001dcf <ssfn_render+0xa4c>
10001dc5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dc9:	0f 8e cf 00 00 00    	jle    10001e9e <ssfn_render+0xb1b>
10001dcf:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001dd4:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001dd8:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001ddd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001de1:	89 d8                	mov    eax,ebx
10001de3:	c1 fa 04             	sar    edx,0x4
10001de6:	c1 f8 04             	sar    eax,0x4
10001de9:	39 c2                	cmp    edx,eax
10001deb:	75 0a                	jne    10001df7 <ssfn_render+0xa74>
10001ded:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001df1:	01 c8                	add    eax,ecx
10001df3:	d1 f8                	sar    eax,1
10001df5:	eb 1a                	jmp    10001e11 <ssfn_render+0xa8e>
10001df7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001dfb:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001dff:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001e03:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001e07:	0f af c1             	imul   eax,ecx
10001e0a:	99                   	cdq    
10001e0b:	f7 fb                	idiv   ebx
10001e0d:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001e11:	c1 f8 04             	sar    eax,0x4
10001e14:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001e19:	74 04                	je     10001e1f <ssfn_render+0xa9c>
10001e1b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001e1f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e24:	75 3f                	jne    10001e65 <ssfn_render+0xae2>
10001e26:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e2b:	74 38                	je     10001e65 <ssfn_render+0xae2>
10001e2d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e31:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e37:	f7 db                	neg    ebx
10001e39:	01 c2                	add    edx,eax
10001e3b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e3f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e43:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e47:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e4b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e4f:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e53:	74 10                	je     10001e65 <ssfn_render+0xae2>
10001e55:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e59:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e5d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e61:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e65:	31 d2                	xor    edx,edx
10001e67:	39 f2                	cmp    edx,esi
10001e69:	75 0b                	jne    10001e76 <ssfn_render+0xaf3>
10001e6b:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e73:	46                   	inc    esi
10001e74:	eb 28                	jmp    10001e9e <ssfn_render+0xb1b>
10001e76:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e7e:	39 c1                	cmp    ecx,eax
10001e80:	7d 03                	jge    10001e85 <ssfn_render+0xb02>
10001e82:	42                   	inc    edx
10001e83:	eb e2                	jmp    10001e67 <ssfn_render+0xae4>
10001e85:	89 f1                	mov    ecx,esi
10001e87:	49                   	dec    ecx
10001e88:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e90:	39 d1                	cmp    ecx,edx
10001e92:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e9a:	7f eb                	jg     10001e87 <ssfn_render+0xb04>
10001e9c:	eb cd                	jmp    10001e6b <ssfn_render+0xae8>
10001e9e:	8d 47 02             	lea    eax,[edi+0x2]
10001ea1:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001ea8:	e9 d9 fe ff ff       	jmp    10001d86 <ssfn_render+0xa03>
10001ead:	83 fe 01             	cmp    esi,0x1
10001eb0:	7e 1f                	jle    10001ed1 <ssfn_render+0xb4e>
10001eb2:	f7 c6 01 00 00 00    	test   esi,0x1
10001eb8:	74 24                	je     10001ede <ssfn_render+0xb5b>
10001eba:	8d 46 ff             	lea    eax,[esi-0x1]
10001ebd:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001ec5:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001ecd:	89 c6                	mov    esi,eax
10001ecf:	eb 0d                	jmp    10001ede <ssfn_render+0xb5b>
10001ed1:	85 f6                	test   esi,esi
10001ed3:	0f 84 c7 00 00 00    	je     10001fa0 <ssfn_render+0xc1d>
10001ed9:	be 01 00 00 00       	mov    esi,0x1
10001ede:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ee4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001ee8:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001eec:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ef0:	39 d1                	cmp    ecx,edx
10001ef2:	7d 0b                	jge    10001eff <ssfn_render+0xb7c>
10001ef4:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001ef8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001efc:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001eff:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001f0a:	31 c0                	xor    eax,eax
10001f0c:	31 d2                	xor    edx,edx
10001f0e:	8d 4e ff             	lea    ecx,[esi-0x1]
10001f11:	39 d1                	cmp    ecx,edx
10001f13:	7e 7d                	jle    10001f92 <ssfn_render+0xc0f>
10001f15:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001f1d:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f25:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f29:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f2d:	79 02                	jns    10001f31 <ssfn_render+0xbae>
10001f2f:	31 c0                	xor    eax,eax
10001f31:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f35:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f39:	39 cf                	cmp    edi,ecx
10001f3b:	7e 04                	jle    10001f41 <ssfn_render+0xbbe>
10001f3d:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f41:	85 d2                	test   edx,edx
10001f43:	74 12                	je     10001f57 <ssfn_render+0xbd4>
10001f45:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f4d:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f51:	39 c8                	cmp    eax,ecx
10001f53:	7d 02                	jge    10001f57 <ssfn_render+0xbd4>
10001f55:	89 c8                	mov    eax,ecx
10001f57:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f5b:	7d 2b                	jge    10001f88 <ssfn_render+0xc05>
10001f5d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f61:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f67:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f6a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f6e:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f72:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f76:	75 05                	jne    10001f7d <ssfn_render+0xbfa>
10001f78:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f7d:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f81:	40                   	inc    eax
10001f82:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f86:	eb cf                	jmp    10001f57 <ssfn_render+0xbd4>
10001f88:	83 c2 02             	add    edx,0x2
10001f8b:	b0 01                	mov    al,0x1
10001f8d:	e9 7c ff ff ff       	jmp    10001f0e <ssfn_render+0xb8b>
10001f92:	83 e6 fe             	and    esi,0xfffffffe
10001f95:	84 c0                	test   al,al
10001f97:	74 07                	je     10001fa0 <ssfn_render+0xc1d>
10001f99:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001fa0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001fa4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001fa8:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001fac:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001fb1:	e9 9b fd ff ff       	jmp    10001d51 <ssfn_render+0x9ce>
10001fb6:	88 c2                	mov    dl,al
10001fb8:	80 e2 60             	and    dl,0x60
10001fbb:	0f 85 95 02 00 00    	jne    10002256 <ssfn_render+0xed3>
10001fc1:	83 e0 1f             	and    eax,0x1f
10001fc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fc8:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fcf:	c1 fb 04             	sar    ebx,0x4
10001fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fd6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fda:	40                   	inc    eax
10001fdb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fe3:	c1 f8 04             	sar    eax,0x4
10001fe6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fee:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001ff3:	99                   	cdq    
10001ff4:	f7 fe                	idiv   esi
10001ff6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ffe:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002003:	99                   	cdq    
10002004:	f7 fe                	idiv   esi
10002006:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000200a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002010:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002014:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002018:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000201b:	39 d6                	cmp    esi,edx
1000201d:	7d 0a                	jge    10002029 <ssfn_render+0xca6>
1000201f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002023:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002026:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000202d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002035:	0f af c3             	imul   eax,ebx
10002038:	31 ff                	xor    edi,edi
1000203a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000203e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002042:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002046:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000204a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000204e:	29 d8                	sub    eax,ebx
10002050:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002054:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002058:	0f 8d b1 00 00 00    	jge    1000210f <ssfn_render+0xd8c>
1000205e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002062:	99                   	cdq    
10002063:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002067:	89 c6                	mov    esi,eax
10002069:	31 c0                	xor    eax,eax
1000206b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002070:	74 0e                	je     10002080 <ssfn_render+0xcfd>
10002072:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002076:	bb 04 00 00 00       	mov    ebx,0x4
1000207b:	29 f8                	sub    eax,edi
1000207d:	99                   	cdq    
1000207e:	f7 fb                	idiv   ebx
10002080:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002084:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000208f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10002093:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10002098:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000209f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100020a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020a7:	39 d8                	cmp    eax,ebx
100020a9:	7d 4e                	jge    100020f9 <ssfn_render+0xd76>
100020ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100020af:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100020b4:	99                   	cdq    
100020b5:	f7 fb                	idiv   ebx
100020b7:	8d 14 06             	lea    edx,[esi+eax*1]
100020ba:	83 e0 07             	and    eax,0x7
100020bd:	c1 fa 03             	sar    edx,0x3
100020c0:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020c5:	0f a3 c2             	bt     edx,eax
100020c8:	72 0e                	jb     100020d8 <ssfn_render+0xd55>
100020ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020ce:	43                   	inc    ebx
100020cf:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020d6:	eb c0                	jmp    10002098 <ssfn_render+0xd15>
100020d8:	31 c0                	xor    eax,eax
100020da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020de:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020e2:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020e8:	40                   	inc    eax
100020e9:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020ed:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020f1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020f5:	7d e3                	jge    100020da <ssfn_render+0xd57>
100020f7:	eb d1                	jmp    100020ca <ssfn_render+0xd47>
100020f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100020fd:	47                   	inc    edi
100020fe:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002102:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002106:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000210a:	e9 45 ff ff ff       	jmp    10002054 <ssfn_render+0xcd1>
1000210f:	b3 fe                	mov    bl,0xfe
10002111:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002118:	0f 85 21 03 00 00    	jne    1000243f <ssfn_render+0x10bc>
1000211e:	31 c0                	xor    eax,eax
10002120:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002124:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002129:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
1000212d:	0f 95 c0             	setne  al
10002130:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002134:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002138:	4f                   	dec    edi
10002139:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000213d:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002145:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002149:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002150:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002154:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002158:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000215c:	31 c0                	xor    eax,eax
1000215e:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002161:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002165:	83 c1 04             	add    ecx,0x4
10002168:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
1000216c:	0f 8d c0 02 00 00    	jge    10002432 <ssfn_render+0x10af>
10002172:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002176:	8d 77 01             	lea    esi,[edi+0x1]
10002179:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000217d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
10002181:	4f                   	dec    edi
10002182:	be 01 00 00 00       	mov    esi,0x1
10002187:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000218b:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000218f:	7e 63                	jle    100021f4 <ssfn_render+0xe71>
10002191:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002195:	b9 01 00 00 00       	mov    ecx,0x1
1000219a:	89 ca                	mov    edx,ecx
1000219c:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100021a0:	7e 45                	jle    100021e7 <ssfn_render+0xe64>
100021a2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100021a8:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100021ad:	75 34                	jne    100021e3 <ssfn_render+0xe60>
100021af:	89 c7                	mov    edi,eax
100021b1:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021b5:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100021b9:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100021bd:	74 0c                	je     100021cb <ssfn_render+0xe48>
100021bf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100021c3:	01 d7                	add    edi,edx
100021c5:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021c9:	75 18                	jne    100021e3 <ssfn_render+0xe60>
100021cb:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021cf:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021d3:	74 06                	je     100021db <ssfn_render+0xe58>
100021d5:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021d9:	75 08                	jne    100021e3 <ssfn_render+0xe60>
100021db:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021df:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021e3:	41                   	inc    ecx
100021e4:	40                   	inc    eax
100021e5:	eb b3                	jmp    1000219a <ssfn_render+0xe17>
100021e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021eb:	46                   	inc    esi
100021ec:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021f0:	b0 01                	mov    al,0x1
100021f2:	eb 97                	jmp    1000218b <ssfn_render+0xe08>
100021f4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021f8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100021fc:	bb 01 00 00 00       	mov    ebx,0x1
10002201:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002205:	7e 3d                	jle    10002244 <ssfn_render+0xec1>
10002207:	b8 01 00 00 00       	mov    eax,0x1
1000220c:	89 c2                	mov    edx,eax
1000220e:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002212:	7e 23                	jle    10002237 <ssfn_render+0xeb4>
10002214:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002218:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000221e:	8d 14 07             	lea    edx,[edi+eax*1]
10002221:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002226:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000222a:	75 08                	jne    10002234 <ssfn_render+0xeb1>
1000222c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002230:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002234:	40                   	inc    eax
10002235:	eb d5                	jmp    1000220c <ssfn_render+0xe89>
10002237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000223b:	43                   	inc    ebx
1000223c:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002240:	b0 01                	mov    al,0x1
10002242:	eb bd                	jmp    10002201 <ssfn_render+0xe7e>
10002244:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002247:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
1000224b:	01 c9                	add    ecx,ecx
1000224d:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002251:	e9 08 ff ff ff       	jmp    1000215e <ssfn_render+0xddb>
10002256:	b3 fe                	mov    bl,0xfe
10002258:	80 fa 20             	cmp    dl,0x20
1000225b:	0f 85 de 01 00 00    	jne    1000243f <ssfn_render+0x10bc>
10002261:	89 c3                	mov    ebx,eax
10002263:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002267:	c1 e3 08             	shl    ebx,0x8
1000226a:	81 e3 00 1f 00 00    	and    ebx,0x1f00
10002270:	09 c3                	or     ebx,eax
10002272:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002276:	43                   	inc    ebx
10002277:	40                   	inc    eax
10002278:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000227c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
10002280:	40                   	inc    eax
10002281:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002285:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002289:	c1 f8 04             	sar    eax,0x4
1000228c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002294:	c1 f8 04             	sar    eax,0x4
10002297:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000229b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000229f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100022a4:	99                   	cdq    
100022a5:	f7 fe                	idiv   esi
100022a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100022ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022af:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100022b4:	99                   	cdq    
100022b5:	f7 fe                	idiv   esi
100022b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022bf:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022c5:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022c9:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022cd:	39 d6                	cmp    esi,edx
100022cf:	7d 0b                	jge    100022dc <ssfn_render+0xf59>
100022d1:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022d5:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022d9:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022dc:	83 c1 04             	add    ecx,0x4
100022df:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022ea:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022f1:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022f5:	72 35                	jb     1000232c <ssfn_render+0xfa9>
100022f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100022ff:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002304:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002308:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
1000230c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002313:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002317:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000231f:	31 d2                	xor    edx,edx
10002321:	31 ff                	xor    edi,edi
10002323:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002327:	e9 cc 00 00 00       	jmp    100023f8 <ssfn_render+0x1075>
1000232c:	8a 11                	mov    dl,BYTE PTR [ecx]
1000232e:	89 d0                	mov    eax,edx
10002330:	83 e0 7f             	and    eax,0x7f
10002333:	84 d2                	test   dl,dl
10002335:	8d 78 01             	lea    edi,[eax+0x1]
10002338:	78 09                	js     10002343 <ssfn_render+0xfc0>
1000233a:	41                   	inc    ecx
1000233b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000233f:	89 ca                	mov    edx,ecx
10002341:	eb 3d                	jmp    10002380 <ssfn_render+0xffd>
10002343:	48                   	dec    eax
10002344:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000234b:	83 f8 fe             	cmp    eax,0xfffffffe
1000234e:	74 16                	je     10002366 <ssfn_render+0xfe3>
10002350:	8d 5a 01             	lea    ebx,[edx+0x1]
10002353:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000235a:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
1000235d:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002364:	eb dd                	jmp    10002343 <ssfn_render+0xfc0>
10002366:	83 c1 02             	add    ecx,0x2
10002369:	eb 86                	jmp    100022f1 <ssfn_render+0xf6e>
1000236b:	42                   	inc    edx
1000236c:	8d 73 01             	lea    esi,[ebx+0x1]
1000236f:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002376:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002379:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
10002380:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002384:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
1000238b:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
10002390:	75 d9                	jne    1000236b <ssfn_render+0xfe8>
10002392:	01 f9                	add    ecx,edi
10002394:	e9 58 ff ff ff       	jmp    100022f1 <ssfn_render+0xf6e>
10002399:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000239d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100023a1:	99                   	cdq    
100023a2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100023a6:	0f af c8             	imul   ecx,eax
100023a9:	31 c0                	xor    eax,eax
100023ab:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100023b0:	74 0e                	je     100023c0 <ssfn_render+0x103d>
100023b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100023b6:	bb 04 00 00 00       	mov    ebx,0x4
100023bb:	29 f8                	sub    eax,edi
100023bd:	99                   	cdq    
100023be:	f7 fb                	idiv   ebx
100023c0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023c4:	31 db                	xor    ebx,ebx
100023c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023ca:	31 f6                	xor    esi,esi
100023cc:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023d3:	01 c1                	add    ecx,eax
100023d5:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023d9:	7f 30                	jg     1000240b <ssfn_render+0x1088>
100023db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023df:	85 c0                	test   eax,eax
100023e1:	79 02                	jns    100023e5 <ssfn_render+0x1062>
100023e3:	31 c0                	xor    eax,eax
100023e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023e9:	47                   	inc    edi
100023ea:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023ee:	b2 01                	mov    dl,0x1
100023f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023f4:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023f8:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100023fc:	7c 9b                	jl     10002399 <ssfn_render+0x1016>
100023fe:	84 d2                	test   dl,dl
10002400:	74 3b                	je     1000243d <ssfn_render+0x10ba>
10002402:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002409:	eb 32                	jmp    1000243d <ssfn_render+0x10ba>
1000240b:	89 d8                	mov    eax,ebx
1000240d:	99                   	cdq    
1000240e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002412:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002419:	3c ff                	cmp    al,0xff
1000241b:	74 0e                	je     1000242b <ssfn_render+0x10a8>
1000241d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002421:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002427:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000242b:	46                   	inc    esi
1000242c:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002430:	eb a3                	jmp    100023d5 <ssfn_render+0x1052>
10002432:	84 c0                	test   al,al
10002434:	74 07                	je     1000243d <ssfn_render+0x10ba>
10002436:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
1000243d:	b3 fe                	mov    bl,0xfe
1000243f:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002443:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002447:	e9 9f f5 ff ff       	jmp    100019eb <ssfn_render+0x668>
1000244c:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002452:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002455:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002458:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
1000245b:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002461:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002465:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002469:	89 f0                	mov    eax,esi
1000246b:	89 d9                	mov    ecx,ebx
1000246d:	43                   	inc    ebx
1000246e:	39 de                	cmp    esi,ebx
10002470:	7e 08                	jle    1000247a <ssfn_render+0x10f7>
10002472:	48                   	dec    eax
10002473:	29 c8                	sub    eax,ecx
10002475:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002478:	eb 04                	jmp    1000247e <ssfn_render+0x10fb>
1000247a:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
1000247e:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002486:	0f 84 c9 0c 00 00    	je     10003155 <ssfn_render+0x1dd2>
1000248c:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002492:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10002498:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000249c:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
1000249f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100024a3:	0f ba e0 0c          	bt     eax,0xc
100024a7:	72 22                	jb     100024cb <ssfn_render+0x1148>
100024a9:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100024ac:	83 e0 0f             	and    eax,0xf
100024af:	3c 03                	cmp    al,0x3
100024b1:	74 18                	je     100024cb <ssfn_render+0x1148>
100024b3:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100024b7:	84 c9                	test   cl,cl
100024b9:	74 10                	je     100024cb <ssfn_render+0x1148>
100024bb:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100024bf:	0f af d7             	imul   edx,edi
100024c2:	89 d0                	mov    eax,edx
100024c4:	99                   	cdq    
100024c5:	f7 f9                	idiv   ecx
100024c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024cf:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024d5:	7d 06                	jge    100024dd <ssfn_render+0x115a>
100024d7:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024dd:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024e3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024e7:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024ea:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024ef:	89 d0                	mov    eax,edx
100024f1:	99                   	cdq    
100024f2:	f7 f9                	idiv   ecx
100024f4:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024fc:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
100024ff:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002503:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002507:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000250b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002510:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002514:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002519:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000251d:	99                   	cdq    
1000251e:	f7 f9                	idiv   ecx
10002520:	31 d2                	xor    edx,edx
10002522:	83 ff 10             	cmp    edi,0x10
10002525:	0f 9f c2             	setg   dl
10002528:	42                   	inc    edx
10002529:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
1000252d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002531:	7d 08                	jge    1000253b <ssfn_render+0x11b8>
10002533:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002537:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000253b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000253f:	39 c2                	cmp    edx,eax
10002541:	7d 04                	jge    10002547 <ssfn_render+0x11c4>
10002543:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002547:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
1000254c:	74 4c                	je     1000259a <ssfn_render+0x1217>
1000254e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002552:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002557:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000255b:	99                   	cdq    
1000255c:	f7 f9                	idiv   ecx
1000255e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002562:	81 e2 00 08 00 00    	and    edx,0x800
10002568:	74 04                	je     1000256e <ssfn_render+0x11eb>
1000256a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000256e:	01 d0                	add    eax,edx
10002570:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002576:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000257a:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000257e:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
10002582:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002587:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000258b:	99                   	cdq    
1000258c:	f7 f9                	idiv   ecx
1000258e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002592:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10002598:	eb 22                	jmp    100025bc <ssfn_render+0x1239>
1000259a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000259e:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100025a8:	d1 f8                	sar    eax,1
100025aa:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100025b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100025b6:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100025bc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025c3:	8b 18                	mov    ebx,DWORD PTR [eax]
100025c5:	85 db                	test   ebx,ebx
100025c7:	0f 84 2e 09 00 00    	je     10002efb <ssfn_render+0x1b78>
100025cd:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025d1:	89 d1                	mov    ecx,edx
100025d3:	89 d0                	mov    eax,edx
100025d5:	66 c1 f9 0b          	sar    cx,0xb
100025d9:	c1 f8 1f             	sar    eax,0x1f
100025dc:	31 c2                	xor    edx,eax
100025de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025e2:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025e6:	88 c8                	mov    al,cl
100025e8:	83 e0 10             	and    eax,0x10
100025eb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025f3:	83 c0 40             	add    eax,0x40
100025f6:	c1 f8 06             	sar    eax,0x6
100025f9:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002600:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002604:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002608:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
1000260c:	7d 08                	jge    10002616 <ssfn_render+0x1293>
1000260e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002612:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002616:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002619:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002621:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002625:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
1000262d:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002631:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002636:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000263a:	99                   	cdq    
1000263b:	f7 f9                	idiv   ecx
1000263d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002641:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002648:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000264b:	0f b6 f4             	movzx  esi,ah
1000264e:	89 c2                	mov    edx,eax
10002650:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002654:	c1 ea 10             	shr    edx,0x10
10002657:	0f b6 fa             	movzx  edi,dl
1000265a:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000265e:	0f b6 f8             	movzx  edi,al
10002661:	c1 e8 18             	shr    eax,0x18
10002664:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000266c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002673:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002676:	0f b6 fc             	movzx  edi,ah
10002679:	89 c2                	mov    edx,eax
1000267b:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002682:	c1 ea 10             	shr    edx,0x10
10002685:	0f b6 c0             	movzx  eax,al
10002688:	0f b6 f2             	movzx  esi,dl
1000268b:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002692:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002699:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
1000269d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026a4:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100026ab:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026af:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026b3:	0f af c2             	imul   eax,edx
100026b6:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100026ba:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100026be:	8d 04 90             	lea    eax,[eax+edx*4]
100026c1:	01 d8                	add    eax,ebx
100026c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026ce:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026d5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026da:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026e1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026e5:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026e9:	0f 8d e2 04 00 00    	jge    10002bd1 <ssfn_render+0x184e>
100026ef:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026f6:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100026fd:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002701:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002705:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002709:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000270d:	39 d0                	cmp    eax,edx
1000270f:	0f 8d bc 04 00 00    	jge    10002bd1 <ssfn_render+0x184e>
10002715:	85 c0                	test   eax,eax
10002717:	0f 88 94 04 00 00    	js     10002bb1 <ssfn_render+0x182e>
1000271d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002723:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002727:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000272b:	c1 e1 08             	shl    ecx,0x8
1000272e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002736:	89 c8                	mov    eax,ecx
10002738:	0f af c3             	imul   eax,ebx
1000273b:	99                   	cdq    
1000273c:	f7 fe                	idiv   esi
1000273e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002745:	c1 f8 08             	sar    eax,0x8
10002748:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000274f:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002755:	0f af c3             	imul   eax,ebx
10002758:	99                   	cdq    
10002759:	f7 fe                	idiv   esi
1000275b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000275f:	c1 f8 08             	sar    eax,0x8
10002762:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002769:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
1000276d:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002774:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
1000277b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002782:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002786:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000278a:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000278e:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002792:	0f 8d 19 04 00 00    	jge    10002bb1 <ssfn_render+0x182e>
10002798:	85 c0                	test   eax,eax
1000279a:	0f 88 ff 03 00 00    	js     10002b9f <ssfn_render+0x181c>
100027a0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027a7:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100027ab:	75 42                	jne    100027ef <ssfn_render+0x146c>
100027ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100027b1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100027b8:	b9 10 00 00 00       	mov    ecx,0x10
100027bd:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100027c0:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027c7:	89 c2                	mov    edx,eax
100027c9:	0f b6 fc             	movzx  edi,ah
100027cc:	d3 ea                	shr    edx,cl
100027ce:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027d5:	0f b6 f2             	movzx  esi,dl
100027d8:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027dc:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027e3:	d3 e8                	shr    eax,cl
100027e5:	0f b6 c0             	movzx  eax,al
100027e8:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027ef:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027f9:	0f b7 18             	movzx  ebx,WORD PTR [eax]
100027fc:	c1 e1 08             	shl    ecx,0x8
100027ff:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002803:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000280b:	89 c8                	mov    eax,ecx
1000280d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002815:	0f af c3             	imul   eax,ebx
10002818:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002820:	99                   	cdq    
10002821:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002829:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
1000282d:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002835:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
1000283c:	c1 f8 08             	sar    eax,0x8
1000283f:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002846:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
1000284c:	0f af c3             	imul   eax,ebx
1000284f:	99                   	cdq    
10002850:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002854:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002858:	c1 f8 08             	sar    eax,0x8
1000285b:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10002862:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002869:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000286d:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002871:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002875:	0f 8d 3b 02 00 00    	jge    10002ab6 <ssfn_render+0x1733>
1000287b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
1000287f:	c1 fa 08             	sar    edx,0x8
10002882:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002889:	75 25                	jne    100028b0 <ssfn_render+0x152d>
1000288b:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
10002890:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
10002897:	b8 00 01 00 00       	mov    eax,0x100
1000289c:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100028a4:	29 c8                	sub    eax,ecx
100028a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100028aa:	39 c7                	cmp    edi,eax
100028ac:	7e 1c                	jle    100028ca <ssfn_render+0x1547>
100028ae:	eb 16                	jmp    100028c6 <ssfn_render+0x1543>
100028b0:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100028b8:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100028bf:	75 09                	jne    100028ca <ssfn_render+0x1547>
100028c1:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028ce:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028d1:	0f af c2             	imul   eax,edx
100028d4:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028db:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028e0:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028e5:	c1 f8 08             	sar    eax,0x8
100028e8:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028ef:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028fa:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
100028fe:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002902:	0f 8d a1 01 00 00    	jge    10002aa9 <ssfn_render+0x1726>
10002908:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000290c:	c1 f8 08             	sar    eax,0x8
1000290f:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002916:	75 3b                	jne    10002953 <ssfn_render+0x15d0>
10002918:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
1000291d:	ba 00 01 00 00       	mov    edx,0x100
10002922:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000292a:	29 ca                	sub    edx,ecx
1000292c:	89 f1                	mov    ecx,esi
1000292e:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002935:	39 d1                	cmp    ecx,edx
10002937:	7c 0e                	jl     10002947 <ssfn_render+0x15c4>
10002939:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000293d:	81 fa 00 01 00 00    	cmp    edx,0x100
10002943:	74 22                	je     10002967 <ssfn_render+0x15e4>
10002945:	89 d1                	mov    ecx,edx
10002947:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
1000294c:	89 cf                	mov    edi,ecx
1000294e:	c1 ff 08             	sar    edi,0x8
10002951:	eb 14                	jmp    10002967 <ssfn_render+0x15e4>
10002953:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
1000295a:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002961:	74 04                	je     10002967 <ssfn_render+0x15e4>
10002963:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002967:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
1000296b:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
1000296f:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002976:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
1000297b:	81 fa ff 00 00 00    	cmp    edx,0xff
10002981:	75 37                	jne    100029ba <ssfn_render+0x1637>
10002983:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
1000298a:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002992:	0f af c7             	imul   eax,edi
10002995:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002999:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100029a0:	0f af c7             	imul   eax,edi
100029a3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029a7:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100029ae:	0f af c7             	imul   eax,edi
100029b1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029b5:	e9 e2 00 00 00       	jmp    10002a9c <ssfn_render+0x1719>
100029ba:	81 fa fe 00 00 00    	cmp    edx,0xfe
100029c0:	74 2d                	je     100029ef <ssfn_render+0x166c>
100029c2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029c5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029c8:	85 c9                	test   ecx,ecx
100029ca:	74 23                	je     100029ef <ssfn_render+0x166c>
100029cc:	01 c8                	add    eax,ecx
100029ce:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029d1:	89 d9                	mov    ecx,ebx
100029d3:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029da:	c1 e9 10             	shr    ecx,0x10
100029dd:	0f b6 f7             	movzx  esi,bh
100029e0:	0f b6 c1             	movzx  eax,cl
100029e3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029e7:	0f b6 c3             	movzx  eax,bl
100029ea:	c1 eb 18             	shr    ebx,0x18
100029ed:	eb 14                	jmp    10002a03 <ssfn_render+0x1680>
100029ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029fb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
100029ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002a03:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a09:	75 25                	jne    10002a30 <ssfn_render+0x16ad>
10002a0b:	0f af c7             	imul   eax,edi
10002a0e:	0f af f7             	imul   esi,edi
10002a11:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a15:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a19:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002a1f:	0f af cf             	imul   ecx,edi
10002a22:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a26:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a2a:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a2e:	eb 6c                	jmp    10002a9c <ssfn_render+0x1719>
10002a30:	0f af f3             	imul   esi,ebx
10002a33:	0f af c3             	imul   eax,ebx
10002a36:	b9 ff 00 00 00       	mov    ecx,0xff
10002a3b:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a42:	29 d9                	sub    ecx,ebx
10002a44:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a48:	0f af d1             	imul   edx,ecx
10002a4b:	b9 ff 00 00 00       	mov    ecx,0xff
10002a50:	01 d0                	add    eax,edx
10002a52:	0f af c7             	imul   eax,edi
10002a55:	99                   	cdq    
10002a56:	f7 f9                	idiv   ecx
10002a58:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a5c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a60:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a68:	01 f0                	add    eax,esi
10002a6a:	89 ce                	mov    esi,ecx
10002a6c:	0f af c7             	imul   eax,edi
10002a6f:	99                   	cdq    
10002a70:	f7 f9                	idiv   ecx
10002a72:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a76:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a7a:	0f af cb             	imul   ecx,ebx
10002a7d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a81:	0f af df             	imul   ebx,edi
10002a84:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a8c:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a90:	01 c8                	add    eax,ecx
10002a92:	0f af c7             	imul   eax,edi
10002a95:	99                   	cdq    
10002a96:	f7 fe                	idiv   esi
10002a98:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002a9c:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002aa4:	e9 51 fe ff ff       	jmp    100028fa <ssfn_render+0x1577>
10002aa9:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002ab1:	e9 b7 fd ff ff       	jmp    1000286d <ssfn_render+0x14ea>
10002ab6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002abb:	74 30                	je     10002aed <ssfn_render+0x176a>
10002abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002ac1:	31 d2                	xor    edx,edx
10002ac3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ac7:	31 d2                	xor    edx,edx
10002ac9:	89 c1                	mov    ecx,eax
10002acb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002acf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ad3:	31 d2                	xor    edx,edx
10002ad5:	89 c6                	mov    esi,eax
10002ad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002adb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002adf:	31 d2                	xor    edx,edx
10002ae1:	89 c3                	mov    ebx,eax
10002ae3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ae7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aeb:	eb 1c                	jmp    10002b09 <ssfn_render+0x1786>
10002aed:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002af1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002af5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002af9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002afd:	c1 e9 08             	shr    ecx,0x8
10002b00:	c1 ee 08             	shr    esi,0x8
10002b03:	c1 eb 08             	shr    ebx,0x8
10002b06:	c1 e8 08             	shr    eax,0x8
10002b09:	83 f8 0f             	cmp    eax,0xf
10002b0c:	0f 86 8d 00 00 00    	jbe    10002b9f <ssfn_render+0x181c>
10002b12:	89 ca                	mov    edx,ecx
10002b14:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002b1a:	76 05                	jbe    10002b21 <ssfn_render+0x179e>
10002b1c:	ba ff 00 00 00       	mov    edx,0xff
10002b21:	b9 10 00 00 00       	mov    ecx,0x10
10002b26:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b2d:	d3 e2                	shl    edx,cl
10002b2f:	3d ff 00 00 00       	cmp    eax,0xff
10002b34:	89 d1                	mov    ecx,edx
10002b36:	76 05                	jbe    10002b3d <ssfn_render+0x17ba>
10002b38:	b8 ff 00 00 00       	mov    eax,0xff
10002b3d:	c1 e0 18             	shl    eax,0x18
10002b40:	09 c8                	or     eax,ecx
10002b42:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b48:	76 05                	jbe    10002b4f <ssfn_render+0x17cc>
10002b4a:	be ff 00 00 00       	mov    esi,0xff
10002b4f:	c1 e6 08             	shl    esi,0x8
10002b52:	09 f0                	or     eax,esi
10002b54:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b5a:	76 05                	jbe    10002b61 <ssfn_render+0x17de>
10002b5c:	bb ff 00 00 00       	mov    ebx,0xff
10002b61:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b69:	d3 e3                	shl    ebx,cl
10002b6b:	09 c3                	or     ebx,eax
10002b6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b74:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b77:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b7b:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b7f:	75 1e                	jne    10002b9f <ssfn_render+0x181c>
10002b81:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b88:	7e 07                	jle    10002b91 <ssfn_render+0x180e>
10002b8a:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b95:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b99:	7d 04                	jge    10002b9f <ssfn_render+0x181c>
10002b9b:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002b9f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ba7:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002bab:	0f 85 ca fb ff ff    	jne    1000277b <ssfn_render+0x13f8>
10002bb1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bb8:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002bbc:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bc0:	25 fc ff 00 00       	and    eax,0xfffc
10002bc5:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002bcc:	e9 10 fb ff ff       	jmp    100026e1 <ssfn_render+0x135e>
10002bd1:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002bd8:	0f 84 90 01 00 00    	je     10002d6e <ssfn_render+0x19eb>
10002bde:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002be6:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bf1:	40                   	inc    eax
10002bf2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002bf6:	29 c7                	sub    edi,eax
10002bf8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002bfc:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002c00:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002c04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c08:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002c0c:	7e 09                	jle    10002c17 <ssfn_render+0x1894>
10002c0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c12:	40                   	inc    eax
10002c13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c17:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c1e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c25:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c29:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c2d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c31:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c35:	0f af c2             	imul   eax,edx
10002c38:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c3c:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c40:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c44:	03 07                	add    eax,DWORD PTR [edi]
10002c46:	89 c7                	mov    edi,eax
10002c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c4c:	c1 e0 18             	shl    eax,0x18
10002c4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c53:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c5b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c60:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c68:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c6c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c70:	0f 8e f8 00 00 00    	jle    10002d6e <ssfn_render+0x19eb>
10002c76:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c7d:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c84:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c88:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c8c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c90:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c94:	39 d0                	cmp    eax,edx
10002c96:	0f 8d d2 00 00 00    	jge    10002d6e <ssfn_render+0x19eb>
10002c9c:	31 db                	xor    ebx,ebx
10002c9e:	85 c0                	test   eax,eax
10002ca0:	79 23                	jns    10002cc5 <ssfn_render+0x1942>
10002ca2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ca9:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cad:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002cb1:	25 fc ff 00 00       	and    eax,0xfffc
10002cb6:	01 c7                	add    edi,eax
10002cb8:	eb aa                	jmp    10002c64 <ssfn_render+0x18e1>
10002cba:	85 c0                	test   eax,eax
10002cbc:	79 20                	jns    10002cde <ssfn_render+0x195b>
10002cbe:	43                   	inc    ebx
10002cbf:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002cc3:	7c dd                	jl     10002ca2 <ssfn_render+0x191f>
10002cc5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ccc:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cd0:	01 d8                	add    eax,ebx
10002cd2:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002cd6:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002cda:	7c de                	jl     10002cba <ssfn_render+0x1937>
10002cdc:	eb c4                	jmp    10002ca2 <ssfn_render+0x191f>
10002cde:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002ce2:	7e 06                	jle    10002cea <ssfn_render+0x1967>
10002ce4:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002ce8:	7f d4                	jg     10002cbe <ssfn_render+0x193b>
10002cea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002ced:	b8 10 00 00 00       	mov    eax,0x10
10002cf2:	0f b6 f6             	movzx  esi,dh
10002cf5:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002cf9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002cfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d01:	89 d0                	mov    eax,edx
10002d03:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d07:	d3 e8                	shr    eax,cl
10002d09:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d0d:	0f b6 c0             	movzx  eax,al
10002d10:	d3 ea                	shr    edx,cl
10002d12:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002d16:	0f b6 f2             	movzx  esi,dl
10002d19:	29 c1                	sub    ecx,eax
10002d1b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d1f:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d24:	29 f2                	sub    edx,esi
10002d26:	c1 f9 08             	sar    ecx,0x8
10002d29:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d2e:	01 c8                	add    eax,ecx
10002d30:	c1 fa 08             	sar    edx,0x8
10002d33:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d37:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d3b:	d3 e0                	shl    eax,cl
10002d3d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d41:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d45:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d49:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d4d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d52:	d3 e6                	shl    esi,cl
10002d54:	c1 fa 08             	sar    edx,0x8
10002d57:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d5b:	c1 e2 08             	shl    edx,0x8
10002d5e:	09 d0                	or     eax,edx
10002d60:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d64:	09 c6                	or     esi,eax
10002d66:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d69:	e9 50 ff ff ff       	jmp    10002cbe <ssfn_render+0x193b>
10002d6e:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d75:	0f 84 80 01 00 00    	je     10002efb <ssfn_render+0x1b78>
10002d7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d83:	d1 fa                	sar    edx,1
10002d85:	40                   	inc    eax
10002d86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d8e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d92:	7e 09                	jle    10002d9d <ssfn_render+0x1a1a>
10002d94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d98:	40                   	inc    eax
10002d99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d9d:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002da4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002dab:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002daf:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002db3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002db7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dbb:	01 d0                	add    eax,edx
10002dbd:	0f af c1             	imul   eax,ecx
10002dc0:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002dc4:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002dc8:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002dcc:	03 03                	add    eax,DWORD PTR [ebx]
10002dce:	89 c7                	mov    edi,eax
10002dd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002dd4:	c1 e0 18             	shl    eax,0x18
10002dd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002ddb:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002de3:	01 d0                	add    eax,edx
10002de5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002de9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002df2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002df6:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002dfa:	0f 8e fb 00 00 00    	jle    10002efb <ssfn_render+0x1b78>
10002e00:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e07:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002e0b:	01 d8                	add    eax,ebx
10002e0d:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002e14:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002e18:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002e1c:	39 d0                	cmp    eax,edx
10002e1e:	0f 8d d7 00 00 00    	jge    10002efb <ssfn_render+0x1b78>
10002e24:	31 f6                	xor    esi,esi
10002e26:	85 c0                	test   eax,eax
10002e28:	0f 89 ad 00 00 00    	jns    10002edb <ssfn_render+0x1b58>
10002e2e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e35:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e39:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e3d:	25 fc ff 00 00       	and    eax,0xfffc
10002e42:	01 c7                	add    edi,eax
10002e44:	eb ac                	jmp    10002df2 <ssfn_render+0x1a6f>
10002e46:	85 c0                	test   eax,eax
10002e48:	0f 88 82 00 00 00    	js     10002ed0 <ssfn_render+0x1b4d>
10002e4e:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e51:	b8 10 00 00 00       	mov    eax,0x10
10002e56:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e5a:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e62:	89 d8                	mov    eax,ebx
10002e64:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e68:	d3 e8                	shr    eax,cl
10002e6a:	0f b6 cf             	movzx  ecx,bh
10002e6d:	0f b6 c0             	movzx  eax,al
10002e70:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e74:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e78:	d3 eb                	shr    ebx,cl
10002e7a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e7e:	0f b6 db             	movzx  ebx,bl
10002e81:	29 c1                	sub    ecx,eax
10002e83:	29 da                	sub    edx,ebx
10002e85:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e8a:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e8f:	c1 f9 08             	sar    ecx,0x8
10002e92:	c1 fa 08             	sar    edx,0x8
10002e95:	01 c8                	add    eax,ecx
10002e97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e9b:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e9f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002ea3:	d3 e0                	shl    eax,cl
10002ea5:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002ea9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002ead:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002eb2:	c1 fa 08             	sar    edx,0x8
10002eb5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002eb9:	c1 e2 08             	shl    edx,0x8
10002ebc:	09 d0                	or     eax,edx
10002ebe:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ec1:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002ec5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ec9:	d3 e2                	shl    edx,cl
10002ecb:	09 c2                	or     edx,eax
10002ecd:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002ed0:	46                   	inc    esi
10002ed1:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002ed5:	0f 8c 53 ff ff ff    	jl     10002e2e <ssfn_render+0x1aab>
10002edb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ee2:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002ee6:	01 f0                	add    eax,esi
10002ee8:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002eec:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ef0:	0f 8c 50 ff ff ff    	jl     10002e46 <ssfn_render+0x1ac3>
10002ef6:	e9 33 ff ff ff       	jmp    10002e2e <ssfn_render+0x1aab>
10002efb:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002f02:	74 04                	je     10002f08 <ssfn_render+0x1b85>
10002f04:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002f0c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002f10:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002f16:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f1d:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002f21:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f28:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f2b:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f2f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f35:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f39:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f3e:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f42:	99                   	cdq    
10002f43:	f7 f9                	idiv   ecx
10002f45:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f49:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f4f:	25 80 00 00 00       	and    eax,0x80
10002f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f58:	0f 85 f7 01 00 00    	jne    10003155 <ssfn_render+0x1dd2>
10002f5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f61:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f65:	0f 84 ea 01 00 00    	je     10003155 <ssfn_render+0x1dd2>
10002f6b:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f72:	83 ec 0c             	sub    esp,0xc
10002f75:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f7c:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f83:	51                   	push   ecx
10002f84:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f8b:	e8 53 d9 ff ff       	call   100008e3 <_ssfn_c>
10002f90:	83 c4 10             	add    esp,0x10
10002f93:	85 c0                	test   eax,eax
10002f95:	0f 84 ba 01 00 00    	je     10003155 <ssfn_render+0x1dd2>
10002f9b:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002fa3:	0f 86 ac 01 00 00    	jbe    10003155 <ssfn_render+0x1dd2>
10002fa9:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002faf:	8d 48 06             	lea    ecx,[eax+0x6]
10002fb2:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002fbc:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002fc0:	0f 8e 8f 01 00 00    	jle    10003155 <ssfn_render+0x1dd2>
10002fc6:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fc8:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fcc:	8a 18                	mov    bl,BYTE PTR [eax]
10002fce:	83 e3 40             	and    ebx,0x40
10002fd1:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fd6:	75 14                	jne    10002fec <ssfn_render+0x1c69>
10002fd8:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fdc:	75 0e                	jne    10002fec <ssfn_render+0x1c69>
10002fde:	80 fb 01             	cmp    bl,0x1
10002fe1:	19 c0                	sbb    eax,eax
10002fe3:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002fe7:	e9 60 01 00 00       	jmp    1000314c <ssfn_render+0x1dc9>
10002fec:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002ff0:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002ff4:	c1 e6 10             	shl    esi,0x10
10002ff7:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002ffb:	84 db                	test   bl,bl
10002ffd:	74 08                	je     10003007 <ssfn_render+0x1c84>
10002fff:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10003002:	83 c1 06             	add    ecx,0x6
10003005:	eb 0c                	jmp    10003013 <ssfn_render+0x1c90>
10003007:	c1 e2 08             	shl    edx,0x8
1000300a:	83 c1 05             	add    ecx,0x5
1000300d:	89 d0                	mov    eax,edx
1000300f:	09 f0                	or     eax,esi
10003011:	09 c7                	or     edi,eax
10003013:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003016:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000301a:	01 f8                	add    eax,edi
1000301c:	8a 10                	mov    dl,BYTE PTR [eax]
1000301e:	88 d3                	mov    bl,dl
10003020:	83 e3 e0             	and    ebx,0xffffffe0
10003023:	80 fb c0             	cmp    bl,0xc0
10003026:	0f 85 20 01 00 00    	jne    1000314c <ssfn_render+0x1dc9>
1000302c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10003030:	c1 e2 08             	shl    edx,0x8
10003033:	83 c0 02             	add    eax,0x2
10003036:	81 e2 00 1f 00 00    	and    edx,0x1f00
1000303c:	09 da                	or     edx,ebx
1000303e:	8d 72 01             	lea    esi,[edx+0x1]
10003041:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003045:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
1000304c:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10003050:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003055:	0f 84 f1 00 00 00    	je     1000314c <ssfn_render+0x1dc9>
1000305b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000305f:	0f b7 10             	movzx  edx,WORD PTR [eax]
10003062:	c1 e3 10             	shl    ebx,0x10
10003065:	81 e3 00 00 0f 00    	and    ebx,0xf0000
1000306b:	09 d3                	or     ebx,edx
1000306d:	39 de                	cmp    esi,ebx
1000306f:	0f 82 cf 00 00 00    	jb     10003144 <ssfn_render+0x1dc1>
10003075:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003078:	89 d7                	mov    edi,edx
1000307a:	c1 e7 10             	shl    edi,0x10
1000307d:	81 e7 00 00 0f 00    	and    edi,0xf0000
10003083:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003087:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
1000308b:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000308f:	39 fe                	cmp    esi,edi
10003091:	0f 87 ad 00 00 00    	ja     10003144 <ssfn_render+0x1dc1>
10003097:	29 de                	sub    esi,ebx
10003099:	c0 ea 04             	shr    dl,0x4
1000309c:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100030a3:	0f b6 d2             	movzx  edx,dl
100030a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100030aa:	89 d3                	mov    ebx,edx
100030ac:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100030b0:	c1 e3 10             	shl    ebx,0x10
100030b3:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100030b6:	09 da                	or     edx,ebx
100030b8:	c0 e8 04             	shr    al,0x4
100030bb:	c1 e0 18             	shl    eax,0x18
100030be:	09 c2                	or     edx,eax
100030c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030c4:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030c7:	01 c2                	add    edx,eax
100030c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030cc:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030d0:	39 d7                	cmp    edi,edx
100030d2:	76 78                	jbe    1000314c <ssfn_render+0x1dc9>
100030d4:	8a 1a                	mov    bl,BYTE PTR [edx]
100030d6:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030dd:	89 de                	mov    esi,ebx
100030df:	83 e6 7f             	and    esi,0x7f
100030e2:	39 c6                	cmp    esi,eax
100030e4:	73 1d                	jae    10003103 <ssfn_render+0x1d80>
100030e6:	48                   	dec    eax
100030e7:	bb 02 00 00 00       	mov    ebx,0x2
100030ec:	29 f0                	sub    eax,esi
100030ee:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030f8:	84 c0                	test   al,al
100030fa:	78 03                	js     100030ff <ssfn_render+0x1d7c>
100030fc:	8d 58 02             	lea    ebx,[eax+0x2]
100030ff:	01 da                	add    edx,ebx
10003101:	eb cd                	jmp    100030d0 <ssfn_render+0x1d4d>
10003103:	be 01 00 00 00       	mov    esi,0x1
10003108:	84 db                	test   bl,bl
1000310a:	78 03                	js     1000310f <ssfn_render+0x1d8c>
1000310c:	8d 70 01             	lea    esi,[eax+0x1]
1000310f:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003113:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003117:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000311c:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003120:	99                   	cdq    
10003121:	f7 fb                	idiv   ebx
10003123:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003128:	74 0d                	je     10003137 <ssfn_render+0x1db4>
1000312a:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003131:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003135:	eb 15                	jmp    1000314c <ssfn_render+0x1dc9>
10003137:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000313e:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
10003142:	eb 08                	jmp    1000314c <ssfn_render+0x1dc9>
10003144:	83 c0 08             	add    eax,0x8
10003147:	e9 00 ff ff ff       	jmp    1000304c <ssfn_render+0x1cc9>
1000314c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003150:	e9 5d fe ff ff       	jmp    10002fb2 <ssfn_render+0x1c2f>
10003155:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
1000315c:	eb 73                	jmp    100031d1 <ssfn_render+0x1e4e>
1000315e:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003169:	e9 50 e4 ff ff       	jmp    100015be <ssfn_render+0x23b>
1000316e:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003175:	57                   	push   edi
10003176:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000317d:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003184:	e8 5a d7 ff ff       	call   100008e3 <_ssfn_c>
10003189:	5f                   	pop    edi
1000318a:	85 c0                	test   eax,eax
1000318c:	0f 84 25 e4 ff ff    	je     100015b7 <ssfn_render+0x234>
10003192:	e9 a2 e4 ff ff       	jmp    10001639 <ssfn_render+0x2b6>
10003197:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000319a:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
1000319e:	75 0c                	jne    100031ac <ssfn_render+0x1e29>
100031a0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100031a7:	e9 3b e4 ff ff       	jmp    100015e7 <ssfn_render+0x264>
100031ac:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100031b3:	57                   	push   edi
100031b4:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100031bb:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100031c2:	e8 1c d7 ff ff       	call   100008e3 <_ssfn_c>
100031c7:	59                   	pop    ecx
100031c8:	85 c0                	test   eax,eax
100031ca:	74 d4                	je     100031a0 <ssfn_render+0x1e1d>
100031cc:	e9 68 e4 ff ff       	jmp    10001639 <ssfn_render+0x2b6>
100031d1:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031d7:	89 c8                	mov    eax,ecx
100031d9:	5b                   	pop    ebx
100031da:	5e                   	pop    esi
100031db:	5f                   	pop    edi
100031dc:	5d                   	pop    ebp
100031dd:	c3                   	ret    

100031de <ssfn_bbox>:
100031de:	55                   	push   ebp
100031df:	57                   	push   edi
100031e0:	56                   	push   esi
100031e1:	53                   	push   ebx
100031e2:	83 ec 3c             	sub    esp,0x3c
100031e5:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031ea:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031ee:	0f 94 c0             	sete   al
100031f1:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031f6:	0f 94 c2             	sete   dl
100031f9:	09 d0                	or     eax,edx
100031fb:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003200:	0f 94 c2             	sete   dl
10003203:	09 d0                	or     eax,edx
10003205:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000320a:	0f 94 c2             	sete   dl
1000320d:	09 d0                	or     eax,edx
1000320f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003214:	0f 94 c2             	sete   dl
10003217:	08 d0                	or     al,dl
10003219:	0f 85 7c 01 00 00    	jne    1000339b <ssfn_bbox+0x1bd>
1000321f:	85 db                	test   ebx,ebx
10003221:	0f 84 74 01 00 00    	je     1000339b <ssfn_bbox+0x1bd>
10003227:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000322b:	31 f6                	xor    esi,esi
1000322d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003233:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003237:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000323d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003241:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003247:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000324b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003251:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003255:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003258:	0f 84 42 01 00 00    	je     100033a0 <ssfn_bbox+0x1c2>
1000325e:	8d 54 24 18          	lea    edx,[esp+0x18]
10003262:	b9 06 00 00 00       	mov    ecx,0x6
10003267:	89 d7                	mov    edi,edx
10003269:	89 f0                	mov    eax,esi
1000326b:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003275:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000327f:	31 ff                	xor    edi,edi
10003281:	bd 01 00 00 00       	mov    ebp,0x1
10003286:	50                   	push   eax
10003287:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000328b:	8d 44 24 20          	lea    eax,[esp+0x20]
1000328f:	50                   	push   eax
10003290:	53                   	push   ebx
10003291:	e8 fc ff ff ff       	call   10003292 <ssfn_bbox+0xb4>	10003292: R_386_PC32	ssfn_render
10003296:	83 c4 10             	add    esp,0x10
10003299:	89 c6                	mov    esi,eax
1000329b:	85 c0                	test   eax,eax
1000329d:	74 6f                	je     1000330e <ssfn_bbox+0x130>
1000329f:	0f 88 fb 00 00 00    	js     100033a0 <ssfn_bbox+0x1c2>
100032a5:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032ab:	85 c0                	test   eax,eax
100032ad:	0f 84 ed 00 00 00    	je     100033a0 <ssfn_bbox+0x1c2>
100032b3:	85 ed                	test   ebp,ebp
100032b5:	74 0b                	je     100032c2 <ssfn_bbox+0xe4>
100032b7:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100032bd:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100032c2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032c6:	74 12                	je     100032da <ssfn_bbox+0xfc>
100032c8:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032ce:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032d2:	7d 2f                	jge    10003303 <ssfn_bbox+0x125>
100032d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032d8:	eb 29                	jmp    10003303 <ssfn_bbox+0x125>
100032da:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032dd:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032e2:	39 cd                	cmp    ebp,ecx
100032e4:	7d 05                	jge    100032eb <ssfn_bbox+0x10d>
100032e6:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032eb:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032ef:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032f4:	84 d2                	test   dl,dl
100032f6:	75 04                	jne    100032fc <ssfn_bbox+0x11e>
100032f8:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100032fc:	01 ca                	add    edx,ecx
100032fe:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003303:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003307:	31 ed                	xor    ebp,ebp
10003309:	e9 78 ff ff ff       	jmp    10003286 <ssfn_bbox+0xa8>
1000330e:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003315:	74 23                	je     1000333a <ssfn_bbox+0x15c>
10003317:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000331a:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000331e:	75 1a                	jne    1000333a <ssfn_bbox+0x15c>
10003320:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003326:	b9 04 00 00 00       	mov    ecx,0x4
1000332b:	99                   	cdq    
1000332c:	f7 f9                	idiv   ecx
1000332e:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003333:	29 f8                	sub    eax,edi
10003335:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000333a:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003340:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003344:	74 29                	je     1000336f <ssfn_bbox+0x191>
10003346:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000334b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000334f:	89 01                	mov    DWORD PTR [ecx],eax
10003351:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003355:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000335b:	89 01                	mov    DWORD PTR [ecx],eax
1000335d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003361:	89 38                	mov    DWORD PTR [eax],edi
10003363:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003367:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000336b:	89 38                	mov    DWORD PTR [eax],edi
1000336d:	eb 31                	jmp    100033a0 <ssfn_bbox+0x1c2>
1000336f:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003374:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003378:	89 07                	mov    DWORD PTR [edi],eax
1000337a:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000337f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
10003383:	89 07                	mov    DWORD PTR [edi],eax
10003385:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000338f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003393:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003399:	eb 05                	jmp    100033a0 <ssfn_bbox+0x1c2>
1000339b:	be fc ff ff ff       	mov    esi,0xfffffffc
100033a0:	83 c4 3c             	add    esp,0x3c
100033a3:	89 f0                	mov    eax,esi
100033a5:	5b                   	pop    ebx
100033a6:	5e                   	pop    esi
100033a7:	5f                   	pop    edi
100033a8:	5d                   	pop    ebp
100033a9:	c3                   	ret    

100033aa <ssfn_text>:
100033aa:	55                   	push   ebp
100033ab:	57                   	push   edi
100033ac:	56                   	push   esi
100033ad:	53                   	push   ebx
100033ae:	83 ec 1c             	sub    esp,0x1c
100033b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100033b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100033b9:	85 f6                	test   esi,esi
100033bb:	0f 84 b2 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033c1:	85 ed                	test   ebp,ebp
100033c3:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033c8:	0f 84 a5 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033ce:	83 ec 0c             	sub    esp,0xc
100033d1:	6a 18                	push   0x18
100033d3:	e8 fc ff ff ff       	call   100033d4 <ssfn_text+0x2a>	100033d4: R_386_PC32	malloc
100033d8:	83 c4 10             	add    esp,0x10
100033db:	89 c3                	mov    ebx,eax
100033dd:	85 c0                	test   eax,eax
100033df:	0f 84 8e 00 00 00    	je     10003473 <ssfn_text+0xc9>
100033e5:	31 c0                	xor    eax,eax
100033e7:	b9 06 00 00 00       	mov    ecx,0x6
100033ec:	89 df                	mov    edi,ebx
100033ee:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033fa:	74 79                	je     10003475 <ssfn_text+0xcb>
100033fc:	8d 43 0c             	lea    eax,[ebx+0xc]
100033ff:	52                   	push   edx
10003400:	52                   	push   edx
10003401:	50                   	push   eax
10003402:	8d 43 0a             	lea    eax,[ebx+0xa]
10003405:	50                   	push   eax
10003406:	8d 43 06             	lea    eax,[ebx+0x6]
10003409:	50                   	push   eax
1000340a:	8d 43 04             	lea    eax,[ebx+0x4]
1000340d:	50                   	push   eax
1000340e:	56                   	push   esi
1000340f:	55                   	push   ebp
10003410:	e8 fc ff ff ff       	call   10003411 <ssfn_text+0x67>	10003411: R_386_PC32	ssfn_bbox
10003415:	83 c4 20             	add    esp,0x20
10003418:	85 c0                	test   eax,eax
1000341a:	75 59                	jne    10003475 <ssfn_text+0xcb>
1000341c:	83 ec 0c             	sub    esp,0xc
1000341f:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003423:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003427:	0f af c8             	imul   ecx,eax
1000342a:	c1 e1 02             	shl    ecx,0x2
1000342d:	51                   	push   ecx
1000342e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003432:	e8 fc ff ff ff       	call   10003433 <ssfn_text+0x89>	10003433: R_386_PC32	malloc
10003437:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000343b:	89 c7                	mov    edi,eax
1000343d:	89 03                	mov    DWORD PTR [ebx],eax
1000343f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003443:	83 c4 10             	add    esp,0x10
10003446:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003448:	50                   	push   eax
10003449:	56                   	push   esi
1000344a:	53                   	push   ebx
1000344b:	55                   	push   ebp
1000344c:	e8 fc ff ff ff       	call   1000344d <ssfn_text+0xa3>	1000344d: R_386_PC32	ssfn_render
10003451:	83 c4 10             	add    esp,0x10
10003454:	85 c0                	test   eax,eax
10003456:	7e 04                	jle    1000345c <ssfn_text+0xb2>
10003458:	01 c6                	add    esi,eax
1000345a:	eb ec                	jmp    10003448 <ssfn_text+0x9e>
1000345c:	74 17                	je     10003475 <ssfn_text+0xcb>
1000345e:	83 ec 0c             	sub    esp,0xc
10003461:	ff 33                	push   DWORD PTR [ebx]
10003463:	e8 fc ff ff ff       	call   10003464 <ssfn_text+0xba>	10003464: R_386_PC32	free
10003468:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000346b:	e8 fc ff ff ff       	call   1000346c <ssfn_text+0xc2>	1000346c: R_386_PC32	free
10003470:	83 c4 10             	add    esp,0x10
10003473:	31 db                	xor    ebx,ebx
10003475:	83 c4 1c             	add    esp,0x1c
10003478:	89 d8                	mov    eax,ebx
1000347a:	5b                   	pop    ebx
1000347b:	5e                   	pop    esi
1000347c:	5f                   	pop    edi
1000347d:	5d                   	pop    ebp
1000347e:	c3                   	ret    
1000347f:	90                   	nop

10003480 <NIContext::drvPutpixel4(int, int, unsigned int)>:
10003480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003484:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000348a:	8b 10                	mov    edx,DWORD PTR [eax]
1000348c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003490:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
10003493:	90                   	nop

10003494 <NIContext::drvDarken4(int, int, int)>:
10003494:	55                   	push   ebp
10003495:	57                   	push   edi
10003496:	56                   	push   esi
10003497:	53                   	push   ebx
10003498:	83 ec 20             	sub    esp,0x20
1000349b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000349f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100034a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100034a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100034ab:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100034b1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100034b5:	8b 10                	mov    edx,DWORD PTR [eax]
100034b7:	56                   	push   esi
100034b8:	53                   	push   ebx
100034b9:	50                   	push   eax
100034ba:	ff 52 34             	call   DWORD PTR [edx+0x34]
100034bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100034c1:	89 c2                	mov    edx,eax
100034c3:	0f b6 ec             	movzx  ebp,ah
100034c6:	c1 ea 10             	shr    edx,0x10
100034c9:	0f af e9             	imul   ebp,ecx
100034cc:	0f b6 d2             	movzx  edx,dl
100034cf:	0f b6 c0             	movzx  eax,al
100034d2:	0f af d1             	imul   edx,ecx
100034d5:	0f af c1             	imul   eax,ecx
100034d8:	c1 ea 07             	shr    edx,0x7
100034db:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034e1:	c1 e8 07             	shr    eax,0x7
100034e4:	8b 39                	mov    edi,DWORD PTR [ecx]
100034e6:	c1 e2 10             	shl    edx,0x10
100034e9:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034ed:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034f1:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034f5:	c1 ed 07             	shr    ebp,0x7
100034f8:	c1 e5 08             	shl    ebp,0x8
100034fb:	09 ea                	or     edx,ebp
100034fd:	09 c2                	or     edx,eax
100034ff:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003503:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003506:	83 c4 2c             	add    esp,0x2c
10003509:	5b                   	pop    ebx
1000350a:	5e                   	pop    esi
1000350b:	5f                   	pop    edi
1000350c:	5d                   	pop    ebp
1000350d:	ff e0                	jmp    eax
1000350f:	90                   	nop

10003510 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003510:	55                   	push   ebp
10003511:	b9 00 40 00 00       	mov    ecx,0x4000
10003516:	57                   	push   edi
10003517:	b0 ff                	mov    al,0xff
10003519:	56                   	push   esi
1000351a:	53                   	push   ebx
1000351b:	83 ec 3c             	sub    esp,0x3c
1000351e:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003522:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003526:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003529:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
1000352d:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000352f:	85 db                	test   ebx,ebx
10003531:	75 10                	jne    10003543 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003533:	83 ec 0c             	sub    esp,0xc
10003536:	68 8e 51 00 10       	push   0x1000518e	10003537: R_386_32	.text
1000353b:	e8 fc ff ff ff       	call   1000353c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	1000353c: R_386_PC32	KePanic(char const*)
10003540:	83 c4 10             	add    esp,0x10
10003543:	50                   	push   eax
10003544:	50                   	push   eax
10003545:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003549:	50                   	push   eax
1000354a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000354e:	50                   	push   eax
1000354f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003553:	50                   	push   eax
10003554:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003558:	50                   	push   eax
10003559:	56                   	push   esi
1000355a:	68 00 00 00 00       	push   0x0	1000355b: R_386_32	ssfn_ctx
1000355f:	e8 fc ff ff ff       	call   10003560 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	10003560: R_386_PC32	ssfn_bbox
10003564:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003567:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
1000356f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003573:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
1000357b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000357f:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003584:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003588:	0d 00 00 00 ff       	or     eax,0xff000000
1000358d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003591:	83 c4 1c             	add    esp,0x1c
10003594:	56                   	push   esi
10003595:	8d 44 24 20          	lea    eax,[esp+0x20]
10003599:	50                   	push   eax
1000359a:	68 00 00 00 00       	push   0x0	1000359b: R_386_32	ssfn_ctx
1000359f:	e8 fc ff ff ff       	call   100035a0 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100035a0: R_386_PC32	ssfn_render
100035a4:	83 c4 10             	add    esp,0x10
100035a7:	89 03                	mov    DWORD PTR [ebx],eax
100035a9:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100035ad:	31 db                	xor    ebx,ebx
100035af:	89 f0                	mov    eax,esi
100035b1:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100035b5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100035b9:	7e 3f                	jle    100035fa <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100035bb:	31 ff                	xor    edi,edi
100035bd:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035c2:	39 f8                	cmp    eax,edi
100035c4:	7e 2c                	jle    100035f2 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035c9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035cc:	83 f8 ff             	cmp    eax,0xffffffff
100035cf:	74 1d                	je     100035ee <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035d1:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035d7:	25 ff ff ff 00       	and    eax,0xffffff
100035dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035de:	50                   	push   eax
100035df:	56                   	push   esi
100035e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035e4:	01 f8                	add    eax,edi
100035e6:	50                   	push   eax
100035e7:	52                   	push   edx
100035e8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035eb:	83 c4 10             	add    esp,0x10
100035ee:	43                   	inc    ebx
100035ef:	47                   	inc    edi
100035f0:	eb cb                	jmp    100035bd <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035f2:	29 c3                	sub    ebx,eax
100035f4:	46                   	inc    esi
100035f5:	83 c3 40             	add    ebx,0x40
100035f8:	eb b5                	jmp    100035af <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035fa:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035ff:	83 c4 3c             	add    esp,0x3c
10003602:	5b                   	pop    ebx
10003603:	5e                   	pop    esi
10003604:	5f                   	pop    edi
10003605:	5d                   	pop    ebp
10003606:	c3                   	ret    
10003607:	90                   	nop

10003608 <NIContext::~NIContext()>:
10003608:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000360c: R_386_32	ssfn_ctx
10003610:	e9 00 db ff ff       	jmp    10001115 <ssfn_free>
10003615:	90                   	nop

10003616 <NIContext::NIContext(Video*, int, int, int, int)>:
10003616:	55                   	push   ebp
10003617:	ba 00 00 00 00       	mov    edx,0x0	10003618: R_386_32	ssfn_ctx
1000361c:	57                   	push   edi
1000361d:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003622:	56                   	push   esi
10003623:	89 d7                	mov    edi,edx
10003625:	53                   	push   ebx
10003626:	81 ec 48 02 00 00    	sub    esp,0x248
1000362c:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003633:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000363a:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003640:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003647:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
1000364d:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003654:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
1000365a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
10003661:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003667:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
1000366e:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003674:	31 c0                	xor    eax,eax
10003676:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003678:	68 00 40 00 00       	push   0x4000
1000367d:	e8 fc ff ff ff       	call   1000367e <NIContext::NIContext(Video*, int, int, int, int)+0x68>	1000367e: R_386_PC32	malloc
10003682:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
1000368c:	89 03                	mov    DWORD PTR [ebx],eax
1000368e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003695:	e8 fc ff ff ff       	call   10003696 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	10003696: R_386_PC32	malloc
1000369a:	83 c4 0c             	add    esp,0xc
1000369d:	89 c6                	mov    esi,eax
1000369f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036a1: R_386_32	kernelProcess
100036a5:	68 a7 51 00 10       	push   0x100051a7	100036a6: R_386_32	.text
100036aa:	50                   	push   eax
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100036ac: R_386_PC32	Directory::Directory(char const*, Process*)
100036b0:	83 c4 10             	add    esp,0x10
100036b3:	85 f6                	test   esi,esi
100036b5:	75 10                	jne    100036c7 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100036b7:	83 ec 0c             	sub    esp,0xc
100036ba:	68 bb 51 00 10       	push   0x100051bb	100036bb: R_386_32	.text
100036bf:	e8 fc ff ff ff       	call   100036c0 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100036c0: R_386_PC32	KePanic(char const*)
100036c4:	83 c4 10             	add    esp,0x10
100036c7:	83 ec 0c             	sub    esp,0xc
100036ca:	56                   	push   esi
100036cb:	e8 fc ff ff ff       	call   100036cc <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036cc: R_386_PC32	Directory::open()
100036d0:	83 c4 10             	add    esp,0x10
100036d3:	85 c0                	test   eax,eax
100036d5:	75 e0                	jne    100036b7 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036d7:	83 ec 0c             	sub    esp,0xc
100036da:	8b 06                	mov    eax,DWORD PTR [esi]
100036dc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036e0:	51                   	push   ecx
100036e1:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036e8:	52                   	push   edx
100036e9:	6a 00                	push   0x0
100036eb:	68 10 01 00 00       	push   0x110
100036f0:	56                   	push   esi
100036f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036f4:	83 c4 20             	add    esp,0x20
100036f7:	85 c0                	test   eax,eax
100036f9:	0f 85 a0 01 00 00    	jne    1000389f <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036ff:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003707:	0f 85 92 01 00 00    	jne    1000389f <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000370d:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003714:	83 c9 ff             	or     ecx,0xffffffff
10003717:	83 ec 0c             	sub    esp,0xc
1000371a:	89 ef                	mov    edi,ebp
1000371c:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000371e:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003724:	89 ca                	mov    edx,ecx
10003726:	f7 d2                	not    edx
10003728:	52                   	push   edx
10003729:	e8 fc ff ff ff       	call   1000372a <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000372a: R_386_PC32	malloc
1000372e:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003732:	47                   	inc    edi
10003733:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003739:	5a                   	pop    edx
1000373a:	59                   	pop    ecx
1000373b:	55                   	push   ebp
1000373c:	50                   	push   eax
1000373d:	e8 fc ff ff ff       	call   1000373e <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000373e: R_386_PC32	strcpy
10003742:	5f                   	pop    edi
10003743:	58                   	pop    eax
10003744:	68 d6 51 00 10       	push   0x100051d6	10003745: R_386_32	.text
10003749:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
1000374d:	57                   	push   edi
1000374e:	e8 fc ff ff ff       	call   1000374f <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000374f: R_386_PC32	strcpy
10003753:	58                   	pop    eax
10003754:	5a                   	pop    edx
10003755:	55                   	push   ebp
10003756:	57                   	push   edi
10003757:	e8 fc ff ff ff       	call   10003758 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003758: R_386_PC32	strcat
1000375c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003763:	e8 fc ff ff ff       	call   10003764 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003764: R_386_PC32	malloc
10003768:	83 c4 0c             	add    esp,0xc
1000376b:	89 c5                	mov    ebp,eax
1000376d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000376f: R_386_32	kernelProcess
10003773:	57                   	push   edi
10003774:	50                   	push   eax
10003775:	e8 fc ff ff ff       	call   10003776 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003776: R_386_PC32	File::File(char const*, Process*)
1000377a:	83 c4 10             	add    esp,0x10
1000377d:	85 ed                	test   ebp,ebp
1000377f:	0f 84 52 ff ff ff    	je     100036d7 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003785:	50                   	push   eax
10003786:	50                   	push   eax
10003787:	6a 01                	push   0x1
10003789:	55                   	push   ebp
1000378a:	e8 fc ff ff ff       	call   1000378b <NIContext::NIContext(Video*, int, int, int, int)+0x175>	1000378b: R_386_PC32	File::open(FileOpenMode)
1000378f:	83 c4 10             	add    esp,0x10
10003792:	85 c0                	test   eax,eax
10003794:	74 0c                	je     100037a2 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
10003796:	83 ec 0c             	sub    esp,0xc
10003799:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000379c:	55                   	push   ebp
1000379d:	e9 b4 00 00 00       	jmp    10003856 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100037a2:	50                   	push   eax
100037a3:	8d 44 24 17          	lea    eax,[esp+0x17]
100037a7:	50                   	push   eax
100037a8:	8d 44 24 20          	lea    eax,[esp+0x20]
100037ac:	50                   	push   eax
100037ad:	55                   	push   ebp
100037ae:	e8 fc ff ff ff       	call   100037af <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100037af: R_386_PC32	File::stat(unsigned long long*, bool*)
100037b3:	83 c4 10             	add    esp,0x10
100037b6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100037bb:	74 0e                	je     100037cb <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100037bd:	83 ec 0c             	sub    esp,0xc
100037c0:	55                   	push   ebp
100037c1:	e8 fc ff ff ff       	call   100037c2 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100037c2: R_386_PC32	File::close()
100037c6:	e9 85 00 00 00       	jmp    10003850 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037db:	83 ec 0c             	sub    esp,0xc
100037de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037e2:	e8 fc ff ff ff       	call   100037e3 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037e3: R_386_PC32	malloc
100037e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037eb:	58                   	pop    eax
100037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037ef:	8d 54 24 20          	lea    edx,[esp+0x20]
100037f3:	52                   	push   edx
100037f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003800:	55                   	push   ebp
10003801:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003804:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003808:	83 c4 1c             	add    esp,0x1c
1000380b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000380f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003813:	68 eb 51 00 10       	push   0x100051eb	10003814: R_386_32	.text
10003818:	e8 fc ff ff ff       	call   10003819 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003819: R_386_PC32	Dbg::kprintf(char const*, ...)
1000381d:	83 c4 10             	add    esp,0x10
10003820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003824:	85 c0                	test   eax,eax
10003826:	75 15                	jne    1000383d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000382c:	89 c1                	mov    ecx,eax
1000382e:	c1 f9 1f             	sar    ecx,0x1f
10003831:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003835:	75 06                	jne    1000383d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003837:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000383b:	74 24                	je     10003861 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
1000383d:	83 ec 0c             	sub    esp,0xc
10003840:	55                   	push   ebp
10003841:	e8 fc ff ff ff       	call   10003842 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003842: R_386_PC32	File::close()
10003846:	58                   	pop    eax
10003847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000384b:	e8 fc ff ff ff       	call   1000384c <NIContext::NIContext(Video*, int, int, int, int)+0x236>	1000384c: R_386_PC32	free
10003850:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003853:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003856:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003859:	83 c4 10             	add    esp,0x10
1000385c:	e9 76 fe ff ff       	jmp    100036d7 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003861:	50                   	push   eax
10003862:	50                   	push   eax
10003863:	57                   	push   edi
10003864:	68 ff 51 00 10       	push   0x100051ff	10003865: R_386_32	.text
10003869:	e8 fc ff ff ff       	call   1000386a <NIContext::NIContext(Video*, int, int, int, int)+0x254>	1000386a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000386e:	5a                   	pop    edx
1000386f:	59                   	pop    ecx
10003870:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003874:	68 00 00 00 00       	push   0x0	10003875: R_386_32	ssfn_ctx
10003879:	e8 fc ff ff ff       	call   1000387a <NIContext::NIContext(Video*, int, int, int, int)+0x264>	1000387a: R_386_PC32	ssfn_load
1000387e:	5b                   	pop    ebx
1000387f:	5f                   	pop    edi
10003880:	50                   	push   eax
10003881:	68 10 52 00 10       	push   0x10005210	10003882: R_386_32	.text
10003886:	e8 fc ff ff ff       	call   10003887 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003887: R_386_PC32	Dbg::kprintf(char const*, ...)
1000388b:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000388e:	e8 fc ff ff ff       	call   1000388f <NIContext::NIContext(Video*, int, int, int, int)+0x279>	1000388f: R_386_PC32	File::close()
10003893:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003896:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003899:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000389c:	83 c4 10             	add    esp,0x10
1000389f:	83 ec 0c             	sub    esp,0xc
100038a2:	56                   	push   esi
100038a3:	e8 fc ff ff ff       	call   100038a4 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100038a4: R_386_PC32	Directory::close()
100038a8:	8b 06                	mov    eax,DWORD PTR [esi]
100038aa:	89 34 24             	mov    DWORD PTR [esp],esi
100038ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038b0:	b8 00 00 00 00       	mov    eax,0x0	100038b1: R_386_32	ssfn_ctx
100038b5:	e8 f7 cb ff ff       	call   100004b1 <_ssfn_fc.part.1>
100038ba:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100038bc: R_386_32	ssfn_ctx
100038c4:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038c6: R_386_32	ssfn_ctx
100038ce:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038d0: R_386_32	ssfn_ctx
100038d8:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038da: R_386_32	ssfn_ctx
100038e2:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038e4: R_386_32	ssfn_ctx
100038ec:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038ee: R_386_32	ssfn_ctx
100038f6:	81 c4 4c 02 00 00    	add    esp,0x24c
100038fc:	5b                   	pop    ebx
100038fd:	5e                   	pop    esi
100038fe:	5f                   	pop    edi
100038ff:	5d                   	pop    ebp
10003900:	c3                   	ret    
10003901:	90                   	nop

10003902 <NiLoadCursors()>:
10003902:	55                   	push   ebp
10003903:	57                   	push   edi
10003904:	56                   	push   esi
10003905:	53                   	push   ebx
10003906:	83 ec 38             	sub    esp,0x38
10003909:	68 14 01 00 00       	push   0x114
1000390e:	e8 fc ff ff ff       	call   1000390f <NiLoadCursors()+0xd>	1000390f: R_386_PC32	malloc
10003913:	83 c4 0c             	add    esp,0xc
10003916:	89 c5                	mov    ebp,eax
10003918:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000391a: R_386_32	kernelProcess
1000391e:	68 bc 54 00 10       	push   0x100054bc	1000391f: R_386_32	.text
10003923:	50                   	push   eax
10003924:	e8 fc ff ff ff       	call   10003925 <NiLoadCursors()+0x23>	10003925: R_386_PC32	File::File(char const*, Process*)
10003929:	58                   	pop    eax
1000392a:	5a                   	pop    edx
1000392b:	6a 01                	push   0x1
1000392d:	55                   	push   ebp
1000392e:	e8 fc ff ff ff       	call   1000392f <NiLoadCursors()+0x2d>	1000392f: R_386_PC32	File::open(FileOpenMode)
10003933:	83 c4 10             	add    esp,0x10
10003936:	85 c0                	test   eax,eax
10003938:	74 0a                	je     10003944 <NiLoadCursors()+0x42>
1000393a:	83 ec 0c             	sub    esp,0xc
1000393d:	68 db 54 00 10       	push   0x100054db	1000393e: R_386_32	.text
10003942:	eb 4c                	jmp    10003990 <NiLoadCursors()+0x8e>
10003944:	53                   	push   ebx
10003945:	8d 44 24 17          	lea    eax,[esp+0x17]
10003949:	50                   	push   eax
1000394a:	8d 44 24 20          	lea    eax,[esp+0x20]
1000394e:	50                   	push   eax
1000394f:	55                   	push   ebp
10003950:	e8 fc ff ff ff       	call   10003951 <NiLoadCursors()+0x4f>	10003951: R_386_PC32	File::stat(unsigned long long*, bool*)
10003955:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003959:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000395d:	89 34 24             	mov    DWORD PTR [esp],esi
10003960:	e8 fc ff ff ff       	call   10003961 <NiLoadCursors()+0x5f>	10003961: R_386_PC32	malloc
10003965:	89 c3                	mov    ebx,eax
10003967:	58                   	pop    eax
10003968:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000396b:	8d 54 24 20          	lea    edx,[esp+0x20]
1000396f:	52                   	push   edx
10003970:	53                   	push   ebx
10003971:	57                   	push   edi
10003972:	56                   	push   esi
10003973:	55                   	push   ebp
10003974:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003977:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000397b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
1000397f:	83 c4 20             	add    esp,0x20
10003982:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003986:	74 12                	je     1000399a <NiLoadCursors()+0x98>
10003988:	83 ec 0c             	sub    esp,0xc
1000398b:	68 ef 54 00 10       	push   0x100054ef	1000398c: R_386_32	.text
10003990:	e8 fc ff ff ff       	call   10003991 <NiLoadCursors()+0x8f>	10003991: R_386_PC32	Dbg::kprintf(char const*, ...)
10003995:	e9 3d 01 00 00       	jmp    10003ad7 <NiLoadCursors()+0x1d5>
1000399a:	6a 00                	push   0x0
1000399c:	31 ed                	xor    ebp,ebp
1000399e:	68 04 01 00 00       	push   0x104
100039a3:	52                   	push   edx
100039a4:	50                   	push   eax
100039a5:	e8 fc ff ff ff       	call   100039a6 <NiLoadCursors()+0xa4>	100039a6: R_386_PC32	__udivdi3
100039aa:	5a                   	pop    edx
100039ab:	59                   	pop    ecx
100039ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100039b0:	50                   	push   eax
100039b1:	68 03 55 00 10       	push   0x10005503	100039b2: R_386_32	.text
100039b6:	e8 fc ff ff ff       	call   100039b7 <NiLoadCursors()+0xb5>	100039b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100039bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
100039be:	e8 fc ff ff ff       	call   100039bf <NiLoadCursors()+0xbd>	100039bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100039c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100039c7:	8d 04 83             	lea    eax,[ebx+eax*4]
100039ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100039ce:	83 c4 10             	add    esp,0x10
100039d1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100039d5:	0f 8d f3 00 00 00    	jge    10003ace <NiLoadCursors()+0x1cc>
100039db:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039de:	50                   	push   eax
100039df:	6a 04                	push   0x4
100039e1:	68 10 55 00 10       	push   0x10005510	100039e2: R_386_32	.text
100039e6:	56                   	push   esi
100039e7:	e8 fc ff ff ff       	call   100039e8 <NiLoadCursors()+0xe6>	100039e8: R_386_PC32	memcmp
100039ec:	83 c4 10             	add    esp,0x10
100039ef:	85 c0                	test   eax,eax
100039f1:	0f 84 b8 00 00 00    	je     10003aaf <NiLoadCursors()+0x1ad>
100039f7:	50                   	push   eax
100039f8:	6a 04                	push   0x4
100039fa:	68 15 55 00 10       	push   0x10005515	100039fb: R_386_32	.text
100039ff:	56                   	push   esi
10003a00:	e8 fc ff ff ff       	call   10003a01 <NiLoadCursors()+0xff>	10003a01: R_386_PC32	memcmp
10003a05:	83 c4 10             	add    esp,0x10
10003a08:	85 c0                	test   eax,eax
10003a0a:	74 7b                	je     10003a87 <NiLoadCursors()+0x185>
10003a0c:	50                   	push   eax
10003a0d:	6a 04                	push   0x4
10003a0f:	68 1a 55 00 10       	push   0x1000551a	10003a10: R_386_32	.text
10003a14:	56                   	push   esi
10003a15:	e8 fc ff ff ff       	call   10003a16 <NiLoadCursors()+0x114>	10003a16: R_386_PC32	memcmp
10003a1a:	83 c4 10             	add    esp,0x10
10003a1d:	85 c0                	test   eax,eax
10003a1f:	74 6d                	je     10003a8e <NiLoadCursors()+0x18c>
10003a21:	57                   	push   edi
10003a22:	6a 04                	push   0x4
10003a24:	68 1f 55 00 10       	push   0x1000551f	10003a25: R_386_32	.text
10003a29:	56                   	push   esi
10003a2a:	e8 fc ff ff ff       	call   10003a2b <NiLoadCursors()+0x129>	10003a2b: R_386_PC32	memcmp
10003a2f:	83 c4 10             	add    esp,0x10
10003a32:	85 c0                	test   eax,eax
10003a34:	74 5f                	je     10003a95 <NiLoadCursors()+0x193>
10003a36:	51                   	push   ecx
10003a37:	6a 04                	push   0x4
10003a39:	68 24 55 00 10       	push   0x10005524	10003a3a: R_386_32	.text
10003a3e:	56                   	push   esi
10003a3f:	e8 fc ff ff ff       	call   10003a40 <NiLoadCursors()+0x13e>	10003a40: R_386_PC32	memcmp
10003a44:	83 c4 10             	add    esp,0x10
10003a47:	85 c0                	test   eax,eax
10003a49:	74 51                	je     10003a9c <NiLoadCursors()+0x19a>
10003a4b:	52                   	push   edx
10003a4c:	6a 04                	push   0x4
10003a4e:	68 29 55 00 10       	push   0x10005529	10003a4f: R_386_32	.text
10003a53:	56                   	push   esi
10003a54:	e8 fc ff ff ff       	call   10003a55 <NiLoadCursors()+0x153>	10003a55: R_386_PC32	memcmp
10003a59:	83 c4 10             	add    esp,0x10
10003a5c:	85 c0                	test   eax,eax
10003a5e:	74 43                	je     10003aa3 <NiLoadCursors()+0x1a1>
10003a60:	50                   	push   eax
10003a61:	6a 04                	push   0x4
10003a63:	68 2e 55 00 10       	push   0x1000552e	10003a64: R_386_32	.text
10003a68:	56                   	push   esi
10003a69:	e8 fc ff ff ff       	call   10003a6a <NiLoadCursors()+0x168>	10003a6a: R_386_PC32	memcmp
10003a6e:	83 c4 10             	add    esp,0x10
10003a71:	85 c0                	test   eax,eax
10003a73:	74 35                	je     10003aaa <NiLoadCursors()+0x1a8>
10003a75:	83 ec 0c             	sub    esp,0xc
10003a78:	68 33 55 00 10       	push   0x10005533	10003a79: R_386_32	.text
10003a7d:	e8 fc ff ff ff       	call   10003a7e <NiLoadCursors()+0x17c>	10003a7e: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a82:	83 c4 10             	add    esp,0x10
10003a85:	eb 47                	jmp    10003ace <NiLoadCursors()+0x1cc>
10003a87:	b8 00 02 00 00       	mov    eax,0x200
10003a8c:	eb 21                	jmp    10003aaf <NiLoadCursors()+0x1ad>
10003a8e:	b8 00 03 00 00       	mov    eax,0x300
10003a93:	eb 1a                	jmp    10003aaf <NiLoadCursors()+0x1ad>
10003a95:	b8 00 01 00 00       	mov    eax,0x100
10003a9a:	eb 13                	jmp    10003aaf <NiLoadCursors()+0x1ad>
10003a9c:	b8 00 04 00 00       	mov    eax,0x400
10003aa1:	eb 0c                	jmp    10003aaf <NiLoadCursors()+0x1ad>
10003aa3:	b8 00 05 00 00       	mov    eax,0x500
10003aa8:	eb 05                	jmp    10003aaf <NiLoadCursors()+0x1ad>
10003aaa:	b8 00 06 00 00       	mov    eax,0x600
10003aaf:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003ab1: R_386_32	___mouse_data
10003ab5:	b9 00 01 00 00       	mov    ecx,0x100
10003aba:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003abe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003ac0:	45                   	inc    ebp
10003ac1:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003ac9:	e9 03 ff ff ff       	jmp    100039d1 <NiLoadCursors()+0xcf>
10003ace:	83 ec 0c             	sub    esp,0xc
10003ad1:	53                   	push   ebx
10003ad2:	e8 fc ff ff ff       	call   10003ad3 <NiLoadCursors()+0x1d1>	10003ad3: R_386_PC32	free
10003ad7:	83 c4 10             	add    esp,0x10
10003ada:	83 c4 2c             	add    esp,0x2c
10003add:	5b                   	pop    ebx
10003ade:	5e                   	pop    esi
10003adf:	5f                   	pop    edi
10003ae0:	5d                   	pop    ebp
10003ae1:	c3                   	ret    

10003ae2 <NIDesktop::NIDesktop(NIContext*)>:
10003ae2:	53                   	push   ebx
10003ae3:	83 ec 14             	sub    esp,0x14
10003ae6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003aee:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003af5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003af8:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003aff:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003b06:	6a 08                	push   0x8
10003b08:	e8 fc ff ff ff       	call   10003b09 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003b09: R_386_PC32	malloc
10003b0d:	89 03                	mov    DWORD PTR [ebx],eax
10003b0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003b16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003b1c:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003b1e: R_386_32	mouseDesktop
10003b22:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b24: R_386_32	guiMouseHandler
	10003b28: R_386_32	NiHandleMouse(int, int, int, int)
10003b2c:	83 c4 18             	add    esp,0x18
10003b2f:	5b                   	pop    ebx
10003b30:	c3                   	ret    
10003b31:	90                   	nop

10003b32 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b32:	53                   	push   ebx
10003b33:	83 ec 08             	sub    esp,0x8
10003b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b3a:	8b 00                	mov    eax,DWORD PTR [eax]
10003b3c:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b3e:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b42:	74 1d                	je     10003b61 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b44:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b46:	85 c0                	test   eax,eax
10003b48:	74 12                	je     10003b5c <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b4a:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b4e:	74 0c                	je     10003b5c <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b50:	83 ec 0c             	sub    esp,0xc
10003b53:	50                   	push   eax
10003b54:	e8 fc ff ff ff       	call   10003b55 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b55: R_386_PC32	NIWindow::invalidate()
10003b59:	83 c4 10             	add    esp,0x10
10003b5c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b5f:	eb dd                	jmp    10003b3e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b61:	83 c4 08             	add    esp,0x8
10003b64:	5b                   	pop    ebx
10003b65:	c3                   	ret    

10003b66 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b66:	57                   	push   edi
10003b67:	56                   	push   esi
10003b68:	53                   	push   ebx
10003b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b6d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b71:	8b 00                	mov    eax,DWORD PTR [eax]
10003b73:	8b 00                	mov    eax,DWORD PTR [eax]
10003b75:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b78:	85 db                	test   ebx,ebx
10003b7a:	74 43                	je     10003bbf <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b7c:	8b 00                	mov    eax,DWORD PTR [eax]
10003b7e:	85 c0                	test   eax,eax
10003b80:	74 3f                	je     10003bc1 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b82:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b85:	39 ca                	cmp    edx,ecx
10003b87:	7e 04                	jle    10003b8d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b89:	89 d8                	mov    eax,ebx
10003b8b:	eb e8                	jmp    10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b8d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b90:	01 d6                	add    esi,edx
10003b92:	39 ce                	cmp    esi,ecx
10003b94:	7e f3                	jle    10003b89 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b96:	89 ce                	mov    esi,ecx
10003b98:	29 d6                	sub    esi,edx
10003b9a:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003b9d:	8d 34 b2             	lea    esi,[edx+esi*4]
10003ba0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003ba3:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003ba6:	01 d7                	add    edi,edx
10003ba8:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003bac:	7f db                	jg     10003b89 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bae:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003bb1:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003bb5:	29 f2                	sub    edx,esi
10003bb7:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003bbb:	7e cc                	jle    10003b89 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bbd:	eb 02                	jmp    10003bc1 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003bbf:	31 c0                	xor    eax,eax
10003bc1:	5b                   	pop    ebx
10003bc2:	5e                   	pop    esi
10003bc3:	5f                   	pop    edi
10003bc4:	c3                   	ret    
10003bc5:	90                   	nop

10003bc6 <NIDesktop::renderScanline(int, int, int)>:
10003bc6:	55                   	push   ebp
10003bc7:	57                   	push   edi
10003bc8:	56                   	push   esi
10003bc9:	53                   	push   ebx
10003bca:	83 ec 2c             	sub    esp,0x2c
10003bcd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bd1:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003bd9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003be1:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003be3: R_386_32	render
10003be7:	31 c0                	xor    eax,eax
10003be9:	89 d7                	mov    edi,edx
10003beb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bf5:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bf7: R_386_32	shadow
10003bfb:	b0 80                	mov    al,0x80
10003bfd:	89 d7                	mov    edi,edx
10003bff:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003c05:	8b 00                	mov    eax,DWORD PTR [eax]
10003c07:	8b 00                	mov    eax,DWORD PTR [eax]
10003c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003c11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003c15:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003c17: R_386_32	movingWin
10003c1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c22:	85 c0                	test   eax,eax
10003c24:	75 09                	jne    10003c2f <NIDesktop::renderScanline(int, int, int)+0x69>
10003c26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c2a:	e9 cf 02 00 00       	jmp    10003efe <NIDesktop::renderScanline(int, int, int)+0x338>
10003c2f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c33:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c35:	85 db                	test   ebx,ebx
10003c37:	74 ed                	je     10003c26 <NIDesktop::renderScanline(int, int, int)+0x60>
10003c39:	39 da                	cmp    edx,ebx
10003c3b:	75 06                	jne    10003c43 <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c41:	eb d8                	jmp    10003c1b <NIDesktop::renderScanline(int, int, int)+0x55>
10003c43:	83 ec 0c             	sub    esp,0xc
10003c46:	53                   	push   ebx
10003c47:	e8 fc ff ff ff       	call   10003c48 <NIDesktop::renderScanline(int, int, int)+0x82>	10003c48: R_386_PC32	NIWindow::request()
10003c4c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c4f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c52:	83 c4 10             	add    esp,0x10
10003c55:	01 c2                	add    edx,eax
10003c57:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c5b:	0f 8e ad 00 00 00    	jle    10003d0e <NIDesktop::renderScanline(int, int, int)+0x148>
10003c61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c65:	0f 85 a3 00 00 00    	jne    10003d0e <NIDesktop::renderScanline(int, int, int)+0x148>
10003c6b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c6f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c72:	83 c0 06             	add    eax,0x6
10003c75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c79:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c7f:	01 c8                	add    eax,ecx
10003c81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c85:	39 d0                	cmp    eax,edx
10003c87:	0f 8e 40 01 00 00    	jle    10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003c8d:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c91:	7c 75                	jl     10003d08 <NIDesktop::renderScanline(int, int, int)+0x142>
10003c93:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003c97:	0f 8f 30 01 00 00    	jg     10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003c9d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003ca0:	89 d5                	mov    ebp,edx
10003ca2:	6b fe fc             	imul   edi,esi,0xfffffffc
10003ca5:	29 cd                	sub    ebp,ecx
10003ca7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003cab:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003caf:	39 f0                	cmp    eax,esi
10003cb1:	7c 1d                	jl     10003cd0 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cb3:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003cb6:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003cb9:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003cbc:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003cc0:	7f 0e                	jg     10003cd0 <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cc2:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003cc6:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003cca:	29 cd                	sub    ebp,ecx
10003ccc:	39 d5                	cmp    ebp,edx
10003cce:	7d 07                	jge    10003cd7 <NIDesktop::renderScanline(int, int, int)+0x111>
10003cd0:	40                   	inc    eax
10003cd1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003cd5:	75 d8                	jne    10003caf <NIDesktop::renderScanline(int, int, int)+0xe9>
10003cd7:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003cdb:	48                   	dec    eax
10003cdc:	83 f8 03             	cmp    eax,0x3
10003cdf:	77 27                	ja     10003d08 <NIDesktop::renderScanline(int, int, int)+0x142>
10003ce1:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003ce3: R_386_32	render
10003ce8:	75 1e                	jne    10003d08 <NIDesktop::renderScanline(int, int, int)+0x142>
10003cea:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003cf1:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003cf4: R_386_32	shadow
10003cf8:	0f af c1             	imul   eax,ecx
10003cfb:	d1 f9                	sar    ecx,1
10003cfd:	c1 f8 08             	sar    eax,0x8
10003d00:	01 c1                	add    ecx,eax
10003d02:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003d04: R_386_32	shadow
10003d08:	42                   	inc    edx
10003d09:	e9 6b ff ff ff       	jmp    10003c79 <NIDesktop::renderScanline(int, int, int)+0xb3>
10003d0e:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d12:	0f 8d b5 00 00 00    	jge    10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003d18:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003d1c:	0f 85 ab 00 00 00    	jne    10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003d22:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003d29:	8d 77 fa             	lea    esi,[edi-0x6]
10003d2c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003d30:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003d33:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003d36:	01 ce                	add    esi,ecx
10003d38:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003d3c:	39 c6                	cmp    esi,eax
10003d3e:	0f 8e 89 00 00 00    	jle    10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003d44:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003d48:	7c 7d                	jl     10003dc7 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d4a:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d4e:	7f 7d                	jg     10003dcd <NIDesktop::renderScanline(int, int, int)+0x207>
10003d50:	89 c7                	mov    edi,eax
10003d52:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d56:	29 cf                	sub    edi,ecx
10003d58:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d5c:	4a                   	dec    edx
10003d5d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d61:	29 d1                	sub    ecx,edx
10003d63:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d67:	74 32                	je     10003d9b <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d69:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d6c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d6f:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d72:	39 d5                	cmp    ebp,edx
10003d74:	7e e6                	jle    10003d5c <NIDesktop::renderScanline(int, int, int)+0x196>
10003d76:	89 d5                	mov    ebp,edx
10003d78:	29 fd                	sub    ebp,edi
10003d7a:	39 ee                	cmp    esi,ebp
10003d7c:	7e 1d                	jle    10003d9b <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d7e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d81:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d84:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d87:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d8b:	7f cf                	jg     10003d5c <NIDesktop::renderScanline(int, int, int)+0x196>
10003d8d:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d91:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003d95:	29 f7                	sub    edi,esi
10003d97:	39 c7                	cmp    edi,eax
10003d99:	7c c1                	jl     10003d5c <NIDesktop::renderScanline(int, int, int)+0x196>
10003d9b:	83 f9 04             	cmp    ecx,0x4
10003d9e:	77 27                	ja     10003dc7 <NIDesktop::renderScanline(int, int, int)+0x201>
10003da0:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003da2: R_386_32	render
10003da7:	75 1e                	jne    10003dc7 <NIDesktop::renderScanline(int, int, int)+0x201>
10003da9:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003db0:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003db3: R_386_32	shadow
10003db7:	0f af d1             	imul   edx,ecx
10003dba:	d1 f9                	sar    ecx,1
10003dbc:	c1 fa 08             	sar    edx,0x8
10003dbf:	01 d1                	add    ecx,edx
10003dc1:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003dc3: R_386_32	shadow
10003dc7:	40                   	inc    eax
10003dc8:	e9 63 ff ff ff       	jmp    10003d30 <NIDesktop::renderScanline(int, int, int)+0x16a>
10003dcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003dd0:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003dd4:	0f 8f 00 01 00 00    	jg     10003eda <NIDesktop::renderScanline(int, int, int)+0x314>
10003dda:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003ddd:	01 c2                	add    edx,eax
10003ddf:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003de3:	0f 8e f1 00 00 00    	jle    10003eda <NIDesktop::renderScanline(int, int, int)+0x314>
10003de9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003ded:	29 c2                	sub    edx,eax
10003def:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003df2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003df6:	8d 14 90             	lea    edx,[eax+edx*4]
10003df9:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003dfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e00:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003e04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003e08:	74 09                	je     10003e13 <NIDesktop::renderScanline(int, int, int)+0x24d>
10003e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e0e:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003e11:	eb 78                	jmp    10003e8b <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003e13:	31 c9                	xor    ecx,ecx
10003e15:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e1c:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003e20:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003e23:	01 cd                	add    ebp,ecx
10003e25:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e29:	01 ca                	add    edx,ecx
10003e2b:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003e2d: R_386_32	render
10003e32:	75 1f                	jne    10003e53 <NIDesktop::renderScanline(int, int, int)+0x28d>
10003e34:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003e37: R_386_32	shadow
10003e3b:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003e3e:	83 c7 7d             	add    edi,0x7d
10003e41:	0f af f7             	imul   esi,edi
10003e44:	d1 ff                	sar    edi,1
10003e46:	c1 fe 08             	sar    esi,0x8
10003e49:	01 f7                	add    edi,esi
10003e4b:	89 f8                	mov    eax,edi
10003e4d:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e4f: R_386_32	shadow
10003e53:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e55: R_386_32	render
10003e5a:	75 20                	jne    10003e7c <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e5c:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e63:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e66: R_386_32	shadow
10003e6a:	0f af f7             	imul   esi,edi
10003e6d:	d1 ff                	sar    edi,1
10003e6f:	c1 fe 08             	sar    esi,0x8
10003e72:	01 f7                	add    edi,esi
10003e74:	89 f8                	mov    eax,edi
10003e76:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e78: R_386_32	shadow
10003e7c:	41                   	inc    ecx
10003e7d:	83 f9 04             	cmp    ecx,0x4
10003e80:	75 93                	jne    10003e15 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e82:	eb 86                	jmp    10003e0a <NIDesktop::renderScanline(int, int, int)+0x244>
10003e84:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e88:	7d 11                	jge    10003e9b <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e8a:	40                   	inc    eax
10003e8b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e8e:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e91:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e95:	39 c2                	cmp    edx,eax
10003e97:	7f eb                	jg     10003e84 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003e99:	eb 3f                	jmp    10003eda <NIDesktop::renderScanline(int, int, int)+0x314>
10003e9b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003e9f:	7f 39                	jg     10003eda <NIDesktop::renderScanline(int, int, int)+0x314>
10003ea1:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003ea3: R_386_32	render
10003ea8:	75 e0                	jne    10003e8a <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003eaa:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003eac: R_386_32	render
10003eb1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003eb5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003eb8:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003ebb:	0f af ca             	imul   ecx,edx
10003ebe:	89 c2                	mov    edx,eax
10003ec0:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003ec3:	01 ca                	add    edx,ecx
10003ec5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003ec8:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ecc:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003ecf:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003ed2: R_386_32	renderData
10003ed6:	75 b2                	jne    10003e8a <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003ed8:	eb 44                	jmp    10003f1e <NIDesktop::renderScanline(int, int, int)+0x358>
10003eda:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003ede:	0f 85 42 fd ff ff    	jne    10003c26 <NIDesktop::renderScanline(int, int, int)+0x60>
10003ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003eeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003eef:	e9 21 fd ff ff       	jmp    10003c15 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003ef4:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003ef6: R_386_32	render
10003efb:	74 09                	je     10003f06 <NIDesktop::renderScanline(int, int, int)+0x340>
10003efd:	40                   	inc    eax
10003efe:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f02:	7c f0                	jl     10003ef4 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003f04:	eb 18                	jmp    10003f1e <NIDesktop::renderScanline(int, int, int)+0x358>
10003f06:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003f08: R_386_32	render
10003f0d:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003f10: R_386_32	renderData
10003f18:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003f1c:	75 df                	jne    10003efd <NIDesktop::renderScanline(int, int, int)+0x337>
10003f1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f22:	8b 00                	mov    eax,DWORD PTR [eax]
10003f24:	8b 00                	mov    eax,DWORD PTR [eax]
10003f26:	85 c0                	test   eax,eax
10003f28:	74 5e                	je     10003f88 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f2a:	8b 00                	mov    eax,DWORD PTR [eax]
10003f2c:	85 c0                	test   eax,eax
10003f2e:	74 58                	je     10003f88 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f30:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003f34:	75 52                	jne    10003f88 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f36:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003f3a:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003f3e:	7d 48                	jge    10003f88 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f40:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003f42: R_386_32	shadow
10003f46:	3c 80                	cmp    al,0x80
10003f48:	74 3b                	je     10003f85 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003f4a:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f4d: R_386_32	renderData
10003f51:	0f b6 f0             	movzx  esi,al
10003f54:	89 d1                	mov    ecx,edx
10003f56:	0f b6 c6             	movzx  eax,dh
10003f59:	c1 e9 10             	shr    ecx,0x10
10003f5c:	0f af c6             	imul   eax,esi
10003f5f:	0f b6 c9             	movzx  ecx,cl
10003f62:	0f b6 d2             	movzx  edx,dl
10003f65:	0f af ce             	imul   ecx,esi
10003f68:	0f af d6             	imul   edx,esi
10003f6b:	c1 e9 07             	shr    ecx,0x7
10003f6e:	c1 e8 07             	shr    eax,0x7
10003f71:	c1 e1 10             	shl    ecx,0x10
10003f74:	c1 e0 08             	shl    eax,0x8
10003f77:	c1 ea 07             	shr    edx,0x7
10003f7a:	09 c1                	or     ecx,eax
10003f7c:	09 ca                	or     edx,ecx
10003f7e:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f81: R_386_32	renderData
10003f85:	43                   	inc    ebx
10003f86:	eb b2                	jmp    10003f3a <NIDesktop::renderScanline(int, int, int)+0x374>
10003f88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f8c:	83 ec 0c             	sub    esp,0xc
10003f8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f92:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003f98:	8b 10                	mov    edx,DWORD PTR [eax]
10003f9a:	68 00 00 00 00       	push   0x0	10003f9b: R_386_32	renderData
10003f9f:	6a 00                	push   0x0
10003fa1:	6a 01                	push   0x1
10003fa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003fa7:	6a 00                	push   0x0
10003fa9:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fad:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fb1:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003fb5:	50                   	push   eax
10003fb6:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003fb9:	83 c4 5c             	add    esp,0x5c
10003fbc:	5b                   	pop    ebx
10003fbd:	5e                   	pop    esi
10003fbe:	5f                   	pop    edi
10003fbf:	5d                   	pop    ebp
10003fc0:	c3                   	ret    
10003fc1:	90                   	nop

10003fc2 <NIDesktop::rangeRefresh(int, int, int, int)>:
10003fc2:	53                   	push   ebx
10003fc3:	83 ec 08             	sub    esp,0x8
10003fc6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003fca:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003fce:	7d 18                	jge    10003fe8 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fd8:	53                   	push   ebx
10003fd9:	43                   	inc    ebx
10003fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003fde:	e8 fc ff ff ff       	call   10003fdf <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003fdf: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003fe3:	83 c4 10             	add    esp,0x10
10003fe6:	eb e2                	jmp    10003fca <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003fe8:	83 c4 08             	add    esp,0x8
10003feb:	5b                   	pop    ebx
10003fec:	c3                   	ret    
10003fed:	90                   	nop

10003fee <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003fee:	55                   	push   ebp
10003fef:	ba 05 00 00 00       	mov    edx,0x5
10003ff4:	57                   	push   edi
10003ff5:	56                   	push   esi
10003ff6:	53                   	push   ebx
10003ff7:	83 ec 0c             	sub    esp,0xc
10003ffa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003ffe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004001:	83 f8 05             	cmp    eax,0x5
10004004:	7c 02                	jl     10004008 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
10004006:	89 c2                	mov    edx,eax
10004008:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000400c:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
1000400f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10004012:	83 ea 05             	sub    edx,0x5
10004015:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
1000401b:	8d 70 05             	lea    esi,[eax+0x5]
1000401e:	8d 69 fb             	lea    ebp,[ecx-0x5]
10004021:	39 c5                	cmp    ebp,eax
10004023:	7f 03                	jg     10004028 <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10004025:	8d 71 ff             	lea    esi,[ecx-0x1]
10004028:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000402b:	89 c1                	mov    ecx,eax
1000402d:	83 f8 05             	cmp    eax,0x5
10004030:	7d 05                	jge    10004037 <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
10004032:	b9 05 00 00 00       	mov    ecx,0x5
10004037:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
1000403a:	83 e9 05             	sub    ecx,0x5
1000403d:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004043:	8d 58 05             	lea    ebx,[eax+0x5]
10004046:	8d 6f fb             	lea    ebp,[edi-0x5]
10004049:	39 c5                	cmp    ebp,eax
1000404b:	7f 03                	jg     10004050 <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
1000404d:	8d 5f ff             	lea    ebx,[edi-0x1]
10004050:	83 ec 0c             	sub    esp,0xc
10004053:	53                   	push   ebx
10004054:	51                   	push   ecx
10004055:	56                   	push   esi
10004056:	52                   	push   edx
10004057:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000405b:	e8 fc ff ff ff       	call   1000405c <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	1000405c: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004060:	83 c4 2c             	add    esp,0x2c
10004063:	5b                   	pop    ebx
10004064:	5e                   	pop    esi
10004065:	5f                   	pop    edi
10004066:	5d                   	pop    ebp
10004067:	c3                   	ret    

10004068 <NIDesktop::completeRefresh()>:
10004068:	56                   	push   esi
10004069:	53                   	push   ebx
1000406a:	31 f6                	xor    esi,esi
1000406c:	50                   	push   eax
1000406d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004071:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004074:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
1000407a:	7e 15                	jle    10004091 <NIDesktop::completeRefresh()+0x29>
1000407c:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004082:	6a 00                	push   0x0
10004084:	56                   	push   esi
10004085:	46                   	inc    esi
10004086:	53                   	push   ebx
10004087:	e8 fc ff ff ff       	call   10004088 <NIDesktop::completeRefresh()+0x20>	10004088: R_386_PC32	NIDesktop::renderScanline(int, int, int)
1000408c:	83 c4 10             	add    esp,0x10
1000408f:	eb e0                	jmp    10004071 <NIDesktop::completeRefresh()+0x9>
10004091:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004097:	83 ec 0c             	sub    esp,0xc
1000409a:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000409c:	6a 00                	push   0x0
1000409e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100040a1:	05 00 00 00 00       	add    eax,0x0	100040a2: R_386_32	___mouse_data
100040a6:	50                   	push   eax
100040a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100040aa:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100040ad:	52                   	push   edx
100040ae:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100040b1:	83 c4 24             	add    esp,0x24
100040b4:	5b                   	pop    ebx
100040b5:	5e                   	pop    esi
100040b6:	c3                   	ret    
100040b7:	90                   	nop

100040b8 <NIDesktop::addWindow(NIWindow*)>:
100040b8:	56                   	push   esi
100040b9:	53                   	push   ebx
100040ba:	83 ec 0c             	sub    esp,0xc
100040bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040c1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100040c5:	56                   	push   esi
100040c6:	ff 33                	push   DWORD PTR [ebx]
100040c8:	e8 fc ff ff ff       	call   100040c9 <NIDesktop::addWindow(NIWindow*)+0x11>	100040c9: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040cd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100040d1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100040d5:	83 c4 14             	add    esp,0x14
100040d8:	5b                   	pop    ebx
100040d9:	5e                   	pop    esi
100040da:	e9 0f ff ff ff       	jmp    10003fee <NIDesktop::refreshWindowBounds(NIWindow*)>
100040df:	90                   	nop

100040e0 <NIDesktop::raiseWindow(NIWindow*)>:
100040e0:	53                   	push   ebx
100040e1:	83 ec 10             	sub    esp,0x10
100040e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040ec:	50                   	push   eax
100040ed:	ff 33                	push   DWORD PTR [ebx]
100040ef:	e8 fc ff ff ff       	call   100040f0 <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040f0: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040f4:	58                   	pop    eax
100040f5:	5a                   	pop    edx
100040f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040fa:	ff 33                	push   DWORD PTR [ebx]
100040fc:	e8 fc ff ff ff       	call   100040fd <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100040fd: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004101:	59                   	pop    ecx
10004102:	58                   	pop    eax
10004103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004107:	53                   	push   ebx
10004108:	e8 fc ff ff ff       	call   10004109 <NIDesktop::raiseWindow(NIWindow*)+0x29>	10004109: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000410d:	83 c4 18             	add    esp,0x18
10004110:	5b                   	pop    ebx
10004111:	c3                   	ret    

10004112 <NIDesktop::deleteWindow(NIWindow*)>:
10004112:	53                   	push   ebx
10004113:	83 ec 10             	sub    esp,0x10
10004116:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000411a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000411e:	50                   	push   eax
1000411f:	ff 33                	push   DWORD PTR [ebx]
10004121:	e8 fc ff ff ff       	call   10004122 <NIDesktop::deleteWindow(NIWindow*)+0x10>	10004122: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004126:	58                   	pop    eax
10004127:	5a                   	pop    edx
10004128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000412c:	53                   	push   ebx
1000412d:	e8 fc ff ff ff       	call   1000412e <NIDesktop::deleteWindow(NIWindow*)+0x1c>	1000412e: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004132:	83 c4 18             	add    esp,0x18
10004135:	5b                   	pop    ebx
10004136:	c3                   	ret    
10004137:	90                   	nop

10004138 <NIDesktop::handleMouse(int, int, int, int)>:
10004138:	55                   	push   ebp
10004139:	57                   	push   edi
1000413a:	56                   	push   esi
1000413b:	53                   	push   ebx
1000413c:	83 ec 38             	sub    esp,0x38
1000413f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10004143:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004146:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004149:	8d 4a 20             	lea    ecx,[edx+0x20]
1000414c:	51                   	push   ecx
1000414d:	52                   	push   edx
1000414e:	8d 50 20             	lea    edx,[eax+0x20]
10004151:	52                   	push   edx
10004152:	50                   	push   eax
10004153:	53                   	push   ebx
10004154:	e8 fc ff ff ff       	call   10004155 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004155: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004159:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000415c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004160:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004163:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10004167:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000416b:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
1000416f:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
10004173:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004176:	83 c4 20             	add    esp,0x20
10004179:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000417c:	85 d2                	test   edx,edx
1000417e:	79 07                	jns    10004187 <NIDesktop::handleMouse(int, int, int, int)+0x4f>
10004180:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004187:	85 c0                	test   eax,eax
10004189:	79 07                	jns    10004192 <NIDesktop::handleMouse(int, int, int, int)+0x5a>
1000418b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
10004192:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004195:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
1000419b:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
1000419e:	7f 04                	jg     100041a4 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
100041a0:	48                   	dec    eax
100041a1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100041a4:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100041aa:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100041ad:	7f 04                	jg     100041b3 <NIDesktop::handleMouse(int, int, int, int)+0x7b>
100041af:	48                   	dec    eax
100041b0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100041b3:	50                   	push   eax
100041b4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100041b7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100041ba:	53                   	push   ebx
100041bb:	e8 fc ff ff ff       	call   100041bc <NIDesktop::handleMouse(int, int, int, int)+0x84>	100041bc: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100041c0:	83 c4 10             	add    esp,0x10
100041c3:	89 c6                	mov    esi,eax
100041c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041c9:	83 e0 01             	and    eax,0x1
100041cc:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100041ce: R_386_32	movingWin
100041d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100041d7:	0f 84 f0 01 00 00    	je     100043cd <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041dd:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100041df: R_386_32	movingType
100041e4:	0f 85 e3 01 00 00    	jne    100043cd <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041ea:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041ee:	85 c0                	test   eax,eax
100041f0:	75 0b                	jne    100041fd <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041f2:	a0 98 88 03 10       	mov    al,ds:0x10038898	100041f3: R_386_32	.bss
100041f7:	83 e0 01             	and    eax,0x1
100041fa:	88 04 24             	mov    BYTE PTR [esp],al
100041fd:	bd 01 00 00 00       	mov    ebp,0x1
10004202:	a1 00 00 00 00       	mov    eax,ds:0x0	10004203: R_386_32	movingWin
10004207:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
1000420a:	8d 51 ff             	lea    edx,[ecx-0x1]
1000420d:	39 ea                	cmp    edx,ebp
1000420f:	0f 8e b1 00 00 00    	jle    100042c6 <NIDesktop::handleMouse(int, int, int, int)+0x18e>
10004215:	bf 01 00 00 00       	mov    edi,0x1
1000421a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421b: R_386_32	movingWin
1000421f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
10004222:	48                   	dec    eax
10004223:	39 f8                	cmp    eax,edi
10004225:	0f 8e 95 00 00 00    	jle    100042c0 <NIDesktop::handleMouse(int, int, int, int)+0x188>
1000422b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
1000422f:	89 ea                	mov    edx,ebp
10004231:	83 e0 1f             	and    eax,0x1f
10004234:	83 e2 03             	and    edx,0x3
10004237:	09 d0                	or     eax,edx
10004239:	75 7f                	jne    100042ba <NIDesktop::handleMouse(int, int, int, int)+0x182>
1000423b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000423f:	2b 05 94 88 03 10    	sub    eax,DWORD PTR ds:0x10038894	10004241: R_386_32	.bss
10004245:	01 f8                	add    eax,edi
10004247:	78 2d                	js     10004276 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004249:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000424c:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004252:	7d 22                	jge    10004276 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004254:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10004258:	8d 48 01             	lea    ecx,[eax+0x1]
1000425b:	83 ec 0c             	sub    esp,0xc
1000425e:	2b 15 90 88 03 10    	sub    edx,DWORD PTR ds:0x10038890	10004260: R_386_32	.bss
10004264:	51                   	push   ecx
10004265:	01 ea                	add    edx,ebp
10004267:	50                   	push   eax
10004268:	8d 42 01             	lea    eax,[edx+0x1]
1000426b:	50                   	push   eax
1000426c:	52                   	push   edx
1000426d:	53                   	push   ebx
1000426e:	e8 fc ff ff ff       	call   1000426f <NIDesktop::handleMouse(int, int, int, int)+0x137>	1000426f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004273:	83 c4 20             	add    esp,0x20
10004276:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
1000427a:	75 3e                	jne    100042ba <NIDesktop::handleMouse(int, int, int, int)+0x182>
1000427c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000427f:	01 f8                	add    eax,edi
10004281:	2b 05 94 88 03 10    	sub    eax,DWORD PTR ds:0x10038894	10004283: R_386_32	.bss
10004287:	78 31                	js     100042ba <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004289:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000428c:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004292:	7d 26                	jge    100042ba <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004294:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
1000429a:	8b 11                	mov    edx,DWORD PTR [ecx]
1000429c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100042a0:	6a 00                	push   0x0
100042a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100042a5:	01 ea                	add    edx,ebp
100042a7:	2b 15 90 88 03 10    	sub    edx,DWORD PTR ds:0x10038890	100042a9: R_386_32	.bss
100042ad:	52                   	push   edx
100042ae:	50                   	push   eax
100042af:	51                   	push   ecx
100042b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100042b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
100042b7:	83 c4 10             	add    esp,0x10
100042ba:	47                   	inc    edi
100042bb:	e9 5a ff ff ff       	jmp    1000421a <NIDesktop::handleMouse(int, int, int, int)+0xe2>
100042c0:	45                   	inc    ebp
100042c1:	e9 3c ff ff ff       	jmp    10004202 <NIDesktop::handleMouse(int, int, int, int)+0xca>
100042c6:	8b 15 94 88 03 10    	mov    edx,DWORD PTR ds:0x10038894	100042c8: R_386_32	.bss
100042cc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100042cf:	29 d7                	sub    edi,edx
100042d1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
100042d5:	0f 85 86 05 00 00    	jne    10004861 <NIDesktop::handleMouse(int, int, int, int)+0x729>
100042db:	89 3c 24             	mov    DWORD PTR [esp],edi
100042de:	85 ff                	test   edi,edi
100042e0:	79 07                	jns    100042e9 <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
100042e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100042e9:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042ec:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042ef:	01 ef                	add    edi,ebp
100042f1:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100042f7:	39 c7                	cmp    edi,eax
100042f9:	7d 05                	jge    10004300 <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
100042fb:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042fe:	eb 0b                	jmp    1000430b <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
10004300:	89 c7                	mov    edi,eax
10004302:	2b 3c 24             	sub    edi,DWORD PTR [esp]
10004305:	0f 88 c2 00 00 00    	js     100043cd <NIDesktop::handleMouse(int, int, int, int)+0x295>
1000430b:	85 ff                	test   edi,edi
1000430d:	0f 84 ba 00 00 00    	je     100043cd <NIDesktop::handleMouse(int, int, int, int)+0x295>
10004313:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004317:	29 d1                	sub    ecx,edx
10004319:	89 ca                	mov    edx,ecx
1000431b:	79 02                	jns    1000431f <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
1000431d:	31 d2                	xor    edx,edx
1000431f:	01 cd                	add    ebp,ecx
10004321:	39 e8                	cmp    eax,ebp
10004323:	7e 04                	jle    10004329 <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004325:	29 d5                	sub    ebp,edx
10004327:	eb 08                	jmp    10004331 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
10004329:	29 d0                	sub    eax,edx
1000432b:	89 c5                	mov    ebp,eax
1000432d:	79 02                	jns    10004331 <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
1000432f:	31 ed                	xor    ebp,ebp
10004331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004335:	01 d5                	add    ebp,edx
10004337:	83 ec 0c             	sub    esp,0xc
1000433a:	2b 05 90 88 03 10    	sub    eax,DWORD PTR ds:0x10038890	1000433c: R_386_32	.bss
10004340:	55                   	push   ebp
10004341:	8d 48 01             	lea    ecx,[eax+0x1]
10004344:	52                   	push   edx
10004345:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10004349:	51                   	push   ecx
1000434a:	50                   	push   eax
1000434b:	53                   	push   ebx
1000434c:	e8 fc ff ff ff       	call   1000434d <NIDesktop::handleMouse(int, int, int, int)+0x215>	1000434d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004351:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004355:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004357: R_386_32	movingWin
1000435b:	83 c4 14             	add    esp,0x14
1000435e:	2b 05 90 88 03 10    	sub    eax,DWORD PTR ds:0x10038890	10004360: R_386_32	.bss
10004364:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
10004367:	55                   	push   ebp
10004368:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000436c:	52                   	push   edx
1000436d:	50                   	push   eax
1000436e:	48                   	dec    eax
1000436f:	50                   	push   eax
10004370:	53                   	push   ebx
10004371:	e8 fc ff ff ff       	call   10004372 <NIDesktop::handleMouse(int, int, int, int)+0x23a>	10004372: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004376:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004379:	83 c4 18             	add    esp,0x18
1000437c:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004382:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004384:	6a 00                	push   0x0
10004386:	6a 01                	push   0x1
10004388:	57                   	push   edi
10004389:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000438c:	2b 05 90 88 03 10    	sub    eax,DWORD PTR ds:0x10038890	1000438e: R_386_32	.bss
10004392:	50                   	push   eax
10004393:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10004397:	52                   	push   edx
10004398:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000439b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000439e:	83 c4 18             	add    esp,0x18
100043a1:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100043a7:	8b 0a                	mov    ecx,DWORD PTR [edx]
100043a9:	6a 00                	push   0x0
100043ab:	6a 01                	push   0x1
100043ad:	57                   	push   edi
100043ae:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100043b0: R_386_32	movingWin
100043b4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100043b7:	2b 05 90 88 03 10    	sub    eax,DWORD PTR ds:0x10038890	100043b9: R_386_32	.bss
100043bd:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
100043c0:	48                   	dec    eax
100043c1:	50                   	push   eax
100043c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043c6:	52                   	push   edx
100043c7:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043ca:	83 c4 20             	add    esp,0x20
100043cd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043cf: R_386_32	movingWin
100043d3:	85 d2                	test   edx,edx
100043d5:	0f 84 05 02 00 00    	je     100045e0 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043db:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100043dd: R_386_32	movingType
100043e1:	8d 41 fe             	lea    eax,[ecx-0x2]
100043e4:	83 f8 02             	cmp    eax,0x2
100043e7:	0f 87 f3 01 00 00    	ja     100045e0 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043ed:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100043f7:	75 0c                	jne    10004405 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
100043f9:	a0 98 88 03 10       	mov    al,ds:0x10038898	100043fa: R_386_32	.bss
100043fe:	83 e0 01             	and    eax,0x1
10004401:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004405:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
10004408:	8b 2d 94 88 03 10    	mov    ebp,DWORD PTR ds:0x10038894	1000440a: R_386_32	.bss
1000440e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004412:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
10004415:	01 c7                	add    edi,eax
10004417:	29 ef                	sub    edi,ebp
10004419:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000441d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10004421:	01 d7                	add    edi,edx
10004423:	2b 3d 90 88 03 10    	sub    edi,DWORD PTR ds:0x10038890	10004425: R_386_32	.bss
10004429:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
1000442d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10004430:	01 c7                	add    edi,eax
10004432:	29 ef                	sub    edi,ebp
10004434:	89 fd                	mov    ebp,edi
10004436:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10004439:	01 d7                	add    edi,edx
1000443b:	2b 3d 90 88 03 10    	sub    edi,DWORD PTR ds:0x10038890	1000443d: R_386_32	.bss
10004441:	83 f9 03             	cmp    ecx,0x3
10004444:	89 3c 24             	mov    DWORD PTR [esp],edi
10004447:	74 0e                	je     10004457 <NIDesktop::handleMouse(int, int, int, int)+0x31f>
10004449:	83 f9 04             	cmp    ecx,0x4
1000444c:	75 0f                	jne    1000445d <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000444e:	89 14 24             	mov    DWORD PTR [esp],edx
10004451:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004455:	eb 06                	jmp    1000445d <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004457:	89 c5                	mov    ebp,eax
10004459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000445d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004461:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004465:	39 e8                	cmp    eax,ebp
10004467:	7d 04                	jge    1000446d <NIDesktop::handleMouse(int, int, int, int)+0x335>
10004469:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
1000446d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004475:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004478:	7d 07                	jge    10004481 <NIDesktop::handleMouse(int, int, int, int)+0x349>
1000447a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000447d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004481:	bf 01 00 00 00       	mov    edi,0x1
10004486:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
1000448a:	0f 8d ab 00 00 00    	jge    1000453b <NIDesktop::handleMouse(int, int, int, int)+0x403>
10004490:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
10004498:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000449c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
100044a0:	0f 8d 8f 00 00 00    	jge    10004535 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
100044a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100044aa:	89 fa                	mov    edx,edi
100044ac:	01 f8                	add    eax,edi
100044ae:	83 e2 03             	and    edx,0x3
100044b1:	83 e0 1f             	and    eax,0x1f
100044b4:	09 d0                	or     eax,edx
100044b6:	75 74                	jne    1000452c <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044b8:	83 ec 0c             	sub    esp,0xc
100044bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100044bc: R_386_32	movingWin
100044c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100044c7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100044ca:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
100044ce:	51                   	push   ecx
100044cf:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
100044d3:	52                   	push   edx
100044d4:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
100044d8:	01 f8                	add    eax,edi
100044da:	52                   	push   edx
100044db:	50                   	push   eax
100044dc:	53                   	push   ebx
100044dd:	e8 fc ff ff ff       	call   100044de <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	100044de: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044e2:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
100044e6:	83 c4 20             	add    esp,0x20
100044e9:	83 f2 01             	xor    edx,0x1
100044ec:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044ef:	0f 9f c0             	setg   al
100044f2:	84 c2                	test   dl,al
100044f4:	74 36                	je     1000452c <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044f6:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100044fa:	7d 30                	jge    1000452c <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100044ff:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004505:	8b 08                	mov    ecx,DWORD PTR [eax]
10004507:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000450b:	6a 00                	push   0x0
1000450d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000450f: R_386_32	movingWin
10004513:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
10004516:	01 fa                	add    edx,edi
10004518:	52                   	push   edx
10004519:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000451d:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
10004520:	52                   	push   edx
10004521:	50                   	push   eax
10004522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004526:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004529:	83 c4 10             	add    esp,0x10
1000452c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004530:	e9 63 ff ff ff       	jmp    10004498 <NIDesktop::handleMouse(int, int, int, int)+0x360>
10004535:	47                   	inc    edi
10004536:	e9 4b ff ff ff       	jmp    10004486 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
1000453b:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	1000453d: R_386_32	movingWin
10004541:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
10004546:	0f 85 d8 02 00 00    	jne    10004824 <NIDesktop::handleMouse(int, int, int, int)+0x6ec>
1000454c:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
1000454f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
10004552:	83 ec 0c             	sub    esp,0xc
10004555:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004559:	01 d1                	add    ecx,edx
1000455b:	51                   	push   ecx
1000455c:	52                   	push   edx
1000455d:	8d 50 01             	lea    edx,[eax+0x1]
10004560:	52                   	push   edx
10004561:	50                   	push   eax
10004562:	53                   	push   ebx
10004563:	e8 fc ff ff ff       	call   10004564 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004564: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004568:	83 c4 18             	add    esp,0x18
1000456b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000456e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004570: R_386_32	movingWin
10004574:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000457a:	8b 08                	mov    ecx,DWORD PTR [eax]
1000457c:	6a 00                	push   0x0
1000457e:	6a 01                	push   0x1
10004580:	55                   	push   ebp
10004581:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004584:	ff 72 18             	push   DWORD PTR [edx+0x18]
10004587:	50                   	push   eax
10004588:	ff 51 28             	call   DWORD PTR [ecx+0x28]
1000458b:	83 c4 14             	add    esp,0x14
1000458e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000458f: R_386_32	movingWin
10004593:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
10004596:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10004599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000459d:	01 c8                	add    eax,ecx
1000459f:	50                   	push   eax
100045a0:	51                   	push   ecx
100045a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100045a5:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
100045a9:	50                   	push   eax
100045aa:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100045ae:	52                   	push   edx
100045af:	53                   	push   ebx
100045b0:	e8 fc ff ff ff       	call   100045b1 <NIDesktop::handleMouse(int, int, int, int)+0x479>	100045b1: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045b5:	83 c4 18             	add    esp,0x18
100045b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100045bb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045bd: R_386_32	movingWin
100045c1:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100045c7:	8b 08                	mov    ecx,DWORD PTR [eax]
100045c9:	6a 00                	push   0x0
100045cb:	6a 01                	push   0x1
100045cd:	55                   	push   ebp
100045ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045d2:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
100045d5:	57                   	push   edi
100045d6:	ff 72 18             	push   DWORD PTR [edx+0x18]
100045d9:	50                   	push   eax
100045da:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100045dd:	83 c4 20             	add    esp,0x20
100045e0:	85 f6                	test   esi,esi
100045e2:	0f 84 08 02 00 00    	je     100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045e8:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045ed:	0f 84 fd 01 00 00    	je     100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045f3:	8b 0d 98 88 03 10    	mov    ecx,DWORD PTR ds:0x10038898	100045f5: R_386_32	.bss
100045f9:	83 e1 01             	and    ecx,0x1
100045fc:	0f 85 ea 00 00 00    	jne    100046ec <NIDesktop::handleMouse(int, int, int, int)+0x5b4>
10004602:	a1 00 00 00 00       	mov    eax,ds:0x0	10004603: R_386_32	milliTenthsSinceBoot
10004607:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004609: R_386_32	milliTenthsSinceBoot
1000460d:	2b 05 88 88 03 10    	sub    eax,DWORD PTR ds:0x10038888	1000460f: R_386_32	.bss
10004613:	bf b7 0b 00 00       	mov    edi,0xbb7
10004618:	1b 15 8c 88 03 10    	sbb    edx,DWORD PTR ds:0x1003888c	1000461a: R_386_32	.bss
1000461e:	39 c7                	cmp    edi,eax
10004620:	19 d1                	sbb    ecx,edx
10004622:	0f 82 95 00 00 00    	jb     100046bd <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004628:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
1000462b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000462e:	29 d0                	sub    eax,edx
10004630:	83 f8 18             	cmp    eax,0x18
10004633:	0f 8f 84 00 00 00    	jg     100046bd <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004639:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
1000463d:	75 7e                	jne    100046bd <NIDesktop::handleMouse(int, int, int, int)+0x585>
1000463f:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004643:	74 26                	je     1000466b <NIDesktop::handleMouse(int, int, int, int)+0x533>
10004645:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
10004648:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
1000464b:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
1000464e:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
10004651:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004654:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004657:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
1000465a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
1000465d:	50                   	push   eax
1000465e:	50                   	push   eax
1000465f:	56                   	push   esi
10004660:	53                   	push   ebx
10004661:	e8 fc ff ff ff       	call   10004662 <NIDesktop::handleMouse(int, int, int, int)+0x52a>	10004662: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004666:	83 c4 10             	add    esp,0x10
10004669:	eb 3b                	jmp    100046a6 <NIDesktop::handleMouse(int, int, int, int)+0x56e>
1000466b:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
1000466e:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004675:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10004678:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
1000467f:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
10004682:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004685:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
10004688:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
1000468b:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
1000468e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004691:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004697:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
1000469a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000469d:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
100046a3:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
100046a6:	83 ec 0c             	sub    esp,0xc
100046a9:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
100046ad:	56                   	push   esi
100046ae:	e8 fc ff ff ff       	call   100046af <NIDesktop::handleMouse(int, int, int, int)+0x577>	100046af: R_386_PC32	NIWindow::rerender()
100046b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046b6:	e8 fc ff ff ff       	call   100046b7 <NIDesktop::handleMouse(int, int, int, int)+0x57f>	100046b7: R_386_PC32	NIDesktop::completeRefresh()
100046bb:	eb 11                	jmp    100046ce <NIDesktop::handleMouse(int, int, int, int)+0x596>
100046bd:	8b 03                	mov    eax,DWORD PTR [ebx]
100046bf:	8b 00                	mov    eax,DWORD PTR [eax]
100046c1:	39 30                	cmp    DWORD PTR [eax],esi
100046c3:	74 0c                	je     100046d1 <NIDesktop::handleMouse(int, int, int, int)+0x599>
100046c5:	50                   	push   eax
100046c6:	50                   	push   eax
100046c7:	56                   	push   esi
100046c8:	53                   	push   ebx
100046c9:	e8 fc ff ff ff       	call   100046ca <NIDesktop::handleMouse(int, int, int, int)+0x592>	100046ca: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100046ce:	83 c4 10             	add    esp,0x10
100046d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100046d2: R_386_32	milliTenthsSinceBoot
100046d6:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100046d8: R_386_32	milliTenthsSinceBoot
100046dc:	a3 88 88 03 10       	mov    ds:0x10038888,eax	100046dd: R_386_32	.bss
100046e1:	89 15 8c 88 03 10    	mov    DWORD PTR ds:0x1003888c,edx	100046e3: R_386_32	.bss
100046e7:	e9 04 01 00 00       	jmp    100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046ec:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046ee: R_386_32	movingWin
100046f3:	0f 85 f7 00 00 00    	jne    100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046f9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100046fc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
100046ff:	89 d1                	mov    ecx,edx
10004701:	83 e8 0e             	sub    eax,0xe
10004704:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
10004707:	39 c8                	cmp    eax,ecx
10004709:	7f 37                	jg     10004742 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
1000470b:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000470f:	75 31                	jne    10004742 <NIDesktop::handleMouse(int, int, int, int)+0x60a>
10004711:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004714:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
1000471b:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000471d: R_386_32	movingWin
10004721:	55                   	push   ebp
10004722:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004724: R_386_32	movingType
1000472c:	55                   	push   ebp
1000472d:	a3 94 88 03 10       	mov    ds:0x10038894,eax	1000472e: R_386_32	.bss
10004732:	56                   	push   esi
10004733:	89 15 90 88 03 10    	mov    DWORD PTR ds:0x10038890,edx	10004735: R_386_32	.bss
10004739:	53                   	push   ebx
1000473a:	e8 fc ff ff ff       	call   1000473b <NIDesktop::handleMouse(int, int, int, int)+0x603>	1000473b: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000473f:	83 c4 10             	add    esp,0x10
10004742:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004745:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004748:	89 d1                	mov    ecx,edx
1000474a:	83 e8 0e             	sub    eax,0xe
1000474d:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
10004750:	39 c8                	cmp    eax,ecx
10004752:	7f 55                	jg     100047a9 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004754:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004758:	75 4f                	jne    100047a9 <NIDesktop::handleMouse(int, int, int, int)+0x671>
1000475a:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000475c: R_386_32	movingWin
10004761:	75 33                	jne    10004796 <NIDesktop::handleMouse(int, int, int, int)+0x65e>
10004763:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004766:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
1000476d:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000476f: R_386_32	movingWin
10004773:	57                   	push   edi
10004774:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004776: R_386_32	movingType
1000477e:	57                   	push   edi
1000477f:	89 15 94 88 03 10    	mov    DWORD PTR ds:0x10038894,edx	10004781: R_386_32	.bss
10004785:	56                   	push   esi
10004786:	a3 90 88 03 10       	mov    ds:0x10038890,eax	10004787: R_386_32	.bss
1000478b:	53                   	push   ebx
1000478c:	e8 fc ff ff ff       	call   1000478d <NIDesktop::handleMouse(int, int, int, int)+0x655>	1000478d: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004791:	83 c4 10             	add    esp,0x10
10004794:	eb 13                	jmp    100047a9 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004796:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004798: R_386_32	movingType
100047a0:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
100047a7:	eb 47                	jmp    100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047a9:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100047ab: R_386_32	movingWin
100047b0:	75 3e                	jne    100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047b2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100047b5:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
100047b8:	83 f8 18             	cmp    eax,0x18
100047bb:	7f 33                	jg     100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047bd:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100047c1:	75 2d                	jne    100047f0 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047c3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100047c6:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
100047c9:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100047cb: R_386_32	movingWin
100047cf:	51                   	push   ecx
100047d0:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100047d2: R_386_32	movingType
100047da:	51                   	push   ecx
100047db:	89 15 94 88 03 10    	mov    DWORD PTR ds:0x10038894,edx	100047dd: R_386_32	.bss
100047e1:	56                   	push   esi
100047e2:	a3 90 88 03 10       	mov    ds:0x10038890,eax	100047e3: R_386_32	.bss
100047e7:	53                   	push   ebx
100047e8:	e8 fc ff ff ff       	call   100047e9 <NIDesktop::handleMouse(int, int, int, int)+0x6b1>	100047e9: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047ed:	83 c4 10             	add    esp,0x10
100047f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047f3:	83 ec 0c             	sub    esp,0xc
100047f6:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100047fc:	8b 0a                	mov    ecx,DWORD PTR [edx]
100047fe:	6a 00                	push   0x0
10004800:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004803:	05 00 00 00 00       	add    eax,0x0	10004804: R_386_32	___mouse_data
10004808:	50                   	push   eax
10004809:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
1000480c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000480f:	52                   	push   edx
10004810:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004813:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10004817:	a3 98 88 03 10       	mov    ds:0x10038898,eax	10004818: R_386_32	.bss
1000481c:	83 c4 4c             	add    esp,0x4c
1000481f:	5b                   	pop    ebx
10004820:	5e                   	pop    esi
10004821:	5f                   	pop    edi
10004822:	5d                   	pop    ebp
10004823:	c3                   	ret    
10004824:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004827:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
1000482a:	83 ec 0c             	sub    esp,0xc
1000482d:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
10004830:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004832: R_386_32	movingWin
1000483a:	57                   	push   edi
1000483b:	e8 fc ff ff ff       	call   1000483c <NIDesktop::handleMouse(int, int, int, int)+0x704>	1000483c: R_386_PC32	NIWindow::rerender()
10004840:	59                   	pop    ecx
10004841:	5d                   	pop    ebp
10004842:	57                   	push   edi
10004843:	53                   	push   ebx
10004844:	e8 fc ff ff ff       	call   10004845 <NIDesktop::handleMouse(int, int, int, int)+0x70d>	10004845: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004849:	58                   	pop    eax
1000484a:	5a                   	pop    edx
1000484b:	57                   	push   edi
1000484c:	53                   	push   ebx
1000484d:	e8 fc ff ff ff       	call   1000484e <NIDesktop::handleMouse(int, int, int, int)+0x716>	1000484e: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004852:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004859:	83 c4 10             	add    esp,0x10
1000485c:	e9 7f fd ff ff       	jmp    100045e0 <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
10004861:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004864:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004866: R_386_32	movingWin
1000486e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004871:	2b 15 90 88 03 10    	sub    edx,DWORD PTR ds:0x10038890	10004873: R_386_32	.bss
10004877:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
1000487a:	52                   	push   edx
1000487b:	52                   	push   edx
1000487c:	50                   	push   eax
1000487d:	53                   	push   ebx
1000487e:	e8 fc ff ff ff       	call   1000487f <NIDesktop::handleMouse(int, int, int, int)+0x747>	1000487f: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004883:	83 c4 10             	add    esp,0x10
10004886:	e9 42 fb ff ff       	jmp    100043cd <NIDesktop::handleMouse(int, int, int, int)+0x295>

1000488b <NiHandleMouse(int, int, int, int)>:
1000488b:	83 ec 18             	sub    esp,0x18
1000488e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004892:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004896:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100048a0: R_386_32	mouseDesktop
100048a4:	e8 fc ff ff ff       	call   100048a5 <NiHandleMouse(int, int, int, int)+0x1a>	100048a5: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100048a9:	83 c4 2c             	add    esp,0x2c
100048ac:	c3                   	ret    

100048ad <drawVGAChar(int, int, int)>:
100048ad:	55                   	push   ebp
100048ae:	57                   	push   edi
100048af:	56                   	push   esi
100048b0:	53                   	push   ebx
100048b1:	31 db                	xor    ebx,ebx
100048b3:	83 ec 1c             	sub    esp,0x1c
100048b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100048ba:	c1 e0 04             	shl    eax,0x4
100048bd:	89 04 24             	mov    DWORD PTR [esp],eax
100048c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100048c4:	c1 e0 04             	shl    eax,0x4
100048c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100048cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100048cf:	c1 e0 03             	shl    eax,0x3
100048d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100048d6:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100048dd:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100048e0: R_386_32	cp
100048e4:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100048e7:	31 f6                	xor    esi,esi
100048e9:	84 c0                	test   al,al
100048eb:	79 22                	jns    1000490f <drawVGAChar(int, int, int)+0x62>
100048ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048f1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048f3: R_386_32	screen
100048f7:	8b 0a                	mov    ecx,DWORD PTR [edx]
100048f9:	6a 00                	push   0x0
100048fb:	57                   	push   edi
100048fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004900:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004903:	55                   	push   ebp
10004904:	52                   	push   edx
10004905:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004908:	83 c4 10             	add    esp,0x10
1000490b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
1000490f:	d1 e0                	shl    eax,1
10004911:	46                   	inc    esi
10004912:	83 fe 08             	cmp    esi,0x8
10004915:	75 d2                	jne    100048e9 <drawVGAChar(int, int, int)+0x3c>
10004917:	43                   	inc    ebx
10004918:	83 fb 10             	cmp    ebx,0x10
1000491b:	75 b9                	jne    100048d6 <drawVGAChar(int, int, int)+0x29>
1000491d:	83 c4 1c             	add    esp,0x1c
10004920:	5b                   	pop    ebx
10004921:	5e                   	pop    esi
10004922:	5f                   	pop    edi
10004923:	5d                   	pop    ebp
10004924:	c3                   	ret    

10004925 <NiDisplayRAM(void*)>:
10004925:	53                   	push   ebx
10004926:	83 ec 18             	sub    esp,0x18
10004929:	a1 00 00 00 00       	mov    eax,ds:0x0	1000492a: R_386_32	irqDisableCounter
1000492e:	48                   	dec    eax
1000492f:	a3 00 00 00 00       	mov    ds:0x0,eax	10004930: R_386_32	irqDisableCounter
10004934:	75 01                	jne    10004937 <NiDisplayRAM(void*)+0x12>
10004936:	fb                   	sti    
10004937:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10004939: R_386_32	Phys::usedPages
1000493e:	99                   	cdq    
1000493f:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10004941: R_386_32	Phys::usablePages
10004945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004949:	50                   	push   eax
1000494a:	6a 20                	push   0x20
1000494c:	6a 00                	push   0x0
1000494e:	6a 00                	push   0x0
10004950:	e8 fc ff ff ff       	call   10004951 <NiDisplayRAM(void*)+0x2c>	10004951: R_386_PC32	drawVGAChar(int, int, int)
10004955:	83 c4 0c             	add    esp,0xc
10004958:	6a 20                	push   0x20
1000495a:	6a 00                	push   0x0
1000495c:	6a 01                	push   0x1
1000495e:	e8 fc ff ff ff       	call   1000495f <NiDisplayRAM(void*)+0x3a>	1000495f: R_386_PC32	drawVGAChar(int, int, int)
10004963:	b9 0a 00 00 00       	mov    ecx,0xa
10004968:	83 c4 0c             	add    esp,0xc
1000496b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000496f:	99                   	cdq    
10004970:	f7 f9                	idiv   ecx
10004972:	89 d3                	mov    ebx,edx
10004974:	83 c0 30             	add    eax,0x30
10004977:	50                   	push   eax
10004978:	6a 00                	push   0x0
1000497a:	6a 00                	push   0x0
1000497c:	e8 fc ff ff ff       	call   1000497d <NiDisplayRAM(void*)+0x58>	1000497d: R_386_PC32	drawVGAChar(int, int, int)
10004981:	8d 43 30             	lea    eax,[ebx+0x30]
10004984:	83 c4 0c             	add    esp,0xc
10004987:	50                   	push   eax
10004988:	6a 00                	push   0x0
1000498a:	6a 01                	push   0x1
1000498c:	e8 fc ff ff ff       	call   1000498d <NiDisplayRAM(void*)+0x68>	1000498d: R_386_PC32	drawVGAChar(int, int, int)
10004991:	83 c4 0c             	add    esp,0xc
10004994:	6a 25                	push   0x25
10004996:	6a 00                	push   0x0
10004998:	6a 02                	push   0x2
1000499a:	e8 fc ff ff ff       	call   1000499b <NiDisplayRAM(void*)+0x76>	1000499b: R_386_PC32	drawVGAChar(int, int, int)
1000499f:	83 c4 0c             	add    esp,0xc
100049a2:	6a 20                	push   0x20
100049a4:	6a 00                	push   0x0
100049a6:	6a 03                	push   0x3
100049a8:	e8 fc ff ff ff       	call   100049a9 <NiDisplayRAM(void*)+0x84>	100049a9: R_386_PC32	drawVGAChar(int, int, int)
100049ad:	83 c4 0c             	add    esp,0xc
100049b0:	6a 52                	push   0x52
100049b2:	6a 00                	push   0x0
100049b4:	6a 04                	push   0x4
100049b6:	e8 fc ff ff ff       	call   100049b7 <NiDisplayRAM(void*)+0x92>	100049b7: R_386_PC32	drawVGAChar(int, int, int)
100049bb:	83 c4 0c             	add    esp,0xc
100049be:	6a 41                	push   0x41
100049c0:	6a 00                	push   0x0
100049c2:	6a 05                	push   0x5
100049c4:	e8 fc ff ff ff       	call   100049c5 <NiDisplayRAM(void*)+0xa0>	100049c5: R_386_PC32	drawVGAChar(int, int, int)
100049c9:	83 c4 0c             	add    esp,0xc
100049cc:	6a 4d                	push   0x4d
100049ce:	6a 00                	push   0x0
100049d0:	6a 06                	push   0x6
100049d2:	e8 fc ff ff ff       	call   100049d3 <NiDisplayRAM(void*)+0xae>	100049d3: R_386_PC32	drawVGAChar(int, int, int)
100049d7:	83 c4 0c             	add    esp,0xc
100049da:	6a 20                	push   0x20
100049dc:	6a 00                	push   0x0
100049de:	6a 07                	push   0x7
100049e0:	e8 fc ff ff ff       	call   100049e1 <NiDisplayRAM(void*)+0xbc>	100049e1: R_386_PC32	drawVGAChar(int, int, int)
100049e5:	83 c4 0c             	add    esp,0xc
100049e8:	6a 75                	push   0x75
100049ea:	6a 00                	push   0x0
100049ec:	6a 08                	push   0x8
100049ee:	e8 fc ff ff ff       	call   100049ef <NiDisplayRAM(void*)+0xca>	100049ef: R_386_PC32	drawVGAChar(int, int, int)
100049f3:	83 c4 0c             	add    esp,0xc
100049f6:	6a 73                	push   0x73
100049f8:	6a 00                	push   0x0
100049fa:	6a 09                	push   0x9
100049fc:	e8 fc ff ff ff       	call   100049fd <NiDisplayRAM(void*)+0xd8>	100049fd: R_386_PC32	drawVGAChar(int, int, int)
10004a01:	83 c4 0c             	add    esp,0xc
10004a04:	6a 65                	push   0x65
10004a06:	6a 00                	push   0x0
10004a08:	6a 0a                	push   0xa
10004a0a:	e8 fc ff ff ff       	call   10004a0b <NiDisplayRAM(void*)+0xe6>	10004a0b: R_386_PC32	drawVGAChar(int, int, int)
10004a0f:	83 c4 0c             	add    esp,0xc
10004a12:	6a 64                	push   0x64
10004a14:	6a 00                	push   0x0
10004a16:	6a 0b                	push   0xb
10004a18:	e8 fc ff ff ff       	call   10004a19 <NiDisplayRAM(void*)+0xf4>	10004a19: R_386_PC32	drawVGAChar(int, int, int)
10004a1d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
10004a24:	e8 fc ff ff ff       	call   10004a25 <NiDisplayRAM(void*)+0x100>	10004a25: R_386_PC32	sleep(unsigned int)
10004a29:	83 c4 10             	add    esp,0x10
10004a2c:	e9 06 ff ff ff       	jmp    10004937 <NiDisplayRAM(void*)+0x12>

10004a31 <monikaBsod(char*)>:
10004a31:	55                   	push   ebp
10004a32:	57                   	push   edi
10004a33:	31 ff                	xor    edi,edi
10004a35:	56                   	push   esi
10004a36:	53                   	push   ebx
10004a37:	31 db                	xor    ebx,ebx
10004a39:	83 ec 24             	sub    esp,0x24
10004a3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a3d: R_386_32	screen
10004a41:	8b 10                	mov    edx,DWORD PTR [eax]
10004a43:	68 ff ff ff 00       	push   0xffffff
10004a48:	50                   	push   eax
10004a49:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004a4c:	83 c4 10             	add    esp,0x10
10004a4f:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004a51: R_386_32	justMonika
10004a55:	8d 43 01             	lea    eax,[ebx+0x1]
10004a58:	84 c9                	test   cl,cl
10004a5a:	79 0e                	jns    10004a6a <monikaBsod(char*)+0x39>
10004a5c:	8d 51 80             	lea    edx,[ecx-0x80]
10004a5f:	83 c3 02             	add    ebx,0x2
10004a62:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004a64: R_386_32	justMonika
10004a68:	eb 04                	jmp    10004a6e <monikaBsod(char*)+0x3d>
10004a6a:	89 c3                	mov    ebx,eax
10004a6c:	b2 01                	mov    dl,0x1
10004a6e:	0f b6 c1             	movzx  eax,cl
10004a71:	83 e1 03             	and    ecx,0x3
10004a74:	89 c6                	mov    esi,eax
10004a76:	6b c9 55             	imul   ecx,ecx,0x55
10004a79:	c1 fe 05             	sar    esi,0x5
10004a7c:	c1 f8 02             	sar    eax,0x2
10004a7f:	83 e6 03             	and    esi,0x3
10004a82:	83 e0 07             	and    eax,0x7
10004a85:	6b f6 55             	imul   esi,esi,0x55
10004a88:	6b c0 24             	imul   eax,eax,0x24
10004a8b:	c1 e6 10             	shl    esi,0x10
10004a8e:	c1 e0 08             	shl    eax,0x8
10004a91:	09 f0                	or     eax,esi
10004a93:	31 f6                	xor    esi,esi
10004a95:	09 c8                	or     eax,ecx
10004a97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a9b:	0f b6 c2             	movzx  eax,dl
10004a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004aa2:	8d 04 37             	lea    eax,[edi+esi*1]
10004aa5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004aa9:	7f 10                	jg     10004abb <monikaBsod(char*)+0x8a>
10004aab:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004aaf:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004ab5:	7e 98                	jle    10004a4f <monikaBsod(char*)+0x1e>
10004ab7:	31 db                	xor    ebx,ebx
10004ab9:	eb 25                	jmp    10004ae0 <monikaBsod(char*)+0xaf>
10004abb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004abd: R_386_32	screen
10004ac1:	b9 80 02 00 00       	mov    ecx,0x280
10004ac6:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004ac8:	46                   	inc    esi
10004ac9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004acd:	99                   	cdq    
10004ace:	f7 f9                	idiv   ecx
10004ad0:	50                   	push   eax
10004ad1:	52                   	push   edx
10004ad2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ad4: R_386_32	screen
10004ad8:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004adb:	83 c4 10             	add    esp,0x10
10004ade:	eb c2                	jmp    10004aa2 <monikaBsod(char*)+0x71>
10004ae0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004ae4:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004ae8:	84 c0                	test   al,al
10004aea:	74 1d                	je     10004b09 <monikaBsod(char*)+0xd8>
10004aec:	b9 19 00 00 00       	mov    ecx,0x19
10004af1:	52                   	push   edx
10004af2:	50                   	push   eax
10004af3:	89 d8                	mov    eax,ebx
10004af5:	43                   	inc    ebx
10004af6:	99                   	cdq    
10004af7:	f7 f9                	idiv   ecx
10004af9:	83 c0 0a             	add    eax,0xa
10004afc:	42                   	inc    edx
10004afd:	50                   	push   eax
10004afe:	52                   	push   edx
10004aff:	e8 fc ff ff ff       	call   10004b00 <monikaBsod(char*)+0xcf>	10004b00: R_386_PC32	drawVGAChar(int, int, int)
10004b04:	83 c4 10             	add    esp,0x10
10004b07:	eb d7                	jmp    10004ae0 <monikaBsod(char*)+0xaf>
10004b09:	f4                   	hlt    
10004b0a:	eb fd                	jmp    10004b09 <monikaBsod(char*)+0xd8>

10004b0c <NiInstallSysHooks()>:
10004b0c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004b0e: R_386_32	guiPanicHandler
	10004b12: R_386_32	monikaBsod(char*)
10004b16:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004b18: R_386_32	systemCallHandlers
	10004b1c: R_386_32	NiSystemCallHandler(regs*)
10004b20:	c3                   	ret    

10004b21 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004b21:	56                   	push   esi
10004b22:	53                   	push   ebx
10004b23:	83 ec 10             	sub    esp,0x10
10004b26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004b2a:	68 47 55 00 10       	push   0x10005547	10004b2b: R_386_32	.text
10004b2f:	e8 fc ff ff ff       	call   10004b30 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004b30: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b34:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004b3b:	e8 fc ff ff ff       	call   10004b3c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004b3c: R_386_PC32	malloc
10004b40:	89 c6                	mov    esi,eax
10004b42:	58                   	pop    eax
10004b43:	5a                   	pop    edx
10004b44:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004b4a:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004b50:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004b56:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004b5c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b5e: R_386_32	ctxt
10004b62:	56                   	push   esi
10004b63:	e8 fc ff ff ff       	call   10004b64 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004b64: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004b68:	83 c4 18             	add    esp,0x18
10004b6b:	56                   	push   esi
10004b6c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b6e: R_386_32	desktop
10004b72:	e8 fc ff ff ff       	call   10004b73 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004b73: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b77:	59                   	pop    ecx
10004b78:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b7a: R_386_32	desktop
10004b7e:	e8 fc ff ff ff       	call   10004b7f <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004b7f: R_386_PC32	NIDesktop::completeRefresh()
10004b83:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004b89:	89 34 24             	mov    DWORD PTR [esp],esi
10004b8c:	e8 fc ff ff ff       	call   10004b8d <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004b8d: R_386_PC32	NIWindow::drawBasicWindow()
10004b91:	83 c4 14             	add    esp,0x14
10004b94:	31 c0                	xor    eax,eax
10004b96:	31 d2                	xor    edx,edx
10004b98:	5b                   	pop    ebx
10004b99:	5e                   	pop    esi
10004b9a:	c3                   	ret    

10004b9b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b9b:	55                   	push   ebp
10004b9c:	57                   	push   edi
10004b9d:	56                   	push   esi
10004b9e:	31 f6                	xor    esi,esi
10004ba0:	53                   	push   ebx
10004ba1:	83 ec 28             	sub    esp,0x28
10004ba4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004ba8:	68 62 55 00 10       	push   0x10005562	10004ba9: R_386_32	.text
10004bad:	e8 fc ff ff ff       	call   10004bae <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004bae: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bb2:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004bb8:	83 c4 10             	add    esp,0x10
10004bbb:	31 c0                	xor    eax,eax
10004bbd:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004bc0:	7e 30                	jle    10004bf2 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004bc2:	31 ff                	xor    edi,edi
10004bc4:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004bc7:	7e 26                	jle    10004bef <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004bc9:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004bcf:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004bd2:	83 fa ff             	cmp    edx,0xffffffff
10004bd5:	74 14                	je     10004beb <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004bd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004bdb:	52                   	push   edx
10004bdc:	56                   	push   esi
10004bdd:	57                   	push   edi
10004bde:	53                   	push   ebx
10004bdf:	e8 fc ff ff ff       	call   10004be0 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004be0: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004be4:	83 c4 10             	add    esp,0x10
10004be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004beb:	40                   	inc    eax
10004bec:	47                   	inc    edi
10004bed:	eb d5                	jmp    10004bc4 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004bef:	46                   	inc    esi
10004bf0:	eb cb                	jmp    10004bbd <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004bf2:	50                   	push   eax
10004bf3:	50                   	push   eax
10004bf4:	53                   	push   ebx
10004bf5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004bf7: R_386_32	desktop
10004bfb:	e8 fc ff ff ff       	call   10004bfc <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004bfc: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004c00:	83 c4 2c             	add    esp,0x2c
10004c03:	31 c0                	xor    eax,eax
10004c05:	5b                   	pop    ebx
10004c06:	31 d2                	xor    edx,edx
10004c08:	5e                   	pop    esi
10004c09:	5f                   	pop    edi
10004c0a:	5d                   	pop    ebp
10004c0b:	c3                   	ret    

10004c0c <NiSystemCallHandler(regs*)>:
10004c0c:	53                   	push   ebx
10004c0d:	83 ec 14             	sub    esp,0x14
10004c10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004c14:	68 84 55 00 10       	push   0x10005584	10004c15: R_386_32	.text
10004c19:	e8 fc ff ff ff       	call   10004c1a <NiSystemCallHandler(regs*)+0xe>	10004c1a: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c1e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10004c21:	83 c4 10             	add    esp,0x10
10004c24:	83 f9 04             	cmp    ecx,0x4
10004c27:	74 1d                	je     10004c46 <NiSystemCallHandler(regs*)+0x3a>
10004c29:	83 f9 05             	cmp    ecx,0x5
10004c2c:	74 2a                	je     10004c58 <NiSystemCallHandler(regs*)+0x4c>
10004c2e:	83 c8 ff             	or     eax,0xffffffff
10004c31:	85 c9                	test   ecx,ecx
10004c33:	89 c2                	mov    edx,eax
10004c35:	75 44                	jne    10004c7b <NiSystemCallHandler(regs*)+0x6f>
10004c37:	50                   	push   eax
10004c38:	50                   	push   eax
10004c39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004c3c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004c3f:	e8 fc ff ff ff       	call   10004c40 <NiSystemCallHandler(regs*)+0x34>	10004c40: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004c44:	eb 0d                	jmp    10004c53 <NiSystemCallHandler(regs*)+0x47>
10004c46:	50                   	push   eax
10004c47:	50                   	push   eax
10004c48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10004c4b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10004c4e:	e8 fc ff ff ff       	call   10004c4f <NiSystemCallHandler(regs*)+0x43>	10004c4f: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004c53:	83 c4 10             	add    esp,0x10
10004c56:	eb 23                	jmp    10004c7b <NiSystemCallHandler(regs*)+0x6f>
10004c58:	83 ec 0c             	sub    esp,0xc
10004c5b:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
10004c5e:	68 99 55 00 10       	push   0x10005599	10004c5f: R_386_32	.text
10004c63:	e8 fc ff ff ff       	call   10004c64 <NiSystemCallHandler(regs*)+0x58>	10004c64: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c68:	58                   	pop    eax
10004c69:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004c6f:	e8 fc ff ff ff       	call   10004c70 <NiSystemCallHandler(regs*)+0x64>	10004c70: R_386_PC32	NIWindow::drawBasicWindow()
10004c74:	83 c4 10             	add    esp,0x10
10004c77:	31 c0                	xor    eax,eax
10004c79:	31 d2                	xor    edx,edx
10004c7b:	83 c4 08             	add    esp,0x8
10004c7e:	5b                   	pop    ebx
10004c7f:	c3                   	ret    

10004c80 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004c80:	83 ec 18             	sub    esp,0x18
10004c83:	68 99 55 00 10       	push   0x10005599	10004c84: R_386_32	.text
10004c88:	e8 fc ff ff ff       	call   10004c89 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004c89: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c8d:	58                   	pop    eax
10004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c92:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004c98:	e8 fc ff ff ff       	call   10004c99 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004c99: R_386_PC32	NIWindow::drawBasicWindow()
10004c9d:	31 c0                	xor    eax,eax
10004c9f:	31 d2                	xor    edx,edx
10004ca1:	83 c4 1c             	add    esp,0x1c
10004ca4:	c3                   	ret    
10004ca5:	90                   	nop

10004ca6 <NIWindow::invalidate()>:
10004ca6:	53                   	push   ebx
10004ca7:	83 ec 08             	sub    esp,0x8
10004caa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004cae:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004cb2:	74 1d                	je     10004cd1 <NIWindow::invalidate()+0x2b>
10004cb4:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004cb8:	74 17                	je     10004cd1 <NIWindow::invalidate()+0x2b>
10004cba:	83 ec 0c             	sub    esp,0xc
10004cbd:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004cc0:	e8 fc ff ff ff       	call   10004cc1 <NIWindow::invalidate()+0x1b>	10004cc1: R_386_PC32	free
10004cc5:	59                   	pop    ecx
10004cc6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004cc9:	e8 fc ff ff ff       	call   10004cca <NIWindow::invalidate()+0x24>	10004cca: R_386_PC32	free
10004cce:	83 c4 10             	add    esp,0x10
10004cd1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004cd8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004cdf:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004ce3:	83 c4 08             	add    esp,0x8
10004ce6:	5b                   	pop    ebx
10004ce7:	c3                   	ret    

10004ce8 <NIWindow::putpixel(int, int, unsigned int)>:
10004ce8:	56                   	push   esi
10004ce9:	53                   	push   ebx
10004cea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004cf2:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004cf5:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004cf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004cfd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004d01:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004d04:	83 fe 04             	cmp    esi,0x4
10004d07:	75 05                	jne    10004d0e <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004d09:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004d0c:	eb 0e                	jmp    10004d1c <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004d0e:	83 fe 02             	cmp    esi,0x2
10004d11:	75 06                	jne    10004d19 <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004d13:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004d17:	eb 03                	jmp    10004d1c <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004d19:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004d1c:	5b                   	pop    ebx
10004d1d:	5e                   	pop    esi
10004d1e:	c3                   	ret    
10004d1f:	90                   	nop

10004d20 <NIWindow::drawBasicWindow()>:
10004d20:	55                   	push   ebp
10004d21:	57                   	push   edi
10004d22:	56                   	push   esi
10004d23:	31 f6                	xor    esi,esi
10004d25:	53                   	push   ebx
10004d26:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004d2a:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004d2d:	7e 2e                	jle    10004d5d <NIWindow::drawBasicWindow()+0x3d>
10004d2f:	31 db                	xor    ebx,ebx
10004d31:	83 fe 19             	cmp    esi,0x19
10004d34:	0f 9e c3             	setle  bl
10004d37:	31 ff                	xor    edi,edi
10004d39:	4b                   	dec    ebx
10004d3a:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004d40:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004d46:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004d49:	7e 0f                	jle    10004d5a <NIWindow::drawBasicWindow()+0x3a>
10004d4b:	53                   	push   ebx
10004d4c:	56                   	push   esi
10004d4d:	57                   	push   edi
10004d4e:	47                   	inc    edi
10004d4f:	55                   	push   ebp
10004d50:	e8 fc ff ff ff       	call   10004d51 <NIWindow::drawBasicWindow()+0x31>	10004d51: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004d55:	83 c4 10             	add    esp,0x10
10004d58:	eb ec                	jmp    10004d46 <NIWindow::drawBasicWindow()+0x26>
10004d5a:	46                   	inc    esi
10004d5b:	eb cd                	jmp    10004d2a <NIWindow::drawBasicWindow()+0xa>
10004d5d:	5b                   	pop    ebx
10004d5e:	5e                   	pop    esi
10004d5f:	5f                   	pop    edi
10004d60:	5d                   	pop    ebp
10004d61:	c3                   	ret    

10004d62 <NIWindow::rerender()>:
10004d62:	57                   	push   edi
10004d63:	56                   	push   esi
10004d64:	53                   	push   ebx
10004d65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004d69:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004d6d:	74 0c                	je     10004d7b <NIWindow::rerender()+0x19>
10004d6f:	83 ec 0c             	sub    esp,0xc
10004d72:	53                   	push   ebx
10004d73:	e8 fc ff ff ff       	call   10004d74 <NIWindow::rerender()+0x12>	10004d74: R_386_PC32	NIWindow::invalidate()
10004d78:	83 c4 10             	add    esp,0x10
10004d7b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004d7e:	83 ec 0c             	sub    esp,0xc
10004d81:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004d84:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004d8b:	50                   	push   eax
10004d8c:	e8 fc ff ff ff       	call   10004d8d <NIWindow::rerender()+0x2b>	10004d8d: R_386_PC32	malloc
10004d91:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004d95:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004d98:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004d9c:	89 34 24             	mov    DWORD PTR [esp],esi
10004d9f:	e8 fc ff ff ff       	call   10004da0 <NIWindow::rerender()+0x3e>	10004da0: R_386_PC32	malloc
10004da4:	83 c4 10             	add    esp,0x10
10004da7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004daa:	31 c0                	xor    eax,eax
10004dac:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004daf:	7e 6a                	jle    10004e1b <NIWindow::rerender()+0xb9>
10004db1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004db8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004dbb:	01 d6                	add    esi,edx
10004dbd:	83 f8 06             	cmp    eax,0x6
10004dc0:	7f 1b                	jg     10004ddd <NIWindow::rerender()+0x7b>
10004dc2:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004dc5: R_386_32	curveLookup7
10004dc9:	66 89 0e             	mov    WORD PTR [esi],cx
10004dcc:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004dcf:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004dd2: R_386_32	curveLookup7
10004dd6:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004ddb:	eb 3b                	jmp    10004e18 <NIWindow::rerender()+0xb6>
10004ddd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004de0:	8d 79 fa             	lea    edi,[ecx-0x6]
10004de3:	39 c7                	cmp    edi,eax
10004de5:	7f 22                	jg     10004e09 <NIWindow::rerender()+0xa7>
10004de7:	29 c1                	sub    ecx,eax
10004de9:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004dec: R_386_32	curveLookup7
10004df0:	66 89 0e             	mov    WORD PTR [esi],cx
10004df3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004df6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004df9:	29 c1                	sub    ecx,eax
10004dfb:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004dfe: R_386_32	curveLookup7
10004e02:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004e07:	eb 0f                	jmp    10004e18 <NIWindow::rerender()+0xb6>
10004e09:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004e0e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004e11:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004e18:	40                   	inc    eax
10004e19:	eb 91                	jmp    10004dac <NIWindow::rerender()+0x4a>
10004e1b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004e1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004e23:	5b                   	pop    ebx
10004e24:	5e                   	pop    esi
10004e25:	5f                   	pop    edi
10004e26:	e9 f5 fe ff ff       	jmp    10004d20 <NIWindow::drawBasicWindow()>
10004e2b:	90                   	nop

10004e2c <NIWindow::changeContext(NIContext*, int, int)>:
10004e2c:	55                   	push   ebp
10004e2d:	57                   	push   edi
10004e2e:	56                   	push   esi
10004e2f:	53                   	push   ebx
10004e30:	83 ec 18             	sub    esp,0x18
10004e33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004e37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004e3b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004e3f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004e43:	53                   	push   ebx
10004e44:	e8 fc ff ff ff       	call   10004e45 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004e45: R_386_PC32	NIWindow::invalidate()
10004e49:	89 33                	mov    DWORD PTR [ebx],esi
10004e4b:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004e4e:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004e51:	83 c4 10             	add    esp,0x10
10004e54:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004e5a:	83 f8 08             	cmp    eax,0x8
10004e5d:	7f 09                	jg     10004e68 <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004e5f:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004e66:	eb 15                	jmp    10004e7d <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e68:	83 f8 10             	cmp    eax,0x10
10004e6b:	7f 09                	jg     10004e76 <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004e6d:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004e74:	eb 07                	jmp    10004e7d <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e76:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004e7d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004e81:	83 c4 0c             	add    esp,0xc
10004e84:	5b                   	pop    ebx
10004e85:	5e                   	pop    esi
10004e86:	5f                   	pop    edi
10004e87:	5d                   	pop    ebp
10004e88:	e9 d5 fe ff ff       	jmp    10004d62 <NIWindow::rerender()>
10004e8d:	90                   	nop

10004e8e <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004e96:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004e9a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004e9d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004ea4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004ea8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004eac:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004eaf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004eb6:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004ebd:	e9 6a ff ff ff       	jmp    10004e2c <NIWindow::changeContext(NIContext*, int, int)>

10004ec2 <NIWindow::request()>:
10004ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004ec6:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004eca:	75 05                	jne    10004ed1 <NIWindow::request()+0xf>
10004ecc:	e9 91 fe ff ff       	jmp    10004d62 <NIWindow::rerender()>
10004ed1:	c3                   	ret    

10004ed2 <NIWindow::SHADOW_TEST()>:
10004ed2:	55                   	push   ebp
10004ed3:	57                   	push   edi
10004ed4:	56                   	push   esi
10004ed5:	53                   	push   ebx
10004ed6:	83 ec 28             	sub    esp,0x28
10004ed9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004edd:	53                   	push   ebx
10004ede:	e8 fc ff ff ff       	call   10004edf <NIWindow::SHADOW_TEST()+0xd>	10004edf: R_386_PC32	NIWindow::request()
10004ee3:	83 c4 10             	add    esp,0x10
10004ee6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004ee9:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004eec:	74 10                	je     10004efe <NIWindow::SHADOW_TEST()+0x2c>
10004eee:	83 ec 0c             	sub    esp,0xc
10004ef1:	68 b8 55 00 10       	push   0x100055b8	10004ef2: R_386_32	.text
10004ef6:	e8 fc ff ff ff       	call   10004ef7 <NIWindow::SHADOW_TEST()+0x25>	10004ef7: R_386_PC32	KePanic(char const*)
10004efb:	83 c4 10             	add    esp,0x10
10004efe:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004f02:	0f 85 28 01 00 00    	jne    10005030 <NIWindow::SHADOW_TEST()+0x15e>
10004f08:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004f10:	31 ff                	xor    edi,edi
10004f12:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004f15:	0f 8e 15 01 00 00    	jle    10005030 <NIWindow::SHADOW_TEST()+0x15e>
10004f1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004f1e:	8d 04 b8             	lea    eax,[eax+edi*4]
10004f21:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004f24:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004f28:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004f2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004f30:	89 34 24             	mov    DWORD PTR [esp],esi
10004f33:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004f36:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004f39:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004f3d:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004f40:	0f 8e d4 00 00 00    	jle    1000501a <NIWindow::SHADOW_TEST()+0x148>
10004f46:	83 ff 05             	cmp    edi,0x5
10004f49:	7e 1f                	jle    10004f6a <NIWindow::SHADOW_TEST()+0x98>
10004f4b:	8d 41 fb             	lea    eax,[ecx-0x5]
10004f4e:	39 f8                	cmp    eax,edi
10004f50:	7e 18                	jle    10004f6a <NIWindow::SHADOW_TEST()+0x98>
10004f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004f56:	83 c0 05             	add    eax,0x5
10004f59:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f5c:	7d 0c                	jge    10004f6a <NIWindow::SHADOW_TEST()+0x98>
10004f5e:	8d 45 fb             	lea    eax,[ebp-0x5]
10004f61:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f64:	0f 8f a8 00 00 00    	jg     10005012 <NIWindow::SHADOW_TEST()+0x140>
10004f6a:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004f6e:	be ea 01 00 00       	mov    esi,0x1ea
10004f73:	29 f9                	sub    ecx,edi
10004f75:	89 f0                	mov    eax,esi
10004f77:	83 c1 04             	add    ecx,0x4
10004f7a:	99                   	cdq    
10004f7b:	f7 f9                	idiv   ecx
10004f7d:	89 c1                	mov    ecx,eax
10004f7f:	89 f0                	mov    eax,esi
10004f81:	99                   	cdq    
10004f82:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004f86:	83 f8 0a             	cmp    eax,0xa
10004f89:	7d 05                	jge    10004f90 <NIWindow::SHADOW_TEST()+0xbe>
10004f8b:	b8 0a 00 00 00       	mov    eax,0xa
10004f90:	39 c1                	cmp    ecx,eax
10004f92:	7d 02                	jge    10004f96 <NIWindow::SHADOW_TEST()+0xc4>
10004f94:	89 c1                	mov    ecx,eax
10004f96:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004f99:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f9e:	83 c5 04             	add    ebp,0x4
10004fa1:	99                   	cdq    
10004fa2:	f7 fd                	idiv   ebp
10004fa4:	89 c6                	mov    esi,eax
10004fa6:	83 f8 0a             	cmp    eax,0xa
10004fa9:	7d 05                	jge    10004fb0 <NIWindow::SHADOW_TEST()+0xde>
10004fab:	be 0a 00 00 00       	mov    esi,0xa
10004fb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004fb3:	8d 68 05             	lea    ebp,[eax+0x5]
10004fb6:	b8 ea 01 00 00       	mov    eax,0x1ea
10004fbb:	99                   	cdq    
10004fbc:	f7 fd                	idiv   ebp
10004fbe:	39 c6                	cmp    esi,eax
10004fc0:	7d 02                	jge    10004fc4 <NIWindow::SHADOW_TEST()+0xf2>
10004fc2:	89 c6                	mov    esi,eax
10004fc4:	89 f0                	mov    eax,esi
10004fc6:	89 ca                	mov    edx,ecx
10004fc8:	0f af c6             	imul   eax,esi
10004fcb:	0f af d1             	imul   edx,ecx
10004fce:	0f af f1             	imul   esi,ecx
10004fd1:	01 d0                	add    eax,edx
10004fd3:	8d 04 c6             	lea    eax,[esi+eax*8]
10004fd6:	c1 f8 08             	sar    eax,0x8
10004fd9:	83 f8 66             	cmp    eax,0x66
10004fdc:	7e 46                	jle    10005024 <NIWindow::SHADOW_TEST()+0x152>
10004fde:	8d 50 9a             	lea    edx,[eax-0x66]
10004fe1:	d1 fa                	sar    edx,1
10004fe3:	8d 42 66             	lea    eax,[edx+0x66]
10004fe6:	83 f8 73             	cmp    eax,0x73
10004fe9:	7e 39                	jle    10005024 <NIWindow::SHADOW_TEST()+0x152>
10004feb:	83 ea 0d             	sub    edx,0xd
10004fee:	c1 fa 02             	sar    edx,0x2
10004ff1:	8d 42 73             	lea    eax,[edx+0x73]
10004ff4:	83 f8 7f             	cmp    eax,0x7f
10004ff7:	7f 19                	jg     10005012 <NIWindow::SHADOW_TEST()+0x140>
10004ff9:	50                   	push   eax
10004ffa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004ffd:	01 f8                	add    eax,edi
10004fff:	50                   	push   eax
10005000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005004:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10005007:	50                   	push   eax
10005008:	ff 33                	push   DWORD PTR [ebx]
1000500a:	e8 fc ff ff ff       	call   1000500b <NIWindow::SHADOW_TEST()+0x139>	1000500b: R_386_PC32	NIContext::drvDarken4(int, int, int)
1000500f:	83 c4 10             	add    esp,0x10
10005012:	ff 04 24             	inc    DWORD PTR [esp]
10005015:	e9 19 ff ff ff       	jmp    10004f33 <NIWindow::SHADOW_TEST()+0x61>
1000501a:	47                   	inc    edi
1000501b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000501f:	e9 ee fe ff ff       	jmp    10004f12 <NIWindow::SHADOW_TEST()+0x40>
10005024:	83 f8 0a             	cmp    eax,0xa
10005027:	7d d0                	jge    10004ff9 <NIWindow::SHADOW_TEST()+0x127>
10005029:	b8 0a 00 00 00       	mov    eax,0xa
1000502e:	eb c9                	jmp    10004ff9 <NIWindow::SHADOW_TEST()+0x127>
10005030:	83 c4 1c             	add    esp,0x1c
10005033:	5b                   	pop    ebx
10005034:	5e                   	pop    esi
10005035:	5f                   	pop    edi
10005036:	5d                   	pop    ebp
10005037:	c3                   	ret    

10005038 <NIWindow::realdraw()>:
10005038:	55                   	push   ebp
10005039:	57                   	push   edi
1000503a:	56                   	push   esi
1000503b:	53                   	push   ebx
1000503c:	83 ec 18             	sub    esp,0x18
1000503f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005043:	53                   	push   ebx
10005044:	e8 fc ff ff ff       	call   10005045 <NIWindow::realdraw()+0xd>	10005045: R_386_PC32	NIWindow::request()
10005049:	83 c4 10             	add    esp,0x10
1000504c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
1000504f:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10005052:	74 10                	je     10005064 <NIWindow::realdraw()+0x2c>
10005054:	83 ec 0c             	sub    esp,0xc
10005057:	68 b8 55 00 10       	push   0x100055b8	10005058: R_386_32	.text
1000505c:	e8 fc ff ff ff       	call   1000505d <NIWindow::realdraw()+0x25>	1000505d: R_386_PC32	KePanic(char const*)
10005061:	83 c4 10             	add    esp,0x10
10005064:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10005068:	75 46                	jne    100050b0 <NIWindow::realdraw()+0x78>
1000506a:	31 f6                	xor    esi,esi
1000506c:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
1000506f:	7e 3f                	jle    100050b0 <NIWindow::realdraw()+0x78>
10005071:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10005074:	8d 04 b0             	lea    eax,[eax+esi*4]
10005077:	0f b7 28             	movzx  ebp,WORD PTR [eax]
1000507a:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
1000507e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10005081:	89 c2                	mov    edx,eax
10005083:	29 fa                	sub    edx,edi
10005085:	39 ea                	cmp    edx,ebp
10005087:	7e 24                	jle    100050ad <NIWindow::realdraw()+0x75>
10005089:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000508c:	0f af c6             	imul   eax,esi
1000508f:	01 e8                	add    eax,ebp
10005091:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005094:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10005097:	01 f0                	add    eax,esi
10005099:	50                   	push   eax
1000509a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000509d:	01 e8                	add    eax,ebp
1000509f:	45                   	inc    ebp
100050a0:	50                   	push   eax
100050a1:	ff 33                	push   DWORD PTR [ebx]
100050a3:	e8 fc ff ff ff       	call   100050a4 <NIWindow::realdraw()+0x6c>	100050a4: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
100050a8:	83 c4 10             	add    esp,0x10
100050ab:	eb d1                	jmp    1000507e <NIWindow::realdraw()+0x46>
100050ad:	46                   	inc    esi
100050ae:	eb bc                	jmp    1000506c <NIWindow::realdraw()+0x34>
100050b0:	83 c4 0c             	add    esp,0xc
100050b3:	5b                   	pop    ebx
100050b4:	5e                   	pop    esi
100050b5:	5f                   	pop    edi
100050b6:	5d                   	pop    ebp
100050b7:	c3                   	ret    

100050b8 <List<NIWindow*>::insertAtHead(NIWindow*)>:
100050b8:	53                   	push   ebx
100050b9:	83 ec 14             	sub    esp,0x14
100050bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100050c0:	6a 0c                	push   0xc
100050c2:	e8 fc ff ff ff       	call   100050c3 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	100050c3: R_386_PC32	malloc
100050c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100050cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100050d2:	89 10                	mov    DWORD PTR [eax],edx
100050d4:	83 c4 10             	add    esp,0x10
100050d7:	8b 13                	mov    edx,DWORD PTR [ebx]
100050d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100050dc:	85 d2                	test   edx,edx
100050de:	74 05                	je     100050e5 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
100050e0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100050e3:	eb 03                	jmp    100050e8 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
100050e5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100050e8:	89 03                	mov    DWORD PTR [ebx],eax
100050ea:	83 c4 08             	add    esp,0x8
100050ed:	5b                   	pop    ebx
100050ee:	c3                   	ret    
100050ef:	90                   	nop

100050f0 <List<NIWindow*>::deleteElement(NIWindow*&)>:
100050f0:	57                   	push   edi
100050f1:	56                   	push   esi
100050f2:	53                   	push   ebx
100050f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100050f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100050fb:	8b 19                	mov    ebx,DWORD PTR [ecx]
100050fd:	85 db                	test   ebx,ebx
100050ff:	74 5e                	je     1000515f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005101:	8b 30                	mov    esi,DWORD PTR [eax]
10005103:	89 da                	mov    edx,ebx
10005105:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10005108:	8b 3a                	mov    edi,DWORD PTR [edx]
1000510a:	85 c0                	test   eax,eax
1000510c:	74 08                	je     10005116 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
1000510e:	39 f7                	cmp    edi,esi
10005110:	73 04                	jae    10005116 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005112:	89 c2                	mov    edx,eax
10005114:	eb ef                	jmp    10005105 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10005116:	39 f7                	cmp    edi,esi
10005118:	75 45                	jne    1000515f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
1000511a:	39 d3                	cmp    ebx,edx
1000511c:	75 18                	jne    10005136 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
1000511e:	89 01                	mov    DWORD PTR [ecx],eax
10005120:	85 c0                	test   eax,eax
10005122:	75 09                	jne    1000512d <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10005124:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
1000512b:	eb 1e                	jmp    1000514b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000512d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005134:	eb 15                	jmp    1000514b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005136:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005139:	85 c0                	test   eax,eax
1000513b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000513e:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005141:	74 05                	je     10005148 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005143:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10005146:	eb 03                	jmp    1000514b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005148:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
1000514b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005153:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10005157:	5b                   	pop    ebx
10005158:	5e                   	pop    esi
10005159:	5f                   	pop    edi
1000515a:	e9 fc ff ff ff       	jmp    1000515b <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	1000515b: R_386_PC32	operator delete(void*, unsigned long)
1000515f:	5b                   	pop    ebx
10005160:	5e                   	pop    esi
10005161:	5f                   	pop    edi
10005162:	c3                   	ret    
10005163:	43                   	inc    ebx
10005164:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005166:	42                   	inc    edx
10005167:	61                   	popa   
10005168:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005169:	61                   	popa   
1000516a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000516b:	61                   	popa   
1000516c:	2f                   	das    
1000516d:	53                   	push   ebx
1000516e:	79 73                	jns    100051e3 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005170:	74 65                	je     100051d7 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005172:	6d                   	ins    DWORD PTR es:[edi],dx
10005173:	2f                   	das    
10005174:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005175:	65 77 67             	gs ja  100051df <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
10005178:	75 69                	jne    100051e3 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000517a:	2e 65 78 65          	cs gs js 100051e3 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000517e:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005181:	4e                   	dec    esi
10005182:	43                   	inc    ebx
10005183:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005186:	4e                   	dec    esi
10005187:	32 00                	xor    al,BYTE PTR [eax]
10005189:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
1000518c:	53                   	push   ebx
1000518d:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005190:	43                   	inc    ebx
10005191:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005192:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005193:	74 65                	je     100051fa <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
10005195:	78 74                	js     1000520b <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
10005197:	3a 3a                	cmp    bh,BYTE PTR [edx]
10005199:	64 72 76             	fs jb  10005212 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
1000519c:	52                   	push   edx
1000519d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
1000519f:	64 65 72 54          	fs gs jb 100051f7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
100051a3:	54                   	push   esp
100051a4:	46                   	inc    esi
100051a5:	34 00                	xor    al,0x0
100051a7:	43                   	inc    ebx
100051a8:	3a 2f                	cmp    ch,BYTE PTR [edi]
100051aa:	42                   	inc    edx
100051ab:	61                   	popa   
100051ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051ad:	61                   	popa   
100051ae:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051af:	61                   	popa   
100051b0:	2f                   	das    
100051b1:	46                   	inc    esi
100051b2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051b4:	74 73                	je     10005229 <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
100051b6:	2f                   	das    
100051b7:	53                   	push   ebx
100051b8:	46                   	inc    esi
100051b9:	4e                   	dec    esi
100051ba:	00 43 41             	add    BYTE PTR [ebx+0x41],al
100051bd:	4e                   	dec    esi
100051be:	4e                   	dec    esi
100051bf:	4f                   	dec    edi
100051c0:	54                   	push   esp
100051c1:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
100051c5:	44                   	inc    esp
100051c6:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100051c9:	4e                   	dec    esi
100051ca:	54                   	push   esp
100051cb:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
100051cf:	45                   	inc    ebp
100051d0:	43                   	inc    ebx
100051d1:	54                   	push   esp
100051d2:	4f                   	dec    edi
100051d3:	52                   	push   edx
100051d4:	59                   	pop    ecx
100051d5:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100051d8:	2f                   	das    
100051d9:	42                   	inc    edx
100051da:	61                   	popa   
100051db:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051dc:	61                   	popa   
100051dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051de:	61                   	popa   
100051df:	2f                   	das    
100051e0:	46                   	inc    esi
100051e1:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051e2:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051e3:	74 73                	je     10005258 <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
100051e5:	2f                   	das    
100051e6:	53                   	push   ebx
100051e7:	46                   	inc    esi
100051e8:	4e                   	dec    esi
100051e9:	2f                   	das    
100051ea:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
100051ed:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051ee:	74 20                	je     10005210 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
100051f0:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100051f7:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100051fe:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005202:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005208:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005209:	74 3a                	je     10005245 <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
1000520b:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10005211:	53                   	push   ebx
10005212:	46                   	inc    esi
10005213:	4e                   	dec    esi
10005214:	5f                   	pop    edi
10005215:	52                   	push   edx
10005216:	45                   	inc    ebp
10005217:	53                   	push   ebx
10005218:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000521e:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005221:	6d                   	ins    DWORD PTR es:[edi],dx
10005222:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005223:	72 79                	jb     1000529e <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ae>
10005225:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005228:	6c                   	ins    BYTE PTR es:[edi],dx
10005229:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000522a:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
1000522d:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10005234:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005235:	72 00                	jb     10005237 <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
10005237:	42                   	inc    edx
10005238:	61                   	popa   
10005239:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
1000523d:	6c                   	ins    BYTE PTR es:[edi],dx
1000523e:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005242:	72 6d                	jb     100052b1 <_ssfn__compute_huffman_codes::length_dezigzag+0x11>
10005244:	61                   	popa   
10005245:	74 00                	je     10005247 <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
10005247:	4e                   	dec    esi
10005248:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005249:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
1000524c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000524d:	74 20                	je     1000526f <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
1000524f:	66 61                	popaw  
10005251:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10005254:	66 6f                	outs   dx,WORD PTR ds:[esi]
10005256:	75 6e                	jne    100052c6 <_ssfn__zdist_extra+0x6>
10005258:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
1000525c:	76 61                	jbe    100052bf <_ssfn__compute_huffman_codes::length_dezigzag+0x1f>
1000525e:	6c                   	ins    BYTE PTR es:[edi],dx
1000525f:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10005267:	20 76 61             	and    BYTE PTR [esi+0x61],dh
1000526a:	6c                   	ins    BYTE PTR es:[edi],dx
1000526b:	75 65                	jne    100052d2 <_ssfn__zdist_extra+0x12>
1000526d:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005270:	76 61                	jbe    100052d3 <_ssfn__zdist_extra+0x13>
10005272:	6c                   	ins    BYTE PTR es:[edi],dx
10005273:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
1000527b:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
1000527e:	76 61                	jbe    100052e1 <_ssfn__zdist_extra+0x21>
10005280:	6c                   	ins    BYTE PTR es:[edi],dx
10005281:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10005289:	47                   	inc    edi
1000528a:	6c                   	ins    BYTE PTR es:[edi],dx
1000528b:	79 70                	jns    100052fd <_ssfn__zdist_extra+0x3d>
1000528d:	68 20 6e 6f 74       	push   0x746f6e20
10005292:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005295:	75 6e                	jne    10005305 <_ssfn__zdist_extra+0x45>
10005297:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
1000529b:	66 90                	xchg   ax,ax
1000529d:	66 90                	xchg   ax,ax
1000529f:	90                   	nop

100052a0 <_ssfn__compute_huffman_codes::length_dezigzag>:
100052a0:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
100052b0:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

100052c0 <_ssfn__zdist_extra>:
	...
100052d0:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
100052e0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
100052f0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005300:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005310:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005320:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005330:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005340 <_ssfn__zdist_base>:
10005340:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005350:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005360:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005370:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005380:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005390:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
100053a0:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
100053b0:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

100053c0 <_ssfn__zlength_extra>:
	...
100053e0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
100053f0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005400:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005410:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005420:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005440 <_ssfn__zlength_base>:
10005440:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005450:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005460:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005470:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005480:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005490:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
100054a0:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
100054b0:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
100054c0:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
100054d0:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
100054e0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
100054f0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10005500:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
10005510:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10005520:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10005530:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005540:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005550:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005560:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005570:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005580:	65 72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c     er..NiSystemCall
10005590:	48 61 6e 64 6c 65 72 0a 00 4e 69 4c 69 6e 6b 43     Handler..NiLinkC
100055a0:	6f 6d 6d 61 6e 64 43 6c 65 61 72 46 72 61 6d 65     ommandClearFrame
100055b0:	62 75 66 66 65 72 0a 00 41 53 53 45 52 54 49 4f     buffer..ASSERTIO
100055c0:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
