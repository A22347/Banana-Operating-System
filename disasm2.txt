
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 15 64 01 00       	call   c0016435 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 46 03 c0       	mov    eax,0xc0034644
c0000025:	3d 44 46 03 c0       	cmp    eax,0xc0034644
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 46 03 c0       	push   0xc0034644
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 46 03 c0       	mov    eax,0xc0034644
c0000051:	2d 44 46 03 c0       	sub    eax,0xc0034644
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 46 03 c0       	push   0xc0034644
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc f2 02 c0       	mov    ebx,0xc002f2bc
c0000097:	81 eb b8 f2 02 c0    	sub    ebx,0xc002f2b8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 f2 02 c0       	mov    esi,0xc002f2b8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 46 03 c0       	push   0xc0034644
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 44 46 03 c0       	push   0xc0034644
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1b 47 02 00       	call   c00249c8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 04 8d 01 00       	call   c0018fc9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f9 46 02 00       	call   c00249c8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 06 4c 02 00       	call   c0024ef4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 99 50 02 00       	call   c0025390 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 eb fd 01 00       	jmp    c002016a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 f2 02 c0 02 	test   BYTE PTR [edx-0x3ffd0d40],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0d40],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0d40],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0d40],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 f2 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0d40],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0d40],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	90                   	nop
c0000c71:	c3                   	ret    
c0000c72:	66 90                	xchg   ax,ax

c0000c74 <tcpip_callback_with_block>:
c0000c74:	90                   	nop
c0000c75:	c3                   	ret    
c0000c76:	66 90                	xchg   ax,ax

c0000c78 <sys_sem_new>:
c0000c78:	83 ec 1c             	sub    esp,0x1c
c0000c7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c88:	83 ec 08             	sub    esp,0x8
c0000c8b:	50                   	push   eax
c0000c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c90:	e8 6f 0f 02 00       	call   c0021c04 <KeNetCreateSemaphore>
c0000c95:	83 c4 10             	add    esp,0x10
c0000c98:	b0 00                	mov    al,0x0
c0000c9a:	83 c4 1c             	add    esp,0x1c
c0000c9d:	c3                   	ret    
c0000c9e:	66 90                	xchg   ax,ax

c0000ca0 <sys_sem_free>:
c0000ca0:	83 ec 0c             	sub    esp,0xc
c0000ca3:	83 ec 0c             	sub    esp,0xc
c0000ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000caa:	e8 8d 0f 02 00       	call   c0021c3c <KeNetFreeSemaphore>
c0000caf:	83 c4 10             	add    esp,0x10
c0000cb2:	90                   	nop
c0000cb3:	83 c4 0c             	add    esp,0xc
c0000cb6:	c3                   	ret    
c0000cb7:	90                   	nop

c0000cb8 <sys_sem_signal>:
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	83 ec 0c             	sub    esp,0xc
c0000cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cc2:	e8 91 0f 02 00       	call   c0021c58 <KeNetSignalSemaphore>
c0000cc7:	83 c4 10             	add    esp,0x10
c0000cca:	90                   	nop
c0000ccb:	83 c4 0c             	add    esp,0xc
c0000cce:	c3                   	ret    
c0000ccf:	90                   	nop

c0000cd0 <sys_arch_sem_wait>:
c0000cd0:	83 ec 0c             	sub    esp,0xc
c0000cd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cd7:	83 ec 08             	sub    esp,0x8
c0000cda:	50                   	push   eax
c0000cdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cdf:	e8 90 0f 02 00       	call   c0021c74 <KeNetWaitSemaphore>
c0000ce4:	83 c4 10             	add    esp,0x10
c0000ce7:	83 c4 0c             	add    esp,0xc
c0000cea:	c3                   	ret    
c0000ceb:	90                   	nop

c0000cec <sys_mbox_new>:
c0000cec:	b0 00                	mov    al,0x0
c0000cee:	c3                   	ret    
c0000cef:	90                   	nop

c0000cf0 <sys_mbox_free>:
c0000cf0:	90                   	nop
c0000cf1:	c3                   	ret    
c0000cf2:	66 90                	xchg   ax,ax

c0000cf4 <sys_mbox_post>:
c0000cf4:	90                   	nop
c0000cf5:	c3                   	ret    
c0000cf6:	66 90                	xchg   ax,ax

c0000cf8 <sys_arch_mbox_fetch>:
c0000cf8:	b8 00 00 00 00       	mov    eax,0x0
c0000cfd:	c3                   	ret    
c0000cfe:	66 90                	xchg   ax,ax

c0000d00 <sys_arch_mbox_tryfetch>:
c0000d00:	b8 00 00 00 00       	mov    eax,0x0
c0000d05:	c3                   	ret    
c0000d06:	66 90                	xchg   ax,ax

c0000d08 <sys_mbox_trypost>:
c0000d08:	90                   	nop
c0000d09:	c3                   	ret    
c0000d0a:	66 90                	xchg   ax,ax

c0000d0c <sys_thread_new>:
c0000d0c:	b8 00 00 00 00       	mov    eax,0x0
c0000d11:	c3                   	ret    
c0000d12:	66 90                	xchg   ax,ax

c0000d14 <sys_init>:
c0000d14:	90                   	nop
c0000d15:	c3                   	ret    

c0000d16 <largebin_index>:
c0000d16:	89 c2                	mov    edx,eax
c0000d18:	c1 ea 08             	shr    edx,0x8
c0000d1b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000d21:	77 10                	ja     c0000d33 <largebin_index+0x1d>
c0000d23:	0f bd d2             	bsr    edx,edx
c0000d26:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000d29:	d3 e8                	shr    eax,cl
c0000d2b:	83 e0 03             	and    eax,0x3
c0000d2e:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000d32:	c3                   	ret    
c0000d33:	b8 5f 00 00 00       	mov    eax,0x5f
c0000d38:	c3                   	ret    

c0000d39 <malloc_init_state>:
c0000d39:	8d 50 34             	lea    edx,[eax+0x34]
c0000d3c:	53                   	push   ebx
c0000d3d:	89 d1                	mov    ecx,edx
c0000d3f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000d45:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000d48:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000d4b:	83 c2 08             	add    edx,0x8
c0000d4e:	39 da                	cmp    edx,ebx
c0000d50:	75 f3                	jne    c0000d45 <malloc_init_state+0xc>
c0000d52:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000d5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d5e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000d68:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000d72:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d7c:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d83:	83 e2 03             	and    edx,0x3
c0000d86:	5b                   	pop    ebx
c0000d87:	83 ca 48             	or     edx,0x48
c0000d8a:	89 10                	mov    DWORD PTR [eax],edx
c0000d8c:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d8f:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d99:	c3                   	ret    

c0000d9a <malloc_consolidate>:
c0000d9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d9c:	85 d2                	test   edx,edx
c0000d9e:	0f 84 d8 00 00 00    	je     c0000e7c <malloc_consolidate+0xe2>
c0000da4:	55                   	push   ebp
c0000da5:	83 e2 fd             	and    edx,0xfffffffd
c0000da8:	57                   	push   edi
c0000da9:	89 c5                	mov    ebp,eax
c0000dab:	56                   	push   esi
c0000dac:	53                   	push   ebx
c0000dad:	8d 78 34             	lea    edi,[eax+0x34]
c0000db0:	83 ec 10             	sub    esp,0x10
c0000db3:	89 10                	mov    DWORD PTR [eax],edx
c0000db5:	c1 ea 03             	shr    edx,0x3
c0000db8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000dbc:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000dc0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000dc4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000dc7:	85 d2                	test   edx,edx
c0000dc9:	0f 84 98 00 00 00    	je     c0000e67 <malloc_consolidate+0xcd>
c0000dcf:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000dd6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000dd9:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000de0:	89 f9                	mov    ecx,edi
c0000de2:	83 e1 fe             	and    ecx,0xfffffffe
c0000de5:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000de8:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000deb:	83 e3 fc             	and    ebx,0xfffffffc
c0000dee:	83 e7 01             	and    edi,0x1
c0000df1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000df4:	75 14                	jne    c0000e0a <malloc_consolidate+0x70>
c0000df6:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000df8:	29 fa                	sub    edx,edi
c0000dfa:	01 f9                	add    ecx,edi
c0000dfc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dff:	89 fb                	mov    ebx,edi
c0000e01:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e04:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e07:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e0a:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e0d:	74 40                	je     c0000e4f <malloc_consolidate+0xb5>
c0000e0f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e12:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e15:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000e19:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e1c:	83 e7 01             	and    edi,0x1
c0000e1f:	75 0e                	jne    c0000e2f <malloc_consolidate+0x95>
c0000e21:	01 d9                	add    ecx,ebx
c0000e23:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000e26:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000e29:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000e2c:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000e2f:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000e32:	89 ce                	mov    esi,ecx
c0000e34:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000e37:	83 ce 01             	or     esi,0x1
c0000e3a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000e3d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000e40:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000e44:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000e47:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000e4a:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000e4d:	eb 0c                	jmp    c0000e5b <malloc_consolidate+0xc1>
c0000e4f:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000e52:	83 c9 01             	or     ecx,0x1
c0000e55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e58:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000e5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000e5f:	85 d2                	test   edx,edx
c0000e61:	0f 85 6f ff ff ff    	jne    c0000dd6 <malloc_consolidate+0x3c>
c0000e67:	83 c5 04             	add    ebp,0x4
c0000e6a:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000e6e:	0f 85 50 ff ff ff    	jne    c0000dc4 <malloc_consolidate+0x2a>
c0000e74:	83 c4 10             	add    esp,0x10
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	5d                   	pop    ebp
c0000e7b:	c3                   	ret    
c0000e7c:	e9 b8 fe ff ff       	jmp    c0000d39 <malloc_init_state>

c0000e81 <dlfree>:
c0000e81:	57                   	push   edi
c0000e82:	56                   	push   esi
c0000e83:	53                   	push   ebx
c0000e84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e88:	85 db                	test   ebx,ebx
c0000e8a:	0f 84 e2 00 00 00    	je     c0000f72 <dlfree+0xf1>
c0000e90:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e93:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e96:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000e9c:	89 f0                	mov    eax,esi
c0000e9e:	83 e0 fc             	and    eax,0xfffffffc
c0000ea1:	39 c1                	cmp    ecx,eax
c0000ea3:	72 24                	jb     c0000ec9 <dlfree+0x48>
c0000ea5:	c1 e8 03             	shr    eax,0x3
c0000ea8:	83 c9 03             	or     ecx,0x3
c0000eab:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000eb1:	83 e8 02             	sub    eax,0x2
c0000eb4:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000ebb:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ebd:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000ec4:	e9 a9 00 00 00       	jmp    c0000f72 <dlfree+0xf1>
c0000ec9:	83 e6 02             	and    esi,0x2
c0000ecc:	0f 85 a0 00 00 00    	jne    c0000f72 <dlfree+0xf1>
c0000ed2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ed5:	83 c9 01             	or     ecx,0x1
c0000ed8:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000ede:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ee1:	83 e1 fc             	and    ecx,0xfffffffc
c0000ee4:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ee8:	75 13                	jne    c0000efd <dlfree+0x7c>
c0000eea:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000eed:	29 da                	sub    edx,ebx
c0000eef:	01 d8                	add    eax,ebx
c0000ef1:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ef4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000ef7:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000efa:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000efd:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f03:	74 40                	je     c0000f45 <dlfree+0xc4>
c0000f05:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000f09:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000f0c:	80 e3 01             	and    bl,0x1
c0000f0f:	75 0e                	jne    c0000f1f <dlfree+0x9e>
c0000f11:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f14:	01 c8                	add    eax,ecx
c0000f16:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000f19:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f1c:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f1f:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000f25:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000f2c:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000f2f:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000f35:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000f38:	89 c1                	mov    ecx,eax
c0000f3a:	83 c9 01             	or     ecx,0x1
c0000f3d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f40:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000f43:	eb 10                	jmp    c0000f55 <dlfree+0xd4>
c0000f45:	01 c8                	add    eax,ecx
c0000f47:	89 c1                	mov    ecx,eax
c0000f49:	83 c9 01             	or     ecx,0x1
c0000f4c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f4f:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000f55:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000f5a:	76 16                	jbe    c0000f72 <dlfree+0xf1>
c0000f5c:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000f63:	74 0d                	je     c0000f72 <dlfree+0xf1>
c0000f65:	5b                   	pop    ebx
c0000f66:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000f6b:	5e                   	pop    esi
c0000f6c:	5f                   	pop    edi
c0000f6d:	e9 28 fe ff ff       	jmp    c0000d9a <malloc_consolidate>
c0000f72:	5b                   	pop    ebx
c0000f73:	5e                   	pop    esi
c0000f74:	5f                   	pop    edi
c0000f75:	c3                   	ret    

c0000f76 <sYSMALLOc>:
c0000f76:	55                   	push   ebp
c0000f77:	57                   	push   edi
c0000f78:	56                   	push   esi
c0000f79:	53                   	push   ebx
c0000f7a:	89 d3                	mov    ebx,edx
c0000f7c:	83 ec 2c             	sub    esp,0x2c
c0000f7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f83:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f89:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f93:	74 1f                	je     c0000fb4 <sYSMALLOc+0x3e>
c0000f95:	89 d0                	mov    eax,edx
c0000f97:	e8 fe fd ff ff       	call   c0000d9a <malloc_consolidate>
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000fa3:	83 e8 07             	sub    eax,0x7
c0000fa6:	50                   	push   eax
c0000fa7:	e8 33 02 00 00       	call   c00011df <dlmalloc>
c0000fac:	83 c4 10             	add    esp,0x10
c0000faf:	e9 23 02 00 00       	jmp    c00011d7 <sYSMALLOc+0x261>
c0000fb4:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000fbb:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000fc1:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000fc4:	83 c0 10             	add    eax,0x10
c0000fc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	83 e5 fc             	and    ebp,0xfffffffc
c0000fd0:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fd7:	74 02                	je     c0000fdb <sYSMALLOc+0x65>
c0000fd9:	29 ea                	sub    edx,ebp
c0000fdb:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000fdf:	f7 d9                	neg    ecx
c0000fe1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000fe5:	21 ca                	and    edx,ecx
c0000fe7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000feb:	7f 07                	jg     c0000ff4 <sYSMALLOc+0x7e>
c0000fed:	31 c0                	xor    eax,eax
c0000fef:	e9 e3 01 00 00       	jmp    c00011d7 <sYSMALLOc+0x261>
c0000ff4:	83 ec 0c             	sub    esp,0xc
c0000ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ffb:	e8 b0 52 01 00       	call   c00162b0 <sbrk>
c0001000:	83 c4 10             	add    esp,0x10
c0001003:	83 f8 ff             	cmp    eax,0xffffffff
c0001006:	89 c6                	mov    esi,eax
c0001008:	74 e3                	je     c0000fed <sYSMALLOc+0x77>
c000100a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000100e:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0001011:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0001017:	39 c2                	cmp    edx,eax
c0001019:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000101f:	75 11                	jne    c0001032 <sYSMALLOc+0xbc>
c0001021:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001025:	01 e8                	add    eax,ebp
c0001027:	83 c8 01             	or     eax,0x1
c000102a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000102d:	e9 93 00 00 00       	jmp    c00010c5 <sYSMALLOc+0x14f>
c0001032:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0001038:	a8 01                	test   al,0x1
c000103a:	0f 84 73 01 00 00    	je     c00011b3 <sYSMALLOc+0x23d>
c0001040:	85 ed                	test   ebp,ebp
c0001042:	74 12                	je     c0001056 <sYSMALLOc+0xe0>
c0001044:	39 f2                	cmp    edx,esi
c0001046:	76 0e                	jbe    c0001056 <sYSMALLOc+0xe0>
c0001048:	83 e0 fe             	and    eax,0xfffffffe
c000104b:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0001051:	e9 5d 01 00 00       	jmp    c00011b3 <sYSMALLOc+0x23d>
c0001056:	85 ed                	test   ebp,ebp
c0001058:	74 0c                	je     c0001066 <sYSMALLOc+0xf0>
c000105a:	89 f0                	mov    eax,esi
c000105c:	29 d0                	sub    eax,edx
c000105e:	01 c1                	add    ecx,eax
c0001060:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001066:	89 f2                	mov    edx,esi
c0001068:	83 e2 07             	and    edx,0x7
c000106b:	0f 84 b1 00 00 00    	je     c0001122 <sYSMALLOc+0x1ac>
c0001071:	b8 08 00 00 00       	mov    eax,0x8
c0001076:	29 d0                	sub    eax,edx
c0001078:	8d 0c 06             	lea    ecx,[esi+eax*1]
c000107b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000107f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001083:	01 e8                	add    eax,ebp
c0001085:	83 ec 0c             	sub    esp,0xc
c0001088:	8d 14 01             	lea    edx,[ecx+eax*1]
c000108b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000108f:	01 f2                	add    edx,esi
c0001091:	29 d0                	sub    eax,edx
c0001093:	01 d1                	add    ecx,edx
c0001095:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001099:	01 c1                	add    ecx,eax
c000109b:	51                   	push   ecx
c000109c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00010a0:	e8 0b 52 01 00       	call   c00162b0 <sbrk>
c00010a5:	83 c4 10             	add    esp,0x10
c00010a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00010ac:	83 f8 ff             	cmp    eax,0xffffffff
c00010af:	75 7c                	jne    c000112d <sYSMALLOc+0x1b7>
c00010b1:	83 ec 0c             	sub    esp,0xc
c00010b4:	6a 00                	push   0x0
c00010b6:	e8 f5 51 01 00       	call   c00162b0 <sbrk>
c00010bb:	83 c4 10             	add    esp,0x10
c00010be:	31 c9                	xor    ecx,ecx
c00010c0:	83 f8 ff             	cmp    eax,0xffffffff
c00010c3:	75 7e                	jne    c0001143 <sYSMALLOc+0x1cd>
c00010c5:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010cb:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010d1:	73 06                	jae    c00010d9 <sYSMALLOc+0x163>
c00010d3:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d9:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010df:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010e5:	73 06                	jae    c00010ed <sYSMALLOc+0x177>
c00010e7:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f3:	83 e2 fc             	and    edx,0xfffffffc
c00010f6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c00010fa:	0f 87 ed fe ff ff    	ja     c0000fed <sYSMALLOc+0x77>
c0001100:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001104:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001107:	29 fa                	sub    edx,edi
c0001109:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000110c:	89 fb                	mov    ebx,edi
c000110e:	83 ca 01             	or     edx,0x1
c0001111:	83 cb 01             	or     ebx,0x1
c0001114:	83 c0 08             	add    eax,0x8
c0001117:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000111a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000111d:	e9 b5 00 00 00       	jmp    c00011d7 <sYSMALLOc+0x261>
c0001122:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0001126:	31 c0                	xor    eax,eax
c0001128:	e9 52 ff ff ff       	jmp    c000107f <sYSMALLOc+0x109>
c000112d:	39 c6                	cmp    esi,eax
c000112f:	76 12                	jbe    c0001143 <sYSMALLOc+0x1cd>
c0001131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001135:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000113c:	01 f0                	add    eax,esi
c000113e:	e9 7b ff ff ff       	jmp    c00010be <sYSMALLOc+0x148>
c0001143:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001147:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000114a:	29 f0                	sub    eax,esi
c000114c:	01 c8                	add    eax,ecx
c000114e:	83 c8 01             	or     eax,0x1
c0001151:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001154:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000115a:	85 ed                	test   ebp,ebp
c000115c:	0f 84 63 ff ff ff    	je     c00010c5 <sYSMALLOc+0x14f>
c0001162:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001165:	83 e0 f8             	and    eax,0xfffffff8
c0001168:	89 c2                	mov    edx,eax
c000116a:	83 ca 01             	or     edx,0x1
c000116d:	83 f8 0f             	cmp    eax,0xf
c0001170:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001173:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000117b:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001183:	0f 86 3c ff ff ff    	jbe    c00010c5 <sYSMALLOc+0x14f>
c0001189:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000118f:	83 ec 0c             	sub    esp,0xc
c0001192:	83 c7 08             	add    edi,0x8
c0001195:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000119f:	57                   	push   edi
c00011a0:	e8 dc fc ff ff       	call   c0000e81 <dlfree>
c00011a5:	83 c4 10             	add    esp,0x10
c00011a8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011ae:	e9 12 ff ff ff       	jmp    c00010c5 <sYSMALLOc+0x14f>
c00011b3:	83 ec 0c             	sub    esp,0xc
c00011b6:	6a 00                	push   0x0
c00011b8:	e8 f3 50 01 00       	call   c00162b0 <sbrk>
c00011bd:	89 c2                	mov    edx,eax
c00011bf:	29 f2                	sub    edx,esi
c00011c1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00011c5:	83 c4 10             	add    esp,0x10
c00011c8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00011ce:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00011d2:	e9 e7 fe ff ff       	jmp    c00010be <sYSMALLOc+0x148>
c00011d7:	83 c4 2c             	add    esp,0x2c
c00011da:	5b                   	pop    ebx
c00011db:	5e                   	pop    esi
c00011dc:	5f                   	pop    edi
c00011dd:	5d                   	pop    ebp
c00011de:	c3                   	ret    

c00011df <dlmalloc>:
c00011df:	55                   	push   ebp
c00011e0:	57                   	push   edi
c00011e1:	56                   	push   esi
c00011e2:	53                   	push   ebx
c00011e3:	83 ec 1c             	sub    esp,0x1c
c00011e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00011ea:	83 f8 df             	cmp    eax,0xffffffdf
c00011ed:	0f 87 70 03 00 00    	ja     c0001563 <dlmalloc+0x384>
c00011f3:	83 c0 0b             	add    eax,0xb
c00011f6:	be 10 00 00 00       	mov    esi,0x10
c00011fb:	83 f8 0f             	cmp    eax,0xf
c00011fe:	76 05                	jbe    c0001205 <dlmalloc+0x26>
c0001200:	83 e0 f8             	and    eax,0xfffffff8
c0001203:	89 c6                	mov    esi,eax
c0001205:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000120b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001211:	75 17                	jne    c000122a <dlmalloc+0x4b>
c0001213:	85 ff                	test   edi,edi
c0001215:	0f 85 05 03 00 00    	jne    c0001520 <dlmalloc+0x341>
c000121b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001220:	e8 75 fb ff ff       	call   c0000d9a <malloc_consolidate>
c0001225:	e9 f6 02 00 00       	jmp    c0001520 <dlmalloc+0x341>
c000122a:	39 f7                	cmp    edi,esi
c000122c:	72 1f                	jb     c000124d <dlmalloc+0x6e>
c000122e:	89 f2                	mov    edx,esi
c0001230:	c1 ea 03             	shr    edx,0x3
c0001233:	83 ea 02             	sub    edx,0x2
c0001236:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000123d:	85 c0                	test   eax,eax
c000123f:	74 0c                	je     c000124d <dlmalloc+0x6e>
c0001241:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001244:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000124b:	eb 30                	jmp    c000127d <dlmalloc+0x9e>
c000124d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001253:	89 f0                	mov    eax,esi
c0001255:	77 2e                	ja     c0001285 <dlmalloc+0xa6>
c0001257:	c1 e8 03             	shr    eax,0x3
c000125a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000125e:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001265:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001268:	8d 5a f8             	lea    ebx,[edx-0x8]
c000126b:	39 c3                	cmp    ebx,eax
c000126d:	74 2e                	je     c000129d <dlmalloc+0xbe>
c000126f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001272:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001277:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000127a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000127d:	83 c0 08             	add    eax,0x8
c0001280:	e9 e0 02 00 00       	jmp    c0001565 <dlmalloc+0x386>
c0001285:	e8 8c fa ff ff       	call   c0000d16 <largebin_index>
c000128a:	83 e7 02             	and    edi,0x2
c000128d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001291:	74 0a                	je     c000129d <dlmalloc+0xbe>
c0001293:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001298:	e8 fd fa ff ff       	call   c0000d9a <malloc_consolidate>
c000129d:	8d 46 10             	lea    eax,[esi+0x10]
c00012a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a4:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c00012aa:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00012b0:	0f 84 13 01 00 00    	je     c00013c9 <dlmalloc+0x1ea>
c00012b6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012bc:	83 e7 fc             	and    edi,0xfffffffc
c00012bf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012c5:	77 4c                	ja     c0001313 <dlmalloc+0x134>
c00012c7:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00012cc:	75 45                	jne    c0001313 <dlmalloc+0x134>
c00012ce:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00012d4:	75 3d                	jne    c0001313 <dlmalloc+0x134>
c00012d6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00012da:	73 37                	jae    c0001313 <dlmalloc+0x134>
c00012dc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00012df:	89 fa                	mov    edx,edi
c00012e1:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00012e6:	29 f2                	sub    edx,esi
c00012e8:	83 ce 01             	or     esi,0x1
c00012eb:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012f0:	89 d1                	mov    ecx,edx
c00012f2:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00012f7:	83 c9 01             	or     ecx,0x1
c00012fa:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001301:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001308:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000130b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000130e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001311:	eb 15                	jmp    c0001328 <dlmalloc+0x149>
c0001313:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001318:	39 fe                	cmp    esi,edi
c000131a:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001321:	75 0d                	jne    c0001330 <dlmalloc+0x151>
c0001323:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001328:	8d 43 08             	lea    eax,[ebx+0x8]
c000132b:	e9 35 02 00 00       	jmp    c0001565 <dlmalloc+0x386>
c0001330:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001336:	89 f8                	mov    eax,edi
c0001338:	77 19                	ja     c0001353 <dlmalloc+0x174>
c000133a:	c1 e8 03             	shr    eax,0x3
c000133d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001340:	83 c2 0d             	add    edx,0xd
c0001343:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000134a:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001351:	eb 46                	jmp    c0001399 <dlmalloc+0x1ba>
c0001353:	e8 be f9 ff ff       	call   c0000d16 <largebin_index>
c0001358:	8d 14 00             	lea    edx,[eax+eax*1]
c000135b:	83 c2 0d             	add    edx,0xd
c000135e:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001365:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000136c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000136f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001373:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001377:	89 d5                	mov    ebp,edx
c0001379:	74 1e                	je     c0001399 <dlmalloc+0x1ba>
c000137b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000137e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001381:	77 12                	ja     c0001395 <dlmalloc+0x1b6>
c0001383:	83 cf 01             	or     edi,0x1
c0001386:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001389:	76 05                	jbe    c0001390 <dlmalloc+0x1b1>
c000138b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000138e:	eb f6                	jmp    c0001386 <dlmalloc+0x1a7>
c0001390:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001393:	eb 04                	jmp    c0001399 <dlmalloc+0x1ba>
c0001395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001399:	89 c7                	mov    edi,eax
c000139b:	88 c1                	mov    cl,al
c000139d:	c1 ff 05             	sar    edi,0x5
c00013a0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013a4:	bf 01 00 00 00       	mov    edi,0x1
c00013a9:	d3 e7                	shl    edi,cl
c00013ab:	89 f8                	mov    eax,edi
c00013ad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013b1:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00013b8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013bb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013be:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013c1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013c4:	e9 db fe ff ff       	jmp    c00012a4 <dlmalloc+0xc5>
c00013c9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013cf:	76 78                	jbe    c0001449 <dlmalloc+0x26a>
c00013d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00013d5:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00013dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013df:	8d 48 f8             	lea    ecx,[eax-0x8]
c00013e2:	39 ca                	cmp    edx,ecx
c00013e4:	74 63                	je     c0001449 <dlmalloc+0x26a>
c00013e6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00013e9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00013ec:	83 e3 fc             	and    ebx,0xfffffffc
c00013ef:	39 de                	cmp    esi,ebx
c00013f1:	77 52                	ja     c0001445 <dlmalloc+0x266>
c00013f3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00013f6:	89 df                	mov    edi,ebx
c00013f8:	01 d3                	add    ebx,edx
c00013fa:	29 f7                	sub    edi,esi
c00013fc:	83 ff 0f             	cmp    edi,0xf
c00013ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001402:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001405:	8d 42 08             	lea    eax,[edx+0x8]
c0001408:	77 09                	ja     c0001413 <dlmalloc+0x234>
c000140a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000140e:	e9 52 01 00 00       	jmp    c0001565 <dlmalloc+0x386>
c0001413:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c000141f:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001425:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000142c:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001433:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001436:	89 fa                	mov    edx,edi
c0001438:	83 ca 01             	or     edx,0x1
c000143b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000143e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001440:	e9 20 01 00 00       	jmp    c0001565 <dlmalloc+0x386>
c0001445:	89 c2                	mov    edx,eax
c0001447:	eb 99                	jmp    c00013e2 <dlmalloc+0x203>
c0001449:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000144d:	b8 01 00 00 00       	mov    eax,0x1
c0001452:	41                   	inc    ecx
c0001453:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000145a:	89 cb                	mov    ebx,ecx
c000145c:	c1 eb 05             	shr    ebx,0x5
c000145f:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001466:	d3 e0                	shl    eax,cl
c0001468:	39 f8                	cmp    eax,edi
c000146a:	77 04                	ja     c0001470 <dlmalloc+0x291>
c000146c:	85 c0                	test   eax,eax
c000146e:	75 26                	jne    c0001496 <dlmalloc+0x2b7>
c0001470:	43                   	inc    ebx
c0001471:	83 fb 02             	cmp    ebx,0x2
c0001474:	0f 87 a6 00 00 00    	ja     c0001520 <dlmalloc+0x341>
c000147a:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001481:	85 ff                	test   edi,edi
c0001483:	74 eb                	je     c0001470 <dlmalloc+0x291>
c0001485:	89 d8                	mov    eax,ebx
c0001487:	c1 e0 06             	shl    eax,0x6
c000148a:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001491:	b8 01 00 00 00       	mov    eax,0x1
c0001496:	85 f8                	test   eax,edi
c0001498:	75 07                	jne    c00014a1 <dlmalloc+0x2c2>
c000149a:	83 c2 08             	add    edx,0x8
c000149d:	01 c0                	add    eax,eax
c000149f:	eb f5                	jmp    c0001496 <dlmalloc+0x2b7>
c00014a1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014a4:	39 ca                	cmp    edx,ecx
c00014a6:	75 14                	jne    c00014bc <dlmalloc+0x2dd>
c00014a8:	89 c1                	mov    ecx,eax
c00014aa:	83 c2 08             	add    edx,0x8
c00014ad:	f7 d1                	not    ecx
c00014af:	01 c0                	add    eax,eax
c00014b1:	21 cf                	and    edi,ecx
c00014b3:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00014ba:	eb ac                	jmp    c0001468 <dlmalloc+0x289>
c00014bc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014bf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014c2:	83 e0 fc             	and    eax,0xfffffffc
c00014c5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00014c8:	89 c3                	mov    ebx,eax
c00014ca:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00014cd:	8d 14 01             	lea    edx,[ecx+eax*1]
c00014d0:	29 f3                	sub    ebx,esi
c00014d2:	8d 41 08             	lea    eax,[ecx+0x8]
c00014d5:	83 fb 0f             	cmp    ebx,0xf
c00014d8:	77 09                	ja     c00014e3 <dlmalloc+0x304>
c00014da:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00014de:	e9 82 00 00 00       	jmp    c0001565 <dlmalloc+0x386>
c00014e3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00014e6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014ec:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00014f2:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00014f8:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00014ff:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001506:	77 06                	ja     c000150e <dlmalloc+0x32f>
c0001508:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c000150e:	83 ce 01             	or     esi,0x1
c0001511:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001514:	89 d9                	mov    ecx,ebx
c0001516:	83 c9 01             	or     ecx,0x1
c0001519:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000151c:	89 1a                	mov    DWORD PTR [edx],ebx
c000151e:	eb 45                	jmp    c0001565 <dlmalloc+0x386>
c0001520:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001525:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001528:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000152b:	83 e2 fc             	and    edx,0xfffffffc
c000152e:	39 d1                	cmp    ecx,edx
c0001530:	77 1e                	ja     c0001550 <dlmalloc+0x371>
c0001532:	89 f3                	mov    ebx,esi
c0001534:	29 f2                	sub    edx,esi
c0001536:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001539:	83 cb 01             	or     ebx,0x1
c000153c:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c0001542:	83 ca 01             	or     edx,0x1
c0001545:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001548:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000154b:	e9 2d fd ff ff       	jmp    c000127d <dlmalloc+0x9e>
c0001550:	83 c4 1c             	add    esp,0x1c
c0001553:	89 f0                	mov    eax,esi
c0001555:	5b                   	pop    ebx
c0001556:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000155b:	5e                   	pop    esi
c000155c:	5f                   	pop    edi
c000155d:	5d                   	pop    ebp
c000155e:	e9 13 fa ff ff       	jmp    c0000f76 <sYSMALLOc>
c0001563:	31 c0                	xor    eax,eax
c0001565:	83 c4 1c             	add    esp,0x1c
c0001568:	5b                   	pop    ebx
c0001569:	5e                   	pop    esi
c000156a:	5f                   	pop    edi
c000156b:	5d                   	pop    ebp
c000156c:	c3                   	ret    

c000156d <iALLOc>:
c000156d:	55                   	push   ebp
c000156e:	89 c5                	mov    ebp,eax
c0001570:	57                   	push   edi
c0001571:	56                   	push   esi
c0001572:	53                   	push   ebx
c0001573:	83 ec 2c             	sub    esp,0x2c
c0001576:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000157a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000157e:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001589:	75 12                	jne    c000159d <iALLOc+0x30>
c000158b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000158f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001594:	e8 01 f8 ff ff       	call   c0000d9a <malloc_consolidate>
c0001599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000159d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015a2:	74 12                	je     c00015b6 <iALLOc+0x49>
c00015a4:	85 ed                	test   ebp,ebp
c00015a6:	0f 84 64 01 00 00    	je     c0001710 <iALLOc+0x1a3>
c00015ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015b4:	eb 33                	jmp    c00015e9 <iALLOc+0x7c>
c00015b6:	85 ed                	test   ebp,ebp
c00015b8:	75 14                	jne    c00015ce <iALLOc+0x61>
c00015ba:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015c2:	83 c4 2c             	add    esp,0x2c
c00015c5:	5b                   	pop    ebx
c00015c6:	5e                   	pop    esi
c00015c7:	5f                   	pop    edi
c00015c8:	5d                   	pop    ebp
c00015c9:	e9 11 fc ff ff       	jmp    c00011df <dlmalloc>
c00015ce:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00015d6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00015dd:	83 f8 0f             	cmp    eax,0xf
c00015e0:	76 07                	jbe    c00015e9 <iALLOc+0x7c>
c00015e2:	83 e0 f8             	and    eax,0xfffffff8
c00015e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00015e9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00015ee:	75 09                	jne    c00015f9 <iALLOc+0x8c>
c00015f0:	89 d0                	mov    eax,edx
c00015f2:	31 f6                	xor    esi,esi
c00015f4:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00015f7:	eb 3b                	jmp    c0001634 <iALLOc+0xc7>
c00015f9:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001601:	8b 02                	mov    eax,DWORD PTR [edx]
c0001603:	83 c0 0b             	add    eax,0xb
c0001606:	83 f8 0f             	cmp    eax,0xf
c0001609:	76 07                	jbe    c0001612 <iALLOc+0xa5>
c000160b:	83 e0 f8             	and    eax,0xfffffff8
c000160e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001612:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001616:	0f af f5             	imul   esi,ebp
c0001619:	eb 25                	jmp    c0001640 <iALLOc+0xd3>
c000161b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000161d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001620:	bb 10 00 00 00       	mov    ebx,0x10
c0001625:	83 f9 0f             	cmp    ecx,0xf
c0001628:	76 05                	jbe    c000162f <iALLOc+0xc2>
c000162a:	83 e1 f8             	and    ecx,0xfffffff8
c000162d:	89 cb                	mov    ebx,ecx
c000162f:	01 de                	add    esi,ebx
c0001631:	83 c0 04             	add    eax,0x4
c0001634:	39 c7                	cmp    edi,eax
c0001636:	75 e3                	jne    c000161b <iALLOc+0xae>
c0001638:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001644:	83 ec 0c             	sub    esp,0xc
c0001647:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000164d:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000165b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000165f:	50                   	push   eax
c0001660:	e8 7a fb ff ff       	call   c00011df <dlmalloc>
c0001665:	83 c4 10             	add    esp,0x10
c0001668:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000166e:	85 c0                	test   eax,eax
c0001670:	0f 84 92 00 00 00    	je     c0001708 <iALLOc+0x19b>
c0001676:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001679:	8d 78 f8             	lea    edi,[eax-0x8]
c000167c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001680:	83 e3 fc             	and    ebx,0xfffffffc
c0001683:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001688:	74 1e                	je     c00016a8 <iALLOc+0x13b>
c000168a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000168e:	89 d9                	mov    ecx,ebx
c0001690:	52                   	push   edx
c0001691:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001695:	83 e9 04             	sub    ecx,0x4
c0001698:	51                   	push   ecx
c0001699:	6a 00                	push   0x0
c000169b:	50                   	push   eax
c000169c:	e8 4f ee ff ff       	call   c00004f0 <memset>
c00016a1:	83 c4 10             	add    esp,0x10
c00016a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016ad:	75 14                	jne    c00016c3 <iALLOc+0x156>
c00016af:	8d 04 37             	lea    eax,[edi+esi*1]
c00016b2:	29 f3                	sub    ebx,esi
c00016b4:	8d 48 08             	lea    ecx,[eax+0x8]
c00016b7:	83 cb 01             	or     ebx,0x1
c00016ba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016bd:	89 f3                	mov    ebx,esi
c00016bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c3:	31 c0                	xor    eax,eax
c00016c5:	4d                   	dec    ebp
c00016c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00016ca:	8d 4f 08             	lea    ecx,[edi+0x8]
c00016cd:	39 c5                	cmp    ebp,eax
c00016cf:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00016d2:	74 2c                	je     c0001700 <iALLOc+0x193>
c00016d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00016d8:	85 c9                	test   ecx,ecx
c00016da:	75 15                	jne    c00016f1 <iALLOc+0x184>
c00016dc:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00016df:	8d 71 0b             	lea    esi,[ecx+0xb]
c00016e2:	b9 10 00 00 00       	mov    ecx,0x10
c00016e7:	83 fe 0f             	cmp    esi,0xf
c00016ea:	76 05                	jbe    c00016f1 <iALLOc+0x184>
c00016ec:	83 e6 f8             	and    esi,0xfffffff8
c00016ef:	89 f1                	mov    ecx,esi
c00016f1:	89 ce                	mov    esi,ecx
c00016f3:	29 cb                	sub    ebx,ecx
c00016f5:	83 ce 01             	or     esi,0x1
c00016f8:	40                   	inc    eax
c00016f9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00016fc:	01 cf                	add    edi,ecx
c00016fe:	eb c6                	jmp    c00016c6 <iALLOc+0x159>
c0001700:	83 cb 01             	or     ebx,0x1
c0001703:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001706:	eb 08                	jmp    c0001710 <iALLOc+0x1a3>
c0001708:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001714:	83 c4 2c             	add    esp,0x2c
c0001717:	5b                   	pop    ebx
c0001718:	5e                   	pop    esi
c0001719:	5f                   	pop    edi
c000171a:	5d                   	pop    ebp
c000171b:	c3                   	ret    

c000171c <dlrealloc>:
c000171c:	55                   	push   ebp
c000171d:	57                   	push   edi
c000171e:	56                   	push   esi
c000171f:	53                   	push   ebx
c0001720:	83 ec 1c             	sub    esp,0x1c
c0001723:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001727:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000172b:	85 db                	test   ebx,ebx
c000172d:	75 10                	jne    c000173f <dlrealloc+0x23>
c000172f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001733:	83 c4 1c             	add    esp,0x1c
c0001736:	5b                   	pop    ebx
c0001737:	5e                   	pop    esi
c0001738:	5f                   	pop    edi
c0001739:	5d                   	pop    ebp
c000173a:	e9 a0 fa ff ff       	jmp    c00011df <dlmalloc>
c000173f:	83 f8 df             	cmp    eax,0xffffffdf
c0001742:	76 07                	jbe    c000174b <dlrealloc+0x2f>
c0001744:	31 db                	xor    ebx,ebx
c0001746:	e9 6b 01 00 00       	jmp    c00018b6 <dlrealloc+0x19a>
c000174b:	83 c0 0b             	add    eax,0xb
c000174e:	bd 10 00 00 00       	mov    ebp,0x10
c0001753:	83 f8 0f             	cmp    eax,0xf
c0001756:	76 05                	jbe    c000175d <dlrealloc+0x41>
c0001758:	83 e0 f8             	and    eax,0xfffffff8
c000175b:	89 c5                	mov    ebp,eax
c000175d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001760:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001763:	89 ce                	mov    esi,ecx
c0001765:	83 e6 fc             	and    esi,0xfffffffc
c0001768:	f6 c1 02             	test   cl,0x2
c000176b:	75 d7                	jne    c0001744 <dlrealloc+0x28>
c000176d:	39 f5                	cmp    ebp,esi
c000176f:	0f 86 04 01 00 00    	jbe    c0001879 <dlrealloc+0x15d>
c0001775:	8d 14 37             	lea    edx,[edi+esi*1]
c0001778:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000177e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001781:	75 33                	jne    c00017b6 <dlrealloc+0x9a>
c0001783:	83 e0 fc             	and    eax,0xfffffffc
c0001786:	01 f0                	add    eax,esi
c0001788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000178c:	8d 45 10             	lea    eax,[ebp+0x10]
c000178f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001793:	77 49                	ja     c00017de <dlrealloc+0xc2>
c0001795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001799:	83 e1 01             	and    ecx,0x1
c000179c:	01 ef                	add    edi,ebp
c000179e:	09 e9                	or     ecx,ebp
c00017a0:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00017a3:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c00017a9:	29 e8                	sub    eax,ebp
c00017ab:	83 c8 01             	or     eax,0x1
c00017ae:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017b1:	e9 00 01 00 00       	jmp    c00018b6 <dlrealloc+0x19a>
c00017b6:	89 c1                	mov    ecx,eax
c00017b8:	83 e1 fe             	and    ecx,0xfffffffe
c00017bb:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00017c0:	75 1c                	jne    c00017de <dlrealloc+0xc2>
c00017c2:	83 e0 fc             	and    eax,0xfffffffc
c00017c5:	01 f0                	add    eax,esi
c00017c7:	39 c5                	cmp    ebp,eax
c00017c9:	77 13                	ja     c00017de <dlrealloc+0xc2>
c00017cb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00017ce:	89 c6                	mov    esi,eax
c00017d0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00017d3:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00017d6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00017d9:	e9 9b 00 00 00       	jmp    c0001879 <dlrealloc+0x15d>
c00017de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00017e2:	8d 45 f9             	lea    eax,[ebp-0x7]
c00017e5:	83 ec 0c             	sub    esp,0xc
c00017e8:	50                   	push   eax
c00017e9:	e8 f1 f9 ff ff       	call   c00011df <dlmalloc>
c00017ee:	83 c4 10             	add    esp,0x10
c00017f1:	85 c0                	test   eax,eax
c00017f3:	0f 84 4b ff ff ff    	je     c0001744 <dlrealloc+0x28>
c00017f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001800:	39 ca                	cmp    edx,ecx
c0001802:	75 0a                	jne    c000180e <dlrealloc+0xf2>
c0001804:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001807:	83 e0 fc             	and    eax,0xfffffffc
c000180a:	01 c6                	add    esi,eax
c000180c:	eb 6b                	jmp    c0001879 <dlrealloc+0x15d>
c000180e:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001811:	83 f9 27             	cmp    ecx,0x27
c0001814:	76 08                	jbe    c000181e <dlrealloc+0x102>
c0001816:	89 de                	mov    esi,ebx
c0001818:	89 c7                	mov    edi,eax
c000181a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000181c:	eb 43                	jmp    c0001861 <dlrealloc+0x145>
c000181e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001820:	83 f9 13             	cmp    ecx,0x13
c0001823:	89 10                	mov    DWORD PTR [eax],edx
c0001825:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001828:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000182b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000182e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001831:	76 2e                	jbe    c0001861 <dlrealloc+0x145>
c0001833:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001836:	83 f9 1b             	cmp    ecx,0x1b
c0001839:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000183c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000183f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001842:	76 1d                	jbe    c0001861 <dlrealloc+0x145>
c0001844:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001847:	83 f9 23             	cmp    ecx,0x23
c000184a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000184d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001850:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001853:	76 0c                	jbe    c0001861 <dlrealloc+0x145>
c0001855:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001858:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000185b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000185e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001865:	83 ec 0c             	sub    esp,0xc
c0001868:	53                   	push   ebx
c0001869:	e8 13 f6 ff ff       	call   c0000e81 <dlfree>
c000186e:	83 c4 10             	add    esp,0x10
c0001871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001875:	89 c3                	mov    ebx,eax
c0001877:	eb 3d                	jmp    c00018b6 <dlrealloc+0x19a>
c0001879:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000187c:	8d 04 37             	lea    eax,[edi+esi*1]
c000187f:	89 f2                	mov    edx,esi
c0001881:	29 ea                	sub    edx,ebp
c0001883:	83 e1 01             	and    ecx,0x1
c0001886:	83 fa 0f             	cmp    edx,0xf
c0001889:	77 0b                	ja     c0001896 <dlrealloc+0x17a>
c000188b:	09 ce                	or     esi,ecx
c000188d:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001890:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001894:	eb 20                	jmp    c00018b6 <dlrealloc+0x19a>
c0001896:	01 ef                	add    edi,ebp
c0001898:	83 ca 01             	or     edx,0x1
c000189b:	09 cd                	or     ebp,ecx
c000189d:	83 ec 0c             	sub    esp,0xc
c00018a0:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018a3:	83 c7 08             	add    edi,0x8
c00018a6:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018a9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018ad:	57                   	push   edi
c00018ae:	e8 ce f5 ff ff       	call   c0000e81 <dlfree>
c00018b3:	83 c4 10             	add    esp,0x10
c00018b6:	83 c4 1c             	add    esp,0x1c
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	5b                   	pop    ebx
c00018bc:	5e                   	pop    esi
c00018bd:	5f                   	pop    edi
c00018be:	5d                   	pop    ebp
c00018bf:	c3                   	ret    

c00018c0 <dlmemalign>:
c00018c0:	55                   	push   ebp
c00018c1:	57                   	push   edi
c00018c2:	56                   	push   esi
c00018c3:	53                   	push   ebx
c00018c4:	83 ec 0c             	sub    esp,0xc
c00018c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00018cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00018cf:	83 fa 08             	cmp    edx,0x8
c00018d2:	77 10                	ja     c00018e4 <dlmemalign+0x24>
c00018d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00018d8:	83 c4 0c             	add    esp,0xc
c00018db:	5b                   	pop    ebx
c00018dc:	5e                   	pop    esi
c00018dd:	5f                   	pop    edi
c00018de:	5d                   	pop    ebp
c00018df:	e9 fb f8 ff ff       	jmp    c00011df <dlmalloc>
c00018e4:	83 fa 0f             	cmp    edx,0xf
c00018e7:	bf 10 00 00 00       	mov    edi,0x10
c00018ec:	76 13                	jbe    c0001901 <dlmemalign+0x41>
c00018ee:	8d 4a ff             	lea    ecx,[edx-0x1]
c00018f1:	85 d1                	test   ecx,edx
c00018f3:	75 04                	jne    c00018f9 <dlmemalign+0x39>
c00018f5:	89 d7                	mov    edi,edx
c00018f7:	eb 08                	jmp    c0001901 <dlmemalign+0x41>
c00018f9:	39 d7                	cmp    edi,edx
c00018fb:	73 04                	jae    c0001901 <dlmemalign+0x41>
c00018fd:	01 ff                	add    edi,edi
c00018ff:	eb f8                	jmp    c00018f9 <dlmemalign+0x39>
c0001901:	83 f8 df             	cmp    eax,0xffffffdf
c0001904:	76 07                	jbe    c000190d <dlmemalign+0x4d>
c0001906:	31 c0                	xor    eax,eax
c0001908:	e9 ce 00 00 00       	jmp    c00019db <dlmemalign+0x11b>
c000190d:	83 c0 0b             	add    eax,0xb
c0001910:	bd 10 00 00 00       	mov    ebp,0x10
c0001915:	83 f8 0f             	cmp    eax,0xf
c0001918:	76 05                	jbe    c000191f <dlmemalign+0x5f>
c000191a:	83 e0 f8             	and    eax,0xfffffff8
c000191d:	89 c5                	mov    ebp,eax
c000191f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001923:	83 ec 0c             	sub    esp,0xc
c0001926:	50                   	push   eax
c0001927:	e8 b3 f8 ff ff       	call   c00011df <dlmalloc>
c000192c:	83 c4 10             	add    esp,0x10
c000192f:	85 c0                	test   eax,eax
c0001931:	89 c1                	mov    ecx,eax
c0001933:	74 d1                	je     c0001906 <dlmemalign+0x46>
c0001935:	8d 70 f8             	lea    esi,[eax-0x8]
c0001938:	31 d2                	xor    edx,edx
c000193a:	f7 f7                	div    edi
c000193c:	85 d2                	test   edx,edx
c000193e:	74 62                	je     c00019a2 <dlmemalign+0xe2>
c0001940:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001944:	89 f8                	mov    eax,edi
c0001946:	f7 d8                	neg    eax
c0001948:	21 c3                	and    ebx,eax
c000194a:	83 eb 08             	sub    ebx,0x8
c000194d:	89 d8                	mov    eax,ebx
c000194f:	29 f0                	sub    eax,esi
c0001951:	83 f8 0f             	cmp    eax,0xf
c0001954:	77 02                	ja     c0001958 <dlmemalign+0x98>
c0001956:	01 fb                	add    ebx,edi
c0001958:	89 d8                	mov    eax,ebx
c000195a:	29 f0                	sub    eax,esi
c000195c:	89 c6                	mov    esi,eax
c000195e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001961:	89 c2                	mov    edx,eax
c0001963:	83 e2 fc             	and    edx,0xfffffffc
c0001966:	29 f2                	sub    edx,esi
c0001968:	a8 02                	test   al,0x2
c000196a:	74 10                	je     c000197c <dlmemalign+0xbc>
c000196c:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000196f:	83 ca 02             	or     edx,0x2
c0001972:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001975:	8d 43 08             	lea    eax,[ebx+0x8]
c0001978:	89 33                	mov    DWORD PTR [ebx],esi
c000197a:	eb 5f                	jmp    c00019db <dlmemalign+0x11b>
c000197c:	89 d0                	mov    eax,edx
c000197e:	83 ec 0c             	sub    esp,0xc
c0001981:	83 c8 01             	or     eax,0x1
c0001984:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001987:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000198c:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000198f:	83 e0 01             	and    eax,0x1
c0001992:	09 f0                	or     eax,esi
c0001994:	89 de                	mov    esi,ebx
c0001996:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001999:	51                   	push   ecx
c000199a:	e8 e2 f4 ff ff       	call   c0000e81 <dlfree>
c000199f:	83 c4 10             	add    esp,0x10
c00019a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00019a5:	a8 02                	test   al,0x2
c00019a7:	75 2f                	jne    c00019d8 <dlmemalign+0x118>
c00019a9:	8d 55 10             	lea    edx,[ebp+0x10]
c00019ac:	83 e0 fc             	and    eax,0xfffffffc
c00019af:	39 c2                	cmp    edx,eax
c00019b1:	73 25                	jae    c00019d8 <dlmemalign+0x118>
c00019b3:	29 e8                	sub    eax,ebp
c00019b5:	83 ec 0c             	sub    esp,0xc
c00019b8:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00019bb:	83 c8 01             	or     eax,0x1
c00019be:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00019c1:	83 c2 08             	add    edx,0x8
c00019c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00019c7:	83 e0 01             	and    eax,0x1
c00019ca:	09 c5                	or     ebp,eax
c00019cc:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00019cf:	52                   	push   edx
c00019d0:	e8 ac f4 ff ff       	call   c0000e81 <dlfree>
c00019d5:	83 c4 10             	add    esp,0x10
c00019d8:	8d 46 08             	lea    eax,[esi+0x8]
c00019db:	83 c4 0c             	add    esp,0xc
c00019de:	5b                   	pop    ebx
c00019df:	5e                   	pop    esi
c00019e0:	5f                   	pop    edi
c00019e1:	5d                   	pop    ebp
c00019e2:	c3                   	ret    

c00019e3 <dlcalloc>:
c00019e3:	53                   	push   ebx
c00019e4:	83 ec 14             	sub    esp,0x14
c00019e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00019eb:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00019f0:	50                   	push   eax
c00019f1:	e8 e9 f7 ff ff       	call   c00011df <dlmalloc>
c00019f6:	83 c4 10             	add    esp,0x10
c00019f9:	85 c0                	test   eax,eax
c00019fb:	89 c3                	mov    ebx,eax
c00019fd:	74 77                	je     c0001a76 <dlcalloc+0x93>
c00019ff:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001a02:	89 d0                	mov    eax,edx
c0001a04:	83 e0 fc             	and    eax,0xfffffffc
c0001a07:	80 e2 02             	and    dl,0x2
c0001a0a:	75 5a                	jne    c0001a66 <dlcalloc+0x83>
c0001a0c:	83 e8 04             	sub    eax,0x4
c0001a0f:	83 f8 27             	cmp    eax,0x27
c0001a12:	76 03                	jbe    c0001a17 <dlcalloc+0x34>
c0001a14:	51                   	push   ecx
c0001a15:	eb 53                	jmp    c0001a6a <dlcalloc+0x87>
c0001a17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a1d:	83 f8 13             	cmp    eax,0x13
c0001a20:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001a27:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001a2e:	76 46                	jbe    c0001a76 <dlcalloc+0x93>
c0001a30:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001a37:	83 f8 1b             	cmp    eax,0x1b
c0001a3a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001a41:	76 33                	jbe    c0001a76 <dlcalloc+0x93>
c0001a43:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001a4a:	83 f8 23             	cmp    eax,0x23
c0001a4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001a54:	76 20                	jbe    c0001a76 <dlcalloc+0x93>
c0001a56:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001a5d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001a64:	eb 10                	jmp    c0001a76 <dlcalloc+0x93>
c0001a66:	52                   	push   edx
c0001a67:	83 e8 08             	sub    eax,0x8
c0001a6a:	50                   	push   eax
c0001a6b:	6a 00                	push   0x0
c0001a6d:	53                   	push   ebx
c0001a6e:	e8 7d ea ff ff       	call   c00004f0 <memset>
c0001a73:	83 c4 10             	add    esp,0x10
c0001a76:	83 c4 08             	add    esp,0x8
c0001a79:	89 d8                	mov    eax,ebx
c0001a7b:	5b                   	pop    ebx
c0001a7c:	c3                   	ret    

c0001a7d <dlcfree>:
c0001a7d:	e9 ff f3 ff ff       	jmp    c0000e81 <dlfree>

c0001a82 <dlindependent_calloc>:
c0001a82:	83 ec 28             	sub    esp,0x28
c0001a85:	b9 03 00 00 00       	mov    ecx,0x3
c0001a8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a9a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a9e:	e8 ca fa ff ff       	call   c000156d <iALLOc>
c0001aa3:	83 c4 2c             	add    esp,0x2c
c0001aa6:	c3                   	ret    

c0001aa7 <dlindependent_comalloc>:
c0001aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001aab:	31 c9                	xor    ecx,ecx
c0001aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ab1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ab5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001ab9:	e9 af fa ff ff       	jmp    c000156d <iALLOc>

c0001abe <dlvalloc>:
c0001abe:	83 ec 0c             	sub    esp,0xc
c0001ac1:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ac8:	75 0a                	jne    c0001ad4 <dlvalloc+0x16>
c0001aca:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001acf:	e8 c6 f2 ff ff       	call   c0000d9a <malloc_consolidate>
c0001ad4:	50                   	push   eax
c0001ad5:	50                   	push   eax
c0001ad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001ada:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001ae0:	e8 db fd ff ff       	call   c00018c0 <dlmemalign>
c0001ae5:	83 c4 1c             	add    esp,0x1c
c0001ae8:	c3                   	ret    

c0001ae9 <dlpvalloc>:
c0001ae9:	83 ec 0c             	sub    esp,0xc
c0001aec:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001af3:	75 0a                	jne    c0001aff <dlpvalloc+0x16>
c0001af5:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001afa:	e8 9b f2 ff ff       	call   c0000d9a <malloc_consolidate>
c0001aff:	52                   	push   edx
c0001b00:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001b05:	52                   	push   edx
c0001b06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b0a:	89 c1                	mov    ecx,eax
c0001b0c:	f7 d9                	neg    ecx
c0001b0e:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b12:	21 ca                	and    edx,ecx
c0001b14:	52                   	push   edx
c0001b15:	50                   	push   eax
c0001b16:	e8 a5 fd ff ff       	call   c00018c0 <dlmemalign>
c0001b1b:	83 c4 1c             	add    esp,0x1c
c0001b1e:	c3                   	ret    

c0001b1f <dlmalloc_trim>:
c0001b1f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b24:	e8 71 f2 ff ff       	call   c0000d9a <malloc_consolidate>
c0001b29:	31 c0                	xor    eax,eax
c0001b2b:	c3                   	ret    

c0001b2c <dlmalloc_usable_size>:
c0001b2c:	53                   	push   ebx
c0001b2d:	31 c0                	xor    eax,eax
c0001b2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b33:	85 c9                	test   ecx,ecx
c0001b35:	74 24                	je     c0001b5b <dlmalloc_usable_size+0x2f>
c0001b37:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001b3a:	f6 c2 02             	test   dl,0x2
c0001b3d:	74 08                	je     c0001b47 <dlmalloc_usable_size+0x1b>
c0001b3f:	83 e2 fc             	and    edx,0xfffffffc
c0001b42:	8d 42 f8             	lea    eax,[edx-0x8]
c0001b45:	eb 14                	jmp    c0001b5b <dlmalloc_usable_size+0x2f>
c0001b47:	89 d3                	mov    ebx,edx
c0001b49:	31 c0                	xor    eax,eax
c0001b4b:	83 e3 fe             	and    ebx,0xfffffffe
c0001b4e:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001b53:	74 06                	je     c0001b5b <dlmalloc_usable_size+0x2f>
c0001b55:	83 e2 fc             	and    edx,0xfffffffc
c0001b58:	8d 42 fc             	lea    eax,[edx-0x4]
c0001b5b:	5b                   	pop    ebx
c0001b5c:	c3                   	ret    

c0001b5d <dlmallinfo>:
c0001b5d:	55                   	push   ebp
c0001b5e:	57                   	push   edi
c0001b5f:	56                   	push   esi
c0001b60:	53                   	push   ebx
c0001b61:	83 ec 08             	sub    esp,0x8
c0001b64:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001b6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001b6f:	75 0a                	jne    c0001b7b <dlmallinfo+0x1e>
c0001b71:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b76:	e8 1f f2 ff ff       	call   c0000d9a <malloc_consolidate>
c0001b7b:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001b80:	31 ed                	xor    ebp,ebp
c0001b82:	31 c9                	xor    ecx,ecx
c0001b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b87:	83 e0 fc             	and    eax,0xfffffffc
c0001b8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b8e:	31 c0                	xor    eax,eax
c0001b90:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001b97:	85 d2                	test   edx,edx
c0001b99:	74 0e                	je     c0001ba9 <dlmallinfo+0x4c>
c0001b9b:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b9e:	45                   	inc    ebp
c0001b9f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ba2:	83 e6 fc             	and    esi,0xfffffffc
c0001ba5:	01 f1                	add    ecx,esi
c0001ba7:	eb ee                	jmp    c0001b97 <dlmallinfo+0x3a>
c0001ba9:	40                   	inc    eax
c0001baa:	83 f8 0a             	cmp    eax,0xa
c0001bad:	75 e1                	jne    c0001b90 <dlmallinfo+0x33>
c0001baf:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bba:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001bbd:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001bc2:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001bc5:	39 f0                	cmp    eax,esi
c0001bc7:	74 10                	je     c0001bd9 <dlmallinfo+0x7c>
c0001bc9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001bcc:	ff 04 24             	inc    DWORD PTR [esp]
c0001bcf:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001bd2:	83 e7 fc             	and    edi,0xfffffffc
c0001bd5:	01 fa                	add    edx,edi
c0001bd7:	eb ec                	jmp    c0001bc5 <dlmallinfo+0x68>
c0001bd9:	83 c0 08             	add    eax,0x8
c0001bdc:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001be1:	75 df                	jne    c0001bc2 <dlmallinfo+0x65>
c0001be3:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001be9:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001bec:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001bf1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001bf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001bf7:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001bfa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001bfd:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001c03:	89 03                	mov    DWORD PTR [ebx],eax
c0001c05:	29 d0                	sub    eax,edx
c0001c07:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c0e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c11:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c14:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001c1a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c1d:	89 d8                	mov    eax,ebx
c0001c1f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c22:	83 c4 08             	add    esp,0x8
c0001c25:	5b                   	pop    ebx
c0001c26:	5e                   	pop    esi
c0001c27:	5f                   	pop    edi
c0001c28:	5d                   	pop    ebp
c0001c29:	c2 04 00             	ret    0x4

c0001c2c <dlmalloc_stats>:
c0001c2c:	83 ec 30             	sub    esp,0x30
c0001c2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c33:	50                   	push   eax
c0001c34:	e8 24 ff ff ff       	call   c0001b5d <dlmallinfo>
c0001c39:	83 c4 30             	add    esp,0x30
c0001c3c:	c3                   	ret    

c0001c3d <dlmallopt>:
c0001c3d:	56                   	push   esi
c0001c3e:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c43:	53                   	push   ebx
c0001c44:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001c48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c4c:	e8 49 f1 ff ff       	call   c0000d9a <malloc_consolidate>
c0001c51:	8d 46 04             	lea    eax,[esi+0x4]
c0001c54:	83 f8 05             	cmp    eax,0x5
c0001c57:	77 67                	ja     c0001cc0 <dlmallopt+0x83>
c0001c59:	ff 24 85 c4 f3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0c3c]
c0001c60:	83 fb 50             	cmp    ebx,0x50
c0001c63:	77 5b                	ja     c0001cc0 <dlmallopt+0x83>
c0001c65:	85 db                	test   ebx,ebx
c0001c67:	ba 08 00 00 00       	mov    edx,0x8
c0001c6c:	74 12                	je     c0001c80 <dlmallopt+0x43>
c0001c6e:	83 c3 0b             	add    ebx,0xb
c0001c71:	ba 10 00 00 00       	mov    edx,0x10
c0001c76:	83 fb 0f             	cmp    ebx,0xf
c0001c79:	76 05                	jbe    c0001c80 <dlmallopt+0x43>
c0001c7b:	89 da                	mov    edx,ebx
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c85:	83 e0 03             	and    eax,0x3
c0001c88:	09 d0                	or     eax,edx
c0001c8a:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c8f:	eb 31                	jmp    c0001cc2 <dlmallopt+0x85>
c0001c91:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001c97:	eb 06                	jmp    c0001c9f <dlmallopt+0x62>
c0001c99:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001c9f:	be 01 00 00 00       	mov    esi,0x1
c0001ca4:	eb 1c                	jmp    c0001cc2 <dlmallopt+0x85>
c0001ca6:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001cac:	eb f1                	jmp    c0001c9f <dlmallopt+0x62>
c0001cae:	31 f6                	xor    esi,esi
c0001cb0:	85 db                	test   ebx,ebx
c0001cb2:	75 0e                	jne    c0001cc2 <dlmallopt+0x85>
c0001cb4:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001cbe:	eb df                	jmp    c0001c9f <dlmallopt+0x62>
c0001cc0:	31 f6                	xor    esi,esi
c0001cc2:	5b                   	pop    ebx
c0001cc3:	89 f0                	mov    eax,esi
c0001cc5:	5e                   	pop    esi
c0001cc6:	c3                   	ret    
c0001cc7:	90                   	nop

c0001cc8 <isblank>:
c0001cc8:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ccd:	74 09                	je     c0001cd8 <isblank+0x10>
c0001ccf:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cd4:	75 0a                	jne    c0001ce0 <isblank+0x18>
c0001cd6:	66 90                	xchg   ax,ax
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <iscntrl>:
c0001ce8:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001ced:	7e 09                	jle    c0001cf8 <iscntrl+0x10>
c0001cef:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001cf4:	75 0a                	jne    c0001d00 <iscntrl+0x18>
c0001cf6:	66 90                	xchg   ax,ax
c0001cf8:	b8 01 00 00 00       	mov    eax,0x1
c0001cfd:	c3                   	ret    
c0001cfe:	66 90                	xchg   ax,ax
c0001d00:	b8 00 00 00 00       	mov    eax,0x0
c0001d05:	c3                   	ret    
c0001d06:	66 90                	xchg   ax,ax

c0001d08 <isdigit>:
c0001d08:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d0d:	7e 0d                	jle    c0001d1c <isdigit+0x14>
c0001d0f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d14:	7f 06                	jg     c0001d1c <isdigit+0x14>
c0001d16:	b8 01 00 00 00       	mov    eax,0x1
c0001d1b:	c3                   	ret    
c0001d1c:	b8 00 00 00 00       	mov    eax,0x0
c0001d21:	c3                   	ret    
c0001d22:	66 90                	xchg   ax,ax

c0001d24 <islower>:
c0001d24:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d29:	7e 0d                	jle    c0001d38 <islower+0x14>
c0001d2b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d30:	7f 06                	jg     c0001d38 <islower+0x14>
c0001d32:	b8 01 00 00 00       	mov    eax,0x1
c0001d37:	c3                   	ret    
c0001d38:	b8 00 00 00 00       	mov    eax,0x0
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax

c0001d40 <isspace>:
c0001d40:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d45:	7c 19                	jl     c0001d60 <isspace+0x20>
c0001d47:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001d4c:	7e 0a                	jle    c0001d58 <isspace+0x18>
c0001d4e:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d53:	75 0b                	jne    c0001d60 <isspace+0x20>
c0001d55:	8d 76 00             	lea    esi,[esi+0x0]
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isupper>:
c0001d68:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d6d:	7e 0d                	jle    c0001d7c <isupper+0x14>
c0001d6f:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d74:	7f 06                	jg     c0001d7c <isupper+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <isalpha>:
c0001d84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d88:	e8 db ff ff ff       	call   c0001d68 <isupper>
c0001d8d:	83 c4 04             	add    esp,0x4
c0001d90:	85 c0                	test   eax,eax
c0001d92:	75 10                	jne    c0001da4 <isalpha+0x20>
c0001d94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d98:	e8 87 ff ff ff       	call   c0001d24 <islower>
c0001d9d:	83 c4 04             	add    esp,0x4
c0001da0:	85 c0                	test   eax,eax
c0001da2:	74 08                	je     c0001dac <isalpha+0x28>
c0001da4:	b8 01 00 00 00       	mov    eax,0x1
c0001da9:	c3                   	ret    
c0001daa:	66 90                	xchg   ax,ax
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <isalnum>:
c0001db4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001db8:	e8 c7 ff ff ff       	call   c0001d84 <isalpha>
c0001dbd:	83 c4 04             	add    esp,0x4
c0001dc0:	85 c0                	test   eax,eax
c0001dc2:	75 10                	jne    c0001dd4 <isalnum+0x20>
c0001dc4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dc8:	e8 3b ff ff ff       	call   c0001d08 <isdigit>
c0001dcd:	83 c4 04             	add    esp,0x4
c0001dd0:	85 c0                	test   eax,eax
c0001dd2:	74 08                	je     c0001ddc <isalnum+0x28>
c0001dd4:	b8 01 00 00 00       	mov    eax,0x1
c0001dd9:	c3                   	ret    
c0001dda:	66 90                	xchg   ax,ax
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <ispunct>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 c7 ff ff ff       	call   c0001db4 <isalnum>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 28                	jne    c0001e1c <ispunct+0x38>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 43 ff ff ff       	call   c0001d40 <isspace>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	75 18                	jne    c0001e1c <ispunct+0x38>
c0001e04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e08:	e8 db fe ff ff       	call   c0001ce8 <iscntrl>
c0001e0d:	83 c4 04             	add    esp,0x4
c0001e10:	85 c0                	test   eax,eax
c0001e12:	75 08                	jne    c0001e1c <ispunct+0x38>
c0001e14:	b8 01 00 00 00       	mov    eax,0x1
c0001e19:	c3                   	ret    
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 00 00 00 00       	mov    eax,0x0
c0001e21:	c3                   	ret    
c0001e22:	66 90                	xchg   ax,ax

c0001e24 <isgraph>:
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <isalnum>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	75 10                	jne    c0001e44 <isgraph+0x20>
c0001e34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e38:	e8 a7 ff ff ff       	call   c0001de4 <ispunct>
c0001e3d:	83 c4 04             	add    esp,0x4
c0001e40:	85 c0                	test   eax,eax
c0001e42:	74 08                	je     c0001e4c <isgraph+0x28>
c0001e44:	b8 01 00 00 00       	mov    eax,0x1
c0001e49:	c3                   	ret    
c0001e4a:	66 90                	xchg   ax,ax
c0001e4c:	b8 00 00 00 00       	mov    eax,0x0
c0001e51:	c3                   	ret    
c0001e52:	66 90                	xchg   ax,ax

c0001e54 <isprint>:
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 c7 ff ff ff       	call   c0001e24 <isgraph>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 08                	jne    c0001e6c <isprint+0x18>
c0001e64:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e69:	75 09                	jne    c0001e74 <isprint+0x20>
c0001e6b:	90                   	nop
c0001e6c:	b8 01 00 00 00       	mov    eax,0x1
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax
c0001e74:	b8 00 00 00 00       	mov    eax,0x0
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax

c0001e7c <isxdigit>:
c0001e7c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e80:	e8 83 fe ff ff       	call   c0001d08 <isdigit>
c0001e85:	83 c4 04             	add    esp,0x4
c0001e88:	85 c0                	test   eax,eax
c0001e8a:	75 20                	jne    c0001eac <isxdigit+0x30>
c0001e8c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e91:	7e 09                	jle    c0001e9c <isxdigit+0x20>
c0001e93:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001e98:	7e 12                	jle    c0001eac <isxdigit+0x30>
c0001e9a:	66 90                	xchg   ax,ax
c0001e9c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ea1:	7e 11                	jle    c0001eb4 <isxdigit+0x38>
c0001ea3:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001ea8:	7f 0a                	jg     c0001eb4 <isxdigit+0x38>
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 01 00 00 00       	mov    eax,0x1
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax
c0001eb4:	b8 00 00 00 00       	mov    eax,0x0
c0001eb9:	c3                   	ret    

c0001eba <disk_status>:
c0001eba:	31 c0                	xor    eax,eax
c0001ebc:	c3                   	ret    

c0001ebd <disk_initialize>:
c0001ebd:	31 c0                	xor    eax,eax
c0001ebf:	c3                   	ret    

c0001ec0 <disk_read>:
c0001ec0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ec5:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ecd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ed1:	e9 fa 69 02 00       	jmp    c00288d0 <fatWrapperReadDisk>

c0001ed6 <disk_write>:
c0001ed6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001edb:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ee3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ee7:	e9 24 6a 02 00       	jmp    c0028910 <fatWrapperWriteDisk>

c0001eec <disk_ioctl>:
c0001eec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001ef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001ef5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001efa:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f06:	e9 45 6a 02 00       	jmp    c0028950 <fatWrapperIoctl>

c0001f0b <ld_word>:
c0001f0b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f0f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f12:	c1 e2 08             	shl    edx,0x8
c0001f15:	09 d0                	or     eax,edx
c0001f17:	c3                   	ret    

c0001f18 <ld_dword>:
c0001f18:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001f1c:	89 d1                	mov    ecx,edx
c0001f1e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f25:	c1 e1 08             	shl    ecx,0x8
c0001f28:	09 ca                	or     edx,ecx
c0001f2a:	c1 e2 08             	shl    edx,0x8
c0001f2d:	09 d0                	or     eax,edx
c0001f2f:	c3                   	ret    

c0001f30 <st_word>:
c0001f30:	66 89 10             	mov    WORD PTR [eax],dx
c0001f33:	c3                   	ret    

c0001f34 <st_dword>:
c0001f34:	89 10                	mov    DWORD PTR [eax],edx
c0001f36:	c3                   	ret    

c0001f37 <mem_cpy>:
c0001f37:	85 c9                	test   ecx,ecx
c0001f39:	74 10                	je     c0001f4b <mem_cpy+0x14>
c0001f3b:	57                   	push   edi
c0001f3c:	01 c1                	add    ecx,eax
c0001f3e:	56                   	push   esi
c0001f3f:	89 c7                	mov    edi,eax
c0001f41:	89 d6                	mov    esi,edx
c0001f43:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f44:	39 f9                	cmp    ecx,edi
c0001f46:	75 fb                	jne    c0001f43 <mem_cpy+0xc>
c0001f48:	5e                   	pop    esi
c0001f49:	5f                   	pop    edi
c0001f4a:	c3                   	ret    
c0001f4b:	c3                   	ret    

c0001f4c <mem_set>:
c0001f4c:	01 c1                	add    ecx,eax
c0001f4e:	88 10                	mov    BYTE PTR [eax],dl
c0001f50:	40                   	inc    eax
c0001f51:	39 c8                	cmp    eax,ecx
c0001f53:	75 f9                	jne    c0001f4e <mem_set+0x2>
c0001f55:	c3                   	ret    

c0001f56 <mem_cmp>:
c0001f56:	57                   	push   edi
c0001f57:	56                   	push   esi
c0001f58:	89 c6                	mov    esi,eax
c0001f5a:	53                   	push   ebx
c0001f5b:	46                   	inc    esi
c0001f5c:	42                   	inc    edx
c0001f5d:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f61:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f65:	29 fb                	sub    ebx,edi
c0001f67:	89 cf                	mov    edi,ecx
c0001f69:	29 f7                	sub    edi,esi
c0001f6b:	01 c7                	add    edi,eax
c0001f6d:	74 04                	je     c0001f73 <mem_cmp+0x1d>
c0001f6f:	85 db                	test   ebx,ebx
c0001f71:	74 e8                	je     c0001f5b <mem_cmp+0x5>
c0001f73:	89 d8                	mov    eax,ebx
c0001f75:	5b                   	pop    ebx
c0001f76:	5e                   	pop    esi
c0001f77:	5f                   	pop    edi
c0001f78:	c3                   	ret    

c0001f79 <chk_chr>:
c0001f79:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f7c:	85 c9                	test   ecx,ecx
c0001f7e:	74 07                	je     c0001f87 <chk_chr+0xe>
c0001f80:	39 d1                	cmp    ecx,edx
c0001f82:	74 03                	je     c0001f87 <chk_chr+0xe>
c0001f84:	40                   	inc    eax
c0001f85:	eb f2                	jmp    c0001f79 <chk_chr>
c0001f87:	89 c8                	mov    eax,ecx
c0001f89:	c3                   	ret    

c0001f8a <dbc_1st>:
c0001f8a:	31 c0                	xor    eax,eax
c0001f8c:	c3                   	ret    

c0001f8d <dbc_2nd>:
c0001f8d:	31 c0                	xor    eax,eax
c0001f8f:	c3                   	ret    

c0001f90 <tchar2uni>:
c0001f90:	57                   	push   edi
c0001f91:	56                   	push   esi
c0001f92:	53                   	push   ebx
c0001f93:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f95:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001f97:	8d 73 01             	lea    esi,[ebx+0x1]
c0001f9a:	f6 c1 80             	test   cl,0x80
c0001f9d:	75 0a                	jne    c0001fa9 <tchar2uni+0x19>
c0001f9f:	0f b6 d1             	movzx  edx,cl
c0001fa2:	89 f3                	mov    ebx,esi
c0001fa4:	e9 b2 00 00 00       	jmp    c000205b <tchar2uni+0xcb>
c0001fa9:	89 ca                	mov    edx,ecx
c0001fab:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001fb1:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001fb7:	89 ca                	mov    edx,ecx
c0001fb9:	75 0a                	jne    c0001fc5 <tchar2uni+0x35>
c0001fbb:	83 e2 1f             	and    edx,0x1f
c0001fbe:	b9 01 00 00 00       	mov    ecx,0x1
c0001fc3:	eb 37                	jmp    c0001ffc <tchar2uni+0x6c>
c0001fc5:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001fcb:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001fd1:	75 0c                	jne    c0001fdf <tchar2uni+0x4f>
c0001fd3:	89 ca                	mov    edx,ecx
c0001fd5:	b9 02 00 00 00       	mov    ecx,0x2
c0001fda:	83 e2 0f             	and    edx,0xf
c0001fdd:	eb 1d                	jmp    c0001ffc <tchar2uni+0x6c>
c0001fdf:	89 cf                	mov    edi,ecx
c0001fe1:	83 ca ff             	or     edx,0xffffffff
c0001fe4:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001fea:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ff0:	75 70                	jne    c0002062 <tchar2uni+0xd2>
c0001ff2:	89 ca                	mov    edx,ecx
c0001ff4:	b9 03 00 00 00       	mov    ecx,0x3
c0001ff9:	83 e2 07             	and    edx,0x7
c0001ffc:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002000:	46                   	inc    esi
c0002001:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0002004:	89 cf                	mov    edi,ecx
c0002006:	81 e7 c0 00 00 00    	and    edi,0xc0
c000200c:	83 c7 80             	add    edi,0xffffff80
c000200f:	75 4e                	jne    c000205f <tchar2uni+0xcf>
c0002011:	c1 e2 06             	shl    edx,0x6
c0002014:	83 e1 3f             	and    ecx,0x3f
c0002017:	09 ca                	or     edx,ecx
c0002019:	39 de                	cmp    esi,ebx
c000201b:	75 e3                	jne    c0002000 <tchar2uni+0x70>
c000201d:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002023:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002029:	76 34                	jbe    c000205f <tchar2uni+0xcf>
c000202b:	8d 4a 80             	lea    ecx,[edx-0x80]
c000202e:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002034:	77 29                	ja     c000205f <tchar2uni+0xcf>
c0002036:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000203c:	76 1d                	jbe    c000205b <tchar2uni+0xcb>
c000203e:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002044:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000204a:	c1 e1 06             	shl    ecx,0x6
c000204d:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002053:	09 ca                	or     edx,ecx
c0002055:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c000205b:	89 18                	mov    DWORD PTR [eax],ebx
c000205d:	eb 03                	jmp    c0002062 <tchar2uni+0xd2>
c000205f:	83 ca ff             	or     edx,0xffffffff
c0002062:	5b                   	pop    ebx
c0002063:	89 d0                	mov    eax,edx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	c3                   	ret    

c0002068 <put_utf>:
c0002068:	53                   	push   ebx
c0002069:	83 f8 7f             	cmp    eax,0x7f
c000206c:	89 c3                	mov    ebx,eax
c000206e:	b0 00                	mov    al,0x0
c0002070:	77 11                	ja     c0002083 <put_utf+0x1b>
c0002072:	85 c9                	test   ecx,ecx
c0002074:	0f 84 e5 00 00 00    	je     c000215f <put_utf+0xf7>
c000207a:	88 1a                	mov    BYTE PTR [edx],bl
c000207c:	b0 01                	mov    al,0x1
c000207e:	e9 dc 00 00 00       	jmp    c000215f <put_utf+0xf7>
c0002083:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002089:	77 23                	ja     c00020ae <put_utf+0x46>
c000208b:	83 f9 01             	cmp    ecx,0x1
c000208e:	0f 86 cb 00 00 00    	jbe    c000215f <put_utf+0xf7>
c0002094:	89 d8                	mov    eax,ebx
c0002096:	83 e3 3f             	and    ebx,0x3f
c0002099:	c1 e8 06             	shr    eax,0x6
c000209c:	83 cb 80             	or     ebx,0xffffff80
c000209f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00020a2:	83 c8 c0             	or     eax,0xffffffc0
c00020a5:	88 02                	mov    BYTE PTR [edx],al
c00020a7:	b0 02                	mov    al,0x2
c00020a9:	e9 b1 00 00 00       	jmp    c000215f <put_utf+0xf7>
c00020ae:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00020b4:	77 40                	ja     c00020f6 <put_utf+0x8e>
c00020b6:	83 f9 02             	cmp    ecx,0x2
c00020b9:	0f 86 a0 00 00 00    	jbe    c000215f <put_utf+0xf7>
c00020bf:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00020c5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020cb:	0f 86 8e 00 00 00    	jbe    c000215f <put_utf+0xf7>
c00020d1:	89 d8                	mov    eax,ebx
c00020d3:	c1 e8 0c             	shr    eax,0xc
c00020d6:	83 c8 e0             	or     eax,0xffffffe0
c00020d9:	88 02                	mov    BYTE PTR [edx],al
c00020db:	89 d8                	mov    eax,ebx
c00020dd:	83 e3 3f             	and    ebx,0x3f
c00020e0:	c1 e8 06             	shr    eax,0x6
c00020e3:	83 cb 80             	or     ebx,0xffffff80
c00020e6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00020e9:	83 e0 3f             	and    eax,0x3f
c00020ec:	83 c8 80             	or     eax,0xffffff80
c00020ef:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020f2:	b0 03                	mov    al,0x3
c00020f4:	eb 69                	jmp    c000215f <put_utf+0xf7>
c00020f6:	83 f9 03             	cmp    ecx,0x3
c00020f9:	76 64                	jbe    c000215f <put_utf+0xf7>
c00020fb:	89 d9                	mov    ecx,ebx
c00020fd:	0f b7 c3             	movzx  eax,bx
c0002100:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002106:	66 31 c9             	xor    cx,cx
c0002109:	81 c1 00 00 00 28    	add    ecx,0x28000000
c000210f:	c1 e9 06             	shr    ecx,0x6
c0002112:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002118:	77 43                	ja     c000215d <put_utf+0xf5>
c000211a:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002120:	77 3b                	ja     c000215d <put_utf+0xf5>
c0002122:	09 cb                	or     ebx,ecx
c0002124:	81 c3 00 00 01 00    	add    ebx,0x10000
c000212a:	89 d8                	mov    eax,ebx
c000212c:	c1 e8 12             	shr    eax,0x12
c000212f:	83 c8 f0             	or     eax,0xfffffff0
c0002132:	88 02                	mov    BYTE PTR [edx],al
c0002134:	89 d8                	mov    eax,ebx
c0002136:	c1 e8 0c             	shr    eax,0xc
c0002139:	83 e0 3f             	and    eax,0x3f
c000213c:	83 c8 80             	or     eax,0xffffff80
c000213f:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002142:	89 d8                	mov    eax,ebx
c0002144:	83 e3 3f             	and    ebx,0x3f
c0002147:	c1 e8 06             	shr    eax,0x6
c000214a:	83 cb 80             	or     ebx,0xffffff80
c000214d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002150:	83 e0 3f             	and    eax,0x3f
c0002153:	83 c8 80             	or     eax,0xffffff80
c0002156:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002159:	b0 04                	mov    al,0x4
c000215b:	eb 02                	jmp    c000215f <put_utf+0xf7>
c000215d:	31 c0                	xor    eax,eax
c000215f:	5b                   	pop    ebx
c0002160:	c3                   	ret    

c0002161 <clst2sect>:
c0002161:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002164:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002167:	83 ea 02             	sub    edx,0x2
c000216a:	39 ca                	cmp    edx,ecx
c000216c:	76 0d                	jbe    c000217b <clst2sect+0x1a>
c000216e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002172:	0f af d1             	imul   edx,ecx
c0002175:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002178:	89 d0                	mov    eax,edx
c000217a:	c3                   	ret    
c000217b:	31 c0                	xor    eax,eax
c000217d:	c3                   	ret    

c000217e <pick_lfn>:
c000217e:	55                   	push   ebp
c000217f:	57                   	push   edi
c0002180:	89 c7                	mov    edi,eax
c0002182:	56                   	push   esi
c0002183:	53                   	push   ebx
c0002184:	89 d3                	mov    ebx,edx
c0002186:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002189:	e8 7d fd ff ff       	call   c0001f0b <ld_word>
c000218e:	66 85 c0             	test   ax,ax
c0002191:	74 04                	je     c0002197 <pick_lfn+0x19>
c0002193:	31 c0                	xor    eax,eax
c0002195:	eb 62                	jmp    c00021f9 <pick_lfn+0x7b>
c0002197:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000219a:	bd 01 00 00 00       	mov    ebp,0x1
c000219f:	31 f6                	xor    esi,esi
c00021a1:	83 e1 bf             	and    ecx,0xffffffbf
c00021a4:	49                   	dec    ecx
c00021a5:	6b c9 0d             	imul   ecx,ecx,0xd
c00021a8:	0f b6 86 20 f5 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0ae0]
c00021af:	01 d8                	add    eax,ebx
c00021b1:	e8 55 fd ff ff       	call   c0001f0b <ld_word>
c00021b6:	66 85 ed             	test   bp,bp
c00021b9:	74 11                	je     c00021cc <pick_lfn+0x4e>
c00021bb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021c1:	77 d0                	ja     c0002193 <pick_lfn+0x15>
c00021c3:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00021c7:	89 c5                	mov    ebp,eax
c00021c9:	41                   	inc    ecx
c00021ca:	eb 0a                	jmp    c00021d6 <pick_lfn+0x58>
c00021cc:	0f b7 c0             	movzx  eax,ax
c00021cf:	3d ff ff 00 00       	cmp    eax,0xffff
c00021d4:	75 bd                	jne    c0002193 <pick_lfn+0x15>
c00021d6:	46                   	inc    esi
c00021d7:	83 fe 0d             	cmp    esi,0xd
c00021da:	75 cc                	jne    c00021a8 <pick_lfn+0x2a>
c00021dc:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00021df:	74 13                	je     c00021f4 <pick_lfn+0x76>
c00021e1:	66 85 ed             	test   bp,bp
c00021e4:	74 0e                	je     c00021f4 <pick_lfn+0x76>
c00021e6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021ec:	77 a5                	ja     c0002193 <pick_lfn+0x15>
c00021ee:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00021f4:	b8 01 00 00 00       	mov    eax,0x1
c00021f9:	5b                   	pop    ebx
c00021fa:	5e                   	pop    esi
c00021fb:	5f                   	pop    edi
c00021fc:	5d                   	pop    ebp
c00021fd:	c3                   	ret    

c00021fe <put_lfn>:
c00021fe:	55                   	push   ebp
c00021ff:	57                   	push   edi
c0002200:	89 d7                	mov    edi,edx
c0002202:	56                   	push   esi
c0002203:	31 f6                	xor    esi,esi
c0002205:	53                   	push   ebx
c0002206:	83 ec 0c             	sub    esp,0xc
c0002209:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000220d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002211:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002217:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000221b:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000221e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002221:	31 d2                	xor    edx,edx
c0002223:	e8 08 fd ff ff       	call   c0001f30 <st_word>
c0002228:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000222f:	0f b6 d9             	movzx  ebx,cl
c0002232:	4b                   	dec    ebx
c0002233:	6b db 0d             	imul   ebx,ebx,0xd
c0002236:	0f b7 c6             	movzx  eax,si
c0002239:	3d ff ff 00 00       	cmp    eax,0xffff
c000223e:	74 09                	je     c0002249 <put_lfn+0x4b>
c0002240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002244:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002248:	43                   	inc    ebx
c0002249:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000224c:	0f b7 ee             	movzx  ebp,si
c000224f:	89 ea                	mov    edx,ebp
c0002251:	0f b6 80 20 f5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0ae0]
c0002258:	01 f8                	add    eax,edi
c000225a:	e8 d1 fc ff ff       	call   c0001f30 <st_word>
c000225f:	85 ed                	test   ebp,ebp
c0002261:	75 05                	jne    c0002268 <put_lfn+0x6a>
c0002263:	be ff ff 00 00       	mov    esi,0xffff
c0002268:	ff 04 24             	inc    DWORD PTR [esp]
c000226b:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000226f:	75 c5                	jne    c0002236 <put_lfn+0x38>
c0002271:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002277:	74 0b                	je     c0002284 <put_lfn+0x86>
c0002279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000227d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002282:	75 07                	jne    c000228b <put_lfn+0x8d>
c0002284:	83 c9 40             	or     ecx,0x40
c0002287:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000228b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000228f:	88 07                	mov    BYTE PTR [edi],al
c0002291:	83 c4 0c             	add    esp,0xc
c0002294:	5b                   	pop    ebx
c0002295:	5e                   	pop    esi
c0002296:	5f                   	pop    edi
c0002297:	5d                   	pop    ebp
c0002298:	c3                   	ret    

c0002299 <gen_numname>:
c0002299:	57                   	push   edi
c000229a:	89 cf                	mov    edi,ecx
c000229c:	56                   	push   esi
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	53                   	push   ebx
c00022a3:	89 c6                	mov    esi,eax
c00022a5:	83 ec 10             	sub    esp,0x10
c00022a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00022ac:	e8 86 fc ff ff       	call   c0001f37 <mem_cpy>
c00022b1:	83 fb 05             	cmp    ebx,0x5
c00022b4:	76 30                	jbe    c00022e6 <gen_numname+0x4d>
c00022b6:	66 8b 07             	mov    ax,WORD PTR [edi]
c00022b9:	66 85 c0             	test   ax,ax
c00022bc:	74 28                	je     c00022e6 <gen_numname+0x4d>
c00022be:	83 c7 02             	add    edi,0x2
c00022c1:	ba 10 00 00 00       	mov    edx,0x10
c00022c6:	89 c1                	mov    ecx,eax
c00022c8:	01 db                	add    ebx,ebx
c00022ca:	c1 e0 10             	shl    eax,0x10
c00022cd:	83 e1 01             	and    ecx,0x1
c00022d0:	c1 e8 11             	shr    eax,0x11
c00022d3:	01 cb                	add    ebx,ecx
c00022d5:	0f ba e3 10          	bt     ebx,0x10
c00022d9:	73 06                	jae    c00022e1 <gen_numname+0x48>
c00022db:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00022e1:	4a                   	dec    edx
c00022e2:	75 e2                	jne    c00022c6 <gen_numname+0x2d>
c00022e4:	eb d0                	jmp    c00022b6 <gen_numname+0x1d>
c00022e6:	b8 07 00 00 00       	mov    eax,0x7
c00022eb:	89 d9                	mov    ecx,ebx
c00022ed:	83 e1 0f             	and    ecx,0xf
c00022f0:	8d 79 30             	lea    edi,[ecx+0x30]
c00022f3:	83 ff 39             	cmp    edi,0x39
c00022f6:	89 fa                	mov    edx,edi
c00022f8:	76 03                	jbe    c00022fd <gen_numname+0x64>
c00022fa:	8d 51 37             	lea    edx,[ecx+0x37]
c00022fd:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002300:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002304:	89 da                	mov    edx,ebx
c0002306:	c1 ea 04             	shr    edx,0x4
c0002309:	83 fb 0f             	cmp    ebx,0xf
c000230c:	76 06                	jbe    c0002314 <gen_numname+0x7b>
c000230e:	89 c8                	mov    eax,ecx
c0002310:	89 d3                	mov    ebx,edx
c0002312:	eb d7                	jmp    c00022eb <gen_numname+0x52>
c0002314:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002319:	8d 58 fe             	lea    ebx,[eax-0x2]
c000231c:	31 d2                	xor    edx,edx
c000231e:	8d 04 16             	lea    eax,[esi+edx*1]
c0002321:	39 ca                	cmp    edx,ecx
c0002323:	73 19                	jae    c000233e <gen_numname+0xa5>
c0002325:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002328:	83 f8 20             	cmp    eax,0x20
c000232b:	74 11                	je     c000233e <gen_numname+0xa5>
c000232d:	e8 58 fc ff ff       	call   c0001f8a <dbc_1st>
c0002332:	85 c0                	test   eax,eax
c0002334:	74 05                	je     c000233b <gen_numname+0xa2>
c0002336:	39 d3                	cmp    ebx,edx
c0002338:	74 04                	je     c000233e <gen_numname+0xa5>
c000233a:	42                   	inc    edx
c000233b:	42                   	inc    edx
c000233c:	eb e0                	jmp    c000231e <gen_numname+0x85>
c000233e:	83 f9 07             	cmp    ecx,0x7
c0002341:	b0 20                	mov    al,0x20
c0002343:	77 05                	ja     c000234a <gen_numname+0xb1>
c0002345:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002349:	41                   	inc    ecx
c000234a:	42                   	inc    edx
c000234b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000234f:	83 fa 07             	cmp    edx,0x7
c0002352:	76 ea                	jbe    c000233e <gen_numname+0xa5>
c0002354:	83 c4 10             	add    esp,0x10
c0002357:	5b                   	pop    ebx
c0002358:	5e                   	pop    esi
c0002359:	5f                   	pop    edi
c000235a:	c3                   	ret    

c000235b <sum_sfn>:
c000235b:	53                   	push   ebx
c000235c:	31 c9                	xor    ecx,ecx
c000235e:	31 db                	xor    ebx,ebx
c0002360:	0f b6 d1             	movzx  edx,cl
c0002363:	d1 ea                	shr    edx,1
c0002365:	c1 e1 07             	shl    ecx,0x7
c0002368:	09 ca                	or     edx,ecx
c000236a:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000236d:	43                   	inc    ebx
c000236e:	01 ca                	add    edx,ecx
c0002370:	83 fb 0b             	cmp    ebx,0xb
c0002373:	88 d1                	mov    cl,dl
c0002375:	75 e9                	jne    c0002360 <sum_sfn+0x5>
c0002377:	5b                   	pop    ebx
c0002378:	88 d0                	mov    al,dl
c000237a:	c3                   	ret    

c000237b <get_ldnumber>:
c000237b:	55                   	push   ebp
c000237c:	57                   	push   edi
c000237d:	56                   	push   esi
c000237e:	83 ce ff             	or     esi,0xffffffff
c0002381:	53                   	push   ebx
c0002382:	8b 10                	mov    edx,DWORD PTR [eax]
c0002384:	85 d2                	test   edx,edx
c0002386:	74 38                	je     c00023c0 <get_ldnumber+0x45>
c0002388:	89 c5                	mov    ebp,eax
c000238a:	89 d1                	mov    ecx,edx
c000238c:	41                   	inc    ecx
c000238d:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002391:	80 fb 1f             	cmp    bl,0x1f
c0002394:	76 05                	jbe    c000239b <get_ldnumber+0x20>
c0002396:	83 fb 3a             	cmp    ebx,0x3a
c0002399:	75 f1                	jne    c000238c <get_ldnumber+0x11>
c000239b:	31 f6                	xor    esi,esi
c000239d:	83 fb 3a             	cmp    ebx,0x3a
c00023a0:	75 1e                	jne    c00023c0 <get_ldnumber+0x45>
c00023a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00023a4:	83 ce ff             	or     esi,0xffffffff
c00023a7:	8d 7b d0             	lea    edi,[ebx-0x30]
c00023aa:	89 f8                	mov    eax,edi
c00023ac:	3c 09                	cmp    al,0x9
c00023ae:	77 10                	ja     c00023c0 <get_ldnumber+0x45>
c00023b0:	83 c2 02             	add    edx,0x2
c00023b3:	39 d1                	cmp    ecx,edx
c00023b5:	75 09                	jne    c00023c0 <get_ldnumber+0x45>
c00023b7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00023ba:	0f be f3             	movsx  esi,bl
c00023bd:	83 ee 30             	sub    esi,0x30
c00023c0:	5b                   	pop    ebx
c00023c1:	89 f0                	mov    eax,esi
c00023c3:	5e                   	pop    esi
c00023c4:	5f                   	pop    edi
c00023c5:	5d                   	pop    ebp
c00023c6:	c3                   	ret    

c00023c7 <validate>:
c00023c7:	56                   	push   esi
c00023c8:	85 c0                	test   eax,eax
c00023ca:	53                   	push   ebx
c00023cb:	89 d6                	mov    esi,edx
c00023cd:	51                   	push   ecx
c00023ce:	75 09                	jne    c00023d9 <validate+0x12>
c00023d0:	b8 09 00 00 00       	mov    eax,0x9
c00023d5:	31 c9                	xor    ecx,ecx
c00023d7:	eb 2e                	jmp    c0002407 <validate+0x40>
c00023d9:	89 c3                	mov    ebx,eax
c00023db:	8b 00                	mov    eax,DWORD PTR [eax]
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 ef                	je     c00023d0 <validate+0x9>
c00023e1:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023e4:	74 ea                	je     c00023d0 <validate+0x9>
c00023e6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00023e9:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00023ed:	75 e1                	jne    c00023d0 <validate+0x9>
c00023ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023f3:	83 ec 0c             	sub    esp,0xc
c00023f6:	50                   	push   eax
c00023f7:	e8 be fa ff ff       	call   c0001eba <disk_status>
c00023fc:	83 c4 10             	add    esp,0x10
c00023ff:	a8 01                	test   al,0x1
c0002401:	75 cd                	jne    c00023d0 <validate+0x9>
c0002403:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002405:	31 c0                	xor    eax,eax
c0002407:	89 0e                	mov    DWORD PTR [esi],ecx
c0002409:	5a                   	pop    edx
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	c3                   	ret    

c000240d <sync_window>:
c000240d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002411:	74 58                	je     c000246b <sync_window+0x5e>
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	89 c3                	mov    ebx,eax
c0002417:	51                   	push   ecx
c0002418:	6a 01                	push   0x1
c000241a:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000241d:	8d 70 34             	lea    esi,[eax+0x34]
c0002420:	56                   	push   esi
c0002421:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 ab fa ff ff       	call   c0001ed6 <disk_write>
c000242b:	83 c4 10             	add    esp,0x10
c000242e:	ba 01 00 00 00       	mov    edx,0x1
c0002433:	85 c0                	test   eax,eax
c0002435:	75 2e                	jne    c0002465 <sync_window+0x58>
c0002437:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000243b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000243e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002441:	89 c1                	mov    ecx,eax
c0002443:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002446:	39 d1                	cmp    ecx,edx
c0002448:	73 19                	jae    c0002463 <sync_window+0x56>
c000244a:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000244e:	75 13                	jne    c0002463 <sync_window+0x56>
c0002450:	6a 01                	push   0x1
c0002452:	01 d0                	add    eax,edx
c0002454:	50                   	push   eax
c0002455:	56                   	push   esi
c0002456:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000245a:	50                   	push   eax
c000245b:	e8 76 fa ff ff       	call   c0001ed6 <disk_write>
c0002460:	83 c4 10             	add    esp,0x10
c0002463:	31 d2                	xor    edx,edx
c0002465:	89 d0                	mov    eax,edx
c0002467:	5a                   	pop    edx
c0002468:	5b                   	pop    ebx
c0002469:	5e                   	pop    esi
c000246a:	c3                   	ret    
c000246b:	31 d2                	xor    edx,edx
c000246d:	89 d0                	mov    eax,edx
c000246f:	c3                   	ret    

c0002470 <move_window>:
c0002470:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002473:	74 3a                	je     c00024af <move_window+0x3f>
c0002475:	56                   	push   esi
c0002476:	89 d6                	mov    esi,edx
c0002478:	53                   	push   ebx
c0002479:	89 c3                	mov    ebx,eax
c000247b:	51                   	push   ecx
c000247c:	e8 8c ff ff ff       	call   c000240d <sync_window>
c0002481:	85 c0                	test   eax,eax
c0002483:	75 2d                	jne    c00024b2 <move_window+0x42>
c0002485:	6a 01                	push   0x1
c0002487:	56                   	push   esi
c0002488:	8d 43 34             	lea    eax,[ebx+0x34]
c000248b:	50                   	push   eax
c000248c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002490:	50                   	push   eax
c0002491:	e8 2a fa ff ff       	call   c0001ec0 <disk_read>
c0002496:	83 c4 10             	add    esp,0x10
c0002499:	89 c2                	mov    edx,eax
c000249b:	31 c0                	xor    eax,eax
c000249d:	85 d2                	test   edx,edx
c000249f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00024a4:	0f 45 f2             	cmovne esi,edx
c00024a7:	0f 95 c0             	setne  al
c00024aa:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00024ad:	eb 03                	jmp    c00024b2 <move_window+0x42>
c00024af:	31 c0                	xor    eax,eax
c00024b1:	c3                   	ret    
c00024b2:	5a                   	pop    edx
c00024b3:	5b                   	pop    ebx
c00024b4:	5e                   	pop    esi
c00024b5:	c3                   	ret    

c00024b6 <check_fs>:
c00024b6:	53                   	push   ebx
c00024b7:	89 c3                	mov    ebx,eax
c00024b9:	83 ec 08             	sub    esp,0x8
c00024bc:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c0:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00024c7:	e8 a4 ff ff ff       	call   c0002470 <move_window>
c00024cc:	ba 04 00 00 00       	mov    edx,0x4
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 68                	jne    c000253d <check_fs+0x87>
c00024d5:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00024db:	e8 2b fa ff ff       	call   c0001f0b <ld_word>
c00024e0:	ba 03 00 00 00       	mov    edx,0x3
c00024e5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024e9:	75 52                	jne    c000253d <check_fs+0x87>
c00024eb:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00024ee:	8d 50 18             	lea    edx,[eax+0x18]
c00024f1:	80 fa 01             	cmp    dl,0x1
c00024f4:	76 09                	jbe    c00024ff <check_fs+0x49>
c00024f6:	3c eb                	cmp    al,0xeb
c00024f8:	ba 02 00 00 00       	mov    edx,0x2
c00024fd:	75 3e                	jne    c000253d <check_fs+0x87>
c00024ff:	ba 40 32 03 c0       	mov    edx,0xc0033240
c0002504:	b9 03 00 00 00       	mov    ecx,0x3
c0002509:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000250c:	e8 45 fa ff ff       	call   c0001f56 <mem_cmp>
c0002511:	31 d2                	xor    edx,edx
c0002513:	85 c0                	test   eax,eax
c0002515:	74 26                	je     c000253d <check_fs+0x87>
c0002517:	ba dc f3 02 c0       	mov    edx,0xc002f3dc
c000251c:	b9 05 00 00 00       	mov    ecx,0x5
c0002521:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002527:	e8 2a fa ff ff       	call   c0001f56 <mem_cmp>
c000252c:	31 d2                	xor    edx,edx
c000252e:	85 c0                	test   eax,eax
c0002530:	74 0b                	je     c000253d <check_fs+0x87>
c0002532:	31 d2                	xor    edx,edx
c0002534:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002538:	0f 95 c2             	setne  dl
c000253b:	01 d2                	add    edx,edx
c000253d:	83 c4 08             	add    esp,0x8
c0002540:	89 d0                	mov    eax,edx
c0002542:	5b                   	pop    ebx
c0002543:	c3                   	ret    

c0002544 <find_volume>:
c0002544:	55                   	push   ebp
c0002545:	57                   	push   edi
c0002546:	56                   	push   esi
c0002547:	89 c6                	mov    esi,eax
c0002549:	53                   	push   ebx
c000254a:	89 d3                	mov    ebx,edx
c000254c:	83 ec 2c             	sub    esp,0x2c
c000254f:	31 d2                	xor    edx,edx
c0002551:	e8 60 ff ff ff       	call   c00024b6 <check_fs>
c0002556:	85 db                	test   ebx,ebx
c0002558:	0f 94 c2             	sete   dl
c000255b:	83 f8 02             	cmp    eax,0x2
c000255e:	74 07                	je     c0002567 <find_volume+0x23>
c0002560:	77 63                	ja     c00025c5 <find_volume+0x81>
c0002562:	f6 c2 01             	test   dl,0x1
c0002565:	75 5e                	jne    c00025c5 <find_volume+0x81>
c0002567:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000256d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002571:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c0002577:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000257b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000257f:	89 f8                	mov    eax,edi
c0002581:	83 c7 10             	add    edi,0x10
c0002584:	e8 8f f9 ff ff       	call   c0001f18 <ld_dword>
c0002589:	83 c5 04             	add    ebp,0x4
c000258c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002590:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002593:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0002597:	75 e2                	jne    c000257b <find_volume+0x37>
c0002599:	83 fb 01             	cmp    ebx,0x1
c000259c:	0f b6 fa             	movzx  edi,dl
c000259f:	83 d3 ff             	adc    ebx,0xffffffff
c00025a2:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00025a6:	b8 03 00 00 00       	mov    eax,0x3
c00025ab:	85 d2                	test   edx,edx
c00025ad:	74 07                	je     c00025b6 <find_volume+0x72>
c00025af:	89 f0                	mov    eax,esi
c00025b1:	e8 00 ff ff ff       	call   c00024b6 <check_fs>
c00025b6:	83 f8 01             	cmp    eax,0x1
c00025b9:	76 0a                	jbe    c00025c5 <find_volume+0x81>
c00025bb:	85 ff                	test   edi,edi
c00025bd:	74 06                	je     c00025c5 <find_volume+0x81>
c00025bf:	43                   	inc    ebx
c00025c0:	83 fb 03             	cmp    ebx,0x3
c00025c3:	76 dd                	jbe    c00025a2 <find_volume+0x5e>
c00025c5:	83 c4 2c             	add    esp,0x2c
c00025c8:	5b                   	pop    ebx
c00025c9:	5e                   	pop    esi
c00025ca:	5f                   	pop    edi
c00025cb:	5d                   	pop    ebp
c00025cc:	c3                   	ret    

c00025cd <mount_volume>:
c00025cd:	55                   	push   ebp
c00025ce:	89 d5                	mov    ebp,edx
c00025d0:	57                   	push   edi
c00025d1:	89 cf                	mov    edi,ecx
c00025d3:	56                   	push   esi
c00025d4:	53                   	push   ebx
c00025d5:	bb 0b 00 00 00       	mov    ebx,0xb
c00025da:	83 ec 2c             	sub    esp,0x2c
c00025dd:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025e3:	e8 93 fd ff ff       	call   c000237b <get_ldnumber>
c00025e8:	85 c0                	test   eax,eax
c00025ea:	0f 88 d0 02 00 00    	js     c00028c0 <mount_volume+0x2f3>
c00025f0:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00025f7:	89 c2                	mov    edx,eax
c00025f9:	bb 0c 00 00 00       	mov    ebx,0xc
c00025fe:	85 f6                	test   esi,esi
c0002600:	0f 84 ba 02 00 00    	je     c00028c0 <mount_volume+0x2f3>
c0002606:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002609:	83 e7 fe             	and    edi,0xfffffffe
c000260c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000260f:	74 3c                	je     c000264d <mount_volume+0x80>
c0002611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002615:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002619:	83 ec 0c             	sub    esp,0xc
c000261c:	50                   	push   eax
c000261d:	e8 98 f8 ff ff       	call   c0001eba <disk_status>
c0002622:	83 c4 10             	add    esp,0x10
c0002625:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002629:	a8 01                	test   al,0x1
c000262b:	75 20                	jne    c000264d <mount_volume+0x80>
c000262d:	31 db                	xor    ebx,ebx
c000262f:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002635:	0f 84 85 02 00 00    	je     c00028c0 <mount_volume+0x2f3>
c000263b:	a8 04                	test   al,0x4
c000263d:	0f 84 7d 02 00 00    	je     c00028c0 <mount_volume+0x2f3>
c0002643:	bb 0a 00 00 00       	mov    ebx,0xa
c0002648:	e9 73 02 00 00       	jmp    c00028c0 <mount_volume+0x2f3>
c000264d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002650:	83 ec 0c             	sub    esp,0xc
c0002653:	0f b6 c2             	movzx  eax,dl
c0002656:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002659:	bb 03 00 00 00       	mov    ebx,0x3
c000265e:	50                   	push   eax
c000265f:	e8 59 f8 ff ff       	call   c0001ebd <disk_initialize>
c0002664:	83 c4 10             	add    esp,0x10
c0002667:	a8 01                	test   al,0x1
c0002669:	0f 85 51 02 00 00    	jne    c00028c0 <mount_volume+0x2f3>
c000266f:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002675:	74 04                	je     c000267b <mount_volume+0xae>
c0002677:	a8 04                	test   al,0x4
c0002679:	75 c8                	jne    c0002643 <mount_volume+0x76>
c000267b:	31 d2                	xor    edx,edx
c000267d:	89 f0                	mov    eax,esi
c000267f:	e8 c0 fe ff ff       	call   c0002544 <find_volume>
c0002684:	bb 01 00 00 00       	mov    ebx,0x1
c0002689:	83 f8 04             	cmp    eax,0x4
c000268c:	0f 84 2e 02 00 00    	je     c00028c0 <mount_volume+0x2f3>
c0002692:	83 f8 01             	cmp    eax,0x1
c0002695:	76 0a                	jbe    c00026a1 <mount_volume+0xd4>
c0002697:	bb 0d 00 00 00       	mov    ebx,0xd
c000269c:	e9 1f 02 00 00       	jmp    c00028c0 <mount_volume+0x2f3>
c00026a1:	8d 46 3f             	lea    eax,[esi+0x3f]
c00026a4:	e8 62 f8 ff ff       	call   c0001f0b <ld_word>
c00026a9:	66 3d 00 02          	cmp    ax,0x200
c00026ad:	75 e8                	jne    c0002697 <mount_volume+0xca>
c00026af:	8d 46 4a             	lea    eax,[esi+0x4a]
c00026b2:	e8 54 f8 ff ff       	call   c0001f0b <ld_word>
c00026b7:	0f b7 c0             	movzx  eax,ax
c00026ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026be:	85 c0                	test   eax,eax
c00026c0:	75 0c                	jne    c00026ce <mount_volume+0x101>
c00026c2:	8d 46 58             	lea    eax,[esi+0x58]
c00026c5:	e8 4e f8 ff ff       	call   c0001f18 <ld_dword>
c00026ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026ce:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00026d1:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00026d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00026dc:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00026df:	89 e8                	mov    eax,ebp
c00026e1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00026e4:	8d 45 ff             	lea    eax,[ebp-0x1]
c00026e7:	3c 01                	cmp    al,0x1
c00026e9:	77 ac                	ja     c0002697 <mount_volume+0xca>
c00026eb:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00026ef:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00026f3:	66 85 c0             	test   ax,ax
c00026f6:	89 c3                	mov    ebx,eax
c00026f8:	74 9d                	je     c0002697 <mount_volume+0xca>
c00026fa:	8d 40 ff             	lea    eax,[eax-0x1]
c00026fd:	85 d8                	test   eax,ebx
c00026ff:	75 96                	jne    c0002697 <mount_volume+0xca>
c0002701:	8d 46 45             	lea    eax,[esi+0x45]
c0002704:	e8 02 f8 ff ff       	call   c0001f0b <ld_word>
c0002709:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000270d:	a8 0f                	test   al,0xf
c000270f:	89 c7                	mov    edi,eax
c0002711:	75 84                	jne    c0002697 <mount_volume+0xca>
c0002713:	8d 46 47             	lea    eax,[esi+0x47]
c0002716:	e8 f0 f7 ff ff       	call   c0001f0b <ld_word>
c000271b:	0f b7 d0             	movzx  edx,ax
c000271e:	85 d2                	test   edx,edx
c0002720:	75 0a                	jne    c000272c <mount_volume+0x15f>
c0002722:	8d 46 54             	lea    eax,[esi+0x54]
c0002725:	e8 ee f7 ff ff       	call   c0001f18 <ld_dword>
c000272a:	89 c2                	mov    edx,eax
c000272c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002730:	8d 46 42             	lea    eax,[esi+0x42]
c0002733:	e8 d3 f7 ff ff       	call   c0001f0b <ld_word>
c0002738:	0f b7 c8             	movzx  ecx,ax
c000273b:	85 c9                	test   ecx,ecx
c000273d:	0f 84 54 ff ff ff    	je     c0002697 <mount_volume+0xca>
c0002743:	89 e8                	mov    eax,ebp
c0002745:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002749:	0f b6 e8             	movzx  ebp,al
c000274c:	0f b7 c7             	movzx  eax,di
c000274f:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002754:	c1 e8 04             	shr    eax,0x4
c0002757:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000275b:	01 e8                	add    eax,ebp
c000275d:	01 c8                	add    eax,ecx
c000275f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002763:	39 c2                	cmp    edx,eax
c0002765:	0f 82 2c ff ff ff    	jb     c0002697 <mount_volume+0xca>
c000276b:	29 c2                	sub    edx,eax
c000276d:	89 d5                	mov    ebp,edx
c000276f:	89 d0                	mov    eax,edx
c0002771:	31 d2                	xor    edx,edx
c0002773:	f7 f3                	div    ebx
c0002775:	39 dd                	cmp    ebp,ebx
c0002777:	0f 82 1a ff ff ff    	jb     c0002697 <mount_volume+0xca>
c000277d:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002782:	0f 87 0f ff ff ff    	ja     c0002697 <mount_volume+0xca>
c0002788:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000278d:	0f 86 1e 01 00 00    	jbe    c00028b1 <mount_volume+0x2e4>
c0002793:	bb 03 00 00 00       	mov    ebx,0x3
c0002798:	8d 68 02             	lea    ebp,[eax+0x2]
c000279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000279f:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00027a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00027a6:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00027aa:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00027ad:	01 c8                	add    eax,ecx
c00027af:	83 fb 03             	cmp    ebx,0x3
c00027b2:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00027b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00027b8:	75 23                	jne    c00027dd <mount_volume+0x210>
c00027ba:	8d 46 5e             	lea    eax,[esi+0x5e]
c00027bd:	e8 49 f7 ff ff       	call   c0001f0b <ld_word>
c00027c2:	09 c7                	or     edi,eax
c00027c4:	66 85 ff             	test   di,di
c00027c7:	0f 85 ca fe ff ff    	jne    c0002697 <mount_volume+0xca>
c00027cd:	8d 46 60             	lea    eax,[esi+0x60]
c00027d0:	e8 43 f7 ff ff       	call   c0001f18 <ld_dword>
c00027d5:	c1 e5 02             	shl    ebp,0x2
c00027d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027db:	eb 25                	jmp    c0002802 <mount_volume+0x235>
c00027dd:	66 85 ff             	test   di,di
c00027e0:	0f 84 b1 fe ff ff    	je     c0002697 <mount_volume+0xca>
c00027e6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00027ea:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00027ee:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00027f2:	83 e5 01             	and    ebp,0x1
c00027f5:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027f8:	d1 ea                	shr    edx,1
c00027fa:	01 d5                	add    ebp,edx
c00027fc:	83 fb 02             	cmp    ebx,0x2
c00027ff:	0f 44 ef             	cmove  ebp,edi
c0002802:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002808:	c1 ed 09             	shr    ebp,0x9
c000280b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000280f:	0f 87 82 fe ff ff    	ja     c0002697 <mount_volume+0xca>
c0002815:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000281c:	83 fb 03             	cmp    ebx,0x3
c000281f:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002826:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000282a:	75 6e                	jne    c000289a <mount_volume+0x2cd>
c000282c:	8d 46 64             	lea    eax,[esi+0x64]
c000282f:	e8 d7 f6 ff ff       	call   c0001f0b <ld_word>
c0002834:	66 48                	dec    ax
c0002836:	75 62                	jne    c000289a <mount_volume+0x2cd>
c0002838:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000283c:	89 f0                	mov    eax,esi
c000283e:	42                   	inc    edx
c000283f:	e8 2c fc ff ff       	call   c0002470 <move_window>
c0002844:	85 c0                	test   eax,eax
c0002846:	75 52                	jne    c000289a <mount_volume+0x2cd>
c0002848:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000284c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002852:	e8 b4 f6 ff ff       	call   c0001f0b <ld_word>
c0002857:	66 3d 55 aa          	cmp    ax,0xaa55
c000285b:	75 3d                	jne    c000289a <mount_volume+0x2cd>
c000285d:	8d 46 34             	lea    eax,[esi+0x34]
c0002860:	e8 b3 f6 ff ff       	call   c0001f18 <ld_dword>
c0002865:	3d 52 52 61 41       	cmp    eax,0x41615252
c000286a:	75 2e                	jne    c000289a <mount_volume+0x2cd>
c000286c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002872:	e8 a1 f6 ff ff       	call   c0001f18 <ld_dword>
c0002877:	3d 72 72 41 61       	cmp    eax,0x61417272
c000287c:	75 1c                	jne    c000289a <mount_volume+0x2cd>
c000287e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002884:	e8 8f f6 ff ff       	call   c0001f18 <ld_dword>
c0002889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000288c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002892:	e8 81 f6 ff ff       	call   c0001f18 <ld_dword>
c0002897:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000289a:	88 1e                	mov    BYTE PTR [esi],bl
c000289c:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c00028a2:	31 db                	xor    ebx,ebx
c00028a4:	40                   	inc    eax
c00028a5:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c00028ab:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00028af:	eb 0f                	jmp    c00028c0 <mount_volume+0x2f3>
c00028b1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00028b6:	19 db                	sbb    ebx,ebx
c00028b8:	83 c3 02             	add    ebx,0x2
c00028bb:	e9 d8 fe ff ff       	jmp    c0002798 <mount_volume+0x1cb>
c00028c0:	83 c4 2c             	add    esp,0x2c
c00028c3:	89 d8                	mov    eax,ebx
c00028c5:	5b                   	pop    ebx
c00028c6:	5e                   	pop    esi
c00028c7:	5f                   	pop    edi
c00028c8:	5d                   	pop    ebp
c00028c9:	c3                   	ret    

c00028ca <put_fat>:
c00028ca:	55                   	push   ebp
c00028cb:	bd 02 00 00 00       	mov    ebp,0x2
c00028d0:	57                   	push   edi
c00028d1:	56                   	push   esi
c00028d2:	53                   	push   ebx
c00028d3:	83 ec 1c             	sub    esp,0x1c
c00028d6:	83 fa 01             	cmp    edx,0x1
c00028d9:	0f 86 38 01 00 00    	jbe    c0002a17 <put_fat+0x14d>
c00028df:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00028e2:	0f 86 2f 01 00 00    	jbe    c0002a17 <put_fat+0x14d>
c00028e8:	89 c6                	mov    esi,eax
c00028ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00028ed:	89 cf                	mov    edi,ecx
c00028ef:	89 d3                	mov    ebx,edx
c00028f1:	83 f8 02             	cmp    eax,0x2
c00028f4:	0f 84 b1 00 00 00    	je     c00029ab <put_fat+0xe1>
c00028fa:	83 f8 03             	cmp    eax,0x3
c00028fd:	0f 84 d5 00 00 00    	je     c00029d8 <put_fat+0x10e>
c0002903:	48                   	dec    eax
c0002904:	0f 85 0d 01 00 00    	jne    c0002a17 <put_fat+0x14d>
c000290a:	89 d1                	mov    ecx,edx
c000290c:	89 f0                	mov    eax,esi
c000290e:	d1 e9                	shr    ecx,1
c0002910:	01 d1                	add    ecx,edx
c0002912:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002916:	89 ca                	mov    edx,ecx
c0002918:	c1 ea 09             	shr    edx,0x9
c000291b:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000291e:	e8 4d fb ff ff       	call   c0002470 <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	89 c5                	mov    ebp,eax
c0002927:	0f 85 ea 00 00 00    	jne    c0002a17 <put_fat+0x14d>
c000292d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002931:	8d 46 34             	lea    eax,[esi+0x34]
c0002934:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002938:	8d 41 01             	lea    eax,[ecx+0x1]
c000293b:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002941:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002945:	83 e3 01             	and    ebx,0x1
c0002948:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000294c:	89 f8                	mov    eax,edi
c000294e:	74 11                	je     c0002961 <put_fat+0x97>
c0002950:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002952:	89 f8                	mov    eax,edi
c0002954:	c1 e0 04             	shl    eax,0x4
c0002957:	25 f0 0f 00 00       	and    eax,0xff0
c000295c:	83 e2 0f             	and    edx,0xf
c000295f:	09 d0                	or     eax,edx
c0002961:	88 01                	mov    BYTE PTR [ecx],al
c0002963:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002967:	89 f0                	mov    eax,esi
c0002969:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000296d:	c1 ea 09             	shr    edx,0x9
c0002970:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002973:	e8 f8 fa ff ff       	call   c0002470 <move_window>
c0002978:	85 c0                	test   eax,eax
c000297a:	89 c5                	mov    ebp,eax
c000297c:	0f 85 95 00 00 00    	jne    c0002a17 <put_fat+0x14d>
c0002982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002986:	25 ff 01 00 00       	and    eax,0x1ff
c000298b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000298f:	85 db                	test   ebx,ebx
c0002991:	74 07                	je     c000299a <put_fat+0xd0>
c0002993:	c1 ef 04             	shr    edi,0x4
c0002996:	89 f9                	mov    ecx,edi
c0002998:	eb 0d                	jmp    c00029a7 <put_fat+0xdd>
c000299a:	8a 08                	mov    cl,BYTE PTR [eax]
c000299c:	c1 ef 08             	shr    edi,0x8
c000299f:	83 e7 0f             	and    edi,0xf
c00029a2:	83 e1 f0             	and    ecx,0xfffffff0
c00029a5:	09 f9                	or     ecx,edi
c00029a7:	88 08                	mov    BYTE PTR [eax],cl
c00029a9:	eb 27                	jmp    c00029d2 <put_fat+0x108>
c00029ab:	c1 ea 08             	shr    edx,0x8
c00029ae:	89 f0                	mov    eax,esi
c00029b0:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029b3:	e8 b8 fa ff ff       	call   c0002470 <move_window>
c00029b8:	85 c0                	test   eax,eax
c00029ba:	89 c5                	mov    ebp,eax
c00029bc:	75 59                	jne    c0002a17 <put_fat+0x14d>
c00029be:	01 db                	add    ebx,ebx
c00029c0:	0f b7 d7             	movzx  edx,di
c00029c3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00029c9:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00029cd:	e8 5e f5 ff ff       	call   c0001f30 <st_word>
c00029d2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00029d6:	eb 3f                	jmp    c0002a17 <put_fat+0x14d>
c00029d8:	c1 ea 07             	shr    edx,0x7
c00029db:	89 f0                	mov    eax,esi
c00029dd:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029e0:	e8 8b fa ff ff       	call   c0002470 <move_window>
c00029e5:	85 c0                	test   eax,eax
c00029e7:	89 c5                	mov    ebp,eax
c00029e9:	75 2c                	jne    c0002a17 <put_fat+0x14d>
c00029eb:	c1 e3 02             	shl    ebx,0x2
c00029ee:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00029f4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00029fa:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00029fe:	89 d8                	mov    eax,ebx
c0002a00:	e8 13 f5 ff ff       	call   c0001f18 <ld_dword>
c0002a05:	25 00 00 00 f0       	and    eax,0xf0000000
c0002a0a:	09 f8                	or     eax,edi
c0002a0c:	89 c2                	mov    edx,eax
c0002a0e:	89 d8                	mov    eax,ebx
c0002a10:	e8 1f f5 ff ff       	call   c0001f34 <st_dword>
c0002a15:	eb bb                	jmp    c00029d2 <put_fat+0x108>
c0002a17:	83 c4 1c             	add    esp,0x1c
c0002a1a:	89 e8                	mov    eax,ebp
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <dir_clear>:
c0002a21:	55                   	push   ebp
c0002a22:	57                   	push   edi
c0002a23:	56                   	push   esi
c0002a24:	89 c6                	mov    esi,eax
c0002a26:	53                   	push   ebx
c0002a27:	83 ec 1c             	sub    esp,0x1c
c0002a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002a2e:	e8 da f9 ff ff       	call   c000240d <sync_window>
c0002a33:	85 c0                	test   eax,eax
c0002a35:	0f 85 c1 00 00 00    	jne    c0002afc <dir_clear+0xdb>
c0002a3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3f:	89 f0                	mov    eax,esi
c0002a41:	e8 1b f7 ff ff       	call   c0002161 <clst2sect>
c0002a46:	31 d2                	xor    edx,edx
c0002a48:	b9 00 02 00 00       	mov    ecx,0x200
c0002a4d:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002a50:	89 c5                	mov    ebp,eax
c0002a52:	8d 46 34             	lea    eax,[esi+0x34]
c0002a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a59:	e8 ee f4 ff ff       	call   c0001f4c <mem_set>
c0002a5e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002a62:	b8 00 80 00 00       	mov    eax,0x8000
c0002a67:	c1 e3 09             	shl    ebx,0x9
c0002a6a:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002a70:	0f 47 d8             	cmova  ebx,eax
c0002a73:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002a79:	76 16                	jbe    c0002a91 <dir_clear+0x70>
c0002a7b:	83 ec 0c             	sub    esp,0xc
c0002a7e:	53                   	push   ebx
c0002a7f:	e8 cc 32 00 00       	call   c0005d50 <ff_memalloc>
c0002a84:	83 c4 10             	add    esp,0x10
c0002a87:	85 c0                	test   eax,eax
c0002a89:	89 c7                	mov    edi,eax
c0002a8b:	75 76                	jne    c0002b03 <dir_clear+0xe2>
c0002a8d:	d1 eb                	shr    ebx,1
c0002a8f:	eb e2                	jmp    c0002a73 <dir_clear+0x52>
c0002a91:	31 db                	xor    ebx,ebx
c0002a93:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a97:	39 d8                	cmp    eax,ebx
c0002a99:	76 53                	jbe    c0002aee <dir_clear+0xcd>
c0002a9b:	6a 01                	push   0x1
c0002a9d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002aa0:	50                   	push   eax
c0002aa1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002aa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002aa9:	50                   	push   eax
c0002aaa:	e8 27 f4 ff ff       	call   c0001ed6 <disk_write>
c0002aaf:	83 c4 10             	add    esp,0x10
c0002ab2:	85 c0                	test   eax,eax
c0002ab4:	75 38                	jne    c0002aee <dir_clear+0xcd>
c0002ab6:	43                   	inc    ebx
c0002ab7:	eb da                	jmp    c0002a93 <dir_clear+0x72>
c0002ab9:	52                   	push   edx
c0002aba:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002abd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ac1:	50                   	push   eax
c0002ac2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ac6:	57                   	push   edi
c0002ac7:	50                   	push   eax
c0002ac8:	e8 09 f4 ff ff       	call   c0001ed6 <disk_write>
c0002acd:	83 c4 10             	add    esp,0x10
c0002ad0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	75 0a                	jne    c0002ae2 <dir_clear+0xc1>
c0002ad8:	01 d3                	add    ebx,edx
c0002ada:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ade:	39 d8                	cmp    eax,ebx
c0002ae0:	77 d7                	ja     c0002ab9 <dir_clear+0x98>
c0002ae2:	83 ec 0c             	sub    esp,0xc
c0002ae5:	57                   	push   edi
c0002ae6:	e8 7d 32 00 00       	call   c0005d68 <ff_memfree>
c0002aeb:	83 c4 10             	add    esp,0x10
c0002aee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002af2:	39 d8                	cmp    eax,ebx
c0002af4:	0f 95 c0             	setne  al
c0002af7:	0f b6 c0             	movzx  eax,al
c0002afa:	eb 19                	jmp    c0002b15 <dir_clear+0xf4>
c0002afc:	b8 01 00 00 00       	mov    eax,0x1
c0002b01:	eb 12                	jmp    c0002b15 <dir_clear+0xf4>
c0002b03:	89 d9                	mov    ecx,ebx
c0002b05:	31 d2                	xor    edx,edx
c0002b07:	e8 40 f4 ff ff       	call   c0001f4c <mem_set>
c0002b0c:	89 da                	mov    edx,ebx
c0002b0e:	31 db                	xor    ebx,ebx
c0002b10:	c1 ea 09             	shr    edx,0x9
c0002b13:	eb c5                	jmp    c0002ada <dir_clear+0xb9>
c0002b15:	83 c4 1c             	add    esp,0x1c
c0002b18:	5b                   	pop    ebx
c0002b19:	5e                   	pop    esi
c0002b1a:	5f                   	pop    edi
c0002b1b:	5d                   	pop    ebp
c0002b1c:	c3                   	ret    

c0002b1d <create_name>:
c0002b1d:	55                   	push   ebp
c0002b1e:	89 c5                	mov    ebp,eax
c0002b20:	57                   	push   edi
c0002b21:	89 d7                	mov    edi,edx
c0002b23:	56                   	push   esi
c0002b24:	31 f6                	xor    esi,esi
c0002b26:	53                   	push   ebx
c0002b27:	83 ec 3c             	sub    esp,0x3c
c0002b2a:	8b 02                	mov    eax,DWORD PTR [edx]
c0002b2c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002b33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002b36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002b3e:	e8 4d f4 ff ff       	call   c0001f90 <tchar2uni>
c0002b43:	83 f8 ff             	cmp    eax,0xffffffff
c0002b46:	89 c3                	mov    ebx,eax
c0002b48:	75 0a                	jne    c0002b54 <create_name+0x37>
c0002b4a:	b8 06 00 00 00       	mov    eax,0x6
c0002b4f:	e9 7c 02 00 00       	jmp    c0002dd0 <create_name+0x2b3>
c0002b54:	3d ff ff 00 00       	cmp    eax,0xffff
c0002b59:	76 0c                	jbe    c0002b67 <create_name+0x4a>
c0002b5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b5f:	c1 e8 10             	shr    eax,0x10
c0002b62:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002b66:	46                   	inc    esi
c0002b67:	0f b7 d3             	movzx  edx,bx
c0002b6a:	89 d8                	mov    eax,ebx
c0002b6c:	83 fa 1f             	cmp    edx,0x1f
c0002b6f:	76 30                	jbe    c0002ba1 <create_name+0x84>
c0002b71:	83 fa 2f             	cmp    edx,0x2f
c0002b74:	74 2b                	je     c0002ba1 <create_name+0x84>
c0002b76:	83 fa 5c             	cmp    edx,0x5c
c0002b79:	74 35                	je     c0002bb0 <create_name+0x93>
c0002b7b:	83 fa 7f             	cmp    edx,0x7f
c0002b7e:	77 0e                	ja     c0002b8e <create_name+0x71>
c0002b80:	b8 e2 f3 02 c0       	mov    eax,0xc002f3e2
c0002b85:	e8 ef f3 ff ff       	call   c0001f79 <chk_chr>
c0002b8a:	85 c0                	test   eax,eax
c0002b8c:	75 bc                	jne    c0002b4a <create_name+0x2d>
c0002b8e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b94:	77 b4                	ja     c0002b4a <create_name+0x2d>
c0002b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b9a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002b9e:	46                   	inc    esi
c0002b9f:	eb 99                	jmp    c0002b3a <create_name+0x1d>
c0002ba1:	66 83 f8 1f          	cmp    ax,0x1f
c0002ba5:	b3 04                	mov    bl,0x4
c0002ba7:	76 1a                	jbe    c0002bc3 <create_name+0xa6>
c0002ba9:	eb 05                	jmp    c0002bb0 <create_name+0x93>
c0002bab:	40                   	inc    eax
c0002bac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002bb4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002bb7:	83 fa 2f             	cmp    edx,0x2f
c0002bba:	74 ef                	je     c0002bab <create_name+0x8e>
c0002bbc:	83 fa 5c             	cmp    edx,0x5c
c0002bbf:	74 ea                	je     c0002bab <create_name+0x8e>
c0002bc1:	31 db                	xor    ebx,ebx
c0002bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002bc7:	89 07                	mov    DWORD PTR [edi],eax
c0002bc9:	85 f6                	test   esi,esi
c0002bcb:	74 16                	je     c0002be3 <create_name+0xc6>
c0002bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002bd6:	83 f8 20             	cmp    eax,0x20
c0002bd9:	74 05                	je     c0002be0 <create_name+0xc3>
c0002bdb:	83 f8 2e             	cmp    eax,0x2e
c0002bde:	75 03                	jne    c0002be3 <create_name+0xc6>
c0002be0:	4e                   	dec    esi
c0002be1:	eb e6                	jmp    c0002bc9 <create_name+0xac>
c0002be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002be7:	31 ff                	xor    edi,edi
c0002be9:	85 f6                	test   esi,esi
c0002beb:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002bf1:	0f 84 53 ff ff ff    	je     c0002b4a <create_name+0x2d>
c0002bf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002bfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c02:	83 f8 20             	cmp    eax,0x20
c0002c05:	75 04                	jne    c0002c0b <create_name+0xee>
c0002c07:	89 d7                	mov    edi,edx
c0002c09:	eb ec                	jmp    c0002bf7 <create_name+0xda>
c0002c0b:	85 ff                	test   edi,edi
c0002c0d:	75 05                	jne    c0002c14 <create_name+0xf7>
c0002c0f:	83 f8 2e             	cmp    eax,0x2e
c0002c12:	75 08                	jne    c0002c1c <create_name+0xff>
c0002c14:	83 cb 03             	or     ebx,0x3
c0002c17:	eb 03                	jmp    c0002c1c <create_name+0xff>
c0002c19:	4e                   	dec    esi
c0002c1a:	74 0c                	je     c0002c28 <create_name+0x10b>
c0002c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002c26:	75 f1                	jne    c0002c19 <create_name+0xfc>
c0002c28:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c2d:	ba 20 00 00 00       	mov    edx,0x20
c0002c32:	8d 45 20             	lea    eax,[ebp+0x20]
c0002c35:	e8 12 f3 ff ff       	call   c0001f4c <mem_set>
c0002c3a:	31 c9                	xor    ecx,ecx
c0002c3c:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002c44:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002c49:	8d 47 01             	lea    eax,[edi+0x1]
c0002c4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c54:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	89 c7                	mov    edi,eax
c0002c5c:	0f 84 1d 01 00 00    	je     c0002d7f <create_name+0x262>
c0002c62:	83 f8 20             	cmp    eax,0x20
c0002c65:	74 0b                	je     c0002c72 <create_name+0x155>
c0002c67:	83 f8 2e             	cmp    eax,0x2e
c0002c6a:	75 0f                	jne    c0002c7b <create_name+0x15e>
c0002c6c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c70:	74 09                	je     c0002c7b <create_name+0x15e>
c0002c72:	83 cb 03             	or     ebx,0x3
c0002c75:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002c79:	eb ce                	jmp    c0002c49 <create_name+0x12c>
c0002c7b:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002c7f:	73 06                	jae    c0002c87 <create_name+0x16a>
c0002c81:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c85:	75 3a                	jne    c0002cc1 <create_name+0x1a4>
c0002c87:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002c8c:	75 08                	jne    c0002c96 <create_name+0x179>
c0002c8e:	83 cb 03             	or     ebx,0x3
c0002c91:	e9 e9 00 00 00       	jmp    c0002d7f <create_name+0x262>
c0002c96:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c9a:	74 0d                	je     c0002ca9 <create_name+0x18c>
c0002c9c:	83 cb 03             	or     ebx,0x3
c0002c9f:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ca3:	0f 87 d6 00 00 00    	ja     c0002d7f <create_name+0x262>
c0002ca9:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002cae:	b9 08 00 00 00       	mov    ecx,0x8
c0002cb3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002cb7:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002cbf:	eb b4                	jmp    c0002c75 <create_name+0x158>
c0002cc1:	0f b7 c7             	movzx  eax,di
c0002cc4:	83 f8 7f             	cmp    eax,0x7f
c0002cc7:	76 66                	jbe    c0002d2f <create_name+0x212>
c0002cc9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ccd:	89 d9                	mov    ecx,ebx
c0002ccf:	83 c9 02             	or     ecx,0x2
c0002cd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002cd6:	52                   	push   edx
c0002cd7:	52                   	push   edx
c0002cd8:	68 b5 01 00 00       	push   0x1b5
c0002cdd:	50                   	push   eax
c0002cde:	e8 9d 30 00 00       	call   c0005d80 <ff_uni2oem>
c0002ce3:	83 c4 10             	add    esp,0x10
c0002ce6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002cea:	a8 80                	test   al,0x80
c0002cec:	89 c7                	mov    edi,eax
c0002cee:	74 0c                	je     c0002cfc <create_name+0x1df>
c0002cf0:	83 e7 7f             	and    edi,0x7f
c0002cf3:	0f b6 bf a0 f4 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0b60]
c0002cfa:	eb 2a                	jmp    c0002d26 <create_name+0x209>
c0002cfc:	0f b7 c0             	movzx  eax,ax
c0002cff:	3d ff 00 00 00       	cmp    eax,0xff
c0002d04:	76 20                	jbe    c0002d26 <create_name+0x209>
c0002d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002d0a:	4a                   	dec    edx
c0002d0b:	39 ca                	cmp    edx,ecx
c0002d0d:	77 0c                	ja     c0002d1b <create_name+0x1fe>
c0002d0f:	83 cb 03             	or     ebx,0x3
c0002d12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002d16:	e9 5a ff ff ff       	jmp    c0002c75 <create_name+0x158>
c0002d1b:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002d1f:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d23:	41                   	inc    ecx
c0002d24:	eb 4d                	jmp    c0002d73 <create_name+0x256>
c0002d26:	66 85 ff             	test   di,di
c0002d29:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d2d:	74 19                	je     c0002d48 <create_name+0x22b>
c0002d2f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d33:	0f b7 d7             	movzx  edx,di
c0002d36:	b8 eb f3 02 c0       	mov    eax,0xc002f3eb
c0002d3b:	e8 39 f2 ff ff       	call   c0001f79 <chk_chr>
c0002d40:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002d44:	85 c0                	test   eax,eax
c0002d46:	74 0a                	je     c0002d52 <create_name+0x235>
c0002d48:	83 cb 03             	or     ebx,0x3
c0002d4b:	bf 5f 00 00 00       	mov    edi,0x5f
c0002d50:	eb 21                	jmp    c0002d73 <create_name+0x256>
c0002d52:	8d 47 bf             	lea    eax,[edi-0x41]
c0002d55:	66 83 f8 19          	cmp    ax,0x19
c0002d59:	77 07                	ja     c0002d62 <create_name+0x245>
c0002d5b:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002d60:	eb 11                	jmp    c0002d73 <create_name+0x256>
c0002d62:	8d 47 9f             	lea    eax,[edi-0x61]
c0002d65:	66 83 f8 19          	cmp    ax,0x19
c0002d69:	77 08                	ja     c0002d73 <create_name+0x256>
c0002d6b:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002d70:	83 ef 20             	sub    edi,0x20
c0002d73:	89 f8                	mov    eax,edi
c0002d75:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002d79:	41                   	inc    ecx
c0002d7a:	e9 f6 fe ff ff       	jmp    c0002c75 <create_name+0x158>
c0002d7f:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002d83:	75 04                	jne    c0002d89 <create_name+0x26c>
c0002d85:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002d89:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002d8e:	75 05                	jne    c0002d95 <create_name+0x278>
c0002d90:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d99:	83 e0 0c             	and    eax,0xc
c0002d9c:	83 f8 0c             	cmp    eax,0xc
c0002d9f:	74 0c                	je     c0002dad <create_name+0x290>
c0002da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da5:	83 e0 03             	and    eax,0x3
c0002da8:	83 f8 03             	cmp    eax,0x3
c0002dab:	75 05                	jne    c0002db2 <create_name+0x295>
c0002dad:	83 cb 02             	or     ebx,0x2
c0002db0:	eb 19                	jmp    c0002dcb <create_name+0x2ae>
c0002db2:	f6 c3 02             	test   bl,0x2
c0002db5:	75 14                	jne    c0002dcb <create_name+0x2ae>
c0002db7:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002dbc:	74 03                	je     c0002dc1 <create_name+0x2a4>
c0002dbe:	83 cb 10             	or     ebx,0x10
c0002dc1:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002dc6:	74 03                	je     c0002dcb <create_name+0x2ae>
c0002dc8:	83 cb 08             	or     ebx,0x8
c0002dcb:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002dce:	31 c0                	xor    eax,eax
c0002dd0:	83 c4 3c             	add    esp,0x3c
c0002dd3:	5b                   	pop    ebx
c0002dd4:	5e                   	pop    esi
c0002dd5:	5f                   	pop    edi
c0002dd6:	5d                   	pop    ebp
c0002dd7:	c3                   	ret    

c0002dd8 <cmp_lfn>:
c0002dd8:	55                   	push   ebp
c0002dd9:	57                   	push   edi
c0002dda:	89 d7                	mov    edi,edx
c0002ddc:	56                   	push   esi
c0002ddd:	53                   	push   ebx
c0002dde:	83 ec 1c             	sub    esp,0x1c
c0002de1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002de5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002de8:	e8 1e f1 ff ff       	call   c0001f0b <ld_word>
c0002ded:	66 85 c0             	test   ax,ax
c0002df0:	74 07                	je     c0002df9 <cmp_lfn+0x21>
c0002df2:	31 c0                	xor    eax,eax
c0002df4:	e9 a4 00 00 00       	jmp    c0002e9d <cmp_lfn+0xc5>
c0002df9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002dfb:	bd 01 00 00 00       	mov    ebp,0x1
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	83 e3 3f             	and    ebx,0x3f
c0002e05:	4b                   	dec    ebx
c0002e06:	6b db 0d             	imul   ebx,ebx,0xd
c0002e09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e0d:	0f b6 81 20 f5 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0ae0]
c0002e14:	01 f8                	add    eax,edi
c0002e16:	e8 f0 f0 ff ff       	call   c0001f0b <ld_word>
c0002e1b:	66 85 ed             	test   bp,bp
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	0f b7 f0             	movzx  esi,ax
c0002e25:	74 44                	je     c0002e6b <cmp_lfn+0x93>
c0002e27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002e2b:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002e31:	77 bf                	ja     c0002df2 <cmp_lfn+0x1a>
c0002e33:	83 ec 0c             	sub    esp,0xc
c0002e36:	0f b7 c6             	movzx  eax,si
c0002e39:	50                   	push   eax
c0002e3a:	e8 55 30 00 00       	call   c0005e94 <ff_wtoupper>
c0002e3f:	89 c5                	mov    ebp,eax
c0002e41:	8d 43 01             	lea    eax,[ebx+0x1]
c0002e44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002e48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e4c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e53:	e8 3c 30 00 00       	call   c0005e94 <ff_wtoupper>
c0002e58:	83 c4 10             	add    esp,0x10
c0002e5b:	39 c5                	cmp    ebp,eax
c0002e5d:	75 93                	jne    c0002df2 <cmp_lfn+0x1a>
c0002e5f:	89 f5                	mov    ebp,esi
c0002e61:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002e65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002e69:	eb 0c                	jmp    c0002e77 <cmp_lfn+0x9f>
c0002e6b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002e71:	0f 85 7b ff ff ff    	jne    c0002df2 <cmp_lfn+0x1a>
c0002e77:	41                   	inc    ecx
c0002e78:	83 f9 0d             	cmp    ecx,0xd
c0002e7b:	75 8c                	jne    c0002e09 <cmp_lfn+0x31>
c0002e7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e80:	74 16                	je     c0002e98 <cmp_lfn+0xc0>
c0002e82:	66 85 ed             	test   bp,bp
c0002e85:	74 11                	je     c0002e98 <cmp_lfn+0xc0>
c0002e87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e90:	0f 94 c0             	sete   al
c0002e93:	0f b6 c0             	movzx  eax,al
c0002e96:	eb 05                	jmp    c0002e9d <cmp_lfn+0xc5>
c0002e98:	b8 01 00 00 00       	mov    eax,0x1
c0002e9d:	83 c4 1c             	add    esp,0x1c
c0002ea0:	5b                   	pop    ebx
c0002ea1:	5e                   	pop    esi
c0002ea2:	5f                   	pop    edi
c0002ea3:	5d                   	pop    ebp
c0002ea4:	c3                   	ret    

c0002ea5 <sync_fs>:
c0002ea5:	56                   	push   esi
c0002ea6:	53                   	push   ebx
c0002ea7:	53                   	push   ebx
c0002ea8:	89 c3                	mov    ebx,eax
c0002eaa:	e8 5e f5 ff ff       	call   c000240d <sync_window>
c0002eaf:	85 c0                	test   eax,eax
c0002eb1:	0f 85 9a 00 00 00    	jne    c0002f51 <sync_fs+0xac>
c0002eb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002eba:	75 7b                	jne    c0002f37 <sync_fs+0x92>
c0002ebc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ec0:	75 75                	jne    c0002f37 <sync_fs+0x92>
c0002ec2:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ec5:	b9 00 02 00 00       	mov    ecx,0x200
c0002eca:	31 d2                	xor    edx,edx
c0002ecc:	89 f0                	mov    eax,esi
c0002ece:	e8 79 f0 ff ff       	call   c0001f4c <mem_set>
c0002ed3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ed9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ede:	e8 4d f0 ff ff       	call   c0001f30 <st_word>
c0002ee3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ee8:	89 f0                	mov    eax,esi
c0002eea:	e8 45 f0 ff ff       	call   c0001f34 <st_dword>
c0002eef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002ef5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002efa:	e8 35 f0 ff ff       	call   c0001f34 <st_dword>
c0002eff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002f08:	e8 27 f0 ff ff       	call   c0001f34 <st_dword>
c0002f0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002f16:	e8 19 f0 ff ff       	call   c0001f34 <st_dword>
c0002f1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002f1e:	6a 01                	push   0x1
c0002f20:	40                   	inc    eax
c0002f21:	50                   	push   eax
c0002f22:	56                   	push   esi
c0002f23:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f2a:	50                   	push   eax
c0002f2b:	e8 a6 ef ff ff       	call   c0001ed6 <disk_write>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002f37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f3b:	51                   	push   ecx
c0002f3c:	6a 00                	push   0x0
c0002f3e:	6a 00                	push   0x0
c0002f40:	50                   	push   eax
c0002f41:	e8 a6 ef ff ff       	call   c0001eec <disk_ioctl>
c0002f46:	83 c4 10             	add    esp,0x10
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	0f 95 c0             	setne  al
c0002f4e:	0f b6 c0             	movzx  eax,al
c0002f51:	5a                   	pop    edx
c0002f52:	5b                   	pop    ebx
c0002f53:	5e                   	pop    esi
c0002f54:	c3                   	ret    

c0002f55 <create_partition>:
c0002f55:	55                   	push   ebp
c0002f56:	0f b6 c0             	movzx  eax,al
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	83 ec 40             	sub    esp,0x40
c0002f5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f63:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002f67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002f6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f6f:	50                   	push   eax
c0002f70:	6a 01                	push   0x1
c0002f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f76:	e8 71 ef ff ff       	call   c0001eec <disk_ioctl>
c0002f7b:	83 c4 10             	add    esp,0x10
c0002f7e:	85 c0                	test   eax,eax
c0002f80:	0f 85 68 01 00 00    	jne    c00030ee <create_partition+0x199>
c0002f86:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002f8f:	be 08 00 00 00       	mov    esi,0x8
c0002f94:	89 f0                	mov    eax,esi
c0002f96:	31 d2                	xor    edx,edx
c0002f98:	0f b6 d8             	movzx  ebx,al
c0002f9b:	89 e8                	mov    eax,ebp
c0002f9d:	f7 f3                	div    ebx
c0002f9f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002fa4:	76 0a                	jbe    c0002fb0 <create_partition+0x5b>
c0002fa6:	d1 e6                	shl    esi,1
c0002fa8:	49                   	dec    ecx
c0002fa9:	75 e9                	jne    c0002f94 <create_partition+0x3f>
c0002fab:	be ff ff ff ff       	mov    esi,0xffffffff
c0002fb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fb4:	b9 00 02 00 00       	mov    ecx,0x200
c0002fb9:	31 d2                	xor    edx,edx
c0002fbb:	e8 8c ef ff ff       	call   c0001f4c <mem_set>
c0002fc0:	b9 64 00 00 00       	mov    ecx,0x64
c0002fc5:	89 e8                	mov    eax,ebp
c0002fc7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002fcf:	31 d2                	xor    edx,edx
c0002fd1:	f7 f1                	div    ecx
c0002fd3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002fd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002fdc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fe0:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002fe6:	89 f0                	mov    eax,esi
c0002fe8:	0f b6 c0             	movzx  eax,al
c0002feb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fef:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ff4:	0f 96 c0             	setbe  al
c0002ff7:	31 d2                	xor    edx,edx
c0002ff9:	85 c9                	test   ecx,ecx
c0002ffb:	0f 95 c2             	setne  dl
c0002ffe:	85 c2                	test   edx,eax
c0003000:	0f 84 b7 00 00 00    	je     c00030bd <create_partition+0x168>
c0003006:	39 e9                	cmp    ecx,ebp
c0003008:	0f 83 af 00 00 00    	jae    c00030bd <create_partition+0x168>
c000300e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003016:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003019:	83 fe 64             	cmp    esi,0x64
c000301c:	77 0b                	ja     c0003029 <create_partition+0xd4>
c000301e:	74 07                	je     c0003027 <create_partition+0xd2>
c0003020:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003025:	eb 02                	jmp    c0003029 <create_partition+0xd4>
c0003027:	89 ee                	mov    esi,ebp
c0003029:	89 ca                	mov    edx,ecx
c000302b:	31 c0                	xor    eax,eax
c000302d:	01 f2                	add    edx,esi
c000302f:	0f 92 c0             	setb   al
c0003032:	39 ea                	cmp    edx,ebp
c0003034:	77 04                	ja     c000303a <create_partition+0xe5>
c0003036:	85 c0                	test   eax,eax
c0003038:	74 06                	je     c0003040 <create_partition+0xeb>
c000303a:	89 ee                	mov    esi,ebp
c000303c:	29 ce                	sub    esi,ecx
c000303e:	eb 04                	jmp    c0003044 <create_partition+0xef>
c0003040:	85 f6                	test   esi,esi
c0003042:	74 79                	je     c00030bd <create_partition+0x168>
c0003044:	89 ca                	mov    edx,ecx
c0003046:	89 d8                	mov    eax,ebx
c0003048:	e8 e7 ee ff ff       	call   c0001f34 <st_dword>
c000304d:	8d 43 04             	lea    eax,[ebx+0x4]
c0003050:	89 f2                	mov    edx,esi
c0003052:	e8 dd ee ff ff       	call   c0001f34 <st_dword>
c0003057:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c000305b:	bf 3f 00 00 00       	mov    edi,0x3f
c0003060:	31 d2                	xor    edx,edx
c0003062:	83 c3 10             	add    ebx,0x10
c0003065:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003069:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000306c:	89 c8                	mov    eax,ecx
c000306e:	01 f1                	add    ecx,esi
c0003070:	f7 f7                	div    edi
c0003072:	89 d7                	mov    edi,edx
c0003074:	31 d2                	xor    edx,edx
c0003076:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000307a:	47                   	inc    edi
c000307b:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000307e:	89 c2                	mov    edx,eax
c0003080:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003083:	c1 ea 02             	shr    edx,0x2
c0003086:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003089:	83 e2 c0             	and    edx,0xffffffc0
c000308c:	09 fa                	or     edx,edi
c000308e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003093:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003096:	31 d2                	xor    edx,edx
c0003098:	f7 f7                	div    edi
c000309a:	89 d6                	mov    esi,edx
c000309c:	31 d2                	xor    edx,edx
c000309e:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00030a2:	46                   	inc    esi
c00030a3:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00030a6:	89 c7                	mov    edi,eax
c00030a8:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00030ab:	c1 ef 02             	shr    edi,0x2
c00030ae:	83 e7 c0             	and    edi,0xffffffc0
c00030b1:	09 fe                	or     esi,edi
c00030b3:	89 f2                	mov    edx,esi
c00030b5:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00030b8:	e9 32 ff ff ff       	jmp    c0002fef <create_partition+0x9a>
c00030bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030c6:	05 fe 01 00 00       	add    eax,0x1fe
c00030cb:	e8 60 ee ff ff       	call   c0001f30 <st_word>
c00030d0:	6a 01                	push   0x1
c00030d2:	6a 00                	push   0x0
c00030d4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030dc:	e8 f5 ed ff ff       	call   c0001ed6 <disk_write>
c00030e1:	83 c4 10             	add    esp,0x10
c00030e4:	85 c0                	test   eax,eax
c00030e6:	0f 95 c0             	setne  al
c00030e9:	0f b6 c0             	movzx  eax,al
c00030ec:	eb 05                	jmp    c00030f3 <create_partition+0x19e>
c00030ee:	b8 01 00 00 00       	mov    eax,0x1
c00030f3:	83 c4 3c             	add    esp,0x3c
c00030f6:	5b                   	pop    ebx
c00030f7:	5e                   	pop    esi
c00030f8:	5f                   	pop    edi
c00030f9:	5d                   	pop    ebp
c00030fa:	c3                   	ret    

c00030fb <get_fileinfo>:
c00030fb:	55                   	push   ebp
c00030fc:	57                   	push   edi
c00030fd:	56                   	push   esi
c00030fe:	53                   	push   ebx
c00030ff:	83 ec 1c             	sub    esp,0x1c
c0003102:	8b 30                	mov    esi,DWORD PTR [eax]
c0003104:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003108:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000310c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003110:	0f 84 de 01 00 00    	je     c00032f4 <get_fileinfo+0x1f9>
c0003116:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000311a:	89 d3                	mov    ebx,edx
c000311c:	89 c6                	mov    esi,eax
c000311e:	74 7d                	je     c000319d <get_fileinfo+0xa2>
c0003120:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003128:	31 ff                	xor    edi,edi
c000312a:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003135:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003139:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000313c:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003140:	85 c0                	test   eax,eax
c0003142:	89 c2                	mov    edx,eax
c0003144:	74 44                	je     c000318a <get_fileinfo+0x8f>
c0003146:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000314b:	85 ed                	test   ebp,ebp
c000314d:	75 0d                	jne    c000315c <get_fileinfo+0x61>
c000314f:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003155:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000315a:	76 20                	jbe    c000317c <get_fileinfo+0x81>
c000315c:	c1 e5 10             	shl    ebp,0x10
c000315f:	b9 ff 00 00 00       	mov    ecx,0xff
c0003164:	29 f9                	sub    ecx,edi
c0003166:	09 e8                	or     eax,ebp
c0003168:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000316c:	e8 f7 ee ff ff       	call   c0002068 <put_utf>
c0003171:	0f b6 c0             	movzx  eax,al
c0003174:	85 c0                	test   eax,eax
c0003176:	74 10                	je     c0003188 <get_fileinfo+0x8d>
c0003178:	01 c7                	add    edi,eax
c000317a:	31 d2                	xor    edx,edx
c000317c:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003181:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c0003186:	eb a9                	jmp    c0003131 <get_fileinfo+0x36>
c0003188:	31 ff                	xor    edi,edi
c000318a:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003190:	b8 00 00 00 00       	mov    eax,0x0
c0003195:	0f 45 f8             	cmovne edi,eax
c0003198:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000319d:	31 ff                	xor    edi,edi
c000319f:	31 c9                	xor    ecx,ecx
c00031a1:	83 f9 0a             	cmp    ecx,0xa
c00031a4:	0f 87 ac 00 00 00    	ja     c0003256 <get_fileinfo+0x15b>
c00031aa:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ad:	8d 69 01             	lea    ebp,[ecx+0x1]
c00031b0:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00031b4:	83 f8 20             	cmp    eax,0x20
c00031b7:	89 c2                	mov    edx,eax
c00031b9:	0f 84 90 00 00 00    	je     c000324f <get_fileinfo+0x154>
c00031bf:	83 f8 05             	cmp    eax,0x5
c00031c2:	75 05                	jne    c00031c9 <get_fileinfo+0xce>
c00031c4:	ba e5 00 00 00       	mov    edx,0xe5
c00031c9:	83 fd 09             	cmp    ebp,0x9
c00031cc:	75 0b                	jne    c00031d9 <get_fileinfo+0xde>
c00031ce:	83 ff 0b             	cmp    edi,0xb
c00031d1:	77 06                	ja     c00031d9 <get_fileinfo+0xde>
c00031d3:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00031d8:	47                   	inc    edi
c00031d9:	0f b7 c2             	movzx  eax,dx
c00031dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031e0:	e8 a5 ed ff ff       	call   c0001f8a <dbc_1st>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	74 2f                	je     c0003218 <get_fileinfo+0x11d>
c00031e9:	83 fd 08             	cmp    ebp,0x8
c00031ec:	74 2a                	je     c0003218 <get_fileinfo+0x11d>
c00031ee:	83 fd 0b             	cmp    ebp,0xb
c00031f1:	74 25                	je     c0003218 <get_fileinfo+0x11d>
c00031f3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031f6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00031fa:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00031fe:	e8 8a ed ff ff       	call   c0001f8d <dbc_2nd>
c0003203:	85 c0                	test   eax,eax
c0003205:	74 11                	je     c0003218 <get_fileinfo+0x11d>
c0003207:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000320b:	8d 69 02             	lea    ebp,[ecx+0x2]
c000320e:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003213:	c1 e0 08             	shl    eax,0x8
c0003216:	09 c2                	or     edx,eax
c0003218:	50                   	push   eax
c0003219:	0f b7 d2             	movzx  edx,dx
c000321c:	50                   	push   eax
c000321d:	68 b5 01 00 00       	push   0x1b5
c0003222:	52                   	push   edx
c0003223:	e8 f4 2b 00 00       	call   c0005e1c <ff_oem2uni>
c0003228:	83 c4 10             	add    esp,0x10
c000322b:	0f b7 c0             	movzx  eax,ax
c000322e:	85 c0                	test   eax,eax
c0003230:	75 04                	jne    c0003236 <get_fileinfo+0x13b>
c0003232:	31 ff                	xor    edi,edi
c0003234:	eb 20                	jmp    c0003256 <get_fileinfo+0x15b>
c0003236:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000323a:	b9 0c 00 00 00       	mov    ecx,0xc
c000323f:	29 f9                	sub    ecx,edi
c0003241:	e8 22 ee ff ff       	call   c0002068 <put_utf>
c0003246:	0f b6 c0             	movzx  eax,al
c0003249:	85 c0                	test   eax,eax
c000324b:	74 e5                	je     c0003232 <get_fileinfo+0x137>
c000324d:	01 c7                	add    edi,eax
c000324f:	89 e9                	mov    ecx,ebp
c0003251:	e9 4b ff ff ff       	jmp    c00031a1 <get_fileinfo+0xa6>
c0003256:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000325b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000325f:	75 5f                	jne    c00032c0 <get_fileinfo+0x1c5>
c0003261:	85 ff                	test   edi,edi
c0003263:	75 0b                	jne    c0003270 <get_fileinfo+0x175>
c0003265:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003269:	ba 01 00 00 00       	mov    edx,0x1
c000326e:	eb 3e                	jmp    c00032ae <get_fileinfo+0x1b3>
c0003270:	bf 08 00 00 00       	mov    edi,0x8
c0003275:	31 d2                	xor    edx,edx
c0003277:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000327d:	84 c0                	test   al,al
c000327f:	74 2d                	je     c00032ae <get_fileinfo+0x1b3>
c0003281:	66 83 f8 2e          	cmp    ax,0x2e
c0003285:	74 1b                	je     c00032a2 <get_fileinfo+0x1a7>
c0003287:	8d 48 bf             	lea    ecx,[eax-0x41]
c000328a:	66 83 f9 19          	cmp    cx,0x19
c000328e:	77 17                	ja     c00032a7 <get_fileinfo+0x1ac>
c0003290:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003293:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003296:	21 f9                	and    ecx,edi
c0003298:	80 e1 18             	and    cl,0x18
c000329b:	74 0a                	je     c00032a7 <get_fileinfo+0x1ac>
c000329d:	83 c0 20             	add    eax,0x20
c00032a0:	eb 05                	jmp    c00032a7 <get_fileinfo+0x1ac>
c00032a2:	bf 10 00 00 00       	mov    edi,0x10
c00032a7:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00032ab:	42                   	inc    edx
c00032ac:	eb c9                	jmp    c0003277 <get_fileinfo+0x17c>
c00032ae:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00032b3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032b6:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00032ba:	75 04                	jne    c00032c0 <get_fileinfo+0x1c5>
c00032bc:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00032c0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032c3:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00032c6:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00032c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032cc:	83 c0 1c             	add    eax,0x1c
c00032cf:	e8 44 ec ff ff       	call   c0001f18 <ld_dword>
c00032d4:	89 03                	mov    DWORD PTR [ebx],eax
c00032d6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032d9:	83 c0 16             	add    eax,0x16
c00032dc:	e8 2a ec ff ff       	call   c0001f0b <ld_word>
c00032e1:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00032e5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032e8:	83 c0 18             	add    eax,0x18
c00032eb:	e8 1b ec ff ff       	call   c0001f0b <ld_word>
c00032f0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00032f4:	83 c4 1c             	add    esp,0x1c
c00032f7:	5b                   	pop    ebx
c00032f8:	5e                   	pop    esi
c00032f9:	5f                   	pop    edi
c00032fa:	5d                   	pop    ebp
c00032fb:	c3                   	ret    

c00032fc <ld_clust.isra.0>:
c00032fc:	56                   	push   esi
c00032fd:	89 c6                	mov    esi,eax
c00032ff:	53                   	push   ebx
c0003300:	89 d3                	mov    ebx,edx
c0003302:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003305:	e8 01 ec ff ff       	call   c0001f0b <ld_word>
c000330a:	0f b7 c8             	movzx  ecx,ax
c000330d:	89 f0                	mov    eax,esi
c000330f:	3c 03                	cmp    al,0x3
c0003311:	75 0d                	jne    c0003320 <ld_clust.isra.0+0x24>
c0003313:	8d 43 14             	lea    eax,[ebx+0x14]
c0003316:	e8 f0 eb ff ff       	call   c0001f0b <ld_word>
c000331b:	c1 e0 10             	shl    eax,0x10
c000331e:	09 c1                	or     ecx,eax
c0003320:	5b                   	pop    ebx
c0003321:	89 c8                	mov    eax,ecx
c0003323:	5e                   	pop    esi
c0003324:	c3                   	ret    

c0003325 <st_clust.isra.1>:
c0003325:	56                   	push   esi
c0003326:	89 c6                	mov    esi,eax
c0003328:	53                   	push   ebx
c0003329:	89 d3                	mov    ebx,edx
c000332b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c000332e:	0f b7 d1             	movzx  edx,cx
c0003331:	e8 fa eb ff ff       	call   c0001f30 <st_word>
c0003336:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003339:	75 0f                	jne    c000334a <st_clust.isra.1+0x25>
c000333b:	8d 43 14             	lea    eax,[ebx+0x14]
c000333e:	5b                   	pop    ebx
c000333f:	c1 e9 10             	shr    ecx,0x10
c0003342:	89 ca                	mov    edx,ecx
c0003344:	5e                   	pop    esi
c0003345:	e9 e6 eb ff ff       	jmp    c0001f30 <st_word>
c000334a:	5b                   	pop    ebx
c000334b:	5e                   	pop    esi
c000334c:	c3                   	ret    

c000334d <get_fat.isra.2>:
c000334d:	83 fa 01             	cmp    edx,0x1
c0003350:	b9 01 00 00 00       	mov    ecx,0x1
c0003355:	0f 86 f4 00 00 00    	jbe    c000344f <get_fat.isra.2+0x102>
c000335b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000335e:	0f 83 eb 00 00 00    	jae    c000344f <get_fat.isra.2+0x102>
c0003364:	55                   	push   ebp
c0003365:	57                   	push   edi
c0003366:	56                   	push   esi
c0003367:	89 c6                	mov    esi,eax
c0003369:	53                   	push   ebx
c000336a:	89 d3                	mov    ebx,edx
c000336c:	83 ec 0c             	sub    esp,0xc
c000336f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003372:	83 f8 02             	cmp    eax,0x2
c0003375:	74 79                	je     c00033f0 <get_fat.isra.2+0xa3>
c0003377:	83 f8 03             	cmp    eax,0x3
c000337a:	0f 84 97 00 00 00    	je     c0003417 <get_fat.isra.2+0xca>
c0003380:	48                   	dec    eax
c0003381:	0f 85 be 00 00 00    	jne    c0003445 <get_fat.isra.2+0xf8>
c0003387:	89 d7                	mov    edi,edx
c0003389:	89 f0                	mov    eax,esi
c000338b:	d1 ef                	shr    edi,1
c000338d:	01 d7                	add    edi,edx
c000338f:	89 fa                	mov    edx,edi
c0003391:	c1 ea 09             	shr    edx,0x9
c0003394:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003397:	e8 d4 f0 ff ff       	call   c0002470 <move_window>
c000339c:	85 c0                	test   eax,eax
c000339e:	74 08                	je     c00033a8 <get_fat.isra.2+0x5b>
c00033a0:	83 c9 ff             	or     ecx,0xffffffff
c00033a3:	e9 9d 00 00 00       	jmp    c0003445 <get_fat.isra.2+0xf8>
c00033a8:	8d 6f 01             	lea    ebp,[edi+0x1]
c00033ab:	89 f0                	mov    eax,esi
c00033ad:	89 ea                	mov    edx,ebp
c00033af:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00033b5:	c1 ea 09             	shr    edx,0x9
c00033b8:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00033bd:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033c0:	e8 ab f0 ff ff       	call   c0002470 <move_window>
c00033c5:	85 c0                	test   eax,eax
c00033c7:	75 d7                	jne    c00033a0 <get_fat.isra.2+0x53>
c00033c9:	89 f8                	mov    eax,edi
c00033cb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00033d1:	0f b6 f8             	movzx  edi,al
c00033d4:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00033d9:	c1 e0 08             	shl    eax,0x8
c00033dc:	09 f8                	or     eax,edi
c00033de:	89 c1                	mov    ecx,eax
c00033e0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00033e6:	80 e3 01             	and    bl,0x1
c00033e9:	74 5a                	je     c0003445 <get_fat.isra.2+0xf8>
c00033eb:	c1 e8 04             	shr    eax,0x4
c00033ee:	eb 53                	jmp    c0003443 <get_fat.isra.2+0xf6>
c00033f0:	c1 ea 08             	shr    edx,0x8
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033f8:	e8 73 f0 ff ff       	call   c0002470 <move_window>
c00033fd:	85 c0                	test   eax,eax
c00033ff:	75 9f                	jne    c00033a0 <get_fat.isra.2+0x53>
c0003401:	01 db                	add    ebx,ebx
c0003403:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003409:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000340d:	e8 f9 ea ff ff       	call   c0001f0b <ld_word>
c0003412:	0f b7 c8             	movzx  ecx,ax
c0003415:	eb 2e                	jmp    c0003445 <get_fat.isra.2+0xf8>
c0003417:	c1 ea 07             	shr    edx,0x7
c000341a:	89 f0                	mov    eax,esi
c000341c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000341f:	e8 4c f0 ff ff       	call   c0002470 <move_window>
c0003424:	85 c0                	test   eax,eax
c0003426:	0f 85 74 ff ff ff    	jne    c00033a0 <get_fat.isra.2+0x53>
c000342c:	c1 e3 02             	shl    ebx,0x2
c000342f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003435:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003439:	e8 da ea ff ff       	call   c0001f18 <ld_dword>
c000343e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003443:	89 c1                	mov    ecx,eax
c0003445:	83 c4 0c             	add    esp,0xc
c0003448:	89 c8                	mov    eax,ecx
c000344a:	5b                   	pop    ebx
c000344b:	5e                   	pop    esi
c000344c:	5f                   	pop    edi
c000344d:	5d                   	pop    ebp
c000344e:	c3                   	ret    
c000344f:	89 c8                	mov    eax,ecx
c0003451:	c3                   	ret    

c0003452 <dir_sdi>:
c0003452:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003458:	0f 87 b6 00 00 00    	ja     c0003514 <dir_sdi+0xc2>
c000345e:	55                   	push   ebp
c000345f:	57                   	push   edi
c0003460:	56                   	push   esi
c0003461:	53                   	push   ebx
c0003462:	89 d3                	mov    ebx,edx
c0003464:	83 ec 1c             	sub    esp,0x1c
c0003467:	f6 c2 1f             	test   dl,0x1f
c000346a:	74 0a                	je     c0003476 <dir_sdi+0x24>
c000346c:	b8 02 00 00 00       	mov    eax,0x2
c0003471:	e9 96 00 00 00       	jmp    c000350c <dir_sdi+0xba>
c0003476:	89 c6                	mov    esi,eax
c0003478:	8b 28                	mov    ebp,DWORD PTR [eax]
c000347a:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000347d:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003480:	85 ff                	test   edi,edi
c0003482:	75 21                	jne    c00034a5 <dir_sdi+0x53>
c0003484:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003488:	76 07                	jbe    c0003491 <dir_sdi+0x3f>
c000348a:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c000348d:	85 c0                	test   eax,eax
c000348f:	75 12                	jne    c00034a3 <dir_sdi+0x51>
c0003491:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003495:	89 da                	mov    edx,ebx
c0003497:	c1 ea 05             	shr    edx,0x5
c000349a:	39 c2                	cmp    edx,eax
c000349c:	73 ce                	jae    c000346c <dir_sdi+0x1a>
c000349e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00034a1:	eb 3c                	jmp    c00034df <dir_sdi+0x8d>
c00034a3:	89 c7                	mov    edi,eax
c00034a5:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00034a9:	c1 e1 09             	shl    ecx,0x9
c00034ac:	39 cb                	cmp    ebx,ecx
c00034ae:	72 26                	jb     c00034d6 <dir_sdi+0x84>
c00034b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	e8 90 fe ff ff       	call   c000334d <get_fat.isra.2>
c00034bd:	83 f8 ff             	cmp    eax,0xffffffff
c00034c0:	89 c7                	mov    edi,eax
c00034c2:	74 43                	je     c0003507 <dir_sdi+0xb5>
c00034c4:	83 f8 01             	cmp    eax,0x1
c00034c7:	76 a3                	jbe    c000346c <dir_sdi+0x1a>
c00034c9:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00034cc:	76 9e                	jbe    c000346c <dir_sdi+0x1a>
c00034ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034d2:	29 cb                	sub    ebx,ecx
c00034d4:	eb d6                	jmp    c00034ac <dir_sdi+0x5a>
c00034d6:	89 fa                	mov    edx,edi
c00034d8:	89 e8                	mov    eax,ebp
c00034da:	e8 82 ec ff ff       	call   c0002161 <clst2sect>
c00034df:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034e2:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00034e5:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00034e8:	85 d2                	test   edx,edx
c00034ea:	74 80                	je     c000346c <dir_sdi+0x1a>
c00034ec:	89 d8                	mov    eax,ebx
c00034ee:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00034f4:	c1 e8 09             	shr    eax,0x9
c00034f7:	01 d0                	add    eax,edx
c00034f9:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034fc:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003500:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003503:	31 c0                	xor    eax,eax
c0003505:	eb 05                	jmp    c000350c <dir_sdi+0xba>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	83 c4 1c             	add    esp,0x1c
c000350f:	5b                   	pop    ebx
c0003510:	5e                   	pop    esi
c0003511:	5f                   	pop    edi
c0003512:	5d                   	pop    ebp
c0003513:	c3                   	ret    
c0003514:	b8 02 00 00 00       	mov    eax,0x2
c0003519:	c3                   	ret    

c000351a <create_chain>:
c000351a:	55                   	push   ebp
c000351b:	89 c5                	mov    ebp,eax
c000351d:	57                   	push   edi
c000351e:	89 d7                	mov    edi,edx
c0003520:	56                   	push   esi
c0003521:	53                   	push   ebx
c0003522:	83 ec 1c             	sub    esp,0x1c
c0003525:	85 d2                	test   edx,edx
c0003527:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003529:	75 0e                	jne    c0003539 <create_chain+0x1f>
c000352b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000352e:	85 c9                	test   ecx,ecx
c0003530:	74 32                	je     c0003564 <create_chain+0x4a>
c0003532:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003535:	77 32                	ja     c0003569 <create_chain+0x4f>
c0003537:	eb 2b                	jmp    c0003564 <create_chain+0x4a>
c0003539:	89 d8                	mov    eax,ebx
c000353b:	e8 0d fe ff ff       	call   c000334d <get_fat.isra.2>
c0003540:	83 f8 01             	cmp    eax,0x1
c0003543:	77 0a                	ja     c000354f <create_chain+0x35>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	e9 fd 00 00 00       	jmp    c000364c <create_chain+0x132>
c000354f:	83 f8 ff             	cmp    eax,0xffffffff
c0003552:	0f 84 f1 00 00 00    	je     c0003649 <create_chain+0x12f>
c0003558:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000355b:	89 f9                	mov    ecx,edi
c000355d:	76 0a                	jbe    c0003569 <create_chain+0x4f>
c000355f:	e9 e8 00 00 00       	jmp    c000364c <create_chain+0x132>
c0003564:	b9 01 00 00 00       	mov    ecx,0x1
c0003569:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000356d:	75 07                	jne    c0003576 <create_chain+0x5c>
c000356f:	31 c0                	xor    eax,eax
c0003571:	e9 d6 00 00 00       	jmp    c000364c <create_chain+0x132>
c0003576:	39 f9                	cmp    ecx,edi
c0003578:	75 49                	jne    c00035c3 <create_chain+0xa9>
c000357a:	8d 71 01             	lea    esi,[ecx+0x1]
c000357d:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003580:	77 05                	ja     c0003587 <create_chain+0x6d>
c0003582:	be 02 00 00 00       	mov    esi,0x2
c0003587:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000358b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000358e:	89 f2                	mov    edx,esi
c0003590:	e8 b8 fd ff ff       	call   c000334d <get_fat.isra.2>
c0003595:	83 f8 01             	cmp    eax,0x1
c0003598:	0f 84 ae 00 00 00    	je     c000364c <create_chain+0x132>
c000359e:	83 f8 ff             	cmp    eax,0xffffffff
c00035a1:	0f 84 a5 00 00 00    	je     c000364c <create_chain+0x132>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035ad:	74 10                	je     c00035bf <create_chain+0xa5>
c00035af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	76 0c                	jbe    c00035c3 <create_chain+0xa9>
c00035b7:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00035ba:	0f 47 c8             	cmova  ecx,eax
c00035bd:	eb 04                	jmp    c00035c3 <create_chain+0xa9>
c00035bf:	85 f6                	test   esi,esi
c00035c1:	75 3b                	jne    c00035fe <create_chain+0xe4>
c00035c3:	89 ce                	mov    esi,ecx
c00035c5:	46                   	inc    esi
c00035c6:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00035c9:	77 0a                	ja     c00035d5 <create_chain+0xbb>
c00035cb:	83 f9 01             	cmp    ecx,0x1
c00035ce:	76 9f                	jbe    c000356f <create_chain+0x55>
c00035d0:	be 02 00 00 00       	mov    esi,0x2
c00035d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00035d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035dc:	89 f2                	mov    edx,esi
c00035de:	e8 6a fd ff ff       	call   c000334d <get_fat.isra.2>
c00035e3:	85 c0                	test   eax,eax
c00035e5:	74 17                	je     c00035fe <create_chain+0xe4>
c00035e7:	83 f8 01             	cmp    eax,0x1
c00035ea:	74 60                	je     c000364c <create_chain+0x132>
c00035ec:	83 f8 ff             	cmp    eax,0xffffffff
c00035ef:	74 5b                	je     c000364c <create_chain+0x132>
c00035f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035f5:	39 ce                	cmp    esi,ecx
c00035f7:	75 cc                	jne    c00035c5 <create_chain+0xab>
c00035f9:	e9 71 ff ff ff       	jmp    c000356f <create_chain+0x55>
c00035fe:	83 c9 ff             	or     ecx,0xffffffff
c0003601:	89 f2                	mov    edx,esi
c0003603:	89 d8                	mov    eax,ebx
c0003605:	e8 c0 f2 ff ff       	call   c00028ca <put_fat>
c000360a:	85 c0                	test   eax,eax
c000360c:	75 0f                	jne    c000361d <create_chain+0x103>
c000360e:	85 ff                	test   edi,edi
c0003610:	74 0b                	je     c000361d <create_chain+0x103>
c0003612:	89 f1                	mov    ecx,esi
c0003614:	89 fa                	mov    edx,edi
c0003616:	89 d8                	mov    eax,ebx
c0003618:	e8 ad f2 ff ff       	call   c00028ca <put_fat>
c000361d:	85 c0                	test   eax,eax
c000361f:	75 21                	jne    c0003642 <create_chain+0x128>
c0003621:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003624:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0003627:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000362a:	8d 57 fe             	lea    edx,[edi-0x2]
c000362d:	39 d0                	cmp    eax,edx
c000362f:	77 04                	ja     c0003635 <create_chain+0x11b>
c0003631:	48                   	dec    eax
c0003632:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003635:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003638:	83 c8 01             	or     eax,0x1
c000363b:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000363e:	89 f0                	mov    eax,esi
c0003640:	eb 0a                	jmp    c000364c <create_chain+0x132>
c0003642:	48                   	dec    eax
c0003643:	0f 85 fc fe ff ff    	jne    c0003545 <create_chain+0x2b>
c0003649:	83 c8 ff             	or     eax,0xffffffff
c000364c:	83 c4 1c             	add    esp,0x1c
c000364f:	5b                   	pop    ebx
c0003650:	5e                   	pop    esi
c0003651:	5f                   	pop    edi
c0003652:	5d                   	pop    ebp
c0003653:	c3                   	ret    

c0003654 <remove_chain>:
c0003654:	55                   	push   ebp
c0003655:	57                   	push   edi
c0003656:	56                   	push   esi
c0003657:	89 d6                	mov    esi,edx
c0003659:	53                   	push   ebx
c000365a:	83 ec 0c             	sub    esp,0xc
c000365d:	83 fa 01             	cmp    edx,0x1
c0003660:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003662:	76 6a                	jbe    c00036ce <remove_chain+0x7a>
c0003664:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003667:	76 65                	jbe    c00036ce <remove_chain+0x7a>
c0003669:	85 c9                	test   ecx,ecx
c000366b:	89 c5                	mov    ebp,eax
c000366d:	89 ca                	mov    edx,ecx
c000366f:	74 0e                	je     c000367f <remove_chain+0x2b>
c0003671:	83 c9 ff             	or     ecx,0xffffffff
c0003674:	89 d8                	mov    eax,ebx
c0003676:	e8 4f f2 ff ff       	call   c00028ca <put_fat>
c000367b:	85 c0                	test   eax,eax
c000367d:	75 5b                	jne    c00036da <remove_chain+0x86>
c000367f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003682:	89 f2                	mov    edx,esi
c0003684:	e8 c4 fc ff ff       	call   c000334d <get_fat.isra.2>
c0003689:	85 c0                	test   eax,eax
c000368b:	89 c7                	mov    edi,eax
c000368d:	75 04                	jne    c0003693 <remove_chain+0x3f>
c000368f:	31 c0                	xor    eax,eax
c0003691:	eb 47                	jmp    c00036da <remove_chain+0x86>
c0003693:	83 f8 01             	cmp    eax,0x1
c0003696:	74 36                	je     c00036ce <remove_chain+0x7a>
c0003698:	83 f8 ff             	cmp    eax,0xffffffff
c000369b:	74 38                	je     c00036d5 <remove_chain+0x81>
c000369d:	31 c9                	xor    ecx,ecx
c000369f:	89 f2                	mov    edx,esi
c00036a1:	89 d8                	mov    eax,ebx
c00036a3:	e8 22 f2 ff ff       	call   c00028ca <put_fat>
c00036a8:	85 c0                	test   eax,eax
c00036aa:	75 2e                	jne    c00036da <remove_chain+0x86>
c00036ac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00036af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00036b2:	8d 4a fe             	lea    ecx,[edx-0x2]
c00036b5:	39 c8                	cmp    eax,ecx
c00036b7:	73 0d                	jae    c00036c6 <remove_chain+0x72>
c00036b9:	40                   	inc    eax
c00036ba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00036bd:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00036c0:	83 c8 01             	or     eax,0x1
c00036c3:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00036c6:	39 fa                	cmp    edx,edi
c00036c8:	89 fe                	mov    esi,edi
c00036ca:	77 b3                	ja     c000367f <remove_chain+0x2b>
c00036cc:	eb c1                	jmp    c000368f <remove_chain+0x3b>
c00036ce:	b8 02 00 00 00       	mov    eax,0x2
c00036d3:	eb 05                	jmp    c00036da <remove_chain+0x86>
c00036d5:	b8 01 00 00 00       	mov    eax,0x1
c00036da:	83 c4 0c             	add    esp,0xc
c00036dd:	5b                   	pop    ebx
c00036de:	5e                   	pop    esi
c00036df:	5f                   	pop    edi
c00036e0:	5d                   	pop    ebp
c00036e1:	c3                   	ret    

c00036e2 <dir_next>:
c00036e2:	55                   	push   ebp
c00036e3:	57                   	push   edi
c00036e4:	56                   	push   esi
c00036e5:	53                   	push   ebx
c00036e6:	83 ec 1c             	sub    esp,0x1c
c00036e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00036ec:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036ee:	83 c7 20             	add    edi,0x20
c00036f1:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00036f7:	76 07                	jbe    c0003700 <dir_next+0x1e>
c00036f9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003700:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003703:	b9 04 00 00 00       	mov    ecx,0x4
c0003708:	85 f6                	test   esi,esi
c000370a:	0f 84 cd 00 00 00    	je     c00037dd <dir_next+0xfb>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	89 f8                	mov    eax,edi
c0003714:	25 ff 01 00 00       	and    eax,0x1ff
c0003719:	89 d1                	mov    ecx,edx
c000371b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000371f:	0f 85 a8 00 00 00    	jne    c00037cd <dir_next+0xeb>
c0003725:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003728:	46                   	inc    esi
c0003729:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c000372c:	85 d2                	test   edx,edx
c000372e:	75 22                	jne    c0003752 <dir_next+0x70>
c0003730:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003734:	89 fa                	mov    edx,edi
c0003736:	c1 ea 05             	shr    edx,0x5
c0003739:	39 c2                	cmp    edx,eax
c000373b:	0f 82 8c 00 00 00    	jb     c00037cd <dir_next+0xeb>
c0003741:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003748:	b9 04 00 00 00       	mov    ecx,0x4
c000374d:	e9 8b 00 00 00       	jmp    c00037dd <dir_next+0xfb>
c0003752:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003756:	89 fe                	mov    esi,edi
c0003758:	c1 ee 09             	shr    esi,0x9
c000375b:	48                   	dec    eax
c000375c:	85 f0                	test   eax,esi
c000375e:	75 6d                	jne    c00037cd <dir_next+0xeb>
c0003760:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003764:	89 e8                	mov    eax,ebp
c0003766:	e8 e2 fb ff ff       	call   c000334d <get_fat.isra.2>
c000376b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000376f:	83 f8 01             	cmp    eax,0x1
c0003772:	89 c6                	mov    esi,eax
c0003774:	77 07                	ja     c000377d <dir_next+0x9b>
c0003776:	b9 02 00 00 00       	mov    ecx,0x2
c000377b:	eb 60                	jmp    c00037dd <dir_next+0xfb>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	75 07                	jne    c0003789 <dir_next+0xa7>
c0003782:	b9 01 00 00 00       	mov    ecx,0x1
c0003787:	eb 54                	jmp    c00037dd <dir_next+0xfb>
c0003789:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000378c:	77 30                	ja     c00037be <dir_next+0xdc>
c000378e:	85 c9                	test   ecx,ecx
c0003790:	74 af                	je     c0003741 <dir_next+0x5f>
c0003792:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003795:	89 d8                	mov    eax,ebx
c0003797:	e8 7e fd ff ff       	call   c000351a <create_chain>
c000379c:	b9 07 00 00 00       	mov    ecx,0x7
c00037a1:	85 c0                	test   eax,eax
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	74 36                	je     c00037dd <dir_next+0xfb>
c00037a7:	83 f8 01             	cmp    eax,0x1
c00037aa:	74 ca                	je     c0003776 <dir_next+0x94>
c00037ac:	83 f8 ff             	cmp    eax,0xffffffff
c00037af:	74 d1                	je     c0003782 <dir_next+0xa0>
c00037b1:	89 c2                	mov    edx,eax
c00037b3:	89 e8                	mov    eax,ebp
c00037b5:	e8 67 f2 ff ff       	call   c0002a21 <dir_clear>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	75 c4                	jne    c0003782 <dir_next+0xa0>
c00037be:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00037c1:	89 f2                	mov    edx,esi
c00037c3:	89 e8                	mov    eax,ebp
c00037c5:	e8 97 e9 ff ff       	call   c0002161 <clst2sect>
c00037ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00037cd:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00037d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037d4:	31 c9                	xor    ecx,ecx
c00037d6:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00037da:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00037dd:	83 c4 1c             	add    esp,0x1c
c00037e0:	89 c8                	mov    eax,ecx
c00037e2:	5b                   	pop    ebx
c00037e3:	5e                   	pop    esi
c00037e4:	5f                   	pop    edi
c00037e5:	5d                   	pop    ebp
c00037e6:	c3                   	ret    

c00037e7 <dir_alloc>:
c00037e7:	55                   	push   ebp
c00037e8:	89 c5                	mov    ebp,eax
c00037ea:	57                   	push   edi
c00037eb:	89 d7                	mov    edi,edx
c00037ed:	56                   	push   esi
c00037ee:	31 d2                	xor    edx,edx
c00037f0:	53                   	push   ebx
c00037f1:	83 ec 0c             	sub    esp,0xc
c00037f4:	8b 30                	mov    esi,DWORD PTR [eax]
c00037f6:	e8 57 fc ff ff       	call   c0003452 <dir_sdi>
c00037fb:	85 c0                	test   eax,eax
c00037fd:	75 3b                	jne    c000383a <dir_alloc+0x53>
c00037ff:	31 db                	xor    ebx,ebx
c0003801:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003804:	89 f0                	mov    eax,esi
c0003806:	e8 65 ec ff ff       	call   c0002470 <move_window>
c000380b:	85 c0                	test   eax,eax
c000380d:	75 2b                	jne    c000383a <dir_alloc+0x53>
c000380f:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003812:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003815:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000381b:	74 04                	je     c0003821 <dir_alloc+0x3a>
c000381d:	85 d2                	test   edx,edx
c000381f:	75 07                	jne    c0003828 <dir_alloc+0x41>
c0003821:	43                   	inc    ebx
c0003822:	39 fb                	cmp    ebx,edi
c0003824:	75 04                	jne    c000382a <dir_alloc+0x43>
c0003826:	eb 1c                	jmp    c0003844 <dir_alloc+0x5d>
c0003828:	31 db                	xor    ebx,ebx
c000382a:	ba 01 00 00 00       	mov    edx,0x1
c000382f:	89 e8                	mov    eax,ebp
c0003831:	e8 ac fe ff ff       	call   c00036e2 <dir_next>
c0003836:	85 c0                	test   eax,eax
c0003838:	74 c7                	je     c0003801 <dir_alloc+0x1a>
c000383a:	83 f8 04             	cmp    eax,0x4
c000383d:	75 05                	jne    c0003844 <dir_alloc+0x5d>
c000383f:	b8 07 00 00 00       	mov    eax,0x7
c0003844:	83 c4 0c             	add    esp,0xc
c0003847:	5b                   	pop    ebx
c0003848:	5e                   	pop    esi
c0003849:	5f                   	pop    edi
c000384a:	5d                   	pop    ebp
c000384b:	c3                   	ret    

c000384c <dir_read>:
c000384c:	55                   	push   ebp
c000384d:	57                   	push   edi
c000384e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003853:	56                   	push   esi
c0003854:	be 04 00 00 00       	mov    esi,0x4
c0003859:	53                   	push   ebx
c000385a:	89 c3                	mov    ebx,eax
c000385c:	83 ec 1c             	sub    esp,0x1c
c000385f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003863:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003865:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000386a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000386d:	85 d2                	test   edx,edx
c000386f:	0f 84 e3 00 00 00    	je     c0003958 <dir_read+0x10c>
c0003875:	89 e8                	mov    eax,ebp
c0003877:	e8 f4 eb ff ff       	call   c0002470 <move_window>
c000387c:	85 c0                	test   eax,eax
c000387e:	89 c6                	mov    esi,eax
c0003880:	0f 85 dd 00 00 00    	jne    c0003963 <dir_read+0x117>
c0003886:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003889:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000388c:	88 04 24             	mov    BYTE PTR [esp],al
c000388f:	85 c0                	test   eax,eax
c0003891:	0f 84 c7 00 00 00    	je     c000395e <dir_read+0x112>
c0003897:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000389a:	83 e1 3f             	and    ecx,0x3f
c000389d:	3d e5 00 00 00       	cmp    eax,0xe5
c00038a2:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00038a5:	0f 84 93 00 00 00    	je     c000393e <dir_read+0xf2>
c00038ab:	83 f8 2e             	cmp    eax,0x2e
c00038ae:	0f 84 8a 00 00 00    	je     c000393e <dir_read+0xf2>
c00038b4:	0f b6 c9             	movzx  ecx,cl
c00038b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00038bb:	83 e1 df             	and    ecx,0xffffffdf
c00038be:	83 f9 08             	cmp    ecx,0x8
c00038c1:	0f 94 c1             	sete   cl
c00038c4:	0f b6 c9             	movzx  ecx,cl
c00038c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00038cb:	75 71                	jne    c000393e <dir_read+0xf2>
c00038cd:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00038d2:	75 4a                	jne    c000391e <dir_read+0xd2>
c00038d4:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00038d8:	74 16                	je     c00038f0 <dir_read+0xa4>
c00038da:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038dd:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00038e4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038eb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038ee:	eb 0e                	jmp    c00038fe <dir_read+0xb2>
c00038f0:	89 f9                	mov    ecx,edi
c00038f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038f7:	0f b6 c9             	movzx  ecx,cl
c00038fa:	39 c1                	cmp    ecx,eax
c00038fc:	75 45                	jne    c0003943 <dir_read+0xf7>
c00038fe:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000390a:	75 37                	jne    c0003943 <dir_read+0xf7>
c000390c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000390f:	e8 6a e8 ff ff       	call   c000217e <pick_lfn>
c0003914:	85 c0                	test   eax,eax
c0003916:	74 2b                	je     c0003943 <dir_read+0xf7>
c0003918:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000391b:	4f                   	dec    edi
c000391c:	eb 25                	jmp    c0003943 <dir_read+0xf7>
c000391e:	89 f8                	mov    eax,edi
c0003920:	84 c0                	test   al,al
c0003922:	75 11                	jne    c0003935 <dir_read+0xe9>
c0003924:	89 d0                	mov    eax,edx
c0003926:	e8 30 ea ff ff       	call   c000235b <sum_sfn>
c000392b:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c000392f:	75 04                	jne    c0003935 <dir_read+0xe9>
c0003931:	31 f6                	xor    esi,esi
c0003933:	eb 35                	jmp    c000396a <dir_read+0x11e>
c0003935:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000393c:	eb 2c                	jmp    c000396a <dir_read+0x11e>
c000393e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003943:	31 d2                	xor    edx,edx
c0003945:	89 d8                	mov    eax,ebx
c0003947:	e8 96 fd ff ff       	call   c00036e2 <dir_next>
c000394c:	85 c0                	test   eax,eax
c000394e:	89 c6                	mov    esi,eax
c0003950:	0f 84 14 ff ff ff    	je     c000386a <dir_read+0x1e>
c0003956:	eb 0b                	jmp    c0003963 <dir_read+0x117>
c0003958:	85 f6                	test   esi,esi
c000395a:	74 d5                	je     c0003931 <dir_read+0xe5>
c000395c:	eb 05                	jmp    c0003963 <dir_read+0x117>
c000395e:	be 04 00 00 00       	mov    esi,0x4
c0003963:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396a:	83 c4 1c             	add    esp,0x1c
c000396d:	89 f0                	mov    eax,esi
c000396f:	5b                   	pop    ebx
c0003970:	5e                   	pop    esi
c0003971:	5f                   	pop    edi
c0003972:	5d                   	pop    ebp
c0003973:	c3                   	ret    

c0003974 <dir_remove>:
c0003974:	57                   	push   edi
c0003975:	56                   	push   esi
c0003976:	53                   	push   ebx
c0003977:	89 c3                	mov    ebx,eax
c0003979:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000397c:	8b 30                	mov    esi,DWORD PTR [eax]
c000397e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003981:	83 fa ff             	cmp    edx,0xffffffff
c0003984:	74 09                	je     c000398f <dir_remove+0x1b>
c0003986:	e8 c7 fa ff ff       	call   c0003452 <dir_sdi>
c000398b:	85 c0                	test   eax,eax
c000398d:	75 34                	jne    c00039c3 <dir_remove+0x4f>
c000398f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d7 ea ff ff       	call   c0002470 <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 1c                	jne    c00039b9 <dir_remove+0x45>
c000399d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00039a0:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039a3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a7:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00039aa:	73 17                	jae    c00039c3 <dir_remove+0x4f>
c00039ac:	31 d2                	xor    edx,edx
c00039ae:	89 d8                	mov    eax,ebx
c00039b0:	e8 2d fd ff ff       	call   c00036e2 <dir_next>
c00039b5:	85 c0                	test   eax,eax
c00039b7:	74 d6                	je     c000398f <dir_remove+0x1b>
c00039b9:	83 f8 04             	cmp    eax,0x4
c00039bc:	75 05                	jne    c00039c3 <dir_remove+0x4f>
c00039be:	b8 02 00 00 00       	mov    eax,0x2
c00039c3:	5b                   	pop    ebx
c00039c4:	5e                   	pop    esi
c00039c5:	5f                   	pop    edi
c00039c6:	c3                   	ret    

c00039c7 <dir_find>:
c00039c7:	55                   	push   ebp
c00039c8:	31 d2                	xor    edx,edx
c00039ca:	57                   	push   edi
c00039cb:	56                   	push   esi
c00039cc:	53                   	push   ebx
c00039cd:	89 c3                	mov    ebx,eax
c00039cf:	83 ec 1c             	sub    esp,0x1c
c00039d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00039d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039d8:	89 d8                	mov    eax,ebx
c00039da:	e8 73 fa ff ff       	call   c0003452 <dir_sdi>
c00039df:	85 c0                	test   eax,eax
c00039e1:	89 c6                	mov    esi,eax
c00039e3:	0f 85 22 01 00 00    	jne    c0003b0b <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00039fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a01:	e8 6a ea ff ff       	call   c0002470 <move_window>
c0003a06:	85 c0                	test   eax,eax
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	0f 85 fb 00 00 00    	jne    c0003b0b <dir_find+0x144>
c0003a10:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003a13:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003a16:	85 d2                	test   edx,edx
c0003a18:	89 d1                	mov    ecx,edx
c0003a1a:	0f 84 e6 00 00 00    	je     c0003b06 <dir_find+0x13f>
c0003a20:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003a23:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a2b:	83 e0 3f             	and    eax,0x3f
c0003a2e:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a34:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a37:	0f 84 a8 00 00 00    	je     c0003ae5 <dir_find+0x11e>
c0003a3d:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003a42:	0f b6 c0             	movzx  eax,al
c0003a45:	74 0b                	je     c0003a52 <dir_find+0x8b>
c0003a47:	83 f8 0f             	cmp    eax,0xf
c0003a4a:	0f 85 95 00 00 00    	jne    c0003ae5 <dir_find+0x11e>
c0003a50:	eb 05                	jmp    c0003a57 <dir_find+0x90>
c0003a52:	83 f8 0f             	cmp    eax,0xf
c0003a55:	75 62                	jne    c0003ab9 <dir_find+0xf2>
c0003a57:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003a5b:	0f 85 90 00 00 00    	jne    c0003af1 <dir_find+0x12a>
c0003a61:	f6 c1 40             	test   cl,0x40
c0003a64:	74 15                	je     c0003a7b <dir_find+0xb4>
c0003a66:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003a69:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003a6f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a73:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a76:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003a79:	eb 11                	jmp    c0003a8c <dir_find+0xc5>
c0003a7b:	89 e8                	mov    eax,ebp
c0003a7d:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a82:	0f b6 d0             	movzx  edx,al
c0003a85:	0f b6 c1             	movzx  eax,cl
c0003a88:	39 c2                	cmp    edx,eax
c0003a8a:	75 65                	jne    c0003af1 <dir_find+0x12a>
c0003a8c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a90:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a95:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003a98:	75 57                	jne    c0003af1 <dir_find+0x12a>
c0003a9a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003aa2:	89 fa                	mov    edx,edi
c0003aa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa7:	e8 2c f3 ff ff       	call   c0002dd8 <cmp_lfn>
c0003aac:	85 c0                	test   eax,eax
c0003aae:	74 41                	je     c0003af1 <dir_find+0x12a>
c0003ab0:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ab4:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003ab7:	eb 38                	jmp    c0003af1 <dir_find+0x12a>
c0003ab9:	89 e8                	mov    eax,ebp
c0003abb:	84 c0                	test   al,al
c0003abd:	75 0d                	jne    c0003acc <dir_find+0x105>
c0003abf:	89 f8                	mov    eax,edi
c0003ac1:	e8 95 e8 ff ff       	call   c000235b <sum_sfn>
c0003ac6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003aca:	74 3f                	je     c0003b0b <dir_find+0x144>
c0003acc:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ad0:	75 13                	jne    c0003ae5 <dir_find+0x11e>
c0003ad2:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ad5:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ada:	89 f8                	mov    eax,edi
c0003adc:	e8 75 e4 ff ff       	call   c0001f56 <mem_cmp>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 26                	je     c0003b0b <dir_find+0x144>
c0003ae5:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aec:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003af1:	31 d2                	xor    edx,edx
c0003af3:	89 d8                	mov    eax,ebx
c0003af5:	e8 e8 fb ff ff       	call   c00036e2 <dir_next>
c0003afa:	85 c0                	test   eax,eax
c0003afc:	89 c6                	mov    esi,eax
c0003afe:	0f 84 f6 fe ff ff    	je     c00039fa <dir_find+0x33>
c0003b04:	eb 05                	jmp    c0003b0b <dir_find+0x144>
c0003b06:	be 04 00 00 00       	mov    esi,0x4
c0003b0b:	83 c4 1c             	add    esp,0x1c
c0003b0e:	89 f0                	mov    eax,esi
c0003b10:	5b                   	pop    ebx
c0003b11:	5e                   	pop    esi
c0003b12:	5f                   	pop    edi
c0003b13:	5d                   	pop    ebp
c0003b14:	c3                   	ret    

c0003b15 <follow_path>:
c0003b15:	56                   	push   esi
c0003b16:	53                   	push   ebx
c0003b17:	89 c3                	mov    ebx,eax
c0003b19:	83 ec 14             	sub    esp,0x14
c0003b1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003b20:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b26:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003b29:	83 fa 2f             	cmp    edx,0x2f
c0003b2c:	75 07                	jne    c0003b35 <follow_path+0x20>
c0003b2e:	40                   	inc    eax
c0003b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b33:	eb ed                	jmp    c0003b22 <follow_path+0xd>
c0003b35:	83 fa 5c             	cmp    edx,0x5c
c0003b38:	74 f4                	je     c0003b2e <follow_path+0x19>
c0003b3a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003b41:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003b44:	77 3e                	ja     c0003b84 <follow_path+0x6f>
c0003b46:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003b4a:	31 d2                	xor    edx,edx
c0003b4c:	89 d8                	mov    eax,ebx
c0003b4e:	e8 ff f8 ff ff       	call   c0003452 <dir_sdi>
c0003b53:	eb 57                	jmp    c0003bac <follow_path+0x97>
c0003b55:	89 d8                	mov    eax,ebx
c0003b57:	e8 6b fe ff ff       	call   c00039c7 <dir_find>
c0003b5c:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003b5f:	85 c0                	test   eax,eax
c0003b61:	75 32                	jne    c0003b95 <follow_path+0x80>
c0003b63:	80 e2 04             	and    dl,0x4
c0003b66:	75 44                	jne    c0003bac <follow_path+0x97>
c0003b68:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003b6c:	74 39                	je     c0003ba7 <follow_path+0x92>
c0003b6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b71:	25 ff 01 00 00       	and    eax,0x1ff
c0003b76:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003b7a:	8a 06                	mov    al,BYTE PTR [esi]
c0003b7c:	e8 7b f7 ff ff       	call   c00032fc <ld_clust.isra.0>
c0003b81:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b84:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003b88:	89 d8                	mov    eax,ebx
c0003b8a:	e8 8e ef ff ff       	call   c0002b1d <create_name>
c0003b8f:	85 c0                	test   eax,eax
c0003b91:	74 c2                	je     c0003b55 <follow_path+0x40>
c0003b93:	eb 17                	jmp    c0003bac <follow_path+0x97>
c0003b95:	83 f8 04             	cmp    eax,0x4
c0003b98:	75 12                	jne    c0003bac <follow_path+0x97>
c0003b9a:	80 e2 04             	and    dl,0x4
c0003b9d:	ba 05 00 00 00       	mov    edx,0x5
c0003ba2:	0f 44 c2             	cmove  eax,edx
c0003ba5:	eb 05                	jmp    c0003bac <follow_path+0x97>
c0003ba7:	b8 05 00 00 00       	mov    eax,0x5
c0003bac:	83 c4 14             	add    esp,0x14
c0003baf:	5b                   	pop    ebx
c0003bb0:	5e                   	pop    esi
c0003bb1:	c3                   	ret    

c0003bb2 <dir_register>:
c0003bb2:	55                   	push   ebp
c0003bb3:	57                   	push   edi
c0003bb4:	56                   	push   esi
c0003bb5:	be 06 00 00 00       	mov    esi,0x6
c0003bba:	53                   	push   ebx
c0003bbb:	83 ec 2c             	sub    esp,0x2c
c0003bbe:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003bc1:	80 e2 a0             	and    dl,0xa0
c0003bc4:	0f 85 66 01 00 00    	jne    c0003d30 <dir_register+0x17e>
c0003bca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003bd2:	8b 38                	mov    edi,DWORD PTR [eax]
c0003bd4:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003bd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003bdb:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003be0:	74 06                	je     c0003be8 <dir_register+0x36>
c0003be2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003be6:	eb ef                	jmp    c0003bd7 <dir_register+0x25>
c0003be8:	89 c3                	mov    ebx,eax
c0003bea:	b9 0c 00 00 00       	mov    ecx,0xc
c0003bef:	8d 40 20             	lea    eax,[eax+0x20]
c0003bf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003bf6:	89 c2                	mov    edx,eax
c0003bf8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003bfc:	e8 36 e3 ff ff       	call   c0001f37 <mem_cpy>
c0003c01:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003c06:	74 48                	je     c0003c50 <dir_register+0x9e>
c0003c08:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003c0c:	bd 01 00 00 00       	mov    ebp,0x1
c0003c11:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003c14:	55                   	push   ebp
c0003c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c19:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003c1d:	e8 77 e6 ff ff       	call   c0002299 <gen_numname>
c0003c22:	58                   	pop    eax
c0003c23:	89 d8                	mov    eax,ebx
c0003c25:	e8 9d fd ff ff       	call   c00039c7 <dir_find>
c0003c2a:	85 c0                	test   eax,eax
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	75 10                	jne    c0003c40 <dir_register+0x8e>
c0003c30:	45                   	inc    ebp
c0003c31:	83 fd 64             	cmp    ebp,0x64
c0003c34:	75 db                	jne    c0003c11 <dir_register+0x5f>
c0003c36:	be 07 00 00 00       	mov    esi,0x7
c0003c3b:	e9 f0 00 00 00       	jmp    c0003d30 <dir_register+0x17e>
c0003c40:	83 f8 04             	cmp    eax,0x4
c0003c43:	0f 85 e7 00 00 00    	jne    c0003d30 <dir_register+0x17e>
c0003c49:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003c4d:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003c50:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003c55:	bd 01 00 00 00       	mov    ebp,0x1
c0003c5a:	74 13                	je     c0003c6f <dir_register+0xbd>
c0003c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c60:	b9 0d 00 00 00       	mov    ecx,0xd
c0003c65:	31 d2                	xor    edx,edx
c0003c67:	83 c0 0c             	add    eax,0xc
c0003c6a:	f7 f1                	div    ecx
c0003c6c:	8d 68 01             	lea    ebp,[eax+0x1]
c0003c6f:	89 ea                	mov    edx,ebp
c0003c71:	89 d8                	mov    eax,ebx
c0003c73:	e8 6f fb ff ff       	call   c00037e7 <dir_alloc>
c0003c78:	85 c0                	test   eax,eax
c0003c7a:	89 c6                	mov    esi,eax
c0003c7c:	0f 85 ae 00 00 00    	jne    c0003d30 <dir_register+0x17e>
c0003c82:	4d                   	dec    ebp
c0003c83:	74 6b                	je     c0003cf0 <dir_register+0x13e>
c0003c85:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003c88:	89 e8                	mov    eax,ebp
c0003c8a:	c1 e0 05             	shl    eax,0x5
c0003c8d:	29 c2                	sub    edx,eax
c0003c8f:	89 d8                	mov    eax,ebx
c0003c91:	e8 bc f7 ff ff       	call   c0003452 <dir_sdi>
c0003c96:	85 c0                	test   eax,eax
c0003c98:	89 c6                	mov    esi,eax
c0003c9a:	0f 85 90 00 00 00    	jne    c0003d30 <dir_register+0x17e>
c0003ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ca4:	e8 b2 e6 ff ff       	call   c000235b <sum_sfn>
c0003ca9:	0f b6 c0             	movzx  eax,al
c0003cac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003cb0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cb3:	89 f8                	mov    eax,edi
c0003cb5:	e8 b6 e7 ff ff       	call   c0002470 <move_window>
c0003cba:	85 c0                	test   eax,eax
c0003cbc:	89 c6                	mov    esi,eax
c0003cbe:	75 70                	jne    c0003d30 <dir_register+0x17e>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	89 e8                	mov    eax,ebp
c0003cc5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003cc8:	0f b6 c8             	movzx  ecx,al
c0003ccb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003cce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003cd2:	e8 27 e5 ff ff       	call   c00021fe <put_lfn>
c0003cd7:	31 d2                	xor    edx,edx
c0003cd9:	89 d8                	mov    eax,ebx
c0003cdb:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003cdf:	e8 fe f9 ff ff       	call   c00036e2 <dir_next>
c0003ce4:	83 c4 10             	add    esp,0x10
c0003ce7:	85 c0                	test   eax,eax
c0003ce9:	89 c6                	mov    esi,eax
c0003ceb:	75 43                	jne    c0003d30 <dir_register+0x17e>
c0003ced:	4d                   	dec    ebp
c0003cee:	75 c0                	jne    c0003cb0 <dir_register+0xfe>
c0003cf0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cf3:	89 f8                	mov    eax,edi
c0003cf5:	e8 76 e7 ff ff       	call   c0002470 <move_window>
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	89 c6                	mov    esi,eax
c0003cfe:	75 30                	jne    c0003d30 <dir_register+0x17e>
c0003d00:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d03:	b9 20 00 00 00       	mov    ecx,0x20
c0003d08:	31 d2                	xor    edx,edx
c0003d0a:	e8 3d e2 ff ff       	call   c0001f4c <mem_set>
c0003d0f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1b:	e8 17 e2 ff ff       	call   c0001f37 <mem_cpy>
c0003d20:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003d23:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d26:	83 e0 18             	and    eax,0x18
c0003d29:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003d2c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d30:	83 c4 2c             	add    esp,0x2c
c0003d33:	89 f0                	mov    eax,esi
c0003d35:	5b                   	pop    ebx
c0003d36:	5e                   	pop    esi
c0003d37:	5f                   	pop    edi
c0003d38:	5d                   	pop    ebp
c0003d39:	c3                   	ret    

c0003d3a <f_mount>:
c0003d3a:	53                   	push   ebx
c0003d3b:	83 ec 18             	sub    esp,0x18
c0003d3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003d42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003d46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003d4e:	e8 28 e6 ff ff       	call   c000237b <get_ldnumber>
c0003d53:	89 c2                	mov    edx,eax
c0003d55:	b8 0b 00 00 00       	mov    eax,0xb
c0003d5a:	85 d2                	test   edx,edx
c0003d5c:	78 39                	js     c0003d97 <f_mount+0x5d>
c0003d5e:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003d65:	85 c0                	test   eax,eax
c0003d67:	74 03                	je     c0003d6c <f_mount+0x32>
c0003d69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d70:	85 c0                	test   eax,eax
c0003d72:	74 03                	je     c0003d77 <f_mount+0x3d>
c0003d74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d7b:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003d82:	31 c0                	xor    eax,eax
c0003d84:	84 db                	test   bl,bl
c0003d86:	74 0f                	je     c0003d97 <f_mount+0x5d>
c0003d88:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003d8c:	31 c9                	xor    ecx,ecx
c0003d8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d92:	e8 36 e8 ff ff       	call   c00025cd <mount_volume>
c0003d97:	83 c4 18             	add    esp,0x18
c0003d9a:	5b                   	pop    ebx
c0003d9b:	c3                   	ret    

c0003d9c <f_open>:
c0003d9c:	55                   	push   ebp
c0003d9d:	b8 09 00 00 00       	mov    eax,0x9
c0003da2:	57                   	push   edi
c0003da3:	56                   	push   esi
c0003da4:	53                   	push   ebx
c0003da5:	83 ec 5c             	sub    esp,0x5c
c0003da8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003dac:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003db0:	85 db                	test   ebx,ebx
c0003db2:	0f 84 9f 02 00 00    	je     c0004057 <f_open+0x2bb>
c0003db8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003dbc:	89 fd                	mov    ebp,edi
c0003dbe:	83 e5 3f             	and    ebp,0x3f
c0003dc1:	89 e8                	mov    eax,ebp
c0003dc3:	89 ee                	mov    esi,ebp
c0003dc5:	0f b6 c8             	movzx  ecx,al
c0003dc8:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003dcc:	e8 fc e7 ff ff       	call   c00025cd <mount_volume>
c0003dd1:	85 c0                	test   eax,eax
c0003dd3:	0f 85 78 02 00 00    	jne    c0004051 <f_open+0x2b5>
c0003dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ddd:	83 ec 0c             	sub    esp,0xc
c0003de0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003de4:	68 00 02 00 00       	push   0x200
c0003de9:	e8 62 1f 00 00       	call   c0005d50 <ff_memalloc>
c0003dee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003df2:	83 c4 10             	add    esp,0x10
c0003df5:	b8 11 00 00 00       	mov    eax,0x11
c0003dfa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003dff:	0f 84 52 02 00 00    	je     c0004057 <f_open+0x2bb>
c0003e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e0d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003e11:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003e14:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e18:	e8 f8 fc ff ff       	call   c0003b15 <follow_path>
c0003e1d:	85 c0                	test   eax,eax
c0003e1f:	75 0d                	jne    c0003e2e <f_open+0x92>
c0003e21:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003e26:	ba 06 00 00 00       	mov    edx,0x6
c0003e2b:	0f 45 c2             	cmovne eax,edx
c0003e2e:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003e34:	0f 84 d5 00 00 00    	je     c0003f0f <f_open+0x173>
c0003e3a:	85 c0                	test   eax,eax
c0003e3c:	74 21                	je     c0003e5f <f_open+0xc3>
c0003e3e:	83 f8 04             	cmp    eax,0x4
c0003e41:	0f 85 ef 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003e47:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e4b:	e8 62 fd ff ff       	call   c0003bb2 <dir_register>
c0003e50:	85 c0                	test   eax,eax
c0003e52:	0f 85 de 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003e58:	83 cd 08             	or     ebp,0x8
c0003e5b:	89 ee                	mov    esi,ebp
c0003e5d:	eb 2c                	jmp    c0003e8b <f_open+0xef>
c0003e5f:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e63:	b8 07 00 00 00       	mov    eax,0x7
c0003e68:	80 e2 11             	and    dl,0x11
c0003e6b:	0f 85 c5 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003e71:	f7 c7 04 00 00 00    	test   edi,0x4
c0003e77:	b8 08 00 00 00       	mov    eax,0x8
c0003e7c:	0f 85 b4 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003e82:	83 e7 08             	and    edi,0x8
c0003e85:	0f 84 b1 00 00 00    	je     c0003f3c <f_open+0x1a0>
c0003e8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e8f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003e93:	8a 00                	mov    al,BYTE PTR [eax]
c0003e95:	89 ea                	mov    edx,ebp
c0003e97:	e8 60 f4 ff ff       	call   c00032fc <ld_clust.isra.0>
c0003e9c:	ba 00 00 21 50       	mov    edx,0x50210000
c0003ea1:	89 c7                	mov    edi,eax
c0003ea3:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003ea6:	e8 89 e0 ff ff       	call   c0001f34 <st_dword>
c0003eab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003eaf:	31 c9                	xor    ecx,ecx
c0003eb1:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003ebd:	e8 63 f4 ff ff       	call   c0003325 <st_clust.isra.1>
c0003ec2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003ec6:	31 d2                	xor    edx,edx
c0003ec8:	83 c0 1c             	add    eax,0x1c
c0003ecb:	e8 64 e0 ff ff       	call   c0001f34 <st_dword>
c0003ed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ed4:	85 ff                	test   edi,edi
c0003ed6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003eda:	74 60                	je     c0003f3c <f_open+0x1a0>
c0003edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ee0:	31 c9                	xor    ecx,ecx
c0003ee2:	89 fa                	mov    edx,edi
c0003ee4:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003ee7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003eeb:	e8 64 f7 ff ff       	call   c0003654 <remove_chain>
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	0f 85 3e 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003efc:	89 ea                	mov    edx,ebp
c0003efe:	4f                   	dec    edi
c0003eff:	e8 6c e5 ff ff       	call   c0002470 <move_window>
c0003f04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f08:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	eb 27                	jmp    c0003f36 <f_open+0x19a>
c0003f0f:	85 c0                	test   eax,eax
c0003f11:	0f 85 1f 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003f17:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f1b:	b8 04 00 00 00       	mov    eax,0x4
c0003f20:	f6 c2 10             	test   dl,0x10
c0003f23:	0f 85 0d 01 00 00    	jne    c0004036 <f_open+0x29a>
c0003f29:	83 e7 02             	and    edi,0x2
c0003f2c:	74 0e                	je     c0003f3c <f_open+0x1a0>
c0003f2e:	b8 07 00 00 00       	mov    eax,0x7
c0003f33:	80 e2 01             	and    dl,0x1
c0003f36:	0f 85 fa 00 00 00    	jne    c0004036 <f_open+0x29a>
c0003f3c:	f7 c6 08 00 00 00    	test   esi,0x8
c0003f42:	74 03                	je     c0003f47 <f_open+0x1ab>
c0003f44:	83 ce 40             	or     esi,0x40
c0003f47:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f4b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003f4f:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003f52:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003f55:	89 fa                	mov    edx,edi
c0003f57:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003f5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003f5d:	e8 9a f3 ff ff       	call   c00032fc <ld_clust.isra.0>
c0003f62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f65:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003f68:	e8 ab df ff ff       	call   c0001f18 <ld_dword>
c0003f6d:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003f70:	31 d2                	xor    edx,edx
c0003f72:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003f74:	b9 00 02 00 00       	mov    ecx,0x200
c0003f79:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f7c:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003f80:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003f84:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003f8b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f92:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003f96:	89 f0                	mov    eax,esi
c0003f98:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003f9b:	89 f8                	mov    eax,edi
c0003f9d:	e8 aa df ff ff       	call   c0001f4c <mem_set>
c0003fa2:	83 e6 20             	and    esi,0x20
c0003fa5:	75 07                	jne    c0003fae <f_open+0x212>
c0003fa7:	31 c0                	xor    eax,eax
c0003fa9:	e9 88 00 00 00       	jmp    c0004036 <f_open+0x29a>
c0003fae:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003fb1:	85 f6                	test   esi,esi
c0003fb3:	74 f2                	je     c0003fa7 <f_open+0x20b>
c0003fb5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003fb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fbc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003fbf:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003fc3:	31 c0                	xor    eax,eax
c0003fc5:	c1 e5 09             	shl    ebp,0x9
c0003fc8:	85 c0                	test   eax,eax
c0003fca:	75 23                	jne    c0003fef <f_open+0x253>
c0003fcc:	39 ee                	cmp    esi,ebp
c0003fce:	76 1f                	jbe    c0003fef <f_open+0x253>
c0003fd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003fd2:	e8 76 f3 ff ff       	call   c000334d <get_fat.isra.2>
c0003fd7:	89 c2                	mov    edx,eax
c0003fd9:	b8 02 00 00 00       	mov    eax,0x2
c0003fde:	83 fa 01             	cmp    edx,0x1
c0003fe1:	76 08                	jbe    c0003feb <f_open+0x24f>
c0003fe3:	31 c0                	xor    eax,eax
c0003fe5:	83 fa ff             	cmp    edx,0xffffffff
c0003fe8:	0f 94 c0             	sete   al
c0003feb:	29 ee                	sub    esi,ebp
c0003fed:	eb d9                	jmp    c0003fc8 <f_open+0x22c>
c0003fef:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ff2:	85 c0                	test   eax,eax
c0003ff4:	75 40                	jne    c0004036 <f_open+0x29a>
c0003ff6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003ffc:	74 a9                	je     c0003fa7 <f_open+0x20b>
c0003ffe:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004002:	89 e8                	mov    eax,ebp
c0004004:	e8 58 e1 ff ff       	call   c0002161 <clst2sect>
c0004009:	89 c2                	mov    edx,eax
c000400b:	b8 02 00 00 00       	mov    eax,0x2
c0004010:	85 d2                	test   edx,edx
c0004012:	74 22                	je     c0004036 <f_open+0x29a>
c0004014:	c1 ee 09             	shr    esi,0x9
c0004017:	8d 04 16             	lea    eax,[esi+edx*1]
c000401a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000401d:	6a 01                	push   0x1
c000401f:	50                   	push   eax
c0004020:	57                   	push   edi
c0004021:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0004025:	50                   	push   eax
c0004026:	e8 95 de ff ff       	call   c0001ec0 <disk_read>
c000402b:	83 c4 10             	add    esp,0x10
c000402e:	85 c0                	test   eax,eax
c0004030:	0f 95 c0             	setne  al
c0004033:	0f b6 c0             	movzx  eax,al
c0004036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000403a:	83 ec 0c             	sub    esp,0xc
c000403d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004041:	e8 22 1d 00 00       	call   c0005d68 <ff_memfree>
c0004046:	83 c4 10             	add    esp,0x10
c0004049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000404d:	85 c0                	test   eax,eax
c000404f:	74 06                	je     c0004057 <f_open+0x2bb>
c0004051:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004057:	83 c4 5c             	add    esp,0x5c
c000405a:	5b                   	pop    ebx
c000405b:	5e                   	pop    esi
c000405c:	5f                   	pop    edi
c000405d:	5d                   	pop    ebp
c000405e:	c3                   	ret    

c000405f <f_read>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	56                   	push   esi
c0004062:	53                   	push   ebx
c0004063:	83 ec 2c             	sub    esp,0x2c
c0004066:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000406a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000406e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004072:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004076:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000407c:	89 d8                	mov    eax,ebx
c000407e:	e8 44 e3 ff ff       	call   c00023c7 <validate>
c0004083:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004087:	85 c0                	test   eax,eax
c0004089:	0f 85 a5 01 00 00    	jne    c0004234 <f_read+0x1d5>
c000408f:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004093:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004097:	85 c0                	test   eax,eax
c0004099:	0f 85 95 01 00 00    	jne    c0004234 <f_read+0x1d5>
c000409f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00040a3:	0f 84 83 01 00 00    	je     c000422c <f_read+0x1cd>
c00040a9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00040ac:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00040af:	39 f8                	cmp    eax,edi
c00040b1:	0f 46 f8             	cmovbe edi,eax
c00040b4:	85 ff                	test   edi,edi
c00040b6:	0f 84 78 01 00 00    	je     c0004234 <f_read+0x1d5>
c00040bc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040bf:	a9 ff 01 00 00       	test   eax,0x1ff
c00040c4:	0f 85 2b 01 00 00    	jne    c00041f5 <f_read+0x196>
c00040ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00040ce:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00040d2:	89 c2                	mov    edx,eax
c00040d4:	c1 ea 09             	shr    edx,0x9
c00040d7:	4d                   	dec    ebp
c00040d8:	21 d5                	and    ebp,edx
c00040da:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00040de:	75 42                	jne    c0004122 <f_read+0xc3>
c00040e0:	85 c0                	test   eax,eax
c00040e2:	75 05                	jne    c00040e9 <f_read+0x8a>
c00040e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00040e7:	eb 0a                	jmp    c00040f3 <f_read+0x94>
c00040e9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040ee:	e8 5a f2 ff ff       	call   c000334d <get_fat.isra.2>
c00040f3:	83 f8 01             	cmp    eax,0x1
c00040f6:	77 11                	ja     c0004109 <f_read+0xaa>
c00040f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00040fc:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004104:	e9 2b 01 00 00       	jmp    c0004234 <f_read+0x1d5>
c0004109:	83 f8 ff             	cmp    eax,0xffffffff
c000410c:	75 11                	jne    c000411f <f_read+0xc0>
c000410e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004112:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000411a:	e9 15 01 00 00       	jmp    c0004234 <f_read+0x1d5>
c000411f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004122:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004126:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004129:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000412d:	89 c8                	mov    eax,ecx
c000412f:	e8 2d e0 ff ff       	call   c0002161 <clst2sect>
c0004134:	85 c0                	test   eax,eax
c0004136:	74 c0                	je     c00040f8 <f_read+0x99>
c0004138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000413c:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004142:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004145:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004149:	76 58                	jbe    c00041a3 <f_read+0x144>
c000414b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000414f:	89 fe                	mov    esi,edi
c0004151:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004155:	c1 ee 09             	shr    esi,0x9
c0004158:	01 f2                	add    edx,esi
c000415a:	39 c2                	cmp    edx,eax
c000415c:	76 06                	jbe    c0004164 <f_read+0x105>
c000415e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004162:	89 c6                	mov    esi,eax
c0004164:	56                   	push   esi
c0004165:	55                   	push   ebp
c0004166:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000416a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000416e:	50                   	push   eax
c000416f:	e8 4c dd ff ff       	call   c0001ec0 <disk_read>
c0004174:	83 c4 10             	add    esp,0x10
c0004177:	85 c0                	test   eax,eax
c0004179:	75 93                	jne    c000410e <f_read+0xaf>
c000417b:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000417f:	74 1d                	je     c000419e <f_read+0x13f>
c0004181:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004184:	29 e8                	sub    eax,ebp
c0004186:	39 f0                	cmp    eax,esi
c0004188:	73 14                	jae    c000419e <f_read+0x13f>
c000418a:	c1 e0 09             	shl    eax,0x9
c000418d:	b9 00 02 00 00       	mov    ecx,0x200
c0004192:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004196:	8d 53 28             	lea    edx,[ebx+0x28]
c0004199:	e8 99 dd ff ff       	call   c0001f37 <mem_cpy>
c000419e:	c1 e6 09             	shl    esi,0x9
c00041a1:	eb 75                	jmp    c0004218 <f_read+0x1b9>
c00041a3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00041a6:	39 e8                	cmp    eax,ebp
c00041a8:	74 48                	je     c00041f2 <f_read+0x193>
c00041aa:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ae:	8d 73 28             	lea    esi,[ebx+0x28]
c00041b1:	74 22                	je     c00041d5 <f_read+0x176>
c00041b3:	6a 01                	push   0x1
c00041b5:	50                   	push   eax
c00041b6:	56                   	push   esi
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 15 dd ff ff       	call   c0001ed6 <disk_write>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	0f 85 42 ff ff ff    	jne    c000410e <f_read+0xaf>
c00041cc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00041cf:	83 e0 7f             	and    eax,0x7f
c00041d2:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041d5:	6a 01                	push   0x1
c00041d7:	55                   	push   ebp
c00041d8:	56                   	push   esi
c00041d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041e1:	50                   	push   eax
c00041e2:	e8 d9 dc ff ff       	call   c0001ec0 <disk_read>
c00041e7:	83 c4 10             	add    esp,0x10
c00041ea:	85 c0                	test   eax,eax
c00041ec:	0f 85 1c ff ff ff    	jne    c000410e <f_read+0xaf>
c00041f2:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00041f5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041f8:	be 00 02 00 00       	mov    esi,0x200
c00041fd:	25 ff 01 00 00       	and    eax,0x1ff
c0004202:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004206:	29 c6                	sub    esi,eax
c0004208:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000420c:	39 f7                	cmp    edi,esi
c000420e:	0f 46 f7             	cmovbe esi,edi
c0004211:	89 f1                	mov    ecx,esi
c0004213:	e8 1f dd ff ff       	call   c0001f37 <mem_cpy>
c0004218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000421c:	29 f7                	sub    edi,esi
c000421e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004222:	01 30                	add    DWORD PTR [eax],esi
c0004224:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004227:	e9 88 fe ff ff       	jmp    c00040b4 <f_read+0x55>
c000422c:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004238:	83 c4 2c             	add    esp,0x2c
c000423b:	5b                   	pop    ebx
c000423c:	5e                   	pop    esi
c000423d:	5f                   	pop    edi
c000423e:	5d                   	pop    ebp
c000423f:	c3                   	ret    

c0004240 <f_write>:
c0004240:	55                   	push   ebp
c0004241:	57                   	push   edi
c0004242:	56                   	push   esi
c0004243:	53                   	push   ebx
c0004244:	83 ec 2c             	sub    esp,0x2c
c0004247:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000424b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000424f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004253:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004259:	89 d8                	mov    eax,ebx
c000425b:	e8 67 e1 ff ff       	call   c00023c7 <validate>
c0004260:	85 c0                	test   eax,eax
c0004262:	89 c7                	mov    edi,eax
c0004264:	0f 85 13 02 00 00    	jne    c000447d <f_write+0x23d>
c000426a:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c000426e:	85 ff                	test   edi,edi
c0004270:	0f 85 07 02 00 00    	jne    c000447d <f_write+0x23d>
c0004276:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000427a:	0f 84 f8 01 00 00    	je     c0004478 <f_write+0x238>
c0004280:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004283:	89 c1                	mov    ecx,eax
c0004285:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0004289:	0f 83 ed 00 00 00    	jae    c000437c <f_write+0x13c>
c000428f:	f7 d0                	not    eax
c0004291:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004295:	e9 e2 00 00 00       	jmp    c000437c <f_write+0x13c>
c000429a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000429d:	a9 ff 01 00 00       	test   eax,0x1ff
c00042a2:	0f 85 9b 01 00 00    	jne    c0004443 <f_write+0x203>
c00042a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042ac:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00042b0:	89 c2                	mov    edx,eax
c00042b2:	c1 ea 09             	shr    edx,0x9
c00042b5:	4d                   	dec    ebp
c00042b6:	21 d5                	and    ebp,edx
c00042b8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00042bc:	0f 84 c7 00 00 00    	je     c0004389 <f_write+0x149>
c00042c2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00042c6:	0f 85 23 01 00 00    	jne    c00043ef <f_write+0x1af>
c00042cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042d0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042d7:	89 c8                	mov    eax,ecx
c00042d9:	e8 83 de ff ff       	call   c0002161 <clst2sect>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 84 d3 00 00 00    	je     c00043b9 <f_write+0x179>
c00042e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00042ea:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00042f2:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00042f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042f9:	0f 86 1c 01 00 00    	jbe    c000441b <f_write+0x1db>
c00042ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004303:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004307:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000430b:	c1 ee 09             	shr    esi,0x9
c000430e:	01 f2                	add    edx,esi
c0004310:	39 c2                	cmp    edx,eax
c0004312:	76 06                	jbe    c000431a <f_write+0xda>
c0004314:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004318:	89 c6                	mov    esi,eax
c000431a:	56                   	push   esi
c000431b:	55                   	push   ebp
c000431c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004320:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004324:	50                   	push   eax
c0004325:	e8 ac db ff ff       	call   c0001ed6 <disk_write>
c000432a:	83 c4 10             	add    esp,0x10
c000432d:	85 c0                	test   eax,eax
c000432f:	0f 85 97 00 00 00    	jne    c00043cc <f_write+0x18c>
c0004335:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004338:	29 ea                	sub    edx,ebp
c000433a:	39 f2                	cmp    edx,esi
c000433c:	73 1d                	jae    c000435b <f_write+0x11b>
c000433e:	c1 e2 09             	shl    edx,0x9
c0004341:	b9 00 02 00 00       	mov    ecx,0x200
c0004346:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000434a:	8d 43 28             	lea    eax,[ebx+0x28]
c000434d:	e8 e5 db ff ff       	call   c0001f37 <mem_cpy>
c0004352:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004355:	83 e0 7f             	and    eax,0x7f
c0004358:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004366:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436a:	01 30                	add    DWORD PTR [eax],esi
c000436c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000436f:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004372:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004375:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004379:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000437c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004381:	0f 85 13 ff ff ff    	jne    c000429a <f_write+0x5a>
c0004387:	eb 1d                	jmp    c00043a6 <f_write+0x166>
c0004389:	85 c0                	test   eax,eax
c000438b:	75 0b                	jne    c0004398 <f_write+0x158>
c000438d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004390:	31 d2                	xor    edx,edx
c0004392:	85 c0                	test   eax,eax
c0004394:	75 1e                	jne    c00043b4 <f_write+0x174>
c0004396:	eb 03                	jmp    c000439b <f_write+0x15b>
c0004398:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000439b:	89 d8                	mov    eax,ebx
c000439d:	e8 78 f1 ff ff       	call   c000351a <create_chain>
c00043a2:	85 c0                	test   eax,eax
c00043a4:	75 0e                	jne    c00043b4 <f_write+0x174>
c00043a6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043a9:	83 c8 40             	or     eax,0x40
c00043ac:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043af:	e9 c9 00 00 00       	jmp    c000447d <f_write+0x23d>
c00043b4:	83 f8 01             	cmp    eax,0x1
c00043b7:	75 0e                	jne    c00043c7 <f_write+0x187>
c00043b9:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043bd:	bf 02 00 00 00       	mov    edi,0x2
c00043c2:	e9 b6 00 00 00       	jmp    c000447d <f_write+0x23d>
c00043c7:	83 f8 ff             	cmp    eax,0xffffffff
c00043ca:	75 0e                	jne    c00043da <f_write+0x19a>
c00043cc:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d0:	bf 01 00 00 00       	mov    edi,0x1
c00043d5:	e9 a3 00 00 00       	jmp    c000447d <f_write+0x23d>
c00043da:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043de:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e1:	0f 85 db fe ff ff    	jne    c00042c2 <f_write+0x82>
c00043e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043ea:	e9 d3 fe ff ff       	jmp    c00042c2 <f_write+0x82>
c00043ef:	6a 01                	push   0x1
c00043f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043f4:	8d 43 28             	lea    eax,[ebx+0x28]
c00043f7:	50                   	push   eax
c00043f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00043fc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004400:	50                   	push   eax
c0004401:	e8 d0 da ff ff       	call   c0001ed6 <disk_write>
c0004406:	83 c4 10             	add    esp,0x10
c0004409:	85 c0                	test   eax,eax
c000440b:	75 bf                	jne    c00043cc <f_write+0x18c>
c000440d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004410:	83 e0 7f             	and    eax,0x7f
c0004413:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004416:	e9 b1 fe ff ff       	jmp    c00042cc <f_write+0x8c>
c000441b:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000441e:	74 20                	je     c0004440 <f_write+0x200>
c0004420:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004423:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004426:	76 18                	jbe    c0004440 <f_write+0x200>
c0004428:	6a 01                	push   0x1
c000442a:	55                   	push   ebp
c000442b:	8d 43 28             	lea    eax,[ebx+0x28]
c000442e:	50                   	push   eax
c000442f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004433:	50                   	push   eax
c0004434:	e8 87 da ff ff       	call   c0001ec0 <disk_read>
c0004439:	83 c4 10             	add    esp,0x10
c000443c:	85 c0                	test   eax,eax
c000443e:	75 8c                	jne    c00043cc <f_write+0x18c>
c0004440:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004443:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004446:	be 00 02 00 00       	mov    esi,0x200
c000444b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000444f:	25 ff 01 00 00       	and    eax,0x1ff
c0004454:	29 c6                	sub    esi,eax
c0004456:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000445a:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000445e:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004463:	89 f1                	mov    ecx,esi
c0004465:	e8 cd da ff ff       	call   c0001f37 <mem_cpy>
c000446a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446d:	83 c8 80             	or     eax,0xffffff80
c0004470:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004473:	e9 e6 fe ff ff       	jmp    c000435e <f_write+0x11e>
c0004478:	bf 07 00 00 00       	mov    edi,0x7
c000447d:	83 c4 2c             	add    esp,0x2c
c0004480:	89 f8                	mov    eax,edi
c0004482:	5b                   	pop    ebx
c0004483:	5e                   	pop    esi
c0004484:	5f                   	pop    edi
c0004485:	5d                   	pop    ebp
c0004486:	c3                   	ret    

c0004487 <f_sync>:
c0004487:	56                   	push   esi
c0004488:	53                   	push   ebx
c0004489:	83 ec 14             	sub    esp,0x14
c000448c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004490:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004494:	89 d8                	mov    eax,ebx
c0004496:	e8 2c df ff ff       	call   c00023c7 <validate>
c000449b:	85 c0                	test   eax,eax
c000449d:	0f 85 a3 00 00 00    	jne    c0004546 <f_sync+0xbf>
c00044a3:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00044a6:	f6 c2 40             	test   dl,0x40
c00044a9:	0f 84 97 00 00 00    	je     c0004546 <f_sync+0xbf>
c00044af:	80 e2 80             	and    dl,0x80
c00044b2:	74 2e                	je     c00044e2 <f_sync+0x5b>
c00044b4:	6a 01                	push   0x1
c00044b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044b9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 0b da ff ff       	call   c0001ed6 <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	89 c2                	mov    edx,eax
c00044d0:	b8 01 00 00 00       	mov    eax,0x1
c00044d5:	85 d2                	test   edx,edx
c00044d7:	75 6d                	jne    c0004546 <f_sync+0xbf>
c00044d9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044dc:	83 e0 7f             	and    eax,0x7f
c00044df:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044e2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00044e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044e9:	e8 82 df ff ff       	call   c0002470 <move_window>
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 54                	jne    c0004546 <f_sync+0xbf>
c00044f2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00044f5:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00044f8:	89 f2                	mov    edx,esi
c00044fa:	83 c8 20             	or     eax,0x20
c00044fd:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004500:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004503:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004505:	e8 1b ee ff ff       	call   c0003325 <st_clust.isra.1>
c000450a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000450d:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004510:	e8 1f da ff ff       	call   c0001f34 <st_dword>
c0004515:	8d 46 16             	lea    eax,[esi+0x16]
c0004518:	ba 00 00 21 50       	mov    edx,0x50210000
c000451d:	e8 12 da ff ff       	call   c0001f34 <st_dword>
c0004522:	8d 46 12             	lea    eax,[esi+0x12]
c0004525:	31 d2                	xor    edx,edx
c0004527:	e8 04 da ff ff       	call   c0001f30 <st_word>
c000452c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004530:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004538:	e8 68 e9 ff ff       	call   c0002ea5 <sync_fs>
c000453d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004540:	83 e2 bf             	and    edx,0xffffffbf
c0004543:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004546:	83 c4 14             	add    esp,0x14
c0004549:	5b                   	pop    ebx
c000454a:	5e                   	pop    esi
c000454b:	c3                   	ret    

c000454c <f_close>:
c000454c:	53                   	push   ebx
c000454d:	83 ec 24             	sub    esp,0x24
c0004550:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004554:	53                   	push   ebx
c0004555:	e8 2d ff ff ff       	call   c0004487 <f_sync>
c000455a:	83 c4 10             	add    esp,0x10
c000455d:	85 c0                	test   eax,eax
c000455f:	75 15                	jne    c0004576 <f_close+0x2a>
c0004561:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004565:	89 d8                	mov    eax,ebx
c0004567:	e8 5b de ff ff       	call   c00023c7 <validate>
c000456c:	85 c0                	test   eax,eax
c000456e:	75 06                	jne    c0004576 <f_close+0x2a>
c0004570:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004576:	83 c4 18             	add    esp,0x18
c0004579:	5b                   	pop    ebx
c000457a:	c3                   	ret    

c000457b <f_lseek>:
c000457b:	55                   	push   ebp
c000457c:	57                   	push   edi
c000457d:	56                   	push   esi
c000457e:	53                   	push   ebx
c000457f:	83 ec 2c             	sub    esp,0x2c
c0004582:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004586:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000458a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000458e:	89 d8                	mov    eax,ebx
c0004590:	e8 32 de ff ff       	call   c00023c7 <validate>
c0004595:	85 c0                	test   eax,eax
c0004597:	89 c5                	mov    ebp,eax
c0004599:	0f 85 82 01 00 00    	jne    c0004721 <f_lseek+0x1a6>
c000459f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00045a3:	85 ed                	test   ebp,ebp
c00045a5:	0f 85 76 01 00 00    	jne    c0004721 <f_lseek+0x1a6>
c00045ab:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00045ae:	39 f0                	cmp    eax,esi
c00045b0:	73 07                	jae    c00045b9 <f_lseek+0x3e>
c00045b2:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00045b6:	0f 44 f0             	cmove  esi,eax
c00045b9:	85 f6                	test   esi,esi
c00045bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00045be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00045c5:	75 07                	jne    c00045ce <f_lseek+0x53>
c00045c7:	31 f6                	xor    esi,esi
c00045c9:	e9 e2 00 00 00       	jmp    c00046b0 <f_lseek+0x135>
c00045ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045d2:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00045d6:	c1 e7 09             	shl    edi,0x9
c00045d9:	85 c9                	test   ecx,ecx
c00045db:	74 28                	je     c0004605 <f_lseek+0x8a>
c00045dd:	31 d2                	xor    edx,edx
c00045df:	49                   	dec    ecx
c00045e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00045e3:	f7 f7                	div    edi
c00045e5:	31 d2                	xor    edx,edx
c00045e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045eb:	89 c8                	mov    eax,ecx
c00045ed:	f7 f7                	div    edi
c00045ef:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00045f3:	72 10                	jb     c0004605 <f_lseek+0x8a>
c00045f5:	89 f8                	mov    eax,edi
c00045f7:	f7 d8                	neg    eax
c00045f9:	21 c1                	and    ecx,eax
c00045fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00045fe:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004601:	29 ce                	sub    esi,ecx
c0004603:	eb 3c                	jmp    c0004641 <f_lseek+0xc6>
c0004605:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004608:	85 c0                	test   eax,eax
c000460a:	75 32                	jne    c000463e <f_lseek+0xc3>
c000460c:	31 d2                	xor    edx,edx
c000460e:	89 d8                	mov    eax,ebx
c0004610:	e8 05 ef ff ff       	call   c000351a <create_chain>
c0004615:	83 f8 01             	cmp    eax,0x1
c0004618:	75 0e                	jne    c0004628 <f_lseek+0xad>
c000461a:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000461e:	bd 02 00 00 00       	mov    ebp,0x2
c0004623:	e9 f9 00 00 00       	jmp    c0004721 <f_lseek+0x1a6>
c0004628:	83 f8 ff             	cmp    eax,0xffffffff
c000462b:	75 0e                	jne    c000463b <f_lseek+0xc0>
c000462d:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004631:	bd 01 00 00 00       	mov    ebp,0x1
c0004636:	e9 e6 00 00 00       	jmp    c0004721 <f_lseek+0x1a6>
c000463b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000463e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004641:	85 c0                	test   eax,eax
c0004643:	74 82                	je     c00045c7 <f_lseek+0x4c>
c0004645:	39 fe                	cmp    esi,edi
c0004647:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000464a:	76 3d                	jbe    c0004689 <f_lseek+0x10e>
c000464c:	01 fa                	add    edx,edi
c000464e:	29 fe                	sub    esi,edi
c0004650:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004654:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004657:	89 c2                	mov    edx,eax
c0004659:	74 0d                	je     c0004668 <f_lseek+0xed>
c000465b:	89 d8                	mov    eax,ebx
c000465d:	e8 b8 ee ff ff       	call   c000351a <create_chain>
c0004662:	85 c0                	test   eax,eax
c0004664:	75 09                	jne    c000466f <f_lseek+0xf4>
c0004666:	eb 1f                	jmp    c0004687 <f_lseek+0x10c>
c0004668:	8b 03                	mov    eax,DWORD PTR [ebx]
c000466a:	e8 de ec ff ff       	call   c000334d <get_fat.isra.2>
c000466f:	83 f8 ff             	cmp    eax,0xffffffff
c0004672:	74 b9                	je     c000462d <f_lseek+0xb2>
c0004674:	83 f8 01             	cmp    eax,0x1
c0004677:	76 a1                	jbe    c000461a <f_lseek+0x9f>
c0004679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000467d:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004680:	76 98                	jbe    c000461a <f_lseek+0x9f>
c0004682:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004685:	eb be                	jmp    c0004645 <f_lseek+0xca>
c0004687:	31 f6                	xor    esi,esi
c0004689:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000468c:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004692:	0f 84 2f ff ff ff    	je     c00045c7 <f_lseek+0x4c>
c0004698:	89 c2                	mov    edx,eax
c000469a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469e:	e8 be da ff ff       	call   c0002161 <clst2sect>
c00046a3:	85 c0                	test   eax,eax
c00046a5:	0f 84 6f ff ff ff    	je     c000461a <f_lseek+0x9f>
c00046ab:	c1 ee 09             	shr    esi,0x9
c00046ae:	01 c6                	add    esi,eax
c00046b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00046b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00046b6:	76 0c                	jbe    c00046c4 <f_lseek+0x149>
c00046b8:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00046bb:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046be:	83 ca 40             	or     edx,0x40
c00046c1:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00046c4:	a9 ff 01 00 00       	test   eax,0x1ff
c00046c9:	74 56                	je     c0004721 <f_lseek+0x1a6>
c00046cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00046ce:	39 f0                	cmp    eax,esi
c00046d0:	74 4f                	je     c0004721 <f_lseek+0x1a6>
c00046d2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00046d6:	8d 7b 28             	lea    edi,[ebx+0x28]
c00046d9:	74 26                	je     c0004701 <f_lseek+0x186>
c00046db:	6a 01                	push   0x1
c00046dd:	50                   	push   eax
c00046de:	57                   	push   edi
c00046df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046e3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046e7:	50                   	push   eax
c00046e8:	e8 e9 d7 ff ff       	call   c0001ed6 <disk_write>
c00046ed:	83 c4 10             	add    esp,0x10
c00046f0:	85 c0                	test   eax,eax
c00046f2:	0f 85 35 ff ff ff    	jne    c000462d <f_lseek+0xb2>
c00046f8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046fb:	83 e0 7f             	and    eax,0x7f
c00046fe:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004701:	6a 01                	push   0x1
c0004703:	56                   	push   esi
c0004704:	57                   	push   edi
c0004705:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004709:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000470d:	50                   	push   eax
c000470e:	e8 ad d7 ff ff       	call   c0001ec0 <disk_read>
c0004713:	83 c4 10             	add    esp,0x10
c0004716:	85 c0                	test   eax,eax
c0004718:	0f 85 0f ff ff ff    	jne    c000462d <f_lseek+0xb2>
c000471e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004721:	83 c4 2c             	add    esp,0x2c
c0004724:	89 e8                	mov    eax,ebp
c0004726:	5b                   	pop    ebx
c0004727:	5e                   	pop    esi
c0004728:	5f                   	pop    edi
c0004729:	5d                   	pop    ebp
c000472a:	c3                   	ret    

c000472b <f_opendir>:
c000472b:	56                   	push   esi
c000472c:	b8 09 00 00 00       	mov    eax,0x9
c0004731:	53                   	push   ebx
c0004732:	83 ec 24             	sub    esp,0x24
c0004735:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004739:	85 db                	test   ebx,ebx
c000473b:	0f 84 af 00 00 00    	je     c00047f0 <f_opendir+0xc5>
c0004741:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004745:	31 c9                	xor    ecx,ecx
c0004747:	8d 44 24 34          	lea    eax,[esp+0x34]
c000474b:	e8 7d de ff ff       	call   c00025cd <mount_volume>
c0004750:	85 c0                	test   eax,eax
c0004752:	0f 85 92 00 00 00    	jne    c00047ea <f_opendir+0xbf>
c0004758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475c:	83 ec 0c             	sub    esp,0xc
c000475f:	89 03                	mov    DWORD PTR [ebx],eax
c0004761:	68 00 02 00 00       	push   0x200
c0004766:	e8 e5 15 00 00       	call   c0005d50 <ff_memalloc>
c000476b:	83 c4 10             	add    esp,0x10
c000476e:	89 c6                	mov    esi,eax
c0004770:	b8 11 00 00 00       	mov    eax,0x11
c0004775:	85 f6                	test   esi,esi
c0004777:	74 77                	je     c00047f0 <f_opendir+0xc5>
c0004779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000477d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004781:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004784:	89 d8                	mov    eax,ebx
c0004786:	e8 8a f3 ff ff       	call   c0003b15 <follow_path>
c000478b:	85 c0                	test   eax,eax
c000478d:	75 37                	jne    c00047c6 <f_opendir+0x9b>
c000478f:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004793:	75 1c                	jne    c00047b1 <f_opendir+0x86>
c0004795:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004799:	b8 05 00 00 00       	mov    eax,0x5
c000479e:	74 26                	je     c00047c6 <f_opendir+0x9b>
c00047a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00047a7:	8a 00                	mov    al,BYTE PTR [eax]
c00047a9:	e8 4e eb ff ff       	call   c00032fc <ld_clust.isra.0>
c00047ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	31 d2                	xor    edx,edx
c00047b7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00047bb:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00047bf:	89 d8                	mov    eax,ebx
c00047c1:	e8 8c ec ff ff       	call   c0003452 <dir_sdi>
c00047c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047ca:	83 ec 0c             	sub    esp,0xc
c00047cd:	56                   	push   esi
c00047ce:	e8 95 15 00 00       	call   c0005d68 <ff_memfree>
c00047d3:	83 c4 10             	add    esp,0x10
c00047d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047da:	83 f8 04             	cmp    eax,0x4
c00047dd:	74 06                	je     c00047e5 <f_opendir+0xba>
c00047df:	85 c0                	test   eax,eax
c00047e1:	74 0d                	je     c00047f0 <f_opendir+0xc5>
c00047e3:	eb 05                	jmp    c00047ea <f_opendir+0xbf>
c00047e5:	b8 05 00 00 00       	mov    eax,0x5
c00047ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047f0:	83 c4 24             	add    esp,0x24
c00047f3:	5b                   	pop    ebx
c00047f4:	5e                   	pop    esi
c00047f5:	c3                   	ret    

c00047f6 <f_closedir>:
c00047f6:	53                   	push   ebx
c00047f7:	83 ec 18             	sub    esp,0x18
c00047fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047fe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004802:	89 d8                	mov    eax,ebx
c0004804:	e8 be db ff ff       	call   c00023c7 <validate>
c0004809:	85 c0                	test   eax,eax
c000480b:	75 06                	jne    c0004813 <f_closedir+0x1d>
c000480d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004813:	83 c4 18             	add    esp,0x18
c0004816:	5b                   	pop    ebx
c0004817:	c3                   	ret    

c0004818 <f_readdir>:
c0004818:	57                   	push   edi
c0004819:	56                   	push   esi
c000481a:	53                   	push   ebx
c000481b:	83 ec 20             	sub    esp,0x20
c000481e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004822:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004826:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000482a:	89 d8                	mov    eax,ebx
c000482c:	e8 96 db ff ff       	call   c00023c7 <validate>
c0004831:	85 c0                	test   eax,eax
c0004833:	75 6e                	jne    c00048a3 <f_readdir+0x8b>
c0004835:	85 ff                	test   edi,edi
c0004837:	75 0b                	jne    c0004844 <f_readdir+0x2c>
c0004839:	31 d2                	xor    edx,edx
c000483b:	89 d8                	mov    eax,ebx
c000483d:	e8 10 ec ff ff       	call   c0003452 <dir_sdi>
c0004842:	eb 5f                	jmp    c00048a3 <f_readdir+0x8b>
c0004844:	83 ec 0c             	sub    esp,0xc
c0004847:	68 00 02 00 00       	push   0x200
c000484c:	e8 ff 14 00 00       	call   c0005d50 <ff_memalloc>
c0004851:	83 c4 10             	add    esp,0x10
c0004854:	89 c6                	mov    esi,eax
c0004856:	b8 11 00 00 00       	mov    eax,0x11
c000485b:	85 f6                	test   esi,esi
c000485d:	74 44                	je     c00048a3 <f_readdir+0x8b>
c000485f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004863:	31 d2                	xor    edx,edx
c0004865:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004868:	89 d8                	mov    eax,ebx
c000486a:	e8 dd ef ff ff       	call   c000384c <dir_read>
c000486f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004874:	75 19                	jne    c000488f <f_readdir+0x77>
c0004876:	89 fa                	mov    edx,edi
c0004878:	89 d8                	mov    eax,ebx
c000487a:	e8 7c e8 ff ff       	call   c00030fb <get_fileinfo>
c000487f:	31 d2                	xor    edx,edx
c0004881:	89 d8                	mov    eax,ebx
c0004883:	e8 5a ee ff ff       	call   c00036e2 <dir_next>
c0004888:	83 f8 04             	cmp    eax,0x4
c000488b:	75 02                	jne    c000488f <f_readdir+0x77>
c000488d:	31 c0                	xor    eax,eax
c000488f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	56                   	push   esi
c0004897:	e8 cc 14 00 00       	call   c0005d68 <ff_memfree>
c000489c:	83 c4 10             	add    esp,0x10
c000489f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a3:	83 c4 20             	add    esp,0x20
c00048a6:	5b                   	pop    ebx
c00048a7:	5e                   	pop    esi
c00048a8:	5f                   	pop    edi
c00048a9:	c3                   	ret    

c00048aa <f_stat>:
c00048aa:	57                   	push   edi
c00048ab:	31 c9                	xor    ecx,ecx
c00048ad:	56                   	push   esi
c00048ae:	53                   	push   ebx
c00048af:	83 ec 30             	sub    esp,0x30
c00048b2:	8d 44 24 40          	lea    eax,[esp+0x40]
c00048b6:	89 e2                	mov    edx,esp
c00048b8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00048bc:	e8 0c dd ff ff       	call   c00025cd <mount_volume>
c00048c1:	85 c0                	test   eax,eax
c00048c3:	89 c3                	mov    ebx,eax
c00048c5:	75 59                	jne    c0004920 <f_stat+0x76>
c00048c7:	83 ec 0c             	sub    esp,0xc
c00048ca:	bb 11 00 00 00       	mov    ebx,0x11
c00048cf:	68 00 02 00 00       	push   0x200
c00048d4:	e8 77 14 00 00       	call   c0005d50 <ff_memalloc>
c00048d9:	83 c4 10             	add    esp,0x10
c00048dc:	85 c0                	test   eax,eax
c00048de:	89 c6                	mov    esi,eax
c00048e0:	74 3e                	je     c0004920 <f_stat+0x76>
c00048e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048e5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00048e9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048ec:	89 e0                	mov    eax,esp
c00048ee:	e8 22 f2 ff ff       	call   c0003b15 <follow_path>
c00048f3:	85 c0                	test   eax,eax
c00048f5:	89 c3                	mov    ebx,eax
c00048f7:	75 1b                	jne    c0004914 <f_stat+0x6a>
c00048f9:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00048fe:	75 0f                	jne    c000490f <f_stat+0x65>
c0004900:	85 ff                	test   edi,edi
c0004902:	74 10                	je     c0004914 <f_stat+0x6a>
c0004904:	89 fa                	mov    edx,edi
c0004906:	89 e0                	mov    eax,esp
c0004908:	e8 ee e7 ff ff       	call   c00030fb <get_fileinfo>
c000490d:	eb 05                	jmp    c0004914 <f_stat+0x6a>
c000490f:	bb 06 00 00 00       	mov    ebx,0x6
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	56                   	push   esi
c0004918:	e8 4b 14 00 00       	call   c0005d68 <ff_memfree>
c000491d:	83 c4 10             	add    esp,0x10
c0004920:	83 c4 30             	add    esp,0x30
c0004923:	89 d8                	mov    eax,ebx
c0004925:	5b                   	pop    ebx
c0004926:	5e                   	pop    esi
c0004927:	5f                   	pop    edi
c0004928:	c3                   	ret    

c0004929 <f_getfree>:
c0004929:	55                   	push   ebp
c000492a:	31 c9                	xor    ecx,ecx
c000492c:	57                   	push   edi
c000492d:	56                   	push   esi
c000492e:	53                   	push   ebx
c000492f:	83 ec 2c             	sub    esp,0x2c
c0004932:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004936:	8d 44 24 40          	lea    eax,[esp+0x40]
c000493a:	e8 8e dc ff ff       	call   c00025cd <mount_volume>
c000493f:	85 c0                	test   eax,eax
c0004941:	89 c6                	mov    esi,eax
c0004943:	0f 85 df 00 00 00    	jne    c0004a28 <f_getfree+0xff>
c0004949:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000494d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004951:	89 18                	mov    DWORD PTR [eax],ebx
c0004953:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004956:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004959:	8d 57 fe             	lea    edx,[edi-0x2]
c000495c:	39 d0                	cmp    eax,edx
c000495e:	77 0b                	ja     c000496b <f_getfree+0x42>
c0004960:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004964:	89 01                	mov    DWORD PTR [ecx],eax
c0004966:	e9 bd 00 00 00       	jmp    c0004a28 <f_getfree+0xff>
c000496b:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c000496e:	75 29                	jne    c0004999 <f_getfree+0x70>
c0004970:	bf 02 00 00 00       	mov    edi,0x2
c0004975:	31 ed                	xor    ebp,ebp
c0004977:	89 fa                	mov    edx,edi
c0004979:	89 d8                	mov    eax,ebx
c000497b:	e8 cd e9 ff ff       	call   c000334d <get_fat.isra.2>
c0004980:	83 f8 ff             	cmp    eax,0xffffffff
c0004983:	74 7d                	je     c0004a02 <f_getfree+0xd9>
c0004985:	83 f8 01             	cmp    eax,0x1
c0004988:	74 7f                	je     c0004a09 <f_getfree+0xe0>
c000498a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000498e:	83 d5 00             	adc    ebp,0x0
c0004991:	47                   	inc    edi
c0004992:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004995:	77 e0                	ja     c0004977 <f_getfree+0x4e>
c0004997:	eb 79                	jmp    c0004a12 <f_getfree+0xe9>
c0004999:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c000499c:	31 ed                	xor    ebp,ebp
c000499e:	31 db                	xor    ebx,ebx
c00049a0:	85 db                	test   ebx,ebx
c00049a2:	75 18                	jne    c00049bc <f_getfree+0x93>
c00049a4:	8d 42 01             	lea    eax,[edx+0x1]
c00049a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049af:	e8 bc da ff ff       	call   c0002470 <move_window>
c00049b4:	85 c0                	test   eax,eax
c00049b6:	75 58                	jne    c0004a10 <f_getfree+0xe7>
c00049b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00049c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00049c4:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00049c7:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00049cb:	75 13                	jne    c00049e0 <f_getfree+0xb7>
c00049cd:	e8 39 d5 ff ff       	call   c0001f0b <ld_word>
c00049d2:	0f b7 c0             	movzx  eax,ax
c00049d5:	83 f8 01             	cmp    eax,0x1
c00049d8:	83 d5 00             	adc    ebp,0x0
c00049db:	83 c3 02             	add    ebx,0x2
c00049de:	eb 13                	jmp    c00049f3 <f_getfree+0xca>
c00049e0:	e8 33 d5 ff ff       	call   c0001f18 <ld_dword>
c00049e5:	25 ff ff ff 0f       	and    eax,0xfffffff
c00049ea:	83 f8 01             	cmp    eax,0x1
c00049ed:	83 d5 00             	adc    ebp,0x0
c00049f0:	83 c3 04             	add    ebx,0x4
c00049f3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00049f9:	4f                   	dec    edi
c00049fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049fe:	75 a0                	jne    c00049a0 <f_getfree+0x77>
c0004a00:	eb 10                	jmp    c0004a12 <f_getfree+0xe9>
c0004a02:	be 01 00 00 00       	mov    esi,0x1
c0004a07:	eb 09                	jmp    c0004a12 <f_getfree+0xe9>
c0004a09:	be 02 00 00 00       	mov    esi,0x2
c0004a0e:	eb 02                	jmp    c0004a12 <f_getfree+0xe9>
c0004a10:	89 c6                	mov    esi,eax
c0004a12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004a16:	89 28                	mov    DWORD PTR [eax],ebp
c0004a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a1c:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004a1f:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004a22:	83 ca 01             	or     edx,0x1
c0004a25:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004a28:	83 c4 2c             	add    esp,0x2c
c0004a2b:	89 f0                	mov    eax,esi
c0004a2d:	5b                   	pop    ebx
c0004a2e:	5e                   	pop    esi
c0004a2f:	5f                   	pop    edi
c0004a30:	5d                   	pop    ebp
c0004a31:	c3                   	ret    

c0004a32 <f_truncate>:
c0004a32:	56                   	push   esi
c0004a33:	53                   	push   ebx
c0004a34:	83 ec 14             	sub    esp,0x14
c0004a37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a3b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a3f:	89 d8                	mov    eax,ebx
c0004a41:	e8 81 d9 ff ff       	call   c00023c7 <validate>
c0004a46:	85 c0                	test   eax,eax
c0004a48:	89 c6                	mov    esi,eax
c0004a4a:	0f 85 c4 00 00 00    	jne    c0004b14 <f_truncate+0xe2>
c0004a50:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004a54:	85 f6                	test   esi,esi
c0004a56:	0f 85 b8 00 00 00    	jne    c0004b14 <f_truncate+0xe2>
c0004a5c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004a60:	0f 84 a9 00 00 00    	je     c0004b0f <f_truncate+0xdd>
c0004a66:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a69:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004a6c:	0f 83 a2 00 00 00    	jae    c0004b14 <f_truncate+0xe2>
c0004a72:	85 c0                	test   eax,eax
c0004a74:	75 15                	jne    c0004a8b <f_truncate+0x59>
c0004a76:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a79:	31 c9                	xor    ecx,ecx
c0004a7b:	89 d8                	mov    eax,ebx
c0004a7d:	e8 d2 eb ff ff       	call   c0003654 <remove_chain>
c0004a82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a89:	eb 35                	jmp    c0004ac0 <f_truncate+0x8e>
c0004a8b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a90:	e8 b8 e8 ff ff       	call   c000334d <get_fat.isra.2>
c0004a95:	89 c2                	mov    edx,eax
c0004a97:	b8 01 00 00 00       	mov    eax,0x1
c0004a9c:	83 fa ff             	cmp    edx,0xffffffff
c0004a9f:	74 1f                	je     c0004ac0 <f_truncate+0x8e>
c0004aa1:	83 fa 01             	cmp    edx,0x1
c0004aa4:	b8 02 00 00 00       	mov    eax,0x2
c0004aa9:	74 15                	je     c0004ac0 <f_truncate+0x8e>
c0004aab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004aaf:	31 c0                	xor    eax,eax
c0004ab1:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004ab4:	76 0a                	jbe    c0004ac0 <f_truncate+0x8e>
c0004ab6:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ab9:	89 d8                	mov    eax,ebx
c0004abb:	e8 94 eb ff ff       	call   c0003654 <remove_chain>
c0004ac0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ac3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004ac6:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004ac9:	83 ca 40             	or     edx,0x40
c0004acc:	85 c0                	test   eax,eax
c0004ace:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004ad1:	75 35                	jne    c0004b08 <f_truncate+0xd6>
c0004ad3:	80 e2 80             	and    dl,0x80
c0004ad6:	74 3c                	je     c0004b14 <f_truncate+0xe2>
c0004ad8:	6a 01                	push   0x1
c0004ada:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004add:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ae0:	50                   	push   eax
c0004ae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ae5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004ae9:	50                   	push   eax
c0004aea:	e8 e7 d3 ff ff       	call   c0001ed6 <disk_write>
c0004aef:	83 c4 10             	add    esp,0x10
c0004af2:	85 c0                	test   eax,eax
c0004af4:	75 0d                	jne    c0004b03 <f_truncate+0xd1>
c0004af6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004af9:	31 f6                	xor    esi,esi
c0004afb:	83 e0 7f             	and    eax,0x7f
c0004afe:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004b01:	eb 11                	jmp    c0004b14 <f_truncate+0xe2>
c0004b03:	b8 01 00 00 00       	mov    eax,0x1
c0004b08:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004b0b:	89 c6                	mov    esi,eax
c0004b0d:	eb 05                	jmp    c0004b14 <f_truncate+0xe2>
c0004b0f:	be 07 00 00 00       	mov    esi,0x7
c0004b14:	83 c4 14             	add    esp,0x14
c0004b17:	89 f0                	mov    eax,esi
c0004b19:	5b                   	pop    ebx
c0004b1a:	5e                   	pop    esi
c0004b1b:	c3                   	ret    

c0004b1c <f_unlink>:
c0004b1c:	55                   	push   ebp
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	57                   	push   edi
c0004b23:	56                   	push   esi
c0004b24:	53                   	push   ebx
c0004b25:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b2f:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004b36:	e8 92 da ff ff       	call   c00025cd <mount_volume>
c0004b3b:	85 c0                	test   eax,eax
c0004b3d:	0f 85 ee 00 00 00    	jne    c0004c31 <f_unlink+0x115>
c0004b43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b47:	83 ec 0c             	sub    esp,0xc
c0004b4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 f8 11 00 00       	call   c0005d50 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c3                	mov    ebx,eax
c0004b5d:	b8 11 00 00 00       	mov    eax,0x11
c0004b62:	85 db                	test   ebx,ebx
c0004b64:	0f 84 c7 00 00 00    	je     c0004c31 <f_unlink+0x115>
c0004b6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6e:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b75:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b78:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b7c:	e8 94 ef ff ff       	call   c0003b15 <follow_path>
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 85 94 00 00 00    	jne    c0004c1d <f_unlink+0x101>
c0004b89:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b8e:	b8 06 00 00 00       	mov    eax,0x6
c0004b93:	0f 85 84 00 00 00    	jne    c0004c1d <f_unlink+0x101>
c0004b99:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004b9e:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004ba4:	74 07                	je     c0004bad <f_unlink+0x91>
c0004ba6:	b8 07 00 00 00       	mov    eax,0x7
c0004bab:	eb 70                	jmp    c0004c1d <f_unlink+0x101>
c0004bad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004bb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004bb5:	8a 07                	mov    al,BYTE PTR [edi]
c0004bb7:	e8 40 e7 ff ff       	call   c00032fc <ld_clust.isra.0>
c0004bbc:	83 e5 10             	and    ebp,0x10
c0004bbf:	89 c6                	mov    esi,eax
c0004bc1:	75 20                	jne    c0004be3 <f_unlink+0xc7>
c0004bc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bc7:	e8 a8 ed ff ff       	call   c0003974 <dir_remove>
c0004bcc:	85 c0                	test   eax,eax
c0004bce:	75 40                	jne    c0004c10 <f_unlink+0xf4>
c0004bd0:	85 f6                	test   esi,esi
c0004bd2:	74 3c                	je     c0004c10 <f_unlink+0xf4>
c0004bd4:	31 c9                	xor    ecx,ecx
c0004bd6:	89 f2                	mov    edx,esi
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 73 ea ff ff       	call   c0003654 <remove_chain>
c0004be1:	eb 2d                	jmp    c0004c10 <f_unlink+0xf4>
c0004be3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004be7:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004beb:	31 d2                	xor    edx,edx
c0004bed:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004bf1:	e8 5c e8 ff ff       	call   c0003452 <dir_sdi>
c0004bf6:	85 c0                	test   eax,eax
c0004bf8:	75 23                	jne    c0004c1d <f_unlink+0x101>
c0004bfa:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bfe:	31 d2                	xor    edx,edx
c0004c00:	e8 47 ec ff ff       	call   c000384c <dir_read>
c0004c05:	85 c0                	test   eax,eax
c0004c07:	74 9d                	je     c0004ba6 <f_unlink+0x8a>
c0004c09:	83 f8 04             	cmp    eax,0x4
c0004c0c:	75 0f                	jne    c0004c1d <f_unlink+0x101>
c0004c0e:	eb b3                	jmp    c0004bc3 <f_unlink+0xa7>
c0004c10:	85 c0                	test   eax,eax
c0004c12:	75 09                	jne    c0004c1d <f_unlink+0x101>
c0004c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c18:	e8 88 e2 ff ff       	call   c0002ea5 <sync_fs>
c0004c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c21:	83 ec 0c             	sub    esp,0xc
c0004c24:	53                   	push   ebx
c0004c25:	e8 3e 11 00 00       	call   c0005d68 <ff_memfree>
c0004c2a:	83 c4 10             	add    esp,0x10
c0004c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c31:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004c37:	5b                   	pop    ebx
c0004c38:	5e                   	pop    esi
c0004c39:	5f                   	pop    edi
c0004c3a:	5d                   	pop    ebp
c0004c3b:	c3                   	ret    

c0004c3c <f_mkdir>:
c0004c3c:	57                   	push   edi
c0004c3d:	b9 02 00 00 00       	mov    ecx,0x2
c0004c42:	56                   	push   esi
c0004c43:	53                   	push   ebx
c0004c44:	83 ec 50             	sub    esp,0x50
c0004c47:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c4b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c4f:	e8 79 d9 ff ff       	call   c00025cd <mount_volume>
c0004c54:	85 c0                	test   eax,eax
c0004c56:	89 c3                	mov    ebx,eax
c0004c58:	0f 85 70 01 00 00    	jne    c0004dce <f_mkdir+0x192>
c0004c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c62:	83 ec 0c             	sub    esp,0xc
c0004c65:	bb 11 00 00 00       	mov    ebx,0x11
c0004c6a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c6e:	68 00 02 00 00       	push   0x200
c0004c73:	e8 d8 10 00 00       	call   c0005d50 <ff_memalloc>
c0004c78:	83 c4 10             	add    esp,0x10
c0004c7b:	85 c0                	test   eax,eax
c0004c7d:	89 c7                	mov    edi,eax
c0004c7f:	0f 84 49 01 00 00    	je     c0004dce <f_mkdir+0x192>
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c8d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c94:	e8 7c ee ff ff       	call   c0003b15 <follow_path>
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	89 c3                	mov    ebx,eax
c0004c9d:	74 3e                	je     c0004cdd <f_mkdir+0xa1>
c0004c9f:	83 f8 04             	cmp    eax,0x4
c0004ca2:	75 3e                	jne    c0004ce2 <f_mkdir+0xa6>
c0004ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca8:	31 d2                	xor    edx,edx
c0004caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004cae:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004cb2:	e8 63 e8 ff ff       	call   c000351a <create_chain>
c0004cb7:	85 c0                	test   eax,eax
c0004cb9:	89 c6                	mov    esi,eax
c0004cbb:	74 0c                	je     c0004cc9 <f_mkdir+0x8d>
c0004cbd:	83 f8 01             	cmp    eax,0x1
c0004cc0:	bb 02 00 00 00       	mov    ebx,0x2
c0004cc5:	74 07                	je     c0004cce <f_mkdir+0x92>
c0004cc7:	eb 2a                	jmp    c0004cf3 <f_mkdir+0xb7>
c0004cc9:	bb 07 00 00 00       	mov    ebx,0x7
c0004cce:	31 c9                	xor    ecx,ecx
c0004cd0:	89 f2                	mov    edx,esi
c0004cd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004cd6:	e8 79 e9 ff ff       	call   c0003654 <remove_chain>
c0004cdb:	eb 05                	jmp    c0004ce2 <f_mkdir+0xa6>
c0004cdd:	bb 08 00 00 00       	mov    ebx,0x8
c0004ce2:	83 ec 0c             	sub    esp,0xc
c0004ce5:	57                   	push   edi
c0004ce6:	e8 7d 10 00 00       	call   c0005d68 <ff_memfree>
c0004ceb:	83 c4 10             	add    esp,0x10
c0004cee:	e9 db 00 00 00       	jmp    c0004dce <f_mkdir+0x192>
c0004cf3:	83 f8 ff             	cmp    eax,0xffffffff
c0004cf6:	bb 01 00 00 00       	mov    ebx,0x1
c0004cfb:	74 d1                	je     c0004cce <f_mkdir+0x92>
c0004cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d01:	89 f2                	mov    edx,esi
c0004d03:	e8 19 dd ff ff       	call   c0002a21 <dir_clear>
c0004d08:	85 c0                	test   eax,eax
c0004d0a:	89 c3                	mov    ebx,eax
c0004d0c:	75 c0                	jne    c0004cce <f_mkdir+0x92>
c0004d0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0004d17:	ba 20 00 00 00       	mov    edx,0x20
c0004d1c:	83 c0 34             	add    eax,0x34
c0004d1f:	e8 28 d2 ff ff       	call   c0001f4c <mem_set>
c0004d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d28:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d2d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004d31:	83 c0 4a             	add    eax,0x4a
c0004d34:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004d38:	e8 f7 d1 ff ff       	call   c0001f34 <st_dword>
c0004d3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d41:	89 f1                	mov    ecx,esi
c0004d43:	8d 50 34             	lea    edx,[eax+0x34]
c0004d46:	e8 da e5 ff ff       	call   c0003325 <st_clust.isra.1>
c0004d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d4f:	b9 20 00 00 00       	mov    ecx,0x20
c0004d54:	8d 50 34             	lea    edx,[eax+0x34]
c0004d57:	83 c0 54             	add    eax,0x54
c0004d5a:	e8 d8 d1 ff ff       	call   c0001f37 <mem_cpy>
c0004d5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004d67:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004d6b:	8d 50 54             	lea    edx,[eax+0x54]
c0004d6e:	e8 b2 e5 ff ff       	call   c0003325 <st_clust.isra.1>
c0004d73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d77:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d7b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d7f:	e8 2e ee ff ff       	call   c0003bb2 <dir_register>
c0004d84:	85 c0                	test   eax,eax
c0004d86:	89 c3                	mov    ebx,eax
c0004d88:	0f 85 40 ff ff ff    	jne    c0004cce <f_mkdir+0x92>
c0004d8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d92:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d97:	83 c0 16             	add    eax,0x16
c0004d9a:	e8 95 d1 ff ff       	call   c0001f34 <st_dword>
c0004d9f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004da3:	89 f1                	mov    ecx,esi
c0004da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004da9:	e8 77 e5 ff ff       	call   c0003325 <st_clust.isra.1>
c0004dae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004db2:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dba:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dc2:	e8 de e0 ff ff       	call   c0002ea5 <sync_fs>
c0004dc7:	89 c3                	mov    ebx,eax
c0004dc9:	e9 14 ff ff ff       	jmp    c0004ce2 <f_mkdir+0xa6>
c0004dce:	83 c4 50             	add    esp,0x50
c0004dd1:	89 d8                	mov    eax,ebx
c0004dd3:	5b                   	pop    ebx
c0004dd4:	5e                   	pop    esi
c0004dd5:	5f                   	pop    edi
c0004dd6:	c3                   	ret    

c0004dd7 <f_rename>:
c0004dd7:	57                   	push   edi
c0004dd8:	56                   	push   esi
c0004dd9:	53                   	push   ebx
c0004dda:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004de0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004de7:	e8 8f d5 ff ff       	call   c000237b <get_ldnumber>
c0004dec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004df0:	b9 02 00 00 00       	mov    ecx,0x2
c0004df5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004dfc:	e8 cc d7 ff ff       	call   c00025cd <mount_volume>
c0004e01:	85 c0                	test   eax,eax
c0004e03:	0f 85 7c 01 00 00    	jne    c0004f85 <f_rename+0x1ae>
c0004e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e0d:	83 ec 0c             	sub    esp,0xc
c0004e10:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004e14:	68 00 02 00 00       	push   0x200
c0004e19:	e8 32 0f 00 00       	call   c0005d50 <ff_memalloc>
c0004e1e:	83 c4 10             	add    esp,0x10
c0004e21:	89 c6                	mov    esi,eax
c0004e23:	b8 11 00 00 00       	mov    eax,0x11
c0004e28:	85 f6                	test   esi,esi
c0004e2a:	0f 84 55 01 00 00    	je     c0004f85 <f_rename+0x1ae>
c0004e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e34:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004e3b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e3e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e42:	e8 ce ec ff ff       	call   c0003b15 <follow_path>
c0004e47:	85 c0                	test   eax,eax
c0004e49:	0f 85 22 01 00 00    	jne    c0004f71 <f_rename+0x19a>
c0004e4f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004e53:	b8 06 00 00 00       	mov    eax,0x6
c0004e58:	80 e2 a0             	and    dl,0xa0
c0004e5b:	0f 85 10 01 00 00    	jne    c0004f71 <f_rename+0x19a>
c0004e61:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e65:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e69:	b9 20 00 00 00       	mov    ecx,0x20
c0004e6e:	e8 c4 d0 ff ff       	call   c0001f37 <mem_cpy>
c0004e73:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e77:	b9 30 00 00 00       	mov    ecx,0x30
c0004e7c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e80:	e8 b2 d0 ff ff       	call   c0001f37 <mem_cpy>
c0004e85:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e8c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e90:	e8 80 ec ff ff       	call   c0003b15 <follow_path>
c0004e95:	85 c0                	test   eax,eax
c0004e97:	75 20                	jne    c0004eb9 <f_rename+0xe2>
c0004e99:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004e9d:	b8 08 00 00 00       	mov    eax,0x8
c0004ea2:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004ea6:	0f 85 c5 00 00 00    	jne    c0004f71 <f_rename+0x19a>
c0004eac:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004eb0:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004eb7:	eb 03                	jmp    c0004ebc <f_rename+0xe5>
c0004eb9:	83 f8 04             	cmp    eax,0x4
c0004ebc:	0f 85 af 00 00 00    	jne    c0004f71 <f_rename+0x19a>
c0004ec2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004ec6:	e8 e7 ec ff ff       	call   c0003bb2 <dir_register>
c0004ecb:	85 c0                	test   eax,eax
c0004ecd:	0f 85 9e 00 00 00    	jne    c0004f71 <f_rename+0x19a>
c0004ed3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004eda:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004ede:	b9 13 00 00 00       	mov    ecx,0x13
c0004ee3:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004ee6:	e8 4c d0 ff ff       	call   c0001f37 <mem_cpy>
c0004eeb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004eef:	a8 10                	test   al,0x10
c0004ef1:	75 03                	jne    c0004ef6 <f_rename+0x11f>
c0004ef3:	83 c8 20             	or     eax,0x20
c0004ef6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f01:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004f05:	74 54                	je     c0004f5b <f_rename+0x184>
c0004f07:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004f0b:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004f0f:	74 4a                	je     c0004f5b <f_rename+0x184>
c0004f11:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004f15:	89 da                	mov    edx,ebx
c0004f17:	8a 07                	mov    al,BYTE PTR [edi]
c0004f19:	e8 de e3 ff ff       	call   c00032fc <ld_clust.isra.0>
c0004f1e:	89 c2                	mov    edx,eax
c0004f20:	89 f8                	mov    eax,edi
c0004f22:	e8 3a d2 ff ff       	call   c0002161 <clst2sect>
c0004f27:	89 c2                	mov    edx,eax
c0004f29:	b8 02 00 00 00       	mov    eax,0x2
c0004f2e:	85 d2                	test   edx,edx
c0004f30:	74 3f                	je     c0004f71 <f_rename+0x19a>
c0004f32:	89 f8                	mov    eax,edi
c0004f34:	e8 37 d5 ff ff       	call   c0002470 <move_window>
c0004f39:	85 c0                	test   eax,eax
c0004f3b:	75 34                	jne    c0004f71 <f_rename+0x19a>
c0004f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f41:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004f45:	75 14                	jne    c0004f5b <f_rename+0x184>
c0004f47:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004f4b:	8d 50 54             	lea    edx,[eax+0x54]
c0004f4e:	e8 d2 e3 ff ff       	call   c0003325 <st_clust.isra.1>
c0004f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f5b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f5f:	e8 10 ea ff ff       	call   c0003974 <dir_remove>
c0004f64:	85 c0                	test   eax,eax
c0004f66:	75 09                	jne    c0004f71 <f_rename+0x19a>
c0004f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6c:	e8 34 df ff ff       	call   c0002ea5 <sync_fs>
c0004f71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f75:	83 ec 0c             	sub    esp,0xc
c0004f78:	56                   	push   esi
c0004f79:	e8 ea 0d 00 00       	call   c0005d68 <ff_memfree>
c0004f7e:	83 c4 10             	add    esp,0x10
c0004f81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f85:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f8b:	5b                   	pop    ebx
c0004f8c:	5e                   	pop    esi
c0004f8d:	5f                   	pop    edi
c0004f8e:	c3                   	ret    

c0004f8f <f_chmod>:
c0004f8f:	57                   	push   edi
c0004f90:	b9 02 00 00 00       	mov    ecx,0x2
c0004f95:	56                   	push   esi
c0004f96:	53                   	push   ebx
c0004f97:	83 ec 50             	sub    esp,0x50
c0004f9a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f9e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004fa2:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa6:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004faa:	e8 1e d6 ff ff       	call   c00025cd <mount_volume>
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	0f 85 81 00 00 00    	jne    c0005038 <f_chmod+0xa9>
c0004fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fbb:	83 ec 0c             	sub    esp,0xc
c0004fbe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004fc2:	68 00 02 00 00       	push   0x200
c0004fc7:	e8 84 0d 00 00       	call   c0005d50 <ff_memalloc>
c0004fcc:	83 c4 10             	add    esp,0x10
c0004fcf:	89 c6                	mov    esi,eax
c0004fd1:	b8 11 00 00 00       	mov    eax,0x11
c0004fd6:	85 f6                	test   esi,esi
c0004fd8:	74 5e                	je     c0005038 <f_chmod+0xa9>
c0004fda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fde:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004fe2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004fe5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fe9:	e8 27 eb ff ff       	call   c0003b15 <follow_path>
c0004fee:	85 c0                	test   eax,eax
c0004ff0:	75 32                	jne    c0005024 <f_chmod+0x95>
c0004ff2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ff6:	b8 06 00 00 00       	mov    eax,0x6
c0004ffb:	80 e2 a0             	and    dl,0xa0
c0004ffe:	75 24                	jne    c0005024 <f_chmod+0x95>
c0005000:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005004:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005007:	31 d7                	xor    edi,edx
c0005009:	21 fb                	and    ebx,edi
c000500b:	83 e3 27             	and    ebx,0x27
c000500e:	31 d3                	xor    ebx,edx
c0005010:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0005013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005017:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000501b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000501f:	e8 81 de ff ff       	call   c0002ea5 <sync_fs>
c0005024:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005028:	83 ec 0c             	sub    esp,0xc
c000502b:	56                   	push   esi
c000502c:	e8 37 0d 00 00       	call   c0005d68 <ff_memfree>
c0005031:	83 c4 10             	add    esp,0x10
c0005034:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005038:	83 c4 50             	add    esp,0x50
c000503b:	5b                   	pop    ebx
c000503c:	5e                   	pop    esi
c000503d:	5f                   	pop    edi
c000503e:	c3                   	ret    

c000503f <f_utime>:
c000503f:	56                   	push   esi
c0005040:	b9 02 00 00 00       	mov    ecx,0x2
c0005045:	53                   	push   ebx
c0005046:	83 ec 54             	sub    esp,0x54
c0005049:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000504d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005051:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005055:	e8 73 d5 ff ff       	call   c00025cd <mount_volume>
c000505a:	85 c0                	test   eax,eax
c000505c:	0f 85 87 00 00 00    	jne    c00050e9 <f_utime+0xaa>
c0005062:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005066:	83 ec 0c             	sub    esp,0xc
c0005069:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000506d:	68 00 02 00 00       	push   0x200
c0005072:	e8 d9 0c 00 00       	call   c0005d50 <ff_memalloc>
c0005077:	83 c4 10             	add    esp,0x10
c000507a:	89 c3                	mov    ebx,eax
c000507c:	b8 11 00 00 00       	mov    eax,0x11
c0005081:	85 db                	test   ebx,ebx
c0005083:	74 64                	je     c00050e9 <f_utime+0xaa>
c0005085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005089:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000508d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005090:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005094:	e8 7c ea ff ff       	call   c0003b15 <follow_path>
c0005099:	85 c0                	test   eax,eax
c000509b:	75 38                	jne    c00050d5 <f_utime+0x96>
c000509d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050a1:	b8 06 00 00 00       	mov    eax,0x6
c00050a6:	80 e2 a0             	and    dl,0xa0
c00050a9:	75 2a                	jne    c00050d5 <f_utime+0x96>
c00050ab:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00050af:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00050b3:	c1 e2 10             	shl    edx,0x10
c00050b6:	09 c2                	or     edx,eax
c00050b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bc:	83 c0 16             	add    eax,0x16
c00050bf:	e8 70 ce ff ff       	call   c0001f34 <st_dword>
c00050c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d0:	e8 d0 dd ff ff       	call   c0002ea5 <sync_fs>
c00050d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050d9:	83 ec 0c             	sub    esp,0xc
c00050dc:	53                   	push   ebx
c00050dd:	e8 86 0c 00 00       	call   c0005d68 <ff_memfree>
c00050e2:	83 c4 10             	add    esp,0x10
c00050e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050e9:	83 c4 54             	add    esp,0x54
c00050ec:	5b                   	pop    ebx
c00050ed:	5e                   	pop    esi
c00050ee:	c3                   	ret    

c00050ef <f_getlabel>:
c00050ef:	55                   	push   ebp
c00050f0:	31 c9                	xor    ecx,ecx
c00050f2:	57                   	push   edi
c00050f3:	56                   	push   esi
c00050f4:	53                   	push   ebx
c00050f5:	83 ec 5c             	sub    esp,0x5c
c00050f8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050fc:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005100:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005104:	e8 c4 d4 ff ff       	call   c00025cd <mount_volume>
c0005109:	85 c0                	test   eax,eax
c000510b:	89 c3                	mov    ebx,eax
c000510d:	0f 85 d9 00 00 00    	jne    c00051ec <f_getlabel+0xfd>
c0005113:	85 ff                	test   edi,edi
c0005115:	0f 84 d1 00 00 00    	je     c00051ec <f_getlabel+0xfd>
c000511b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005127:	31 d2                	xor    edx,edx
c0005129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000512d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005131:	e8 1c e3 ff ff       	call   c0003452 <dir_sdi>
c0005136:	85 c0                	test   eax,eax
c0005138:	89 c3                	mov    ebx,eax
c000513a:	0f 85 a2 00 00 00    	jne    c00051e2 <f_getlabel+0xf3>
c0005140:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005144:	ba 01 00 00 00       	mov    edx,0x1
c0005149:	e8 fe e6 ff ff       	call   c000384c <dir_read>
c000514e:	85 c0                	test   eax,eax
c0005150:	89 c3                	mov    ebx,eax
c0005152:	0f 85 8a 00 00 00    	jne    c00051e2 <f_getlabel+0xf3>
c0005158:	31 f6                	xor    esi,esi
c000515a:	31 d2                	xor    edx,edx
c000515c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005160:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005167:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000516b:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005170:	89 c8                	mov    eax,ecx
c0005172:	e8 13 ce ff ff       	call   c0001f8a <dbc_1st>
c0005177:	85 c0                	test   eax,eax
c0005179:	74 19                	je     c0005194 <f_getlabel+0xa5>
c000517b:	83 fd 0b             	cmp    ebp,0xb
c000517e:	74 14                	je     c0005194 <f_getlabel+0xa5>
c0005180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005184:	c1 e1 08             	shl    ecx,0x8
c0005187:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000518b:	8d 6a 02             	lea    ebp,[edx+0x2]
c000518e:	09 c1                	or     ecx,eax
c0005190:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005194:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0005199:	52                   	push   edx
c000519a:	52                   	push   edx
c000519b:	68 b5 01 00 00       	push   0x1b5
c00051a0:	50                   	push   eax
c00051a1:	e8 76 0c 00 00       	call   c0005e1c <ff_oem2uni>
c00051a6:	83 c4 10             	add    esp,0x10
c00051a9:	0f b7 c0             	movzx  eax,ax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	74 1f                	je     c00051cf <f_getlabel+0xe0>
c00051b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00051b3:	b9 04 00 00 00       	mov    ecx,0x4
c00051b8:	e8 ab ce ff ff       	call   c0002068 <put_utf>
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	85 c0                	test   eax,eax
c00051c2:	74 0b                	je     c00051cf <f_getlabel+0xe0>
c00051c4:	01 c6                	add    esi,eax
c00051c6:	83 fd 0b             	cmp    ebp,0xb
c00051c9:	74 06                	je     c00051d1 <f_getlabel+0xe2>
c00051cb:	89 ea                	mov    edx,ebp
c00051cd:	eb 8d                	jmp    c000515c <f_getlabel+0x6d>
c00051cf:	31 f6                	xor    esi,esi
c00051d1:	01 fe                	add    esi,edi
c00051d3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00051d6:	39 f7                	cmp    edi,esi
c00051d8:	74 12                	je     c00051ec <f_getlabel+0xfd>
c00051da:	4e                   	dec    esi
c00051db:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00051de:	74 f3                	je     c00051d3 <f_getlabel+0xe4>
c00051e0:	eb 0a                	jmp    c00051ec <f_getlabel+0xfd>
c00051e2:	83 fb 04             	cmp    ebx,0x4
c00051e5:	75 05                	jne    c00051ec <f_getlabel+0xfd>
c00051e7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00051ea:	31 db                	xor    ebx,ebx
c00051ec:	85 db                	test   ebx,ebx
c00051ee:	75 49                	jne    c0005239 <f_getlabel+0x14a>
c00051f0:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00051f5:	74 42                	je     c0005239 <f_getlabel+0x14a>
c00051f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00051fe:	e8 6d d2 ff ff       	call   c0002470 <move_window>
c0005203:	85 c0                	test   eax,eax
c0005205:	89 c3                	mov    ebx,eax
c0005207:	75 30                	jne    c0005239 <f_getlabel+0x14a>
c0005209:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000520d:	b8 43 00 00 00       	mov    eax,0x43
c0005212:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005215:	83 f9 03             	cmp    ecx,0x3
c0005218:	74 10                	je     c000522a <f_getlabel+0x13b>
c000521a:	83 f9 04             	cmp    ecx,0x4
c000521d:	b8 64 00 00 00       	mov    eax,0x64
c0005222:	b9 27 00 00 00       	mov    ecx,0x27
c0005227:	0f 45 c1             	cmovne eax,ecx
c000522a:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c000522e:	e8 e5 cc ff ff       	call   c0001f18 <ld_dword>
c0005233:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005237:	89 07                	mov    DWORD PTR [edi],eax
c0005239:	83 c4 5c             	add    esp,0x5c
c000523c:	89 d8                	mov    eax,ebx
c000523e:	5b                   	pop    ebx
c000523f:	5e                   	pop    esi
c0005240:	5f                   	pop    edi
c0005241:	5d                   	pop    ebp
c0005242:	c3                   	ret    

c0005243 <f_setlabel>:
c0005243:	57                   	push   edi
c0005244:	b9 02 00 00 00       	mov    ecx,0x2
c0005249:	56                   	push   esi
c000524a:	53                   	push   ebx
c000524b:	83 ec 50             	sub    esp,0x50
c000524e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005252:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005256:	e8 72 d3 ff ff       	call   c00025cd <mount_volume>
c000525b:	85 c0                	test   eax,eax
c000525d:	89 c6                	mov    esi,eax
c000525f:	0f 85 65 01 00 00    	jne    c00053ca <f_setlabel+0x187>
c0005265:	b9 0b 00 00 00       	mov    ecx,0xb
c000526a:	ba 20 00 00 00       	mov    edx,0x20
c000526f:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005273:	31 db                	xor    ebx,ebx
c0005275:	e8 d2 cc ff ff       	call   c0001f4c <mem_set>
c000527a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000527e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005281:	76 5d                	jbe    c00052e0 <f_setlabel+0x9d>
c0005283:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005287:	e8 04 cd ff ff       	call   c0001f90 <tchar2uni>
c000528c:	3d ff ff 00 00       	cmp    eax,0xffff
c0005291:	76 0a                	jbe    c000529d <f_setlabel+0x5a>
c0005293:	be 06 00 00 00       	mov    esi,0x6
c0005298:	e9 2d 01 00 00       	jmp    c00053ca <f_setlabel+0x187>
c000529d:	83 ec 0c             	sub    esp,0xc
c00052a0:	50                   	push   eax
c00052a1:	e8 ee 0b 00 00       	call   c0005e94 <ff_wtoupper>
c00052a6:	5a                   	pop    edx
c00052a7:	59                   	pop    ecx
c00052a8:	68 b5 01 00 00       	push   0x1b5
c00052ad:	50                   	push   eax
c00052ae:	e8 cd 0a 00 00       	call   c0005d80 <ff_uni2oem>
c00052b3:	83 c4 10             	add    esp,0x10
c00052b6:	0f b7 f0             	movzx  esi,ax
c00052b9:	85 f6                	test   esi,esi
c00052bb:	89 f7                	mov    edi,esi
c00052bd:	74 d4                	je     c0005293 <f_setlabel+0x50>
c00052bf:	89 f2                	mov    edx,esi
c00052c1:	b8 70 f4 02 c0       	mov    eax,0xc002f470
c00052c6:	e8 ae cc ff ff       	call   c0001f79 <chk_chr>
c00052cb:	85 c0                	test   eax,eax
c00052cd:	75 c4                	jne    c0005293 <f_setlabel+0x50>
c00052cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00052d5:	0f 87 c9 00 00 00    	ja     c00053a4 <f_setlabel+0x161>
c00052db:	e9 e0 00 00 00       	jmp    c00053c0 <f_setlabel+0x17d>
c00052e0:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00052e5:	74 ac                	je     c0005293 <f_setlabel+0x50>
c00052e7:	85 db                	test   ebx,ebx
c00052e9:	74 0e                	je     c00052f9 <f_setlabel+0xb6>
c00052eb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00052f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00052f3:	75 04                	jne    c00052f9 <f_setlabel+0xb6>
c00052f5:	89 c3                	mov    ebx,eax
c00052f7:	eb ee                	jmp    c00052e7 <f_setlabel+0xa4>
c00052f9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005305:	31 d2                	xor    edx,edx
c0005307:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000530b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000530f:	e8 3e e1 ff ff       	call   c0003452 <dir_sdi>
c0005314:	85 c0                	test   eax,eax
c0005316:	89 c6                	mov    esi,eax
c0005318:	0f 85 ac 00 00 00    	jne    c00053ca <f_setlabel+0x187>
c000531e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005322:	ba 01 00 00 00       	mov    edx,0x1
c0005327:	e8 20 e5 ff ff       	call   c000384c <dir_read>
c000532c:	85 c0                	test   eax,eax
c000532e:	75 18                	jne    c0005348 <f_setlabel+0x105>
c0005330:	85 db                	test   ebx,ebx
c0005332:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005336:	74 0b                	je     c0005343 <f_setlabel+0x100>
c0005338:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000533c:	b9 0b 00 00 00       	mov    ecx,0xb
c0005341:	eb 47                	jmp    c000538a <f_setlabel+0x147>
c0005343:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005346:	eb 47                	jmp    c000538f <f_setlabel+0x14c>
c0005348:	83 f8 04             	cmp    eax,0x4
c000534b:	75 53                	jne    c00053a0 <f_setlabel+0x15d>
c000534d:	85 db                	test   ebx,ebx
c000534f:	74 79                	je     c00053ca <f_setlabel+0x187>
c0005351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005355:	ba 01 00 00 00       	mov    edx,0x1
c000535a:	e8 88 e4 ff ff       	call   c00037e7 <dir_alloc>
c000535f:	85 c0                	test   eax,eax
c0005361:	89 c6                	mov    esi,eax
c0005363:	75 65                	jne    c00053ca <f_setlabel+0x187>
c0005365:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005369:	b9 20 00 00 00       	mov    ecx,0x20
c000536e:	31 d2                	xor    edx,edx
c0005370:	e8 d7 cb ff ff       	call   c0001f4c <mem_set>
c0005375:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005379:	b9 0b 00 00 00       	mov    ecx,0xb
c000537e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005382:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005386:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000538a:	e8 a8 cb ff ff       	call   c0001f37 <mem_cpy>
c000538f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005393:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000539b:	e8 05 db ff ff       	call   c0002ea5 <sync_fs>
c00053a0:	89 c6                	mov    esi,eax
c00053a2:	eb 26                	jmp    c00053ca <f_setlabel+0x187>
c00053a4:	83 fb 09             	cmp    ebx,0x9
c00053a7:	0f 87 e6 fe ff ff    	ja     c0005293 <f_setlabel+0x50>
c00053ad:	89 f0                	mov    eax,esi
c00053af:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00053b3:	43                   	inc    ebx
c00053b4:	89 f8                	mov    eax,edi
c00053b6:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00053ba:	43                   	inc    ebx
c00053bb:	e9 ba fe ff ff       	jmp    c000527a <f_setlabel+0x37>
c00053c0:	83 fb 0a             	cmp    ebx,0xa
c00053c3:	76 ef                	jbe    c00053b4 <f_setlabel+0x171>
c00053c5:	e9 c9 fe ff ff       	jmp    c0005293 <f_setlabel+0x50>
c00053ca:	83 c4 50             	add    esp,0x50
c00053cd:	89 f0                	mov    eax,esi
c00053cf:	5b                   	pop    ebx
c00053d0:	5e                   	pop    esi
c00053d1:	5f                   	pop    edi
c00053d2:	c3                   	ret    

c00053d3 <f_expand>:
c00053d3:	55                   	push   ebp
c00053d4:	57                   	push   edi
c00053d5:	56                   	push   esi
c00053d6:	53                   	push   ebx
c00053d7:	83 ec 2c             	sub    esp,0x2c
c00053da:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053ea:	89 d8                	mov    eax,ebx
c00053ec:	e8 d6 cf ff ff       	call   c00023c7 <validate>
c00053f1:	85 c0                	test   eax,eax
c00053f3:	89 c6                	mov    esi,eax
c00053f5:	0f 85 3b 01 00 00    	jne    c0005536 <f_expand+0x163>
c00053fb:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00053ff:	85 f6                	test   esi,esi
c0005401:	0f 85 2f 01 00 00    	jne    c0005536 <f_expand+0x163>
c0005407:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000540c:	75 0a                	jne    c0005418 <f_expand+0x45>
c000540e:	be 07 00 00 00       	mov    esi,0x7
c0005413:	e9 1e 01 00 00       	jmp    c0005536 <f_expand+0x163>
c0005418:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000541c:	75 f0                	jne    c000540e <f_expand+0x3b>
c000541e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005422:	74 ea                	je     c000540e <f_expand+0x3b>
c0005424:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005428:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c000542c:	c1 e7 09             	shl    edi,0x9
c000542f:	8d 47 ff             	lea    eax,[edi-0x1]
c0005432:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005436:	0f 95 c0             	setne  al
c0005439:	31 d2                	xor    edx,edx
c000543b:	0f b6 c0             	movzx  eax,al
c000543e:	89 c5                	mov    ebp,eax
c0005440:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005444:	f7 f7                	div    edi
c0005446:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005449:	01 e8                	add    eax,ebp
c000544b:	83 ff 01             	cmp    edi,0x1
c000544e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005452:	76 05                	jbe    c0005459 <f_expand+0x86>
c0005454:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c0005457:	77 05                	ja     c000545e <f_expand+0x8b>
c0005459:	bf 02 00 00 00       	mov    edi,0x2
c000545e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005461:	89 fd                	mov    ebp,edi
c0005463:	31 c9                	xor    ecx,ecx
c0005465:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005469:	8b 03                	mov    eax,DWORD PTR [ebx]
c000546b:	89 ea                	mov    edx,ebp
c000546d:	45                   	inc    ebp
c000546e:	e8 da de ff ff       	call   c000334d <get_fat.isra.2>
c0005473:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000547b:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000547e:	77 05                	ja     c0005485 <f_expand+0xb2>
c0005480:	bd 02 00 00 00       	mov    ebp,0x2
c0005485:	83 f8 01             	cmp    eax,0x1
c0005488:	74 20                	je     c00054aa <f_expand+0xd7>
c000548a:	83 f8 ff             	cmp    eax,0xffffffff
c000548d:	74 25                	je     c00054b4 <f_expand+0xe1>
c000548f:	85 c0                	test   eax,eax
c0005491:	75 09                	jne    c000549c <f_expand+0xc9>
c0005493:	41                   	inc    ecx
c0005494:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005498:	75 07                	jne    c00054a1 <f_expand+0xce>
c000549a:	eb 1f                	jmp    c00054bb <f_expand+0xe8>
c000549c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000549f:	31 c9                	xor    ecx,ecx
c00054a1:	39 fd                	cmp    ebp,edi
c00054a3:	75 c0                	jne    c0005465 <f_expand+0x92>
c00054a5:	e9 64 ff ff ff       	jmp    c000540e <f_expand+0x3b>
c00054aa:	be 02 00 00 00       	mov    esi,0x2
c00054af:	e9 82 00 00 00       	jmp    c0005536 <f_expand+0x163>
c00054b4:	be 01 00 00 00       	mov    esi,0x1
c00054b9:	eb 7b                	jmp    c0005536 <f_expand+0x163>
c00054bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054c0:	74 2b                	je     c00054ed <f_expand+0x11a>
c00054c2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00054c5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00054c9:	85 ed                	test   ebp,ebp
c00054cb:	74 24                	je     c00054f1 <f_expand+0x11e>
c00054cd:	83 c9 ff             	or     ecx,0xffffffff
c00054d0:	83 fd 01             	cmp    ebp,0x1
c00054d3:	74 03                	je     c00054d8 <f_expand+0x105>
c00054d5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00054d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054dc:	89 fa                	mov    edx,edi
c00054de:	e8 e7 d3 ff ff       	call   c00028ca <put_fat>
c00054e3:	85 c0                	test   eax,eax
c00054e5:	75 4d                	jne    c0005534 <f_expand+0x161>
c00054e7:	89 f8                	mov    eax,edi
c00054e9:	4d                   	dec    ebp
c00054ea:	47                   	inc    edi
c00054eb:	eb dc                	jmp    c00054c9 <f_expand+0xf6>
c00054ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054f0:	48                   	dec    eax
c00054f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00054f5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054fa:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00054fd:	74 37                	je     c0005536 <f_expand+0x163>
c00054ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005502:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005505:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005509:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000550c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000550f:	83 c8 40             	or     eax,0x40
c0005512:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005515:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005518:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000551b:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000551e:	39 c8                	cmp    eax,ecx
c0005520:	77 14                	ja     c0005536 <f_expand+0x163>
c0005522:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005526:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005529:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000552c:	83 c8 01             	or     eax,0x1
c000552f:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005532:	eb 02                	jmp    c0005536 <f_expand+0x163>
c0005534:	89 c6                	mov    esi,eax
c0005536:	83 c4 2c             	add    esp,0x2c
c0005539:	89 f0                	mov    eax,esi
c000553b:	5b                   	pop    ebx
c000553c:	5e                   	pop    esi
c000553d:	5f                   	pop    edi
c000553e:	5d                   	pop    ebp
c000553f:	c3                   	ret    

c0005540 <f_mkfs>:
c0005540:	55                   	push   ebp
c0005541:	57                   	push   edi
c0005542:	56                   	push   esi
c0005543:	be 0b 00 00 00       	mov    esi,0xb
c0005548:	53                   	push   ebx
c0005549:	83 ec 5c             	sub    esp,0x5c
c000554c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005550:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005554:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005558:	e8 1e ce ff ff       	call   c000237b <get_ldnumber>
c000555d:	85 c0                	test   eax,eax
c000555f:	0f 88 e0 07 00 00    	js     c0005d45 <f_mkfs+0x805>
c0005565:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c000556c:	85 d2                	test   edx,edx
c000556e:	74 03                	je     c0005573 <f_mkfs+0x33>
c0005570:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005573:	85 db                	test   ebx,ebx
c0005575:	75 05                	jne    c000557c <f_mkfs+0x3c>
c0005577:	bb 60 f4 02 c0       	mov    ebx,0xc002f460
c000557c:	0f b6 c0             	movzx  eax,al
c000557f:	83 ec 0c             	sub    esp,0xc
c0005582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005586:	be 03 00 00 00       	mov    esi,0x3
c000558b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000558f:	e8 29 c9 ff ff       	call   c0001ebd <disk_initialize>
c0005594:	83 c4 10             	add    esp,0x10
c0005597:	a8 01                	test   al,0x1
c0005599:	0f 85 a6 07 00 00    	jne    c0005d45 <f_mkfs+0x805>
c000559f:	a8 04                	test   al,0x4
c00055a1:	be 0a 00 00 00       	mov    esi,0xa
c00055a6:	0f 85 99 07 00 00    	jne    c0005d45 <f_mkfs+0x805>
c00055ac:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00055af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00055b3:	85 c0                	test   eax,eax
c00055b5:	75 20                	jne    c00055d7 <f_mkfs+0x97>
c00055b7:	51                   	push   ecx
c00055b8:	8d 44 24 44          	lea    eax,[esp+0x44]
c00055bc:	50                   	push   eax
c00055bd:	6a 03                	push   0x3
c00055bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055c3:	e8 24 c9 ff ff       	call   c0001eec <disk_ioctl>
c00055c8:	83 c4 10             	add    esp,0x10
c00055cb:	85 c0                	test   eax,eax
c00055cd:	74 08                	je     c00055d7 <f_mkfs+0x97>
c00055cf:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00055db:	8d 42 ff             	lea    eax,[edx-0x1]
c00055de:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055e3:	77 04                	ja     c00055e9 <f_mkfs+0xa9>
c00055e5:	85 c2                	test   edx,eax
c00055e7:	74 08                	je     c00055f1 <f_mkfs+0xb1>
c00055e9:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055f1:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00055f4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00055f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00055fc:	48                   	dec    eax
c00055fd:	3c 01                	cmp    al,0x1
c00055ff:	76 05                	jbe    c0005606 <f_mkfs+0xc6>
c0005601:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005606:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000560d:	48                   	dec    eax
c000560e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005613:	77 15                	ja     c000562a <f_mkfs+0xea>
c0005615:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000561a:	b8 00 02 00 00       	mov    eax,0x200
c000561f:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005628:	eb 08                	jmp    c0005632 <f_mkfs+0xf2>
c000562a:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005632:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005635:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000563b:	77 0f                	ja     c000564c <f_mkfs+0x10c>
c000563d:	8d 47 ff             	lea    eax,[edi-0x1]
c0005640:	85 f8                	test   eax,edi
c0005642:	b8 00 00 00 00       	mov    eax,0x0
c0005647:	0f 45 f8             	cmovne edi,eax
c000564a:	eb 02                	jmp    c000564e <f_mkfs+0x10e>
c000564c:	31 ff                	xor    edi,edi
c000564e:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005656:	77 0a                	ja     c0005662 <f_mkfs+0x122>
c0005658:	be 11 00 00 00       	mov    esi,0x11
c000565d:	e9 e3 06 00 00       	jmp    c0005d45 <f_mkfs+0x805>
c0005662:	85 ed                	test   ebp,ebp
c0005664:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005666:	89 eb                	mov    ebx,ebp
c0005668:	75 1e                	jne    c0005688 <f_mkfs+0x148>
c000566a:	83 ec 0c             	sub    esp,0xc
c000566d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005674:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005679:	50                   	push   eax
c000567a:	e8 d1 06 00 00       	call   c0005d50 <ff_memalloc>
c000567f:	83 c4 10             	add    esp,0x10
c0005682:	85 c0                	test   eax,eax
c0005684:	89 c3                	mov    ebx,eax
c0005686:	74 d0                	je     c0005658 <f_mkfs+0x118>
c0005688:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005690:	52                   	push   edx
c0005691:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005695:	50                   	push   eax
c0005696:	6a 01                	push   0x1
c0005698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000569c:	e8 4b c8 ff ff       	call   c0001eec <disk_ioctl>
c00056a1:	83 c4 10             	add    esp,0x10
c00056a4:	85 c0                	test   eax,eax
c00056a6:	0f 85 42 06 00 00    	jne    c0005cee <f_mkfs+0x7ae>
c00056ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00056b4:	89 f0                	mov    eax,esi
c00056b6:	83 e0 08             	and    eax,0x8
c00056b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00056bd:	75 18                	jne    c00056d7 <f_mkfs+0x197>
c00056bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00056c3:	83 f8 3f             	cmp    eax,0x3f
c00056c6:	76 0f                	jbe    c00056d7 <f_mkfs+0x197>
c00056c8:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00056d0:	83 e8 3f             	sub    eax,0x3f
c00056d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00056d7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00056db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00056df:	83 f8 7f             	cmp    eax,0x7f
c00056e2:	0f 86 5f 02 00 00    	jbe    c0005947 <f_mkfs+0x407>
c00056e8:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00056ee:	b9 80 00 00 00       	mov    ecx,0x80
c00056f3:	77 05                	ja     c00056fa <f_mkfs+0x1ba>
c00056f5:	c1 ef 09             	shr    edi,0x9
c00056f8:	89 f9                	mov    ecx,edi
c00056fa:	89 f0                	mov    eax,esi
c00056fc:	89 f7                	mov    edi,esi
c00056fe:	83 e0 01             	and    eax,0x1
c0005701:	83 e7 02             	and    edi,0x2
c0005704:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005708:	0f b6 c0             	movzx  eax,al
c000570b:	74 0a                	je     c0005717 <f_mkfs+0x1d7>
c000570d:	85 c0                	test   eax,eax
c000570f:	0f 84 53 01 00 00    	je     c0005868 <f_mkfs+0x328>
c0005715:	eb 37                	jmp    c000574e <f_mkfs+0x20e>
c0005717:	85 c0                	test   eax,eax
c0005719:	be 13 00 00 00       	mov    esi,0x13
c000571e:	75 2e                	jne    c000574e <f_mkfs+0x20e>
c0005720:	e9 e0 05 00 00       	jmp    c0005d05 <f_mkfs+0x7c5>
c0005725:	83 f8 02             	cmp    eax,0x2
c0005728:	0f 85 11 02 00 00    	jne    c000593f <f_mkfs+0x3ff>
c000572e:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005734:	0f 86 e8 01 00 00    	jbe    c0005922 <f_mkfs+0x3e2>
c000573a:	85 c9                	test   ecx,ecx
c000573c:	0f 85 d5 05 00 00    	jne    c0005d17 <f_mkfs+0x7d7>
c0005742:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005745:	83 f9 40             	cmp    ecx,0x40
c0005748:	0f 87 d9 05 00 00    	ja     c0005d27 <f_mkfs+0x7e7>
c000574e:	85 c9                	test   ecx,ecx
c0005750:	89 cf                	mov    edi,ecx
c0005752:	75 1c                	jne    c0005770 <f_mkfs+0x230>
c0005754:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005758:	b8 40 f4 02 c0       	mov    eax,0xc002f440
c000575d:	bf 01 00 00 00       	mov    edi,0x1
c0005762:	c1 ee 0c             	shr    esi,0xc
c0005765:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005768:	85 d2                	test   edx,edx
c000576a:	0f 85 67 01 00 00    	jne    c00058d7 <f_mkfs+0x397>
c0005770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005774:	31 d2                	xor    edx,edx
c0005776:	f7 f7                	div    edi
c0005778:	3d f5 0f 00 00       	cmp    eax,0xff5
c000577d:	0f 86 66 01 00 00    	jbe    c00058e9 <f_mkfs+0x3a9>
c0005783:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005788:	83 c0 02             	add    eax,0x2
c000578b:	01 c0                	add    eax,eax
c000578d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005795:	05 ff 01 00 00       	add    eax,0x1ff
c000579a:	c1 e8 09             	shr    eax,0x9
c000579d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a5:	c1 e0 05             	shl    eax,0x5
c00057a8:	c1 e8 09             	shr    eax,0x9
c00057ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00057af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00057b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00057b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00057bc:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00057c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00057c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00057c8:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00057cd:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00057d1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00057d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00057d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00057dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057e1:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00057e5:	f7 d8                	neg    eax
c00057e7:	21 c6                	and    esi,eax
c00057e9:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057ee:	29 d6                	sub    esi,edx
c00057f0:	83 f8 03             	cmp    eax,0x3
c00057f3:	0f 85 03 01 00 00    	jne    c00058fc <f_mkfs+0x3bc>
c00057f9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00057fd:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005801:	89 f8                	mov    eax,edi
c0005803:	c1 e0 04             	shl    eax,0x4
c0005806:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000580a:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c000580e:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005812:	0f 82 2f 01 00 00    	jb     c0005947 <f_mkfs+0x407>
c0005818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000581c:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005820:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005824:	89 c2                	mov    edx,eax
c0005826:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000582a:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000582f:	29 c2                	sub    edx,eax
c0005831:	89 d0                	mov    eax,edx
c0005833:	31 d2                	xor    edx,edx
c0005835:	f7 f7                	div    edi
c0005837:	89 c6                	mov    esi,eax
c0005839:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000583e:	83 f8 03             	cmp    eax,0x3
c0005841:	0f 85 de fe ff ff    	jne    c0005725 <f_mkfs+0x1e5>
c0005847:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000584d:	0f 87 03 01 00 00    	ja     c0005956 <f_mkfs+0x416>
c0005853:	85 c9                	test   ecx,ecx
c0005855:	0f 85 ec 00 00 00    	jne    c0005947 <f_mkfs+0x407>
c000585b:	83 ff 01             	cmp    edi,0x1
c000585e:	0f 86 e3 00 00 00    	jbe    c0005947 <f_mkfs+0x407>
c0005864:	d1 ef                	shr    edi,1
c0005866:	89 f9                	mov    ecx,edi
c0005868:	85 c9                	test   ecx,ecx
c000586a:	89 ce                	mov    esi,ecx
c000586c:	75 25                	jne    c0005893 <f_mkfs+0x353>
c000586e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005872:	b8 50 f4 02 c0       	mov    eax,0xc002f450
c0005877:	b9 01 00 00 00       	mov    ecx,0x1
c000587c:	c1 ee 11             	shr    esi,0x11
c000587f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005882:	85 d2                	test   edx,edx
c0005884:	74 0b                	je     c0005891 <f_mkfs+0x351>
c0005886:	83 c0 02             	add    eax,0x2
c0005889:	39 f2                	cmp    edx,esi
c000588b:	77 04                	ja     c0005891 <f_mkfs+0x351>
c000588d:	01 c9                	add    ecx,ecx
c000588f:	eb ee                	jmp    c000587f <f_mkfs+0x33f>
c0005891:	31 f6                	xor    esi,esi
c0005893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005897:	31 d2                	xor    edx,edx
c0005899:	f7 f1                	div    ecx
c000589b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00058a2:	2d f6 ff 00 00       	sub    eax,0xfff6
c00058a7:	c1 ea 09             	shr    edx,0x9
c00058aa:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00058af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00058b3:	0f 87 8e 00 00 00    	ja     c0005947 <f_mkfs+0x407>
c00058b9:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00058c1:	89 cf                	mov    edi,ecx
c00058c3:	89 f1                	mov    ecx,esi
c00058c5:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00058cd:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00058d2:	e9 d8 fe ff ff       	jmp    c00057af <f_mkfs+0x26f>
c00058d7:	83 c0 02             	add    eax,0x2
c00058da:	39 f2                	cmp    edx,esi
c00058dc:	0f 87 8e fe ff ff    	ja     c0005770 <f_mkfs+0x230>
c00058e2:	01 ff                	add    edi,edi
c00058e4:	e9 7c fe ff ff       	jmp    c0005765 <f_mkfs+0x225>
c00058e9:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058ee:	8d 04 40             	lea    eax,[eax+eax*2]
c00058f1:	40                   	inc    eax
c00058f2:	d1 e8                	shr    eax,1
c00058f4:	83 c0 03             	add    eax,0x3
c00058f7:	e9 91 fe ff ff       	jmp    c000578d <f_mkfs+0x24d>
c00058fc:	31 d2                	xor    edx,edx
c00058fe:	89 f0                	mov    eax,esi
c0005900:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005904:	85 d2                	test   edx,edx
c0005906:	74 09                	je     c0005911 <f_mkfs+0x3d1>
c0005908:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000590c:	4e                   	dec    esi
c000590d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005911:	89 f0                	mov    eax,esi
c0005913:	31 d2                	xor    edx,edx
c0005915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005919:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c000591d:	e9 df fe ff ff       	jmp    c0005801 <f_mkfs+0x2c1>
c0005922:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005928:	77 2c                	ja     c0005956 <f_mkfs+0x416>
c000592a:	85 c9                	test   ecx,ecx
c000592c:	75 19                	jne    c0005947 <f_mkfs+0x407>
c000592e:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005931:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005937:	0f 86 11 fe ff ff    	jbe    c000574e <f_mkfs+0x20e>
c000593d:	eb 08                	jmp    c0005947 <f_mkfs+0x407>
c000593f:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005945:	76 0a                	jbe    c0005951 <f_mkfs+0x411>
c0005947:	be 0e 00 00 00       	mov    esi,0xe
c000594c:	e9 b4 03 00 00       	jmp    c0005d05 <f_mkfs+0x7c5>
c0005951:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005956:	31 d2                	xor    edx,edx
c0005958:	b9 00 02 00 00       	mov    ecx,0x200
c000595d:	89 d8                	mov    eax,ebx
c000595f:	e8 e8 c5 ff ff       	call   c0001f4c <mem_set>
c0005964:	b9 0b 00 00 00       	mov    ecx,0xb
c0005969:	ba f2 f3 02 c0       	mov    edx,0xc002f3f2
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 c2 c5 ff ff       	call   c0001f37 <mem_cpy>
c0005975:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005978:	ba 00 02 00 00       	mov    edx,0x200
c000597d:	e8 ae c5 ff ff       	call   c0001f30 <st_word>
c0005982:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005987:	89 f8                	mov    eax,edi
c0005989:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000598c:	8d 43 0e             	lea    eax,[ebx+0xe]
c000598f:	e8 9c c5 ff ff       	call   c0001f30 <st_word>
c0005994:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005998:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000599b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059a0:	83 f8 03             	cmp    eax,0x3
c00059a3:	b8 00 00 00 00       	mov    eax,0x0
c00059a8:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00059ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059b1:	8d 43 11             	lea    eax,[ebx+0x11]
c00059b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00059b8:	e8 73 c5 ff ff       	call   c0001f30 <st_word>
c00059bd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00059c1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00059c7:	77 0a                	ja     c00059d3 <f_mkfs+0x493>
c00059c9:	8d 43 13             	lea    eax,[ebx+0x13]
c00059cc:	e8 5f c5 ff ff       	call   c0001f30 <st_word>
c00059d1:	eb 08                	jmp    c00059db <f_mkfs+0x49b>
c00059d3:	8d 43 20             	lea    eax,[ebx+0x20]
c00059d6:	e8 59 c5 ff ff       	call   c0001f34 <st_dword>
c00059db:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00059df:	8d 43 18             	lea    eax,[ebx+0x18]
c00059e2:	ba 3f 00 00 00       	mov    edx,0x3f
c00059e7:	e8 44 c5 ff ff       	call   c0001f30 <st_word>
c00059ec:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00059ef:	ba ff 00 00 00       	mov    edx,0xff
c00059f4:	e8 37 c5 ff ff       	call   c0001f30 <st_word>
c00059f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00059fd:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005a00:	e8 2f c5 ff ff       	call   c0001f34 <st_dword>
c0005a05:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a0a:	83 f8 03             	cmp    eax,0x3
c0005a0d:	75 57                	jne    c0005a66 <f_mkfs+0x526>
c0005a0f:	8d 43 43             	lea    eax,[ebx+0x43]
c0005a12:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a17:	e8 18 c5 ff ff       	call   c0001f34 <st_dword>
c0005a1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a20:	8d 43 24             	lea    eax,[ebx+0x24]
c0005a23:	e8 0c c5 ff ff       	call   c0001f34 <st_dword>
c0005a28:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005a2b:	ba 02 00 00 00       	mov    edx,0x2
c0005a30:	e8 ff c4 ff ff       	call   c0001f34 <st_dword>
c0005a35:	8d 43 30             	lea    eax,[ebx+0x30]
c0005a38:	ba 01 00 00 00       	mov    edx,0x1
c0005a3d:	e8 ee c4 ff ff       	call   c0001f30 <st_word>
c0005a42:	8d 43 32             	lea    eax,[ebx+0x32]
c0005a45:	ba 06 00 00 00       	mov    edx,0x6
c0005a4a:	e8 e1 c4 ff ff       	call   c0001f30 <st_word>
c0005a4f:	8d 43 47             	lea    eax,[ebx+0x47]
c0005a52:	b9 13 00 00 00       	mov    ecx,0x13
c0005a57:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005a5b:	ba fe f3 02 c0       	mov    edx,0xc002f3fe
c0005a60:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005a64:	eb 2f                	jmp    c0005a95 <f_mkfs+0x555>
c0005a66:	8d 43 27             	lea    eax,[ebx+0x27]
c0005a69:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a6e:	e8 c1 c4 ff ff       	call   c0001f34 <st_dword>
c0005a73:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005a78:	8d 43 16             	lea    eax,[ebx+0x16]
c0005a7b:	e8 b0 c4 ff ff       	call   c0001f30 <st_word>
c0005a80:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005a83:	b9 13 00 00 00       	mov    ecx,0x13
c0005a88:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005a8c:	ba 12 f4 02 c0       	mov    edx,0xc002f412
c0005a91:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005a95:	e8 9d c4 ff ff       	call   c0001f37 <mem_cpy>
c0005a9a:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005aa0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005aa9:	e8 82 c4 ff ff       	call   c0001f30 <st_word>
c0005aae:	6a 01                	push   0x1
c0005ab0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ab4:	53                   	push   ebx
c0005ab5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ab9:	e8 18 c4 ff ff       	call   c0001ed6 <disk_write>
c0005abe:	83 c4 10             	add    esp,0x10
c0005ac1:	85 c0                	test   eax,eax
c0005ac3:	0f 85 25 02 00 00    	jne    c0005cee <f_mkfs+0x7ae>
c0005ac9:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ace:	83 f8 03             	cmp    eax,0x3
c0005ad1:	0f 85 98 00 00 00    	jne    c0005b6f <f_mkfs+0x62f>
c0005ad7:	6a 01                	push   0x1
c0005ad9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005add:	83 c0 06             	add    eax,0x6
c0005ae0:	50                   	push   eax
c0005ae1:	53                   	push   ebx
c0005ae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ae6:	e8 eb c3 ff ff       	call   c0001ed6 <disk_write>
c0005aeb:	b9 00 02 00 00       	mov    ecx,0x200
c0005af0:	31 d2                	xor    edx,edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	e8 53 c4 ff ff       	call   c0001f4c <mem_set>
c0005af9:	ba 52 52 61 41       	mov    edx,0x41615252
c0005afe:	89 d8                	mov    eax,ebx
c0005b00:	e8 2f c4 ff ff       	call   c0001f34 <st_dword>
c0005b05:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005b0b:	ba 72 72 41 61       	mov    edx,0x61417272
c0005b10:	e8 1f c4 ff ff       	call   c0001f34 <st_dword>
c0005b15:	8d 56 ff             	lea    edx,[esi-0x1]
c0005b18:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005b1e:	e8 11 c4 ff ff       	call   c0001f34 <st_dword>
c0005b23:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005b29:	ba 02 00 00 00       	mov    edx,0x2
c0005b2e:	e8 01 c4 ff ff       	call   c0001f34 <st_dword>
c0005b33:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b39:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b3e:	e8 ed c3 ff ff       	call   c0001f30 <st_word>
c0005b43:	6a 01                	push   0x1
c0005b45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005b49:	83 c0 07             	add    eax,0x7
c0005b4c:	50                   	push   eax
c0005b4d:	53                   	push   ebx
c0005b4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005b52:	e8 7f c3 ff ff       	call   c0001ed6 <disk_write>
c0005b57:	83 c4 20             	add    esp,0x20
c0005b5a:	6a 01                	push   0x1
c0005b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b60:	40                   	inc    eax
c0005b61:	50                   	push   eax
c0005b62:	53                   	push   ebx
c0005b63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b67:	e8 6a c3 ff ff       	call   c0001ed6 <disk_write>
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005b73:	31 d2                	xor    edx,edx
c0005b75:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005b79:	c1 e8 09             	shr    eax,0x9
c0005b7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b80:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005b86:	89 d8                	mov    eax,ebx
c0005b88:	e8 bf c3 ff ff       	call   c0001f4c <mem_set>
c0005b8d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b92:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005b97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005b9f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ba4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005ba8:	83 f8 01             	cmp    eax,0x1
c0005bab:	0f 44 d1             	cmove  edx,ecx
c0005bae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005bb2:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005bb7:	75 21                	jne    c0005bda <f_mkfs+0x69a>
c0005bb9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 6f c3 ff ff       	call   c0001f34 <st_dword>
c0005bc5:	8d 43 04             	lea    eax,[ebx+0x4]
c0005bc8:	83 ca ff             	or     edx,0xffffffff
c0005bcb:	e8 64 c3 ff ff       	call   c0001f34 <st_dword>
c0005bd0:	8d 43 08             	lea    eax,[ebx+0x8]
c0005bd3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005bd8:	eb 06                	jmp    c0005be0 <f_mkfs+0x6a0>
c0005bda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005bde:	89 d8                	mov    eax,ebx
c0005be0:	e8 4f c3 ff ff       	call   c0001f34 <st_dword>
c0005be5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bed:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005bf1:	0f 46 c6             	cmovbe eax,esi
c0005bf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005bf8:	50                   	push   eax
c0005bf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005bfd:	53                   	push   ebx
c0005bfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c02:	e8 cf c2 ff ff       	call   c0001ed6 <disk_write>
c0005c07:	83 c4 10             	add    esp,0x10
c0005c0a:	85 c0                	test   eax,eax
c0005c0c:	0f 85 dc 00 00 00    	jne    c0005cee <f_mkfs+0x7ae>
c0005c12:	b9 00 02 00 00       	mov    ecx,0x200
c0005c17:	31 d2                	xor    edx,edx
c0005c19:	89 d8                	mov    eax,ebx
c0005c1b:	e8 2c c3 ff ff       	call   c0001f4c <mem_set>
c0005c20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005c24:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005c28:	29 ce                	sub    esi,ecx
c0005c2a:	75 bd                	jne    c0005be9 <f_mkfs+0x6a9>
c0005c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c30:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005c38:	40                   	inc    eax
c0005c39:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005c3d:	0f 87 6f ff ff ff    	ja     c0005bb2 <f_mkfs+0x672>
c0005c43:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c48:	83 f8 03             	cmp    eax,0x3
c0005c4b:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005c50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c54:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005c58:	0f 46 f7             	cmovbe esi,edi
c0005c5b:	56                   	push   esi
c0005c5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c60:	53                   	push   ebx
c0005c61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c65:	e8 6c c2 ff ff       	call   c0001ed6 <disk_write>
c0005c6a:	83 c4 10             	add    esp,0x10
c0005c6d:	85 c0                	test   eax,eax
c0005c6f:	75 7d                	jne    c0005cee <f_mkfs+0x7ae>
c0005c71:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005c75:	29 f7                	sub    edi,esi
c0005c77:	75 d7                	jne    c0005c50 <f_mkfs+0x710>
c0005c79:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c7e:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c83:	83 f8 03             	cmp    eax,0x3
c0005c86:	74 1e                	je     c0005ca6 <f_mkfs+0x766>
c0005c88:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c90:	b9 06 00 00 00       	mov    ecx,0x6
c0005c95:	77 0f                	ja     c0005ca6 <f_mkfs+0x766>
c0005c97:	83 f8 02             	cmp    eax,0x2
c0005c9a:	b9 04 00 00 00       	mov    ecx,0x4
c0005c9f:	74 05                	je     c0005ca6 <f_mkfs+0x766>
c0005ca1:	b9 01 00 00 00       	mov    ecx,0x1
c0005ca6:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005cab:	75 2a                	jne    c0005cd7 <f_mkfs+0x797>
c0005cad:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005cb5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005cc0:	53                   	push   ebx
c0005cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cc5:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005cc9:	e8 87 d2 ff ff       	call   c0002f55 <create_partition>
c0005cce:	83 c4 10             	add    esp,0x10
c0005cd1:	85 c0                	test   eax,eax
c0005cd3:	89 c6                	mov    esi,eax
c0005cd5:	75 2e                	jne    c0005d05 <f_mkfs+0x7c5>
c0005cd7:	50                   	push   eax
c0005cd8:	31 f6                	xor    esi,esi
c0005cda:	6a 00                	push   0x0
c0005cdc:	6a 00                	push   0x0
c0005cde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce2:	e8 05 c2 ff ff       	call   c0001eec <disk_ioctl>
c0005ce7:	83 c4 10             	add    esp,0x10
c0005cea:	85 c0                	test   eax,eax
c0005cec:	74 17                	je     c0005d05 <f_mkfs+0x7c5>
c0005cee:	85 ed                	test   ebp,ebp
c0005cf0:	75 0c                	jne    c0005cfe <f_mkfs+0x7be>
c0005cf2:	83 ec 0c             	sub    esp,0xc
c0005cf5:	53                   	push   ebx
c0005cf6:	e8 6d 00 00 00       	call   c0005d68 <ff_memfree>
c0005cfb:	83 c4 10             	add    esp,0x10
c0005cfe:	be 01 00 00 00       	mov    esi,0x1
c0005d03:	eb 40                	jmp    c0005d45 <f_mkfs+0x805>
c0005d05:	85 ed                	test   ebp,ebp
c0005d07:	75 3c                	jne    c0005d45 <f_mkfs+0x805>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	53                   	push   ebx
c0005d0d:	e8 56 00 00 00       	call   c0005d68 <ff_memfree>
c0005d12:	83 c4 10             	add    esp,0x10
c0005d15:	eb 2e                	jmp    c0005d45 <f_mkfs+0x805>
c0005d17:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d1c:	0f 85 46 fb ff ff    	jne    c0005868 <f_mkfs+0x328>
c0005d22:	e9 20 fc ff ff       	jmp    c0005947 <f_mkfs+0x407>
c0005d27:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d2c:	0f 85 3c fb ff ff    	jne    c000586e <f_mkfs+0x32e>
c0005d32:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005d38:	89 cf                	mov    edi,ecx
c0005d3a:	0f 86 30 fa ff ff    	jbe    c0005770 <f_mkfs+0x230>
c0005d40:	e9 02 fc ff ff       	jmp    c0005947 <f_mkfs+0x407>
c0005d45:	83 c4 5c             	add    esp,0x5c
c0005d48:	89 f0                	mov    eax,esi
c0005d4a:	5b                   	pop    ebx
c0005d4b:	5e                   	pop    esi
c0005d4c:	5f                   	pop    edi
c0005d4d:	5d                   	pop    ebp
c0005d4e:	c3                   	ret    
c0005d4f:	90                   	nop

c0005d50 <ff_memalloc>:
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	83 ec 0c             	sub    esp,0xc
c0005d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d5a:	e8 7c 06 01 00       	call   c00163db <malloc>
c0005d5f:	83 c4 10             	add    esp,0x10
c0005d62:	83 c4 0c             	add    esp,0xc
c0005d65:	c3                   	ret    
c0005d66:	66 90                	xchg   ax,ax

c0005d68 <ff_memfree>:
c0005d68:	83 ec 0c             	sub    esp,0xc
c0005d6b:	83 ec 0c             	sub    esp,0xc
c0005d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d72:	e8 74 06 01 00       	call   c00163eb <free>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	90                   	nop
c0005d7b:	83 c4 0c             	add    esp,0xc
c0005d7e:	c3                   	ret    
c0005d7f:	90                   	nop

c0005d80 <ff_uni2oem>:
c0005d80:	83 ec 14             	sub    esp,0x14
c0005d83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d87:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d8b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d92:	c7 44 24 0c 40 f8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f840
c0005d9a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005d9f:	77 0b                	ja     c0005dac <ff_uni2oem+0x2c>
c0005da1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005daa:	eb 64                	jmp    c0005e10 <ff_uni2oem+0x90>
c0005dac:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005db4:	77 5a                	ja     c0005e10 <ff_uni2oem+0x90>
c0005db6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005dba:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005dbf:	75 4f                	jne    c0005e10 <ff_uni2oem+0x90>
c0005dc1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005dc8:	eb 12                	jmp    c0005ddc <ff_uni2oem+0x5c>
c0005dca:	66 90                	xchg   ax,ax
c0005dcc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005dd1:	83 c0 01             	add    eax,0x1
c0005dd4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ddc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005de1:	83 f8 7f             	cmp    eax,0x7f
c0005de4:	77 1a                	ja     c0005e00 <ff_uni2oem+0x80>
c0005de6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005deb:	8d 14 00             	lea    edx,[eax+eax*1]
c0005dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005df2:	01 d0                	add    eax,edx
c0005df4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005df7:	0f b7 c0             	movzx  eax,ax
c0005dfa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005dfe:	75 cc                	jne    c0005dcc <ff_uni2oem+0x4c>
c0005e00:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e05:	83 e8 80             	sub    eax,0xffffff80
c0005e08:	0f b6 c0             	movzx  eax,al
c0005e0b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e10:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e15:	83 c4 14             	add    esp,0x14
c0005e18:	c3                   	ret    
c0005e19:	8d 76 00             	lea    esi,[esi+0x0]

c0005e1c <ff_oem2uni>:
c0005e1c:	83 ec 18             	sub    esp,0x18
c0005e1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005e23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005e27:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005e2c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e30:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005e37:	c7 44 24 10 40 f8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f840
c0005e3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e44:	83 f8 7f             	cmp    eax,0x7f
c0005e47:	77 0b                	ja     c0005e54 <ff_oem2uni+0x38>
c0005e49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e4d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e52:	eb 34                	jmp    c0005e88 <ff_oem2uni+0x6c>
c0005e54:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e58:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e5d:	75 29                	jne    c0005e88 <ff_oem2uni+0x6c>
c0005e5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e64:	3d ff 00 00 00       	cmp    eax,0xff
c0005e69:	77 1d                	ja     c0005e88 <ff_oem2uni+0x6c>
c0005e6b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e70:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005e75:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e7c:	01 d0                	add    eax,edx
c0005e7e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e81:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e86:	66 90                	xchg   ax,ax
c0005e88:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e8d:	83 c4 18             	add    esp,0x18
c0005e90:	c3                   	ret    
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]

c0005e94 <ff_wtoupper>:
c0005e94:	83 ec 10             	sub    esp,0x10
c0005e97:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005e9f:	0f 87 a7 01 00 00    	ja     c000604c <ff_wtoupper+0x1b8>
c0005ea5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ea9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005eb3:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005eb8:	77 0a                	ja     c0005ec4 <ff_wtoupper+0x30>
c0005eba:	b8 40 f6 02 c0       	mov    eax,0xc002f640
c0005ebf:	eb 0b                	jmp    c0005ecc <ff_wtoupper+0x38>
c0005ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec4:	b8 80 f5 02 c0       	mov    eax,0xc002f580
c0005ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed4:	8d 50 02             	lea    edx,[eax+0x2]
c0005ed7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ede:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005ee3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 84 50 01 00 00    	je     c0006040 <ff_wtoupper+0x1ac>
c0005ef0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ef5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005efa:	39 c2                	cmp    edx,eax
c0005efc:	0f 82 3e 01 00 00    	jb     c0006040 <ff_wtoupper+0x1ac>
c0005f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f06:	8d 50 02             	lea    edx,[eax+0x2]
c0005f09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f10:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f15:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f1a:	c1 e8 08             	shr    eax,0x8
c0005f1d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005f22:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005f27:	0f b6 c0             	movzx  eax,al
c0005f2a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f2f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f34:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005f39:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005f3e:	01 ca                	add    edx,ecx
c0005f40:	39 d0                	cmp    eax,edx
c0005f42:	0f 8d d4 00 00 00    	jge    c000601c <ff_wtoupper+0x188>
c0005f48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f4d:	83 f8 08             	cmp    eax,0x8
c0005f50:	0f 87 e6 00 00 00    	ja     c000603c <ff_wtoupper+0x1a8>
c0005f56:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c0005f5d:	ff e0                	jmp    eax
c0005f5f:	90                   	nop
c0005f60:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f65:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f6a:	29 c2                	sub    edx,eax
c0005f6c:	89 d0                	mov    eax,edx
c0005f6e:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f75:	01 d0                	add    eax,edx
c0005f77:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f7a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f7f:	e9 94 00 00 00       	jmp    c0006018 <ff_wtoupper+0x184>
c0005f84:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f8d:	89 d1                	mov    ecx,edx
c0005f8f:	29 c1                	sub    ecx,eax
c0005f91:	89 c8                	mov    eax,ecx
c0005f93:	83 e0 01             	and    eax,0x1
c0005f96:	89 c2                	mov    edx,eax
c0005f98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f9d:	29 d0                	sub    eax,edx
c0005f9f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fa4:	eb 72                	jmp    c0006018 <ff_wtoupper+0x184>
c0005fa6:	66 90                	xchg   ax,ax
c0005fa8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fad:	83 e8 10             	sub    eax,0x10
c0005fb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fb5:	eb 61                	jmp    c0006018 <ff_wtoupper+0x184>
c0005fb7:	90                   	nop
c0005fb8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fbd:	83 e8 20             	sub    eax,0x20
c0005fc0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fc5:	eb 51                	jmp    c0006018 <ff_wtoupper+0x184>
c0005fc7:	90                   	nop
c0005fc8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fcd:	83 e8 30             	sub    eax,0x30
c0005fd0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fd5:	eb 41                	jmp    c0006018 <ff_wtoupper+0x184>
c0005fd7:	90                   	nop
c0005fd8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fdd:	83 e8 1a             	sub    eax,0x1a
c0005fe0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fe5:	eb 31                	jmp    c0006018 <ff_wtoupper+0x184>
c0005fe7:	90                   	nop
c0005fe8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fed:	83 c0 08             	add    eax,0x8
c0005ff0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ff5:	eb 21                	jmp    c0006018 <ff_wtoupper+0x184>
c0005ff7:	90                   	nop
c0005ff8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ffd:	83 e8 50             	sub    eax,0x50
c0006000:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006005:	eb 11                	jmp    c0006018 <ff_wtoupper+0x184>
c0006007:	90                   	nop
c0006008:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000600d:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006012:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006017:	90                   	nop
c0006018:	eb 22                	jmp    c000603c <ff_wtoupper+0x1a8>
c000601a:	66 90                	xchg   ax,ax
c000601c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006021:	85 c0                	test   eax,eax
c0006023:	0f 85 a7 fe ff ff    	jne    c0005ed0 <ff_wtoupper+0x3c>
c0006029:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000602e:	d1 e0                	shl    eax,1
c0006030:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006034:	e9 97 fe ff ff       	jmp    c0005ed0 <ff_wtoupper+0x3c>
c0006039:	8d 76 00             	lea    esi,[esi+0x0]
c000603c:	90                   	nop
c000603d:	8d 76 00             	lea    esi,[esi+0x0]
c0006040:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006045:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006049:	8d 76 00             	lea    esi,[esi+0x0]
c000604c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006050:	83 c4 10             	add    esp,0x10
c0006053:	c3                   	ret    

c0006054 <utf2ucs>:
c0006054:	57                   	push   edi
c0006055:	31 c9                	xor    ecx,ecx
c0006057:	56                   	push   esi
c0006058:	89 d7                	mov    edi,edx
c000605a:	53                   	push   ebx
c000605b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000605f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006063:	89 de                	mov    esi,ebx
c0006065:	c1 fe 08             	sar    esi,0x8
c0006068:	89 f2                	mov    edx,esi
c000606a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000606d:	41                   	inc    ecx
c000606e:	85 db                	test   ebx,ebx
c0006070:	75 e9                	jne    c000605b <utf2ucs+0x7>
c0006072:	5b                   	pop    ebx
c0006073:	5e                   	pop    esi
c0006074:	5f                   	pop    edi
c0006075:	c3                   	ret    

c0006076 <ucs2utfn>:
c0006076:	83 e1 fe             	and    ecx,0xfffffffe
c0006079:	01 d1                	add    ecx,edx
c000607b:	39 d1                	cmp    ecx,edx
c000607d:	75 04                	jne    c0006083 <ucs2utfn+0xd>
c000607f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006082:	c3                   	ret    
c0006083:	57                   	push   edi
c0006084:	56                   	push   esi
c0006085:	53                   	push   ebx
c0006086:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006089:	83 c2 02             	add    edx,0x2
c000608c:	89 de                	mov    esi,ebx
c000608e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006092:	c1 e6 08             	shl    esi,0x8
c0006095:	09 f3                	or     ebx,esi
c0006097:	83 fb 3b             	cmp    ebx,0x3b
c000609a:	74 50                	je     c00060ec <ucs2utfn+0x76>
c000609c:	83 fb 7f             	cmp    ebx,0x7f
c000609f:	7f 05                	jg     c00060a6 <ucs2utfn+0x30>
c00060a1:	88 18                	mov    BYTE PTR [eax],bl
c00060a3:	40                   	inc    eax
c00060a4:	eb 42                	jmp    c00060e8 <ucs2utfn+0x72>
c00060a6:	89 df                	mov    edi,ebx
c00060a8:	89 de                	mov    esi,ebx
c00060aa:	c1 fe 06             	sar    esi,0x6
c00060ad:	83 e7 3f             	and    edi,0x3f
c00060b0:	83 cf 80             	or     edi,0xffffff80
c00060b3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00060b9:	7f 12                	jg     c00060cd <ucs2utfn+0x57>
c00060bb:	83 ce c0             	or     esi,0xffffffc0
c00060be:	83 c0 02             	add    eax,0x2
c00060c1:	89 f3                	mov    ebx,esi
c00060c3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060c6:	89 fb                	mov    ebx,edi
c00060c8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060cb:	eb 1b                	jmp    c00060e8 <ucs2utfn+0x72>
c00060cd:	c1 fb 0c             	sar    ebx,0xc
c00060d0:	83 e6 3f             	and    esi,0x3f
c00060d3:	83 cb e0             	or     ebx,0xffffffe0
c00060d6:	83 ce 80             	or     esi,0xffffff80
c00060d9:	88 18                	mov    BYTE PTR [eax],bl
c00060db:	89 f3                	mov    ebx,esi
c00060dd:	83 c0 03             	add    eax,0x3
c00060e0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060e3:	89 fb                	mov    ebx,edi
c00060e5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060e8:	39 d1                	cmp    ecx,edx
c00060ea:	75 9a                	jne    c0006086 <ucs2utfn+0x10>
c00060ec:	5b                   	pop    ebx
c00060ed:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00060f0:	5e                   	pop    esi
c00060f1:	5f                   	pop    edi
c00060f2:	c3                   	ret    

c00060f3 <isjoliet>:
c00060f3:	31 d2                	xor    edx,edx
c00060f5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00060f8:	75 26                	jne    c0006120 <isjoliet+0x2d>
c00060fa:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00060fe:	75 20                	jne    c0006120 <isjoliet+0x2d>
c0006100:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006104:	ba 02 00 00 00       	mov    edx,0x2
c0006109:	83 f8 43             	cmp    eax,0x43
c000610c:	74 12                	je     c0006120 <isjoliet+0x2d>
c000610e:	83 f8 45             	cmp    eax,0x45
c0006111:	ba 03 00 00 00       	mov    edx,0x3
c0006116:	74 08                	je     c0006120 <isjoliet+0x2d>
c0006118:	31 d2                	xor    edx,edx
c000611a:	83 f8 40             	cmp    eax,0x40
c000611d:	0f 94 c2             	sete   dl
c0006120:	89 d0                	mov    eax,edx
c0006122:	c3                   	ret    

c0006123 <htohl_32>:
c0006123:	8b 00                	mov    eax,DWORD PTR [eax]
c0006125:	c3                   	ret    

c0006126 <iso_733>:
c0006126:	eb fb                	jmp    c0006123 <htohl_32>

c0006128 <bgrad_cache>:
c0006128:	83 fa 0e             	cmp    edx,0xe
c000612b:	77 16                	ja     c0006143 <bgrad_cache+0x1b>
c000612d:	53                   	push   ebx
c000612e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006131:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006135:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006138:	42                   	inc    edx
c0006139:	83 fa 0f             	cmp    edx,0xf
c000613c:	75 f3                	jne    c0006131 <bgrad_cache+0x9>
c000613e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006141:	5b                   	pop    ebx
c0006142:	c3                   	ret    
c0006143:	c3                   	ret    

c0006144 <ucscompare>:
c0006144:	55                   	push   ebp
c0006145:	57                   	push   edi
c0006146:	89 c7                	mov    edi,eax
c0006148:	56                   	push   esi
c0006149:	89 d6                	mov    esi,edx
c000614b:	53                   	push   ebx
c000614c:	31 d2                	xor    edx,edx
c000614e:	83 ec 1c             	sub    esp,0x1c
c0006151:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006155:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000615a:	c1 e3 08             	shl    ebx,0x8
c000615d:	09 c3                	or     ebx,eax
c000615f:	39 ca                	cmp    edx,ecx
c0006161:	7d 42                	jge    c00061a5 <ucscompare+0x61>
c0006163:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006167:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000616b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000616f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006174:	c1 e0 08             	shl    eax,0x8
c0006177:	09 e8                	or     eax,ebp
c0006179:	83 f8 3b             	cmp    eax,0x3b
c000617c:	74 27                	je     c00061a5 <ucscompare+0x61>
c000617e:	83 ec 0c             	sub    esp,0xc
c0006181:	50                   	push   eax
c0006182:	e8 f9 a7 ff ff       	call   c0000980 <tolower>
c0006187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000618a:	89 c5                	mov    ebp,eax
c000618c:	e8 ef a7 ff ff       	call   c0000980 <tolower>
c0006191:	83 c4 10             	add    esp,0x10
c0006194:	39 c5                	cmp    ebp,eax
c0006196:	75 20                	jne    c00061b8 <ucscompare+0x74>
c0006198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000619c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061a0:	83 c2 02             	add    edx,0x2
c00061a3:	eb ac                	jmp    c0006151 <ucscompare+0xd>
c00061a5:	83 fb 2f             	cmp    ebx,0x2f
c00061a8:	0f 95 c2             	setne  dl
c00061ab:	31 c0                	xor    eax,eax
c00061ad:	85 db                	test   ebx,ebx
c00061af:	0f 95 c0             	setne  al
c00061b2:	21 d0                	and    eax,edx
c00061b4:	f7 d8                	neg    eax
c00061b6:	eb 03                	jmp    c00061bb <ucscompare+0x77>
c00061b8:	83 c8 ff             	or     eax,0xffffffff
c00061bb:	83 c4 1c             	add    esp,0x1c
c00061be:	5b                   	pop    ebx
c00061bf:	5e                   	pop    esi
c00061c0:	5f                   	pop    edi
c00061c1:	5d                   	pop    ebp
c00061c2:	c3                   	ret    

c00061c3 <fncompare>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 c7                	mov    edi,eax
c00061c7:	56                   	push   esi
c00061c8:	89 ce                	mov    esi,ecx
c00061ca:	53                   	push   ebx
c00061cb:	31 db                	xor    ebx,ebx
c00061cd:	83 ec 1c             	sub    esp,0x1c
c00061d0:	39 d3                	cmp    ebx,edx
c00061d2:	7d 45                	jge    c0006219 <fncompare+0x56>
c00061d4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00061d8:	83 f8 3b             	cmp    eax,0x3b
c00061db:	74 3c                	je     c0006219 <fncompare+0x56>
c00061dd:	83 f8 2e             	cmp    eax,0x2e
c00061e0:	75 0e                	jne    c00061f0 <fncompare+0x2d>
c00061e2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00061e5:	39 d9                	cmp    ecx,ebx
c00061e7:	74 30                	je     c0006219 <fncompare+0x56>
c00061e9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00061ee:	74 29                	je     c0006219 <fncompare+0x56>
c00061f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061f4:	83 ec 0c             	sub    esp,0xc
c00061f7:	50                   	push   eax
c00061f8:	e8 83 a7 ff ff       	call   c0000980 <tolower>
c00061fd:	89 c5                	mov    ebp,eax
c00061ff:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006203:	89 04 24             	mov    DWORD PTR [esp],eax
c0006206:	e8 75 a7 ff ff       	call   c0000980 <tolower>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	39 c5                	cmp    ebp,eax
c0006210:	75 1e                	jne    c0006230 <fncompare+0x6d>
c0006212:	43                   	inc    ebx
c0006213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006217:	eb b7                	jmp    c00061d0 <fncompare+0xd>
c0006219:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c000621d:	83 fa 2f             	cmp    edx,0x2f
c0006220:	0f 95 c1             	setne  cl
c0006223:	31 c0                	xor    eax,eax
c0006225:	85 d2                	test   edx,edx
c0006227:	0f 95 c0             	setne  al
c000622a:	21 c8                	and    eax,ecx
c000622c:	f7 d8                	neg    eax
c000622e:	eb 03                	jmp    c0006233 <fncompare+0x70>
c0006230:	83 c8 ff             	or     eax,0xffffffff
c0006233:	83 c4 1c             	add    esp,0x1c
c0006236:	5b                   	pop    ebx
c0006237:	5e                   	pop    esi
c0006238:	5f                   	pop    edi
c0006239:	5d                   	pop    ebp
c000623a:	c3                   	ret    

c000623b <bclear_cache>:
c000623b:	83 ec 18             	sub    esp,0x18
c000623e:	68 40 f9 02 c0       	push   0xc002f940
c0006243:	e8 2c 30 02 00       	call   c0029274 <iso_kprintf>
c0006248:	83 c4 10             	add    esp,0x10
c000624b:	31 c0                	xor    eax,eax
c000624d:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006254:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000625a:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006261:	40                   	inc    eax
c0006262:	83 f8 10             	cmp    eax,0x10
c0006265:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000626b:	75 e0                	jne    c000624d <bclear_cache+0x12>
c000626d:	83 c4 0c             	add    esp,0xc
c0006270:	c3                   	ret    

c0006271 <bclear>:
c0006271:	eb c8                	jmp    c000623b <bclear_cache>

c0006273 <iso_break_all>:
c0006273:	83 ec 18             	sub    esp,0x18
c0006276:	68 4e f9 02 c0       	push   0xc002f94e
c000627b:	e8 f4 2f 02 00       	call   c0029274 <iso_kprintf>
c0006280:	83 c4 10             	add    esp,0x10
c0006283:	31 c0                	xor    eax,eax
c0006285:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000628f:	05 94 00 00 00       	add    eax,0x94
c0006294:	3d 40 09 00 00       	cmp    eax,0x940
c0006299:	75 ea                	jne    c0006285 <iso_break_all+0x12>
c000629b:	83 c4 0c             	add    esp,0xc
c000629e:	c3                   	ret    

c000629f <isoReadDiscSector>:
c000629f:	83 ec 0c             	sub    esp,0xc
c00062a2:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00062a9:	50                   	push   eax
c00062aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062b6:	e8 5d 2f 02 00       	call   c0029218 <isoReadDiscSectorHelper>
c00062bb:	83 c4 1c             	add    esp,0x1c
c00062be:	c3                   	ret    

c00062bf <bread_cache>:
c00062bf:	55                   	push   ebp
c00062c0:	57                   	push   edi
c00062c1:	89 d7                	mov    edi,edx
c00062c3:	56                   	push   esi
c00062c4:	ba 0f 00 00 00       	mov    edx,0xf
c00062c9:	53                   	push   ebx
c00062ca:	89 c6                	mov    esi,eax
c00062cc:	83 ec 0c             	sub    esp,0xc
c00062cf:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00062d2:	39 38                	cmp    DWORD PTR [eax],edi
c00062d4:	74 3c                	je     c0006312 <bread_cache+0x53>
c00062d6:	4a                   	dec    edx
c00062d7:	83 fa ff             	cmp    edx,0xffffffff
c00062da:	75 f3                	jne    c00062cf <bread_cache+0x10>
c00062dc:	31 db                	xor    ebx,ebx
c00062de:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00062e1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00062e4:	74 08                	je     c00062ee <bread_cache+0x2f>
c00062e6:	43                   	inc    ebx
c00062e7:	83 fb 10             	cmp    ebx,0x10
c00062ea:	75 f2                	jne    c00062de <bread_cache+0x1f>
c00062ec:	31 db                	xor    ebx,ebx
c00062ee:	50                   	push   eax
c00062ef:	6a 01                	push   0x1
c00062f1:	57                   	push   edi
c00062f2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00062f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062f8:	83 c0 04             	add    eax,0x4
c00062fb:	50                   	push   eax
c00062fc:	e8 9e ff ff ff       	call   c000629f <isoReadDiscSector>
c0006301:	83 c4 10             	add    esp,0x10
c0006304:	83 c9 ff             	or     ecx,0xffffffff
c0006307:	85 c0                	test   eax,eax
c0006309:	78 13                	js     c000631e <bread_cache+0x5f>
c000630b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000630e:	89 da                	mov    edx,ebx
c0006310:	89 38                	mov    DWORD PTR [eax],edi
c0006312:	89 f0                	mov    eax,esi
c0006314:	e8 0f fe ff ff       	call   c0006128 <bgrad_cache>
c0006319:	b9 0f 00 00 00       	mov    ecx,0xf
c000631e:	83 c4 0c             	add    esp,0xc
c0006321:	89 c8                	mov    eax,ecx
c0006323:	5b                   	pop    ebx
c0006324:	5e                   	pop    esi
c0006325:	5f                   	pop    edi
c0006326:	5d                   	pop    ebp
c0006327:	c3                   	ret    

c0006328 <biread>:
c0006328:	89 c2                	mov    edx,eax
c000632a:	b8 80 60 03 c0       	mov    eax,0xc0036080
c000632f:	eb 8e                	jmp    c00062bf <bread_cache>

c0006331 <bdread>:
c0006331:	89 c2                	mov    edx,eax
c0006333:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006338:	eb 85                	jmp    c00062bf <bread_cache>

c000633a <strnicmp>:
c000633a:	55                   	push   ebp
c000633b:	57                   	push   edi
c000633c:	31 ff                	xor    edi,edi
c000633e:	56                   	push   esi
c000633f:	53                   	push   ebx
c0006340:	83 ec 0c             	sub    esp,0xc
c0006343:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006347:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000634b:	74 43                	je     c0006390 <strnicmp+0x56>
c000634d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006351:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006355:	85 c0                	test   eax,eax
c0006357:	74 37                	je     c0006390 <strnicmp+0x56>
c0006359:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000635d:	85 d2                	test   edx,edx
c000635f:	74 2f                	je     c0006390 <strnicmp+0x56>
c0006361:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006364:	39 d0                	cmp    eax,edx
c0006366:	75 04                	jne    c000636c <strnicmp+0x32>
c0006368:	89 ef                	mov    edi,ebp
c000636a:	eb db                	jmp    c0006347 <strnicmp+0xd>
c000636c:	83 ec 0c             	sub    esp,0xc
c000636f:	50                   	push   eax
c0006370:	e8 0b a6 ff ff       	call   c0000980 <tolower>
c0006375:	89 c3                	mov    ebx,eax
c0006377:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000637b:	89 ef                	mov    edi,ebp
c000637d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006380:	e8 fb a5 ff ff       	call   c0000980 <tolower>
c0006385:	83 c4 10             	add    esp,0x10
c0006388:	29 c3                	sub    ebx,eax
c000638a:	89 d8                	mov    eax,ebx
c000638c:	74 b9                	je     c0006347 <strnicmp+0xd>
c000638e:	eb 02                	jmp    c0006392 <strnicmp+0x58>
c0006390:	31 c0                	xor    eax,eax
c0006392:	83 c4 0c             	add    esp,0xc
c0006395:	5b                   	pop    ebx
c0006396:	5e                   	pop    esi
c0006397:	5f                   	pop    edi
c0006398:	5d                   	pop    ebp
c0006399:	c3                   	ret    

c000639a <find_object>:
c000639a:	55                   	push   ebp
c000639b:	57                   	push   edi
c000639c:	89 c7                	mov    edi,eax
c000639e:	56                   	push   esi
c000639f:	53                   	push   ebx
c00063a0:	89 d3                	mov    ebx,edx
c00063a2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00063a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00063ac:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00063b3:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00063ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00063be:	74 0b                	je     c00063cb <find_object+0x31>
c00063c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063c4:	89 fa                	mov    edx,edi
c00063c6:	e8 89 fc ff ff       	call   c0006054 <utf2ucs>
c00063cb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00063ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00063d7:	7e 11                	jle    c00063ea <find_object+0x50>
c00063d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063dd:	e8 46 ff ff ff       	call   c0006328 <biread>
c00063e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063e6:	85 c0                	test   eax,eax
c00063e8:	79 07                	jns    c00063f1 <find_object+0x57>
c00063ea:	31 db                	xor    ebx,ebx
c00063ec:	e9 47 01 00 00       	jmp    c0006538 <find_object+0x19e>
c00063f1:	31 ed                	xor    ebp,ebp
c00063f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00063f7:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00063fe:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006402:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006405:	85 f6                	test   esi,esi
c0006407:	75 0e                	jne    c0006417 <find_object+0x7d>
c0006409:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000640d:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006415:	eb bb                	jmp    c00063d2 <find_object+0x38>
c0006417:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c000641d:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006421:	85 c9                	test   ecx,ecx
c0006423:	89 d0                	mov    eax,edx
c0006425:	74 2b                	je     c0006452 <find_object+0xb8>
c0006427:	8d 43 21             	lea    eax,[ebx+0x21]
c000642a:	89 d1                	mov    ecx,edx
c000642c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006430:	e8 0f fd ff ff       	call   c0006144 <ucscompare>
c0006435:	85 c0                	test   eax,eax
c0006437:	0f 84 cd 00 00 00    	je     c000650a <find_object+0x170>
c000643d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006440:	01 c5                	add    ebp,eax
c0006442:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006448:	7f bf                	jg     c0006409 <find_object+0x6f>
c000644a:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c000644e:	7f a3                	jg     c00063f3 <find_object+0x59>
c0006450:	eb b7                	jmp    c0006409 <find_object+0x6f>
c0006452:	29 d6                	sub    esi,edx
c0006454:	a8 01                	test   al,0x1
c0006456:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000645a:	74 05                	je     c0006461 <find_object+0xc7>
c000645c:	83 ee 21             	sub    esi,0x21
c000645f:	eb 6a                	jmp    c00064cb <find_object+0x131>
c0006461:	42                   	inc    edx
c0006462:	83 ee 22             	sub    esi,0x22
c0006465:	eb 64                	jmp    c00064cb <find_object+0x131>
c0006467:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000646a:	48                   	dec    eax
c000646b:	3c 01                	cmp    al,0x1
c000646d:	77 61                	ja     c00064d0 <find_object+0x136>
c000646f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006473:	50                   	push   eax
c0006474:	6a 02                	push   0x2
c0006476:	68 5d f9 02 c0       	push   0xc002f95d
c000647b:	52                   	push   edx
c000647c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006480:	e8 8b a3 ff ff       	call   c0000810 <strncmp>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000648c:	85 c0                	test   eax,eax
c000648e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006492:	75 2f                	jne    c00064c3 <find_object+0x129>
c0006494:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c0006498:	50                   	push   eax
c0006499:	8d 42 05             	lea    eax,[edx+0x5]
c000649c:	83 e9 05             	sub    ecx,0x5
c000649f:	51                   	push   ecx
c00064a0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00064a4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00064a8:	50                   	push   eax
c00064a9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064ad:	50                   	push   eax
c00064ae:	e8 dd a1 ff ff       	call   c0000690 <strncpy>
c00064b3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00064b7:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00064bc:	83 c4 10             	add    esp,0x10
c00064bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00064c3:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00064c7:	29 c6                	sub    esi,eax
c00064c9:	01 c2                	add    edx,eax
c00064cb:	83 fe 03             	cmp    esi,0x3
c00064ce:	7f 97                	jg     c0006467 <find_object+0xcd>
c00064d0:	85 c9                	test   ecx,ecx
c00064d2:	7e 40                	jle    c0006514 <find_object+0x17a>
c00064d4:	51                   	push   ecx
c00064d5:	51                   	push   ecx
c00064d6:	6a 2f                	push   0x2f
c00064d8:	57                   	push   edi
c00064d9:	e8 f2 a2 ff ff       	call   c00007d0 <strchr>
c00064de:	83 c4 10             	add    esp,0x10
c00064e1:	85 c0                	test   eax,eax
c00064e3:	74 04                	je     c00064e9 <find_object+0x14f>
c00064e5:	29 f8                	sub    eax,edi
c00064e7:	eb 0c                	jmp    c00064f5 <find_object+0x15b>
c00064e9:	83 ec 0c             	sub    esp,0xc
c00064ec:	57                   	push   edi
c00064ed:	e8 8e a0 ff ff       	call   c0000580 <strlen>
c00064f2:	83 c4 10             	add    esp,0x10
c00064f5:	52                   	push   edx
c00064f6:	50                   	push   eax
c00064f7:	57                   	push   edi
c00064f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064fc:	50                   	push   eax
c00064fd:	e8 38 fe ff ff       	call   c000633a <strnicmp>
c0006502:	83 c4 10             	add    esp,0x10
c0006505:	e9 2b ff ff ff       	jmp    c0006435 <find_object+0x9b>
c000650a:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000650e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006512:	eb 1e                	jmp    c0006532 <find_object+0x198>
c0006514:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006518:	8d 43 21             	lea    eax,[ebx+0x21]
c000651b:	89 f9                	mov    ecx,edi
c000651d:	e8 a1 fc ff ff       	call   c00061c3 <fncompare>
c0006522:	85 c0                	test   eax,eax
c0006524:	0f 85 13 ff ff ff    	jne    c000643d <find_object+0xa3>
c000652a:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000652e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006532:	0f 85 05 ff ff ff    	jne    c000643d <find_object+0xa3>
c0006538:	81 c4 2c 01 00 00    	add    esp,0x12c
c000653e:	89 d8                	mov    eax,ebx
c0006540:	5b                   	pop    ebx
c0006541:	5e                   	pop    esi
c0006542:	5f                   	pop    edi
c0006543:	5d                   	pop    ebp
c0006544:	c3                   	ret    

c0006545 <find_object_path>:
c0006545:	55                   	push   ebp
c0006546:	57                   	push   edi
c0006547:	89 d7                	mov    edi,edx
c0006549:	56                   	push   esi
c000654a:	89 c6                	mov    esi,eax
c000654c:	53                   	push   ebx
c000654d:	89 cb                	mov    ebx,ecx
c000654f:	83 ec 0c             	sub    esp,0xc
c0006552:	50                   	push   eax
c0006553:	50                   	push   eax
c0006554:	6a 2f                	push   0x2f
c0006556:	56                   	push   esi
c0006557:	e8 74 a2 ff ff       	call   c00007d0 <strchr>
c000655c:	83 c4 10             	add    esp,0x10
c000655f:	85 c0                	test   eax,eax
c0006561:	89 c5                	mov    ebp,eax
c0006563:	74 3a                	je     c000659f <find_object_path+0x5a>
c0006565:	39 ee                	cmp    esi,ebp
c0006567:	74 31                	je     c000659a <find_object_path+0x55>
c0006569:	8d 43 0a             	lea    eax,[ebx+0xa]
c000656c:	e8 b5 fb ff ff       	call   c0006126 <iso_733>
c0006571:	89 c2                	mov    edx,eax
c0006573:	8d 43 02             	lea    eax,[ebx+0x2]
c0006576:	e8 ab fb ff ff       	call   c0006126 <iso_733>
c000657b:	83 ec 0c             	sub    esp,0xc
c000657e:	52                   	push   edx
c000657f:	89 c1                	mov    ecx,eax
c0006581:	ba 01 00 00 00       	mov    edx,0x1
c0006586:	89 f0                	mov    eax,esi
c0006588:	e8 0d fe ff ff       	call   c000639a <find_object>
c000658d:	83 c4 10             	add    esp,0x10
c0006590:	85 c0                	test   eax,eax
c0006592:	89 c3                	mov    ebx,eax
c0006594:	75 04                	jne    c000659a <find_object_path+0x55>
c0006596:	31 db                	xor    ebx,ebx
c0006598:	eb 36                	jmp    c00065d0 <find_object_path+0x8b>
c000659a:	8d 75 01             	lea    esi,[ebp+0x1]
c000659d:	eb b3                	jmp    c0006552 <find_object_path+0xd>
c000659f:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00065a2:	74 28                	je     c00065cc <find_object_path+0x87>
c00065a4:	8d 43 0a             	lea    eax,[ebx+0xa]
c00065a7:	e8 7a fb ff ff       	call   c0006126 <iso_733>
c00065ac:	89 c2                	mov    edx,eax
c00065ae:	8d 43 02             	lea    eax,[ebx+0x2]
c00065b1:	e8 70 fb ff ff       	call   c0006126 <iso_733>
c00065b6:	83 ec 0c             	sub    esp,0xc
c00065b9:	52                   	push   edx
c00065ba:	89 c1                	mov    ecx,eax
c00065bc:	89 fa                	mov    edx,edi
c00065be:	89 f0                	mov    eax,esi
c00065c0:	e8 d5 fd ff ff       	call   c000639a <find_object>
c00065c5:	83 c4 10             	add    esp,0x10
c00065c8:	89 c3                	mov    ebx,eax
c00065ca:	eb 04                	jmp    c00065d0 <find_object_path+0x8b>
c00065cc:	85 ff                	test   edi,edi
c00065ce:	74 c6                	je     c0006596 <find_object_path+0x51>
c00065d0:	83 c4 0c             	add    esp,0xc
c00065d3:	89 d8                	mov    eax,ebx
c00065d5:	5b                   	pop    ebx
c00065d6:	5e                   	pop    esi
c00065d7:	5f                   	pop    edi
c00065d8:	5d                   	pop    ebp
c00065d9:	c3                   	ret    

c00065da <stricmp>:
c00065da:	57                   	push   edi
c00065db:	56                   	push   esi
c00065dc:	31 f6                	xor    esi,esi
c00065de:	53                   	push   ebx
c00065df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065e3:	83 ec 0c             	sub    esp,0xc
c00065e6:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00065f2:	46                   	inc    esi
c00065f3:	50                   	push   eax
c00065f4:	e8 67 a3 ff ff       	call   c0000960 <toupper>
c00065f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00065fc:	e8 7f a3 ff ff       	call   c0000980 <tolower>
c0006601:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006604:	89 c3                	mov    ebx,eax
c0006606:	e8 55 a3 ff ff       	call   c0000960 <toupper>
c000660b:	89 04 24             	mov    DWORD PTR [esp],eax
c000660e:	e8 6d a3 ff ff       	call   c0000980 <tolower>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	39 c3                	cmp    ebx,eax
c0006618:	75 04                	jne    c000661e <stricmp+0x44>
c000661a:	85 db                	test   ebx,ebx
c000661c:	75 c1                	jne    c00065df <stricmp+0x5>
c000661e:	29 c3                	sub    ebx,eax
c0006620:	89 d8                	mov    eax,ebx
c0006622:	5b                   	pop    ebx
c0006623:	5e                   	pop    esi
c0006624:	5f                   	pop    edi
c0006625:	c3                   	ret    

c0006626 <iso_open>:
c0006626:	57                   	push   edi
c0006627:	31 c0                	xor    eax,eax
c0006629:	56                   	push   esi
c000662a:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c000662f:	53                   	push   ebx
c0006630:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006635:	0f 95 c0             	setne  al
c0006638:	89 c2                	mov    edx,eax
c000663a:	89 c6                	mov    esi,eax
c000663c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006640:	e8 00 ff ff ff       	call   c0006545 <find_object_path>
c0006645:	83 ca ff             	or     edx,0xffffffff
c0006648:	85 c0                	test   eax,eax
c000664a:	74 5e                	je     c00066aa <iso_open+0x84>
c000664c:	89 c1                	mov    ecx,eax
c000664e:	31 d2                	xor    edx,edx
c0006650:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006656:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c000665d:	75 42                	jne    c00066a1 <iso_open+0x7b>
c000665f:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006669:	8d 41 02             	lea    eax,[ecx+0x2]
c000666c:	e8 b5 fa ff ff       	call   c0006126 <iso_733>
c0006671:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006677:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006681:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006687:	8d 41 0a             	lea    eax,[ecx+0xa]
c000668a:	e8 97 fa ff ff       	call   c0006126 <iso_733>
c000668f:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006699:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000669f:	eb 09                	jmp    c00066aa <iso_open+0x84>
c00066a1:	42                   	inc    edx
c00066a2:	83 fa 10             	cmp    edx,0x10
c00066a5:	75 a9                	jne    c0006650 <iso_open+0x2a>
c00066a7:	83 ca ff             	or     edx,0xffffffff
c00066aa:	5b                   	pop    ebx
c00066ab:	89 d0                	mov    eax,edx
c00066ad:	5e                   	pop    esi
c00066ae:	5f                   	pop    edi
c00066af:	c3                   	ret    

c00066b0 <iso_close>:
c00066b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00066b4:	83 f8 0f             	cmp    eax,0xf
c00066b7:	7f 10                	jg     c00066c9 <iso_close+0x19>
c00066b9:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00066bf:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00066c9:	e9 6d fb ff ff       	jmp    c000623b <bclear_cache>

c00066ce <iso_read>:
c00066ce:	55                   	push   ebp
c00066cf:	57                   	push   edi
c00066d0:	56                   	push   esi
c00066d1:	53                   	push   ebx
c00066d2:	83 ec 1c             	sub    esp,0x1c
c00066d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00066d9:	83 fd 0f             	cmp    ebp,0xf
c00066dc:	7e 0a                	jle    c00066e8 <iso_read+0x1a>
c00066de:	83 c8 ff             	or     eax,0xffffffff
c00066e1:	89 c2                	mov    edx,eax
c00066e3:	e9 f4 00 00 00       	jmp    c00067dc <iso_read+0x10e>
c00066e8:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00066ee:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00066f5:	74 e7                	je     c00066de <iso_read+0x10>
c00066f7:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00066fd:	85 d2                	test   edx,edx
c00066ff:	75 dd                	jne    c00066de <iso_read+0x10>
c0006701:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006706:	0f 84 cd 00 00 00    	je     c00067d9 <iso_read+0x10b>
c000670c:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006712:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c0006718:	29 c3                	sub    ebx,eax
c000671a:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c000671e:	89 d9                	mov    ecx,ebx
c0006720:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006725:	85 c9                	test   ecx,ecx
c0006727:	0f 84 ac 00 00 00    	je     c00067d9 <iso_read+0x10b>
c000672d:	89 c6                	mov    esi,eax
c000672f:	bb 00 08 00 00       	mov    ebx,0x800
c0006734:	c1 e8 0b             	shr    eax,0xb
c0006737:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000673d:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c0006743:	29 f3                	sub    ebx,esi
c0006745:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000674b:	75 3f                	jne    c000678c <iso_read+0xbe>
c000674d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006753:	7e 37                	jle    c000678c <iso_read+0xbe>
c0006755:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000675b:	be 20 00 00 00       	mov    esi,0x20
c0006760:	7f 05                	jg     c0006767 <iso_read+0x99>
c0006762:	89 ce                	mov    esi,ecx
c0006764:	c1 fe 0b             	sar    esi,0xb
c0006767:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000676b:	89 f3                	mov    ebx,esi
c000676d:	52                   	push   edx
c000676e:	56                   	push   esi
c000676f:	50                   	push   eax
c0006770:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006774:	c1 e3 0b             	shl    ebx,0xb
c0006777:	e8 23 fb ff ff       	call   c000629f <isoReadDiscSector>
c000677c:	83 c4 10             	add    esp,0x10
c000677f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006783:	85 c0                	test   eax,eax
c0006785:	7f 3d                	jg     c00067c4 <iso_read+0xf6>
c0006787:	e9 52 ff ff ff       	jmp    c00066de <iso_read+0x10>
c000678c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006790:	39 d9                	cmp    ecx,ebx
c0006792:	0f 4e d9             	cmovle ebx,ecx
c0006795:	e8 97 fb ff ff       	call   c0006331 <bdread>
c000679a:	85 c0                	test   eax,eax
c000679c:	0f 88 3c ff ff ff    	js     c00066de <iso_read+0x10>
c00067a2:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00067a9:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00067b3:	25 ff 07 00 00       	and    eax,0x7ff
c00067b8:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00067bc:	89 d9                	mov    ecx,ebx
c00067be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00067c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00067c4:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00067c8:	01 da                	add    edx,ebx
c00067ca:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c00067d0:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00067d4:	e9 28 ff ff ff       	jmp    c0006701 <iso_read+0x33>
c00067d9:	89 d0                	mov    eax,edx
c00067db:	99                   	cdq    
c00067dc:	83 c4 1c             	add    esp,0x1c
c00067df:	5b                   	pop    ebx
c00067e0:	5e                   	pop    esi
c00067e1:	5f                   	pop    edi
c00067e2:	5d                   	pop    ebp
c00067e3:	c3                   	ret    

c00067e4 <iso_seek>:
c00067e4:	55                   	push   ebp
c00067e5:	83 c8 ff             	or     eax,0xffffffff
c00067e8:	57                   	push   edi
c00067e9:	89 c2                	mov    edx,eax
c00067eb:	56                   	push   esi
c00067ec:	53                   	push   ebx
c00067ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00067f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00067f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067f9:	83 fe 0f             	cmp    esi,0xf
c00067fc:	7f 65                	jg     c0006863 <iso_seek+0x7f>
c00067fe:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006804:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c000680b:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006811:	74 50                	je     c0006863 <iso_seek+0x7f>
c0006813:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000681a:	75 47                	jne    c0006863 <iso_seek+0x7f>
c000681c:	83 fb 01             	cmp    ebx,0x1
c000681f:	74 0e                	je     c000682f <iso_seek+0x4b>
c0006821:	83 fb 02             	cmp    ebx,0x2
c0006824:	74 0e                	je     c0006834 <iso_seek+0x50>
c0006826:	85 db                	test   ebx,ebx
c0006828:	75 39                	jne    c0006863 <iso_seek+0x7f>
c000682a:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000682d:	eb 0d                	jmp    c000683c <iso_seek+0x58>
c000682f:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006832:	eb 08                	jmp    c000683c <iso_seek+0x58>
c0006834:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006837:	01 f8                	add    eax,edi
c0006839:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000683c:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006842:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006848:	05 20 6d 03 c0       	add    eax,0xc0036d20
c000684d:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006850:	76 03                	jbe    c0006855 <iso_seek+0x71>
c0006852:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006855:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000685b:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006861:	31 d2                	xor    edx,edx
c0006863:	5b                   	pop    ebx
c0006864:	5e                   	pop    esi
c0006865:	5f                   	pop    edi
c0006866:	5d                   	pop    ebp
c0006867:	c3                   	ret    

c0006868 <iso_tell>:
c0006868:	53                   	push   ebx
c0006869:	83 c8 ff             	or     eax,0xffffffff
c000686c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006870:	89 c2                	mov    edx,eax
c0006872:	83 f9 0f             	cmp    ecx,0xf
c0006875:	7f 20                	jg     c0006897 <iso_tell+0x2f>
c0006877:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000687d:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006884:	74 11                	je     c0006897 <iso_tell+0x2f>
c0006886:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c000688d:	75 08                	jne    c0006897 <iso_tell+0x2f>
c000688f:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006895:	31 d2                	xor    edx,edx
c0006897:	5b                   	pop    ebx
c0006898:	c3                   	ret    

c0006899 <iso_total>:
c0006899:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000689d:	83 c8 ff             	or     eax,0xffffffff
c00068a0:	83 fa 0f             	cmp    edx,0xf
c00068a3:	7f 1e                	jg     c00068c3 <iso_total+0x2a>
c00068a5:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00068ab:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c00068b2:	74 0f                	je     c00068c3 <iso_total+0x2a>
c00068b4:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c00068bb:	75 06                	jne    c00068c3 <iso_total+0x2a>
c00068bd:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c00068c3:	c3                   	ret    

c00068c4 <fn_postprocess>:
c00068c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00068c8:	89 d0                	mov    eax,edx
c00068ca:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00068cd:	85 c9                	test   ecx,ecx
c00068cf:	74 08                	je     c00068d9 <fn_postprocess+0x15>
c00068d1:	83 f9 3b             	cmp    ecx,0x3b
c00068d4:	74 03                	je     c00068d9 <fn_postprocess+0x15>
c00068d6:	40                   	inc    eax
c00068d7:	eb f1                	jmp    c00068ca <fn_postprocess+0x6>
c00068d9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00068dc:	39 d0                	cmp    eax,edx
c00068de:	76 0a                	jbe    c00068ea <fn_postprocess+0x26>
c00068e0:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00068e4:	75 04                	jne    c00068ea <fn_postprocess+0x26>
c00068e6:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00068ea:	c3                   	ret    

c00068eb <iso_readdir>:
c00068eb:	55                   	push   ebp
c00068ec:	57                   	push   edi
c00068ed:	56                   	push   esi
c00068ee:	53                   	push   ebx
c00068ef:	83 ec 1c             	sub    esp,0x1c
c00068f2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00068f6:	83 fb 0f             	cmp    ebx,0xf
c00068f9:	7f 28                	jg     c0006923 <iso_readdir+0x38>
c00068fb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006901:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006908:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c000690e:	74 13                	je     c0006923 <iso_readdir+0x38>
c0006910:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006914:	74 0d                	je     c0006923 <iso_readdir+0x38>
c0006916:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c000691d:	0f 84 b1 00 00 00    	je     c00069d4 <iso_readdir+0xe9>
c0006923:	83 ec 0c             	sub    esp,0xc
c0006926:	68 60 f9 02 c0       	push   0xc002f960
c000692b:	e8 44 29 02 00       	call   c0029274 <iso_kprintf>
c0006930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006933:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006939:	e8 52 29 02 00       	call   c0029290 <iso_kprintfd>
c000693e:	c7 04 24 65 f9 02 c0 	mov    DWORD PTR [esp],0xc002f965
c0006945:	e8 2a 29 02 00       	call   c0029274 <iso_kprintf>
c000694a:	58                   	pop    eax
c000694b:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006951:	e8 3a 29 02 00       	call   c0029290 <iso_kprintfd>
c0006956:	c7 04 24 6b f9 02 c0 	mov    DWORD PTR [esp],0xc002f96b
c000695d:	e8 12 29 02 00       	call   c0029274 <iso_kprintf>
c0006962:	58                   	pop    eax
c0006963:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006969:	e8 22 29 02 00       	call   c0029290 <iso_kprintfd>
c000696e:	c7 04 24 71 f9 02 c0 	mov    DWORD PTR [esp],0xc002f971
c0006975:	e8 fa 28 02 00       	call   c0029274 <iso_kprintf>
c000697a:	58                   	pop    eax
c000697b:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006981:	e8 0a 29 02 00       	call   c0029290 <iso_kprintfd>
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	eb 42                	jmp    c00069cd <iso_readdir+0xe2>
c000698b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000698e:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006995:	89 d1                	mov    ecx,edx
c0006997:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000699d:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00069a1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00069a4:	75 35                	jne    c00069db <iso_readdir+0xf0>
c00069a6:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00069ac:	81 c2 00 08 00 00    	add    edx,0x800
c00069b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00069b5:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00069b8:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00069bb:	73 1e                	jae    c00069db <iso_readdir+0xf0>
c00069bd:	8b 07                	mov    eax,DWORD PTR [edi]
c00069bf:	c1 ea 0b             	shr    edx,0xb
c00069c2:	01 d0                	add    eax,edx
c00069c4:	e8 5f f9 ff ff       	call   c0006328 <biread>
c00069c9:	85 c0                	test   eax,eax
c00069cb:	79 be                	jns    c000698b <iso_readdir+0xa0>
c00069cd:	31 c0                	xor    eax,eax
c00069cf:	e9 6a 01 00 00       	jmp    c0006b3e <iso_readdir+0x253>
c00069d4:	31 f6                	xor    esi,esi
c00069d6:	83 c8 ff             	or     eax,0xffffffff
c00069d9:	eb da                	jmp    c00069b5 <iso_readdir+0xca>
c00069db:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00069e1:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c00069e7:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c00069ed:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00069f0:	73 db                	jae    c00069cd <iso_readdir+0xe2>
c00069f2:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00069f6:	75 34                	jne    c0006a2c <iso_readdir+0x141>
c00069f8:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00069fc:	75 2e                	jne    c0006a2c <iso_readdir+0x141>
c00069fe:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006a01:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a08:	01 f9                	add    ecx,edi
c0006a0a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006a0d:	89 c8                	mov    eax,ecx
c0006a0f:	25 ff 07 00 00       	and    eax,0x7ff
c0006a14:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006a19:	01 c8                	add    eax,ecx
c0006a1b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006a1e:	25 ff 07 00 00       	and    eax,0x7ff
c0006a23:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006a27:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a2a:	74 a1                	je     c00069cd <iso_readdir+0xe2>
c0006a2c:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006a32:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006a36:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006a3d:	8d 56 21             	lea    edx,[esi+0x21]
c0006a40:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006a46:	74 0c                	je     c0006a54 <iso_readdir+0x169>
c0006a48:	89 e8                	mov    eax,ebp
c0006a4a:	e8 27 f6 ff ff       	call   c0006076 <ucs2utfn>
c0006a4f:	e9 b1 00 00 00       	jmp    c0006b05 <iso_readdir+0x21a>
c0006a54:	50                   	push   eax
c0006a55:	51                   	push   ecx
c0006a56:	52                   	push   edx
c0006a57:	55                   	push   ebp
c0006a58:	e8 33 9c ff ff       	call   c0000690 <strncpy>
c0006a5d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006a61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a64:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006a6c:	e8 53 fe ff ff       	call   c00068c4 <fn_postprocess>
c0006a71:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a75:	83 c4 10             	add    esp,0x10
c0006a78:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a7b:	89 d1                	mov    ecx,edx
c0006a7d:	29 d0                	sub    eax,edx
c0006a7f:	80 e1 01             	and    cl,0x1
c0006a82:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006a86:	74 05                	je     c0006a8d <iso_readdir+0x1a2>
c0006a88:	83 e8 21             	sub    eax,0x21
c0006a8b:	eb 04                	jmp    c0006a91 <iso_readdir+0x1a6>
c0006a8d:	42                   	inc    edx
c0006a8e:	83 e8 22             	sub    eax,0x22
c0006a91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a95:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006a9f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006aa4:	7e 5f                	jle    c0006b05 <iso_readdir+0x21a>
c0006aa6:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006aa9:	48                   	dec    eax
c0006aaa:	3c 01                	cmp    al,0x1
c0006aac:	77 57                	ja     c0006b05 <iso_readdir+0x21a>
c0006aae:	51                   	push   ecx
c0006aaf:	6a 02                	push   0x2
c0006ab1:	68 5d f9 02 c0       	push   0xc002f95d
c0006ab6:	52                   	push   edx
c0006ab7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006abb:	e8 50 9d ff ff       	call   c0000810 <strncmp>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	75 2e                	jne    c0006af9 <iso_readdir+0x20e>
c0006acb:	50                   	push   eax
c0006acc:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006ad0:	83 e8 05             	sub    eax,0x5
c0006ad3:	50                   	push   eax
c0006ad4:	8d 42 05             	lea    eax,[edx+0x5]
c0006ad7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006adb:	50                   	push   eax
c0006adc:	55                   	push   ebp
c0006add:	e8 ae 9b ff ff       	call   c0000690 <strncpy>
c0006ae2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006ae6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006aea:	83 c4 10             	add    esp,0x10
c0006aed:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006af1:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006af9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006afd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006b01:	01 c2                	add    edx,eax
c0006b03:	eb 9a                	jmp    c0006a9f <iso_readdir+0x1b4>
c0006b05:	83 c8 ff             	or     eax,0xffffffff
c0006b08:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006b0c:	89 c2                	mov    edx,eax
c0006b0e:	75 0a                	jne    c0006b1a <iso_readdir+0x22f>
c0006b10:	8d 46 0a             	lea    eax,[esi+0xa]
c0006b13:	e8 0e f6 ff ff       	call   c0006126 <iso_733>
c0006b18:	31 d2                	xor    edx,edx
c0006b1a:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b20:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006b26:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006b2c:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006b32:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b35:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006b38:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006b3e:	83 c4 1c             	add    esp,0x1c
c0006b41:	5b                   	pop    ebx
c0006b42:	5e                   	pop    esi
c0006b43:	5f                   	pop    edi
c0006b44:	5d                   	pop    ebp
c0006b45:	c3                   	ret    

c0006b46 <iso_reset>:
c0006b46:	83 ec 18             	sub    esp,0x18
c0006b49:	68 7a f9 02 c0       	push   0xc002f97a
c0006b4e:	e8 21 27 02 00       	call   c0029274 <iso_kprintf>
c0006b53:	e8 1b f7 ff ff       	call   c0006273 <iso_break_all>
c0006b58:	e8 14 f7 ff ff       	call   c0006271 <bclear>
c0006b5d:	31 c0                	xor    eax,eax
c0006b5f:	83 c4 1c             	add    esp,0x1c
c0006b62:	c3                   	ret    

c0006b63 <init_percd>:
c0006b63:	57                   	push   edi
c0006b64:	56                   	push   esi
c0006b65:	53                   	push   ebx
c0006b66:	bb 01 00 00 00       	mov    ebx,0x1
c0006b6b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006b6f:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b74:	e8 cd ff ff ff       	call   c0006b46 <iso_reset>
c0006b79:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b83:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b88:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b8c:	e8 97 f7 ff ff       	call   c0006328 <biread>
c0006b91:	85 c0                	test   eax,eax
c0006b93:	89 c6                	mov    esi,eax
c0006b95:	0f 88 ba 00 00 00    	js     c0006c55 <init_percd+0xf2>
c0006b9b:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006ba2:	52                   	push   edx
c0006ba3:	6a 06                	push   0x6
c0006ba5:	68 85 f9 02 c0       	push   0xc002f985
c0006baa:	83 c0 04             	add    eax,0x4
c0006bad:	50                   	push   eax
c0006bae:	e8 cd 97 ff ff       	call   c0000380 <memcmp>
c0006bb3:	83 c4 10             	add    esp,0x10
c0006bb6:	85 c0                	test   eax,eax
c0006bb8:	74 08                	je     c0006bc2 <init_percd+0x5f>
c0006bba:	43                   	inc    ebx
c0006bbb:	83 fb 04             	cmp    ebx,0x4
c0006bbe:	75 c3                	jne    c0006b83 <init_percd+0x20>
c0006bc0:	eb 1a                	jmp    c0006bdc <init_percd+0x79>
c0006bc2:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bc9:	83 c0 5c             	add    eax,0x5c
c0006bcc:	e8 22 f5 ff ff       	call   c00060f3 <isjoliet>
c0006bd1:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006bd6:	85 c0                	test   eax,eax
c0006bd8:	74 e0                	je     c0006bba <init_percd+0x57>
c0006bda:	eb 3e                	jmp    c0006c1a <init_percd+0xb7>
c0006bdc:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006be3:	75 35                	jne    c0006c1a <init_percd+0xb7>
c0006be5:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006bea:	83 c0 10             	add    eax,0x10
c0006bed:	e8 36 f7 ff ff       	call   c0006328 <biread>
c0006bf2:	85 c0                	test   eax,eax
c0006bf4:	89 c6                	mov    esi,eax
c0006bf6:	78 5f                	js     c0006c57 <init_percd+0xf4>
c0006bf8:	50                   	push   eax
c0006bf9:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c00:	83 cb ff             	or     ebx,0xffffffff
c0006c03:	6a 06                	push   0x6
c0006c05:	68 8c f9 02 c0       	push   0xc002f98c
c0006c0a:	83 c0 04             	add    eax,0x4
c0006c0d:	50                   	push   eax
c0006c0e:	e8 6d 97 ff ff       	call   c0000380 <memcmp>
c0006c13:	83 c4 10             	add    esp,0x10
c0006c16:	85 c0                	test   eax,eax
c0006c18:	75 3d                	jne    c0006c57 <init_percd+0xf4>
c0006c1a:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006c21:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006c26:	b9 22 00 00 00       	mov    ecx,0x22
c0006c2b:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006c31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c33:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006c38:	31 db                	xor    ebx,ebx
c0006c3a:	e8 e7 f4 ff ff       	call   c0006126 <iso_733>
c0006c3f:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006c44:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006c49:	e8 d8 f4 ff ff       	call   c0006126 <iso_733>
c0006c4e:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006c53:	eb 02                	jmp    c0006c57 <init_percd+0xf4>
c0006c55:	89 c3                	mov    ebx,eax
c0006c57:	89 d8                	mov    eax,ebx
c0006c59:	5b                   	pop    ebx
c0006c5a:	5e                   	pop    esi
c0006c5b:	5f                   	pop    edi
c0006c5c:	c3                   	ret    

c0006c5d <iso_ioctl>:
c0006c5d:	83 ec 18             	sub    esp,0x18
c0006c60:	68 93 f9 02 c0       	push   0xc002f993
c0006c65:	e8 0a 26 02 00       	call   c0029274 <iso_kprintf>
c0006c6a:	e8 d7 fe ff ff       	call   c0006b46 <iso_reset>
c0006c6f:	31 c0                	xor    eax,eax
c0006c71:	83 c4 1c             	add    esp,0x1c
c0006c74:	c3                   	ret    

c0006c75 <fs_iso9660_init>:
c0006c75:	53                   	push   ebx
c0006c76:	31 db                	xor    ebx,ebx
c0006c78:	83 ec 14             	sub    esp,0x14
c0006c7b:	68 9e f9 02 c0       	push   0xc002f99e
c0006c80:	e8 ef 25 02 00       	call   c0029274 <iso_kprintf>
c0006c85:	83 c4 0c             	add    esp,0xc
c0006c88:	68 40 09 00 00       	push   0x940
c0006c8d:	6a 00                	push   0x0
c0006c8f:	68 20 6d 03 c0       	push   0xc0036d20
c0006c94:	e8 57 98 ff ff       	call   c00004f0 <memset>
c0006c99:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006ca3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006caa:	e8 2c f7 00 00       	call   c00163db <malloc>
c0006caf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006cb6:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006cbb:	e8 1b f7 00 00       	call   c00163db <malloc>
c0006cc0:	83 c4 10             	add    esp,0x10
c0006cc3:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006cc8:	83 ec 0c             	sub    esp,0xc
c0006ccb:	68 04 08 00 00       	push   0x804
c0006cd0:	e8 06 f7 00 00       	call   c00163db <malloc>
c0006cd5:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006cdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006ce2:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006ce9:	e8 ed f6 00 00       	call   c00163db <malloc>
c0006cee:	83 c4 10             	add    esp,0x10
c0006cf1:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006cf8:	43                   	inc    ebx
c0006cf9:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cff:	83 fb 10             	cmp    ebx,0x10
c0006d02:	75 c4                	jne    c0006cc8 <fs_iso9660_init+0x53>
c0006d04:	83 c4 08             	add    esp,0x8
c0006d07:	31 c0                	xor    eax,eax
c0006d09:	5b                   	pop    ebx
c0006d0a:	c3                   	ret    

c0006d0b <fs_iso9660_shutdown>:
c0006d0b:	53                   	push   ebx
c0006d0c:	31 db                	xor    ebx,ebx
c0006d0e:	83 ec 08             	sub    esp,0x8
c0006d11:	83 ec 0c             	sub    esp,0xc
c0006d14:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006d1b:	e8 cb f6 00 00       	call   c00163eb <free>
c0006d20:	58                   	pop    eax
c0006d21:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006d28:	43                   	inc    ebx
c0006d29:	e8 bd f6 00 00       	call   c00163eb <free>
c0006d2e:	83 c4 10             	add    esp,0x10
c0006d31:	83 fb 10             	cmp    ebx,0x10
c0006d34:	75 db                	jne    c0006d11 <fs_iso9660_shutdown+0x6>
c0006d36:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006d3b:	85 c0                	test   eax,eax
c0006d3d:	74 0c                	je     c0006d4b <fs_iso9660_shutdown+0x40>
c0006d3f:	83 ec 0c             	sub    esp,0xc
c0006d42:	50                   	push   eax
c0006d43:	e8 a3 f6 00 00       	call   c00163eb <free>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006d50:	85 c0                	test   eax,eax
c0006d52:	74 0c                	je     c0006d60 <fs_iso9660_shutdown+0x55>
c0006d54:	83 ec 0c             	sub    esp,0xc
c0006d57:	50                   	push   eax
c0006d58:	e8 8e f6 00 00       	call   c00163eb <free>
c0006d5d:	83 c4 10             	add    esp,0x10
c0006d60:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006d6a:	31 c0                	xor    eax,eax
c0006d6c:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d76:	83 c4 08             	add    esp,0x8
c0006d79:	5b                   	pop    ebx
c0006d7a:	c3                   	ret    
c0006d7b:	90                   	nop

c0006d7c <lwip_init>:
c0006d7c:	83 ec 0c             	sub    esp,0xc
c0006d7f:	e8 5c 2c 00 00       	call   c00099e0 <stats_init>
c0006d84:	e8 8b 9f ff ff       	call   c0000d14 <sys_init>
c0006d89:	e8 ae 01 00 00       	call   c0006f3c <mem_init>
c0006d8e:	e8 09 0a 00 00       	call   c000779c <memp_init>
c0006d93:	e8 ec 0c 00 00       	call   c0007a84 <netif_init>
c0006d98:	e8 d3 9e ff ff       	call   c0000c70 <lwip_socket_init>
c0006d9d:	e8 06 9e 00 00       	call   c0010ba8 <sys_timeouts_init>
c0006da2:	90                   	nop
c0006da3:	83 c4 0c             	add    esp,0xc
c0006da6:	c3                   	ret    
c0006da7:	90                   	nop

c0006da8 <plug_holes>:
c0006da8:	83 ec 1c             	sub    esp,0x1c
c0006dab:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006db0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006db4:	73 16                	jae    c0006dcc <plug_holes+0x24>
c0006db6:	83 ec 08             	sub    esp,0x8
c0006db9:	68 af f9 02 c0       	push   0xc002f9af
c0006dbe:	68 c6 f9 02 c0       	push   0xc002f9c6
c0006dc3:	e8 00 8d 01 00       	call   c001fac8 <CPrintf>
c0006dc8:	83 c4 10             	add    esp,0x10
c0006dcb:	90                   	nop
c0006dcc:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006dd1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006dd5:	72 15                	jb     c0006dec <plug_holes+0x44>
c0006dd7:	83 ec 08             	sub    esp,0x8
c0006dda:	68 d3 f9 02 c0       	push   0xc002f9d3
c0006ddf:	68 c6 f9 02 c0       	push   0xc002f9c6
c0006de4:	e8 df 8c 01 00       	call   c001fac8 <CPrintf>
c0006de9:	83 c4 10             	add    esp,0x10
c0006dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006df0:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006df3:	0f b6 c0             	movzx  eax,al
c0006df6:	85 c0                	test   eax,eax
c0006df8:	74 16                	je     c0006e10 <plug_holes+0x68>
c0006dfa:	83 ec 08             	sub    esp,0x8
c0006dfd:	68 ed f9 02 c0       	push   0xc002f9ed
c0006e02:	68 c6 f9 02 c0       	push   0xc002f9c6
c0006e07:	e8 bc 8c 01 00       	call   c001fac8 <CPrintf>
c0006e0c:	83 c4 10             	add    esp,0x10
c0006e0f:	90                   	nop
c0006e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e14:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e17:	0f b7 c0             	movzx  eax,ax
c0006e1a:	3d 40 06 00 00       	cmp    eax,0x640
c0006e1f:	76 17                	jbe    c0006e38 <plug_holes+0x90>
c0006e21:	83 ec 08             	sub    esp,0x8
c0006e24:	68 80 fa 02 c0       	push   0xc002fa80
c0006e29:	68 c6 f9 02 c0       	push   0xc002f9c6
c0006e2e:	e8 95 8c 01 00       	call   c001fac8 <CPrintf>
c0006e33:	83 c4 10             	add    esp,0x10
c0006e36:	66 90                	xchg   ax,ax
c0006e38:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e42:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e45:	0f b7 c0             	movzx  eax,ax
c0006e48:	01 d0                	add    eax,edx
c0006e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e52:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006e56:	74 64                	je     c0006ebc <plug_holes+0x114>
c0006e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e5c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e5f:	0f b6 c0             	movzx  eax,al
c0006e62:	85 c0                	test   eax,eax
c0006e64:	75 56                	jne    c0006ebc <plug_holes+0x114>
c0006e66:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e6b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e6f:	74 4b                	je     c0006ebc <plug_holes+0x114>
c0006e71:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e76:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e7a:	75 0c                	jne    c0006e88 <plug_holes+0xe0>
c0006e7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e80:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e85:	8d 76 00             	lea    esi,[esi+0x0]
c0006e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e8c:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e93:	66 89 10             	mov    WORD PTR [eax],dx
c0006e96:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e9f:	89 d1                	mov    ecx,edx
c0006ea1:	29 c1                	sub    ecx,eax
c0006ea3:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eb0:	0f b7 c0             	movzx  eax,ax
c0006eb3:	01 d0                	add    eax,edx
c0006eb5:	89 ca                	mov    edx,ecx
c0006eb7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006ebb:	90                   	nop
c0006ebc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ec6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006eca:	0f b7 c0             	movzx  eax,ax
c0006ecd:	01 d0                	add    eax,edx
c0006ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ed7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006edb:	74 57                	je     c0006f34 <plug_holes+0x18c>
c0006edd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ee1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ee4:	0f b6 c0             	movzx  eax,al
c0006ee7:	85 c0                	test   eax,eax
c0006ee9:	75 49                	jne    c0006f34 <plug_holes+0x18c>
c0006eeb:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006ef0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ef4:	75 0a                	jne    c0006f00 <plug_holes+0x158>
c0006ef6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efa:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006eff:	90                   	nop
c0006f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f04:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006f07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f0b:	66 89 10             	mov    WORD PTR [eax],dx
c0006f0e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f17:	89 d1                	mov    ecx,edx
c0006f19:	29 c1                	sub    ecx,eax
c0006f1b:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f25:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f28:	0f b7 c0             	movzx  eax,ax
c0006f2b:	01 d0                	add    eax,edx
c0006f2d:	89 ca                	mov    edx,ecx
c0006f2f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006f33:	90                   	nop
c0006f34:	90                   	nop
c0006f35:	83 c4 1c             	add    esp,0x1c
c0006f38:	c3                   	ret    
c0006f39:	8d 76 00             	lea    esi,[esi+0x0]

c0006f3c <mem_init>:
c0006f3c:	83 ec 1c             	sub    esp,0x1c
c0006f3f:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006f49:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f56:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f5f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f69:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f6d:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f72:	05 40 06 00 00       	add    eax,0x640
c0006f77:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f7c:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f81:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f85:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f8a:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f8f:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f94:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006f9a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f9f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006fa4:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006fad:	83 ec 08             	sub    esp,0x8
c0006fb0:	6a 01                	push   0x1
c0006fb2:	68 98 76 03 c0       	push   0xc0037698
c0006fb7:	e8 bc 9c ff ff       	call   c0000c78 <sys_sem_new>
c0006fbc:	83 c4 10             	add    esp,0x10
c0006fbf:	0f be c0             	movsx  eax,al
c0006fc2:	85 c0                	test   eax,eax
c0006fc4:	74 16                	je     c0006fdc <mem_init+0xa0>
c0006fc6:	83 ec 08             	sub    esp,0x8
c0006fc9:	68 08 fa 02 c0       	push   0xc002fa08
c0006fce:	68 c6 f9 02 c0       	push   0xc002f9c6
c0006fd3:	e8 f0 8a 01 00       	call   c001fac8 <CPrintf>
c0006fd8:	83 c4 10             	add    esp,0x10
c0006fdb:	90                   	nop
c0006fdc:	90                   	nop
c0006fdd:	83 c4 1c             	add    esp,0x1c
c0006fe0:	c3                   	ret    
c0006fe1:	8d 76 00             	lea    esi,[esi+0x0]

c0006fe4 <mem_free>:
c0006fe4:	83 ec 1c             	sub    esp,0x1c
c0006fe7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006fec:	0f 84 0e 01 00 00    	je     c0007100 <mem_free+0x11c>
c0006ff2:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ff7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ffb:	72 0b                	jb     c0007008 <mem_free+0x24>
c0006ffd:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007002:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007006:	72 18                	jb     c0007020 <mem_free+0x3c>
c0007008:	83 ec 08             	sub    esp,0x8
c000700b:	68 23 fa 02 c0       	push   0xc002fa23
c0007010:	68 c6 f9 02 c0       	push   0xc002f9c6
c0007015:	e8 ae 8a 01 00       	call   c001fac8 <CPrintf>
c000701a:	83 c4 10             	add    esp,0x10
c000701d:	8d 76 00             	lea    esi,[esi+0x0]
c0007020:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007025:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007029:	72 0d                	jb     c0007038 <mem_free+0x54>
c000702b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007030:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007034:	72 22                	jb     c0007058 <mem_free+0x74>
c0007036:	66 90                	xchg   ax,ax
c0007038:	e8 7b 8a 01 00       	call   c001fab8 <CLockScheduler>
c000703d:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007043:	83 c0 01             	add    eax,0x1
c0007046:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c000704c:	e8 4b 8a 01 00       	call   c001fa9c <CUnlockScheduler>
c0007051:	e9 ae 00 00 00       	jmp    c0007104 <mem_free+0x120>
c0007056:	66 90                	xchg   ax,ax
c0007058:	83 ec 08             	sub    esp,0x8
c000705b:	6a 00                	push   0x0
c000705d:	68 98 76 03 c0       	push   0xc0037698
c0007062:	e8 69 9c ff ff       	call   c0000cd0 <sys_arch_sem_wait>
c0007067:	83 c4 10             	add    esp,0x10
c000706a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000706e:	83 e8 06             	sub    eax,0x6
c0007071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007079:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000707c:	0f b6 c0             	movzx  eax,al
c000707f:	85 c0                	test   eax,eax
c0007081:	75 15                	jne    c0007098 <mem_free+0xb4>
c0007083:	83 ec 08             	sub    esp,0x8
c0007086:	68 3a fa 02 c0       	push   0xc002fa3a
c000708b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0007090:	e8 33 8a 01 00       	call   c001fac8 <CPrintf>
c0007095:	83 c4 10             	add    esp,0x10
c0007098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000709c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00070a0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070a9:	73 09                	jae    c00070b4 <mem_free+0xd0>
c00070ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070af:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070b4:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c00070bb:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070c4:	29 c1                	sub    ecx,eax
c00070c6:	89 c8                	mov    eax,ecx
c00070c8:	89 c1                	mov    ecx,eax
c00070ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ce:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070d1:	29 c1                	sub    ecx,eax
c00070d3:	89 c8                	mov    eax,ecx
c00070d5:	01 d0                	add    eax,edx
c00070d7:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00070dd:	83 ec 0c             	sub    esp,0xc
c00070e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070e4:	e8 bf fc ff ff       	call   c0006da8 <plug_holes>
c00070e9:	83 c4 10             	add    esp,0x10
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	68 98 76 03 c0       	push   0xc0037698
c00070f4:	e8 bf 9b ff ff       	call   c0000cb8 <sys_sem_signal>
c00070f9:	83 c4 10             	add    esp,0x10
c00070fc:	eb 06                	jmp    c0007104 <mem_free+0x120>
c00070fe:	66 90                	xchg   ax,ax
c0007100:	90                   	nop
c0007101:	8d 76 00             	lea    esi,[esi+0x0]
c0007104:	83 c4 1c             	add    esp,0x1c
c0007107:	c3                   	ret    

c0007108 <mem_trim>:
c0007108:	83 ec 2c             	sub    esp,0x2c
c000710b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000710f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007114:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007119:	83 f8 0b             	cmp    eax,0xb
c000711c:	77 0a                	ja     c0007128 <mem_trim+0x20>
c000711e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007125:	8d 76 00             	lea    esi,[esi+0x0]
c0007128:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000712d:	3d 40 06 00 00       	cmp    eax,0x640
c0007132:	76 0c                	jbe    c0007140 <mem_trim+0x38>
c0007134:	b8 00 00 00 00       	mov    eax,0x0
c0007139:	e9 d6 02 00 00       	jmp    c0007414 <mem_trim+0x30c>
c000713e:	66 90                	xchg   ax,ax
c0007140:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007145:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007149:	72 0d                	jb     c0007158 <mem_trim+0x50>
c000714b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007150:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007154:	72 1a                	jb     c0007170 <mem_trim+0x68>
c0007156:	66 90                	xchg   ax,ax
c0007158:	83 ec 08             	sub    esp,0x8
c000715b:	68 4e fa 02 c0       	push   0xc002fa4e
c0007160:	68 c6 f9 02 c0       	push   0xc002f9c6
c0007165:	e8 5e 89 01 00       	call   c001fac8 <CPrintf>
c000716a:	83 c4 10             	add    esp,0x10
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007175:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007179:	72 0d                	jb     c0007188 <mem_trim+0x80>
c000717b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007180:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007184:	72 26                	jb     c00071ac <mem_trim+0xa4>
c0007186:	66 90                	xchg   ax,ax
c0007188:	e8 2b 89 01 00       	call   c001fab8 <CLockScheduler>
c000718d:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007193:	83 c0 01             	add    eax,0x1
c0007196:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c000719c:	e8 fb 88 01 00       	call   c001fa9c <CUnlockScheduler>
c00071a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071a5:	e9 6a 02 00 00       	jmp    c0007414 <mem_trim+0x30c>
c00071aa:	66 90                	xchg   ax,ax
c00071ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071b0:	83 e8 06             	sub    eax,0x6
c00071b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00071b7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00071c0:	29 c2                	sub    edx,eax
c00071c2:	89 d0                	mov    eax,edx
c00071c4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00071c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071cd:	66 8b 10             	mov    dx,WORD PTR [eax]
c00071d0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00071d5:	89 d1                	mov    ecx,edx
c00071d7:	29 c1                	sub    ecx,eax
c00071d9:	89 c8                	mov    eax,ecx
c00071db:	83 e8 06             	sub    eax,0x6
c00071de:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00071e3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071e8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071ed:	39 c2                	cmp    edx,eax
c00071ef:	76 17                	jbe    c0007208 <mem_trim+0x100>
c00071f1:	83 ec 08             	sub    esp,0x8
c00071f4:	68 ac fa 02 c0       	push   0xc002faac
c00071f9:	68 c6 f9 02 c0       	push   0xc002f9c6
c00071fe:	e8 c5 88 01 00       	call   c001fac8 <CPrintf>
c0007203:	83 c4 10             	add    esp,0x10
c0007206:	66 90                	xchg   ax,ax
c0007208:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000720d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007212:	39 c2                	cmp    edx,eax
c0007214:	76 0a                	jbe    c0007220 <mem_trim+0x118>
c0007216:	b8 00 00 00 00       	mov    eax,0x0
c000721b:	e9 f4 01 00 00       	jmp    c0007414 <mem_trim+0x30c>
c0007220:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007225:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000722a:	39 c2                	cmp    edx,eax
c000722c:	75 0a                	jne    c0007238 <mem_trim+0x130>
c000722e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007232:	e9 dd 01 00 00       	jmp    c0007414 <mem_trim+0x30c>
c0007237:	90                   	nop
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	6a 00                	push   0x0
c000723d:	68 98 76 03 c0       	push   0xc0037698
c0007242:	e8 89 9a ff ff       	call   c0000cd0 <sys_arch_sem_wait>
c0007247:	83 c4 10             	add    esp,0x10
c000724a:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007254:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007257:	0f b7 c0             	movzx  eax,ax
c000725a:	01 d0                	add    eax,edx
c000725c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007264:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007267:	0f b6 c0             	movzx  eax,al
c000726a:	85 c0                	test   eax,eax
c000726c:	0f 85 c6 00 00 00    	jne    c0007338 <mem_trim+0x230>
c0007272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007276:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007279:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000727e:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007287:	01 d0                	add    eax,edx
c0007289:	83 c0 06             	add    eax,0x6
c000728c:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007291:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007296:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000729a:	75 14                	jne    c00072b0 <mem_trim+0x1a8>
c000729c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072a2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00072a7:	01 d0                	add    eax,edx
c00072a9:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072ae:	66 90                	xchg   ax,ax
c00072b0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072b6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00072bb:	01 d0                	add    eax,edx
c00072bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072c5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072cd:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00072d2:	66 89 10             	mov    WORD PTR [eax],dx
c00072d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072d9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00072de:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00072e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00072e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00072ea:	66 89 10             	mov    WORD PTR [eax],dx
c00072ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072f1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072f4:	0f b7 c0             	movzx  eax,ax
c00072f7:	3d 40 06 00 00       	cmp    eax,0x640
c00072fc:	74 1a                	je     c0007318 <mem_trim+0x210>
c00072fe:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007308:	66 8b 00             	mov    ax,WORD PTR [eax]
c000730b:	0f b7 c0             	movzx  eax,ax
c000730e:	01 c2                	add    edx,eax
c0007310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007314:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007318:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000731e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007322:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007326:	29 d1                	sub    ecx,edx
c0007328:	89 ca                	mov    edx,ecx
c000732a:	01 d0                	add    eax,edx
c000732c:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007332:	e9 c9 00 00 00       	jmp    c0007400 <mem_trim+0x2f8>
c0007337:	90                   	nop
c0007338:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000733d:	8d 50 12             	lea    edx,[eax+0x12]
c0007340:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007345:	39 c2                	cmp    edx,eax
c0007347:	0f 87 b3 00 00 00    	ja     c0007400 <mem_trim+0x2f8>
c000734d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007356:	01 d0                	add    eax,edx
c0007358:	83 c0 06             	add    eax,0x6
c000735b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007360:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007366:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000736b:	01 d0                	add    eax,edx
c000736d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007371:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007376:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000737a:	73 0c                	jae    c0007388 <mem_trim+0x280>
c000737c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007380:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007385:	8d 76 00             	lea    esi,[esi+0x0]
c0007388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000738c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007390:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007394:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000739b:	66 89 10             	mov    WORD PTR [eax],dx
c000739e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073a2:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00073a7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00073ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00073b3:	66 89 10             	mov    WORD PTR [eax],dx
c00073b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073bd:	0f b7 c0             	movzx  eax,ax
c00073c0:	3d 40 06 00 00       	cmp    eax,0x640
c00073c5:	74 1d                	je     c00073e4 <mem_trim+0x2dc>
c00073c7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073d1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073d4:	0f b7 c0             	movzx  eax,ax
c00073d7:	01 c2                	add    edx,eax
c00073d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073dd:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073e1:	8d 76 00             	lea    esi,[esi+0x0]
c00073e4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073f2:	29 d1                	sub    ecx,edx
c00073f4:	89 ca                	mov    edx,ecx
c00073f6:	01 d0                	add    eax,edx
c00073f8:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073fe:	66 90                	xchg   ax,ax
c0007400:	83 ec 0c             	sub    esp,0xc
c0007403:	68 98 76 03 c0       	push   0xc0037698
c0007408:	e8 ab 98 ff ff       	call   c0000cb8 <sys_sem_signal>
c000740d:	83 c4 10             	add    esp,0x10
c0007410:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007414:	83 c4 2c             	add    esp,0x2c
c0007417:	c3                   	ret    

c0007418 <mem_malloc>:
c0007418:	53                   	push   ebx
c0007419:	83 ec 28             	sub    esp,0x28
c000741c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007420:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007425:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000742a:	85 c0                	test   eax,eax
c000742c:	75 0a                	jne    c0007438 <mem_malloc+0x20>
c000742e:	b8 00 00 00 00       	mov    eax,0x0
c0007433:	e9 f8 02 00 00       	jmp    c0007730 <mem_malloc+0x318>
c0007438:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000743d:	83 f8 0b             	cmp    eax,0xb
c0007440:	77 0a                	ja     c000744c <mem_malloc+0x34>
c0007442:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007449:	8d 76 00             	lea    esi,[esi+0x0]
c000744c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007451:	3d 40 06 00 00       	cmp    eax,0x640
c0007456:	76 0c                	jbe    c0007464 <mem_malloc+0x4c>
c0007458:	b8 00 00 00 00       	mov    eax,0x0
c000745d:	e9 ce 02 00 00       	jmp    c0007730 <mem_malloc+0x318>
c0007462:	66 90                	xchg   ax,ax
c0007464:	83 ec 08             	sub    esp,0x8
c0007467:	6a 00                	push   0x0
c0007469:	68 98 76 03 c0       	push   0xc0037698
c000746e:	e8 5d 98 ff ff       	call   c0000cd0 <sys_arch_sem_wait>
c0007473:	83 c4 10             	add    esp,0x10
c0007476:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000747c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007481:	29 c2                	sub    edx,eax
c0007483:	89 d0                	mov    eax,edx
c0007485:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000748a:	e9 61 02 00 00       	jmp    c00076f0 <mem_malloc+0x2d8>
c000748f:	90                   	nop
c0007490:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007496:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000749b:	01 d0                	add    eax,edx
c000749d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00074a8:	0f b6 c0             	movzx  eax,al
c00074ab:	85 c0                	test   eax,eax
c00074ad:	0f 85 25 02 00 00    	jne    c00076d8 <mem_malloc+0x2c0>
c00074b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074ba:	0f b7 d0             	movzx  edx,ax
c00074bd:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074c2:	29 c2                	sub    edx,eax
c00074c4:	89 d0                	mov    eax,edx
c00074c6:	8d 50 fa             	lea    edx,[eax-0x6]
c00074c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074ce:	39 c2                	cmp    edx,eax
c00074d0:	0f 82 02 02 00 00    	jb     c00076d8 <mem_malloc+0x2c0>
c00074d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074dd:	0f b7 d0             	movzx  edx,ax
c00074e0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074e5:	29 c2                	sub    edx,eax
c00074e7:	89 d0                	mov    eax,edx
c00074e9:	8d 50 fa             	lea    edx,[eax-0x6]
c00074ec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074f1:	83 c0 12             	add    eax,0x12
c00074f4:	39 c2                	cmp    edx,eax
c00074f6:	0f 82 c4 00 00 00    	jb     c00075c0 <mem_malloc+0x1a8>
c00074fc:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007505:	01 d0                	add    eax,edx
c0007507:	83 c0 06             	add    eax,0x6
c000750a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000750f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007515:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000751a:	01 d0                	add    eax,edx
c000751c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007528:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000752c:	66 8b 10             	mov    dx,WORD PTR [eax]
c000752f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007533:	66 89 10             	mov    WORD PTR [eax],dx
c0007536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753a:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000753f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007543:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007547:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000754c:	66 89 10             	mov    WORD PTR [eax],dx
c000754f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007553:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000755e:	0f b7 c0             	movzx  eax,ax
c0007561:	3d 40 06 00 00       	cmp    eax,0x640
c0007566:	74 1c                	je     c0007584 <mem_malloc+0x16c>
c0007568:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000756e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007575:	0f b7 c0             	movzx  eax,ax
c0007578:	01 c2                	add    edx,eax
c000757a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000757f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007583:	90                   	nop
c0007584:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000758a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000758e:	01 d0                	add    eax,edx
c0007590:	83 c0 06             	add    eax,0x6
c0007593:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007599:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075a0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075a6:	0f b7 d2             	movzx  edx,dx
c00075a9:	0f b7 c0             	movzx  eax,ax
c00075ac:	39 c2                	cmp    edx,eax
c00075ae:	73 64                	jae    c0007614 <mem_malloc+0x1fc>
c00075b0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075b6:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075bc:	eb 56                	jmp    c0007614 <mem_malloc+0x1fc>
c00075be:	66 90                	xchg   ax,ax
c00075c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075c8:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c00075cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075d3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075d6:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00075dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00075e0:	29 cb                	sub    ebx,ecx
c00075e2:	89 d9                	mov    ecx,ebx
c00075e4:	29 c8                	sub    eax,ecx
c00075e6:	01 d0                	add    eax,edx
c00075e8:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075ee:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075f5:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075fb:	0f b7 d2             	movzx  edx,dx
c00075fe:	0f b7 c0             	movzx  eax,ax
c0007601:	39 c2                	cmp    edx,eax
c0007603:	73 0f                	jae    c0007614 <mem_malloc+0x1fc>
c0007605:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000760b:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007619:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000761d:	75 71                	jne    c0007690 <mem_malloc+0x278>
c000761f:	eb 1b                	jmp    c000763c <mem_malloc+0x224>
c0007621:	8d 76 00             	lea    esi,[esi+0x0]
c0007624:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000762a:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000762f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007632:	0f b7 c0             	movzx  eax,ax
c0007635:	01 d0                	add    eax,edx
c0007637:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000763c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007641:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007644:	0f b6 c0             	movzx  eax,al
c0007647:	85 c0                	test   eax,eax
c0007649:	74 11                	je     c000765c <mem_malloc+0x244>
c000764b:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007651:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007656:	39 c2                	cmp    edx,eax
c0007658:	75 ca                	jne    c0007624 <mem_malloc+0x20c>
c000765a:	66 90                	xchg   ax,ax
c000765c:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007662:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007667:	39 c2                	cmp    edx,eax
c0007669:	74 25                	je     c0007690 <mem_malloc+0x278>
c000766b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007670:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007673:	0f b6 c0             	movzx  eax,al
c0007676:	85 c0                	test   eax,eax
c0007678:	74 16                	je     c0007690 <mem_malloc+0x278>
c000767a:	83 ec 08             	sub    esp,0x8
c000767d:	68 65 fa 02 c0       	push   0xc002fa65
c0007682:	68 c6 f9 02 c0       	push   0xc002f9c6
c0007687:	e8 3c 84 01 00       	call   c001fac8 <CPrintf>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	90                   	nop
c0007690:	83 ec 0c             	sub    esp,0xc
c0007693:	68 98 76 03 c0       	push   0xc0037698
c0007698:	e8 1b 96 ff ff       	call   c0000cb8 <sys_sem_signal>
c000769d:	83 c4 10             	add    esp,0x10
c00076a0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a9:	01 d0                	add    eax,edx
c00076ab:	8d 50 06             	lea    edx,[eax+0x6]
c00076ae:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076b3:	39 c2                	cmp    edx,eax
c00076b5:	76 15                	jbe    c00076cc <mem_malloc+0x2b4>
c00076b7:	83 ec 08             	sub    esp,0x8
c00076ba:	68 cc fa 02 c0       	push   0xc002facc
c00076bf:	68 c6 f9 02 c0       	push   0xc002f9c6
c00076c4:	e8 ff 83 01 00       	call   c001fac8 <CPrintf>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d0:	83 c0 06             	add    eax,0x6
c00076d3:	eb 5b                	jmp    c0007730 <mem_malloc+0x318>
c00076d5:	8d 76 00             	lea    esi,[esi+0x0]
c00076d8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076de:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076e3:	01 d0                	add    eax,edx
c00076e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076e8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ed:	8d 76 00             	lea    esi,[esi+0x0]
c00076f0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f5:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076fa:	b9 40 06 00 00       	mov    ecx,0x640
c00076ff:	29 d1                	sub    ecx,edx
c0007701:	89 ca                	mov    edx,ecx
c0007703:	39 d0                	cmp    eax,edx
c0007705:	0f 8c 85 fd ff ff    	jl     c0007490 <mem_malloc+0x78>
c000770b:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c0007711:	83 c0 01             	add    eax,0x1
c0007714:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c000771a:	83 ec 0c             	sub    esp,0xc
c000771d:	68 98 76 03 c0       	push   0xc0037698
c0007722:	e8 91 95 ff ff       	call   c0000cb8 <sys_sem_signal>
c0007727:	83 c4 10             	add    esp,0x10
c000772a:	b8 00 00 00 00       	mov    eax,0x0
c000772f:	90                   	nop
c0007730:	83 c4 28             	add    esp,0x28
c0007733:	5b                   	pop    ebx
c0007734:	c3                   	ret    
c0007735:	8d 76 00             	lea    esi,[esi+0x0]

c0007738 <mem_calloc>:
c0007738:	83 ec 2c             	sub    esp,0x2c
c000773b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000773f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007743:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007748:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000774d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007755:	0f af c2             	imul   eax,edx
c0007758:	0f b7 c0             	movzx  eax,ax
c000775b:	83 ec 0c             	sub    esp,0xc
c000775e:	50                   	push   eax
c000775f:	e8 b4 fc ff ff       	call   c0007418 <mem_malloc>
c0007764:	83 c4 10             	add    esp,0x10
c0007767:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000776b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007770:	74 22                	je     c0007794 <mem_calloc+0x5c>
c0007772:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007777:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000777c:	0f af c2             	imul   eax,edx
c000777f:	83 ec 04             	sub    esp,0x4
c0007782:	50                   	push   eax
c0007783:	6a 00                	push   0x0
c0007785:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007789:	e8 62 8d ff ff       	call   c00004f0 <memset>
c000778e:	83 c4 10             	add    esp,0x10
c0007791:	8d 76 00             	lea    esi,[esi+0x0]
c0007794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007798:	83 c4 2c             	add    esp,0x2c
c000779b:	c3                   	ret    

c000779c <memp_init>:
c000779c:	83 ec 10             	sub    esp,0x10
c000779f:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00077a6:	eb 78                	jmp    c0007820 <memp_init+0x84>
c00077a8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077ad:	89 d0                	mov    eax,edx
c00077af:	c1 e0 02             	shl    eax,0x2
c00077b2:	01 d0                	add    eax,edx
c00077b4:	d1 e0                	shl    eax,1
c00077b6:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00077bb:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077c5:	89 d0                	mov    eax,edx
c00077c7:	c1 e0 02             	shl    eax,0x2
c00077ca:	01 d0                	add    eax,edx
c00077cc:	d1 e0                	shl    eax,1
c00077ce:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00077d3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077d8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077dd:	89 d0                	mov    eax,edx
c00077df:	c1 e0 02             	shl    eax,0x2
c00077e2:	01 d0                	add    eax,edx
c00077e4:	d1 e0                	shl    eax,1
c00077e6:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00077eb:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077f0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077f5:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077fa:	66 8b 8c 00 1c fb 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd04e4]
c0007802:	89 d0                	mov    eax,edx
c0007804:	c1 e0 02             	shl    eax,0x2
c0007807:	01 d0                	add    eax,edx
c0007809:	d1 e0                	shl    eax,1
c000780b:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007810:	66 89 08             	mov    WORD PTR [eax],cx
c0007813:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007818:	83 c0 01             	add    eax,0x1
c000781b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007820:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007825:	83 f8 0d             	cmp    eax,0xd
c0007828:	0f 86 7a ff ff ff    	jbe    c00077a8 <memp_init+0xc>
c000782e:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007836:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000783d:	e9 8a 00 00 00       	jmp    c00078cc <memp_init+0x130>
c0007842:	66 90                	xchg   ax,ax
c0007844:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007849:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007854:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000785b:	eb 47                	jmp    c00078a4 <memp_init+0x108>
c000785d:	8d 76 00             	lea    esi,[esi+0x0]
c0007860:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007865:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c000786c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007870:	89 10                	mov    DWORD PTR [eax],edx
c0007872:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007877:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000787b:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007882:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007887:	66 8b 84 00 38 fb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd04c8]
c000788f:	0f b7 c0             	movzx  eax,ax
c0007892:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789a:	83 c0 01             	add    eax,0x1
c000789d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00078a2:	66 90                	xchg   ax,ax
c00078a4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078a9:	66 8b 84 00 1c fb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd04e4]
c00078b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00078b6:	0f b7 c0             	movzx  eax,ax
c00078b9:	39 c2                	cmp    edx,eax
c00078bb:	72 a3                	jb     c0007860 <memp_init+0xc4>
c00078bd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078c2:	83 c0 01             	add    eax,0x1
c00078c5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078ca:	66 90                	xchg   ax,ax
c00078cc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078d1:	83 f8 0d             	cmp    eax,0xd
c00078d4:	0f 86 6a ff ff ff    	jbe    c0007844 <memp_init+0xa8>
c00078da:	90                   	nop
c00078db:	83 c4 10             	add    esp,0x10
c00078de:	c3                   	ret    
c00078df:	90                   	nop

c00078e0 <memp_malloc>:
c00078e0:	83 ec 1c             	sub    esp,0x1c
c00078e3:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00078e8:	76 22                	jbe    c000790c <memp_malloc+0x2c>
c00078ea:	83 ec 08             	sub    esp,0x8
c00078ed:	68 fc fa 02 c0       	push   0xc002fafc
c00078f2:	68 c6 f9 02 c0       	push   0xc002f9c6
c00078f7:	e8 cc 81 01 00       	call   c001fac8 <CPrintf>
c00078fc:	83 c4 10             	add    esp,0x10
c00078ff:	b8 00 00 00 00       	mov    eax,0x0
c0007904:	e9 ff 00 00 00       	jmp    c0007a08 <memp_malloc+0x128>
c0007909:	8d 76 00             	lea    esi,[esi+0x0]
c000790c:	e8 a7 81 01 00       	call   c001fab8 <CLockScheduler>
c0007911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007915:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c000791c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007920:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007925:	0f 84 a1 00 00 00    	je     c00079cc <memp_malloc+0xec>
c000792b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000792f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007935:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000793c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007940:	89 d0                	mov    eax,edx
c0007942:	c1 e0 02             	shl    eax,0x2
c0007945:	01 d0                	add    eax,edx
c0007947:	d1 e0                	shl    eax,1
c0007949:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000794e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007951:	83 c0 01             	add    eax,0x1
c0007954:	89 c1                	mov    ecx,eax
c0007956:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000795a:	89 d0                	mov    eax,edx
c000795c:	c1 e0 02             	shl    eax,0x2
c000795f:	01 d0                	add    eax,edx
c0007961:	d1 e0                	shl    eax,1
c0007963:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007968:	66 89 08             	mov    WORD PTR [eax],cx
c000796b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000796f:	89 d0                	mov    eax,edx
c0007971:	c1 e0 02             	shl    eax,0x2
c0007974:	01 d0                	add    eax,edx
c0007976:	d1 e0                	shl    eax,1
c0007978:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000797d:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007980:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007984:	89 d0                	mov    eax,edx
c0007986:	c1 e0 02             	shl    eax,0x2
c0007989:	01 d0                	add    eax,edx
c000798b:	d1 e0                	shl    eax,1
c000798d:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007992:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007995:	0f b7 d1             	movzx  edx,cx
c0007998:	0f b7 c0             	movzx  eax,ax
c000799b:	39 c2                	cmp    edx,eax
c000799d:	73 5d                	jae    c00079fc <memp_malloc+0x11c>
c000799f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079a3:	89 d0                	mov    eax,edx
c00079a5:	c1 e0 02             	shl    eax,0x2
c00079a8:	01 d0                	add    eax,edx
c00079aa:	d1 e0                	shl    eax,1
c00079ac:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079b1:	66 8b 08             	mov    cx,WORD PTR [eax]
c00079b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079b8:	89 d0                	mov    eax,edx
c00079ba:	c1 e0 02             	shl    eax,0x2
c00079bd:	01 d0                	add    eax,edx
c00079bf:	d1 e0                	shl    eax,1
c00079c1:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079c6:	66 89 08             	mov    WORD PTR [eax],cx
c00079c9:	eb 31                	jmp    c00079fc <memp_malloc+0x11c>
c00079cb:	90                   	nop
c00079cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079d0:	89 d0                	mov    eax,edx
c00079d2:	c1 e0 02             	shl    eax,0x2
c00079d5:	01 d0                	add    eax,edx
c00079d7:	d1 e0                	shl    eax,1
c00079d9:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079de:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079e1:	83 c0 01             	add    eax,0x1
c00079e4:	89 c1                	mov    ecx,eax
c00079e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079ea:	89 d0                	mov    eax,edx
c00079ec:	c1 e0 02             	shl    eax,0x2
c00079ef:	01 d0                	add    eax,edx
c00079f1:	d1 e0                	shl    eax,1
c00079f3:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079f8:	66 89 08             	mov    WORD PTR [eax],cx
c00079fb:	90                   	nop
c00079fc:	e8 9b 80 01 00       	call   c001fa9c <CUnlockScheduler>
c0007a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a05:	8d 76 00             	lea    esi,[esi+0x0]
c0007a08:	83 c4 1c             	add    esp,0x1c
c0007a0b:	c3                   	ret    

c0007a0c <memp_free>:
c0007a0c:	83 ec 1c             	sub    esp,0x1c
c0007a0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007a14:	74 66                	je     c0007a7c <memp_free+0x70>
c0007a16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a1e:	e8 95 80 01 00       	call   c001fab8 <CLockScheduler>
c0007a23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a27:	89 d0                	mov    eax,edx
c0007a29:	c1 e0 02             	shl    eax,0x2
c0007a2c:	01 d0                	add    eax,edx
c0007a2e:	d1 e0                	shl    eax,1
c0007a30:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a35:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a38:	83 e8 01             	sub    eax,0x1
c0007a3b:	89 c1                	mov    ecx,eax
c0007a3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a41:	89 d0                	mov    eax,edx
c0007a43:	c1 e0 02             	shl    eax,0x2
c0007a46:	01 d0                	add    eax,edx
c0007a48:	d1 e0                	shl    eax,1
c0007a4a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a4f:	66 89 08             	mov    WORD PTR [eax],cx
c0007a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a56:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a61:	89 10                	mov    DWORD PTR [eax],edx
c0007a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a6b:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007a72:	e8 25 80 01 00       	call   c001fa9c <CUnlockScheduler>
c0007a77:	eb 07                	jmp    c0007a80 <memp_free+0x74>
c0007a79:	8d 76 00             	lea    esi,[esi+0x0]
c0007a7c:	90                   	nop
c0007a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a80:	83 c4 1c             	add    esp,0x1c
c0007a83:	c3                   	ret    

c0007a84 <netif_init>:
c0007a84:	90                   	nop
c0007a85:	c3                   	ret    
c0007a86:	66 90                	xchg   ax,ax

c0007a88 <netif_find>:
c0007a88:	83 ec 10             	sub    esp,0x10
c0007a8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a90:	75 0a                	jne    c0007a9c <netif_find+0x14>
c0007a92:	b8 00 00 00 00       	mov    eax,0x0
c0007a97:	e9 80 00 00 00       	jmp    c0007b1c <netif_find+0x94>
c0007a9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007aa0:	83 c0 02             	add    eax,0x2
c0007aa3:	8a 00                	mov    al,BYTE PTR [eax]
c0007aa5:	83 e8 30             	sub    eax,0x30
c0007aa8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007aac:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ab5:	eb 59                	jmp    c0007b10 <netif_find+0x88>
c0007ab7:	90                   	nop
c0007ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007abc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007abf:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007ac4:	0f b6 c0             	movzx  eax,al
c0007ac7:	39 c2                	cmp    edx,eax
c0007ac9:	75 39                	jne    c0007b04 <netif_find+0x7c>
c0007acb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007acf:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ad5:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007ad8:	0f be d2             	movsx  edx,dl
c0007adb:	0f be c0             	movsx  eax,al
c0007ade:	39 c2                	cmp    edx,eax
c0007ae0:	75 22                	jne    c0007b04 <netif_find+0x7c>
c0007ae2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ae6:	83 c0 01             	add    eax,0x1
c0007ae9:	8a 10                	mov    dl,BYTE PTR [eax]
c0007aeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007aef:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007af2:	0f be d2             	movsx  edx,dl
c0007af5:	0f be c0             	movsx  eax,al
c0007af8:	39 c2                	cmp    edx,eax
c0007afa:	75 08                	jne    c0007b04 <netif_find+0x7c>
c0007afc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b00:	eb 1a                	jmp    c0007b1c <netif_find+0x94>
c0007b02:	66 90                	xchg   ax,ax
c0007b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b0e:	66 90                	xchg   ax,ax
c0007b10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b15:	75 a1                	jne    c0007ab8 <netif_find+0x30>
c0007b17:	b8 00 00 00 00       	mov    eax,0x0
c0007b1c:	83 c4 10             	add    esp,0x10
c0007b1f:	c3                   	ret    

c0007b20 <netif_set_ipaddr>:
c0007b20:	83 ec 1c             	sub    esp,0x1c
c0007b23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b27:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b30:	39 c2                	cmp    edx,eax
c0007b32:	0f 84 bc 00 00 00    	je     c0007bf4 <netif_set_ipaddr+0xd4>
c0007b38:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007b3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b41:	eb 45                	jmp    c0007b88 <netif_set_ipaddr+0x68>
c0007b43:	90                   	nop
c0007b44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b48:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b51:	39 c2                	cmp    edx,eax
c0007b53:	75 27                	jne    c0007b7c <netif_set_ipaddr+0x5c>
c0007b55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007b60:	83 ec 0c             	sub    esp,0xc
c0007b63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b67:	e8 8c 36 00 00       	call   c000b1f8 <tcp_abort>
c0007b6c:	83 c4 10             	add    esp,0x10
c0007b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b77:	eb 0f                	jmp    c0007b88 <netif_set_ipaddr+0x68>
c0007b79:	8d 76 00             	lea    esi,[esi+0x0]
c0007b7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b87:	90                   	nop
c0007b88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b8d:	75 b5                	jne    c0007b44 <netif_set_ipaddr+0x24>
c0007b8f:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b98:	eb 52                	jmp    c0007bec <netif_set_ipaddr+0xcc>
c0007b9a:	66 90                	xchg   ax,ax
c0007b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 3c                	je     c0007be0 <netif_set_ipaddr+0xc0>
c0007ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 32                	je     c0007be0 <netif_set_ipaddr+0xc0>
c0007bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bbb:	39 c2                	cmp    edx,eax
c0007bbd:	75 21                	jne    c0007be0 <netif_set_ipaddr+0xc0>
c0007bbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bc4:	74 0a                	je     c0007bd0 <netif_set_ipaddr+0xb0>
c0007bc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bcc:	eb 0a                	jmp    c0007bd8 <netif_set_ipaddr+0xb8>
c0007bce:	66 90                	xchg   ax,ax
c0007bd0:	b8 00 00 00 00       	mov    eax,0x0
c0007bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0007bd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bdc:	89 02                	mov    DWORD PTR [edx],eax
c0007bde:	66 90                	xchg   ax,ax
c0007be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007be7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007beb:	90                   	nop
c0007bec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bf1:	75 a9                	jne    c0007b9c <netif_set_ipaddr+0x7c>
c0007bf3:	90                   	nop
c0007bf4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bf9:	74 09                	je     c0007c04 <netif_set_ipaddr+0xe4>
c0007bfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c01:	eb 09                	jmp    c0007c0c <netif_set_ipaddr+0xec>
c0007c03:	90                   	nop
c0007c04:	b8 00 00 00 00       	mov    eax,0x0
c0007c09:	8d 76 00             	lea    esi,[esi+0x0]
c0007c0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c10:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007c13:	90                   	nop
c0007c14:	83 c4 1c             	add    esp,0x1c
c0007c17:	c3                   	ret    

c0007c18 <netif_set_gw>:
c0007c18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c1d:	74 09                	je     c0007c28 <netif_set_gw+0x10>
c0007c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c25:	eb 09                	jmp    c0007c30 <netif_set_gw+0x18>
c0007c27:	90                   	nop
c0007c28:	b8 00 00 00 00       	mov    eax,0x0
c0007c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c34:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007c37:	90                   	nop
c0007c38:	c3                   	ret    
c0007c39:	8d 76 00             	lea    esi,[esi+0x0]

c0007c3c <netif_set_netmask>:
c0007c3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c41:	74 09                	je     c0007c4c <netif_set_netmask+0x10>
c0007c43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c49:	eb 09                	jmp    c0007c54 <netif_set_netmask+0x18>
c0007c4b:	90                   	nop
c0007c4c:	b8 00 00 00 00       	mov    eax,0x0
c0007c51:	8d 76 00             	lea    esi,[esi+0x0]
c0007c54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c58:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007c5b:	90                   	nop
c0007c5c:	c3                   	ret    
c0007c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0007c60 <netif_set_addr>:
c0007c60:	83 ec 0c             	sub    esp,0xc
c0007c63:	83 ec 08             	sub    esp,0x8
c0007c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c6e:	e8 ad fe ff ff       	call   c0007b20 <netif_set_ipaddr>
c0007c73:	83 c4 10             	add    esp,0x10
c0007c76:	83 ec 08             	sub    esp,0x8
c0007c79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c81:	e8 b6 ff ff ff       	call   c0007c3c <netif_set_netmask>
c0007c86:	83 c4 10             	add    esp,0x10
c0007c89:	83 ec 08             	sub    esp,0x8
c0007c8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c94:	e8 7f ff ff ff       	call   c0007c18 <netif_set_gw>
c0007c99:	83 c4 10             	add    esp,0x10
c0007c9c:	90                   	nop
c0007c9d:	83 c4 0c             	add    esp,0xc
c0007ca0:	c3                   	ret    
c0007ca1:	8d 76 00             	lea    esi,[esi+0x0]

c0007ca4 <netif_add>:
c0007ca4:	83 ec 0c             	sub    esp,0xc
c0007ca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007cac:	75 16                	jne    c0007cc4 <netif_add+0x20>
c0007cae:	83 ec 08             	sub    esp,0x8
c0007cb1:	68 54 fb 02 c0       	push   0xc002fb54
c0007cb6:	68 c6 f9 02 c0       	push   0xc002f9c6
c0007cbb:	e8 08 7e 01 00       	call   c001fac8 <CPrintf>
c0007cc0:	83 c4 10             	add    esp,0x10
c0007cc3:	90                   	nop
c0007cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cd3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cde:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce9:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cf1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007cf5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007cf8:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007cfd:	8d 50 01             	lea    edx,[eax+0x1]
c0007d00:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d0a:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007d15:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d28:	e8 33 ff ff ff       	call   c0007c60 <netif_set_addr>
c0007d2d:	83 c4 10             	add    esp,0x10
c0007d30:	83 ec 0c             	sub    esp,0xc
c0007d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007d3b:	ff d0                	call   eax
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	0f be c0             	movsx  eax,al
c0007d43:	85 c0                	test   eax,eax
c0007d45:	74 09                	je     c0007d50 <netif_add+0xac>
c0007d47:	b8 00 00 00 00       	mov    eax,0x0
c0007d4c:	eb 1e                	jmp    c0007d6c <netif_add+0xc8>
c0007d4e:	66 90                	xchg   ax,ax
c0007d50:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5a:	89 10                	mov    DWORD PTR [eax],edx
c0007d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d60:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d69:	8d 76 00             	lea    esi,[esi+0x0]
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <netif_set_default>:
c0007d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d74:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d79:	90                   	nop
c0007d7a:	c3                   	ret    
c0007d7b:	90                   	nop

c0007d7c <netif_set_up>:
c0007d7c:	83 ec 0c             	sub    esp,0xc
c0007d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d83:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d86:	0f b6 c0             	movzx  eax,al
c0007d89:	83 e0 01             	and    eax,0x1
c0007d8c:	75 4a                	jne    c0007dd8 <netif_set_up+0x5c>
c0007d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d92:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d95:	83 c8 01             	or     eax,0x1
c0007d98:	88 c2                	mov    dl,al
c0007d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9e:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007da8:	0f b6 c0             	movzx  eax,al
c0007dab:	83 e0 10             	and    eax,0x10
c0007dae:	74 28                	je     c0007dd8 <netif_set_up+0x5c>
c0007db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007db7:	0f b6 c0             	movzx  eax,al
c0007dba:	83 e0 20             	and    eax,0x20
c0007dbd:	74 19                	je     c0007dd8 <netif_set_up+0x5c>
c0007dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dc3:	83 c0 04             	add    eax,0x4
c0007dc6:	83 ec 08             	sub    esp,0x8
c0007dc9:	50                   	push   eax
c0007dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dce:	e8 55 a6 00 00       	call   c0012428 <etharp_request>
c0007dd3:	83 c4 10             	add    esp,0x10
c0007dd6:	66 90                	xchg   ax,ax
c0007dd8:	90                   	nop
c0007dd9:	83 c4 0c             	add    esp,0xc
c0007ddc:	c3                   	ret    
c0007ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0007de0 <netif_set_down>:
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007de7:	0f b6 c0             	movzx  eax,al
c0007dea:	83 e0 01             	and    eax,0x1
c0007ded:	74 15                	je     c0007e04 <netif_set_down+0x24>
c0007def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df3:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007df6:	83 e0 fe             	and    eax,0xfffffffe
c0007df9:	88 c2                	mov    dl,al
c0007dfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dff:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e02:	66 90                	xchg   ax,ax
c0007e04:	90                   	nop
c0007e05:	c3                   	ret    
c0007e06:	66 90                	xchg   ax,ax

c0007e08 <netif_remove>:
c0007e08:	83 ec 10             	sub    esp,0x10
c0007e0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007e10:	0f 84 92 00 00 00    	je     c0007ea8 <netif_remove+0xa0>
c0007e16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e1a:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e1d:	83 e0 01             	and    eax,0x1
c0007e20:	0f b6 c0             	movzx  eax,al
c0007e23:	85 c0                	test   eax,eax
c0007e25:	74 0d                	je     c0007e34 <netif_remove+0x2c>
c0007e27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e2b:	e8 b0 ff ff ff       	call   c0007de0 <netif_set_down>
c0007e30:	83 c4 04             	add    esp,0x4
c0007e33:	90                   	nop
c0007e34:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e39:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e3d:	75 0d                	jne    c0007e4c <netif_remove+0x44>
c0007e3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e45:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e4a:	eb 44                	jmp    c0007e90 <netif_remove+0x88>
c0007e4c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e55:	eb 29                	jmp    c0007e80 <netif_remove+0x78>
c0007e57:	90                   	nop
c0007e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e5e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e62:	75 10                	jne    c0007e74 <netif_remove+0x6c>
c0007e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e68:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e6e:	89 10                	mov    DWORD PTR [eax],edx
c0007e70:	eb 16                	jmp    c0007e88 <netif_remove+0x80>
c0007e72:	66 90                	xchg   ax,ax
c0007e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e7e:	66 90                	xchg   ax,ax
c0007e80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e85:	75 d1                	jne    c0007e58 <netif_remove+0x50>
c0007e87:	90                   	nop
c0007e88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e8d:	74 1d                	je     c0007eac <netif_remove+0xa4>
c0007e8f:	90                   	nop
c0007e90:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e95:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e99:	75 15                	jne    c0007eb0 <netif_remove+0xa8>
c0007e9b:	6a 00                	push   0x0
c0007e9d:	e8 ce fe ff ff       	call   c0007d70 <netif_set_default>
c0007ea2:	83 c4 04             	add    esp,0x4
c0007ea5:	eb 09                	jmp    c0007eb0 <netif_remove+0xa8>
c0007ea7:	90                   	nop
c0007ea8:	90                   	nop
c0007ea9:	eb 05                	jmp    c0007eb0 <netif_remove+0xa8>
c0007eab:	90                   	nop
c0007eac:	90                   	nop
c0007ead:	8d 76 00             	lea    esi,[esi+0x0]
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	c3                   	ret    

c0007eb4 <netif_set_link_up>:
c0007eb4:	83 ec 0c             	sub    esp,0xc
c0007eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ebb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ebe:	0f b6 c0             	movzx  eax,al
c0007ec1:	83 e0 10             	and    eax,0x10
c0007ec4:	75 4a                	jne    c0007f10 <netif_set_link_up+0x5c>
c0007ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eca:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ecd:	83 c8 10             	or     eax,0x10
c0007ed0:	88 c2                	mov    dl,al
c0007ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007edd:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ee0:	0f b6 c0             	movzx  eax,al
c0007ee3:	83 e0 01             	and    eax,0x1
c0007ee6:	74 28                	je     c0007f10 <netif_set_link_up+0x5c>
c0007ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eec:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eef:	0f b6 c0             	movzx  eax,al
c0007ef2:	83 e0 20             	and    eax,0x20
c0007ef5:	74 19                	je     c0007f10 <netif_set_link_up+0x5c>
c0007ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007efb:	83 c0 04             	add    eax,0x4
c0007efe:	83 ec 08             	sub    esp,0x8
c0007f01:	50                   	push   eax
c0007f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f06:	e8 1d a5 00 00       	call   c0012428 <etharp_request>
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	66 90                	xchg   ax,ax
c0007f10:	90                   	nop
c0007f11:	83 c4 0c             	add    esp,0xc
c0007f14:	c3                   	ret    
c0007f15:	8d 76 00             	lea    esi,[esi+0x0]

c0007f18 <netif_set_link_down>:
c0007f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f1c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f1f:	0f b6 c0             	movzx  eax,al
c0007f22:	83 e0 10             	and    eax,0x10
c0007f25:	74 15                	je     c0007f3c <netif_set_link_down+0x24>
c0007f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f2b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f2e:	83 e0 ef             	and    eax,0xffffffef
c0007f31:	88 c2                	mov    dl,al
c0007f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f37:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f3a:	66 90                	xchg   ax,ax
c0007f3c:	90                   	nop
c0007f3d:	c3                   	ret    
c0007f3e:	66 90                	xchg   ax,ax

c0007f40 <pbuf_free_ooseq>:
c0007f40:	83 ec 1c             	sub    esp,0x1c
c0007f43:	e8 70 7b 01 00       	call   c001fab8 <CLockScheduler>
c0007f48:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f4f:	e8 48 7b 01 00       	call   c001fa9c <CUnlockScheduler>
c0007f54:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f5d:	eb 41                	jmp    c0007fa0 <pbuf_free_ooseq+0x60>
c0007f5f:	90                   	nop
c0007f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f64:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f6a:	85 c0                	test   eax,eax
c0007f6c:	74 26                	je     c0007f94 <pbuf_free_ooseq+0x54>
c0007f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f72:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	50                   	push   eax
c0007f7c:	e8 1b 20 00 00       	call   c0009f9c <tcp_segs_free>
c0007f81:	83 c4 10             	add    esp,0x10
c0007f84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f88:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f92:	eb 14                	jmp    c0007fa8 <pbuf_free_ooseq+0x68>
c0007f94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f9f:	90                   	nop
c0007fa0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007fa5:	75 b9                	jne    c0007f60 <pbuf_free_ooseq+0x20>
c0007fa7:	90                   	nop
c0007fa8:	83 c4 1c             	add    esp,0x1c
c0007fab:	c3                   	ret    

c0007fac <pbuf_pool_is_empty>:
c0007fac:	83 ec 1c             	sub    esp,0x1c
c0007faf:	e8 04 7b 01 00       	call   c001fab8 <CLockScheduler>
c0007fb4:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007fb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007fbd:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007fc4:	e8 d3 7a 01 00       	call   c001fa9c <CUnlockScheduler>
c0007fc9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007fce:	85 c0                	test   eax,eax
c0007fd0:	75 2e                	jne    c0008000 <pbuf_pool_is_empty+0x54>
c0007fd2:	83 ec 04             	sub    esp,0x4
c0007fd5:	6a 00                	push   0x0
c0007fd7:	6a 00                	push   0x0
c0007fd9:	68 40 7f 00 c0       	push   0xc0007f40
c0007fde:	e8 91 8c ff ff       	call   c0000c74 <tcpip_callback_with_block>
c0007fe3:	83 c4 10             	add    esp,0x10
c0007fe6:	0f be c0             	movsx  eax,al
c0007fe9:	85 c0                	test   eax,eax
c0007feb:	74 13                	je     c0008000 <pbuf_pool_is_empty+0x54>
c0007fed:	e8 c6 7a 01 00       	call   c001fab8 <CLockScheduler>
c0007ff2:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007ff9:	e8 9e 7a 01 00       	call   c001fa9c <CUnlockScheduler>
c0007ffe:	66 90                	xchg   ax,ax
c0008000:	90                   	nop
c0008001:	83 c4 1c             	add    esp,0x1c
c0008004:	c3                   	ret    
c0008005:	8d 76 00             	lea    esi,[esi+0x0]

c0008008 <pbuf_alloced_custom>:
c0008008:	83 ec 2c             	sub    esp,0x2c
c000800b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000800f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0008013:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008018:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000801d:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008024:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008029:	74 29                	je     c0008054 <pbuf_alloced_custom+0x4c>
c000802b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008030:	74 12                	je     c0008044 <pbuf_alloced_custom+0x3c>
c0008032:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008037:	74 2b                	je     c0008064 <pbuf_alloced_custom+0x5c>
c0008039:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000803e:	74 54                	je     c0008094 <pbuf_alloced_custom+0x8c>
c0008040:	eb 32                	jmp    c0008074 <pbuf_alloced_custom+0x6c>
c0008042:	66 90                	xchg   ax,ax
c0008044:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008049:	83 c0 14             	add    eax,0x14
c000804c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008051:	8d 76 00             	lea    esi,[esi+0x0]
c0008054:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008059:	83 c0 14             	add    eax,0x14
c000805c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008061:	8d 76 00             	lea    esi,[esi+0x0]
c0008064:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008069:	83 c0 0e             	add    eax,0xe
c000806c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008071:	eb 25                	jmp    c0008098 <pbuf_alloced_custom+0x90>
c0008073:	90                   	nop
c0008074:	83 ec 08             	sub    esp,0x8
c0008077:	68 6c fb 02 c0       	push   0xc002fb6c
c000807c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008081:	e8 42 7a 01 00       	call   c001fac8 <CPrintf>
c0008086:	83 c4 10             	add    esp,0x10
c0008089:	b8 00 00 00 00       	mov    eax,0x0
c000808e:	e9 95 00 00 00       	jmp    c0008128 <pbuf_alloced_custom+0x120>
c0008093:	90                   	nop
c0008094:	90                   	nop
c0008095:	8d 76 00             	lea    esi,[esi+0x0]
c0008098:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000809d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00080a2:	01 c2                	add    edx,eax
c00080a4:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00080a9:	39 c2                	cmp    edx,eax
c00080ab:	7d 07                	jge    c00080b4 <pbuf_alloced_custom+0xac>
c00080ad:	b8 00 00 00 00       	mov    eax,0x0
c00080b2:	eb 74                	jmp    c0008128 <pbuf_alloced_custom+0x120>
c00080b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00080be:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080c3:	74 17                	je     c00080dc <pbuf_alloced_custom+0xd4>
c00080c5:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00080ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ce:	01 c2                	add    edx,eax
c00080d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080d7:	eb 0f                	jmp    c00080e8 <pbuf_alloced_custom+0xe0>
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080e7:	90                   	nop
c00080e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080ec:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00080f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00080f8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00080fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008100:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008103:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008107:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000810b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000810f:	88 c2                	mov    dl,al
c0008111:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008115:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008118:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000811c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008122:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008126:	66 90                	xchg   ax,ax
c0008128:	83 c4 2c             	add    esp,0x2c
c000812b:	c3                   	ret    

c000812c <pbuf_header>:
c000812c:	83 ec 2c             	sub    esp,0x2c
c000812f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008133:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008138:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000813d:	75 15                	jne    c0008154 <pbuf_header+0x28>
c000813f:	83 ec 08             	sub    esp,0x8
c0008142:	68 f6 fd 02 c0       	push   0xc002fdf6
c0008147:	68 c6 f9 02 c0       	push   0xc002f9c6
c000814c:	e8 77 79 01 00       	call   c001fac8 <CPrintf>
c0008151:	83 c4 10             	add    esp,0x10
c0008154:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008159:	85 c0                	test   eax,eax
c000815b:	74 07                	je     c0008164 <pbuf_header+0x38>
c000815d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008162:	75 08                	jne    c000816c <pbuf_header+0x40>
c0008164:	b0 00                	mov    al,0x0
c0008166:	e9 5d 01 00 00       	jmp    c00082c8 <pbuf_header+0x19c>
c000816b:	90                   	nop
c000816c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008171:	85 c0                	test   eax,eax
c0008173:	79 3b                	jns    c00081b0 <pbuf_header+0x84>
c0008175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008179:	f7 d8                	neg    eax
c000817b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008184:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008188:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000818d:	0f b7 c0             	movzx  eax,ax
c0008190:	39 c2                	cmp    edx,eax
c0008192:	76 28                	jbe    c00081bc <pbuf_header+0x90>
c0008194:	83 ec 08             	sub    esp,0x8
c0008197:	68 47 fd 02 c0       	push   0xc002fd47
c000819c:	68 c6 f9 02 c0       	push   0xc002f9c6
c00081a1:	e8 22 79 01 00       	call   c001fac8 <CPrintf>
c00081a6:	83 c4 10             	add    esp,0x10
c00081a9:	b0 01                	mov    al,0x1
c00081ab:	e9 18 01 00 00       	jmp    c00082c8 <pbuf_header+0x19c>
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00081b9:	8d 76 00             	lea    esi,[esi+0x0]
c00081bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081c0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00081c3:	0f b6 c0             	movzx  eax,al
c00081c6:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00081cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00081d6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081db:	85 c0                	test   eax,eax
c00081dd:	74 0d                	je     c00081ec <pbuf_header+0xc0>
c00081df:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081e4:	83 f8 03             	cmp    eax,0x3
c00081e7:	75 3f                	jne    c0008228 <pbuf_header+0xfc>
c00081e9:	8d 76 00             	lea    esi,[esi+0x0]
c00081ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081f3:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00081f8:	f7 da                	neg    edx
c00081fa:	01 c2                	add    edx,eax
c00081fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008200:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008203:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008207:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000820a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000820e:	83 c2 10             	add    edx,0x10
c0008211:	39 d0                	cmp    eax,edx
c0008213:	73 7f                	jae    c0008294 <pbuf_header+0x168>
c0008215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008219:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000821d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008220:	b0 01                	mov    al,0x1
c0008222:	e9 a1 00 00 00       	jmp    c00082c8 <pbuf_header+0x19c>
c0008227:	90                   	nop
c0008228:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000822d:	83 f8 02             	cmp    eax,0x2
c0008230:	74 0a                	je     c000823c <pbuf_header+0x110>
c0008232:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008237:	83 f8 01             	cmp    eax,0x1
c000823a:	75 3c                	jne    c0008278 <pbuf_header+0x14c>
c000823c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008241:	85 c0                	test   eax,eax
c0008243:	79 2f                	jns    c0008274 <pbuf_header+0x148>
c0008245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008249:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000824d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008252:	0f b7 c0             	movzx  eax,ax
c0008255:	39 c2                	cmp    edx,eax
c0008257:	77 1b                	ja     c0008274 <pbuf_header+0x148>
c0008259:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000825d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008260:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008265:	f7 da                	neg    edx
c0008267:	01 c2                	add    edx,eax
c0008269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000826d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008270:	eb 22                	jmp    c0008294 <pbuf_header+0x168>
c0008272:	66 90                	xchg   ax,ax
c0008274:	b0 01                	mov    al,0x1
c0008276:	eb 50                	jmp    c00082c8 <pbuf_header+0x19c>
c0008278:	83 ec 08             	sub    esp,0x8
c000827b:	68 65 fd 02 c0       	push   0xc002fd65
c0008280:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008285:	e8 3e 78 01 00       	call   c001fac8 <CPrintf>
c000828a:	83 c4 10             	add    esp,0x10
c000828d:	b0 01                	mov    al,0x1
c000828f:	eb 37                	jmp    c00082c8 <pbuf_header+0x19c>
c0008291:	8d 76 00             	lea    esi,[esi+0x0]
c0008294:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008298:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000829c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082a0:	01 d0                	add    eax,edx
c00082a2:	89 c2                	mov    edx,eax
c00082a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082a8:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00082ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082b0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00082b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b7:	01 d0                	add    eax,edx
c00082b9:	89 c2                	mov    edx,eax
c00082bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082bf:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00082c3:	b0 00                	mov    al,0x0
c00082c5:	8d 76 00             	lea    esi,[esi+0x0]
c00082c8:	83 c4 2c             	add    esp,0x2c
c00082cb:	c3                   	ret    

c00082cc <pbuf_free>:
c00082cc:	83 ec 1c             	sub    esp,0x1c
c00082cf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082d4:	75 26                	jne    c00082fc <pbuf_free+0x30>
c00082d6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082db:	75 17                	jne    c00082f4 <pbuf_free+0x28>
c00082dd:	83 ec 08             	sub    esp,0x8
c00082e0:	68 f6 fd 02 c0       	push   0xc002fdf6
c00082e5:	68 c6 f9 02 c0       	push   0xc002f9c6
c00082ea:	e8 d9 77 01 00       	call   c001fac8 <CPrintf>
c00082ef:	83 c4 10             	add    esp,0x10
c00082f2:	66 90                	xchg   ax,ax
c00082f4:	b0 00                	mov    al,0x0
c00082f6:	e9 a9 01 00 00       	jmp    c00084a4 <pbuf_free+0x1d8>
c00082fb:	90                   	nop
c00082fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008300:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008303:	0f b6 c0             	movzx  eax,al
c0008306:	85 c0                	test   eax,eax
c0008308:	74 42                	je     c000834c <pbuf_free+0x80>
c000830a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008311:	0f b6 c0             	movzx  eax,al
c0008314:	83 f8 01             	cmp    eax,0x1
c0008317:	74 33                	je     c000834c <pbuf_free+0x80>
c0008319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000831d:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008320:	0f b6 c0             	movzx  eax,al
c0008323:	83 f8 02             	cmp    eax,0x2
c0008326:	74 24                	je     c000834c <pbuf_free+0x80>
c0008328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000832c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000832f:	0f b6 c0             	movzx  eax,al
c0008332:	83 f8 03             	cmp    eax,0x3
c0008335:	74 15                	je     c000834c <pbuf_free+0x80>
c0008337:	83 ec 08             	sub    esp,0x8
c000833a:	68 73 fd 02 c0       	push   0xc002fd73
c000833f:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008344:	e8 7f 77 01 00       	call   c001fac8 <CPrintf>
c0008349:	83 c4 10             	add    esp,0x10
c000834c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008351:	e9 3e 01 00 00       	jmp    c0008494 <pbuf_free+0x1c8>
c0008356:	66 90                	xchg   ax,ax
c0008358:	e8 5b 77 01 00       	call   c001fab8 <CLockScheduler>
c000835d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008361:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008365:	0f b7 c0             	movzx  eax,ax
c0008368:	85 c0                	test   eax,eax
c000836a:	75 18                	jne    c0008384 <pbuf_free+0xb8>
c000836c:	83 ec 08             	sub    esp,0x8
c000836f:	68 88 fd 02 c0       	push   0xc002fd88
c0008374:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008379:	e8 4a 77 01 00       	call   c001fac8 <CPrintf>
c000837e:	83 c4 10             	add    esp,0x10
c0008381:	8d 76 00             	lea    esi,[esi+0x0]
c0008384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008388:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000838c:	83 e8 01             	sub    eax,0x1
c000838f:	89 c2                	mov    edx,eax
c0008391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008395:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000839d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00083a1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00083a6:	e8 f1 76 01 00       	call   c001fa9c <CUnlockScheduler>
c00083ab:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00083b0:	85 c0                	test   eax,eax
c00083b2:	0f 85 d4 00 00 00    	jne    c000848c <pbuf_free+0x1c0>
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00083be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083c6:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083c9:	0f b6 c0             	movzx  eax,al
c00083cc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083d5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00083d8:	0f b6 c0             	movzx  eax,al
c00083db:	83 e0 02             	and    eax,0x2
c00083de:	74 3c                	je     c000841c <pbuf_free+0x150>
c00083e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00083e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083ed:	85 c0                	test   eax,eax
c00083ef:	75 17                	jne    c0008408 <pbuf_free+0x13c>
c00083f1:	83 ec 08             	sub    esp,0x8
c00083f4:	68 90 fb 02 c0       	push   0xc002fb90
c00083f9:	68 c6 f9 02 c0       	push   0xc002f9c6
c00083fe:	e8 c5 76 01 00       	call   c001fac8 <CPrintf>
c0008403:	83 c4 10             	add    esp,0x10
c0008406:	66 90                	xchg   ax,ax
c0008408:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000840b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008415:	ff d0                	call   eax
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	eb 58                	jmp    c0008474 <pbuf_free+0x1a8>
c000841c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008421:	83 f8 03             	cmp    eax,0x3
c0008424:	75 16                	jne    c000843c <pbuf_free+0x170>
c0008426:	83 ec 08             	sub    esp,0x8
c0008429:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000842d:	6a 0d                	push   0xd
c000842f:	e8 d8 f5 ff ff       	call   c0007a0c <memp_free>
c0008434:	83 c4 10             	add    esp,0x10
c0008437:	eb 3b                	jmp    c0008474 <pbuf_free+0x1a8>
c0008439:	8d 76 00             	lea    esi,[esi+0x0]
c000843c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008441:	83 f8 01             	cmp    eax,0x1
c0008444:	74 0a                	je     c0008450 <pbuf_free+0x184>
c0008446:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000844b:	83 f8 02             	cmp    eax,0x2
c000844e:	75 14                	jne    c0008464 <pbuf_free+0x198>
c0008450:	83 ec 08             	sub    esp,0x8
c0008453:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008457:	6a 0c                	push   0xc
c0008459:	e8 ae f5 ff ff       	call   c0007a0c <memp_free>
c000845e:	83 c4 10             	add    esp,0x10
c0008461:	eb 11                	jmp    c0008474 <pbuf_free+0x1a8>
c0008463:	90                   	nop
c0008464:	83 ec 0c             	sub    esp,0xc
c0008467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000846b:	e8 74 eb ff ff       	call   c0006fe4 <mem_free>
c0008470:	83 c4 10             	add    esp,0x10
c0008473:	90                   	nop
c0008474:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008478:	83 c0 01             	add    eax,0x1
c000847b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000847f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008483:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008487:	eb 0b                	jmp    c0008494 <pbuf_free+0x1c8>
c0008489:	8d 76 00             	lea    esi,[esi+0x0]
c000848c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008494:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008499:	0f 85 b9 fe ff ff    	jne    c0008358 <pbuf_free+0x8c>
c000849f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00084a3:	90                   	nop
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <pbuf_alloc>:
c00084a8:	83 ec 3c             	sub    esp,0x3c
c00084ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00084af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00084b4:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00084bb:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00084c0:	74 2a                	je     c00084ec <pbuf_alloc+0x44>
c00084c2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00084c7:	74 13                	je     c00084dc <pbuf_alloc+0x34>
c00084c9:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00084ce:	74 2c                	je     c00084fc <pbuf_alloc+0x54>
c00084d0:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00084d5:	74 55                	je     c000852c <pbuf_alloc+0x84>
c00084d7:	eb 33                	jmp    c000850c <pbuf_alloc+0x64>
c00084d9:	8d 76 00             	lea    esi,[esi+0x0]
c00084dc:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084e1:	83 c0 14             	add    eax,0x14
c00084e4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084e9:	8d 76 00             	lea    esi,[esi+0x0]
c00084ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084f1:	83 c0 14             	add    eax,0x14
c00084f4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084f9:	8d 76 00             	lea    esi,[esi+0x0]
c00084fc:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008501:	83 c0 0e             	add    eax,0xe
c0008504:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008509:	eb 25                	jmp    c0008530 <pbuf_alloc+0x88>
c000850b:	90                   	nop
c000850c:	83 ec 08             	sub    esp,0x8
c000850f:	68 9e fd 02 c0       	push   0xc002fd9e
c0008514:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008519:	e8 aa 75 01 00       	call   c001fac8 <CPrintf>
c000851e:	83 c4 10             	add    esp,0x10
c0008521:	b8 00 00 00 00       	mov    eax,0x0
c0008526:	e9 71 03 00 00       	jmp    c000889c <pbuf_alloc+0x3f4>
c000852b:	90                   	nop
c000852c:	90                   	nop
c000852d:	8d 76 00             	lea    esi,[esi+0x0]
c0008530:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008535:	77 11                	ja     c0008548 <pbuf_alloc+0xa0>
c0008537:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000853c:	0f 85 c6 02 00 00    	jne    c0008808 <pbuf_alloc+0x360>
c0008542:	e9 41 02 00 00       	jmp    c0008788 <pbuf_alloc+0x2e0>
c0008547:	90                   	nop
c0008548:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c000854d:	0f 85 15 03 00 00    	jne    c0008868 <pbuf_alloc+0x3c0>
c0008553:	83 ec 0c             	sub    esp,0xc
c0008556:	6a 0d                	push   0xd
c0008558:	e8 83 f3 ff ff       	call   c00078e0 <memp_malloc>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008564:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008569:	75 11                	jne    c000857c <pbuf_alloc+0xd4>
c000856b:	e8 3c fa ff ff       	call   c0007fac <pbuf_pool_is_empty>
c0008570:	b8 00 00 00 00       	mov    eax,0x0
c0008575:	e9 22 03 00 00       	jmp    c000889c <pbuf_alloc+0x3f4>
c000857a:	66 90                	xchg   ax,ax
c000857c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008580:	88 c2                	mov    dl,al
c0008582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008586:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000858d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008593:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008598:	8d 50 10             	lea    edx,[eax+0x10]
c000859b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000859f:	01 c2                	add    edx,eax
c00085a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00085a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00085b0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00085b4:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085b9:	ba 4e 02 00 00       	mov    edx,0x24e
c00085be:	29 c2                	sub    edx,eax
c00085c0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085c5:	39 c2                	cmp    edx,eax
c00085c7:	0f 4e c2             	cmovle eax,edx
c00085ca:	89 c2                	mov    edx,eax
c00085cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085d0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00085d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00085db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085df:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00085e3:	0f b7 c0             	movzx  eax,ax
c00085e6:	01 c2                	add    edx,eax
c00085e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ec:	05 5e 02 00 00       	add    eax,0x25e
c00085f1:	39 c2                	cmp    edx,eax
c00085f3:	76 17                	jbe    c000860c <pbuf_alloc+0x164>
c00085f5:	83 ec 08             	sub    esp,0x8
c00085f8:	68 b4 fb 02 c0       	push   0xc002fbb4
c00085fd:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008602:	e8 c1 74 01 00       	call   c001fac8 <CPrintf>
c0008607:	83 c4 10             	add    esp,0x10
c000860a:	66 90                	xchg   ax,ax
c000860c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008611:	ba 4e 02 00 00       	mov    edx,0x24e
c0008616:	29 c2                	sub    edx,eax
c0008618:	89 d0                	mov    eax,edx
c000861a:	85 c0                	test   eax,eax
c000861c:	7f 16                	jg     c0008634 <pbuf_alloc+0x18c>
c000861e:	83 ec 08             	sub    esp,0x8
c0008621:	68 e8 fb 02 c0       	push   0xc002fbe8
c0008626:	68 c6 f9 02 c0       	push   0xc002f9c6
c000862b:	e8 98 74 01 00       	call   c001fac8 <CPrintf>
c0008630:	83 c4 10             	add    esp,0x10
c0008633:	90                   	nop
c0008634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008638:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000863e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008642:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008646:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000864b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000864f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008653:	0f b7 c0             	movzx  eax,ax
c0008656:	29 c2                	sub    edx,eax
c0008658:	89 d0                	mov    eax,edx
c000865a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000865e:	e9 15 01 00 00       	jmp    c0008778 <pbuf_alloc+0x2d0>
c0008663:	90                   	nop
c0008664:	83 ec 0c             	sub    esp,0xc
c0008667:	6a 0d                	push   0xd
c0008669:	e8 72 f2 ff ff       	call   c00078e0 <memp_malloc>
c000866e:	83 c4 10             	add    esp,0x10
c0008671:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008675:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000867a:	75 20                	jne    c000869c <pbuf_alloc+0x1f4>
c000867c:	e8 2b f9 ff ff       	call   c0007fac <pbuf_pool_is_empty>
c0008681:	83 ec 0c             	sub    esp,0xc
c0008684:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008688:	e8 3f fc ff ff       	call   c00082cc <pbuf_free>
c000868d:	83 c4 10             	add    esp,0x10
c0008690:	b8 00 00 00 00       	mov    eax,0x0
c0008695:	e9 02 02 00 00       	jmp    c000889c <pbuf_alloc+0x3f4>
c000869a:	66 90                	xchg   ax,ax
c000869c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00086a0:	88 c2                	mov    dl,al
c00086a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086a6:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00086a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086ad:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00086b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00086bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00086bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086c3:	89 10                	mov    DWORD PTR [eax],edx
c00086c5:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00086cd:	7e 15                	jle    c00086e4 <pbuf_alloc+0x23c>
c00086cf:	83 ec 08             	sub    esp,0x8
c00086d2:	68 b9 fd 02 c0       	push   0xc002fdb9
c00086d7:	68 c6 f9 02 c0       	push   0xc002f9c6
c00086dc:	e8 e7 73 01 00       	call   c001fac8 <CPrintf>
c00086e1:	83 c4 10             	add    esp,0x10
c00086e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086e8:	89 c2                	mov    edx,eax
c00086ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086ee:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00086f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086f6:	0f b7 d0             	movzx  edx,ax
c00086f9:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00086ff:	76 07                	jbe    c0008708 <pbuf_alloc+0x260>
c0008701:	b8 4e 02 00 00       	mov    eax,0x24e
c0008706:	66 90                	xchg   ax,ax
c0008708:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000870c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008714:	8d 50 10             	lea    edx,[eax+0x10]
c0008717:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000871b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000871e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008722:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008725:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008729:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000872d:	0f b7 c0             	movzx  eax,ax
c0008730:	01 c2                	add    edx,eax
c0008732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008736:	05 5e 02 00 00       	add    eax,0x25e
c000873b:	39 c2                	cmp    edx,eax
c000873d:	76 15                	jbe    c0008754 <pbuf_alloc+0x2ac>
c000873f:	83 ec 08             	sub    esp,0x8
c0008742:	68 b4 fb 02 c0       	push   0xc002fbb4
c0008747:	68 c6 f9 02 c0       	push   0xc002f9c6
c000874c:	e8 77 73 01 00       	call   c001fac8 <CPrintf>
c0008751:	83 c4 10             	add    esp,0x10
c0008754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008758:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000875e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008762:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008766:	0f b7 c0             	movzx  eax,ax
c0008769:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000876d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008771:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008775:	8d 76 00             	lea    esi,[esi+0x0]
c0008778:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000877d:	0f 8f e1 fe ff ff    	jg     c0008664 <pbuf_alloc+0x1bc>
c0008783:	e9 fc 00 00 00       	jmp    c0008884 <pbuf_alloc+0x3dc>
c0008788:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c000878d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008791:	01 d0                	add    eax,edx
c0008793:	83 c0 10             	add    eax,0x10
c0008796:	0f b7 c0             	movzx  eax,ax
c0008799:	83 ec 0c             	sub    esp,0xc
c000879c:	50                   	push   eax
c000879d:	e8 76 ec ff ff       	call   c0007418 <mem_malloc>
c00087a2:	83 c4 10             	add    esp,0x10
c00087a5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087a9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087ae:	75 0c                	jne    c00087bc <pbuf_alloc+0x314>
c00087b0:	b8 00 00 00 00       	mov    eax,0x0
c00087b5:	e9 e2 00 00 00       	jmp    c000889c <pbuf_alloc+0x3f4>
c00087ba:	66 90                	xchg   ax,ax
c00087bc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087c1:	8d 50 10             	lea    edx,[eax+0x10]
c00087c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c8:	01 c2                	add    edx,eax
c00087ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087d9:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00087e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e8:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00087ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087f6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087fa:	88 c2                	mov    dl,al
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008803:	eb 7f                	jmp    c0008884 <pbuf_alloc+0x3dc>
c0008805:	8d 76 00             	lea    esi,[esi+0x0]
c0008808:	83 ec 0c             	sub    esp,0xc
c000880b:	6a 0c                	push   0xc
c000880d:	e8 ce f0 ff ff       	call   c00078e0 <memp_malloc>
c0008812:	83 c4 10             	add    esp,0x10
c0008815:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008819:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000881e:	75 08                	jne    c0008828 <pbuf_alloc+0x380>
c0008820:	b8 00 00 00 00       	mov    eax,0x0
c0008825:	eb 75                	jmp    c000889c <pbuf_alloc+0x3f4>
c0008827:	90                   	nop
c0008828:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000882c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008833:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000883b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000883f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008843:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008846:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000884a:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000884e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008858:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000885c:	88 c2                	mov    dl,al
c000885e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008862:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008865:	eb 1d                	jmp    c0008884 <pbuf_alloc+0x3dc>
c0008867:	90                   	nop
c0008868:	83 ec 08             	sub    esp,0x8
c000886b:	68 cd fd 02 c0       	push   0xc002fdcd
c0008870:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008875:	e8 4e 72 01 00       	call   c001fac8 <CPrintf>
c000887a:	83 c4 10             	add    esp,0x10
c000887d:	b8 00 00 00 00       	mov    eax,0x0
c0008882:	eb 18                	jmp    c000889c <pbuf_alloc+0x3f4>
c0008884:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008888:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000888e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008892:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000889a:	66 90                	xchg   ax,ax
c000889c:	83 c4 3c             	add    esp,0x3c
c000889f:	c3                   	ret    

c00088a0 <pbuf_realloc>:
c00088a0:	83 ec 2c             	sub    esp,0x2c
c00088a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00088a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00088ac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00088b1:	75 15                	jne    c00088c8 <pbuf_realloc+0x28>
c00088b3:	83 ec 08             	sub    esp,0x8
c00088b6:	68 e8 fd 02 c0       	push   0xc002fde8
c00088bb:	68 c6 f9 02 c0       	push   0xc002f9c6
c00088c0:	e8 03 72 01 00       	call   c001fac8 <CPrintf>
c00088c5:	83 c4 10             	add    esp,0x10
c00088c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088cc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088cf:	0f b6 c0             	movzx  eax,al
c00088d2:	83 f8 03             	cmp    eax,0x3
c00088d5:	74 41                	je     c0008918 <pbuf_realloc+0x78>
c00088d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088db:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088de:	0f b6 c0             	movzx  eax,al
c00088e1:	83 f8 01             	cmp    eax,0x1
c00088e4:	74 32                	je     c0008918 <pbuf_realloc+0x78>
c00088e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ea:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088ed:	0f b6 c0             	movzx  eax,al
c00088f0:	85 c0                	test   eax,eax
c00088f2:	74 24                	je     c0008918 <pbuf_realloc+0x78>
c00088f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088f8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088fb:	0f b6 c0             	movzx  eax,al
c00088fe:	83 f8 02             	cmp    eax,0x2
c0008901:	74 15                	je     c0008918 <pbuf_realloc+0x78>
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	68 00 fe 02 c0       	push   0xc002fe00
c000890b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008910:	e8 b3 71 01 00       	call   c001fac8 <CPrintf>
c0008915:	83 c4 10             	add    esp,0x10
c0008918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000891c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000891f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008924:	0f b7 c0             	movzx  eax,ax
c0008927:	39 c2                	cmp    edx,eax
c0008929:	0f 83 71 01 00 00    	jae    c0008aa0 <pbuf_realloc+0x200>
c000892f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008934:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008938:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000893b:	0f b7 c0             	movzx  eax,ax
c000893e:	29 c2                	sub    edx,eax
c0008940:	89 d0                	mov    eax,edx
c0008942:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000894a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000894f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008953:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008957:	eb 7b                	jmp    c00089d4 <pbuf_realloc+0x134>
c0008959:	8d 76 00             	lea    esi,[esi+0x0]
c000895c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008960:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008964:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008969:	89 d1                	mov    ecx,edx
c000896b:	29 c1                	sub    ecx,eax
c000896d:	89 c8                	mov    eax,ecx
c000896f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008974:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c000897c:	7e 16                	jle    c0008994 <pbuf_realloc+0xf4>
c000897e:	83 ec 08             	sub    esp,0x8
c0008981:	68 1b fe 02 c0       	push   0xc002fe1b
c0008986:	68 c6 f9 02 c0       	push   0xc002f9c6
c000898b:	e8 38 71 01 00       	call   c001fac8 <CPrintf>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	90                   	nop
c0008994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008998:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000899b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000899f:	01 d0                	add    eax,edx
c00089a1:	89 c2                	mov    edx,eax
c00089a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00089ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089af:	8b 00                	mov    eax,DWORD PTR [eax]
c00089b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00089ba:	75 18                	jne    c00089d4 <pbuf_realloc+0x134>
c00089bc:	83 ec 08             	sub    esp,0x8
c00089bf:	68 2c fe 02 c0       	push   0xc002fe2c
c00089c4:	68 c6 f9 02 c0       	push   0xc002f9c6
c00089c9:	e8 fa 70 01 00       	call   c001fac8 <CPrintf>
c00089ce:	83 c4 10             	add    esp,0x10
c00089d1:	8d 76 00             	lea    esi,[esi+0x0]
c00089d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089dc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089e1:	0f b7 c0             	movzx  eax,ax
c00089e4:	39 c2                	cmp    edx,eax
c00089e6:	0f 87 70 ff ff ff    	ja     c000895c <pbuf_realloc+0xbc>
c00089ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089f0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089f3:	0f b6 c0             	movzx  eax,al
c00089f6:	85 c0                	test   eax,eax
c00089f8:	75 5e                	jne    c0008a58 <pbuf_realloc+0x1b8>
c00089fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089fe:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a02:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a07:	0f b7 c0             	movzx  eax,ax
c0008a0a:	39 c2                	cmp    edx,eax
c0008a0c:	74 4a                	je     c0008a58 <pbuf_realloc+0x1b8>
c0008a0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008a15:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008a19:	89 c2                	mov    edx,eax
c0008a1b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008a20:	01 d0                	add    eax,edx
c0008a22:	0f b7 c0             	movzx  eax,ax
c0008a25:	83 ec 08             	sub    esp,0x8
c0008a28:	50                   	push   eax
c0008a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008a2d:	e8 d6 e6 ff ff       	call   c0007108 <mem_trim>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a39:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a3e:	75 18                	jne    c0008a58 <pbuf_realloc+0x1b8>
c0008a40:	83 ec 08             	sub    esp,0x8
c0008a43:	68 44 fe 02 c0       	push   0xc002fe44
c0008a48:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008a4d:	e8 76 70 01 00       	call   c001fac8 <CPrintf>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	8d 76 00             	lea    esi,[esi+0x0]
c0008a58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a5c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008a61:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a69:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008a6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a71:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a7b:	85 c0                	test   eax,eax
c0008a7d:	74 15                	je     c0008a94 <pbuf_realloc+0x1f4>
c0008a7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a85:	83 ec 0c             	sub    esp,0xc
c0008a88:	50                   	push   eax
c0008a89:	e8 3e f8 ff ff       	call   c00082cc <pbuf_free>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8d 76 00             	lea    esi,[esi+0x0]
c0008a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a9e:	eb 04                	jmp    c0008aa4 <pbuf_realloc+0x204>
c0008aa0:	90                   	nop
c0008aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0008aa4:	83 c4 2c             	add    esp,0x2c
c0008aa7:	c3                   	ret    

c0008aa8 <pbuf_clen>:
c0008aa8:	83 ec 10             	sub    esp,0x10
c0008aab:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008ab0:	eb 1a                	jmp    c0008acc <pbuf_clen+0x24>
c0008ab2:	66 90                	xchg   ax,ax
c0008ab4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008ab8:	83 c0 01             	add    eax,0x1
c0008abb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008abf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ac5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0008acc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008ad1:	75 e1                	jne    c0008ab4 <pbuf_clen+0xc>
c0008ad3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	c3                   	ret    
c0008adb:	90                   	nop

c0008adc <pbuf_ref>:
c0008adc:	83 ec 0c             	sub    esp,0xc
c0008adf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008ae4:	74 22                	je     c0008b08 <pbuf_ref+0x2c>
c0008ae6:	e8 cd 6f 01 00       	call   c001fab8 <CLockScheduler>
c0008aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aef:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008af3:	83 c0 01             	add    eax,0x1
c0008af6:	89 c2                	mov    edx,eax
c0008af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008afc:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008b00:	e8 97 6f 01 00       	call   c001fa9c <CUnlockScheduler>
c0008b05:	8d 76 00             	lea    esi,[esi+0x0]
c0008b08:	90                   	nop
c0008b09:	83 c4 0c             	add    esp,0xc
c0008b0c:	c3                   	ret    
c0008b0d:	8d 76 00             	lea    esi,[esi+0x0]

c0008b10 <pbuf_cat>:
c0008b10:	83 ec 1c             	sub    esp,0x1c
c0008b13:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008b18:	74 0a                	je     c0008b24 <pbuf_cat+0x14>
c0008b1a:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008b1f:	75 1f                	jne    c0008b40 <pbuf_cat+0x30>
c0008b21:	8d 76 00             	lea    esi,[esi+0x0]
c0008b24:	83 ec 08             	sub    esp,0x8
c0008b27:	68 1c fc 02 c0       	push   0xc002fc1c
c0008b2c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008b31:	e8 92 6f 01 00       	call   c001fac8 <CPrintf>
c0008b36:	83 c4 10             	add    esp,0x10
c0008b39:	e9 ae 00 00 00       	jmp    c0008bec <pbuf_cat+0xdc>
c0008b3e:	66 90                	xchg   ax,ax
c0008b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b48:	eb 26                	jmp    c0008b70 <pbuf_cat+0x60>
c0008b4a:	66 90                	xchg   ax,ax
c0008b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5a:	01 d0                	add    eax,edx
c0008b5c:	89 c2                	mov    edx,eax
c0008b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b62:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b76:	85 c0                	test   eax,eax
c0008b78:	75 d2                	jne    c0008b4c <pbuf_cat+0x3c>
c0008b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b7e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b85:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b89:	0f b7 d2             	movzx  edx,dx
c0008b8c:	0f b7 c0             	movzx  eax,ax
c0008b8f:	39 c2                	cmp    edx,eax
c0008b91:	74 15                	je     c0008ba8 <pbuf_cat+0x98>
c0008b93:	83 ec 08             	sub    esp,0x8
c0008b96:	68 54 fc 02 c0       	push   0xc002fc54
c0008b9b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008ba0:	e8 23 6f 01 00       	call   c001fac8 <CPrintf>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bae:	85 c0                	test   eax,eax
c0008bb0:	74 16                	je     c0008bc8 <pbuf_cat+0xb8>
c0008bb2:	83 ec 08             	sub    esp,0x8
c0008bb5:	68 60 fe 02 c0       	push   0xc002fe60
c0008bba:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008bbf:	e8 04 6f 01 00       	call   c001fac8 <CPrintf>
c0008bc4:	83 c4 10             	add    esp,0x10
c0008bc7:	90                   	nop
c0008bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bcc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008bd3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bd6:	01 d0                	add    eax,edx
c0008bd8:	89 c2                	mov    edx,eax
c0008bda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bde:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008be6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bea:	89 10                	mov    DWORD PTR [eax],edx
c0008bec:	83 c4 1c             	add    esp,0x1c
c0008bef:	c3                   	ret    

c0008bf0 <pbuf_chain>:
c0008bf0:	83 ec 0c             	sub    esp,0xc
c0008bf3:	83 ec 08             	sub    esp,0x8
c0008bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bfe:	e8 0d ff ff ff       	call   c0008b10 <pbuf_cat>
c0008c03:	83 c4 10             	add    esp,0x10
c0008c06:	83 ec 0c             	sub    esp,0xc
c0008c09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c0d:	e8 ca fe ff ff       	call   c0008adc <pbuf_ref>
c0008c12:	83 c4 10             	add    esp,0x10
c0008c15:	90                   	nop
c0008c16:	83 c4 0c             	add    esp,0xc
c0008c19:	c3                   	ret    
c0008c1a:	66 90                	xchg   ax,ax

c0008c1c <pbuf_dechain>:
c0008c1c:	83 ec 1c             	sub    esp,0x1c
c0008c1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008c33:	0f 84 8b 00 00 00    	je     c0008cc4 <pbuf_dechain+0xa8>
c0008c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c40:	0f b7 d0             	movzx  edx,ax
c0008c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c4a:	0f b7 c8             	movzx  ecx,ax
c0008c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c51:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c55:	0f b7 c0             	movzx  eax,ax
c0008c58:	29 c1                	sub    ecx,eax
c0008c5a:	89 c8                	mov    eax,ecx
c0008c5c:	39 c2                	cmp    edx,eax
c0008c5e:	74 18                	je     c0008c78 <pbuf_dechain+0x5c>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 84 fc 02 c0       	push   0xc002fc84
c0008c68:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008c6d:	e8 56 6e 01 00       	call   c001fac8 <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c83:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c87:	89 d1                	mov    ecx,edx
c0008c89:	29 c1                	sub    ecx,eax
c0008c8b:	89 c8                	mov    eax,ecx
c0008c8d:	89 c2                	mov    edx,eax
c0008c8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c93:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca5:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cad:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008cb1:	83 ec 0c             	sub    esp,0xc
c0008cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb8:	e8 0f f6 ff ff       	call   c00082cc <pbuf_free>
c0008cbd:	83 c4 10             	add    esp,0x10
c0008cc0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008cd3:	0f b7 d2             	movzx  edx,dx
c0008cd6:	0f b7 c0             	movzx  eax,ax
c0008cd9:	39 c2                	cmp    edx,eax
c0008cdb:	74 17                	je     c0008cf4 <pbuf_dechain+0xd8>
c0008cdd:	83 ec 08             	sub    esp,0x8
c0008ce0:	68 70 fe 02 c0       	push   0xc002fe70
c0008ce5:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008cea:	e8 d9 6d 01 00       	call   c001fac8 <CPrintf>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	66 90                	xchg   ax,ax
c0008cf4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008cf9:	85 c0                	test   eax,eax
c0008cfb:	75 07                	jne    c0008d04 <pbuf_dechain+0xe8>
c0008cfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d01:	eb 09                	jmp    c0008d0c <pbuf_dechain+0xf0>
c0008d03:	90                   	nop
c0008d04:	b8 00 00 00 00       	mov    eax,0x0
c0008d09:	8d 76 00             	lea    esi,[esi+0x0]
c0008d0c:	83 c4 1c             	add    esp,0x1c
c0008d0f:	c3                   	ret    

c0008d10 <pbuf_copy>:
c0008d10:	53                   	push   ebx
c0008d11:	83 ec 18             	sub    esp,0x18
c0008d14:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008d1b:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008d22:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d27:	74 1f                	je     c0008d48 <pbuf_copy+0x38>
c0008d29:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d2e:	74 18                	je     c0008d48 <pbuf_copy+0x38>
c0008d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d34:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d3e:	0f b7 d2             	movzx  edx,dx
c0008d41:	0f b7 c0             	movzx  eax,ax
c0008d44:	39 c2                	cmp    edx,eax
c0008d46:	73 1c                	jae    c0008d64 <pbuf_copy+0x54>
c0008d48:	83 ec 08             	sub    esp,0x8
c0008d4b:	68 a8 fc 02 c0       	push   0xc002fca8
c0008d50:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008d55:	e8 6e 6d 01 00       	call   c001fac8 <CPrintf>
c0008d5a:	83 c4 10             	add    esp,0x10
c0008d5d:	b0 f2                	mov    al,0xf2
c0008d5f:	e9 0c 02 00 00       	jmp    c0008f70 <pbuf_copy+0x260>
c0008d64:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d69:	75 15                	jne    c0008d80 <pbuf_copy+0x70>
c0008d6b:	83 ec 08             	sub    esp,0x8
c0008d6e:	68 85 fe 02 c0       	push   0xc002fe85
c0008d73:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008d78:	e8 4b 6d 01 00       	call   c001fac8 <CPrintf>
c0008d7d:	83 c4 10             	add    esp,0x10
c0008d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d88:	0f b7 d0             	movzx  edx,ax
c0008d8b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d90:	89 d1                	mov    ecx,edx
c0008d92:	29 c1                	sub    ecx,eax
c0008d94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d98:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d9c:	0f b7 d0             	movzx  edx,ax
c0008d9f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008da4:	29 c2                	sub    edx,eax
c0008da6:	89 d0                	mov    eax,edx
c0008da8:	39 c1                	cmp    ecx,eax
c0008daa:	7c 1c                	jl     c0008dc8 <pbuf_copy+0xb8>
c0008dac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008db0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008db4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008db8:	89 d3                	mov    ebx,edx
c0008dba:	29 c3                	sub    ebx,eax
c0008dbc:	89 d8                	mov    eax,ebx
c0008dbe:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008dc3:	eb 1b                	jmp    c0008de0 <pbuf_copy+0xd0>
c0008dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0008dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008dd0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008dd5:	89 d3                	mov    ebx,edx
c0008dd7:	29 c3                	sub    ebx,eax
c0008dd9:	89 d8                	mov    eax,ebx
c0008ddb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008de0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008de5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008de9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008dec:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008df1:	01 d1                	add    ecx,edx
c0008df3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008df7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008dfa:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008dff:	01 da                	add    edx,ebx
c0008e01:	83 ec 04             	sub    esp,0x4
c0008e04:	50                   	push   eax
c0008e05:	51                   	push   ecx
c0008e06:	52                   	push   edx
c0008e07:	e8 6e 75 ff ff       	call   c000037a <memcpy>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008e14:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e19:	01 d0                	add    eax,edx
c0008e1b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008e20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008e24:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e29:	01 d0                	add    eax,edx
c0008e2b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008e30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e34:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e38:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e3d:	0f b7 c0             	movzx  eax,ax
c0008e40:	39 c2                	cmp    edx,eax
c0008e42:	76 18                	jbe    c0008e5c <pbuf_copy+0x14c>
c0008e44:	83 ec 08             	sub    esp,0x8
c0008e47:	68 92 fe 02 c0       	push   0xc002fe92
c0008e4c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008e51:	e8 72 6c 01 00       	call   c001fac8 <CPrintf>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	8d 76 00             	lea    esi,[esi+0x0]
c0008e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e60:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e64:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e69:	0f b7 c0             	movzx  eax,ax
c0008e6c:	39 c2                	cmp    edx,eax
c0008e6e:	75 14                	jne    c0008e84 <pbuf_copy+0x174>
c0008e70:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e7d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e81:	8d 76 00             	lea    esi,[esi+0x0]
c0008e84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e88:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e8c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e91:	0f b7 c0             	movzx  eax,ax
c0008e94:	39 c2                	cmp    edx,eax
c0008e96:	76 18                	jbe    c0008eb0 <pbuf_copy+0x1a0>
c0008e98:	83 ec 08             	sub    esp,0x8
c0008e9b:	68 a9 fe 02 c0       	push   0xc002fea9
c0008ea0:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008ea5:	e8 1e 6c 01 00       	call   c001fac8 <CPrintf>
c0008eaa:	83 c4 10             	add    esp,0x10
c0008ead:	8d 76 00             	lea    esi,[esi+0x0]
c0008eb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eb8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008ebd:	0f b7 c0             	movzx  eax,ax
c0008ec0:	39 c2                	cmp    edx,eax
c0008ec2:	72 14                	jb     c0008ed8 <pbuf_copy+0x1c8>
c0008ec4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008ecb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ed1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ed8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008edd:	74 3d                	je     c0008f1c <pbuf_copy+0x20c>
c0008edf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ee3:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ee7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eeb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008eee:	0f b7 d2             	movzx  edx,dx
c0008ef1:	0f b7 c0             	movzx  eax,ax
c0008ef4:	39 c2                	cmp    edx,eax
c0008ef6:	75 24                	jne    c0008f1c <pbuf_copy+0x20c>
c0008ef8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008efe:	85 c0                	test   eax,eax
c0008f00:	74 1a                	je     c0008f1c <pbuf_copy+0x20c>
c0008f02:	83 ec 08             	sub    esp,0x8
c0008f05:	68 d8 fc 02 c0       	push   0xc002fcd8
c0008f0a:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008f0f:	e8 b4 6b 01 00       	call   c001fac8 <CPrintf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	b0 fa                	mov    al,0xfa
c0008f19:	eb 55                	jmp    c0008f70 <pbuf_copy+0x260>
c0008f1b:	90                   	nop
c0008f1c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f21:	74 3d                	je     c0008f60 <pbuf_copy+0x250>
c0008f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f27:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f32:	0f b7 d2             	movzx  edx,dx
c0008f35:	0f b7 c0             	movzx  eax,ax
c0008f38:	39 c2                	cmp    edx,eax
c0008f3a:	75 24                	jne    c0008f60 <pbuf_copy+0x250>
c0008f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f42:	85 c0                	test   eax,eax
c0008f44:	74 1a                	je     c0008f60 <pbuf_copy+0x250>
c0008f46:	83 ec 08             	sub    esp,0x8
c0008f49:	68 d8 fc 02 c0       	push   0xc002fcd8
c0008f4e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008f53:	e8 70 6b 01 00       	call   c001fac8 <CPrintf>
c0008f58:	83 c4 10             	add    esp,0x10
c0008f5b:	b0 fa                	mov    al,0xfa
c0008f5d:	eb 11                	jmp    c0008f70 <pbuf_copy+0x260>
c0008f5f:	90                   	nop
c0008f60:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f65:	0f 85 f9 fd ff ff    	jne    c0008d64 <pbuf_copy+0x54>
c0008f6b:	b0 00                	mov    al,0x0
c0008f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0008f70:	83 c4 18             	add    esp,0x18
c0008f73:	5b                   	pop    ebx
c0008f74:	c3                   	ret    
c0008f75:	8d 76 00             	lea    esi,[esi+0x0]

c0008f78 <pbuf_copy_partial>:
c0008f78:	53                   	push   ebx
c0008f79:	83 ec 28             	sub    esp,0x28
c0008f7c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008f80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f84:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f89:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f8e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f95:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f9a:	75 20                	jne    c0008fbc <pbuf_copy_partial+0x44>
c0008f9c:	83 ec 08             	sub    esp,0x8
c0008f9f:	68 04 fd 02 c0       	push   0xc002fd04
c0008fa4:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008fa9:	e8 1a 6b 01 00       	call   c001fac8 <CPrintf>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	b8 00 00 00 00       	mov    eax,0x0
c0008fb6:	e9 59 01 00 00       	jmp    c0009114 <pbuf_copy_partial+0x19c>
c0008fbb:	90                   	nop
c0008fbc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fc1:	75 21                	jne    c0008fe4 <pbuf_copy_partial+0x6c>
c0008fc3:	83 ec 08             	sub    esp,0x8
c0008fc6:	68 24 fd 02 c0       	push   0xc002fd24
c0008fcb:	68 c6 f9 02 c0       	push   0xc002f9c6
c0008fd0:	e8 f3 6a 01 00       	call   c001fac8 <CPrintf>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	b8 00 00 00 00       	mov    eax,0x0
c0008fdd:	e9 32 01 00 00       	jmp    c0009114 <pbuf_copy_partial+0x19c>
c0008fe2:	66 90                	xchg   ax,ax
c0008fe4:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008feb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ff0:	74 0a                	je     c0008ffc <pbuf_copy_partial+0x84>
c0008ff2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008ff7:	75 0f                	jne    c0009008 <pbuf_copy_partial+0x90>
c0008ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0008ffc:	b8 00 00 00 00       	mov    eax,0x0
c0009001:	e9 0e 01 00 00       	jmp    c0009114 <pbuf_copy_partial+0x19c>
c0009006:	66 90                	xchg   ax,ax
c0009008:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000900c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009010:	e9 e3 00 00 00       	jmp    c00090f8 <pbuf_copy_partial+0x180>
c0009015:	8d 76 00             	lea    esi,[esi+0x0]
c0009018:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000901d:	85 c0                	test   eax,eax
c000901f:	74 33                	je     c0009054 <pbuf_copy_partial+0xdc>
c0009021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009025:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009029:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000902e:	0f b7 c0             	movzx  eax,ax
c0009031:	39 c2                	cmp    edx,eax
c0009033:	72 1f                	jb     c0009054 <pbuf_copy_partial+0xdc>
c0009035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009039:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000903d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009041:	89 d3                	mov    ebx,edx
c0009043:	29 c3                	sub    ebx,eax
c0009045:	89 d8                	mov    eax,ebx
c0009047:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000904c:	e9 9b 00 00 00       	jmp    c00090ec <pbuf_copy_partial+0x174>
c0009051:	8d 76 00             	lea    esi,[esi+0x0]
c0009054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009058:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000905c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009060:	89 d1                	mov    ecx,edx
c0009062:	29 c1                	sub    ecx,eax
c0009064:	89 c8                	mov    eax,ecx
c0009066:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000906b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0009070:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009075:	39 c2                	cmp    edx,eax
c0009077:	76 0b                	jbe    c0009084 <pbuf_copy_partial+0x10c>
c0009079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000907d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009082:	66 90                	xchg   ax,ax
c0009084:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009089:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000908d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009090:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009095:	01 d1                	add    ecx,edx
c0009097:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c000909c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00090a0:	01 da                	add    edx,ebx
c00090a2:	83 ec 04             	sub    esp,0x4
c00090a5:	50                   	push   eax
c00090a6:	51                   	push   ecx
c00090a7:	52                   	push   edx
c00090a8:	e8 cd 72 ff ff       	call   c000037a <memcpy>
c00090ad:	83 c4 10             	add    esp,0x10
c00090b0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00090b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090b9:	01 d0                	add    eax,edx
c00090bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00090c0:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00090c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090c9:	01 d0                	add    eax,edx
c00090cb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00090d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00090d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090d8:	89 d3                	mov    ebx,edx
c00090da:	29 c3                	sub    ebx,eax
c00090dc:	89 d8                	mov    eax,ebx
c00090de:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090e3:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00090ea:	66 90                	xchg   ax,ax
c00090ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090f6:	66 90                	xchg   ax,ax
c00090f8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090fd:	85 c0                	test   eax,eax
c00090ff:	74 0b                	je     c000910c <pbuf_copy_partial+0x194>
c0009101:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009106:	0f 85 0c ff ff ff    	jne    c0009018 <pbuf_copy_partial+0xa0>
c000910c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009111:	8d 76 00             	lea    esi,[esi+0x0]
c0009114:	83 c4 28             	add    esp,0x28
c0009117:	5b                   	pop    ebx
c0009118:	c3                   	ret    
c0009119:	8d 76 00             	lea    esi,[esi+0x0]

c000911c <pbuf_take>:
c000911c:	83 ec 2c             	sub    esp,0x2c
c000911f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009123:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000912c:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009131:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009138:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000913d:	75 1d                	jne    c000915c <pbuf_take+0x40>
c000913f:	83 ec 08             	sub    esp,0x8
c0009142:	68 c4 fe 02 c0       	push   0xc002fec4
c0009147:	68 c6 f9 02 c0       	push   0xc002f9c6
c000914c:	e8 77 69 01 00       	call   c001fac8 <CPrintf>
c0009151:	83 c4 10             	add    esp,0x10
c0009154:	b0 00                	mov    al,0x0
c0009156:	e9 3d 01 00 00       	jmp    c0009298 <pbuf_take+0x17c>
c000915b:	90                   	nop
c000915c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009161:	75 1d                	jne    c0009180 <pbuf_take+0x64>
c0009163:	83 ec 08             	sub    esp,0x8
c0009166:	68 db fe 02 c0       	push   0xc002fedb
c000916b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009170:	e8 53 69 01 00       	call   c001fac8 <CPrintf>
c0009175:	83 c4 10             	add    esp,0x10
c0009178:	b0 00                	mov    al,0x0
c000917a:	e9 19 01 00 00       	jmp    c0009298 <pbuf_take+0x17c>
c000917f:	90                   	nop
c0009180:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009185:	74 1d                	je     c00091a4 <pbuf_take+0x88>
c0009187:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000918c:	74 16                	je     c00091a4 <pbuf_take+0x88>
c000918e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009192:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009195:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000919a:	0f b7 c0             	movzx  eax,ax
c000919d:	39 c2                	cmp    edx,eax
c000919f:	76 0b                	jbe    c00091ac <pbuf_take+0x90>
c00091a1:	8d 76 00             	lea    esi,[esi+0x0]
c00091a4:	b0 f2                	mov    al,0xf2
c00091a6:	e9 ed 00 00 00       	jmp    c0009298 <pbuf_take+0x17c>
c00091ab:	90                   	nop
c00091ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091b4:	e9 9f 00 00 00       	jmp    c0009258 <pbuf_take+0x13c>
c00091b9:	8d 76 00             	lea    esi,[esi+0x0]
c00091bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00091c1:	75 15                	jne    c00091d8 <pbuf_take+0xbc>
c00091c3:	83 ec 08             	sub    esp,0x8
c00091c6:	68 f6 fe 02 c0       	push   0xc002fef6
c00091cb:	68 c6 f9 02 c0       	push   0xc002f9c6
c00091d0:	e8 f3 68 01 00       	call   c001fac8 <CPrintf>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091dc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091e5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091e9:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091ee:	0f b7 c0             	movzx  eax,ax
c00091f1:	39 c2                	cmp    edx,eax
c00091f3:	76 0f                	jbe    c0009204 <pbuf_take+0xe8>
c00091f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091f9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091fd:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009202:	66 90                	xchg   ax,ax
c0009204:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009209:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000920e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009212:	01 c1                	add    ecx,eax
c0009214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000921b:	83 ec 04             	sub    esp,0x4
c000921e:	52                   	push   edx
c000921f:	51                   	push   ecx
c0009220:	50                   	push   eax
c0009221:	e8 54 71 ff ff       	call   c000037a <memcpy>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000922d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009232:	89 d1                	mov    ecx,edx
c0009234:	29 c1                	sub    ecx,eax
c0009236:	89 c8                	mov    eax,ecx
c0009238:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000923d:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009242:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009247:	01 d0                	add    eax,edx
c0009249:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000924e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009252:	8b 00                	mov    eax,DWORD PTR [eax]
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000925d:	85 c0                	test   eax,eax
c000925f:	0f 85 57 ff ff ff    	jne    c00091bc <pbuf_take+0xa0>
c0009265:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000926a:	85 c0                	test   eax,eax
c000926c:	75 0e                	jne    c000927c <pbuf_take+0x160>
c000926e:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009273:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009278:	39 c2                	cmp    edx,eax
c000927a:	74 18                	je     c0009294 <pbuf_take+0x178>
c000927c:	83 ec 08             	sub    esp,0x8
c000927f:	68 0e ff 02 c0       	push   0xc002ff0e
c0009284:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009289:	e8 3a 68 01 00       	call   c001fac8 <CPrintf>
c000928e:	83 c4 10             	add    esp,0x10
c0009291:	8d 76 00             	lea    esi,[esi+0x0]
c0009294:	b0 00                	mov    al,0x0
c0009296:	66 90                	xchg   ax,ax
c0009298:	83 c4 2c             	add    esp,0x2c
c000929b:	c3                   	ret    

c000929c <pbuf_coalesce>:
c000929c:	83 ec 1c             	sub    esp,0x1c
c000929f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00092a5:	85 c0                	test   eax,eax
c00092a7:	75 07                	jne    c00092b0 <pbuf_coalesce+0x14>
c00092a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ad:	eb 7d                	jmp    c000932c <pbuf_coalesce+0x90>
c00092af:	90                   	nop
c00092b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092b7:	0f b7 c0             	movzx  eax,ax
c00092ba:	83 ec 04             	sub    esp,0x4
c00092bd:	6a 00                	push   0x0
c00092bf:	50                   	push   eax
c00092c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00092c4:	e8 df f1 ff ff       	call   c00084a8 <pbuf_alloc>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00092d5:	75 09                	jne    c00092e0 <pbuf_coalesce+0x44>
c00092d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092db:	eb 4f                	jmp    c000932c <pbuf_coalesce+0x90>
c00092dd:	8d 76 00             	lea    esi,[esi+0x0]
c00092e0:	83 ec 08             	sub    esp,0x8
c00092e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092eb:	e8 20 fa ff ff       	call   c0008d10 <pbuf_copy>
c00092f0:	83 c4 10             	add    esp,0x10
c00092f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00092f7:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00092fc:	85 c0                	test   eax,eax
c00092fe:	74 18                	je     c0009318 <pbuf_coalesce+0x7c>
c0009300:	83 ec 08             	sub    esp,0x8
c0009303:	68 24 ff 02 c0       	push   0xc002ff24
c0009308:	68 c6 f9 02 c0       	push   0xc002f9c6
c000930d:	e8 b6 67 01 00       	call   c001fac8 <CPrintf>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	8d 76 00             	lea    esi,[esi+0x0]
c0009318:	83 ec 0c             	sub    esp,0xc
c000931b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000931f:	e8 a8 ef ff ff       	call   c00082cc <pbuf_free>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000932b:	90                   	nop
c000932c:	83 c4 1c             	add    esp,0x1c
c000932f:	c3                   	ret    

c0009330 <pbuf_get_at>:
c0009330:	83 ec 14             	sub    esp,0x14
c0009333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009337:	66 89 04 24          	mov    WORD PTR [esp],ax
c000933b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000933e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009343:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009347:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000934b:	eb 27                	jmp    c0009374 <pbuf_get_at+0x44>
c000934d:	8d 76 00             	lea    esi,[esi+0x0]
c0009350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009354:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009358:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000935d:	89 d1                	mov    ecx,edx
c000935f:	29 c1                	sub    ecx,eax
c0009361:	89 c8                	mov    eax,ecx
c0009363:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000936c:	8b 00                	mov    eax,DWORD PTR [eax]
c000936e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009372:	66 90                	xchg   ax,ax
c0009374:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009379:	74 15                	je     c0009390 <pbuf_get_at+0x60>
c000937b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000937f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009383:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009388:	0f b7 c0             	movzx  eax,ax
c000938b:	39 c2                	cmp    edx,eax
c000938d:	73 c1                	jae    c0009350 <pbuf_get_at+0x20>
c000938f:	90                   	nop
c0009390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009395:	74 29                	je     c00093c0 <pbuf_get_at+0x90>
c0009397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000939b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000939f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00093a4:	0f b7 c0             	movzx  eax,ax
c00093a7:	39 c2                	cmp    edx,eax
c00093a9:	73 15                	jae    c00093c0 <pbuf_get_at+0x90>
c00093ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00093b2:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8a 00                	mov    al,BYTE PTR [eax]
c00093bb:	eb 07                	jmp    c00093c4 <pbuf_get_at+0x94>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 00                	mov    al,0x0
c00093c2:	66 90                	xchg   ax,ax
c00093c4:	83 c4 14             	add    esp,0x14
c00093c7:	c3                   	ret    

c00093c8 <pbuf_memcmp>:
c00093c8:	83 ec 18             	sub    esp,0x18
c00093cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00093cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00093d3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00093d8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093e0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ed:	eb 25                	jmp    c0009414 <pbuf_memcmp+0x4c>
c00093ef:	90                   	nop
c00093f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093f8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00093fd:	89 d1                	mov    ecx,edx
c00093ff:	29 c1                	sub    ecx,eax
c0009401:	89 c8                	mov    eax,ecx
c0009403:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940c:	8b 00                	mov    eax,DWORD PTR [eax]
c000940e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009412:	66 90                	xchg   ax,ax
c0009414:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009419:	74 15                	je     c0009430 <pbuf_memcmp+0x68>
c000941b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000941f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009423:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009428:	0f b7 c0             	movzx  eax,ax
c000942b:	39 c2                	cmp    edx,eax
c000942d:	73 c1                	jae    c00093f0 <pbuf_memcmp+0x28>
c000942f:	90                   	nop
c0009430:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009435:	0f 84 8d 00 00 00    	je     c00094c8 <pbuf_memcmp+0x100>
c000943b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000943f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009443:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009448:	0f b7 c0             	movzx  eax,ax
c000944b:	39 c2                	cmp    edx,eax
c000944d:	73 79                	jae    c00094c8 <pbuf_memcmp+0x100>
c000944f:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009456:	eb 5c                	jmp    c00094b4 <pbuf_memcmp+0xec>
c0009458:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009462:	01 d0                	add    eax,edx
c0009464:	0f b7 c0             	movzx  eax,ax
c0009467:	50                   	push   eax
c0009468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946c:	e8 bf fe ff ff       	call   c0009330 <pbuf_get_at>
c0009471:	83 c4 08             	add    esp,0x8
c0009474:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009478:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000947d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009481:	01 d0                	add    eax,edx
c0009483:	8a 00                	mov    al,BYTE PTR [eax]
c0009485:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009489:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c000948e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009493:	39 c2                	cmp    edx,eax
c0009495:	74 0d                	je     c00094a4 <pbuf_memcmp+0xdc>
c0009497:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000949c:	83 c0 01             	add    eax,0x1
c000949f:	eb 2f                	jmp    c00094d0 <pbuf_memcmp+0x108>
c00094a1:	8d 76 00             	lea    esi,[esi+0x0]
c00094a4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094a9:	83 c0 01             	add    eax,0x1
c00094ac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00094b1:	8d 76 00             	lea    esi,[esi+0x0]
c00094b4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00094b9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00094bd:	39 c2                	cmp    edx,eax
c00094bf:	72 97                	jb     c0009458 <pbuf_memcmp+0x90>
c00094c1:	b8 00 00 00 00       	mov    eax,0x0
c00094c6:	eb 08                	jmp    c00094d0 <pbuf_memcmp+0x108>
c00094c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094cd:	8d 76 00             	lea    esi,[esi+0x0]
c00094d0:	83 c4 18             	add    esp,0x18
c00094d3:	c3                   	ret    

c00094d4 <pbuf_memfind>:
c00094d4:	83 ec 18             	sub    esp,0x18
c00094d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00094db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00094df:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00094e4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00094e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094ec:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00094ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f3:	89 d1                	mov    ecx,edx
c00094f5:	29 c1                	sub    ecx,eax
c00094f7:	89 c8                	mov    eax,ecx
c00094f9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00094fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009502:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009505:	0f b7 c0             	movzx  eax,ax
c0009508:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c000950d:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009511:	01 ca                	add    edx,ecx
c0009513:	39 d0                	cmp    eax,edx
c0009515:	7c 65                	jl     c000957c <pbuf_memfind+0xa8>
c0009517:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000951a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000951f:	eb 4b                	jmp    c000956c <pbuf_memfind+0x98>
c0009521:	8d 76 00             	lea    esi,[esi+0x0]
c0009524:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009529:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000952e:	52                   	push   edx
c000952f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009533:	50                   	push   eax
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	e8 8b fe ff ff       	call   c00093c8 <pbuf_memcmp>
c000953d:	83 c4 10             	add    esp,0x10
c0009540:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009545:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000954a:	85 c0                	test   eax,eax
c000954c:	75 0a                	jne    c0009558 <pbuf_memfind+0x84>
c000954e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009553:	eb 2f                	jmp    c0009584 <pbuf_memfind+0xb0>
c0009555:	8d 76 00             	lea    esi,[esi+0x0]
c0009558:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000955d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0009562:	01 d0                	add    eax,edx
c0009564:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009571:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009576:	39 c2                	cmp    edx,eax
c0009578:	76 aa                	jbe    c0009524 <pbuf_memfind+0x50>
c000957a:	66 90                	xchg   ax,ax
c000957c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009581:	8d 76 00             	lea    esi,[esi+0x0]
c0009584:	83 c4 18             	add    esp,0x18
c0009587:	c3                   	ret    

c0009588 <pbuf_strstr>:
c0009588:	83 ec 1c             	sub    esp,0x1c
c000958b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009590:	74 1e                	je     c00095b0 <pbuf_strstr+0x28>
c0009592:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009596:	8a 00                	mov    al,BYTE PTR [eax]
c0009598:	0f be c0             	movsx  eax,al
c000959b:	85 c0                	test   eax,eax
c000959d:	74 11                	je     c00095b0 <pbuf_strstr+0x28>
c000959f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00095a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00095a6:	0f b7 c0             	movzx  eax,ax
c00095a9:	3d ff ff 00 00       	cmp    eax,0xffff
c00095ae:	75 08                	jne    c00095b8 <pbuf_strstr+0x30>
c00095b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095b5:	eb 41                	jmp    c00095f8 <pbuf_strstr+0x70>
c00095b7:	90                   	nop
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00095bf:	e8 bc 6f ff ff       	call   c0000580 <strlen>
c00095c4:	83 c4 10             	add    esp,0x10
c00095c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095cb:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00095d3:	76 07                	jbe    c00095dc <pbuf_strstr+0x54>
c00095d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095da:	eb 1c                	jmp    c00095f8 <pbuf_strstr+0x70>
c00095dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095e0:	0f b7 c0             	movzx  eax,ax
c00095e3:	6a 00                	push   0x0
c00095e5:	50                   	push   eax
c00095e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <pbuf_memfind>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	66 90                	xchg   ax,ax
c00095f8:	83 c4 1c             	add    esp,0x1c
c00095fb:	c3                   	ret    

c00095fc <raw_input>:
c00095fc:	83 ec 2c             	sub    esp,0x2c
c00095ff:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009604:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009608:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000960b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000960f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009613:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009616:	0f b6 c0             	movzx  eax,al
c0009619:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000961e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009626:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000962b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000962f:	e9 b8 00 00 00       	jmp    c00096ec <raw_input+0xf0>
c0009634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009638:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c000963b:	0f b6 d0             	movzx  edx,al
c000963e:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c0009643:	39 c2                	cmp    edx,eax
c0009645:	0f 85 8d 00 00 00    	jne    c00096d8 <raw_input+0xdc>
c000964b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000964f:	85 c0                	test   eax,eax
c0009651:	74 19                	je     c000966c <raw_input+0x70>
c0009653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009657:	8b 00                	mov    eax,DWORD PTR [eax]
c0009659:	85 c0                	test   eax,eax
c000965b:	74 0f                	je     c000966c <raw_input+0x70>
c000965d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009661:	8b 10                	mov    edx,DWORD PTR [eax]
c0009663:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009668:	39 c2                	cmp    edx,eax
c000966a:	75 6c                	jne    c00096d8 <raw_input+0xdc>
c000966c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009670:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009673:	85 c0                	test   eax,eax
c0009675:	74 61                	je     c00096d8 <raw_input+0xdc>
c0009677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000967b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000967e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009682:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009685:	68 90 68 03 c0       	push   0xc0036890
c000968a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000968e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009692:	52                   	push   edx
c0009693:	ff d0                	call   eax
c0009695:	83 c4 10             	add    esp,0x10
c0009698:	0f b6 c0             	movzx  eax,al
c000969b:	85 c0                	test   eax,eax
c000969d:	74 39                	je     c00096d8 <raw_input+0xdc>
c000969f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00096a7:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00096ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00096b1:	74 25                	je     c00096d8 <raw_input+0xdc>
c00096b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00096ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00096be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00096c1:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00096c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00096ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d2:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00096d7:	90                   	nop
c00096d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	90                   	nop
c00096ec:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00096f1:	85 c0                	test   eax,eax
c00096f3:	75 0b                	jne    c0009700 <raw_input+0x104>
c00096f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00096fa:	0f 85 34 ff ff ff    	jne    c0009634 <raw_input+0x38>
c0009700:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009704:	83 c4 2c             	add    esp,0x2c
c0009707:	c3                   	ret    

c0009708 <raw_bind>:
c0009708:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000970d:	74 09                	je     c0009718 <raw_bind+0x10>
c000970f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009713:	8b 00                	mov    eax,DWORD PTR [eax]
c0009715:	eb 09                	jmp    c0009720 <raw_bind+0x18>
c0009717:	90                   	nop
c0009718:	b8 00 00 00 00       	mov    eax,0x0
c000971d:	8d 76 00             	lea    esi,[esi+0x0]
c0009720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009724:	89 02                	mov    DWORD PTR [edx],eax
c0009726:	b0 00                	mov    al,0x0
c0009728:	c3                   	ret    
c0009729:	8d 76 00             	lea    esi,[esi+0x0]

c000972c <raw_connect>:
c000972c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009731:	74 09                	je     c000973c <raw_connect+0x10>
c0009733:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009737:	8b 00                	mov    eax,DWORD PTR [eax]
c0009739:	eb 09                	jmp    c0009744 <raw_connect+0x18>
c000973b:	90                   	nop
c000973c:	b8 00 00 00 00       	mov    eax,0x0
c0009741:	8d 76 00             	lea    esi,[esi+0x0]
c0009744:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009748:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000974b:	b0 00                	mov    al,0x0
c000974d:	c3                   	ret    
c000974e:	66 90                	xchg   ax,ax

c0009750 <raw_recv>:
c0009750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009758:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000975b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009766:	90                   	nop
c0009767:	c3                   	ret    

c0009768 <raw_sendto>:
c0009768:	83 ec 1c             	sub    esp,0x1c
c000976b:	83 ec 08             	sub    esp,0x8
c000976e:	6a 14                	push   0x14
c0009770:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009774:	e8 b3 e9 ff ff       	call   c000812c <pbuf_header>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	0f b6 c0             	movzx  eax,al
c000977f:	85 c0                	test   eax,eax
c0009781:	74 49                	je     c00097cc <raw_sendto+0x64>
c0009783:	83 ec 04             	sub    esp,0x4
c0009786:	6a 00                	push   0x0
c0009788:	6a 00                	push   0x0
c000978a:	6a 01                	push   0x1
c000978c:	e8 17 ed ff ff       	call   c00084a8 <pbuf_alloc>
c0009791:	83 c4 10             	add    esp,0x10
c0009794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009798:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000979d:	75 09                	jne    c00097a8 <raw_sendto+0x40>
c000979f:	b0 ff                	mov    al,0xff
c00097a1:	e9 2a 01 00 00       	jmp    c00098d0 <raw_sendto+0x168>
c00097a6:	66 90                	xchg   ax,ax
c00097a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097af:	0f b7 c0             	movzx  eax,ax
c00097b2:	85 c0                	test   eax,eax
c00097b4:	74 52                	je     c0009808 <raw_sendto+0xa0>
c00097b6:	83 ec 08             	sub    esp,0x8
c00097b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097c1:	e8 2a f4 ff ff       	call   c0008bf0 <pbuf_chain>
c00097c6:	83 c4 10             	add    esp,0x10
c00097c9:	eb 3d                	jmp    c0009808 <raw_sendto+0xa0>
c00097cb:	90                   	nop
c00097cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097d4:	83 ec 08             	sub    esp,0x8
c00097d7:	6a ec                	push   0xffffffec
c00097d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097dd:	e8 4a e9 ff ff       	call   c000812c <pbuf_header>
c00097e2:	83 c4 10             	add    esp,0x10
c00097e5:	0f b6 c0             	movzx  eax,al
c00097e8:	85 c0                	test   eax,eax
c00097ea:	74 1c                	je     c0009808 <raw_sendto+0xa0>
c00097ec:	83 ec 08             	sub    esp,0x8
c00097ef:	68 38 ff 02 c0       	push   0xc002ff38
c00097f4:	68 c6 f9 02 c0       	push   0xc002f9c6
c00097f9:	e8 ca 62 01 00       	call   c001fac8 <CPrintf>
c00097fe:	83 c4 10             	add    esp,0x10
c0009801:	b0 ff                	mov    al,0xff
c0009803:	e9 c8 00 00 00       	jmp    c00098d0 <raw_sendto+0x168>
c0009808:	83 ec 0c             	sub    esp,0xc
c000980b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000980f:	e8 00 9e 00 00       	call   c0013614 <ip_route>
c0009814:	83 c4 10             	add    esp,0x10
c0009817:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000981b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009820:	75 22                	jne    c0009844 <raw_sendto+0xdc>
c0009822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009826:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c000982a:	74 10                	je     c000983c <raw_sendto+0xd4>
c000982c:	83 ec 0c             	sub    esp,0xc
c000982f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009833:	e8 94 ea ff ff       	call   c00082cc <pbuf_free>
c0009838:	83 c4 10             	add    esp,0x10
c000983b:	90                   	nop
c000983c:	b0 fc                	mov    al,0xfc
c000983e:	e9 8d 00 00 00       	jmp    c00098d0 <raw_sendto+0x168>
c0009843:	90                   	nop
c0009844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009848:	85 c0                	test   eax,eax
c000984a:	74 0c                	je     c0009858 <raw_sendto+0xf0>
c000984c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009850:	8b 00                	mov    eax,DWORD PTR [eax]
c0009852:	85 c0                	test   eax,eax
c0009854:	75 12                	jne    c0009868 <raw_sendto+0x100>
c0009856:	66 90                	xchg   ax,ax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	83 c0 04             	add    eax,0x4
c000985f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009863:	eb 0b                	jmp    c0009870 <raw_sendto+0x108>
c0009865:	8d 76 00             	lea    esi,[esi+0x0]
c0009868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000986c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009874:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009877:	0f b6 c8             	movzx  ecx,al
c000987a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000987e:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009881:	0f b6 d0             	movzx  edx,al
c0009884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009888:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000988b:	0f b6 c0             	movzx  eax,al
c000988e:	83 ec 04             	sub    esp,0x4
c0009891:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009895:	51                   	push   ecx
c0009896:	52                   	push   edx
c0009897:	50                   	push   eax
c0009898:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000989c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a4:	e8 43 a2 00 00       	call   c0013aec <ip_output_if>
c00098a9:	83 c4 20             	add    esp,0x20
c00098ac:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00098b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098b4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098b8:	74 12                	je     c00098cc <raw_sendto+0x164>
c00098ba:	83 ec 0c             	sub    esp,0xc
c00098bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098c1:	e8 06 ea ff ff       	call   c00082cc <pbuf_free>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	8d 76 00             	lea    esi,[esi+0x0]
c00098cc:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c00098d0:	83 c4 1c             	add    esp,0x1c
c00098d3:	c3                   	ret    

c00098d4 <raw_send>:
c00098d4:	83 ec 0c             	sub    esp,0xc
c00098d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098db:	83 c0 04             	add    eax,0x4
c00098de:	83 ec 04             	sub    esp,0x4
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ea:	e8 79 fe ff ff       	call   c0009768 <raw_sendto>
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	83 c4 0c             	add    esp,0xc
c00098f5:	c3                   	ret    
c00098f6:	66 90                	xchg   ax,ax

c00098f8 <raw_remove>:
c00098f8:	83 ec 1c             	sub    esp,0x1c
c00098fb:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009900:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009904:	75 12                	jne    c0009918 <raw_remove+0x20>
c0009906:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000990b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000990e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009913:	eb 4b                	jmp    c0009960 <raw_remove+0x68>
c0009915:	8d 76 00             	lea    esi,[esi+0x0]
c0009918:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000991d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009921:	eb 35                	jmp    c0009958 <raw_remove+0x60>
c0009923:	90                   	nop
c0009924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009928:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000992b:	85 c0                	test   eax,eax
c000992d:	74 1d                	je     c000994c <raw_remove+0x54>
c000992f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009933:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009936:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000993a:	75 10                	jne    c000994c <raw_remove+0x54>
c000993c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009940:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009947:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000994a:	66 90                	xchg   ax,ax
c000994c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009950:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009953:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009957:	90                   	nop
c0009958:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000995d:	75 c5                	jne    c0009924 <raw_remove+0x2c>
c000995f:	90                   	nop
c0009960:	83 ec 08             	sub    esp,0x8
c0009963:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009967:	6a 00                	push   0x0
c0009969:	e8 9e e0 ff ff       	call   c0007a0c <memp_free>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	90                   	nop
c0009972:	83 c4 1c             	add    esp,0x1c
c0009975:	c3                   	ret    
c0009976:	66 90                	xchg   ax,ax

c0009978 <raw_new>:
c0009978:	83 ec 2c             	sub    esp,0x2c
c000997b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000997f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	6a 00                	push   0x0
c0009988:	e8 53 df ff ff       	call   c00078e0 <memp_malloc>
c000998d:	83 c4 10             	add    esp,0x10
c0009990:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009994:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009999:	74 3d                	je     c00099d8 <raw_new+0x60>
c000999b:	83 ec 04             	sub    esp,0x4
c000999e:	6a 1c                	push   0x1c
c00099a0:	6a 00                	push   0x0
c00099a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099a6:	e8 45 6b ff ff       	call   c00004f0 <memset>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099b2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00099b6:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00099b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099bd:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c00099c1:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00099c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00099ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099d2:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00099d7:	90                   	nop
c00099d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099dc:	83 c4 2c             	add    esp,0x2c
c00099df:	c3                   	ret    

c00099e0 <stats_init>:
c00099e0:	90                   	nop
c00099e1:	c3                   	ret    
c00099e2:	66 90                	xchg   ax,ax

c00099e4 <sys_msleep>:
c00099e4:	83 ec 1c             	sub    esp,0x1c
c00099e7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00099ec:	74 46                	je     c0009a34 <sys_msleep+0x50>
c00099ee:	83 ec 08             	sub    esp,0x8
c00099f1:	6a 00                	push   0x0
c00099f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099f7:	50                   	push   eax
c00099f8:	e8 7b 72 ff ff       	call   c0000c78 <sys_sem_new>
c00099fd:	83 c4 10             	add    esp,0x10
c0009a00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a04:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	75 27                	jne    c0009a34 <sys_msleep+0x50>
c0009a0d:	83 ec 08             	sub    esp,0x8
c0009a10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a18:	50                   	push   eax
c0009a19:	e8 b2 72 ff ff       	call   c0000cd0 <sys_arch_sem_wait>
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	83 ec 0c             	sub    esp,0xc
c0009a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a28:	50                   	push   eax
c0009a29:	e8 72 72 ff ff       	call   c0000ca0 <sys_sem_free>
c0009a2e:	83 c4 10             	add    esp,0x10
c0009a31:	8d 76 00             	lea    esi,[esi+0x0]
c0009a34:	90                   	nop
c0009a35:	83 c4 1c             	add    esp,0x1c
c0009a38:	c3                   	ret    
c0009a39:	66 90                	xchg   ax,ax
c0009a3b:	90                   	nop

c0009a3c <tcp_accept_null>:
c0009a3c:	83 ec 04             	sub    esp,0x4
c0009a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a43:	88 04 24             	mov    BYTE PTR [esp],al
c0009a46:	b0 f6                	mov    al,0xf6
c0009a48:	83 c4 04             	add    esp,0x4
c0009a4b:	c3                   	ret    

c0009a4c <tcp_listen_with_backlog>:
c0009a4c:	83 ec 2c             	sub    esp,0x2c
c0009a4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a5e:	85 c0                	test   eax,eax
c0009a60:	74 22                	je     c0009a84 <tcp_listen_with_backlog+0x38>
c0009a62:	83 ec 08             	sub    esp,0x8
c0009a65:	68 60 ff 02 c0       	push   0xc002ff60
c0009a6a:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009a6f:	e8 54 60 01 00       	call   c001fac8 <CPrintf>
c0009a74:	83 c4 10             	add    esp,0x10
c0009a77:	b8 00 00 00 00       	mov    eax,0x0
c0009a7c:	e9 77 01 00 00       	jmp    c0009bf8 <tcp_listen_with_backlog+0x1ac>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a8b:	83 f8 01             	cmp    eax,0x1
c0009a8e:	75 0c                	jne    c0009a9c <tcp_listen_with_backlog+0x50>
c0009a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a94:	e9 5f 01 00 00       	jmp    c0009bf8 <tcp_listen_with_backlog+0x1ac>
c0009a99:	8d 76 00             	lea    esi,[esi+0x0]
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	6a 03                	push   0x3
c0009aa1:	e8 3a de ff ff       	call   c00078e0 <memp_malloc>
c0009aa6:	83 c4 10             	add    esp,0x10
c0009aa9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009ab2:	75 0c                	jne    c0009ac0 <tcp_listen_with_backlog+0x74>
c0009ab4:	b8 00 00 00 00       	mov    eax,0x0
c0009ab9:	e9 3a 01 00 00       	jmp    c0009bf8 <tcp_listen_with_backlog+0x1ac>
c0009abe:	66 90                	xchg   ax,ax
c0009ac0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ac4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009acb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009ace:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ad2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ad5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad9:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009add:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ae1:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aec:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009aef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009af3:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009af6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009afa:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b01:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b08:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009b0b:	83 c8 02             	or     eax,0x2
c0009b0e:	88 c2                	mov    dl,al
c0009b10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b14:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b1b:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009b1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b22:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b29:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009b2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b30:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009b33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b37:	8b 10                	mov    edx,DWORD PTR [eax]
c0009b39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b3d:	89 10                	mov    DWORD PTR [eax],edx
c0009b3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b43:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b46:	0f b7 c0             	movzx  eax,ax
c0009b49:	85 c0                	test   eax,eax
c0009b4b:	74 6f                	je     c0009bbc <tcp_listen_with_backlog+0x170>
c0009b4d:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b52:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b56:	75 10                	jne    c0009b68 <tcp_listen_with_backlog+0x11c>
c0009b58:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b60:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009b65:	eb 49                	jmp    c0009bb0 <tcp_listen_with_backlog+0x164>
c0009b67:	90                   	nop
c0009b68:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b6d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b72:	eb 30                	jmp    c0009ba4 <tcp_listen_with_backlog+0x158>
c0009b74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b7c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b80:	75 12                	jne    c0009b94 <tcp_listen_with_backlog+0x148>
c0009b82:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b87:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b8b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b91:	eb 1d                	jmp    c0009bb0 <tcp_listen_with_backlog+0x164>
c0009b93:	90                   	nop
c0009b94:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b9c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0009ba4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009ba9:	85 c0                	test   eax,eax
c0009bab:	75 c7                	jne    c0009b74 <tcp_listen_with_backlog+0x128>
c0009bad:	8d 76 00             	lea    esi,[esi+0x0]
c0009bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bb4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009bbb:	90                   	nop
c0009bbc:	83 ec 08             	sub    esp,0x8
c0009bbf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009bc3:	6a 02                	push   0x2
c0009bc5:	e8 42 de ff ff       	call   c0007a0c <memp_free>
c0009bca:	83 c4 10             	add    esp,0x10
c0009bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd1:	c7 40 1c 3c 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009a3c
c0009bd8:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009be5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be9:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009bee:	e8 21 6f 00 00       	call   c0010b14 <tcp_timer_needed>
c0009bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf7:	90                   	nop
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <tcp_update_rcv_ann_wnd>:
c0009bfc:	83 ec 1c             	sub    esp,0x1c
c0009bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c03:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c0d:	0f b7 c0             	movzx  eax,ax
c0009c10:	01 d0                	add    eax,edx
c0009c12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c24:	0f b7 c8             	movzx  ecx,ax
c0009c27:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009c2d:	76 05                	jbe    c0009c34 <tcp_update_rcv_ann_wnd+0x38>
c0009c2f:	b8 30 04 00 00       	mov    eax,0x430
c0009c34:	0f b7 c0             	movzx  eax,ax
c0009c37:	01 c2                	add    edx,eax
c0009c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c3d:	29 d0                	sub    eax,edx
c0009c3f:	78 23                	js     c0009c64 <tcp_update_rcv_ann_wnd+0x68>
c0009c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c45:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4c:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c54:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c5b:	29 c2                	sub    edx,eax
c0009c5d:	89 d0                	mov    eax,edx
c0009c5f:	eb 77                	jmp    c0009cd8 <tcp_update_rcv_ann_wnd+0xdc>
c0009c61:	8d 76 00             	lea    esi,[esi+0x0]
c0009c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c68:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c72:	29 c2                	sub    edx,eax
c0009c74:	89 d0                	mov    eax,edx
c0009c76:	85 c0                	test   eax,eax
c0009c78:	7e 0e                	jle    c0009c88 <tcp_update_rcv_ann_wnd+0x8c>
c0009c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c7e:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c84:	eb 4a                	jmp    c0009cd0 <tcp_update_rcv_ann_wnd+0xd4>
c0009c86:	66 90                	xchg   ax,ax
c0009c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c8c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c93:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c96:	29 c2                	sub    edx,eax
c0009c98:	89 d0                	mov    eax,edx
c0009c9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c9e:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ca6:	76 18                	jbe    c0009cc0 <tcp_update_rcv_ann_wnd+0xc4>
c0009ca8:	83 ec 08             	sub    esp,0x8
c0009cab:	68 94 01 03 c0       	push   0xc0030194
c0009cb0:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009cb5:	e8 0e 5e 01 00       	call   c001fac8 <CPrintf>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	89 c2                	mov    edx,eax
c0009cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cca:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009cce:	66 90                	xchg   ax,ax
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cd8:	83 c4 1c             	add    esp,0x1c
c0009cdb:	c3                   	ret    

c0009cdc <tcp_recved>:
c0009cdc:	83 ec 2c             	sub    esp,0x2c
c0009cdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ce3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ce8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cf1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cf4:	0f b7 c0             	movzx  eax,ax
c0009cf7:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009cfc:	29 c1                	sub    ecx,eax
c0009cfe:	89 c8                	mov    eax,ecx
c0009d00:	39 c2                	cmp    edx,eax
c0009d02:	7e 18                	jle    c0009d1c <tcp_recved+0x40>
c0009d04:	83 ec 08             	sub    esp,0x8
c0009d07:	68 84 ff 02 c0       	push   0xc002ff84
c0009d0c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009d11:	e8 b2 5d 01 00       	call   c001fac8 <CPrintf>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	8d 76 00             	lea    esi,[esi+0x0]
c0009d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d20:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d27:	01 d0                	add    eax,edx
c0009d29:	89 c2                	mov    edx,eax
c0009d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d2f:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d3a:	0f b7 c0             	movzx  eax,ax
c0009d3d:	3d 60 08 00 00       	cmp    eax,0x860
c0009d42:	76 0c                	jbe    c0009d50 <tcp_recved+0x74>
c0009d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d48:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009d4e:	66 90                	xchg   ax,ax
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d57:	e8 a0 fe ff ff       	call   c0009bfc <tcp_update_rcv_ann_wnd>
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d63:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009d6b:	7e 23                	jle    c0009d90 <tcp_recved+0xb4>
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009d74:	83 c8 02             	or     eax,0x2
c0009d77:	88 c2                	mov    dl,al
c0009d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009d80:	83 ec 0c             	sub    esp,0xc
c0009d83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d87:	e8 e0 60 00 00       	call   c000fe6c <tcp_output>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	90                   	nop
c0009d90:	90                   	nop
c0009d91:	83 c4 2c             	add    esp,0x2c
c0009d94:	c3                   	ret    
c0009d95:	8d 76 00             	lea    esi,[esi+0x0]

c0009d98 <tcp_new_port>:
c0009d98:	83 ec 10             	sub    esp,0x10
c0009d9b:	90                   	nop
c0009d9c:	66 a1 80 3a 03 c0    	mov    ax,ds:0xc0033a80
c0009da2:	8d 50 01             	lea    edx,[eax+0x1]
c0009da5:	66 89 15 80 3a 03 c0 	mov    WORD PTR ds:0xc0033a80,dx
c0009dac:	0f b7 c0             	movzx  eax,ax
c0009daf:	3d ff ff 00 00       	cmp    eax,0xffff
c0009db4:	75 0a                	jne    c0009dc0 <tcp_new_port+0x28>
c0009db6:	66 c7 05 80 3a 03 c0 00 c0 	mov    WORD PTR ds:0xc0033a80,0xc000
c0009dbf:	90                   	nop
c0009dc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009dc8:	eb 4a                	jmp    c0009e14 <tcp_new_port+0x7c>
c0009dca:	66 90                	xchg   ax,ax
c0009dcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009dd0:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c0009dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0009dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ddd:	eb 29                	jmp    c0009e08 <tcp_new_port+0x70>
c0009ddf:	90                   	nop
c0009de0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009de4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009de7:	66 a1 80 3a 03 c0    	mov    ax,ds:0xc0033a80
c0009ded:	0f b7 d2             	movzx  edx,dx
c0009df0:	0f b7 c0             	movzx  eax,ax
c0009df3:	39 c2                	cmp    edx,eax
c0009df5:	75 05                	jne    c0009dfc <tcp_new_port+0x64>
c0009df7:	eb a3                	jmp    c0009d9c <tcp_new_port+0x4>
c0009df9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e07:	90                   	nop
c0009e08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009e0d:	75 d1                	jne    c0009de0 <tcp_new_port+0x48>
c0009e0f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009e14:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009e19:	7e b1                	jle    c0009dcc <tcp_new_port+0x34>
c0009e1b:	66 a1 80 3a 03 c0    	mov    ax,ds:0xc0033a80
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	c3                   	ret    
c0009e25:	8d 76 00             	lea    esi,[esi+0x0]

c0009e28 <tcp_bind>:
c0009e28:	83 ec 2c             	sub    esp,0x2c
c0009e2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e2f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e34:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e40:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e43:	85 c0                	test   eax,eax
c0009e45:	74 1d                	je     c0009e64 <tcp_bind+0x3c>
c0009e47:	83 ec 08             	sub    esp,0x8
c0009e4a:	68 a8 ff 02 c0       	push   0xc002ffa8
c0009e4f:	68 c6 f9 02 c0       	push   0xc002f9c6
c0009e54:	e8 6f 5c 01 00       	call   c001fac8 <CPrintf>
c0009e59:	83 c4 10             	add    esp,0x10
c0009e5c:	b0 fa                	mov    al,0xfa
c0009e5e:	e9 f1 00 00 00       	jmp    c0009f54 <tcp_bind+0x12c>
c0009e63:	90                   	nop
c0009e64:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009e69:	85 c0                	test   eax,eax
c0009e6b:	75 0b                	jne    c0009e78 <tcp_bind+0x50>
c0009e6d:	e8 26 ff ff ff       	call   c0009d98 <tcp_new_port>
c0009e72:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e77:	90                   	nop
c0009e78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e80:	eb 7a                	jmp    c0009efc <tcp_bind+0xd4>
c0009e82:	66 90                	xchg   ax,ax
c0009e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e88:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c0009e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e95:	eb 59                	jmp    c0009ef0 <tcp_bind+0xc8>
c0009e97:	90                   	nop
c0009e98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009e9f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009ea4:	0f b7 c0             	movzx  eax,ax
c0009ea7:	39 c2                	cmp    edx,eax
c0009ea9:	75 39                	jne    c0009ee4 <tcp_bind+0xbc>
c0009eab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eaf:	85 c0                	test   eax,eax
c0009eb1:	74 2d                	je     c0009ee0 <tcp_bind+0xb8>
c0009eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eb9:	85 c0                	test   eax,eax
c0009ebb:	74 23                	je     c0009ee0 <tcp_bind+0xb8>
c0009ebd:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009ec2:	74 1c                	je     c0009ee0 <tcp_bind+0xb8>
c0009ec4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eca:	85 c0                	test   eax,eax
c0009ecc:	74 12                	je     c0009ee0 <tcp_bind+0xb8>
c0009ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed2:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ed4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ed8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eda:	39 c2                	cmp    edx,eax
c0009edc:	75 06                	jne    c0009ee4 <tcp_bind+0xbc>
c0009ede:	66 90                	xchg   ax,ax
c0009ee0:	b0 f8                	mov    al,0xf8
c0009ee2:	eb 70                	jmp    c0009f54 <tcp_bind+0x12c>
c0009ee4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ee8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eef:	90                   	nop
c0009ef0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009ef5:	75 a1                	jne    c0009e98 <tcp_bind+0x70>
c0009ef7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f00:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009f04:	0f 8c 7a ff ff ff    	jl     c0009e84 <tcp_bind+0x5c>
c0009f0a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f0f:	74 17                	je     c0009f28 <tcp_bind+0x100>
c0009f11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f15:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f17:	85 c0                	test   eax,eax
c0009f19:	74 0d                	je     c0009f28 <tcp_bind+0x100>
c0009f1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f23:	8b 12                	mov    edx,DWORD PTR [edx]
c0009f25:	89 10                	mov    DWORD PTR [eax],edx
c0009f27:	90                   	nop
c0009f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f30:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009f34:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009f3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f45:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009f4a:	e8 c5 6b 00 00       	call   c0010b14 <tcp_timer_needed>
c0009f4f:	b0 00                	mov    al,0x0
c0009f51:	8d 76 00             	lea    esi,[esi+0x0]
c0009f54:	83 c4 2c             	add    esp,0x2c
c0009f57:	c3                   	ret    

c0009f58 <tcp_seg_free>:
c0009f58:	83 ec 0c             	sub    esp,0xc
c0009f5b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009f60:	74 32                	je     c0009f94 <tcp_seg_free+0x3c>
c0009f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f69:	85 c0                	test   eax,eax
c0009f6b:	74 13                	je     c0009f80 <tcp_seg_free+0x28>
c0009f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f74:	83 ec 0c             	sub    esp,0xc
c0009f77:	50                   	push   eax
c0009f78:	e8 4f e3 ff ff       	call   c00082cc <pbuf_free>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	83 ec 08             	sub    esp,0x8
c0009f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f87:	6a 04                	push   0x4
c0009f89:	e8 7e da ff ff       	call   c0007a0c <memp_free>
c0009f8e:	83 c4 10             	add    esp,0x10
c0009f91:	8d 76 00             	lea    esi,[esi+0x0]
c0009f94:	90                   	nop
c0009f95:	83 c4 0c             	add    esp,0xc
c0009f98:	c3                   	ret    
c0009f99:	8d 76 00             	lea    esi,[esi+0x0]

c0009f9c <tcp_segs_free>:
c0009f9c:	83 ec 1c             	sub    esp,0x1c
c0009f9f:	eb 27                	jmp    c0009fc8 <tcp_segs_free+0x2c>
c0009fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0009fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fae:	83 ec 0c             	sub    esp,0xc
c0009fb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009fb5:	e8 9e ff ff ff       	call   c0009f58 <tcp_seg_free>
c0009fba:	83 c4 10             	add    esp,0x10
c0009fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0009fc8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009fcd:	75 d5                	jne    c0009fa4 <tcp_segs_free+0x8>
c0009fcf:	90                   	nop
c0009fd0:	83 c4 1c             	add    esp,0x1c
c0009fd3:	c3                   	ret    

c0009fd4 <tcp_setprio>:
c0009fd4:	83 ec 04             	sub    esp,0x4
c0009fd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fdb:	88 04 24             	mov    BYTE PTR [esp],al
c0009fde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fe2:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009fe5:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009fe8:	90                   	nop
c0009fe9:	83 c4 04             	add    esp,0x4
c0009fec:	c3                   	ret    
c0009fed:	8d 76 00             	lea    esi,[esi+0x0]

c0009ff0 <tcp_seg_copy>:
c0009ff0:	83 ec 1c             	sub    esp,0x1c
c0009ff3:	83 ec 0c             	sub    esp,0xc
c0009ff6:	6a 04                	push   0x4
c0009ff8:	e8 e3 d8 ff ff       	call   c00078e0 <memp_malloc>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a004:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a009:	75 09                	jne    c000a014 <tcp_seg_copy+0x24>
c000a00b:	b8 00 00 00 00       	mov    eax,0x0
c000a010:	eb 2e                	jmp    c000a040 <tcp_seg_copy+0x50>
c000a012:	66 90                	xchg   ax,ax
c000a014:	83 ec 04             	sub    esp,0x4
c000a017:	6a 10                	push   0x10
c000a019:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a01d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a021:	e8 54 63 ff ff       	call   c000037a <memcpy>
c000a026:	83 c4 10             	add    esp,0x10
c000a029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a02d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	50                   	push   eax
c000a034:	e8 a3 ea ff ff       	call   c0008adc <pbuf_ref>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a040:	83 c4 1c             	add    esp,0x1c
c000a043:	c3                   	ret    

c000a044 <tcp_arg>:
c000a044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a04c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a04f:	90                   	nop
c000a050:	c3                   	ret    
c000a051:	8d 76 00             	lea    esi,[esi+0x0]

c000a054 <tcp_recv>:
c000a054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a05c:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a062:	90                   	nop
c000a063:	c3                   	ret    

c000a064 <tcp_sent>:
c000a064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a06c:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a072:	90                   	nop
c000a073:	c3                   	ret    

c000a074 <tcp_err>:
c000a074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a078:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a07c:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a082:	90                   	nop
c000a083:	c3                   	ret    

c000a084 <tcp_accept>:
c000a084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a08c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a08f:	90                   	nop
c000a090:	c3                   	ret    
c000a091:	8d 76 00             	lea    esi,[esi+0x0]

c000a094 <tcp_poll>:
c000a094:	83 ec 04             	sub    esp,0x4
c000a097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a09b:	88 04 24             	mov    BYTE PTR [esp],al
c000a09e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a0a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a0a6:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a0b0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a0b3:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a0b6:	90                   	nop
c000a0b7:	83 c4 04             	add    esp,0x4
c000a0ba:	c3                   	ret    
c000a0bb:	90                   	nop

c000a0bc <tcp_pcb_purge>:
c000a0bc:	83 ec 0c             	sub    esp,0xc
c000a0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0c6:	85 c0                	test   eax,eax
c000a0c8:	0f 84 ca 00 00 00    	je     c000a198 <tcp_pcb_purge+0xdc>
c000a0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0d5:	83 f8 0a             	cmp    eax,0xa
c000a0d8:	0f 84 ba 00 00 00    	je     c000a198 <tcp_pcb_purge+0xdc>
c000a0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0e5:	83 f8 01             	cmp    eax,0x1
c000a0e8:	0f 84 aa 00 00 00    	je     c000a198 <tcp_pcb_purge+0xdc>
c000a0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0f2:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0f8:	85 c0                	test   eax,eax
c000a0fa:	74 24                	je     c000a120 <tcp_pcb_purge+0x64>
c000a0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a100:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a106:	83 ec 0c             	sub    esp,0xc
c000a109:	50                   	push   eax
c000a10a:	e8 bd e1 ff ff       	call   c00082cc <pbuf_free>
c000a10f:	83 c4 10             	add    esp,0x10
c000a112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a116:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a124:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a12a:	83 ec 0c             	sub    esp,0xc
c000a12d:	50                   	push   eax
c000a12e:	e8 69 fe ff ff       	call   c0009f9c <tcp_segs_free>
c000a133:	83 c4 10             	add    esp,0x10
c000a136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a13a:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a148:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a155:	83 ec 0c             	sub    esp,0xc
c000a158:	50                   	push   eax
c000a159:	e8 3e fe ff ff       	call   c0009f9c <tcp_segs_free>
c000a15e:	83 c4 10             	add    esp,0x10
c000a161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a165:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a168:	83 ec 0c             	sub    esp,0xc
c000a16b:	50                   	push   eax
c000a16c:	e8 2b fe ff ff       	call   c0009f9c <tcp_segs_free>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a178:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a183:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a18a:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a191:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a197:	90                   	nop
c000a198:	90                   	nop
c000a199:	83 c4 0c             	add    esp,0xc
c000a19c:	c3                   	ret    
c000a19d:	8d 76 00             	lea    esi,[esi+0x0]

c000a1a0 <tcp_slowtmr>:
c000a1a0:	57                   	push   edi
c000a1a1:	56                   	push   esi
c000a1a2:	53                   	push   ebx
c000a1a3:	83 ec 20             	sub    esp,0x20
c000a1a6:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a1ab:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a1b0:	83 c0 01             	add    eax,0x1
c000a1b3:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a1b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a1c0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a1c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a1c9:	e9 0e 06 00 00       	jmp    c000a7dc <tcp_slowtmr+0x63c>
c000a1ce:	66 90                	xchg   ax,ax
c000a1d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	75 15                	jne    c000a1f0 <tcp_slowtmr+0x50>
c000a1db:	83 ec 08             	sub    esp,0x8
c000a1de:	68 d0 ff 02 c0       	push   0xc002ffd0
c000a1e3:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a1e8:	e8 db 58 01 00       	call   c001fac8 <CPrintf>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1f7:	83 f8 01             	cmp    eax,0x1
c000a1fa:	75 18                	jne    c000a214 <tcp_slowtmr+0x74>
c000a1fc:	83 ec 08             	sub    esp,0x8
c000a1ff:	68 fc ff 02 c0       	push   0xc002fffc
c000a204:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a209:	e8 ba 58 01 00       	call   c001fac8 <CPrintf>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	8d 76 00             	lea    esi,[esi+0x0]
c000a214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a218:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a21b:	83 f8 0a             	cmp    eax,0xa
c000a21e:	75 18                	jne    c000a238 <tcp_slowtmr+0x98>
c000a220:	83 ec 08             	sub    esp,0x8
c000a223:	68 28 00 03 c0       	push   0xc0030028
c000a228:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a22d:	e8 96 58 01 00       	call   c001fac8 <CPrintf>
c000a232:	83 c4 10             	add    esp,0x10
c000a235:	8d 76 00             	lea    esi,[esi+0x0]
c000a238:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a23d:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a242:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a246:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a249:	83 f8 02             	cmp    eax,0x2
c000a24c:	75 22                	jne    c000a270 <tcp_slowtmr+0xd0>
c000a24e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a252:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a255:	0f b6 c0             	movzx  eax,al
c000a258:	83 f8 06             	cmp    eax,0x6
c000a25b:	75 13                	jne    c000a270 <tcp_slowtmr+0xd0>
c000a25d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a261:	83 c0 01             	add    eax,0x1
c000a264:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a268:	e9 eb 01 00 00       	jmp    c000a458 <tcp_slowtmr+0x2b8>
c000a26d:	8d 76 00             	lea    esi,[esi+0x0]
c000a270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a274:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a277:	0f b6 c0             	movzx  eax,al
c000a27a:	83 f8 0c             	cmp    eax,0xc
c000a27d:	75 11                	jne    c000a290 <tcp_slowtmr+0xf0>
c000a27f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a283:	83 c0 01             	add    eax,0x1
c000a286:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a28a:	e9 c9 01 00 00       	jmp    c000a458 <tcp_slowtmr+0x2b8>
c000a28f:	90                   	nop
c000a290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a294:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a29a:	0f b6 c0             	movzx  eax,al
c000a29d:	85 c0                	test   eax,eax
c000a29f:	0f 84 8f 00 00 00    	je     c000a334 <tcp_slowtmr+0x194>
c000a2a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2a9:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a2af:	8d 50 01             	lea    edx,[eax+0x1]
c000a2b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b6:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a2bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c0:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a2c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ca:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2d0:	0f b6 c0             	movzx  eax,al
c000a2d3:	83 e8 01             	sub    eax,0x1
c000a2d6:	8a 80 b0 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfd50]
c000a2dc:	0f b6 c0             	movzx  eax,al
c000a2df:	39 c2                	cmp    edx,eax
c000a2e1:	0f 82 71 01 00 00    	jb     c000a458 <tcp_slowtmr+0x2b8>
c000a2e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2eb:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a2f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f9:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2ff:	0f b6 c0             	movzx  eax,al
c000a302:	83 f8 06             	cmp    eax,0x6
c000a305:	77 19                	ja     c000a320 <tcp_slowtmr+0x180>
c000a307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30b:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a311:	83 c0 01             	add    eax,0x1
c000a314:	88 c2                	mov    dl,al
c000a316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a31a:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a320:	83 ec 0c             	sub    esp,0xc
c000a323:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a327:	e8 58 64 00 00       	call   c0010784 <tcp_zero_window_probe>
c000a32c:	83 c4 10             	add    esp,0x10
c000a32f:	e9 24 01 00 00       	jmp    c000a458 <tcp_slowtmr+0x2b8>
c000a334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a338:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a33c:	98                   	cwde   
c000a33d:	85 c0                	test   eax,eax
c000a33f:	78 17                	js     c000a358 <tcp_slowtmr+0x1b8>
c000a341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a345:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a349:	83 c0 01             	add    eax,0x1
c000a34c:	89 c2                	mov    edx,eax
c000a34e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a352:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a356:	66 90                	xchg   ax,ax
c000a358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a35f:	85 c0                	test   eax,eax
c000a361:	0f 84 f1 00 00 00    	je     c000a458 <tcp_slowtmr+0x2b8>
c000a367:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a36b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a36f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a373:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a376:	0f bf d2             	movsx  edx,dx
c000a379:	98                   	cwde   
c000a37a:	39 c2                	cmp    edx,eax
c000a37c:	0f 8c d6 00 00 00    	jl     c000a458 <tcp_slowtmr+0x2b8>
c000a382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a386:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a389:	83 f8 02             	cmp    eax,0x2
c000a38c:	74 3e                	je     c000a3cc <tcp_slowtmr+0x22c>
c000a38e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a392:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a395:	98                   	cwde   
c000a396:	c1 f8 03             	sar    eax,0x3
c000a399:	0f bf d0             	movsx  edx,ax
c000a39c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a3a4:	98                   	cwde   
c000a3a5:	01 c2                	add    edx,eax
c000a3a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3ab:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a3ae:	0f b6 c0             	movzx  eax,al
c000a3b1:	8a 80 b8 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfd48]
c000a3b7:	0f b6 c0             	movzx  eax,al
c000a3ba:	88 c1                	mov    cl,al
c000a3bc:	d3 e2                	shl    edx,cl
c000a3be:	89 d0                	mov    eax,edx
c000a3c0:	89 c2                	mov    edx,eax
c000a3c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c6:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a3ca:	66 90                	xchg   ax,ax
c000a3cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d0:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a3d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3da:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a3dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e1:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a3e5:	89 c8                	mov    eax,ecx
c000a3e7:	0f b7 d8             	movzx  ebx,ax
c000a3ea:	0f b7 ca             	movzx  ecx,dx
c000a3ed:	39 cb                	cmp    ebx,ecx
c000a3ef:	76 03                	jbe    c000a3f4 <tcp_slowtmr+0x254>
c000a3f1:	89 d0                	mov    eax,edx
c000a3f3:	90                   	nop
c000a3f4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a3f9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a3fe:	d1 e8                	shr    eax,1
c000a400:	89 c2                	mov    edx,eax
c000a402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a406:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40e:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a411:	0f b7 d0             	movzx  edx,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a41b:	0f b7 c0             	movzx  eax,ax
c000a41e:	d1 e0                	shl    eax,1
c000a420:	39 c2                	cmp    edx,eax
c000a422:	7d 14                	jge    c000a438 <tcp_slowtmr+0x298>
c000a424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a42b:	d1 e0                	shl    eax,1
c000a42d:	89 c2                	mov    edx,eax
c000a42f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a433:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a437:	90                   	nop
c000a438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a43c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a43f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a443:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a447:	83 ec 0c             	sub    esp,0xc
c000a44a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a44e:	e8 21 60 00 00       	call   c0010474 <tcp_rexmit_rto>
c000a453:	83 c4 10             	add    esp,0x10
c000a456:	66 90                	xchg   ax,ax
c000a458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45f:	83 f8 06             	cmp    eax,0x6
c000a462:	75 24                	jne    c000a488 <tcp_slowtmr+0x2e8>
c000a464:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a46e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a471:	29 c2                	sub    edx,eax
c000a473:	89 d0                	mov    eax,edx
c000a475:	83 f8 28             	cmp    eax,0x28
c000a478:	76 0e                	jbe    c000a488 <tcp_slowtmr+0x2e8>
c000a47a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a47e:	83 c0 01             	add    eax,0x1
c000a481:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a485:	8d 76 00             	lea    esi,[esi+0x0]
c000a488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48c:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a48f:	0f b6 c0             	movzx  eax,al
c000a492:	83 e0 08             	and    eax,0x8
c000a495:	0f 84 cd 00 00 00    	je     c000a568 <tcp_slowtmr+0x3c8>
c000a49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4a2:	83 f8 04             	cmp    eax,0x4
c000a4a5:	74 11                	je     c000a4b8 <tcp_slowtmr+0x318>
c000a4a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4ae:	83 f8 07             	cmp    eax,0x7
c000a4b1:	0f 85 b1 00 00 00    	jne    c000a568 <tcp_slowtmr+0x3c8>
c000a4b7:	90                   	nop
c000a4b8:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4c5:	89 d1                	mov    ecx,edx
c000a4c7:	29 c1                	sub    ecx,eax
c000a4c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4cd:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a4d3:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a4d8:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a4dd:	f7 e2                	mul    edx
c000a4df:	89 d0                	mov    eax,edx
c000a4e1:	c1 e8 05             	shr    eax,0x5
c000a4e4:	39 c1                	cmp    ecx,eax
c000a4e6:	76 18                	jbe    c000a500 <tcp_slowtmr+0x360>
c000a4e8:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4ec:	83 c0 01             	add    eax,0x1
c000a4ef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4f3:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a4f7:	83 c0 01             	add    eax,0x1
c000a4fa:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a4fe:	eb 68                	jmp    c000a568 <tcp_slowtmr+0x3c8>
c000a500:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a50d:	89 d1                	mov    ecx,edx
c000a50f:	29 c1                	sub    ecx,eax
c000a511:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a515:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a525:	0f b6 c0             	movzx  eax,al
c000a528:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a52e:	01 d0                	add    eax,edx
c000a530:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a535:	f7 e2                	mul    edx
c000a537:	89 d0                	mov    eax,edx
c000a539:	c1 e8 05             	shr    eax,0x5
c000a53c:	39 c1                	cmp    ecx,eax
c000a53e:	76 28                	jbe    c000a568 <tcp_slowtmr+0x3c8>
c000a540:	83 ec 0c             	sub    esp,0xc
c000a543:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a547:	e8 6c 61 00 00       	call   c00106b8 <tcp_keepalive>
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a553:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a559:	83 c0 01             	add    eax,0x1
c000a55c:	88 c2                	mov    dl,al
c000a55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a562:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a572:	85 c0                	test   eax,eax
c000a574:	74 4e                	je     c000a5c4 <tcp_slowtmr+0x424>
c000a576:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a580:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a583:	89 d1                	mov    ecx,edx
c000a585:	29 c1                	sub    ecx,eax
c000a587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a58e:	0f bf d0             	movsx  edx,ax
c000a591:	89 d0                	mov    eax,edx
c000a593:	d1 e0                	shl    eax,1
c000a595:	01 d0                	add    eax,edx
c000a597:	d1 e0                	shl    eax,1
c000a599:	39 c1                	cmp    ecx,eax
c000a59b:	72 27                	jb     c000a5c4 <tcp_slowtmr+0x424>
c000a59d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a1:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a5a7:	83 ec 0c             	sub    esp,0xc
c000a5aa:	50                   	push   eax
c000a5ab:	e8 ec f9 ff ff       	call   c0009f9c <tcp_segs_free>
c000a5b0:	83 c4 10             	add    esp,0x10
c000a5b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b7:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000a5c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5cb:	83 f8 03             	cmp    eax,0x3
c000a5ce:	75 24                	jne    c000a5f4 <tcp_slowtmr+0x454>
c000a5d0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5da:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5dd:	29 c2                	sub    edx,eax
c000a5df:	89 d0                	mov    eax,edx
c000a5e1:	83 f8 28             	cmp    eax,0x28
c000a5e4:	76 0e                	jbe    c000a5f4 <tcp_slowtmr+0x454>
c000a5e6:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5ea:	83 c0 01             	add    eax,0x1
c000a5ed:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000a5f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5fb:	83 f8 09             	cmp    eax,0x9
c000a5fe:	75 24                	jne    c000a624 <tcp_slowtmr+0x484>
c000a600:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a60d:	29 c2                	sub    edx,eax
c000a60f:	89 d0                	mov    eax,edx
c000a611:	3d f0 00 00 00       	cmp    eax,0xf0
c000a616:	76 0c                	jbe    c000a624 <tcp_slowtmr+0x484>
c000a618:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a61c:	83 c0 01             	add    eax,0x1
c000a61f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a623:	90                   	nop
c000a624:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a629:	85 c0                	test   eax,eax
c000a62b:	0f 84 13 01 00 00    	je     c000a744 <tcp_slowtmr+0x5a4>
c000a631:	83 ec 0c             	sub    esp,0xc
c000a634:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a638:	e8 7f fa ff ff       	call   c000a0bc <tcp_pcb_purge>
c000a63d:	83 c4 10             	add    esp,0x10
c000a640:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a645:	74 31                	je     c000a678 <tcp_slowtmr+0x4d8>
c000a647:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a64c:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a650:	75 16                	jne    c000a668 <tcp_slowtmr+0x4c8>
c000a652:	83 ec 08             	sub    esp,0x8
c000a655:	68 58 00 03 c0       	push   0xc0030058
c000a65a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a65f:	e8 64 54 01 00       	call   c001fac8 <CPrintf>
c000a664:	83 c4 10             	add    esp,0x10
c000a667:	90                   	nop
c000a668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a66c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a66f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a673:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a676:	eb 2c                	jmp    c000a6a4 <tcp_slowtmr+0x504>
c000a678:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a67d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a681:	74 15                	je     c000a698 <tcp_slowtmr+0x4f8>
c000a683:	83 ec 08             	sub    esp,0x8
c000a686:	68 84 00 03 c0       	push   0xc0030084
c000a68b:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a690:	e8 33 54 01 00       	call   c001fac8 <CPrintf>
c000a695:	83 c4 10             	add    esp,0x10
c000a698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a69c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a69f:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a6a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a8:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a6ae:	85 c0                	test   eax,eax
c000a6b0:	74 1e                	je     c000a6d0 <tcp_slowtmr+0x530>
c000a6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b6:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a6bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a6c0:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a6c3:	83 ec 08             	sub    esp,0x8
c000a6c6:	6a f6                	push   0xfffffff6
c000a6c8:	52                   	push   edx
c000a6c9:	ff d0                	call   eax
c000a6cb:	83 c4 10             	add    esp,0x10
c000a6ce:	66 90                	xchg   ax,ax
c000a6d0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a6d5:	85 c0                	test   eax,eax
c000a6d7:	74 3f                	je     c000a718 <tcp_slowtmr+0x578>
c000a6d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6dd:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a6e1:	0f b7 f0             	movzx  esi,ax
c000a6e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a6eb:	0f b7 d8             	movzx  ebx,ax
c000a6ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f2:	8d 78 04             	lea    edi,[eax+0x4]
c000a6f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6fd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a700:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a704:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a707:	83 ec 08             	sub    esp,0x8
c000a70a:	56                   	push   esi
c000a70b:	53                   	push   ebx
c000a70c:	57                   	push   edi
c000a70d:	51                   	push   ecx
c000a70e:	52                   	push   edx
c000a70f:	50                   	push   eax
c000a710:	e8 e3 5b 00 00       	call   c00102f8 <tcp_rst>
c000a715:	83 c4 20             	add    esp,0x20
c000a718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a724:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a727:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a72b:	83 ec 08             	sub    esp,0x8
c000a72e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a732:	6a 02                	push   0x2
c000a734:	e8 d3 d2 ff ff       	call   c0007a0c <memp_free>
c000a739:	83 c4 10             	add    esp,0x10
c000a73c:	e9 9b 00 00 00       	jmp    c000a7dc <tcp_slowtmr+0x63c>
c000a741:	8d 76 00             	lea    esi,[esi+0x0]
c000a744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a748:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a750:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a757:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a75b:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a75e:	83 c0 01             	add    eax,0x1
c000a761:	88 c2                	mov    dl,al
c000a763:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a767:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a76a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a76e:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a771:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a775:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a778:	0f b6 d2             	movzx  edx,dl
c000a77b:	0f b6 c0             	movzx  eax,al
c000a77e:	39 c2                	cmp    edx,eax
c000a780:	72 5a                	jb     c000a7dc <tcp_slowtmr+0x63c>
c000a782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a786:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a78a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a78e:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a794:	85 c0                	test   eax,eax
c000a796:	74 24                	je     c000a7bc <tcp_slowtmr+0x61c>
c000a798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a79c:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a7a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a7a6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a7a9:	83 ec 08             	sub    esp,0x8
c000a7ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a7b0:	52                   	push   edx
c000a7b1:	ff d0                	call   eax
c000a7b3:	83 c4 10             	add    esp,0x10
c000a7b6:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a7ba:	eb 08                	jmp    c000a7c4 <tcp_slowtmr+0x624>
c000a7bc:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7c4:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a7c9:	85 c0                	test   eax,eax
c000a7cb:	75 0f                	jne    c000a7dc <tcp_slowtmr+0x63c>
c000a7cd:	83 ec 0c             	sub    esp,0xc
c000a7d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7d4:	e8 93 56 00 00       	call   c000fe6c <tcp_output>
c000a7d9:	83 c4 10             	add    esp,0x10
c000a7dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a7e1:	0f 85 e9 f9 ff ff    	jne    c000a1d0 <tcp_slowtmr+0x30>
c000a7e7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a7ef:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7f8:	e9 0b 01 00 00       	jmp    c000a908 <tcp_slowtmr+0x768>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a807:	83 f8 0a             	cmp    eax,0xa
c000a80a:	74 18                	je     c000a824 <tcp_slowtmr+0x684>
c000a80c:	83 ec 08             	sub    esp,0x8
c000a80f:	68 b0 00 03 c0       	push   0xc00300b0
c000a814:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a819:	e8 aa 52 01 00       	call   c001fac8 <CPrintf>
c000a81e:	83 c4 10             	add    esp,0x10
c000a821:	8d 76 00             	lea    esi,[esi+0x0]
c000a824:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a829:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a82f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a833:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a836:	29 c2                	sub    edx,eax
c000a838:	89 d0                	mov    eax,edx
c000a83a:	3d f0 00 00 00       	cmp    eax,0xf0
c000a83f:	76 0b                	jbe    c000a84c <tcp_slowtmr+0x6ac>
c000a841:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a845:	83 c0 01             	add    eax,0x1
c000a848:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a84c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a851:	85 c0                	test   eax,eax
c000a853:	0f 84 9b 00 00 00    	je     c000a8f4 <tcp_slowtmr+0x754>
c000a859:	83 ec 0c             	sub    esp,0xc
c000a85c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a860:	e8 57 f8 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000a865:	83 c4 10             	add    esp,0x10
c000a868:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a86d:	74 31                	je     c000a8a0 <tcp_slowtmr+0x700>
c000a86f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a874:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a878:	75 16                	jne    c000a890 <tcp_slowtmr+0x6f0>
c000a87a:	83 ec 08             	sub    esp,0x8
c000a87d:	68 e0 00 03 c0       	push   0xc00300e0
c000a882:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a887:	e8 3c 52 01 00       	call   c001fac8 <CPrintf>
c000a88c:	83 c4 10             	add    esp,0x10
c000a88f:	90                   	nop
c000a890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a894:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a897:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a89b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a89e:	eb 2c                	jmp    c000a8cc <tcp_slowtmr+0x72c>
c000a8a0:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8a5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8a9:	74 15                	je     c000a8c0 <tcp_slowtmr+0x720>
c000a8ab:	83 ec 08             	sub    esp,0x8
c000a8ae:	68 08 01 03 c0       	push   0xc0030108
c000a8b3:	68 c6 f9 02 c0       	push   0xc002f9c6
c000a8b8:	e8 0b 52 01 00       	call   c001fac8 <CPrintf>
c000a8bd:	83 c4 10             	add    esp,0x10
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8c7:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a8cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8e6:	6a 02                	push   0x2
c000a8e8:	e8 1f d1 ff ff       	call   c0007a0c <memp_free>
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	eb 16                	jmp    c000a908 <tcp_slowtmr+0x768>
c000a8f2:	66 90                	xchg   ax,ax
c000a8f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a8fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a907:	90                   	nop
c000a908:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a90d:	0f 85 ed fe ff ff    	jne    c000a800 <tcp_slowtmr+0x660>
c000a913:	90                   	nop
c000a914:	83 c4 20             	add    esp,0x20
c000a917:	5b                   	pop    ebx
c000a918:	5e                   	pop    esi
c000a919:	5f                   	pop    edi
c000a91a:	c3                   	ret    
c000a91b:	90                   	nop

c000a91c <tcp_pcb_remove>:
c000a91c:	83 ec 0c             	sub    esp,0xc
c000a91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a923:	8b 00                	mov    eax,DWORD PTR [eax]
c000a925:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a929:	75 11                	jne    c000a93c <tcp_pcb_remove+0x20>
c000a92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a92f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a931:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a938:	89 10                	mov    DWORD PTR [eax],edx
c000a93a:	eb 4c                	jmp    c000a988 <tcp_pcb_remove+0x6c>
c000a93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a940:	8b 00                	mov    eax,DWORD PTR [eax]
c000a942:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a947:	eb 33                	jmp    c000a97c <tcp_pcb_remove+0x60>
c000a949:	8d 76 00             	lea    esi,[esi+0x0]
c000a94c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a951:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a954:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a958:	75 12                	jne    c000a96c <tcp_pcb_remove+0x50>
c000a95a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a95f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a963:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a966:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a969:	eb 1d                	jmp    c000a988 <tcp_pcb_remove+0x6c>
c000a96b:	90                   	nop
c000a96c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a971:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a974:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a979:	8d 76 00             	lea    esi,[esi+0x0]
c000a97c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a981:	85 c0                	test   eax,eax
c000a983:	75 c7                	jne    c000a94c <tcp_pcb_remove+0x30>
c000a985:	8d 76 00             	lea    esi,[esi+0x0]
c000a988:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a98c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a993:	83 ec 0c             	sub    esp,0xc
c000a996:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a99a:	e8 1d f7 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9a9:	83 f8 0a             	cmp    eax,0xa
c000a9ac:	74 3e                	je     c000a9ec <tcp_pcb_remove+0xd0>
c000a9ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9b2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9b5:	83 f8 01             	cmp    eax,0x1
c000a9b8:	74 32                	je     c000a9ec <tcp_pcb_remove+0xd0>
c000a9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9be:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a9c1:	0f b6 c0             	movzx  eax,al
c000a9c4:	83 e0 01             	and    eax,0x1
c000a9c7:	74 23                	je     c000a9ec <tcp_pcb_remove+0xd0>
c000a9c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9cd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a9d0:	83 c8 02             	or     eax,0x2
c000a9d3:	88 c2                	mov    dl,al
c000a9d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9d9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a9dc:	83 ec 0c             	sub    esp,0xc
c000a9df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9e3:	e8 84 54 00 00       	call   c000fe6c <tcp_output>
c000a9e8:	83 c4 10             	add    esp,0x10
c000a9eb:	90                   	nop
c000a9ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9f3:	83 f8 01             	cmp    eax,0x1
c000a9f6:	74 64                	je     c000aa5c <tcp_pcb_remove+0x140>
c000a9f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9fc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a9ff:	85 c0                	test   eax,eax
c000aa01:	74 15                	je     c000aa18 <tcp_pcb_remove+0xfc>
c000aa03:	83 ec 08             	sub    esp,0x8
c000aa06:	68 ae 01 03 c0       	push   0xc00301ae
c000aa0b:	68 c6 f9 02 c0       	push   0xc002f9c6
c000aa10:	e8 b3 50 01 00       	call   c001fac8 <CPrintf>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aa1f:	85 c0                	test   eax,eax
c000aa21:	74 15                	je     c000aa38 <tcp_pcb_remove+0x11c>
c000aa23:	83 ec 08             	sub    esp,0x8
c000aa26:	68 c6 01 03 c0       	push   0xc00301c6
c000aa2b:	68 c6 f9 02 c0       	push   0xc002f9c6
c000aa30:	e8 93 50 01 00       	call   c001fac8 <CPrintf>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa3c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aa42:	85 c0                	test   eax,eax
c000aa44:	74 16                	je     c000aa5c <tcp_pcb_remove+0x140>
c000aa46:	83 ec 08             	sub    esp,0x8
c000aa49:	68 df 01 03 c0       	push   0xc00301df
c000aa4e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000aa53:	e8 70 50 01 00       	call   c001fac8 <CPrintf>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	90                   	nop
c000aa5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa60:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa67:	90                   	nop
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	c3                   	ret    

c000aa6c <tcp_close_shutdown>:
c000aa6c:	57                   	push   edi
c000aa6d:	56                   	push   esi
c000aa6e:	53                   	push   ebx
c000aa6f:	83 ec 20             	sub    esp,0x20
c000aa72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aa7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000aa7f:	85 c0                	test   eax,eax
c000aa81:	0f 84 41 01 00 00    	je     c000abc8 <tcp_close_shutdown+0x15c>
c000aa87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa8e:	83 f8 01             	cmp    eax,0x1
c000aa91:	0f 84 31 01 00 00    	je     c000abc8 <tcp_close_shutdown+0x15c>
c000aa97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa9b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aaa1:	85 c0                	test   eax,eax
c000aaa3:	75 17                	jne    c000aabc <tcp_close_shutdown+0x50>
c000aaa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaa9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aaac:	0f b7 c0             	movzx  eax,ax
c000aaaf:	3d 60 08 00 00       	cmp    eax,0x860
c000aab4:	0f 84 0e 01 00 00    	je     c000abc8 <tcp_close_shutdown+0x15c>
c000aaba:	66 90                	xchg   ax,ax
c000aabc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aac0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aac3:	0f b6 c0             	movzx  eax,al
c000aac6:	83 e0 10             	and    eax,0x10
c000aac9:	75 15                	jne    c000aae0 <tcp_close_shutdown+0x74>
c000aacb:	83 ec 08             	sub    esp,0x8
c000aace:	68 f6 01 03 c0       	push   0xc00301f6
c000aad3:	68 c6 f9 02 c0       	push   0xc002f9c6
c000aad8:	e8 eb 4f 01 00       	call   c001fac8 <CPrintf>
c000aadd:	83 c4 10             	add    esp,0x10
c000aae0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aae4:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aae8:	0f b7 f0             	movzx  esi,ax
c000aaeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aaf2:	0f b7 d8             	movzx  ebx,ax
c000aaf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaf9:	8d 78 04             	lea    edi,[eax+0x4]
c000aafc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ab00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab04:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab0b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ab0e:	83 ec 08             	sub    esp,0x8
c000ab11:	56                   	push   esi
c000ab12:	53                   	push   ebx
c000ab13:	57                   	push   edi
c000ab14:	51                   	push   ecx
c000ab15:	52                   	push   edx
c000ab16:	50                   	push   eax
c000ab17:	e8 dc 57 00 00       	call   c00102f8 <tcp_rst>
c000ab1c:	83 c4 20             	add    esp,0x20
c000ab1f:	83 ec 0c             	sub    esp,0xc
c000ab22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ab26:	e8 91 f5 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000ab2b:	83 c4 10             	add    esp,0x10
c000ab2e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab33:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab37:	75 0f                	jne    c000ab48 <tcp_close_shutdown+0xdc>
c000ab39:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab41:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ab46:	eb 48                	jmp    c000ab90 <tcp_close_shutdown+0x124>
c000ab48:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab4d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab52:	eb 30                	jmp    c000ab84 <tcp_close_shutdown+0x118>
c000ab54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab5c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab60:	75 12                	jne    c000ab74 <tcp_close_shutdown+0x108>
c000ab62:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab6b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab71:	eb 1d                	jmp    c000ab90 <tcp_close_shutdown+0x124>
c000ab73:	90                   	nop
c000ab74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab7c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab81:	8d 76 00             	lea    esi,[esi+0x0]
c000ab84:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab89:	85 c0                	test   eax,eax
c000ab8b:	75 c7                	jne    c000ab54 <tcp_close_shutdown+0xe8>
c000ab8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab94:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ab9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab9f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000aba6:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000abac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb7:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000abbc:	e8 53 5f 00 00       	call   c0010b14 <tcp_timer_needed>
c000abc1:	b0 00                	mov    al,0x0
c000abc3:	e9 f4 01 00 00       	jmp    c000adbc <tcp_close_shutdown+0x350>
c000abc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abcf:	83 f8 07             	cmp    eax,0x7
c000abd2:	0f 87 a4 01 00 00    	ja     c000ad7c <tcp_close_shutdown+0x310>
c000abd8:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c000abdf:	ff e0                	jmp    eax
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000abe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abf0:	0f b7 c0             	movzx  eax,ax
c000abf3:	85 c0                	test   eax,eax
c000abf5:	74 71                	je     c000ac68 <tcp_close_shutdown+0x1fc>
c000abf7:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abfc:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac00:	75 12                	jne    c000ac14 <tcp_close_shutdown+0x1a8>
c000ac02:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac0a:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ac0f:	eb 4b                	jmp    c000ac5c <tcp_close_shutdown+0x1f0>
c000ac11:	8d 76 00             	lea    esi,[esi+0x0]
c000ac14:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac19:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac1e:	eb 30                	jmp    c000ac50 <tcp_close_shutdown+0x1e4>
c000ac20:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac28:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac2c:	75 12                	jne    c000ac40 <tcp_close_shutdown+0x1d4>
c000ac2e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ac37:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac3d:	eb 1d                	jmp    c000ac5c <tcp_close_shutdown+0x1f0>
c000ac3f:	90                   	nop
c000ac40:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac45:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac48:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac50:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac55:	85 c0                	test   eax,eax
c000ac57:	75 c7                	jne    c000ac20 <tcp_close_shutdown+0x1b4>
c000ac59:	8d 76 00             	lea    esi,[esi+0x0]
c000ac5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac60:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac67:	90                   	nop
c000ac68:	83 ec 08             	sub    esp,0x8
c000ac6b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac6f:	6a 02                	push   0x2
c000ac71:	e8 96 cd ff ff       	call   c0007a0c <memp_free>
c000ac76:	83 c4 10             	add    esp,0x10
c000ac79:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac81:	e9 12 01 00 00       	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000ac86:	66 90                	xchg   ax,ax
c000ac88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac8d:	83 ec 08             	sub    esp,0x8
c000ac90:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac94:	68 78 68 03 c0       	push   0xc0036878
c000ac99:	e8 7e fc ff ff       	call   c000a91c <tcp_pcb_remove>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	83 ec 08             	sub    esp,0x8
c000aca4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aca8:	6a 03                	push   0x3
c000acaa:	e8 5d cd ff ff       	call   c0007a0c <memp_free>
c000acaf:	83 c4 10             	add    esp,0x10
c000acb2:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acba:	e9 d9 00 00 00       	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000acbf:	90                   	nop
c000acc0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000acc5:	83 ec 08             	sub    esp,0x8
c000acc8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000accc:	68 70 68 03 c0       	push   0xc0036870
c000acd1:	e8 46 fc ff ff       	call   c000a91c <tcp_pcb_remove>
c000acd6:	83 c4 10             	add    esp,0x10
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ace0:	6a 02                	push   0x2
c000ace2:	e8 25 cd ff ff       	call   c0007a0c <memp_free>
c000ace7:	83 c4 10             	add    esp,0x10
c000acea:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acf2:	e9 a1 00 00 00       	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000acf7:	90                   	nop
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acff:	e8 b8 4d 00 00       	call   c000fabc <tcp_send_fin>
c000ad04:	83 c4 10             	add    esp,0x10
c000ad07:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad0b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad10:	85 c0                	test   eax,eax
c000ad12:	75 78                	jne    c000ad8c <tcp_close_shutdown+0x320>
c000ad14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad18:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad1f:	eb 6b                	jmp    c000ad8c <tcp_close_shutdown+0x320>
c000ad21:	8d 76 00             	lea    esi,[esi+0x0]
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad2b:	e8 8c 4d 00 00       	call   c000fabc <tcp_send_fin>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad37:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad3c:	85 c0                	test   eax,eax
c000ad3e:	75 50                	jne    c000ad90 <tcp_close_shutdown+0x324>
c000ad40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad44:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad4b:	eb 43                	jmp    c000ad90 <tcp_close_shutdown+0x324>
c000ad4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad50:	83 ec 0c             	sub    esp,0xc
c000ad53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad57:	e8 60 4d 00 00       	call   c000fabc <tcp_send_fin>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad63:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad68:	85 c0                	test   eax,eax
c000ad6a:	75 28                	jne    c000ad94 <tcp_close_shutdown+0x328>
c000ad6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad70:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ad77:	eb 1b                	jmp    c000ad94 <tcp_close_shutdown+0x328>
c000ad79:	8d 76 00             	lea    esi,[esi+0x0]
c000ad7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad81:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad89:	eb 0d                	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000ad8b:	90                   	nop
c000ad8c:	90                   	nop
c000ad8d:	eb 09                	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000ad8f:	90                   	nop
c000ad90:	90                   	nop
c000ad91:	eb 05                	jmp    c000ad98 <tcp_close_shutdown+0x32c>
c000ad93:	90                   	nop
c000ad94:	90                   	nop
c000ad95:	8d 76 00             	lea    esi,[esi+0x0]
c000ad98:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ad9d:	74 19                	je     c000adb8 <tcp_close_shutdown+0x34c>
c000ad9f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ada4:	85 c0                	test   eax,eax
c000ada6:	75 10                	jne    c000adb8 <tcp_close_shutdown+0x34c>
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adaf:	e8 b8 50 00 00       	call   c000fe6c <tcp_output>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	90                   	nop
c000adb8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000adbc:	83 c4 20             	add    esp,0x20
c000adbf:	5b                   	pop    ebx
c000adc0:	5e                   	pop    esi
c000adc1:	5f                   	pop    edi
c000adc2:	c3                   	ret    
c000adc3:	90                   	nop

c000adc4 <tcp_close>:
c000adc4:	83 ec 0c             	sub    esp,0xc
c000adc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adce:	83 f8 01             	cmp    eax,0x1
c000add1:	74 15                	je     c000ade8 <tcp_close+0x24>
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000adda:	83 c8 10             	or     eax,0x10
c000addd:	88 c2                	mov    dl,al
c000addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ade6:	66 90                	xchg   ax,ax
c000ade8:	83 ec 08             	sub    esp,0x8
c000adeb:	6a 01                	push   0x1
c000aded:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adf1:	e8 76 fc ff ff       	call   c000aa6c <tcp_close_shutdown>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	83 c4 0c             	add    esp,0xc
c000adfc:	c3                   	ret    
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]

c000ae00 <tcp_recv_null>:
c000ae00:	83 ec 1c             	sub    esp,0x1c
c000ae03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ae07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ae0b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ae10:	74 2e                	je     c000ae40 <tcp_recv_null+0x40>
c000ae12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ae16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ae19:	0f b7 c0             	movzx  eax,ax
c000ae1c:	83 ec 08             	sub    esp,0x8
c000ae1f:	50                   	push   eax
c000ae20:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae24:	e8 b3 ee ff ff       	call   c0009cdc <tcp_recved>
c000ae29:	83 c4 10             	add    esp,0x10
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae33:	e8 94 d4 ff ff       	call   c00082cc <pbuf_free>
c000ae38:	83 c4 10             	add    esp,0x10
c000ae3b:	eb 1f                	jmp    c000ae5c <tcp_recv_null+0x5c>
c000ae3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae40:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000ae45:	85 c0                	test   eax,eax
c000ae47:	75 13                	jne    c000ae5c <tcp_recv_null+0x5c>
c000ae49:	83 ec 0c             	sub    esp,0xc
c000ae4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae50:	e8 6f ff ff ff       	call   c000adc4 <tcp_close>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	eb 06                	jmp    c000ae60 <tcp_recv_null+0x60>
c000ae5a:	66 90                	xchg   ax,ax
c000ae5c:	b0 00                	mov    al,0x0
c000ae5e:	66 90                	xchg   ax,ax
c000ae60:	83 c4 1c             	add    esp,0x1c
c000ae63:	c3                   	ret    

c000ae64 <tcp_fasttmr>:
c000ae64:	83 ec 1c             	sub    esp,0x1c
c000ae67:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ae6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae70:	e9 03 01 00 00       	jmp    c000af78 <tcp_fasttmr+0x114>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae87:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae8d:	85 c0                	test   eax,eax
c000ae8f:	0f 84 8f 00 00 00    	je     c000af24 <tcp_fasttmr+0xc0>
c000ae95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae99:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae9f:	85 c0                	test   eax,eax
c000aea1:	74 31                	je     c000aed4 <tcp_fasttmr+0x70>
c000aea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aea7:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000aead:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeb1:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000aeb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aebb:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000aebe:	6a 00                	push   0x0
c000aec0:	51                   	push   ecx
c000aec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec5:	52                   	push   edx
c000aec6:	ff d0                	call   eax
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aecf:	eb 23                	jmp    c000aef4 <tcp_fasttmr+0x90>
c000aed1:	8d 76 00             	lea    esi,[esi+0x0]
c000aed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aed8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aede:	6a 00                	push   0x0
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee5:	6a 00                	push   0x0
c000aee7:	e8 14 ff ff ff       	call   c000ae00 <tcp_recv_null>
c000aeec:	83 c4 10             	add    esp,0x10
c000aeef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aef3:	90                   	nop
c000aef4:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aef9:	85 c0                	test   eax,eax
c000aefb:	75 13                	jne    c000af10 <tcp_fasttmr+0xac>
c000aefd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af01:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af0b:	eb 17                	jmp    c000af24 <tcp_fasttmr+0xc0>
c000af0d:	8d 76 00             	lea    esi,[esi+0x0]
c000af10:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af15:	83 f8 f6             	cmp    eax,0xfffffff6
c000af18:	75 0a                	jne    c000af24 <tcp_fasttmr+0xc0>
c000af1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af22:	66 90                	xchg   ax,ax
c000af24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af29:	74 45                	je     c000af70 <tcp_fasttmr+0x10c>
c000af2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af2f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af32:	0f b6 c0             	movzx  eax,al
c000af35:	83 e0 01             	and    eax,0x1
c000af38:	74 36                	je     c000af70 <tcp_fasttmr+0x10c>
c000af3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af3e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af41:	83 c8 02             	or     eax,0x2
c000af44:	88 c2                	mov    dl,al
c000af46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af4a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af4d:	83 ec 0c             	sub    esp,0xc
c000af50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af54:	e8 13 4f 00 00       	call   c000fe6c <tcp_output>
c000af59:	83 c4 10             	add    esp,0x10
c000af5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af60:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af63:	83 e0 fc             	and    eax,0xfffffffc
c000af66:	88 c2                	mov    dl,al
c000af68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af6c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af6f:	90                   	nop
c000af70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af7d:	0f 85 f5 fe ff ff    	jne    c000ae78 <tcp_fasttmr+0x14>
c000af83:	90                   	nop
c000af84:	83 c4 1c             	add    esp,0x1c
c000af87:	c3                   	ret    

c000af88 <tcp_tmr>:
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	e8 d4 fe ff ff       	call   c000ae64 <tcp_fasttmr>
c000af90:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af95:	83 c0 01             	add    eax,0x1
c000af98:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000af9d:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000afa2:	0f b6 c0             	movzx  eax,al
c000afa5:	83 e0 01             	and    eax,0x1
c000afa8:	74 06                	je     c000afb0 <tcp_tmr+0x28>
c000afaa:	e8 f1 f1 ff ff       	call   c000a1a0 <tcp_slowtmr>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	83 c4 0c             	add    esp,0xc
c000afb4:	c3                   	ret    
c000afb5:	8d 76 00             	lea    esi,[esi+0x0]

c000afb8 <tcp_shutdown>:
c000afb8:	83 ec 0c             	sub    esp,0xc
c000afbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afc2:	83 f8 01             	cmp    eax,0x1
c000afc5:	75 09                	jne    c000afd0 <tcp_shutdown+0x18>
c000afc7:	b0 f3                	mov    al,0xf3
c000afc9:	e9 92 00 00 00       	jmp    c000b060 <tcp_shutdown+0xa8>
c000afce:	66 90                	xchg   ax,ax
c000afd0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000afd5:	74 49                	je     c000b020 <tcp_shutdown+0x68>
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 27                	je     c000b00c <tcp_shutdown+0x54>
c000afe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afef:	83 ec 0c             	sub    esp,0xc
c000aff2:	50                   	push   eax
c000aff3:	e8 d4 d2 ff ff       	call   c00082cc <pbuf_free>
c000aff8:	83 c4 10             	add    esp,0x10
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b009:	8d 76 00             	lea    esi,[esi+0x0]
c000b00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b010:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b013:	83 c8 10             	or     eax,0x10
c000b016:	88 c2                	mov    dl,al
c000b018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b01f:	90                   	nop
c000b020:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b025:	74 2d                	je     c000b054 <tcp_shutdown+0x9c>
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b02e:	83 f8 03             	cmp    eax,0x3
c000b031:	72 25                	jb     c000b058 <tcp_shutdown+0xa0>
c000b033:	83 f8 04             	cmp    eax,0x4
c000b036:	76 08                	jbe    c000b040 <tcp_shutdown+0x88>
c000b038:	83 f8 07             	cmp    eax,0x7
c000b03b:	75 1b                	jne    c000b058 <tcp_shutdown+0xa0>
c000b03d:	8d 76 00             	lea    esi,[esi+0x0]
c000b040:	83 ec 08             	sub    esp,0x8
c000b043:	6a 00                	push   0x0
c000b045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b049:	e8 1e fa ff ff       	call   c000aa6c <tcp_close_shutdown>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	eb 0d                	jmp    c000b060 <tcp_shutdown+0xa8>
c000b053:	90                   	nop
c000b054:	90                   	nop
c000b055:	eb 05                	jmp    c000b05c <tcp_shutdown+0xa4>
c000b057:	90                   	nop
c000b058:	90                   	nop
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	b0 00                	mov    al,0x0
c000b05e:	66 90                	xchg   ax,ax
c000b060:	83 c4 0c             	add    esp,0xc
c000b063:	c3                   	ret    

c000b064 <tcp_abandon>:
c000b064:	83 ec 2c             	sub    esp,0x2c
c000b067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b06b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b06e:	83 f8 01             	cmp    eax,0x1
c000b071:	75 15                	jne    c000b088 <tcp_abandon+0x24>
c000b073:	83 ec 08             	sub    esp,0x8
c000b076:	68 30 01 03 c0       	push   0xc0030130
c000b07b:	68 c6 f9 02 c0       	push   0xc002f9c6
c000b080:	e8 43 4a 01 00       	call   c001fac8 <CPrintf>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b08c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b08f:	83 f8 0a             	cmp    eax,0xa
c000b092:	75 2c                	jne    c000b0c0 <tcp_abandon+0x5c>
c000b094:	83 ec 08             	sub    esp,0x8
c000b097:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b09b:	68 84 68 03 c0       	push   0xc0036884
c000b0a0:	e8 77 f8 ff ff       	call   c000a91c <tcp_pcb_remove>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	83 ec 08             	sub    esp,0x8
c000b0ab:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0af:	6a 02                	push   0x2
c000b0b1:	e8 56 c9 ff ff       	call   c0007a0c <memp_free>
c000b0b6:	83 c4 10             	add    esp,0x10
c000b0b9:	e9 32 01 00 00       	jmp    c000b1f0 <tcp_abandon+0x18c>
c000b0be:	66 90                	xchg   ax,ax
c000b0c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0c4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b0c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b0cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0da:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b0f2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b0f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0fb:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b0ff:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b108:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b10e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b116:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b11d:	83 ec 08             	sub    esp,0x8
c000b120:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b124:	68 70 68 03 c0       	push   0xc0036870
c000b129:	e8 ee f7 ff ff       	call   c000a91c <tcp_pcb_remove>
c000b12e:	83 c4 10             	add    esp,0x10
c000b131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b135:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b138:	85 c0                	test   eax,eax
c000b13a:	74 14                	je     c000b150 <tcp_abandon+0xec>
c000b13c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b140:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	e8 50 ee ff ff       	call   c0009f9c <tcp_segs_free>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	90                   	nop
c000b150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b154:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b157:	85 c0                	test   eax,eax
c000b159:	74 15                	je     c000b170 <tcp_abandon+0x10c>
c000b15b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b15f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b162:	83 ec 0c             	sub    esp,0xc
c000b165:	50                   	push   eax
c000b166:	e8 31 ee ff ff       	call   c0009f9c <tcp_segs_free>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	66 90                	xchg   ax,ax
c000b170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b174:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b17a:	85 c0                	test   eax,eax
c000b17c:	74 16                	je     c000b194 <tcp_abandon+0x130>
c000b17e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b182:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	50                   	push   eax
c000b18c:	e8 0b ee ff ff       	call   c0009f9c <tcp_segs_free>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	83 ec 08             	sub    esp,0x8
c000b197:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b19b:	6a 02                	push   0x2
c000b19d:	e8 6a c8 ff ff       	call   c0007a0c <memp_free>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b1aa:	74 14                	je     c000b1c0 <tcp_abandon+0x15c>
c000b1ac:	83 ec 08             	sub    esp,0x8
c000b1af:	6a f6                	push   0xfffffff6
c000b1b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1b9:	ff d0                	call   eax
c000b1bb:	83 c4 10             	add    esp,0x10
c000b1be:	66 90                	xchg   ax,ax
c000b1c0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b1c5:	74 29                	je     c000b1f0 <tcp_abandon+0x18c>
c000b1c7:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b1cc:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b1d1:	83 ec 08             	sub    esp,0x8
c000b1d4:	52                   	push   edx
c000b1d5:	50                   	push   eax
c000b1d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1da:	50                   	push   eax
c000b1db:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1df:	50                   	push   eax
c000b1e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b1e4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1e8:	e8 0b 51 00 00       	call   c00102f8 <tcp_rst>
c000b1ed:	83 c4 20             	add    esp,0x20
c000b1f0:	90                   	nop
c000b1f1:	83 c4 2c             	add    esp,0x2c
c000b1f4:	c3                   	ret    
c000b1f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b1f8 <tcp_abort>:
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	83 ec 08             	sub    esp,0x8
c000b1fe:	6a 01                	push   0x1
c000b200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b204:	e8 5b fe ff ff       	call   c000b064 <tcp_abandon>
c000b209:	83 c4 10             	add    esp,0x10
c000b20c:	90                   	nop
c000b20d:	83 c4 0c             	add    esp,0xc
c000b210:	c3                   	ret    
c000b211:	8d 76 00             	lea    esi,[esi+0x0]

c000b214 <tcp_kill_prio>:
c000b214:	83 ec 2c             	sub    esp,0x2c
c000b217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b21b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b21f:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b224:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b22c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b234:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b239:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b23d:	eb 75                	jmp    c000b2b4 <tcp_kill_prio+0xa0>
c000b23f:	90                   	nop
c000b240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b244:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b247:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b24c:	0f b6 c0             	movzx  eax,al
c000b24f:	39 c2                	cmp    edx,eax
c000b251:	72 55                	jb     c000b2a8 <tcp_kill_prio+0x94>
c000b253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b257:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b25a:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b25f:	0f b6 c0             	movzx  eax,al
c000b262:	39 c2                	cmp    edx,eax
c000b264:	72 42                	jb     c000b2a8 <tcp_kill_prio+0x94>
c000b266:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b26c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b270:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b273:	29 c2                	sub    edx,eax
c000b275:	89 d0                	mov    eax,edx
c000b277:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b27b:	77 2b                	ja     c000b2a8 <tcp_kill_prio+0x94>
c000b27d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b287:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b28a:	29 c2                	sub    edx,eax
c000b28c:	89 d0                	mov    eax,edx
c000b28e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b292:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b29a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b29e:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2a1:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b2a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2b3:	90                   	nop
c000b2b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b2b9:	75 85                	jne    c000b240 <tcp_kill_prio+0x2c>
c000b2bb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b2c0:	74 12                	je     c000b2d4 <tcp_kill_prio+0xc0>
c000b2c2:	83 ec 0c             	sub    esp,0xc
c000b2c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b2c9:	e8 2a ff ff ff       	call   c000b1f8 <tcp_abort>
c000b2ce:	83 c4 10             	add    esp,0x10
c000b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b2d4:	90                   	nop
c000b2d5:	83 c4 2c             	add    esp,0x2c
c000b2d8:	c3                   	ret    
c000b2d9:	8d 76 00             	lea    esi,[esi+0x0]

c000b2dc <tcp_kill_timewait>:
c000b2dc:	83 ec 1c             	sub    esp,0x1c
c000b2df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b2e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b2ef:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b2f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2f8:	eb 42                	jmp    c000b33c <tcp_kill_timewait+0x60>
c000b2fa:	66 90                	xchg   ax,ax
c000b2fc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b306:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b309:	29 c2                	sub    edx,eax
c000b30b:	89 d0                	mov    eax,edx
c000b30d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b311:	77 1d                	ja     c000b330 <tcp_kill_timewait+0x54>
c000b313:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b31d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b320:	29 c2                	sub    edx,eax
c000b322:	89 d0                	mov    eax,edx
c000b324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b32c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b334:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b33b:	90                   	nop
c000b33c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b341:	75 b9                	jne    c000b2fc <tcp_kill_timewait+0x20>
c000b343:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b348:	74 12                	je     c000b35c <tcp_kill_timewait+0x80>
c000b34a:	83 ec 0c             	sub    esp,0xc
c000b34d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b351:	e8 a2 fe ff ff       	call   c000b1f8 <tcp_abort>
c000b356:	83 c4 10             	add    esp,0x10
c000b359:	8d 76 00             	lea    esi,[esi+0x0]
c000b35c:	90                   	nop
c000b35d:	83 c4 1c             	add    esp,0x1c
c000b360:	c3                   	ret    
c000b361:	8d 76 00             	lea    esi,[esi+0x0]

c000b364 <tcp_next_iss>:
c000b364:	8b 15 7c 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a7c
c000b36a:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b36f:	01 d0                	add    eax,edx
c000b371:	a3 7c 3a 03 c0       	mov    ds:0xc0033a7c,eax
c000b376:	a1 7c 3a 03 c0       	mov    eax,ds:0xc0033a7c
c000b37b:	c3                   	ret    

c000b37c <tcp_alloc>:
c000b37c:	83 ec 2c             	sub    esp,0x2c
c000b37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b383:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b387:	83 ec 0c             	sub    esp,0xc
c000b38a:	6a 02                	push   0x2
c000b38c:	e8 4f c5 ff ff       	call   c00078e0 <memp_malloc>
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b398:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b39d:	75 6d                	jne    c000b40c <tcp_alloc+0x90>
c000b39f:	e8 38 ff ff ff       	call   c000b2dc <tcp_kill_timewait>
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	6a 02                	push   0x2
c000b3a9:	e8 32 c5 ff ff       	call   c00078e0 <memp_malloc>
c000b3ae:	83 c4 10             	add    esp,0x10
c000b3b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3ba:	75 38                	jne    c000b3f4 <tcp_alloc+0x78>
c000b3bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b3c1:	83 ec 0c             	sub    esp,0xc
c000b3c4:	50                   	push   eax
c000b3c5:	e8 4a fe ff ff       	call   c000b214 <tcp_kill_prio>
c000b3ca:	83 c4 10             	add    esp,0x10
c000b3cd:	83 ec 0c             	sub    esp,0xc
c000b3d0:	6a 02                	push   0x2
c000b3d2:	e8 09 c5 ff ff       	call   c00078e0 <memp_malloc>
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3e3:	74 0f                	je     c000b3f4 <tcp_alloc+0x78>
c000b3e5:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3eb:	83 e8 01             	sub    eax,0x1
c000b3ee:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3f4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3f9:	74 11                	je     c000b40c <tcp_alloc+0x90>
c000b3fb:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b401:	83 e8 01             	sub    eax,0x1
c000b404:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b40a:	66 90                	xchg   ax,ax
c000b40c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b411:	0f 84 09 01 00 00    	je     c000b520 <tcp_alloc+0x1a4>
c000b417:	83 ec 04             	sub    esp,0x4
c000b41a:	68 a8 00 00 00       	push   0xa8
c000b41f:	6a 00                	push   0x0
c000b421:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b425:	e8 c6 50 ff ff       	call   c00004f0 <memset>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b431:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b435:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b43c:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b446:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b44c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b450:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b45a:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b464:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46c:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b474:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b47a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b47e:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b488:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b48e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b492:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b4a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a6:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b4ac:	e8 b3 fe ff ff       	call   c000b364 <tcp_next_iss>
c000b4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4bd:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b4c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4c8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b4cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4d3:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b4d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4de:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b4e1:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4eb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b4ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b4f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4fa:	c7 80 8c 00 00 00 00 ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ae00
c000b504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b508:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b51d:	8d 76 00             	lea    esi,[esi+0x0]
c000b520:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b524:	83 c4 2c             	add    esp,0x2c
c000b527:	c3                   	ret    

c000b528 <tcp_new>:
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	83 ec 0c             	sub    esp,0xc
c000b52e:	6a 40                	push   0x40
c000b530:	e8 47 fe ff ff       	call   c000b37c <tcp_alloc>
c000b535:	83 c4 10             	add    esp,0x10
c000b538:	83 c4 0c             	add    esp,0xc
c000b53b:	c3                   	ret    

c000b53c <tcp_eff_send_mss>:
c000b53c:	53                   	push   ebx
c000b53d:	83 ec 28             	sub    esp,0x28
c000b540:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b544:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b549:	83 ec 0c             	sub    esp,0xc
c000b54c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b550:	e8 bf 80 00 00       	call   c0013614 <ip_route>
c000b555:	83 c4 10             	add    esp,0x10
c000b558:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b55c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b561:	74 3d                	je     c000b5a0 <tcp_eff_send_mss+0x64>
c000b563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b567:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b56a:	0f b7 c0             	movzx  eax,ax
c000b56d:	85 c0                	test   eax,eax
c000b56f:	74 2f                	je     c000b5a0 <tcp_eff_send_mss+0x64>
c000b571:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b575:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b578:	83 e8 28             	sub    eax,0x28
c000b57b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b580:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b584:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b589:	0f b7 d8             	movzx  ebx,ax
c000b58c:	0f b7 ca             	movzx  ecx,dx
c000b58f:	39 cb                	cmp    ebx,ecx
c000b591:	76 05                	jbe    c000b598 <tcp_eff_send_mss+0x5c>
c000b593:	89 d0                	mov    eax,edx
c000b595:	8d 76 00             	lea    esi,[esi+0x0]
c000b598:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b59d:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b5a4:	83 c4 28             	add    esp,0x28
c000b5a7:	5b                   	pop    ebx
c000b5a8:	c3                   	ret    
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b5ac <tcp_connect>:
c000b5ac:	83 ec 2c             	sub    esp,0x2c
c000b5af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b5b3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b5bf:	85 c0                	test   eax,eax
c000b5c1:	74 1d                	je     c000b5e0 <tcp_connect+0x34>
c000b5c3:	83 ec 08             	sub    esp,0x8
c000b5c6:	68 64 01 03 c0       	push   0xc0030164
c000b5cb:	68 c6 f9 02 c0       	push   0xc002f9c6
c000b5d0:	e8 f3 44 01 00       	call   c001fac8 <CPrintf>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	b0 f7                	mov    al,0xf7
c000b5da:	e9 41 02 00 00       	jmp    c000b820 <tcp_connect+0x274>
c000b5df:	90                   	nop
c000b5e0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b5e5:	74 25                	je     c000b60c <tcp_connect+0x60>
c000b5e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b5ef:	8b 12                	mov    edx,DWORD PTR [edx]
c000b5f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5fc:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b600:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b604:	85 c0                	test   eax,eax
c000b606:	74 18                	je     c000b620 <tcp_connect+0x74>
c000b608:	eb 0a                	jmp    c000b614 <tcp_connect+0x68>
c000b60a:	66 90                	xchg   ax,ax
c000b60c:	b0 fa                	mov    al,0xfa
c000b60e:	e9 0d 02 00 00       	jmp    c000b820 <tcp_connect+0x274>
c000b613:	90                   	nop
c000b614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b618:	8b 00                	mov    eax,DWORD PTR [eax]
c000b61a:	85 c0                	test   eax,eax
c000b61c:	75 3a                	jne    c000b658 <tcp_connect+0xac>
c000b61e:	66 90                	xchg   ax,ax
c000b620:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b624:	83 c0 04             	add    eax,0x4
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	50                   	push   eax
c000b62b:	e8 e4 7f 00 00       	call   c0013614 <ip_route>
c000b630:	83 c4 10             	add    esp,0x10
c000b633:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b637:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b63c:	75 0a                	jne    c000b648 <tcp_connect+0x9c>
c000b63e:	b0 fc                	mov    al,0xfc
c000b640:	e9 db 01 00 00       	jmp    c000b820 <tcp_connect+0x274>
c000b645:	8d 76 00             	lea    esi,[esi+0x0]
c000b648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b64f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b653:	89 10                	mov    DWORD PTR [eax],edx
c000b655:	8d 76 00             	lea    esi,[esi+0x0]
c000b658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b65c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b65f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b668:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b66b:	0f b7 c0             	movzx  eax,ax
c000b66e:	85 c0                	test   eax,eax
c000b670:	75 12                	jne    c000b684 <tcp_connect+0xd8>
c000b672:	e8 21 e7 ff ff       	call   c0009d98 <tcp_new_port>
c000b677:	89 c2                	mov    edx,eax
c000b679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b67d:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b681:	8d 76 00             	lea    esi,[esi+0x0]
c000b684:	e8 db fc ff ff       	call   c000b364 <tcp_next_iss>
c000b689:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b68d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b691:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a0:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6a7:	8d 50 ff             	lea    edx,[eax-0x1]
c000b6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ae:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6b5:	8d 50 ff             	lea    edx,[eax-0x1]
c000b6b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6bc:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c3:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b6c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6cd:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b6da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6de:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b6e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e5:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b6eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ef:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6fc:	0f b7 c0             	movzx  eax,ax
c000b6ff:	83 ec 08             	sub    esp,0x8
c000b702:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b706:	50                   	push   eax
c000b707:	e8 30 fe ff ff       	call   c000b53c <tcp_eff_send_mss>
c000b70c:	83 c4 10             	add    esp,0x10
c000b70f:	89 c2                	mov    edx,eax
c000b711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b715:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71d:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b727:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b72a:	89 c2                	mov    edx,eax
c000b72c:	c1 e2 02             	shl    edx,0x2
c000b72f:	01 d0                	add    eax,edx
c000b731:	d1 e0                	shl    eax,1
c000b733:	89 c2                	mov    edx,eax
c000b735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b739:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b741:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b745:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b74b:	83 ec 08             	sub    esp,0x8
c000b74e:	6a 02                	push   0x2
c000b750:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b754:	e8 73 40 00 00       	call   c000f7cc <tcp_enqueue_flags>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b760:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b765:	85 c0                	test   eax,eax
c000b767:	0f 85 af 00 00 00    	jne    c000b81c <tcp_connect+0x270>
c000b76d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b771:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b778:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b77d:	85 c0                	test   eax,eax
c000b77f:	74 6f                	je     c000b7f0 <tcp_connect+0x244>
c000b781:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b786:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b78a:	75 10                	jne    c000b79c <tcp_connect+0x1f0>
c000b78c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b791:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b794:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b799:	eb 49                	jmp    c000b7e4 <tcp_connect+0x238>
c000b79b:	90                   	nop
c000b79c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b7a1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b7a6:	eb 30                	jmp    c000b7d8 <tcp_connect+0x22c>
c000b7a8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b7b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b7b4:	75 12                	jne    c000b7c8 <tcp_connect+0x21c>
c000b7b6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7bf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b7c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7c5:	eb 1d                	jmp    c000b7e4 <tcp_connect+0x238>
c000b7c7:	90                   	nop
c000b7c8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b7d0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7dd:	85 c0                	test   eax,eax
c000b7df:	75 c7                	jne    c000b7a8 <tcp_connect+0x1fc>
c000b7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7e8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b7ef:	90                   	nop
c000b7f0:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b7f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b801:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b806:	e8 09 53 00 00       	call   c0010b14 <tcp_timer_needed>
c000b80b:	83 ec 0c             	sub    esp,0xc
c000b80e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b812:	e8 55 46 00 00       	call   c000fe6c <tcp_output>
c000b817:	83 c4 10             	add    esp,0x10
c000b81a:	66 90                	xchg   ax,ax
c000b81c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b820:	83 c4 2c             	add    esp,0x2c
c000b823:	c3                   	ret    

c000b824 <tcp_debug_state_str>:
c000b824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b828:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c000b82f:	c3                   	ret    

c000b830 <tcp_timewait_input>:
c000b830:	53                   	push   ebx
c000b831:	83 ec 08             	sub    esp,0x8
c000b834:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b839:	0f b6 c0             	movzx  eax,al
c000b83c:	83 e0 04             	and    eax,0x4
c000b83f:	74 07                	je     c000b848 <tcp_timewait_input+0x18>
c000b841:	b0 00                	mov    al,0x0
c000b843:	e9 e8 00 00 00       	jmp    c000b930 <tcp_timewait_input+0x100>
c000b848:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b84d:	0f b6 c0             	movzx  eax,al
c000b850:	83 e0 02             	and    eax,0x2
c000b853:	0f 84 83 00 00 00    	je     c000b8dc <tcp_timewait_input+0xac>
c000b859:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b863:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b866:	29 c2                	sub    edx,eax
c000b868:	89 d0                	mov    eax,edx
c000b86a:	0f 88 88 00 00 00    	js     c000b8f8 <tcp_timewait_input+0xc8>
c000b870:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87a:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b881:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b884:	0f b7 c0             	movzx  eax,ax
c000b887:	01 c8                	add    eax,ecx
c000b889:	29 c2                	sub    edx,eax
c000b88b:	89 d0                	mov    eax,edx
c000b88d:	85 c0                	test   eax,eax
c000b88f:	7f 67                	jg     c000b8f8 <tcp_timewait_input+0xc8>
c000b891:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b896:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b899:	0f b7 c8             	movzx  ecx,ax
c000b89c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b8a1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b8a5:	0f b7 d0             	movzx  edx,ax
c000b8a8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8ae:	0f b7 d8             	movzx  ebx,ax
c000b8b1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b8b6:	01 c3                	add    ebx,eax
c000b8b8:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b8bd:	83 ec 08             	sub    esp,0x8
c000b8c0:	51                   	push   ecx
c000b8c1:	52                   	push   edx
c000b8c2:	68 90 68 03 c0       	push   0xc0036890
c000b8c7:	68 98 68 03 c0       	push   0xc0036898
c000b8cc:	53                   	push   ebx
c000b8cd:	50                   	push   eax
c000b8ce:	e8 25 4a 00 00       	call   c00102f8 <tcp_rst>
c000b8d3:	83 c4 20             	add    esp,0x20
c000b8d6:	b0 00                	mov    al,0x0
c000b8d8:	eb 56                	jmp    c000b930 <tcp_timewait_input+0x100>
c000b8da:	66 90                	xchg   ax,ax
c000b8dc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8e1:	0f b6 c0             	movzx  eax,al
c000b8e4:	83 e0 01             	and    eax,0x1
c000b8e7:	74 0f                	je     c000b8f8 <tcp_timewait_input+0xc8>
c000b8e9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b8f6:	66 90                	xchg   ax,ax
c000b8f8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8fe:	0f b7 c0             	movzx  eax,ax
c000b901:	85 c0                	test   eax,eax
c000b903:	74 27                	je     c000b92c <tcp_timewait_input+0xfc>
c000b905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b909:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b90c:	83 c8 02             	or     eax,0x2
c000b90f:	88 c2                	mov    dl,al
c000b911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b915:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b918:	83 ec 0c             	sub    esp,0xc
c000b91b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b91f:	e8 48 45 00 00       	call   c000fe6c <tcp_output>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	eb 07                	jmp    c000b930 <tcp_timewait_input+0x100>
c000b929:	8d 76 00             	lea    esi,[esi+0x0]
c000b92c:	b0 00                	mov    al,0x0
c000b92e:	66 90                	xchg   ax,ax
c000b930:	83 c4 08             	add    esp,0x8
c000b933:	5b                   	pop    ebx
c000b934:	c3                   	ret    
c000b935:	8d 76 00             	lea    esi,[esi+0x0]

c000b938 <tcp_oos_insert_segment>:
c000b938:	53                   	push   ebx
c000b939:	83 ec 18             	sub    esp,0x18
c000b93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b943:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b947:	0f b7 c0             	movzx  eax,ax
c000b94a:	83 ec 0c             	sub    esp,0xc
c000b94d:	50                   	push   eax
c000b94e:	e8 c9 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b953:	83 c4 10             	add    esp,0x10
c000b956:	0f b7 c0             	movzx  eax,ax
c000b959:	83 e0 01             	and    eax,0x1
c000b95c:	0f 84 8e 00 00 00    	je     c000b9f0 <tcp_oos_insert_segment+0xb8>
c000b962:	83 ec 0c             	sub    esp,0xc
c000b965:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b969:	e8 2e e6 ff ff       	call   c0009f9c <tcp_segs_free>
c000b96e:	83 c4 10             	add    esp,0x10
c000b971:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b979:	e9 1a 01 00 00       	jmp    c000ba98 <tcp_oos_insert_segment+0x160>
c000b97e:	66 90                	xchg   ax,ax
c000b980:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b987:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b98b:	0f b7 c0             	movzx  eax,ax
c000b98e:	83 ec 0c             	sub    esp,0xc
c000b991:	50                   	push   eax
c000b992:	e8 85 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	0f b7 c0             	movzx  eax,ax
c000b99d:	83 e0 01             	and    eax,0x1
c000b9a0:	74 2a                	je     c000b9cc <tcp_oos_insert_segment+0x94>
c000b9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a9:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b9ad:	83 ec 0c             	sub    esp,0xc
c000b9b0:	6a 01                	push   0x1
c000b9b2:	e8 65 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b9b7:	83 c4 10             	add    esp,0x10
c000b9ba:	89 c2                	mov    edx,eax
c000b9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c3:	09 da                	or     edx,ebx
c000b9c5:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000b9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9e5:	e8 6e e5 ff ff       	call   c0009f58 <tcp_seg_free>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9f5:	74 35                	je     c000ba2c <tcp_oos_insert_segment+0xf4>
c000b9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9fe:	0f b7 d0             	movzx  edx,ax
c000ba01:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba06:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ba09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ba13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba1a:	0f b7 c0             	movzx  eax,ax
c000ba1d:	01 d0                	add    eax,edx
c000ba1f:	29 c1                	sub    ecx,eax
c000ba21:	89 c8                	mov    eax,ecx
c000ba23:	0f 89 57 ff ff ff    	jns    c000b980 <tcp_oos_insert_segment+0x48>
c000ba29:	8d 76 00             	lea    esi,[esi+0x0]
c000ba2c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ba31:	74 65                	je     c000ba98 <tcp_oos_insert_segment+0x160>
c000ba33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba3a:	0f b7 d0             	movzx  edx,ax
c000ba3d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba42:	01 c2                	add    edx,eax
c000ba44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba4e:	29 c2                	sub    edx,eax
c000ba50:	89 d0                	mov    eax,edx
c000ba52:	85 c0                	test   eax,eax
c000ba54:	7e 42                	jle    c000ba98 <tcp_oos_insert_segment+0x160>
c000ba56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba60:	89 c2                	mov    edx,eax
c000ba62:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba67:	89 d3                	mov    ebx,edx
c000ba69:	29 c3                	sub    ebx,eax
c000ba6b:	89 d8                	mov    eax,ebx
c000ba6d:	89 c2                	mov    edx,eax
c000ba6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba73:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ba77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba7e:	0f b7 d0             	movzx  edx,ax
c000ba81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba88:	83 ec 08             	sub    esp,0x8
c000ba8b:	52                   	push   edx
c000ba8c:	50                   	push   eax
c000ba8d:	e8 0e ce ff ff       	call   c00088a0 <pbuf_realloc>
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	8d 76 00             	lea    esi,[esi+0x0]
c000ba98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000baa0:	89 10                	mov    DWORD PTR [eax],edx
c000baa2:	90                   	nop
c000baa3:	83 c4 18             	add    esp,0x18
c000baa6:	5b                   	pop    ebx
c000baa7:	c3                   	ret    

c000baa8 <tcp_receive>:
c000baa8:	57                   	push   edi
c000baa9:	56                   	push   esi
c000baaa:	53                   	push   ebx
c000baab:	83 ec 30             	sub    esp,0x30
c000baae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bab6:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000babb:	0f b6 c0             	movzx  eax,al
c000babe:	83 e0 10             	and    eax,0x10
c000bac1:	0f 84 f5 07 00 00    	je     c000c2bc <tcp_receive+0x814>
c000bac7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bacb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bace:	0f b7 d0             	movzx  edx,ax
c000bad1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bad5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bad8:	01 d0                	add    eax,edx
c000bada:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bade:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bae2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bae5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baea:	29 c2                	sub    edx,eax
c000baec:	89 d0                	mov    eax,edx
c000baee:	78 50                	js     c000bb40 <tcp_receive+0x98>
c000baf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baf4:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baf7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bafc:	39 c2                	cmp    edx,eax
c000bafe:	75 14                	jne    c000bb14 <tcp_receive+0x6c>
c000bb00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb04:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb07:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb0c:	29 c2                	sub    edx,eax
c000bb0e:	89 d0                	mov    eax,edx
c000bb10:	78 2e                	js     c000bb40 <tcp_receive+0x98>
c000bb12:	66 90                	xchg   ax,ax
c000bb14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb18:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb1b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb20:	39 c2                	cmp    edx,eax
c000bb22:	75 74                	jne    c000bb98 <tcp_receive+0xf0>
c000bb24:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb29:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bb2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb31:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb34:	0f b7 d2             	movzx  edx,dx
c000bb37:	0f b7 c0             	movzx  eax,ax
c000bb3a:	39 c2                	cmp    edx,eax
c000bb3c:	76 5a                	jbe    c000bb98 <tcp_receive+0xf0>
c000bb3e:	66 90                	xchg   ax,ax
c000bb40:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb45:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bb49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb4d:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bb51:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bb57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bb5e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb68:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bb6b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb6f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb72:	0f b7 c0             	movzx  eax,ax
c000bb75:	85 c0                	test   eax,eax
c000bb77:	74 1f                	je     c000bb98 <tcp_receive+0xf0>
c000bb79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb7d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bb83:	0f b6 c0             	movzx  eax,al
c000bb86:	85 c0                	test   eax,eax
c000bb88:	74 0e                	je     c000bb98 <tcp_receive+0xf0>
c000bb8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb8e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb95:	8d 76 00             	lea    esi,[esi+0x0]
c000bb98:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bba5:	29 c2                	sub    edx,eax
c000bba7:	89 d0                	mov    eax,edx
c000bba9:	85 c0                	test   eax,eax
c000bbab:	0f 8f 03 01 00 00    	jg     c000bcb4 <tcp_receive+0x20c>
c000bbb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bbbb:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bbc1:	0f b7 c0             	movzx  eax,ax
c000bbc4:	85 c0                	test   eax,eax
c000bbc6:	0f 85 d0 00 00 00    	jne    c000bc9c <tcp_receive+0x1f4>
c000bbcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbda:	0f b7 c0             	movzx  eax,ax
c000bbdd:	01 d0                	add    eax,edx
c000bbdf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bbe3:	0f 85 b3 00 00 00    	jne    c000bc9c <tcp_receive+0x1f4>
c000bbe9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbed:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bbf1:	98                   	cwde   
c000bbf2:	85 c0                	test   eax,eax
c000bbf4:	0f 88 a2 00 00 00    	js     c000bc9c <tcp_receive+0x1f4>
c000bbfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbfe:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bc01:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bc06:	39 c2                	cmp    edx,eax
c000bc08:	0f 85 8e 00 00 00    	jne    c000bc9c <tcp_receive+0x1f4>
c000bc0e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bc16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc1d:	83 c0 01             	add    eax,0x1
c000bc20:	88 c2                	mov    dl,al
c000bc22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc26:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bc29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc30:	0f b6 c0             	movzx  eax,al
c000bc33:	83 f8 03             	cmp    eax,0x3
c000bc36:	76 44                	jbe    c000bc7c <tcp_receive+0x1d4>
c000bc38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc3c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc47:	01 d0                	add    eax,edx
c000bc49:	89 c2                	mov    edx,eax
c000bc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bc53:	0f b7 d2             	movzx  edx,dx
c000bc56:	0f b7 c0             	movzx  eax,ax
c000bc59:	39 c2                	cmp    edx,eax
c000bc5b:	76 3f                	jbe    c000bc9c <tcp_receive+0x1f4>
c000bc5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc61:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc6c:	01 d0                	add    eax,edx
c000bc6e:	89 c2                	mov    edx,eax
c000bc70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc74:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bc78:	eb 22                	jmp    c000bc9c <tcp_receive+0x1f4>
c000bc7a:	66 90                	xchg   ax,ax
c000bc7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc80:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc83:	0f b6 c0             	movzx  eax,al
c000bc86:	83 f8 03             	cmp    eax,0x3
c000bc89:	75 11                	jne    c000bc9c <tcp_receive+0x1f4>
c000bc8b:	83 ec 0c             	sub    esp,0xc
c000bc8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bc92:	e8 35 49 00 00       	call   c00105cc <tcp_rexmit_fast>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	66 90                	xchg   ax,ax
c000bc9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bca1:	0f 85 a1 04 00 00    	jne    c000c148 <tcp_receive+0x6a0>
c000bca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcab:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bcaf:	e9 94 04 00 00       	jmp    c000c148 <tcp_receive+0x6a0>
c000bcb4:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bcba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcbe:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bcc1:	29 c2                	sub    edx,eax
c000bcc3:	89 d0                	mov    eax,edx
c000bcc5:	83 e8 01             	sub    eax,0x1
c000bcc8:	0f 88 52 03 00 00    	js     c000c020 <tcp_receive+0x578>
c000bcce:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bcd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd8:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bcdb:	29 c2                	sub    edx,eax
c000bcdd:	89 d0                	mov    eax,edx
c000bcdf:	85 c0                	test   eax,eax
c000bce1:	0f 8f 39 03 00 00    	jg     c000c020 <tcp_receive+0x578>
c000bce7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bceb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcee:	0f b6 c0             	movzx  eax,al
c000bcf1:	83 e0 04             	and    eax,0x4
c000bcf4:	74 22                	je     c000bd18 <tcp_receive+0x270>
c000bcf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcfa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcfd:	83 e0 fb             	and    eax,0xfffffffb
c000bd00:	88 c2                	mov    dl,al
c000bd02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd06:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bd09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0d:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bd18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1c:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bd20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd24:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bd27:	98                   	cwde   
c000bd28:	c1 f8 03             	sar    eax,0x3
c000bd2b:	89 c2                	mov    edx,eax
c000bd2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd31:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bd35:	01 d0                	add    eax,edx
c000bd37:	89 c2                	mov    edx,eax
c000bd39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3d:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bd41:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd46:	89 c2                	mov    edx,eax
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd4f:	89 d7                	mov    edi,edx
c000bd51:	29 c7                	sub    edi,eax
c000bd53:	89 f8                	mov    eax,edi
c000bd55:	89 c2                	mov    edx,eax
c000bd57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5b:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bd5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd63:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bd6e:	01 d0                	add    eax,edx
c000bd70:	89 c2                	mov    edx,eax
c000bd72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd76:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bd7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7e:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd82:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8c:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bd8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd96:	83 f8 03             	cmp    eax,0x3
c000bd99:	0f 86 dd 01 00 00    	jbe    c000bf7c <tcp_receive+0x4d4>
c000bd9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda3:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bda7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdab:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bdae:	0f b7 d2             	movzx  edx,dx
c000bdb1:	0f b7 c0             	movzx  eax,ax
c000bdb4:	39 c2                	cmp    edx,eax
c000bdb6:	73 4c                	jae    c000be04 <tcp_receive+0x35c>
c000bdb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbc:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdc7:	01 d0                	add    eax,edx
c000bdc9:	89 c2                	mov    edx,eax
c000bdcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdcf:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bdd3:	0f b7 d2             	movzx  edx,dx
c000bdd6:	0f b7 c0             	movzx  eax,ax
c000bdd9:	39 c2                	cmp    edx,eax
c000bddb:	0f 86 9b 01 00 00    	jbe    c000bf7c <tcp_receive+0x4d4>
c000bde1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde5:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bde9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bded:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdf0:	01 d0                	add    eax,edx
c000bdf2:	89 c2                	mov    edx,eax
c000bdf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf8:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bdfc:	e9 7b 01 00 00       	jmp    c000bf7c <tcp_receive+0x4d4>
c000be01:	8d 76 00             	lea    esi,[esi+0x0]
c000be04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be08:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000be0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be13:	0f b7 d0             	movzx  edx,ax
c000be16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be1d:	0f b7 c0             	movzx  eax,ax
c000be20:	0f af c2             	imul   eax,edx
c000be23:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be27:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000be2b:	0f b7 f2             	movzx  esi,dx
c000be2e:	89 c2                	mov    edx,eax
c000be30:	c1 fa 1f             	sar    edx,0x1f
c000be33:	f7 fe                	idiv   esi
c000be35:	01 c8                	add    eax,ecx
c000be37:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000be3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be40:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be44:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000be49:	0f b7 c0             	movzx  eax,ax
c000be4c:	39 c2                	cmp    edx,eax
c000be4e:	0f 86 28 01 00 00    	jbe    c000bf7c <tcp_receive+0x4d4>
c000be54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be58:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000be5d:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000be61:	e9 16 01 00 00       	jmp    c000bf7c <tcp_receive+0x4d4>
c000be66:	66 90                	xchg   ax,ax
c000be68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be6c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be6f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be77:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000be7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be80:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000be83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be87:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000be8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be91:	83 ec 0c             	sub    esp,0xc
c000be94:	50                   	push   eax
c000be95:	e8 0e cc ff ff       	call   c0008aa8 <pbuf_clen>
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	0f b6 c0             	movzx  eax,al
c000bea0:	0f b7 d3             	movzx  edx,bx
c000bea3:	0f b7 c0             	movzx  eax,ax
c000bea6:	39 c2                	cmp    edx,eax
c000bea8:	73 16                	jae    c000bec0 <tcp_receive+0x418>
c000beaa:	83 ec 08             	sub    esp,0x8
c000bead:	68 0c 03 03 c0       	push   0xc003030c
c000beb2:	68 c6 f9 02 c0       	push   0xc002f9c6
c000beb7:	e8 0c 3c 01 00       	call   c001fac8 <CPrintf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	90                   	nop
c000bec0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bec7:	0f b7 c0             	movzx  eax,ax
c000beca:	85 c0                	test   eax,eax
c000becc:	74 36                	je     c000bf04 <tcp_receive+0x45c>
c000bece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bed2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bed5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bed9:	0f b7 c0             	movzx  eax,ax
c000bedc:	83 ec 0c             	sub    esp,0xc
c000bedf:	50                   	push   eax
c000bee0:	e8 37 4d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	0f b7 c0             	movzx  eax,ax
c000beeb:	83 e0 01             	and    eax,0x1
c000beee:	74 14                	je     c000bf04 <tcp_receive+0x45c>
c000bef0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bef7:	83 e8 01             	sub    eax,0x1
c000befa:	89 c2                	mov    edx,eax
c000befc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf00:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bf04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf0b:	83 ec 0c             	sub    esp,0xc
c000bf0e:	50                   	push   eax
c000bf0f:	e8 94 cb ff ff       	call   c0008aa8 <pbuf_clen>
c000bf14:	83 c4 10             	add    esp,0x10
c000bf17:	88 c1                	mov    cl,al
c000bf19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf1d:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bf20:	0f b6 c1             	movzx  eax,cl
c000bf23:	89 d7                	mov    edi,edx
c000bf25:	29 c7                	sub    edi,eax
c000bf27:	89 f8                	mov    eax,edi
c000bf29:	89 c2                	mov    edx,eax
c000bf2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf2f:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000bf33:	83 ec 0c             	sub    esp,0xc
c000bf36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bf3a:	e8 19 e0 ff ff       	call   c0009f58 <tcp_seg_free>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf46:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bf49:	0f b7 c0             	movzx  eax,ax
c000bf4c:	85 c0                	test   eax,eax
c000bf4e:	74 2c                	je     c000bf7c <tcp_receive+0x4d4>
c000bf50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf54:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf57:	85 c0                	test   eax,eax
c000bf59:	75 21                	jne    c000bf7c <tcp_receive+0x4d4>
c000bf5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf62:	85 c0                	test   eax,eax
c000bf64:	75 16                	jne    c000bf7c <tcp_receive+0x4d4>
c000bf66:	83 ec 08             	sub    esp,0x8
c000bf69:	68 34 03 03 c0       	push   0xc0030334
c000bf6e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000bf73:	e8 50 3b 01 00       	call   c001fac8 <CPrintf>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	90                   	nop
c000bf7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf80:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf83:	85 c0                	test   eax,eax
c000bf85:	74 69                	je     c000bff0 <tcp_receive+0x548>
c000bf87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf8b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf94:	83 ec 0c             	sub    esp,0xc
c000bf97:	50                   	push   eax
c000bf98:	e8 a3 4c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000bf9d:	83 c4 10             	add    esp,0x10
c000bfa0:	89 c3                	mov    ebx,eax
c000bfa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bfac:	0f b7 f0             	movzx  esi,ax
c000bfaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfb6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfb9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bfbd:	0f b7 c0             	movzx  eax,ax
c000bfc0:	83 ec 0c             	sub    esp,0xc
c000bfc3:	50                   	push   eax
c000bfc4:	e8 53 4c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bfc9:	83 c4 10             	add    esp,0x10
c000bfcc:	0f b7 c0             	movzx  eax,ax
c000bfcf:	83 e0 03             	and    eax,0x3
c000bfd2:	0f 95 c0             	setne  al
c000bfd5:	0f b6 c0             	movzx  eax,al
c000bfd8:	01 f0                	add    eax,esi
c000bfda:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bfdd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bfe2:	29 c2                	sub    edx,eax
c000bfe4:	89 d0                	mov    eax,edx
c000bfe6:	85 c0                	test   eax,eax
c000bfe8:	0f 8e 7a fe ff ff    	jle    c000be68 <tcp_receive+0x3c0>
c000bfee:	66 90                	xchg   ax,ax
c000bff0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bff7:	85 c0                	test   eax,eax
c000bff9:	75 0d                	jne    c000c008 <tcp_receive+0x560>
c000bffb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfff:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c005:	eb 0d                	jmp    c000c014 <tcp_receive+0x56c>
c000c007:	90                   	nop
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c012:	66 90                	xchg   ax,ax
c000c014:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c018:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c01c:	eb 0e                	jmp    c000c02c <tcp_receive+0x584>
c000c01e:	66 90                	xchg   ax,ax
c000c020:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c024:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c02a:	66 90                	xchg   ax,ax
c000c02c:	e9 17 01 00 00       	jmp    c000c148 <tcp_receive+0x6a0>
c000c031:	8d 76 00             	lea    esi,[esi+0x0]
c000c034:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c038:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c03b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c03f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c043:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c046:	8b 10                	mov    edx,DWORD PTR [eax]
c000c048:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c04c:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c04f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c053:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c056:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c05a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c05d:	83 ec 0c             	sub    esp,0xc
c000c060:	50                   	push   eax
c000c061:	e8 42 ca ff ff       	call   c0008aa8 <pbuf_clen>
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	0f b6 c0             	movzx  eax,al
c000c06c:	0f b7 d3             	movzx  edx,bx
c000c06f:	0f b7 c0             	movzx  eax,ax
c000c072:	39 c2                	cmp    edx,eax
c000c074:	73 16                	jae    c000c08c <tcp_receive+0x5e4>
c000c076:	83 ec 08             	sub    esp,0x8
c000c079:	68 0c 03 03 c0       	push   0xc003030c
c000c07e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c083:	e8 40 3a 01 00       	call   c001fac8 <CPrintf>
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	90                   	nop
c000c08c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c090:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c093:	0f b7 c0             	movzx  eax,ax
c000c096:	85 c0                	test   eax,eax
c000c098:	74 36                	je     c000c0d0 <tcp_receive+0x628>
c000c09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0a5:	0f b7 c0             	movzx  eax,ax
c000c0a8:	83 ec 0c             	sub    esp,0xc
c000c0ab:	50                   	push   eax
c000c0ac:	e8 6b 4b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c0b1:	83 c4 10             	add    esp,0x10
c000c0b4:	0f b7 c0             	movzx  eax,ax
c000c0b7:	83 e0 01             	and    eax,0x1
c000c0ba:	74 14                	je     c000c0d0 <tcp_receive+0x628>
c000c0bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0c3:	83 e8 01             	sub    eax,0x1
c000c0c6:	89 c2                	mov    edx,eax
c000c0c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0cc:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c0d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d7:	83 ec 0c             	sub    esp,0xc
c000c0da:	50                   	push   eax
c000c0db:	e8 c8 c9 ff ff       	call   c0008aa8 <pbuf_clen>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	88 c1                	mov    cl,al
c000c0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e9:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c0ec:	0f b6 c1             	movzx  eax,cl
c000c0ef:	89 d6                	mov    esi,edx
c000c0f1:	29 c6                	sub    esi,eax
c000c0f3:	89 f0                	mov    eax,esi
c000c0f5:	89 c2                	mov    edx,eax
c000c0f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0fb:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c106:	e8 4d de ff ff       	call   c0009f58 <tcp_seg_free>
c000c10b:	83 c4 10             	add    esp,0x10
c000c10e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c112:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c115:	0f b7 c0             	movzx  eax,ax
c000c118:	85 c0                	test   eax,eax
c000c11a:	74 2c                	je     c000c148 <tcp_receive+0x6a0>
c000c11c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c120:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c123:	85 c0                	test   eax,eax
c000c125:	75 21                	jne    c000c148 <tcp_receive+0x6a0>
c000c127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c12b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c12e:	85 c0                	test   eax,eax
c000c130:	75 16                	jne    c000c148 <tcp_receive+0x6a0>
c000c132:	83 ec 08             	sub    esp,0x8
c000c135:	68 34 03 03 c0       	push   0xc0030334
c000c13a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c13f:	e8 84 39 01 00       	call   c001fac8 <CPrintf>
c000c144:	83 c4 10             	add    esp,0x10
c000c147:	90                   	nop
c000c148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c14c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c14f:	85 c0                	test   eax,eax
c000c151:	74 7d                	je     c000c1d0 <tcp_receive+0x728>
c000c153:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c15d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c160:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c163:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c166:	83 ec 0c             	sub    esp,0xc
c000c169:	50                   	push   eax
c000c16a:	e8 d1 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	89 c6                	mov    esi,eax
c000c174:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c178:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c17b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c17e:	0f b7 f8             	movzx  edi,ax
c000c181:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c185:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c188:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c18b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c18f:	0f b7 c0             	movzx  eax,ax
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	50                   	push   eax
c000c196:	e8 81 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	0f b7 c0             	movzx  eax,ax
c000c1a1:	83 e0 03             	and    eax,0x3
c000c1a4:	0f 95 c0             	setne  al
c000c1a7:	0f b6 c0             	movzx  eax,al
c000c1aa:	01 f8                	add    eax,edi
c000c1ac:	01 f0                	add    eax,esi
c000c1ae:	29 c3                	sub    ebx,eax
c000c1b0:	89 d8                	mov    eax,ebx
c000c1b2:	78 1c                	js     c000c1d0 <tcp_receive+0x728>
c000c1b4:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c1ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1be:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c1c1:	29 c2                	sub    edx,eax
c000c1c3:	89 d0                	mov    eax,edx
c000c1c5:	85 c0                	test   eax,eax
c000c1c7:	0f 8e 67 fe ff ff    	jle    c000c034 <tcp_receive+0x58c>
c000c1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c1d7:	85 c0                	test   eax,eax
c000c1d9:	0f 84 dd 00 00 00    	je     c000c2bc <tcp_receive+0x814>
c000c1df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e3:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c1e6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1eb:	29 c2                	sub    edx,eax
c000c1ed:	89 d0                	mov    eax,edx
c000c1ef:	0f 89 c7 00 00 00    	jns    c000c2bc <tcp_receive+0x814>
c000c1f5:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c1fa:	89 c2                	mov    edx,eax
c000c1fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c200:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c203:	89 d7                	mov    edi,edx
c000c205:	29 c7                	sub    edi,eax
c000c207:	89 f8                	mov    eax,edi
c000c209:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c20e:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c213:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c217:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c21a:	98                   	cwde   
c000c21b:	c1 f8 03             	sar    eax,0x3
c000c21e:	89 d6                	mov    esi,edx
c000c220:	29 c6                	sub    esi,eax
c000c222:	89 f0                	mov    eax,esi
c000c224:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c229:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22d:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c230:	89 c2                	mov    edx,eax
c000c232:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c237:	01 d0                	add    eax,edx
c000c239:	89 c2                	mov    edx,eax
c000c23b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23f:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c243:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c248:	85 c0                	test   eax,eax
c000c24a:	79 0c                	jns    c000c258 <tcp_receive+0x7b0>
c000c24c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c251:	f7 d8                	neg    eax
c000c253:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c258:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c25d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c261:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c265:	98                   	cwde   
c000c266:	c1 f8 02             	sar    eax,0x2
c000c269:	89 d7                	mov    edi,edx
c000c26b:	29 c7                	sub    edi,eax
c000c26d:	89 f8                	mov    eax,edi
c000c26f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c274:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c278:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c27c:	89 c2                	mov    edx,eax
c000c27e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c283:	01 d0                	add    eax,edx
c000c285:	89 c2                	mov    edx,eax
c000c287:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28b:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c28f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c293:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c296:	98                   	cwde   
c000c297:	c1 f8 03             	sar    eax,0x3
c000c29a:	89 c2                	mov    edx,eax
c000c29c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2a0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2a4:	01 d0                	add    eax,edx
c000c2a6:	89 c2                	mov    edx,eax
c000c2a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ac:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c2b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c2bb:	90                   	nop
c000c2bc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c2c2:	0f b7 c0             	movzx  eax,ax
c000c2c5:	85 c0                	test   eax,eax
c000c2c7:	0f 84 43 0e 00 00    	je     c000d110 <tcp_receive+0x1668>
c000c2cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2d4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2d9:	29 c2                	sub    edx,eax
c000c2db:	89 d0                	mov    eax,edx
c000c2dd:	83 e8 01             	sub    eax,0x1
c000c2e0:	0f 88 c6 01 00 00    	js     c000c4ac <tcp_receive+0xa04>
c000c2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c2ed:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c2f4:	0f b7 ca             	movzx  ecx,dx
c000c2f7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c2fd:	01 ca                	add    edx,ecx
c000c2ff:	29 d0                	sub    eax,edx
c000c301:	83 c0 01             	add    eax,0x1
c000c304:	85 c0                	test   eax,eax
c000c306:	0f 8f a0 01 00 00    	jg     c000c4ac <tcp_receive+0xa04>
c000c30c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c310:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c313:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c318:	29 c2                	sub    edx,eax
c000c31a:	89 d0                	mov    eax,edx
c000c31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c320:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c325:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c329:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c32e:	85 c0                	test   eax,eax
c000c330:	75 16                	jne    c000c348 <tcp_receive+0x8a0>
c000c332:	83 ec 08             	sub    esp,0x8
c000c335:	68 31 05 03 c0       	push   0xc0030531
c000c33a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c33f:	e8 84 37 01 00       	call   c001fac8 <CPrintf>
c000c344:	83 c4 10             	add    esp,0x10
c000c347:	90                   	nop
c000c348:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c350:	7e 16                	jle    c000c368 <tcp_receive+0x8c0>
c000c352:	83 ec 08             	sub    esp,0x8
c000c355:	68 41 05 03 c0       	push   0xc0030541
c000c35a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c35f:	e8 64 37 01 00       	call   c001fac8 <CPrintf>
c000c364:	83 c4 10             	add    esp,0x10
c000c367:	90                   	nop
c000c368:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c36d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c371:	0f b7 c0             	movzx  eax,ax
c000c374:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c378:	0f 8e b6 00 00 00    	jle    c000c434 <tcp_receive+0x98c>
c000c37e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c383:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c386:	0f b7 c0             	movzx  eax,ax
c000c389:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c38d:	7e 15                	jle    c000c3a4 <tcp_receive+0x8fc>
c000c38f:	83 ec 08             	sub    esp,0x8
c000c392:	68 50 05 03 c0       	push   0xc0030550
c000c397:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c39c:	e8 27 37 01 00       	call   c001fac8 <CPrintf>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c3b0:	29 d0                	sub    eax,edx
c000c3b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c3b7:	eb 33                	jmp    c000c3ec <tcp_receive+0x944>
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3c4:	0f b7 c0             	movzx  eax,ax
c000c3c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c3cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c3d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c3e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3eb:	90                   	nop
c000c3ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3f4:	0f b7 c0             	movzx  eax,ax
c000c3f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3fb:	7f bf                	jg     c000c3bc <tcp_receive+0x914>
c000c3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c401:	f7 d8                	neg    eax
c000c403:	98                   	cwde   
c000c404:	83 ec 08             	sub    esp,0x8
c000c407:	50                   	push   eax
c000c408:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c40c:	e8 1b bd ff ff       	call   c000812c <pbuf_header>
c000c411:	83 c4 10             	add    esp,0x10
c000c414:	0f b6 c0             	movzx  eax,al
c000c417:	85 c0                	test   eax,eax
c000c419:	74 51                	je     c000c46c <tcp_receive+0x9c4>
c000c41b:	83 ec 08             	sub    esp,0x8
c000c41e:	68 60 05 03 c0       	push   0xc0030560
c000c423:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c428:	e8 9b 36 01 00       	call   c001fac8 <CPrintf>
c000c42d:	83 c4 10             	add    esp,0x10
c000c430:	eb 3a                	jmp    c000c46c <tcp_receive+0x9c4>
c000c432:	66 90                	xchg   ax,ax
c000c434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c438:	f7 d8                	neg    eax
c000c43a:	0f bf d0             	movsx  edx,ax
c000c43d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c442:	83 ec 08             	sub    esp,0x8
c000c445:	52                   	push   edx
c000c446:	50                   	push   eax
c000c447:	e8 e0 bc ff ff       	call   c000812c <pbuf_header>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	0f b6 c0             	movzx  eax,al
c000c452:	85 c0                	test   eax,eax
c000c454:	74 16                	je     c000c46c <tcp_receive+0x9c4>
c000c456:	83 ec 08             	sub    esp,0x8
c000c459:	68 60 05 03 c0       	push   0xc0030560
c000c45e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c463:	e8 60 36 01 00       	call   c001fac8 <CPrintf>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	90                   	nop
c000c46c:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c472:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c477:	89 c1                	mov    ecx,eax
c000c479:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c480:	89 ce                	mov    esi,ecx
c000c482:	29 c6                	sub    esi,eax
c000c484:	89 f0                	mov    eax,esi
c000c486:	01 d0                	add    eax,edx
c000c488:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c48e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c492:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c495:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c49a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c49f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c4a8:	eb 2a                	jmp    c000c4d4 <tcp_receive+0xa2c>
c000c4aa:	66 90                	xchg   ax,ax
c000c4ac:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4b9:	29 c2                	sub    edx,eax
c000c4bb:	89 d0                	mov    eax,edx
c000c4bd:	79 15                	jns    c000c4d4 <tcp_receive+0xa2c>
c000c4bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c4c6:	83 c8 02             	or     eax,0x2
c000c4c9:	88 c2                	mov    dl,al
c000c4cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c4d2:	66 90                	xchg   ax,ax
c000c4d4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4e1:	29 c2                	sub    edx,eax
c000c4e3:	89 d0                	mov    eax,edx
c000c4e5:	0f 88 11 0c 00 00    	js     c000d0fc <tcp_receive+0x1654>
c000c4eb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c4ff:	0f b7 c0             	movzx  eax,ax
c000c502:	01 c8                	add    eax,ecx
c000c504:	29 c2                	sub    edx,eax
c000c506:	89 d0                	mov    eax,edx
c000c508:	83 c0 01             	add    eax,0x1
c000c50b:	85 c0                	test   eax,eax
c000c50d:	0f 8f e9 0b 00 00    	jg     c000d0fc <tcp_receive+0x1654>
c000c513:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c517:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c51a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c51f:	39 c2                	cmp    edx,eax
c000c521:	0f 85 25 07 00 00    	jne    c000cc4c <tcp_receive+0x11a4>
c000c527:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c52d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c532:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c536:	0f b7 c0             	movzx  eax,ax
c000c539:	83 ec 0c             	sub    esp,0xc
c000c53c:	50                   	push   eax
c000c53d:	e8 da 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c542:	83 c4 10             	add    esp,0x10
c000c545:	0f b7 c0             	movzx  eax,ax
c000c548:	83 e0 03             	and    eax,0x3
c000c54b:	0f 95 c0             	setne  al
c000c54e:	0f b6 c0             	movzx  eax,al
c000c551:	01 d8                	add    eax,ebx
c000c553:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c559:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c55d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c560:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c566:	0f b7 d2             	movzx  edx,dx
c000c569:	0f b7 c0             	movzx  eax,ax
c000c56c:	39 c2                	cmp    edx,eax
c000c56e:	0f 83 30 01 00 00    	jae    c000c6a4 <tcp_receive+0xbfc>
c000c574:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c579:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c57d:	0f b7 c0             	movzx  eax,ax
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	50                   	push   eax
c000c584:	e8 93 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	0f b7 c0             	movzx  eax,ax
c000c58f:	83 e0 01             	and    eax,0x1
c000c592:	74 48                	je     c000c5dc <tcp_receive+0xb34>
c000c594:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c599:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59d:	80 e4 c0             	and    ah,0xc0
c000c5a0:	89 c3                	mov    ebx,eax
c000c5a2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5ab:	0f b7 c0             	movzx  eax,ax
c000c5ae:	83 ec 0c             	sub    esp,0xc
c000c5b1:	50                   	push   eax
c000c5b2:	e8 65 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	0f b7 c0             	movzx  eax,ax
c000c5bd:	83 e0 3e             	and    eax,0x3e
c000c5c0:	83 ec 0c             	sub    esp,0xc
c000c5c3:	50                   	push   eax
c000c5c4:	e8 53 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	09 d8                	or     eax,ebx
c000c5ce:	89 c2                	mov    edx,eax
c000c5d0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5d5:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5e0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c5e3:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c5e9:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5f2:	0f b7 c0             	movzx  eax,ax
c000c5f5:	83 ec 0c             	sub    esp,0xc
c000c5f8:	50                   	push   eax
c000c5f9:	e8 1e 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5fe:	83 c4 10             	add    esp,0x10
c000c601:	0f b7 c0             	movzx  eax,ax
c000c604:	83 e0 02             	and    eax,0x2
c000c607:	74 0f                	je     c000c618 <tcp_receive+0xb70>
c000c609:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c60e:	83 e8 01             	sub    eax,0x1
c000c611:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c617:	90                   	nop
c000c618:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c61d:	0f b7 d0             	movzx  edx,ax
c000c620:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c625:	83 ec 08             	sub    esp,0x8
c000c628:	52                   	push   edx
c000c629:	50                   	push   eax
c000c62a:	e8 71 c2 ff ff       	call   c00088a0 <pbuf_realloc>
c000c62f:	83 c4 10             	add    esp,0x10
c000c632:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c638:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c63d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c641:	0f b7 c0             	movzx  eax,ax
c000c644:	83 ec 0c             	sub    esp,0xc
c000c647:	50                   	push   eax
c000c648:	e8 cf 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	0f b7 c0             	movzx  eax,ax
c000c653:	83 e0 03             	and    eax,0x3
c000c656:	0f 95 c0             	setne  al
c000c659:	0f b6 c0             	movzx  eax,al
c000c65c:	01 d8                	add    eax,ebx
c000c65e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c664:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c66a:	0f b7 d0             	movzx  edx,ax
c000c66d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c672:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c675:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c679:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c67c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c680:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c683:	0f b7 c0             	movzx  eax,ax
c000c686:	01 d0                	add    eax,edx
c000c688:	39 c1                	cmp    ecx,eax
c000c68a:	74 18                	je     c000c6a4 <tcp_receive+0xbfc>
c000c68c:	83 ec 08             	sub    esp,0x8
c000c68f:	68 54 03 03 c0       	push   0xc0030354
c000c694:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c699:	e8 2a 34 01 00       	call   c001fac8 <CPrintf>
c000c69e:	83 c4 10             	add    esp,0x10
c000c6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c6a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6a8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6ae:	85 c0                	test   eax,eax
c000c6b0:	0f 84 7e 02 00 00    	je     c000c934 <tcp_receive+0xe8c>
c000c6b6:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6bb:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6bf:	0f b7 c0             	movzx  eax,ax
c000c6c2:	83 ec 0c             	sub    esp,0xc
c000c6c5:	50                   	push   eax
c000c6c6:	e8 51 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	0f b7 c0             	movzx  eax,ax
c000c6d1:	83 e0 01             	and    eax,0x1
c000c6d4:	74 4a                	je     c000c720 <tcp_receive+0xc78>
c000c6d6:	eb 34                	jmp    c000c70c <tcp_receive+0xc64>
c000c6d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6dc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6ea:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f6:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c703:	e8 50 d8 ff ff       	call   c0009f58 <tcp_seg_free>
c000c708:	83 c4 10             	add    esp,0x10
c000c70b:	90                   	nop
c000c70c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c710:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c716:	85 c0                	test   eax,eax
c000c718:	75 be                	jne    c000c6d8 <tcp_receive+0xc30>
c000c71a:	e9 15 02 00 00       	jmp    c000c934 <tcp_receive+0xe8c>
c000c71f:	90                   	nop
c000c720:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c724:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c72a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c72e:	e9 bd 00 00 00       	jmp    c000c7f0 <tcp_receive+0xd48>
c000c733:	90                   	nop
c000c734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c738:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c73b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c73f:	0f b7 c0             	movzx  eax,ax
c000c742:	83 ec 0c             	sub    esp,0xc
c000c745:	50                   	push   eax
c000c746:	e8 d1 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c74b:	83 c4 10             	add    esp,0x10
c000c74e:	0f b7 c0             	movzx  eax,ax
c000c751:	83 e0 01             	and    eax,0x1
c000c754:	74 76                	je     c000c7cc <tcp_receive+0xd24>
c000c756:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c75b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c75f:	0f b7 c0             	movzx  eax,ax
c000c762:	83 ec 0c             	sub    esp,0xc
c000c765:	50                   	push   eax
c000c766:	e8 b1 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c76b:	83 c4 10             	add    esp,0x10
c000c76e:	0f b7 c0             	movzx  eax,ax
c000c771:	83 e0 02             	and    eax,0x2
c000c774:	75 56                	jne    c000c7cc <tcp_receive+0xd24>
c000c776:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c77b:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c77f:	83 ec 0c             	sub    esp,0xc
c000c782:	6a 01                	push   0x1
c000c784:	e8 93 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	89 c2                	mov    edx,eax
c000c78e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c793:	09 da                	or     edx,ebx
c000c795:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c799:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c79f:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7a4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7a8:	0f b7 c0             	movzx  eax,ax
c000c7ab:	83 ec 0c             	sub    esp,0xc
c000c7ae:	50                   	push   eax
c000c7af:	e8 68 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	0f b7 c0             	movzx  eax,ax
c000c7ba:	83 e0 03             	and    eax,0x3
c000c7bd:	0f 95 c0             	setne  al
c000c7c0:	0f b6 c0             	movzx  eax,al
c000c7c3:	01 d8                	add    eax,ebx
c000c7c5:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c7cb:	90                   	nop
c000c7cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7de:	83 ec 0c             	sub    esp,0xc
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	e8 6e d7 ff ff       	call   c0009f58 <tcp_seg_free>
c000c7ea:	83 c4 10             	add    esp,0x10
c000c7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7f5:	74 31                	je     c000c828 <tcp_receive+0xd80>
c000c7f7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7fd:	0f b7 d0             	movzx  edx,ax
c000c800:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c805:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c80c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c80f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c816:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c819:	0f b7 c0             	movzx  eax,ax
c000c81c:	01 d0                	add    eax,edx
c000c81e:	29 c1                	sub    ecx,eax
c000c820:	89 c8                	mov    eax,ecx
c000c822:	0f 89 0c ff ff ff    	jns    c000c734 <tcp_receive+0xc8c>
c000c828:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c82d:	0f 84 f1 00 00 00    	je     c000c924 <tcp_receive+0xe7c>
c000c833:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c839:	0f b7 d0             	movzx  edx,ax
c000c83c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c841:	01 c2                	add    edx,eax
c000c843:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c847:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c84d:	29 c2                	sub    edx,eax
c000c84f:	89 d0                	mov    eax,edx
c000c851:	85 c0                	test   eax,eax
c000c853:	0f 8e cb 00 00 00    	jle    c000c924 <tcp_receive+0xe7c>
c000c859:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c85d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c863:	89 c2                	mov    edx,eax
c000c865:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c86a:	89 d7                	mov    edi,edx
c000c86c:	29 c7                	sub    edi,eax
c000c86e:	89 f8                	mov    eax,edi
c000c870:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c876:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c87b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	83 ec 0c             	sub    esp,0xc
c000c885:	50                   	push   eax
c000c886:	e8 91 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c88b:	83 c4 10             	add    esp,0x10
c000c88e:	0f b7 c0             	movzx  eax,ax
c000c891:	83 e0 02             	and    eax,0x2
c000c894:	74 0e                	je     c000c8a4 <tcp_receive+0xdfc>
c000c896:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c89b:	83 e8 01             	sub    eax,0x1
c000c89e:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c8a4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8a9:	0f b7 d0             	movzx  edx,ax
c000c8ac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c8b1:	83 ec 08             	sub    esp,0x8
c000c8b4:	52                   	push   edx
c000c8b5:	50                   	push   eax
c000c8b6:	e8 e5 bf ff ff       	call   c00088a0 <pbuf_realloc>
c000c8bb:	83 c4 10             	add    esp,0x10
c000c8be:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c8c4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8c9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8cd:	0f b7 c0             	movzx  eax,ax
c000c8d0:	83 ec 0c             	sub    esp,0xc
c000c8d3:	50                   	push   eax
c000c8d4:	e8 43 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c8d9:	83 c4 10             	add    esp,0x10
c000c8dc:	0f b7 c0             	movzx  eax,ax
c000c8df:	83 e0 03             	and    eax,0x3
c000c8e2:	0f 95 c0             	setne  al
c000c8e5:	0f b6 c0             	movzx  eax,al
c000c8e8:	01 d8                	add    eax,ebx
c000c8ea:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8f0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8f6:	0f b7 d0             	movzx  edx,ax
c000c8f9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8fe:	01 c2                	add    edx,eax
c000c900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c907:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c90a:	39 c2                	cmp    edx,eax
c000c90c:	74 16                	je     c000c924 <tcp_receive+0xe7c>
c000c90e:	83 ec 08             	sub    esp,0x8
c000c911:	68 8c 03 03 c0       	push   0xc003038c
c000c916:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c91b:	e8 a8 31 01 00       	call   c001fac8 <CPrintf>
c000c920:	83 c4 10             	add    esp,0x10
c000c923:	90                   	nop
c000c924:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c928:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c92c:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c932:	66 90                	xchg   ax,ax
c000c934:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c93a:	0f b7 d0             	movzx  edx,ax
c000c93d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c942:	01 c2                	add    edx,eax
c000c944:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c948:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c94b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c94f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c952:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c958:	0f b7 d2             	movzx  edx,dx
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	39 c2                	cmp    edx,eax
c000c960:	73 16                	jae    c000c978 <tcp_receive+0xed0>
c000c962:	83 ec 08             	sub    esp,0x8
c000c965:	68 c8 03 03 c0       	push   0xc00303c8
c000c96a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000c96f:	e8 54 31 01 00       	call   c001fac8 <CPrintf>
c000c974:	83 c4 10             	add    esp,0x10
c000c977:	90                   	nop
c000c978:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c97c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c97f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c985:	89 d6                	mov    esi,edx
c000c987:	29 c6                	sub    esi,eax
c000c989:	89 f0                	mov    eax,esi
c000c98b:	89 c2                	mov    edx,eax
c000c98d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c991:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000c995:	83 ec 0c             	sub    esp,0xc
c000c998:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c99c:	e8 5b d2 ff ff       	call   c0009bfc <tcp_update_rcv_ann_wnd>
c000c9a1:	83 c4 10             	add    esp,0x10
c000c9a4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c9a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9ac:	0f b7 c0             	movzx  eax,ax
c000c9af:	85 c0                	test   eax,eax
c000c9b1:	74 15                	je     c000c9c8 <tcp_receive+0xf20>
c000c9b3:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c9b8:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c9bd:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c9c7:	90                   	nop
c000c9c8:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9cd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9d1:	0f b7 c0             	movzx  eax,ax
c000c9d4:	83 ec 0c             	sub    esp,0xc
c000c9d7:	50                   	push   eax
c000c9d8:	e8 3f 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	0f b7 c0             	movzx  eax,ax
c000c9e3:	83 e0 01             	and    eax,0x1
c000c9e6:	0f 84 dc 01 00 00    	je     c000cbc8 <tcp_receive+0x1120>
c000c9ec:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c9f1:	83 c8 20             	or     eax,0x20
c000c9f4:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000c9f9:	e9 ca 01 00 00       	jmp    c000cbc8 <tcp_receive+0x1120>
c000c9fe:	66 90                	xchg   ax,ax
c000ca00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca04:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca12:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca1e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000ca23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca2a:	0f b7 d8             	movzx  ebx,ax
c000ca2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca34:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca38:	0f b7 c0             	movzx  eax,ax
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 d8 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	0f b7 c0             	movzx  eax,ax
c000ca4a:	83 e0 03             	and    eax,0x3
c000ca4d:	0f 95 c0             	setne  al
c000ca50:	0f b6 c0             	movzx  eax,al
c000ca53:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca5a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca5d:	01 c2                	add    edx,eax
c000ca5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca63:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca6a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca6d:	0f b7 d8             	movzx  ebx,ax
c000ca70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca77:	0f b7 f0             	movzx  esi,ax
c000ca7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca7e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca81:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca85:	0f b7 c0             	movzx  eax,ax
c000ca88:	83 ec 0c             	sub    esp,0xc
c000ca8b:	50                   	push   eax
c000ca8c:	e8 8b 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca91:	83 c4 10             	add    esp,0x10
c000ca94:	0f b7 c0             	movzx  eax,ax
c000ca97:	83 e0 03             	and    eax,0x3
c000ca9a:	0f 95 c0             	setne  al
c000ca9d:	0f b6 c0             	movzx  eax,al
c000caa0:	01 f0                	add    eax,esi
c000caa2:	39 c3                	cmp    ebx,eax
c000caa4:	7d 16                	jge    c000cabc <tcp_receive+0x1014>
c000caa6:	83 ec 08             	sub    esp,0x8
c000caa9:	68 e8 03 03 c0       	push   0xc00303e8
c000caae:	68 c6 f9 02 c0       	push   0xc002f9c6
c000cab3:	e8 10 30 01 00       	call   c001fac8 <CPrintf>
c000cab8:	83 c4 10             	add    esp,0x10
c000cabb:	90                   	nop
c000cabc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cac0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cac3:	0f b7 d8             	movzx  ebx,ax
c000cac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cacd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cad1:	0f b7 c0             	movzx  eax,ax
c000cad4:	83 ec 0c             	sub    esp,0xc
c000cad7:	50                   	push   eax
c000cad8:	e8 3f 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	0f b7 c0             	movzx  eax,ax
c000cae3:	83 e0 03             	and    eax,0x3
c000cae6:	0f 95 c0             	setne  al
c000cae9:	0f b6 c0             	movzx  eax,al
c000caec:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caf3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000caf6:	29 d0                	sub    eax,edx
c000caf8:	89 c2                	mov    edx,eax
c000cafa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cafe:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cb02:	83 ec 0c             	sub    esp,0xc
c000cb05:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb09:	e8 ee d0 ff ff       	call   c0009bfc <tcp_update_rcv_ann_wnd>
c000cb0e:	83 c4 10             	add    esp,0x10
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb1b:	0f b7 c0             	movzx  eax,ax
c000cb1e:	85 c0                	test   eax,eax
c000cb20:	74 3e                	je     c000cb60 <tcp_receive+0x10b8>
c000cb22:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb27:	85 c0                	test   eax,eax
c000cb29:	74 1d                	je     c000cb48 <tcp_receive+0x10a0>
c000cb2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb2f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb32:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb37:	83 ec 08             	sub    esp,0x8
c000cb3a:	52                   	push   edx
c000cb3b:	50                   	push   eax
c000cb3c:	e8 cf bf ff ff       	call   c0008b10 <pbuf_cat>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	eb 0e                	jmp    c000cb54 <tcp_receive+0x10ac>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb4f:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cb54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb5f:	90                   	nop
c000cb60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb67:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb6b:	0f b7 c0             	movzx  eax,ax
c000cb6e:	83 ec 0c             	sub    esp,0xc
c000cb71:	50                   	push   eax
c000cb72:	e8 a5 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb77:	83 c4 10             	add    esp,0x10
c000cb7a:	0f b7 c0             	movzx  eax,ax
c000cb7d:	83 e0 01             	and    eax,0x1
c000cb80:	74 26                	je     c000cba8 <tcp_receive+0x1100>
c000cb82:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cb87:	83 c8 20             	or     eax,0x20
c000cb8a:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cb8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cb96:	83 f8 04             	cmp    eax,0x4
c000cb99:	75 0d                	jne    c000cba8 <tcp_receive+0x1100>
c000cb9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb9f:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cba6:	66 90                	xchg   ax,ax
c000cba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbac:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbb2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cbb8:	83 ec 0c             	sub    esp,0xc
c000cbbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbbf:	e8 94 d3 ff ff       	call   c0009f58 <tcp_seg_free>
c000cbc4:	83 c4 10             	add    esp,0x10
c000cbc7:	90                   	nop
c000cbc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbcc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbd2:	85 c0                	test   eax,eax
c000cbd4:	74 22                	je     c000cbf8 <tcp_receive+0x1150>
c000cbd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbda:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbe0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cbe3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cbe6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cbed:	39 c2                	cmp    edx,eax
c000cbef:	0f 84 0b fe ff ff    	je     c000ca00 <tcp_receive+0xf58>
c000cbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbfc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbff:	0f b6 c0             	movzx  eax,al
c000cc02:	83 e0 01             	and    eax,0x1
c000cc05:	74 2d                	je     c000cc34 <tcp_receive+0x118c>
c000cc07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc0e:	83 e0 fe             	and    eax,0xfffffffe
c000cc11:	88 c2                	mov    dl,al
c000cc13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc17:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc1e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc21:	83 c8 02             	or     eax,0x2
c000cc24:	88 c2                	mov    dl,al
c000cc26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc2a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc2d:	e9 2e 05 00 00       	jmp    c000d160 <tcp_receive+0x16b8>
c000cc32:	66 90                	xchg   ax,ax
c000cc34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc38:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc3b:	83 c8 01             	or     eax,0x1
c000cc3e:	88 c2                	mov    dl,al
c000cc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc44:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc47:	e9 14 05 00 00       	jmp    c000d160 <tcp_receive+0x16b8>
c000cc4c:	83 ec 0c             	sub    esp,0xc
c000cc4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc53:	e8 00 2f 00 00       	call   c000fb58 <tcp_send_empty_ack>
c000cc58:	83 c4 10             	add    esp,0x10
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc65:	85 c0                	test   eax,eax
c000cc67:	75 23                	jne    c000cc8c <tcp_receive+0x11e4>
c000cc69:	83 ec 0c             	sub    esp,0xc
c000cc6c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc71:	e8 7a d3 ff ff       	call   c0009ff0 <tcp_seg_copy>
c000cc76:	83 c4 10             	add    esp,0x10
c000cc79:	89 c2                	mov    edx,eax
c000cc7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc7f:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc85:	e9 d6 04 00 00       	jmp    c000d160 <tcp_receive+0x16b8>
c000cc8a:	66 90                	xchg   ax,ax
c000cc8c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cc94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc98:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cca2:	e9 2d 04 00 00       	jmp    c000d0d4 <tcp_receive+0x162c>
c000cca7:	90                   	nop
c000cca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccaf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ccb2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ccb7:	39 c2                	cmp    edx,eax
c000ccb9:	75 75                	jne    c000cd30 <tcp_receive+0x1288>
c000ccbb:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000ccc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccc8:	0f b7 d2             	movzx  edx,dx
c000cccb:	0f b7 c0             	movzx  eax,ax
c000ccce:	39 c2                	cmp    edx,eax
c000ccd0:	0f 86 0e 04 00 00    	jbe    c000d0e4 <tcp_receive+0x163c>
c000ccd6:	83 ec 0c             	sub    esp,0xc
c000ccd9:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccde:	e8 0d d3 ff ff       	call   c0009ff0 <tcp_seg_copy>
c000cce3:	83 c4 10             	add    esp,0x10
c000cce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ccef:	0f 84 f3 03 00 00    	je     c000d0e8 <tcp_receive+0x1640>
c000ccf5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ccfa:	74 0c                	je     c000cd08 <tcp_receive+0x1260>
c000ccfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd04:	89 10                	mov    DWORD PTR [eax],edx
c000cd06:	eb 10                	jmp    c000cd18 <tcp_receive+0x1270>
c000cd08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd10:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd16:	66 90                	xchg   ax,ax
c000cd18:	83 ec 08             	sub    esp,0x8
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd23:	e8 10 ec ff ff       	call   c000b938 <tcp_oos_insert_segment>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	e9 b8 03 00 00       	jmp    c000d0e8 <tcp_receive+0x1640>
c000cd30:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd35:	75 61                	jne    c000cd98 <tcp_receive+0x12f0>
c000cd37:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	29 c2                	sub    edx,eax
c000cd49:	89 d0                	mov    eax,edx
c000cd4b:	0f 89 2b 01 00 00    	jns    c000ce7c <tcp_receive+0x13d4>
c000cd51:	83 ec 0c             	sub    esp,0xc
c000cd54:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd59:	e8 92 d2 ff ff       	call   c0009ff0 <tcp_seg_copy>
c000cd5e:	83 c4 10             	add    esp,0x10
c000cd61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd65:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd6a:	0f 84 7c 03 00 00    	je     c000d0ec <tcp_receive+0x1644>
c000cd70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd78:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd7e:	83 ec 08             	sub    esp,0x8
c000cd81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd89:	e8 aa eb ff ff       	call   c000b938 <tcp_oos_insert_segment>
c000cd8e:	83 c4 10             	add    esp,0x10
c000cd91:	e9 56 03 00 00       	jmp    c000d0ec <tcp_receive+0x1644>
c000cd96:	66 90                	xchg   ax,ax
c000cd98:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cda2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cda5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cda8:	29 c2                	sub    edx,eax
c000cdaa:	89 d0                	mov    eax,edx
c000cdac:	83 e8 01             	sub    eax,0x1
c000cdaf:	0f 88 c7 00 00 00    	js     c000ce7c <tcp_receive+0x13d4>
c000cdb5:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdbf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdc5:	29 c2                	sub    edx,eax
c000cdc7:	89 d0                	mov    eax,edx
c000cdc9:	83 c0 01             	add    eax,0x1
c000cdcc:	85 c0                	test   eax,eax
c000cdce:	0f 8f a8 00 00 00    	jg     c000ce7c <tcp_receive+0x13d4>
c000cdd4:	83 ec 0c             	sub    esp,0xc
c000cdd7:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cddc:	e8 0f d2 ff ff       	call   c0009ff0 <tcp_seg_copy>
c000cde1:	83 c4 10             	add    esp,0x10
c000cde4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cde8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cded:	0f 84 fd 02 00 00    	je     c000d0f0 <tcp_receive+0x1648>
c000cdf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdfa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce04:	0f b7 c0             	movzx  eax,ax
c000ce07:	01 c2                	add    edx,eax
c000ce09:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce0e:	29 c2                	sub    edx,eax
c000ce10:	89 d0                	mov    eax,edx
c000ce12:	85 c0                	test   eax,eax
c000ce14:	7e 42                	jle    c000ce58 <tcp_receive+0x13b0>
c000ce16:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce1b:	89 c2                	mov    edx,eax
c000ce1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce27:	89 d7                	mov    edi,edx
c000ce29:	29 c7                	sub    edi,eax
c000ce2b:	89 f8                	mov    eax,edi
c000ce2d:	89 c2                	mov    edx,eax
c000ce2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce33:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ce37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce3e:	0f b7 d0             	movzx  edx,ax
c000ce41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce48:	83 ec 08             	sub    esp,0x8
c000ce4b:	52                   	push   edx
c000ce4c:	50                   	push   eax
c000ce4d:	e8 4e ba ff ff       	call   c00088a0 <pbuf_realloc>
c000ce52:	83 c4 10             	add    esp,0x10
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce60:	89 10                	mov    DWORD PTR [eax],edx
c000ce62:	83 ec 08             	sub    esp,0x8
c000ce65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6d:	e8 c6 ea ff ff       	call   c000b938 <tcp_oos_insert_segment>
c000ce72:	83 c4 10             	add    esp,0x10
c000ce75:	e9 76 02 00 00       	jmp    c000d0f0 <tcp_receive+0x1648>
c000ce7a:	66 90                	xchg   ax,ax
c000ce7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce82:	85 c0                	test   eax,eax
c000ce84:	0f 85 36 02 00 00    	jne    c000d0c0 <tcp_receive+0x1618>
c000ce8a:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce9a:	29 c2                	sub    edx,eax
c000ce9c:	89 d0                	mov    eax,edx
c000ce9e:	85 c0                	test   eax,eax
c000cea0:	0f 8e 1a 02 00 00    	jle    c000d0c0 <tcp_receive+0x1618>
c000cea6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cead:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ceb1:	0f b7 c0             	movzx  eax,ax
c000ceb4:	83 ec 0c             	sub    esp,0xc
c000ceb7:	50                   	push   eax
c000ceb8:	e8 5f 3d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	0f b7 c0             	movzx  eax,ax
c000cec3:	83 e0 01             	and    eax,0x1
c000cec6:	0f 85 28 02 00 00    	jne    c000d0f4 <tcp_receive+0x164c>
c000cecc:	83 ec 0c             	sub    esp,0xc
c000cecf:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ced4:	e8 17 d1 ff ff       	call   c0009ff0 <tcp_seg_copy>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	89 c2                	mov    edx,eax
c000cede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee2:	89 10                	mov    DWORD PTR [eax],edx
c000cee4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceea:	85 c0                	test   eax,eax
c000ceec:	0f 84 06 02 00 00    	je     c000d0f8 <tcp_receive+0x1650>
c000cef2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cefc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf03:	0f b7 c0             	movzx  eax,ax
c000cf06:	01 c2                	add    edx,eax
c000cf08:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf0d:	29 c2                	sub    edx,eax
c000cf0f:	89 d0                	mov    eax,edx
c000cf11:	85 c0                	test   eax,eax
c000cf13:	7e 3f                	jle    c000cf54 <tcp_receive+0x14ac>
c000cf15:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf1a:	89 c2                	mov    edx,eax
c000cf1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf26:	89 d6                	mov    esi,edx
c000cf28:	29 c6                	sub    esi,eax
c000cf2a:	89 f0                	mov    eax,esi
c000cf2c:	89 c2                	mov    edx,eax
c000cf2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf32:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cf36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf3d:	0f b7 d0             	movzx  edx,ax
c000cf40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf47:	83 ec 08             	sub    esp,0x8
c000cf4a:	52                   	push   edx
c000cf4b:	50                   	push   eax
c000cf4c:	e8 4f b9 ff ff       	call   c00088a0 <pbuf_realloc>
c000cf51:	83 c4 10             	add    esp,0x10
c000cf54:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cf5a:	0f b7 d0             	movzx  edx,ax
c000cf5d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf62:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cf65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf69:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cf6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf70:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf73:	0f b7 c0             	movzx  eax,ax
c000cf76:	01 d0                	add    eax,edx
c000cf78:	39 c1                	cmp    ecx,eax
c000cf7a:	0f 86 78 01 00 00    	jbe    c000d0f8 <tcp_receive+0x1650>
c000cf80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf84:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf8d:	0f b7 c0             	movzx  eax,ax
c000cf90:	83 ec 0c             	sub    esp,0xc
c000cf93:	50                   	push   eax
c000cf94:	e8 83 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	0f b7 c0             	movzx  eax,ax
c000cf9f:	83 e0 01             	and    eax,0x1
c000cfa2:	74 54                	je     c000cff8 <tcp_receive+0x1550>
c000cfa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfb1:	80 e4 c0             	and    ah,0xc0
c000cfb4:	89 c3                	mov    ebx,eax
c000cfb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfba:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfbc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfbf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfc3:	0f b7 c0             	movzx  eax,ax
c000cfc6:	83 ec 0c             	sub    esp,0xc
c000cfc9:	50                   	push   eax
c000cfca:	e8 4d 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	0f b7 c0             	movzx  eax,ax
c000cfd5:	83 e0 3e             	and    eax,0x3e
c000cfd8:	83 ec 0c             	sub    esp,0xc
c000cfdb:	50                   	push   eax
c000cfdc:	e8 3b 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	09 d8                	or     eax,ebx
c000cfe6:	89 c2                	mov    edx,eax
c000cfe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfec:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff1:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000cff5:	8d 76 00             	lea    esi,[esi+0x0]
c000cff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cffc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cfff:	89 c2                	mov    edx,eax
c000d001:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d005:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d008:	01 d0                	add    eax,edx
c000d00a:	89 c1                	mov    ecx,eax
c000d00c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d011:	89 c2                	mov    edx,eax
c000d013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d017:	8b 00                	mov    eax,DWORD PTR [eax]
c000d019:	89 cf                	mov    edi,ecx
c000d01b:	29 d7                	sub    edi,edx
c000d01d:	89 fa                	mov    edx,edi
c000d01f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d023:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d027:	8b 00                	mov    eax,DWORD PTR [eax]
c000d029:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d02c:	0f b7 d0             	movzx  edx,ax
c000d02f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d033:	8b 00                	mov    eax,DWORD PTR [eax]
c000d035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d038:	83 ec 08             	sub    esp,0x8
c000d03b:	52                   	push   edx
c000d03c:	50                   	push   eax
c000d03d:	e8 5e b8 ff ff       	call   c00088a0 <pbuf_realloc>
c000d042:	83 c4 10             	add    esp,0x10
c000d045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d049:	8b 00                	mov    eax,DWORD PTR [eax]
c000d04b:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d04e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d052:	8b 00                	mov    eax,DWORD PTR [eax]
c000d054:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d057:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d05b:	0f b7 c0             	movzx  eax,ax
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	50                   	push   eax
c000d062:	e8 b5 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	0f b7 c0             	movzx  eax,ax
c000d06d:	83 e0 03             	and    eax,0x3
c000d070:	0f 95 c0             	setne  al
c000d073:	0f b6 c0             	movzx  eax,al
c000d076:	01 d8                	add    eax,ebx
c000d078:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d07e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d084:	0f b7 d0             	movzx  edx,ax
c000d087:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d08c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d08f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d093:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d096:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d09a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d09d:	0f b7 c0             	movzx  eax,ax
c000d0a0:	01 d0                	add    eax,edx
c000d0a2:	39 c1                	cmp    ecx,eax
c000d0a4:	74 52                	je     c000d0f8 <tcp_receive+0x1650>
c000d0a6:	83 ec 08             	sub    esp,0x8
c000d0a9:	68 54 03 03 c0       	push   0xc0030354
c000d0ae:	68 c6 f9 02 c0       	push   0xc002f9c6
c000d0b3:	e8 10 2a 01 00       	call   c001fac8 <CPrintf>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	eb 3b                	jmp    c000d0f8 <tcp_receive+0x1650>
c000d0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d0c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0d2:	66 90                	xchg   ax,ax
c000d0d4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d0d9:	0f 85 c9 fb ff ff    	jne    c000cca8 <tcp_receive+0x1200>
c000d0df:	eb 7f                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0e4:	90                   	nop
c000d0e5:	eb 79                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0e7:	90                   	nop
c000d0e8:	90                   	nop
c000d0e9:	eb 75                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0eb:	90                   	nop
c000d0ec:	90                   	nop
c000d0ed:	eb 71                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0ef:	90                   	nop
c000d0f0:	90                   	nop
c000d0f1:	eb 6d                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0f3:	90                   	nop
c000d0f4:	90                   	nop
c000d0f5:	eb 69                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0f7:	90                   	nop
c000d0f8:	90                   	nop
c000d0f9:	eb 65                	jmp    c000d160 <tcp_receive+0x16b8>
c000d0fb:	90                   	nop
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d103:	e8 50 2a 00 00       	call   c000fb58 <tcp_send_empty_ack>
c000d108:	83 c4 10             	add    esp,0x10
c000d10b:	eb 53                	jmp    c000d160 <tcp_receive+0x16b8>
c000d10d:	8d 76 00             	lea    esi,[esi+0x0]
c000d110:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d11a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d11d:	29 c2                	sub    edx,eax
c000d11f:	89 d0                	mov    eax,edx
c000d121:	78 25                	js     c000d148 <tcp_receive+0x16a0>
c000d123:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d129:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d12d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d130:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d134:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d137:	0f b7 c0             	movzx  eax,ax
c000d13a:	01 c8                	add    eax,ecx
c000d13c:	29 c2                	sub    edx,eax
c000d13e:	89 d0                	mov    eax,edx
c000d140:	83 c0 01             	add    eax,0x1
c000d143:	85 c0                	test   eax,eax
c000d145:	7e 19                	jle    c000d160 <tcp_receive+0x16b8>
c000d147:	90                   	nop
c000d148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d14c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d14f:	83 c8 02             	or     eax,0x2
c000d152:	88 c2                	mov    dl,al
c000d154:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d158:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d15b:	eb 03                	jmp    c000d160 <tcp_receive+0x16b8>
c000d15d:	8d 76 00             	lea    esi,[esi+0x0]
c000d160:	90                   	nop
c000d161:	83 c4 30             	add    esp,0x30
c000d164:	5b                   	pop    ebx
c000d165:	5e                   	pop    esi
c000d166:	5f                   	pop    edi
c000d167:	c3                   	ret    

c000d168 <tcp_parseopt>:
c000d168:	83 ec 1c             	sub    esp,0x1c
c000d16b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d170:	83 c0 14             	add    eax,0x14
c000d173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d177:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d17c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d180:	0f b7 c0             	movzx  eax,ax
c000d183:	83 ec 0c             	sub    esp,0xc
c000d186:	50                   	push   eax
c000d187:	e8 90 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	0f b7 c0             	movzx  eax,ax
c000d192:	c1 e8 0c             	shr    eax,0xc
c000d195:	0f b7 c0             	movzx  eax,ax
c000d198:	83 f8 05             	cmp    eax,0x5
c000d19b:	0f 86 6f 01 00 00    	jbe    c000d310 <tcp_parseopt+0x1a8>
c000d1a1:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1a6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1aa:	0f b7 c0             	movzx  eax,ax
c000d1ad:	83 ec 0c             	sub    esp,0xc
c000d1b0:	50                   	push   eax
c000d1b1:	e8 66 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d1b6:	83 c4 10             	add    esp,0x10
c000d1b9:	0f b7 c0             	movzx  eax,ax
c000d1bc:	c1 e8 0c             	shr    eax,0xc
c000d1bf:	83 e8 05             	sub    eax,0x5
c000d1c2:	c1 e0 02             	shl    eax,0x2
c000d1c5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d1ca:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d1d1:	e9 1e 01 00 00       	jmp    c000d2f4 <tcp_parseopt+0x18c>
c000d1d6:	66 90                	xchg   ax,ax
c000d1d8:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d1dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1e1:	01 d0                	add    eax,edx
c000d1e3:	8a 00                	mov    al,BYTE PTR [eax]
c000d1e5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d1e9:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d1ee:	83 f8 01             	cmp    eax,0x1
c000d1f1:	74 15                	je     c000d208 <tcp_parseopt+0xa0>
c000d1f3:	83 f8 02             	cmp    eax,0x2
c000d1f6:	74 24                	je     c000d21c <tcp_parseopt+0xb4>
c000d1f8:	85 c0                	test   eax,eax
c000d1fa:	0f 85 bc 00 00 00    	jne    c000d2bc <tcp_parseopt+0x154>
c000d200:	e9 0b 01 00 00       	jmp    c000d310 <tcp_parseopt+0x1a8>
c000d205:	8d 76 00             	lea    esi,[esi+0x0]
c000d208:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d20d:	83 c0 01             	add    eax,0x1
c000d210:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d215:	e9 da 00 00 00       	jmp    c000d2f4 <tcp_parseopt+0x18c>
c000d21a:	66 90                	xchg   ax,ax
c000d21c:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d221:	8d 50 01             	lea    edx,[eax+0x1]
c000d224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d228:	01 d0                	add    eax,edx
c000d22a:	8a 00                	mov    al,BYTE PTR [eax]
c000d22c:	0f b6 c0             	movzx  eax,al
c000d22f:	83 f8 04             	cmp    eax,0x4
c000d232:	0f 85 d0 00 00 00    	jne    c000d308 <tcp_parseopt+0x1a0>
c000d238:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d23d:	8d 50 03             	lea    edx,[eax+0x3]
c000d240:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d245:	39 c2                	cmp    edx,eax
c000d247:	0f 8d bb 00 00 00    	jge    c000d308 <tcp_parseopt+0x1a0>
c000d24d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d252:	8d 50 02             	lea    edx,[eax+0x2]
c000d255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d259:	01 d0                	add    eax,edx
c000d25b:	8a 00                	mov    al,BYTE PTR [eax]
c000d25d:	0f b6 c0             	movzx  eax,al
c000d260:	c1 e0 08             	shl    eax,0x8
c000d263:	89 c2                	mov    edx,eax
c000d265:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d26a:	8d 48 03             	lea    ecx,[eax+0x3]
c000d26d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d271:	01 c8                	add    eax,ecx
c000d273:	8a 00                	mov    al,BYTE PTR [eax]
c000d275:	0f b6 c0             	movzx  eax,al
c000d278:	09 d0                	or     eax,edx
c000d27a:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d27f:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d284:	3d 18 02 00 00       	cmp    eax,0x218
c000d289:	77 11                	ja     c000d29c <tcp_parseopt+0x134>
c000d28b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d290:	85 c0                	test   eax,eax
c000d292:	74 08                	je     c000d29c <tcp_parseopt+0x134>
c000d294:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d299:	eb 09                	jmp    c000d2a4 <tcp_parseopt+0x13c>
c000d29b:	90                   	nop
c000d29c:	b8 18 02 00 00       	mov    eax,0x218
c000d2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d2a8:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d2ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d2b1:	83 c0 04             	add    eax,0x4
c000d2b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2b9:	eb 39                	jmp    c000d2f4 <tcp_parseopt+0x18c>
c000d2bb:	90                   	nop
c000d2bc:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2c1:	8d 50 01             	lea    edx,[eax+0x1]
c000d2c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2c8:	01 d0                	add    eax,edx
c000d2ca:	8a 00                	mov    al,BYTE PTR [eax]
c000d2cc:	0f b6 c0             	movzx  eax,al
c000d2cf:	85 c0                	test   eax,eax
c000d2d1:	74 39                	je     c000d30c <tcp_parseopt+0x1a4>
c000d2d3:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2d8:	8d 50 01             	lea    edx,[eax+0x1]
c000d2db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2df:	01 d0                	add    eax,edx
c000d2e1:	8a 00                	mov    al,BYTE PTR [eax]
c000d2e3:	0f b6 c0             	movzx  eax,al
c000d2e6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d2eb:	01 d0                	add    eax,edx
c000d2ed:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2f2:	66 90                	xchg   ax,ax
c000d2f4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d2f9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d2fe:	39 c2                	cmp    edx,eax
c000d300:	0f 82 d2 fe ff ff    	jb     c000d1d8 <tcp_parseopt+0x70>
c000d306:	eb 08                	jmp    c000d310 <tcp_parseopt+0x1a8>
c000d308:	90                   	nop
c000d309:	eb 05                	jmp    c000d310 <tcp_parseopt+0x1a8>
c000d30b:	90                   	nop
c000d30c:	90                   	nop
c000d30d:	8d 76 00             	lea    esi,[esi+0x0]
c000d310:	83 c4 1c             	add    esp,0x1c
c000d313:	c3                   	ret    

c000d314 <tcp_listen_input>:
c000d314:	53                   	push   ebx
c000d315:	83 ec 18             	sub    esp,0x18
c000d318:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d31d:	0f b6 c0             	movzx  eax,al
c000d320:	83 e0 10             	and    eax,0x10
c000d323:	74 53                	je     c000d378 <tcp_listen_input+0x64>
c000d325:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d32a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d32d:	0f b7 d0             	movzx  edx,ax
c000d330:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d335:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d339:	0f b7 c0             	movzx  eax,ax
c000d33c:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d343:	0f b7 d9             	movzx  ebx,cx
c000d346:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d34c:	01 cb                	add    ebx,ecx
c000d34e:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d354:	83 c1 01             	add    ecx,0x1
c000d357:	83 ec 08             	sub    esp,0x8
c000d35a:	52                   	push   edx
c000d35b:	50                   	push   eax
c000d35c:	68 90 68 03 c0       	push   0xc0036890
c000d361:	68 98 68 03 c0       	push   0xc0036898
c000d366:	53                   	push   ebx
c000d367:	51                   	push   ecx
c000d368:	e8 8b 2f 00 00       	call   c00102f8 <tcp_rst>
c000d36d:	83 c4 20             	add    esp,0x20
c000d370:	e9 a7 01 00 00       	jmp    c000d51c <tcp_listen_input+0x208>
c000d375:	8d 76 00             	lea    esi,[esi+0x0]
c000d378:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d37d:	0f b6 c0             	movzx  eax,al
c000d380:	83 e0 02             	and    eax,0x2
c000d383:	0f 84 93 01 00 00    	je     c000d51c <tcp_listen_input+0x208>
c000d389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d390:	0f b6 c0             	movzx  eax,al
c000d393:	83 ec 0c             	sub    esp,0xc
c000d396:	50                   	push   eax
c000d397:	e8 e0 df ff ff       	call   c000b37c <tcp_alloc>
c000d39c:	83 c4 10             	add    esp,0x10
c000d39f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d3a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d3a8:	75 16                	jne    c000d3c0 <tcp_listen_input+0xac>
c000d3aa:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d3b0:	83 c0 01             	add    eax,0x1
c000d3b3:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d3b9:	b0 ff                	mov    al,0xff
c000d3bb:	e9 60 01 00 00       	jmp    c000d520 <tcp_listen_input+0x20c>
c000d3c0:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d3c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ca:	89 10                	mov    DWORD PTR [eax],edx
c000d3cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d7:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d3db:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d3e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d3e8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3ed:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d3f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3f4:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d3f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3fc:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d403:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d408:	8d 50 01             	lea    edx,[eax+0x1]
c000d40b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d40f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d416:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d420:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d425:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d42d:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d435:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d43c:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d440:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d445:	8d 50 ff             	lea    edx,[eax-0x1]
c000d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d44c:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d44f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d453:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d45a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d45d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d461:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d468:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46f:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d472:	83 e0 8c             	and    eax,0xffffff8c
c000d475:	88 c2                	mov    dl,al
c000d477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d47b:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d47e:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d488:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d48b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d48f:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d494:	e8 7b 36 00 00       	call   c0010b14 <tcp_timer_needed>
c000d499:	83 ec 0c             	sub    esp,0xc
c000d49c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a0:	e8 c3 fc ff ff       	call   c000d168 <tcp_parseopt>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4ac:	8d 50 04             	lea    edx,[eax+0x4]
c000d4af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d4b6:	0f b7 c0             	movzx  eax,ax
c000d4b9:	83 ec 08             	sub    esp,0x8
c000d4bc:	52                   	push   edx
c000d4bd:	50                   	push   eax
c000d4be:	e8 79 e0 ff ff       	call   c000b53c <tcp_eff_send_mss>
c000d4c3:	83 c4 10             	add    esp,0x10
c000d4c6:	89 c2                	mov    edx,eax
c000d4c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cc:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d4d0:	83 ec 08             	sub    esp,0x8
c000d4d3:	6a 12                	push   0x12
c000d4d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4d9:	e8 ee 22 00 00       	call   c000f7cc <tcp_enqueue_flags>
c000d4de:	83 c4 10             	add    esp,0x10
c000d4e1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d4e5:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d4ea:	85 c0                	test   eax,eax
c000d4ec:	74 1a                	je     c000d508 <tcp_listen_input+0x1f4>
c000d4ee:	83 ec 08             	sub    esp,0x8
c000d4f1:	6a 00                	push   0x0
c000d4f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4f7:	e8 68 db ff ff       	call   c000b064 <tcp_abandon>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d503:	eb 1b                	jmp    c000d520 <tcp_listen_input+0x20c>
c000d505:	8d 76 00             	lea    esi,[esi+0x0]
c000d508:	83 ec 0c             	sub    esp,0xc
c000d50b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d50f:	e8 58 29 00 00       	call   c000fe6c <tcp_output>
c000d514:	83 c4 10             	add    esp,0x10
c000d517:	eb 07                	jmp    c000d520 <tcp_listen_input+0x20c>
c000d519:	8d 76 00             	lea    esi,[esi+0x0]
c000d51c:	b0 00                	mov    al,0x0
c000d51e:	66 90                	xchg   ax,ax
c000d520:	83 c4 18             	add    esp,0x18
c000d523:	5b                   	pop    ebx
c000d524:	c3                   	ret    
c000d525:	8d 76 00             	lea    esi,[esi+0x0]

c000d528 <tcp_process>:
c000d528:	53                   	push   ebx
c000d529:	83 ec 18             	sub    esp,0x18
c000d52c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d531:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d536:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d53b:	0f b6 c0             	movzx  eax,al
c000d53e:	83 e0 04             	and    eax,0x4
c000d541:	0f 84 bd 00 00 00    	je     c000d604 <tcp_process+0xdc>
c000d547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d54e:	83 f8 02             	cmp    eax,0x2
c000d551:	75 19                	jne    c000d56c <tcp_process+0x44>
c000d553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d557:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d55a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d55f:	39 c2                	cmp    edx,eax
c000d561:	75 45                	jne    c000d5a8 <tcp_process+0x80>
c000d563:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d568:	eb 3e                	jmp    c000d5a8 <tcp_process+0x80>
c000d56a:	66 90                	xchg   ax,ax
c000d56c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d576:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d579:	29 c2                	sub    edx,eax
c000d57b:	89 d0                	mov    eax,edx
c000d57d:	78 29                	js     c000d5a8 <tcp_process+0x80>
c000d57f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d589:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d58c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d590:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d593:	0f b7 c0             	movzx  eax,ax
c000d596:	01 c8                	add    eax,ecx
c000d598:	29 c2                	sub    edx,eax
c000d59a:	89 d0                	mov    eax,edx
c000d59c:	85 c0                	test   eax,eax
c000d59e:	7f 08                	jg     c000d5a8 <tcp_process+0x80>
c000d5a0:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d5ad:	85 c0                	test   eax,eax
c000d5af:	74 4b                	je     c000d5fc <tcp_process+0xd4>
c000d5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	75 18                	jne    c000d5d4 <tcp_process+0xac>
c000d5bc:	83 ec 08             	sub    esp,0x8
c000d5bf:	68 10 04 03 c0       	push   0xc0030410
c000d5c4:	68 c6 f9 02 c0       	push   0xc002f9c6
c000d5c9:	e8 fa 24 01 00       	call   c001fac8 <CPrintf>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d5d9:	83 c8 08             	or     eax,0x8
c000d5dc:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5e8:	83 e0 fe             	and    eax,0xfffffffe
c000d5eb:	88 c2                	mov    dl,al
c000d5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5f4:	b0 f5                	mov    al,0xf5
c000d5f6:	e9 c9 08 00 00       	jmp    c000dec4 <tcp_process+0x99c>
c000d5fb:	90                   	nop
c000d5fc:	b0 00                	mov    al,0x0
c000d5fe:	e9 c1 08 00 00       	jmp    c000dec4 <tcp_process+0x99c>
c000d603:	90                   	nop
c000d604:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d609:	0f b6 c0             	movzx  eax,al
c000d60c:	83 e0 02             	and    eax,0x2
c000d60f:	74 33                	je     c000d644 <tcp_process+0x11c>
c000d611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d615:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d618:	83 f8 02             	cmp    eax,0x2
c000d61b:	74 27                	je     c000d644 <tcp_process+0x11c>
c000d61d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d621:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d624:	83 f8 03             	cmp    eax,0x3
c000d627:	74 1b                	je     c000d644 <tcp_process+0x11c>
c000d629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d62d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d630:	83 c8 02             	or     eax,0x2
c000d633:	88 c2                	mov    dl,al
c000d635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d639:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d63c:	b0 00                	mov    al,0x0
c000d63e:	e9 81 08 00 00       	jmp    c000dec4 <tcp_process+0x99c>
c000d643:	90                   	nop
c000d644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d648:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d64b:	0f b6 c0             	movzx  eax,al
c000d64e:	83 e0 10             	and    eax,0x10
c000d651:	75 0d                	jne    c000d660 <tcp_process+0x138>
c000d653:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d65d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d664:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d66b:	83 ec 0c             	sub    esp,0xc
c000d66e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d672:	e8 f1 fa ff ff       	call   c000d168 <tcp_parseopt>
c000d677:	83 c4 10             	add    esp,0x10
c000d67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d681:	83 f8 09             	cmp    eax,0x9
c000d684:	0f 87 16 08 00 00    	ja     c000dea0 <tcp_process+0x978>
c000d68a:	8b 04 85 b8 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa48]
c000d691:	ff e0                	jmp    eax
c000d693:	90                   	nop
c000d694:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d699:	0f b6 c0             	movzx  eax,al
c000d69c:	83 e0 10             	and    eax,0x10
c000d69f:	0f 84 07 02 00 00    	je     c000d8ac <tcp_process+0x384>
c000d6a5:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6aa:	0f b6 c0             	movzx  eax,al
c000d6ad:	83 e0 02             	and    eax,0x2
c000d6b0:	0f 84 f6 01 00 00    	je     c000d8ac <tcp_process+0x384>
c000d6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ba:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d6bd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d6c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 74 35 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	8d 50 01             	lea    edx,[eax+0x1]
c000d6d2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d6d7:	39 c2                	cmp    edx,eax
c000d6d9:	0f 85 cd 01 00 00    	jne    c000d8ac <tcp_process+0x384>
c000d6df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e3:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d6e7:	83 c0 01             	add    eax,0x1
c000d6ea:	89 c2                	mov    edx,eax
c000d6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f0:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d6f4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d6f9:	8d 50 01             	lea    edx,[eax+0x1]
c000d6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d700:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d707:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d70e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d711:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d71b:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d71e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d723:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72b:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d72f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d734:	8d 50 ff             	lea    edx,[eax-0x1]
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d73e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d742:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74d:	8d 50 04             	lea    edx,[eax+0x4]
c000d750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d754:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d757:	0f b7 c0             	movzx  eax,ax
c000d75a:	83 ec 08             	sub    esp,0x8
c000d75d:	52                   	push   edx
c000d75e:	50                   	push   eax
c000d75f:	e8 d8 dd ff ff       	call   c000b53c <tcp_eff_send_mss>
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	89 c2                	mov    edx,eax
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d775:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d778:	89 c2                	mov    edx,eax
c000d77a:	c1 e2 02             	shl    edx,0x2
c000d77d:	01 d0                	add    eax,edx
c000d77f:	d1 e0                	shl    eax,1
c000d781:	89 c2                	mov    edx,eax
c000d783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d787:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d793:	0f b7 c0             	movzx  eax,ax
c000d796:	83 f8 01             	cmp    eax,0x1
c000d799:	75 0d                	jne    c000d7a8 <tcp_process+0x280>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7a2:	d1 e0                	shl    eax,1
c000d7a4:	eb 0a                	jmp    c000d7b0 <tcp_process+0x288>
c000d7a6:	66 90                	xchg   ax,ax
c000d7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7af:	90                   	nop
c000d7b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7b4:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d7bf:	0f b7 c0             	movzx  eax,ax
c000d7c2:	85 c0                	test   eax,eax
c000d7c4:	75 16                	jne    c000d7dc <tcp_process+0x2b4>
c000d7c6:	83 ec 08             	sub    esp,0x8
c000d7c9:	68 73 05 03 c0       	push   0xc0030573
c000d7ce:	68 c6 f9 02 c0       	push   0xc002f9c6
c000d7d3:	e8 f0 22 01 00       	call   c001fac8 <CPrintf>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	90                   	nop
c000d7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d7e3:	83 e8 01             	sub    eax,0x1
c000d7e6:	89 c2                	mov    edx,eax
c000d7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ec:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000d7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d7f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d7ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d80f:	85 c0                	test   eax,eax
c000d811:	75 0d                	jne    c000d820 <tcp_process+0x2f8>
c000d813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d817:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d81d:	eb 15                	jmp    c000d834 <tcp_process+0x30c>
c000d81f:	90                   	nop
c000d820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d824:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82e:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d832:	66 90                	xchg   ax,ax
c000d834:	83 ec 0c             	sub    esp,0xc
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	e8 18 c7 ff ff       	call   c0009f58 <tcp_seg_free>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d847:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d84d:	85 c0                	test   eax,eax
c000d84f:	74 27                	je     c000d878 <tcp_process+0x350>
c000d851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d855:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d85b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d85f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d862:	83 ec 04             	sub    esp,0x4
c000d865:	6a 00                	push   0x0
c000d867:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86b:	52                   	push   edx
c000d86c:	ff d0                	call   eax
c000d86e:	83 c4 10             	add    esp,0x10
c000d871:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d875:	eb 09                	jmp    c000d880 <tcp_process+0x358>
c000d877:	90                   	nop
c000d878:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d87d:	8d 76 00             	lea    esi,[esi+0x0]
c000d880:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d885:	83 f8 f6             	cmp    eax,0xfffffff6
c000d888:	75 0a                	jne    c000d894 <tcp_process+0x36c>
c000d88a:	b0 f6                	mov    al,0xf6
c000d88c:	e9 33 06 00 00       	jmp    c000dec4 <tcp_process+0x99c>
c000d891:	8d 76 00             	lea    esi,[esi+0x0]
c000d894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d898:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d89b:	83 c8 02             	or     eax,0x2
c000d89e:	88 c2                	mov    dl,al
c000d8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d8a7:	e9 f8 05 00 00       	jmp    c000dea4 <tcp_process+0x97c>
c000d8ac:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8b1:	0f b6 c0             	movzx  eax,al
c000d8b4:	83 e0 10             	and    eax,0x10
c000d8b7:	0f 84 e7 05 00 00    	je     c000dea4 <tcp_process+0x97c>
c000d8bd:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d8c2:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d8c5:	0f b7 c8             	movzx  ecx,ax
c000d8c8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d8cd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d8d1:	0f b7 d0             	movzx  edx,ax
c000d8d4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d8da:	0f b7 d8             	movzx  ebx,ax
c000d8dd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d8e2:	01 c3                	add    ebx,eax
c000d8e4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d8e9:	83 ec 08             	sub    esp,0x8
c000d8ec:	51                   	push   ecx
c000d8ed:	52                   	push   edx
c000d8ee:	68 90 68 03 c0       	push   0xc0036890
c000d8f3:	68 98 68 03 c0       	push   0xc0036898
c000d8f8:	53                   	push   ebx
c000d8f9:	50                   	push   eax
c000d8fa:	e8 f9 29 00 00       	call   c00102f8 <tcp_rst>
c000d8ff:	83 c4 20             	add    esp,0x20
c000d902:	e9 9d 05 00 00       	jmp    c000dea4 <tcp_process+0x97c>
c000d907:	90                   	nop
c000d908:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d90d:	0f b6 c0             	movzx  eax,al
c000d910:	83 e0 10             	and    eax,0x10
c000d913:	0f 84 ab 01 00 00    	je     c000dac4 <tcp_process+0x59c>
c000d919:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d91f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d923:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d926:	29 c2                	sub    edx,eax
c000d928:	89 d0                	mov    eax,edx
c000d92a:	83 e8 01             	sub    eax,0x1
c000d92d:	0f 88 45 01 00 00    	js     c000da78 <tcp_process+0x550>
c000d933:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93d:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d940:	29 c2                	sub    edx,eax
c000d942:	89 d0                	mov    eax,edx
c000d944:	85 c0                	test   eax,eax
c000d946:	0f 8f 2c 01 00 00    	jg     c000da78 <tcp_process+0x550>
c000d94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d950:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d95e:	85 c0                	test   eax,eax
c000d960:	75 16                	jne    c000d978 <tcp_process+0x450>
c000d962:	83 ec 08             	sub    esp,0x8
c000d965:	68 89 05 03 c0       	push   0xc0030589
c000d96a:	68 c6 f9 02 c0       	push   0xc002f9c6
c000d96f:	e8 54 21 01 00       	call   c001fac8 <CPrintf>
c000d974:	83 c4 10             	add    esp,0x10
c000d977:	90                   	nop
c000d978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d97f:	85 c0                	test   eax,eax
c000d981:	74 25                	je     c000d9a8 <tcp_process+0x480>
c000d983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d987:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d98a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d98e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d991:	83 ec 04             	sub    esp,0x4
c000d994:	6a 00                	push   0x0
c000d996:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d99a:	52                   	push   edx
c000d99b:	ff d0                	call   eax
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d9a4:	eb 0a                	jmp    c000d9b0 <tcp_process+0x488>
c000d9a6:	66 90                	xchg   ax,ax
c000d9a8:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d9b0:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9b5:	85 c0                	test   eax,eax
c000d9b7:	74 23                	je     c000d9dc <tcp_process+0x4b4>
c000d9b9:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9be:	83 f8 f6             	cmp    eax,0xfffffff6
c000d9c1:	74 11                	je     c000d9d4 <tcp_process+0x4ac>
c000d9c3:	83 ec 0c             	sub    esp,0xc
c000d9c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9ca:	e8 29 d8 ff ff       	call   c000b1f8 <tcp_abort>
c000d9cf:	83 c4 10             	add    esp,0x10
c000d9d2:	66 90                	xchg   ax,ax
c000d9d4:	b0 f6                	mov    al,0xf6
c000d9d6:	e9 e9 04 00 00       	jmp    c000dec4 <tcp_process+0x99c>
c000d9db:	90                   	nop
c000d9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e0:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d9e4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d9e9:	83 ec 0c             	sub    esp,0xc
c000d9ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9f0:	e8 b3 e0 ff ff       	call   c000baa8 <tcp_receive>
c000d9f5:	83 c4 10             	add    esp,0x10
c000d9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d9ff:	0f b7 c0             	movzx  eax,ax
c000da02:	85 c0                	test   eax,eax
c000da04:	74 16                	je     c000da1c <tcp_process+0x4f4>
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da0d:	83 e8 01             	sub    eax,0x1
c000da10:	89 c2                	mov    edx,eax
c000da12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da16:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000da1a:	66 90                	xchg   ax,ax
c000da1c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000da21:	83 f8 01             	cmp    eax,0x1
c000da24:	75 0e                	jne    c000da34 <tcp_process+0x50c>
c000da26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da2d:	d1 e0                	shl    eax,1
c000da2f:	eb 0b                	jmp    c000da3c <tcp_process+0x514>
c000da31:	8d 76 00             	lea    esi,[esi+0x0]
c000da34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da3b:	90                   	nop
c000da3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da40:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da44:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da49:	0f b6 c0             	movzx  eax,al
c000da4c:	83 e0 20             	and    eax,0x20
c000da4f:	0f 84 ab 00 00 00    	je     c000db00 <tcp_process+0x5d8>
c000da55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da59:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da5c:	83 c8 02             	or     eax,0x2
c000da5f:	88 c2                	mov    dl,al
c000da61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da65:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6c:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000da73:	e9 88 00 00 00       	jmp    c000db00 <tcp_process+0x5d8>
c000da78:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da7d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000da80:	0f b7 c8             	movzx  ecx,ax
c000da83:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da88:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000da8c:	0f b7 d0             	movzx  edx,ax
c000da8f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000da95:	0f b7 d8             	movzx  ebx,ax
c000da98:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da9d:	01 c3                	add    ebx,eax
c000da9f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000daa4:	83 ec 08             	sub    esp,0x8
c000daa7:	51                   	push   ecx
c000daa8:	52                   	push   edx
c000daa9:	68 90 68 03 c0       	push   0xc0036890
c000daae:	68 98 68 03 c0       	push   0xc0036898
c000dab3:	53                   	push   ebx
c000dab4:	50                   	push   eax
c000dab5:	e8 3e 28 00 00       	call   c00102f8 <tcp_rst>
c000daba:	83 c4 20             	add    esp,0x20
c000dabd:	e9 e6 03 00 00       	jmp    c000dea8 <tcp_process+0x980>
c000dac2:	66 90                	xchg   ax,ax
c000dac4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dac9:	0f b6 c0             	movzx  eax,al
c000dacc:	83 e0 02             	and    eax,0x2
c000dacf:	0f 84 d3 03 00 00    	je     c000dea8 <tcp_process+0x980>
c000dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dadc:	8d 50 ff             	lea    edx,[eax-0x1]
c000dadf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dae4:	39 c2                	cmp    edx,eax
c000dae6:	0f 85 bc 03 00 00    	jne    c000dea8 <tcp_process+0x980>
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daf3:	e8 0c 2a 00 00       	call   c0010504 <tcp_rexmit>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	e9 a8 03 00 00       	jmp    c000dea8 <tcp_process+0x980>
c000db00:	90                   	nop
c000db01:	e9 a2 03 00 00       	jmp    c000dea8 <tcp_process+0x980>
c000db06:	66 90                	xchg   ax,ax
c000db08:	83 ec 0c             	sub    esp,0xc
c000db0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db0f:	e8 94 df ff ff       	call   c000baa8 <tcp_receive>
c000db14:	83 c4 10             	add    esp,0x10
c000db17:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db1c:	0f b6 c0             	movzx  eax,al
c000db1f:	83 e0 20             	and    eax,0x20
c000db22:	0f 84 84 03 00 00    	je     c000deac <tcp_process+0x984>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db2f:	83 c8 02             	or     eax,0x2
c000db32:	88 c2                	mov    dl,al
c000db34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3f:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db46:	e9 61 03 00 00       	jmp    c000deac <tcp_process+0x984>
c000db4b:	90                   	nop
c000db4c:	83 ec 0c             	sub    esp,0xc
c000db4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db53:	e8 50 df ff ff       	call   c000baa8 <tcp_receive>
c000db58:	83 c4 10             	add    esp,0x10
c000db5b:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db60:	0f b6 c0             	movzx  eax,al
c000db63:	83 e0 20             	and    eax,0x20
c000db66:	0f 84 08 01 00 00    	je     c000dc74 <tcp_process+0x74c>
c000db6c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db71:	0f b6 c0             	movzx  eax,al
c000db74:	83 e0 10             	and    eax,0x10
c000db77:	0f 84 d3 00 00 00    	je     c000dc50 <tcp_process+0x728>
c000db7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db81:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000db84:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db89:	39 c2                	cmp    edx,eax
c000db8b:	0f 85 bf 00 00 00    	jne    c000dc50 <tcp_process+0x728>
c000db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db95:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db98:	83 c8 02             	or     eax,0x2
c000db9b:	88 c2                	mov    dl,al
c000db9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dba4:	83 ec 0c             	sub    esp,0xc
c000dba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbab:	e8 0c c5 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbb8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbbc:	75 12                	jne    c000dbd0 <tcp_process+0x6a8>
c000dbbe:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dbc6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dbcb:	eb 4b                	jmp    c000dc18 <tcp_process+0x6f0>
c000dbcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbd0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbd5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dbda:	eb 30                	jmp    c000dc0c <tcp_process+0x6e4>
c000dbdc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbe1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dbe4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbe8:	75 12                	jne    c000dbfc <tcp_process+0x6d4>
c000dbea:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dbf6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dbf9:	eb 1d                	jmp    c000dc18 <tcp_process+0x6f0>
c000dbfb:	90                   	nop
c000dbfc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc04:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc11:	85 c0                	test   eax,eax
c000dc13:	75 c7                	jne    c000dbdc <tcp_process+0x6b4>
c000dc15:	8d 76 00             	lea    esi,[esi+0x0]
c000dc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc27:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc2e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dc34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc38:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dc44:	e8 cb 2e 00 00       	call   c0010b14 <tcp_timer_needed>
c000dc49:	e9 62 02 00 00       	jmp    c000deb0 <tcp_process+0x988>
c000dc4e:	66 90                	xchg   ax,ax
c000dc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc54:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc57:	83 c8 02             	or     eax,0x2
c000dc5a:	88 c2                	mov    dl,al
c000dc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc60:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dc6e:	e9 3d 02 00 00       	jmp    c000deb0 <tcp_process+0x988>
c000dc73:	90                   	nop
c000dc74:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc79:	0f b6 c0             	movzx  eax,al
c000dc7c:	83 e0 10             	and    eax,0x10
c000dc7f:	0f 84 2b 02 00 00    	je     c000deb0 <tcp_process+0x988>
c000dc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc89:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc8c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc91:	39 c2                	cmp    edx,eax
c000dc93:	0f 85 17 02 00 00    	jne    c000deb0 <tcp_process+0x988>
c000dc99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc9d:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dca4:	e9 07 02 00 00       	jmp    c000deb0 <tcp_process+0x988>
c000dca9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcac:	83 ec 0c             	sub    esp,0xc
c000dcaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcb3:	e8 f0 dd ff ff       	call   c000baa8 <tcp_receive>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dcc0:	0f b6 c0             	movzx  eax,al
c000dcc3:	83 e0 20             	and    eax,0x20
c000dcc6:	0f 84 e8 01 00 00    	je     c000deb4 <tcp_process+0x98c>
c000dccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dcd3:	83 c8 02             	or     eax,0x2
c000dcd6:	88 c2                	mov    dl,al
c000dcd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcdc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce6:	e8 d1 c3 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000dceb:	83 c4 10             	add    esp,0x10
c000dcee:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dcf3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dcf7:	75 0f                	jne    c000dd08 <tcp_process+0x7e0>
c000dcf9:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dcfe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd01:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd06:	eb 48                	jmp    c000dd50 <tcp_process+0x828>
c000dd08:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd0d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd12:	eb 30                	jmp    c000dd44 <tcp_process+0x81c>
c000dd14:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd20:	75 12                	jne    c000dd34 <tcp_process+0x80c>
c000dd22:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd2b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd31:	eb 1d                	jmp    c000dd50 <tcp_process+0x828>
c000dd33:	90                   	nop
c000dd34:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd3c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd41:	8d 76 00             	lea    esi,[esi+0x0]
c000dd44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd49:	85 c0                	test   eax,eax
c000dd4b:	75 c7                	jne    c000dd14 <tcp_process+0x7ec>
c000dd4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd54:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dd66:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dd6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd70:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd77:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd7c:	e8 93 2d 00 00       	call   c0010b14 <tcp_timer_needed>
c000dd81:	e9 2e 01 00 00       	jmp    c000deb4 <tcp_process+0x98c>
c000dd86:	66 90                	xchg   ax,ax
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd8f:	e8 14 dd ff ff       	call   c000baa8 <tcp_receive>
c000dd94:	83 c4 10             	add    esp,0x10
c000dd97:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd9c:	0f b6 c0             	movzx  eax,al
c000dd9f:	83 e0 10             	and    eax,0x10
c000dda2:	0f 84 10 01 00 00    	je     c000deb8 <tcp_process+0x990>
c000dda8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddac:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddaf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddb4:	39 c2                	cmp    edx,eax
c000ddb6:	0f 85 fc 00 00 00    	jne    c000deb8 <tcp_process+0x990>
c000ddbc:	83 ec 0c             	sub    esp,0xc
c000ddbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddc3:	e8 f4 c2 ff ff       	call   c000a0bc <tcp_pcb_purge>
c000ddc8:	83 c4 10             	add    esp,0x10
c000ddcb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddd0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddd4:	75 12                	jne    c000dde8 <tcp_process+0x8c0>
c000ddd6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dddb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddde:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dde3:	eb 4b                	jmp    c000de30 <tcp_process+0x908>
c000dde5:	8d 76 00             	lea    esi,[esi+0x0]
c000dde8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dded:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddf2:	eb 30                	jmp    c000de24 <tcp_process+0x8fc>
c000ddf4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddfc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de00:	75 12                	jne    c000de14 <tcp_process+0x8ec>
c000de02:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de0b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de11:	eb 1d                	jmp    c000de30 <tcp_process+0x908>
c000de13:	90                   	nop
c000de14:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de1c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de21:	8d 76 00             	lea    esi,[esi+0x0]
c000de24:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de29:	85 c0                	test   eax,eax
c000de2b:	75 c7                	jne    c000ddf4 <tcp_process+0x8cc>
c000de2d:	8d 76 00             	lea    esi,[esi+0x0]
c000de30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de34:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de46:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de50:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de57:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de5c:	e8 b3 2c 00 00       	call   c0010b14 <tcp_timer_needed>
c000de61:	eb 55                	jmp    c000deb8 <tcp_process+0x990>
c000de63:	90                   	nop
c000de64:	83 ec 0c             	sub    esp,0xc
c000de67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de6b:	e8 38 dc ff ff       	call   c000baa8 <tcp_receive>
c000de70:	83 c4 10             	add    esp,0x10
c000de73:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de78:	0f b6 c0             	movzx  eax,al
c000de7b:	83 e0 10             	and    eax,0x10
c000de7e:	74 3c                	je     c000debc <tcp_process+0x994>
c000de80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de87:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de8c:	39 c2                	cmp    edx,eax
c000de8e:	75 2c                	jne    c000debc <tcp_process+0x994>
c000de90:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de95:	83 c8 10             	or     eax,0x10
c000de98:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000de9d:	eb 1d                	jmp    c000debc <tcp_process+0x994>
c000de9f:	90                   	nop
c000dea0:	90                   	nop
c000dea1:	eb 1d                	jmp    c000dec0 <tcp_process+0x998>
c000dea3:	90                   	nop
c000dea4:	90                   	nop
c000dea5:	eb 19                	jmp    c000dec0 <tcp_process+0x998>
c000dea7:	90                   	nop
c000dea8:	90                   	nop
c000dea9:	eb 15                	jmp    c000dec0 <tcp_process+0x998>
c000deab:	90                   	nop
c000deac:	90                   	nop
c000dead:	eb 11                	jmp    c000dec0 <tcp_process+0x998>
c000deaf:	90                   	nop
c000deb0:	90                   	nop
c000deb1:	eb 0d                	jmp    c000dec0 <tcp_process+0x998>
c000deb3:	90                   	nop
c000deb4:	90                   	nop
c000deb5:	eb 09                	jmp    c000dec0 <tcp_process+0x998>
c000deb7:	90                   	nop
c000deb8:	90                   	nop
c000deb9:	eb 05                	jmp    c000dec0 <tcp_process+0x998>
c000debb:	90                   	nop
c000debc:	90                   	nop
c000debd:	8d 76 00             	lea    esi,[esi+0x0]
c000dec0:	b0 00                	mov    al,0x0
c000dec2:	66 90                	xchg   ax,ax
c000dec4:	83 c4 18             	add    esp,0x18
c000dec7:	5b                   	pop    ebx
c000dec8:	c3                   	ret    
c000dec9:	8d 76 00             	lea    esi,[esi+0x0]

c000decc <tcp_input>:
c000decc:	53                   	push   ebx
c000decd:	83 ec 18             	sub    esp,0x18
c000ded0:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000ded6:	83 c0 01             	add    eax,0x1
c000ded9:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000dedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dee6:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000deeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deef:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000def2:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000def7:	66 8b 00             	mov    ax,WORD PTR [eax]
c000defa:	0f b7 c0             	movzx  eax,ax
c000defd:	83 ec 0c             	sub    esp,0xc
c000df00:	50                   	push   eax
c000df01:	e8 16 2d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	0f b7 c0             	movzx  eax,ax
c000df0c:	c1 e8 08             	shr    eax,0x8
c000df0f:	0f b7 c0             	movzx  eax,ax
c000df12:	83 e0 0f             	and    eax,0xf
c000df15:	c1 e0 02             	shl    eax,0x2
c000df18:	01 d8                	add    eax,ebx
c000df1a:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000df1f:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df24:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df27:	0f b7 c0             	movzx  eax,ax
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	50                   	push   eax
c000df2e:	e8 e9 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	0f b7 c0             	movzx  eax,ax
c000df39:	c1 e8 08             	shr    eax,0x8
c000df3c:	83 e0 0f             	and    eax,0xf
c000df3f:	c1 e0 02             	shl    eax,0x2
c000df42:	f7 d8                	neg    eax
c000df44:	98                   	cwde   
c000df45:	83 ec 08             	sub    esp,0x8
c000df48:	50                   	push   eax
c000df49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df4d:	e8 da a1 ff ff       	call   c000812c <pbuf_header>
c000df52:	83 c4 10             	add    esp,0x10
c000df55:	0f b6 c0             	movzx  eax,al
c000df58:	85 c0                	test   eax,eax
c000df5a:	75 10                	jne    c000df6c <tcp_input+0xa0>
c000df5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df63:	0f b7 c0             	movzx  eax,ax
c000df66:	83 f8 13             	cmp    eax,0x13
c000df69:	77 35                	ja     c000dfa0 <tcp_input+0xd4>
c000df6b:	90                   	nop
c000df6c:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000df72:	83 c0 01             	add    eax,0x1
c000df75:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000df7b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df81:	83 c0 01             	add    eax,0x1
c000df84:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df91:	e8 36 a3 ff ff       	call   c00082cc <pbuf_free>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	e9 fe 09 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000df9e:	66 90                	xchg   ax,ax
c000dfa0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfa5:	83 ec 08             	sub    esp,0x8
c000dfa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfac:	50                   	push   eax
c000dfad:	e8 be 5e 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	0f b6 c0             	movzx  eax,al
c000dfb8:	85 c0                	test   eax,eax
c000dfba:	75 14                	jne    c000dfd0 <tcp_input+0x104>
c000dfbc:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfc1:	25 f0 00 00 00       	and    eax,0xf0
c000dfc6:	3d e0 00 00 00       	cmp    eax,0xe0
c000dfcb:	75 37                	jne    c000e004 <tcp_input+0x138>
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000dfd6:	83 c0 01             	add    eax,0x1
c000dfd9:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000dfdf:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfe5:	83 c0 01             	add    eax,0x1
c000dfe8:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dff5:	e8 d2 a2 ff ff       	call   c00082cc <pbuf_free>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	e9 9a 09 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e002:	66 90                	xchg   ax,ax
c000e004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e008:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e00b:	0f b7 c0             	movzx  eax,ax
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	6a 06                	push   0x6
c000e014:	68 98 68 03 c0       	push   0xc0036898
c000e019:	68 90 68 03 c0       	push   0xc0036890
c000e01e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e022:	e8 61 51 00 00       	call   c0013188 <inet_chksum_pseudo>
c000e027:	83 c4 20             	add    esp,0x20
c000e02a:	0f b7 c0             	movzx  eax,ax
c000e02d:	85 c0                	test   eax,eax
c000e02f:	74 33                	je     c000e064 <tcp_input+0x198>
c000e031:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e037:	83 c0 01             	add    eax,0x1
c000e03a:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e040:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e046:	83 c0 01             	add    eax,0x1
c000e049:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e04f:	83 ec 0c             	sub    esp,0xc
c000e052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e056:	e8 71 a2 ff ff       	call   c00082cc <pbuf_free>
c000e05b:	83 c4 10             	add    esp,0x10
c000e05e:	e9 39 09 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e063:	90                   	nop
c000e064:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e069:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e06d:	0f b7 c0             	movzx  eax,ax
c000e070:	83 ec 0c             	sub    esp,0xc
c000e073:	50                   	push   eax
c000e074:	e8 a3 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e079:	83 c4 10             	add    esp,0x10
c000e07c:	0f b7 c0             	movzx  eax,ax
c000e07f:	c1 e8 0c             	shr    eax,0xc
c000e082:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e086:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e08b:	ba 00 00 00 00       	mov    edx,0x0
c000e090:	89 d1                	mov    ecx,edx
c000e092:	29 c1                	sub    ecx,eax
c000e094:	89 c8                	mov    eax,ecx
c000e096:	c1 e0 02             	shl    eax,0x2
c000e099:	98                   	cwde   
c000e09a:	83 ec 08             	sub    esp,0x8
c000e09d:	50                   	push   eax
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	e8 85 a0 ff ff       	call   c000812c <pbuf_header>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	0f b6 c0             	movzx  eax,al
c000e0ad:	85 c0                	test   eax,eax
c000e0af:	74 33                	je     c000e0e4 <tcp_input+0x218>
c000e0b1:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e0b7:	83 c0 01             	add    eax,0x1
c000e0ba:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e0c0:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e0c6:	83 c0 01             	add    eax,0x1
c000e0c9:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e0cf:	83 ec 0c             	sub    esp,0xc
c000e0d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d6:	e8 f1 a1 ff ff       	call   c00082cc <pbuf_free>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	e9 b9 08 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e0e3:	90                   	nop
c000e0e4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ec:	0f b7 c0             	movzx  eax,ax
c000e0ef:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0f5:	83 ec 0c             	sub    esp,0xc
c000e0f8:	50                   	push   eax
c000e0f9:	e8 1e 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	66 89 03             	mov    WORD PTR [ebx],ax
c000e104:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e109:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e10d:	0f b7 c0             	movzx  eax,ax
c000e110:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e116:	83 ec 0c             	sub    esp,0xc
c000e119:	50                   	push   eax
c000e11a:	e8 fd 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e126:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e12b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e12e:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e134:	83 ec 0c             	sub    esp,0xc
c000e137:	50                   	push   eax
c000e138:	e8 03 2b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e143:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e146:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e14b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e150:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e153:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e159:	83 ec 0c             	sub    esp,0xc
c000e15c:	50                   	push   eax
c000e15d:	e8 de 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e162:	83 c4 10             	add    esp,0x10
c000e165:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e168:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e16b:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e170:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e175:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e179:	0f b7 c0             	movzx  eax,ax
c000e17c:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e182:	83 ec 0c             	sub    esp,0xc
c000e185:	50                   	push   eax
c000e186:	e8 91 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e192:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e197:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e19b:	0f b7 c0             	movzx  eax,ax
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	50                   	push   eax
c000e1a2:	e8 75 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1a7:	83 c4 10             	add    esp,0x10
c000e1aa:	83 e0 3f             	and    eax,0x3f
c000e1ad:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e1b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e1b9:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e1be:	0f b6 c0             	movzx  eax,al
c000e1c1:	83 e0 03             	and    eax,0x3
c000e1c4:	0f 95 c0             	setne  al
c000e1c7:	0f b6 c0             	movzx  eax,al
c000e1ca:	01 d0                	add    eax,edx
c000e1cc:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e1d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1da:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e1df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e1e3:	e9 50 01 00 00       	jmp    c000e338 <tcp_input+0x46c>
c000e1e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1ef:	85 c0                	test   eax,eax
c000e1f1:	75 15                	jne    c000e208 <tcp_input+0x33c>
c000e1f3:	83 ec 08             	sub    esp,0x8
c000e1f6:	68 30 04 03 c0       	push   0xc0030430
c000e1fb:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e200:	e8 c3 18 01 00       	call   c001fac8 <CPrintf>
c000e205:	83 c4 10             	add    esp,0x10
c000e208:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e20c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e20f:	83 f8 0a             	cmp    eax,0xa
c000e212:	75 18                	jne    c000e22c <tcp_input+0x360>
c000e214:	83 ec 08             	sub    esp,0x8
c000e217:	68 58 04 03 c0       	push   0xc0030458
c000e21c:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e221:	e8 a2 18 01 00       	call   c001fac8 <CPrintf>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	8d 76 00             	lea    esi,[esi+0x0]
c000e22c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e230:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e233:	83 f8 01             	cmp    eax,0x1
c000e236:	75 18                	jne    c000e250 <tcp_input+0x384>
c000e238:	83 ec 08             	sub    esp,0x8
c000e23b:	68 84 04 03 c0       	push   0xc0030484
c000e240:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e245:	e8 7e 18 01 00       	call   c001fac8 <CPrintf>
c000e24a:	83 c4 10             	add    esp,0x10
c000e24d:	8d 76 00             	lea    esi,[esi+0x0]
c000e250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e254:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e258:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e25d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e260:	0f b7 d2             	movzx  edx,dx
c000e263:	0f b7 c0             	movzx  eax,ax
c000e266:	39 c2                	cmp    edx,eax
c000e268:	0f 85 b6 00 00 00    	jne    c000e324 <tcp_input+0x458>
c000e26e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e272:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e275:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e27a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e27e:	0f b7 d2             	movzx  edx,dx
c000e281:	0f b7 c0             	movzx  eax,ax
c000e284:	39 c2                	cmp    edx,eax
c000e286:	0f 85 98 00 00 00    	jne    c000e324 <tcp_input+0x458>
c000e28c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e290:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e293:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e298:	39 c2                	cmp    edx,eax
c000e29a:	0f 85 84 00 00 00    	jne    c000e324 <tcp_input+0x458>
c000e2a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2a6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e2ab:	39 c2                	cmp    edx,eax
c000e2ad:	75 75                	jne    c000e324 <tcp_input+0x458>
c000e2af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2ba:	75 18                	jne    c000e2d4 <tcp_input+0x408>
c000e2bc:	83 ec 08             	sub    esp,0x8
c000e2bf:	68 ac 04 03 c0       	push   0xc00304ac
c000e2c4:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e2c9:	e8 fa 17 01 00       	call   c001fac8 <CPrintf>
c000e2ce:	83 c4 10             	add    esp,0x10
c000e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e2d9:	74 25                	je     c000e300 <tcp_input+0x434>
c000e2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e2e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2e9:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2fa:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e2ff:	90                   	nop
c000e300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e304:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e307:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e30b:	75 3b                	jne    c000e348 <tcp_input+0x47c>
c000e30d:	83 ec 08             	sub    esp,0x8
c000e310:	68 d8 04 03 c0       	push   0xc00304d8
c000e315:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e31a:	e8 a9 17 01 00       	call   c001fac8 <CPrintf>
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	eb 24                	jmp    c000e348 <tcp_input+0x47c>
c000e324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e328:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e32c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e330:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e337:	90                   	nop
c000e338:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e33d:	0f 85 a5 fe ff ff    	jne    c000e1e8 <tcp_input+0x31c>
c000e343:	eb 07                	jmp    c000e34c <tcp_input+0x480>
c000e345:	8d 76 00             	lea    esi,[esi+0x0]
c000e348:	90                   	nop
c000e349:	8d 76 00             	lea    esi,[esi+0x0]
c000e34c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e351:	0f 85 89 01 00 00    	jne    c000e4e0 <tcp_input+0x614>
c000e357:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e35c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e360:	e9 ab 00 00 00       	jmp    c000e410 <tcp_input+0x544>
c000e365:	8d 76 00             	lea    esi,[esi+0x0]
c000e368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e36c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e36f:	83 f8 0a             	cmp    eax,0xa
c000e372:	74 18                	je     c000e38c <tcp_input+0x4c0>
c000e374:	83 ec 08             	sub    esp,0x8
c000e377:	68 04 05 03 c0       	push   0xc0030504
c000e37c:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e381:	e8 42 17 01 00       	call   c001fac8 <CPrintf>
c000e386:	83 c4 10             	add    esp,0x10
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e390:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e394:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e399:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e39c:	0f b7 d2             	movzx  edx,dx
c000e39f:	0f b7 c0             	movzx  eax,ax
c000e3a2:	39 c2                	cmp    edx,eax
c000e3a4:	75 5e                	jne    c000e404 <tcp_input+0x538>
c000e3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3ad:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3b2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3b6:	0f b7 d2             	movzx  edx,dx
c000e3b9:	0f b7 c0             	movzx  eax,ax
c000e3bc:	39 c2                	cmp    edx,eax
c000e3be:	75 44                	jne    c000e404 <tcp_input+0x538>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e3c7:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e3cc:	39 c2                	cmp    edx,eax
c000e3ce:	75 34                	jne    c000e404 <tcp_input+0x538>
c000e3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3d6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e3db:	39 c2                	cmp    edx,eax
c000e3dd:	75 25                	jne    c000e404 <tcp_input+0x538>
c000e3df:	83 ec 0c             	sub    esp,0xc
c000e3e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e6:	e8 45 d4 ff ff       	call   c000b830 <tcp_timewait_input>
c000e3eb:	83 c4 10             	add    esp,0x10
c000e3ee:	83 ec 0c             	sub    esp,0xc
c000e3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3f5:	e8 d2 9e ff ff       	call   c00082cc <pbuf_free>
c000e3fa:	83 c4 10             	add    esp,0x10
c000e3fd:	e9 9a 05 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e402:	66 90                	xchg   ax,ax
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e40b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e40f:	90                   	nop
c000e410:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e415:	0f 85 4d ff ff ff    	jne    c000e368 <tcp_input+0x49c>
c000e41b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e423:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e428:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e42c:	eb 52                	jmp    c000e480 <tcp_input+0x5b4>
c000e42e:	66 90                	xchg   ax,ax
c000e430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e434:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e437:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e43c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e440:	0f b7 d2             	movzx  edx,dx
c000e443:	0f b7 c0             	movzx  eax,ax
c000e446:	39 c2                	cmp    edx,eax
c000e448:	75 22                	jne    c000e46c <tcp_input+0x5a0>
c000e44a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e44e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e450:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e455:	39 c2                	cmp    edx,eax
c000e457:	74 2f                	je     c000e488 <tcp_input+0x5bc>
c000e459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e45d:	85 c0                	test   eax,eax
c000e45f:	74 27                	je     c000e488 <tcp_input+0x5bc>
c000e461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e465:	8b 00                	mov    eax,DWORD PTR [eax]
c000e467:	85 c0                	test   eax,eax
c000e469:	74 1d                	je     c000e488 <tcp_input+0x5bc>
c000e46b:	90                   	nop
c000e46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e478:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e47b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e47f:	90                   	nop
c000e480:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e485:	75 a9                	jne    c000e430 <tcp_input+0x564>
c000e487:	90                   	nop
c000e488:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e48d:	74 51                	je     c000e4e0 <tcp_input+0x614>
c000e48f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e494:	74 26                	je     c000e4bc <tcp_input+0x5f0>
c000e496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e49d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4a4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e4aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e4ba:	66 90                	xchg   ax,ax
c000e4bc:	83 ec 0c             	sub    esp,0xc
c000e4bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e4c3:	e8 4c ee ff ff       	call   c000d314 <tcp_listen_input>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	83 ec 0c             	sub    esp,0xc
c000e4ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4d2:	e8 f5 9d ff ff       	call   c00082cc <pbuf_free>
c000e4d7:	83 c4 10             	add    esp,0x10
c000e4da:	e9 bd 04 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e4df:	90                   	nop
c000e4e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e4e5:	0f 84 1d 04 00 00    	je     c000e908 <tcp_input+0xa3c>
c000e4eb:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e4f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e4fc:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e506:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e50b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e510:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e515:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e51f:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e52a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e530:	85 c0                	test   eax,eax
c000e532:	0f 84 b4 00 00 00    	je     c000e5ec <tcp_input+0x720>
c000e538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e542:	85 c0                	test   eax,eax
c000e544:	74 2e                	je     c000e574 <tcp_input+0x6a8>
c000e546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e550:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e554:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e55a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e55e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e561:	6a 00                	push   0x0
c000e563:	51                   	push   ecx
c000e564:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e568:	52                   	push   edx
c000e569:	ff d0                	call   eax
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e572:	eb 20                	jmp    c000e594 <tcp_input+0x6c8>
c000e574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e578:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e57e:	6a 00                	push   0x0
c000e580:	50                   	push   eax
c000e581:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e585:	6a 00                	push   0x0
c000e587:	e8 74 c8 ff ff       	call   c000ae00 <tcp_recv_null>
c000e58c:	83 c4 10             	add    esp,0x10
c000e58f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e593:	90                   	nop
c000e594:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e599:	85 c0                	test   eax,eax
c000e59b:	75 13                	jne    c000e5b0 <tcp_input+0x6e4>
c000e59d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a1:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e5ab:	eb 3f                	jmp    c000e5ec <tcp_input+0x720>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5b5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5b8:	74 0e                	je     c000e5c8 <tcp_input+0x6fc>
c000e5ba:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e5c0:	0f b7 c0             	movzx  eax,ax
c000e5c3:	85 c0                	test   eax,eax
c000e5c5:	74 25                	je     c000e5ec <tcp_input+0x720>
c000e5c7:	90                   	nop
c000e5c8:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e5ce:	83 c0 01             	add    eax,0x1
c000e5d1:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e5d7:	83 ec 0c             	sub    esp,0xc
c000e5da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5de:	e8 e9 9c ff ff       	call   c00082cc <pbuf_free>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	e9 b1 03 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e5eb:	90                   	nop
c000e5ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f0:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e5f5:	83 ec 0c             	sub    esp,0xc
c000e5f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5fc:	e8 27 ef ff ff       	call   c000d528 <tcp_process>
c000e601:	83 c4 10             	add    esp,0x10
c000e604:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e608:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e60d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e610:	0f 84 9e 02 00 00    	je     c000e8b4 <tcp_input+0x9e8>
c000e616:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e61b:	0f b6 c0             	movzx  eax,al
c000e61e:	83 e0 08             	and    eax,0x8
c000e621:	74 59                	je     c000e67c <tcp_input+0x7b0>
c000e623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e627:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e62d:	85 c0                	test   eax,eax
c000e62f:	74 1f                	je     c000e650 <tcp_input+0x784>
c000e631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e635:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e63b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e63f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e642:	83 ec 08             	sub    esp,0x8
c000e645:	6a f5                	push   0xfffffff5
c000e647:	52                   	push   edx
c000e648:	ff d0                	call   eax
c000e64a:	83 c4 10             	add    esp,0x10
c000e64d:	8d 76 00             	lea    esi,[esi+0x0]
c000e650:	83 ec 08             	sub    esp,0x8
c000e653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e657:	68 70 68 03 c0       	push   0xc0036870
c000e65c:	e8 bb c2 ff ff       	call   c000a91c <tcp_pcb_remove>
c000e661:	83 c4 10             	add    esp,0x10
c000e664:	83 ec 08             	sub    esp,0x8
c000e667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e66b:	6a 02                	push   0x2
c000e66d:	e8 9a 93 ff ff       	call   c0007a0c <memp_free>
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	e9 4a 02 00 00       	jmp    c000e8c4 <tcp_input+0x9f8>
c000e67a:	66 90                	xchg   ax,ax
c000e67c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e681:	0f b6 c0             	movzx  eax,al
c000e684:	83 e0 10             	and    eax,0x10
c000e687:	74 2b                	je     c000e6b4 <tcp_input+0x7e8>
c000e689:	83 ec 08             	sub    esp,0x8
c000e68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e690:	68 70 68 03 c0       	push   0xc0036870
c000e695:	e8 82 c2 ff ff       	call   c000a91c <tcp_pcb_remove>
c000e69a:	83 c4 10             	add    esp,0x10
c000e69d:	83 ec 08             	sub    esp,0x8
c000e6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6a4:	6a 02                	push   0x2
c000e6a6:	e8 61 93 ff ff       	call   c0007a0c <memp_free>
c000e6ab:	83 c4 10             	add    esp,0x10
c000e6ae:	e9 11 02 00 00       	jmp    c000e8c4 <tcp_input+0x9f8>
c000e6b3:	90                   	nop
c000e6b4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6bd:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e6c0:	0f b7 c0             	movzx  eax,ax
c000e6c3:	85 c0                	test   eax,eax
c000e6c5:	74 55                	je     c000e71c <tcp_input+0x850>
c000e6c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6cb:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e6d1:	85 c0                	test   eax,eax
c000e6d3:	74 2f                	je     c000e704 <tcp_input+0x838>
c000e6d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6d9:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e6df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6e3:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e6e6:	0f b7 ca             	movzx  ecx,dx
c000e6e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6ed:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6f0:	83 ec 04             	sub    esp,0x4
c000e6f3:	51                   	push   ecx
c000e6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6f8:	52                   	push   edx
c000e6f9:	ff d0                	call   eax
c000e6fb:	83 c4 10             	add    esp,0x10
c000e6fe:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e702:	eb 08                	jmp    c000e70c <tcp_input+0x840>
c000e704:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e709:	8d 76 00             	lea    esi,[esi+0x0]
c000e70c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e711:	83 f8 f6             	cmp    eax,0xfffffff6
c000e714:	0f 84 9e 01 00 00    	je     c000e8b8 <tcp_input+0x9ec>
c000e71a:	66 90                	xchg   ax,ax
c000e71c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e721:	85 c0                	test   eax,eax
c000e723:	0f 84 f3 00 00 00    	je     c000e81c <tcp_input+0x950>
c000e729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e733:	85 c0                	test   eax,eax
c000e735:	74 15                	je     c000e74c <tcp_input+0x880>
c000e737:	83 ec 08             	sub    esp,0x8
c000e73a:	68 9d 05 03 c0       	push   0xc003059d
c000e73f:	68 c6 f9 02 c0       	push   0xc002f9c6
c000e744:	e8 7f 13 01 00       	call   c001fac8 <CPrintf>
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e753:	0f b6 c0             	movzx  eax,al
c000e756:	83 e0 10             	and    eax,0x10
c000e759:	74 25                	je     c000e780 <tcp_input+0x8b4>
c000e75b:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	50                   	push   eax
c000e764:	e8 63 9b ff ff       	call   c00082cc <pbuf_free>
c000e769:	83 c4 10             	add    esp,0x10
c000e76c:	83 ec 0c             	sub    esp,0xc
c000e76f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e773:	e8 80 ca ff ff       	call   c000b1f8 <tcp_abort>
c000e778:	83 c4 10             	add    esp,0x10
c000e77b:	e9 44 01 00 00       	jmp    c000e8c4 <tcp_input+0x9f8>
c000e780:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e785:	0f b6 c0             	movzx  eax,al
c000e788:	83 e0 08             	and    eax,0x8
c000e78b:	74 13                	je     c000e7a0 <tcp_input+0x8d4>
c000e78d:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e792:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e795:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e79a:	83 ca 01             	or     edx,0x1
c000e79d:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e7a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7a4:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7aa:	85 c0                	test   eax,eax
c000e7ac:	74 2a                	je     c000e7d8 <tcp_input+0x90c>
c000e7ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b2:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7b8:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e7be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7c5:	6a 00                	push   0x0
c000e7c7:	51                   	push   ecx
c000e7c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7cc:	52                   	push   edx
c000e7cd:	ff d0                	call   eax
c000e7cf:	83 c4 10             	add    esp,0x10
c000e7d2:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7d6:	eb 1c                	jmp    c000e7f4 <tcp_input+0x928>
c000e7d8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7dd:	6a 00                	push   0x0
c000e7df:	50                   	push   eax
c000e7e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7e4:	6a 00                	push   0x0
c000e7e6:	e8 15 c6 ff ff       	call   c000ae00 <tcp_recv_null>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7f2:	66 90                	xchg   ax,ax
c000e7f4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7f9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7fc:	0f 84 ba 00 00 00    	je     c000e8bc <tcp_input+0x9f0>
c000e802:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e807:	85 c0                	test   eax,eax
c000e809:	74 11                	je     c000e81c <tcp_input+0x950>
c000e80b:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e815:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e81b:	90                   	nop
c000e81c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e821:	0f b6 c0             	movzx  eax,al
c000e824:	83 e0 20             	and    eax,0x20
c000e827:	74 6f                	je     c000e898 <tcp_input+0x9cc>
c000e829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e82d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e830:	0f b7 c0             	movzx  eax,ax
c000e833:	3d 60 08 00 00       	cmp    eax,0x860
c000e838:	74 16                	je     c000e850 <tcp_input+0x984>
c000e83a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e841:	83 c0 01             	add    eax,0x1
c000e844:	89 c2                	mov    edx,eax
c000e846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84a:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000e84e:	66 90                	xchg   ax,ax
c000e850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e854:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e85a:	85 c0                	test   eax,eax
c000e85c:	74 26                	je     c000e884 <tcp_input+0x9b8>
c000e85e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e862:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e868:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e86c:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e86f:	6a 00                	push   0x0
c000e871:	6a 00                	push   0x0
c000e873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e877:	52                   	push   edx
c000e878:	ff d0                	call   eax
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e881:	eb 09                	jmp    c000e88c <tcp_input+0x9c0>
c000e883:	90                   	nop
c000e884:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e889:	8d 76 00             	lea    esi,[esi+0x0]
c000e88c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e891:	83 f8 f6             	cmp    eax,0xfffffff6
c000e894:	74 2a                	je     c000e8c0 <tcp_input+0x9f4>
c000e896:	66 90                	xchg   ax,ax
c000e898:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8a2:	83 ec 0c             	sub    esp,0xc
c000e8a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a9:	e8 be 15 00 00       	call   c000fe6c <tcp_output>
c000e8ae:	83 c4 10             	add    esp,0x10
c000e8b1:	eb 11                	jmp    c000e8c4 <tcp_input+0x9f8>
c000e8b3:	90                   	nop
c000e8b4:	90                   	nop
c000e8b5:	eb 0d                	jmp    c000e8c4 <tcp_input+0x9f8>
c000e8b7:	90                   	nop
c000e8b8:	90                   	nop
c000e8b9:	eb 09                	jmp    c000e8c4 <tcp_input+0x9f8>
c000e8bb:	90                   	nop
c000e8bc:	90                   	nop
c000e8bd:	eb 05                	jmp    c000e8c4 <tcp_input+0x9f8>
c000e8bf:	90                   	nop
c000e8c0:	90                   	nop
c000e8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c4:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8ce:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e8d8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e8dd:	85 c0                	test   eax,eax
c000e8df:	0f 84 b7 00 00 00    	je     c000e99c <tcp_input+0xad0>
c000e8e5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e8ea:	83 ec 0c             	sub    esp,0xc
c000e8ed:	50                   	push   eax
c000e8ee:	e8 d9 99 ff ff       	call   c00082cc <pbuf_free>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e900:	e9 97 00 00 00       	jmp    c000e99c <tcp_input+0xad0>
c000e905:	8d 76 00             	lea    esi,[esi+0x0]
c000e908:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e90d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e911:	0f b7 c0             	movzx  eax,ax
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	50                   	push   eax
c000e918:	e8 ff 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e91d:	83 c4 10             	add    esp,0x10
c000e920:	0f b7 c0             	movzx  eax,ax
c000e923:	83 e0 04             	and    eax,0x4
c000e926:	75 64                	jne    c000e98c <tcp_input+0xac0>
c000e928:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e92e:	83 c0 01             	add    eax,0x1
c000e931:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e937:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e93d:	83 c0 01             	add    eax,0x1
c000e940:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e946:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e94b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e94e:	0f b7 c8             	movzx  ecx,ax
c000e951:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e956:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e95a:	0f b7 d0             	movzx  edx,ax
c000e95d:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e963:	0f b7 d8             	movzx  ebx,ax
c000e966:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e96b:	01 c3                	add    ebx,eax
c000e96d:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e972:	83 ec 08             	sub    esp,0x8
c000e975:	51                   	push   ecx
c000e976:	52                   	push   edx
c000e977:	68 90 68 03 c0       	push   0xc0036890
c000e97c:	68 98 68 03 c0       	push   0xc0036898
c000e981:	53                   	push   ebx
c000e982:	50                   	push   eax
c000e983:	e8 70 19 00 00       	call   c00102f8 <tcp_rst>
c000e988:	83 c4 20             	add    esp,0x20
c000e98b:	90                   	nop
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e993:	e8 34 99 ff ff       	call   c00082cc <pbuf_free>
c000e998:	83 c4 10             	add    esp,0x10
c000e99b:	90                   	nop
c000e99c:	83 c4 18             	add    esp,0x18
c000e99f:	5b                   	pop    ebx
c000e9a0:	c3                   	ret    
c000e9a1:	66 90                	xchg   ax,ax
c000e9a3:	90                   	nop

c000e9a4 <tcp_output_alloc_header>:
c000e9a4:	83 ec 2c             	sub    esp,0x2c
c000e9a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9af:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e9b4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e9b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9c1:	01 d0                	add    eax,edx
c000e9c3:	83 c0 14             	add    eax,0x14
c000e9c6:	0f b7 c0             	movzx  eax,ax
c000e9c9:	83 ec 04             	sub    esp,0x4
c000e9cc:	6a 00                	push   0x0
c000e9ce:	50                   	push   eax
c000e9cf:	6a 01                	push   0x1
c000e9d1:	e8 d2 9a ff ff       	call   c00084a8 <pbuf_alloc>
c000e9d6:	83 c4 10             	add    esp,0x10
c000e9d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e9e2:	0f 84 18 01 00 00    	je     c000eb00 <tcp_output_alloc_header+0x15c>
c000e9e8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e9ed:	8d 50 13             	lea    edx,[eax+0x13]
c000e9f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9f4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000e9f8:	0f b7 c0             	movzx  eax,ax
c000e9fb:	39 c2                	cmp    edx,eax
c000e9fd:	7c 15                	jl     c000ea14 <tcp_output_alloc_header+0x70>
c000e9ff:	83 ec 08             	sub    esp,0x8
c000ea02:	68 e0 05 03 c0       	push   0xc00305e0
c000ea07:	68 c6 f9 02 c0       	push   0xc002f9c6
c000ea0c:	e8 b7 10 01 00       	call   c001fac8 <CPrintf>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea26:	0f b7 c0             	movzx  eax,ax
c000ea29:	83 ec 0c             	sub    esp,0xc
c000ea2c:	50                   	push   eax
c000ea2d:	e8 ea 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea32:	83 c4 10             	add    esp,0x10
c000ea35:	89 c2                	mov    edx,eax
c000ea37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea3b:	66 89 10             	mov    WORD PTR [eax],dx
c000ea3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea42:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ea46:	0f b7 c0             	movzx  eax,ax
c000ea49:	83 ec 0c             	sub    esp,0xc
c000ea4c:	50                   	push   eax
c000ea4d:	e8 ca 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea52:	83 c4 10             	add    esp,0x10
c000ea55:	89 c2                	mov    edx,eax
c000ea57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea5b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000ea5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea6e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	e8 c6 21 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ea7a:	83 c4 10             	add    esp,0x10
c000ea7d:	89 c2                	mov    edx,eax
c000ea7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea86:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea8b:	c1 e8 02             	shr    eax,0x2
c000ea8e:	83 c0 05             	add    eax,0x5
c000ea91:	c1 e0 0c             	shl    eax,0xc
c000ea94:	83 c8 10             	or     eax,0x10
c000ea97:	0f b7 c0             	movzx  eax,ax
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	50                   	push   eax
c000ea9e:	e8 79 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	89 c2                	mov    edx,eax
c000eaa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaac:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000eab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eab4:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eab8:	0f b7 c0             	movzx  eax,ax
c000eabb:	83 ec 0c             	sub    esp,0xc
c000eabe:	50                   	push   eax
c000eabf:	e8 58 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	89 c2                	mov    edx,eax
c000eac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eacd:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ead1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ead5:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eadb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eadf:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eaec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaf0:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	01 c2                	add    edx,eax
c000eaf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eafd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eb00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb04:	83 c4 2c             	add    esp,0x2c
c000eb07:	c3                   	ret    

c000eb08 <tcp_create_segment>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 28             	sub    esp,0x28
c000eb0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb10:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eb14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eb18:	88 d0                	mov    al,dl
c000eb1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eb1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb23:	c1 e0 02             	shl    eax,0x2
c000eb26:	83 e0 04             	and    eax,0x4
c000eb29:	88 c2                	mov    dl,al
c000eb2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb30:	83 e0 02             	and    eax,0x2
c000eb33:	74 07                	je     c000eb3c <tcp_create_segment+0x34>
c000eb35:	b0 0c                	mov    al,0xc
c000eb37:	eb 07                	jmp    c000eb40 <tcp_create_segment+0x38>
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	b0 00                	mov    al,0x0
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	01 d0                	add    eax,edx
c000eb42:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	6a 04                	push   0x4
c000eb4b:	e8 90 8d ff ff       	call   c00078e0 <memp_malloc>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb5c:	75 1a                	jne    c000eb78 <tcp_create_segment+0x70>
c000eb5e:	83 ec 0c             	sub    esp,0xc
c000eb61:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb65:	e8 62 97 ff ff       	call   c00082cc <pbuf_free>
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	b8 00 00 00 00       	mov    eax,0x0
c000eb72:	e9 31 01 00 00       	jmp    c000eca8 <tcp_create_segment+0x1a0>
c000eb77:	90                   	nop
c000eb78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb7c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eb80:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eb83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb91:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb9c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eb9f:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eba4:	89 d1                	mov    ecx,edx
c000eba6:	29 c1                	sub    ecx,eax
c000eba8:	89 c8                	mov    eax,ecx
c000ebaa:	89 c2                	mov    edx,eax
c000ebac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ebb4:	83 ec 08             	sub    esp,0x8
c000ebb7:	6a 14                	push   0x14
c000ebb9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ebbd:	e8 6a 95 ff ff       	call   c000812c <pbuf_header>
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	0f b6 c0             	movzx  eax,al
c000ebc8:	85 c0                	test   eax,eax
c000ebca:	74 28                	je     c000ebf4 <tcp_create_segment+0xec>
c000ebcc:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ebd2:	83 c0 01             	add    eax,0x1
c000ebd5:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ebdb:	83 ec 0c             	sub    esp,0xc
c000ebde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebe2:	e8 71 b3 ff ff       	call   c0009f58 <tcp_seg_free>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	b8 00 00 00 00       	mov    eax,0x0
c000ebef:	e9 b4 00 00 00       	jmp    c000eca8 <tcp_create_segment+0x1a0>
c000ebf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ebfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec0c:	0f b7 c0             	movzx  eax,ax
c000ec0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec13:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec16:	83 ec 0c             	sub    esp,0xc
c000ec19:	50                   	push   eax
c000ec1a:	e8 fd 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	66 89 03             	mov    WORD PTR [ebx],ax
c000ec25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec29:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec2d:	0f b7 c0             	movzx  eax,ax
c000ec30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec34:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec37:	83 ec 0c             	sub    esp,0xc
c000ec3a:	50                   	push   eax
c000ec3b:	e8 dc 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec40:	83 c4 10             	add    esp,0x10
c000ec43:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ec47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec4b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec4e:	83 ec 0c             	sub    esp,0xc
c000ec51:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec55:	e8 e6 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec60:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec65:	c1 e8 02             	shr    eax,0x2
c000ec68:	0f b6 c0             	movzx  eax,al
c000ec6b:	83 c0 05             	add    eax,0x5
c000ec6e:	c1 e0 0c             	shl    eax,0xc
c000ec71:	89 c2                	mov    edx,eax
c000ec73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ec78:	09 d0                	or     eax,edx
c000ec7a:	0f b7 c0             	movzx  eax,ax
c000ec7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	50                   	push   eax
c000ec88:	e8 8f 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec8d:	83 c4 10             	add    esp,0x10
c000ec90:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ec94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec9b:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]
c000eca8:	83 c4 28             	add    esp,0x28
c000ecab:	5b                   	pop    ebx
c000ecac:	c3                   	ret    
c000ecad:	8d 76 00             	lea    esi,[esi+0x0]

c000ecb0 <tcp_pbuf_prealloc>:
c000ecb0:	53                   	push   ebx
c000ecb1:	83 ec 28             	sub    esp,0x28
c000ecb4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ecb8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecbc:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ecc0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ecc4:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ecc9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecce:	88 d8                	mov    al,bl
c000ecd0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ecd4:	88 c8                	mov    al,cl
c000ecd6:	88 04 24             	mov    BYTE PTR [esp],al
c000ecd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecdd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ece2:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ece7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ecec:	39 c2                	cmp    edx,eax
c000ecee:	73 64                	jae    c000ed54 <tcp_pbuf_prealloc+0xa4>
c000ecf0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ecf5:	83 e0 02             	and    eax,0x2
c000ecf8:	75 2e                	jne    c000ed28 <tcp_pbuf_prealloc+0x78>
c000ecfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecfe:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed01:	0f b6 c0             	movzx  eax,al
c000ed04:	83 e0 40             	and    eax,0x40
c000ed07:	75 4b                	jne    c000ed54 <tcp_pbuf_prealloc+0xa4>
c000ed09:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed0d:	85 c0                	test   eax,eax
c000ed0f:	74 17                	je     c000ed28 <tcp_pbuf_prealloc+0x78>
c000ed11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed15:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ed18:	85 c0                	test   eax,eax
c000ed1a:	75 0c                	jne    c000ed28 <tcp_pbuf_prealloc+0x78>
c000ed1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed20:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ed23:	85 c0                	test   eax,eax
c000ed25:	74 2d                	je     c000ed54 <tcp_pbuf_prealloc+0xa4>
c000ed27:	90                   	nop
c000ed28:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed2d:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ed33:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed38:	39 c2                	cmp    edx,eax
c000ed3a:	7d 0c                	jge    c000ed48 <tcp_pbuf_prealloc+0x98>
c000ed3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed40:	05 18 02 00 00       	add    eax,0x218
c000ed45:	eb 05                	jmp    c000ed4c <tcp_pbuf_prealloc+0x9c>
c000ed47:	90                   	nop
c000ed48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed4c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed51:	8d 76 00             	lea    esi,[esi+0x0]
c000ed54:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed59:	83 ec 04             	sub    esp,0x4
c000ed5c:	6a 00                	push   0x0
c000ed5e:	50                   	push   eax
c000ed5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed63:	e8 40 97 ff ff       	call   c00084a8 <pbuf_alloc>
c000ed68:	83 c4 10             	add    esp,0x10
c000ed6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed6f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed74:	75 0a                	jne    c000ed80 <tcp_pbuf_prealloc+0xd0>
c000ed76:	b8 00 00 00 00       	mov    eax,0x0
c000ed7b:	eb 5f                	jmp    c000eddc <tcp_pbuf_prealloc+0x12c>
c000ed7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed86:	85 c0                	test   eax,eax
c000ed88:	74 16                	je     c000eda0 <tcp_pbuf_prealloc+0xf0>
c000ed8a:	83 ec 08             	sub    esp,0x8
c000ed8d:	68 64 08 03 c0       	push   0xc0030864
c000ed92:	68 c6 f9 02 c0       	push   0xc002f9c6
c000ed97:	e8 2c 0d 01 00       	call   c001fac8 <CPrintf>
c000ed9c:	83 c4 10             	add    esp,0x10
c000ed9f:	90                   	nop
c000eda0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eda4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000eda8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edac:	89 d1                	mov    ecx,edx
c000edae:	29 c1                	sub    ecx,eax
c000edb0:	89 c8                	mov    eax,ecx
c000edb2:	89 c2                	mov    edx,eax
c000edb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edb8:	66 89 10             	mov    WORD PTR [eax],dx
c000edbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000edc3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000edc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edcb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000edce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd2:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000edd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edda:	66 90                	xchg   ax,ax
c000eddc:	83 c4 28             	add    esp,0x28
c000eddf:	5b                   	pop    ebx
c000ede0:	c3                   	ret    
c000ede1:	8d 76 00             	lea    esi,[esi+0x0]

c000ede4 <tcp_write_checks>:
c000ede4:	83 ec 1c             	sub    esp,0x1c
c000ede7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000edeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000edf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edf7:	83 f8 04             	cmp    eax,0x4
c000edfa:	74 2c                	je     c000ee28 <tcp_write_checks+0x44>
c000edfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee03:	83 f8 07             	cmp    eax,0x7
c000ee06:	74 20                	je     c000ee28 <tcp_write_checks+0x44>
c000ee08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee0f:	83 f8 02             	cmp    eax,0x2
c000ee12:	74 14                	je     c000ee28 <tcp_write_checks+0x44>
c000ee14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee1b:	83 f8 03             	cmp    eax,0x3
c000ee1e:	74 08                	je     c000ee28 <tcp_write_checks+0x44>
c000ee20:	b0 f3                	mov    al,0xf3
c000ee22:	e9 f9 00 00 00       	jmp    c000ef20 <tcp_write_checks+0x13c>
c000ee27:	90                   	nop
c000ee28:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ee2d:	85 c0                	test   eax,eax
c000ee2f:	75 07                	jne    c000ee38 <tcp_write_checks+0x54>
c000ee31:	b0 00                	mov    al,0x0
c000ee33:	e9 e8 00 00 00       	jmp    c000ef20 <tcp_write_checks+0x13c>
c000ee38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee3c:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ee40:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ee45:	0f b7 c0             	movzx  eax,ax
c000ee48:	39 c2                	cmp    edx,eax
c000ee4a:	76 1c                	jbe    c000ee68 <tcp_write_checks+0x84>
c000ee4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee50:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee53:	83 c8 80             	or     eax,0xffffff80
c000ee56:	88 c2                	mov    dl,al
c000ee58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee5f:	b0 ff                	mov    al,0xff
c000ee61:	e9 ba 00 00 00       	jmp    c000ef20 <tcp_write_checks+0x13c>
c000ee66:	66 90                	xchg   ax,ax
c000ee68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee6c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee6f:	0f b7 c0             	movzx  eax,ax
c000ee72:	83 f8 01             	cmp    eax,0x1
c000ee75:	77 11                	ja     c000ee88 <tcp_write_checks+0xa4>
c000ee77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee7e:	0f b7 c0             	movzx  eax,ax
c000ee81:	3d fc ff 00 00       	cmp    eax,0xfffc
c000ee86:	76 28                	jbe    c000eeb0 <tcp_write_checks+0xcc>
c000ee88:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ee8e:	83 c0 01             	add    eax,0x1
c000ee91:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ee97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee9b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee9e:	83 c8 80             	or     eax,0xffffff80
c000eea1:	88 c2                	mov    dl,al
c000eea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea7:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000eeaa:	b0 ff                	mov    al,0xff
c000eeac:	eb 72                	jmp    c000ef20 <tcp_write_checks+0x13c>
c000eeae:	66 90                	xchg   ax,ax
c000eeb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eeb7:	0f b7 c0             	movzx  eax,ax
c000eeba:	85 c0                	test   eax,eax
c000eebc:	74 2e                	je     c000eeec <tcp_write_checks+0x108>
c000eebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec2:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eec5:	85 c0                	test   eax,eax
c000eec7:	75 53                	jne    c000ef1c <tcp_write_checks+0x138>
c000eec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eecd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eed0:	85 c0                	test   eax,eax
c000eed2:	75 48                	jne    c000ef1c <tcp_write_checks+0x138>
c000eed4:	83 ec 08             	sub    esp,0x8
c000eed7:	68 10 06 03 c0       	push   0xc0030610
c000eedc:	68 c6 f9 02 c0       	push   0xc002f9c6
c000eee1:	e8 e2 0b 01 00       	call   c001fac8 <CPrintf>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	eb 31                	jmp    c000ef1c <tcp_write_checks+0x138>
c000eeeb:	90                   	nop
c000eeec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eef3:	85 c0                	test   eax,eax
c000eef5:	75 0d                	jne    c000ef04 <tcp_write_checks+0x120>
c000eef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eefe:	85 c0                	test   eax,eax
c000ef00:	74 1a                	je     c000ef1c <tcp_write_checks+0x138>
c000ef02:	66 90                	xchg   ax,ax
c000ef04:	83 ec 08             	sub    esp,0x8
c000ef07:	68 4c 06 03 c0       	push   0xc003064c
c000ef0c:	68 c6 f9 02 c0       	push   0xc002f9c6
c000ef11:	e8 b2 0b 01 00       	call   c001fac8 <CPrintf>
c000ef16:	83 c4 10             	add    esp,0x10
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	b0 00                	mov    al,0x0
c000ef1e:	66 90                	xchg   ax,ax
c000ef20:	83 c4 1c             	add    esp,0x1c
c000ef23:	c3                   	ret    

c000ef24 <tcp_write>:
c000ef24:	56                   	push   esi
c000ef25:	53                   	push   ebx
c000ef26:	83 ec 54             	sub    esp,0x54
c000ef29:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ef2d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ef31:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ef36:	88 d0                	mov    al,dl
c000ef38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ef3c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef44:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef4c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef54:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef5c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef64:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef6b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef70:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000ef75:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000ef7c:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000ef83:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000ef88:	75 1e                	jne    c000efa8 <tcp_write+0x84>
c000ef8a:	83 ec 08             	sub    esp,0x8
c000ef8d:	68 80 06 03 c0       	push   0xc0030680
c000ef92:	68 c6 f9 02 c0       	push   0xc002f9c6
c000ef97:	e8 2c 0b 01 00       	call   c001fac8 <CPrintf>
c000ef9c:	83 c4 10             	add    esp,0x10
c000ef9f:	b0 f2                	mov    al,0xf2
c000efa1:	e9 1e 08 00 00       	jmp    c000f7c4 <tcp_write+0x8a0>
c000efa6:	66 90                	xchg   ax,ax
c000efa8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000efad:	83 ec 08             	sub    esp,0x8
c000efb0:	50                   	push   eax
c000efb1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000efb5:	e8 2a fe ff ff       	call   c000ede4 <tcp_write_checks>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000efc1:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000efc6:	85 c0                	test   eax,eax
c000efc8:	74 0a                	je     c000efd4 <tcp_write+0xb0>
c000efca:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000efce:	e9 f1 07 00 00       	jmp    c000f7c4 <tcp_write+0x8a0>
c000efd3:	90                   	nop
c000efd4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efd8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000efdb:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000efe0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efe4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000efe7:	85 c0                	test   eax,eax
c000efe9:	0f 84 79 02 00 00    	je     c000f268 <tcp_write+0x344>
c000efef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eff3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eff6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000effa:	eb 0c                	jmp    c000f008 <tcp_write+0xe4>
c000effc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f000:	8b 00                	mov    eax,DWORD PTR [eax]
c000f002:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f006:	66 90                	xchg   ax,ax
c000f008:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f00c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00e:	85 c0                	test   eax,eax
c000f010:	75 ea                	jne    c000effc <tcp_write+0xd8>
c000f012:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f016:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f019:	0f b6 c0             	movzx  eax,al
c000f01c:	c1 e0 02             	shl    eax,0x2
c000f01f:	83 e0 04             	and    eax,0x4
c000f022:	89 c2                	mov    edx,eax
c000f024:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f028:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f02b:	0f b6 c0             	movzx  eax,al
c000f02e:	83 e0 02             	and    eax,0x2
c000f031:	74 09                	je     c000f03c <tcp_write+0x118>
c000f033:	b8 0c 00 00 00       	mov    eax,0xc
c000f038:	eb 0a                	jmp    c000f044 <tcp_write+0x120>
c000f03a:	66 90                	xchg   ax,ax
c000f03c:	b8 00 00 00 00       	mov    eax,0x0
c000f041:	8d 76 00             	lea    esi,[esi+0x0]
c000f044:	01 d0                	add    eax,edx
c000f046:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f04b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f04f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f052:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f056:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f059:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f05e:	01 c8                	add    eax,ecx
c000f060:	89 d6                	mov    esi,edx
c000f062:	29 c6                	sub    esi,eax
c000f064:	89 f0                	mov    eax,esi
c000f066:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f06b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f06f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f073:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f078:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f07d:	0f b7 c0             	movzx  eax,ax
c000f080:	85 c0                	test   eax,eax
c000f082:	0f 84 84 00 00 00    	je     c000f10c <tcp_write+0x1e8>
c000f088:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f08d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f092:	39 c2                	cmp    edx,eax
c000f094:	76 16                	jbe    c000f0ac <tcp_write+0x188>
c000f096:	83 ec 08             	sub    esp,0x8
c000f099:	68 b4 06 03 c0       	push   0xc00306b4
c000f09e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f0a3:	e8 20 0a 01 00       	call   c001fac8 <CPrintf>
c000f0a8:	83 c4 10             	add    esp,0x10
c000f0ab:	90                   	nop
c000f0ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0b0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0b4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0bd:	0f b7 d8             	movzx  ebx,ax
c000f0c0:	0f b7 ca             	movzx  ecx,dx
c000f0c3:	39 cb                	cmp    ebx,ecx
c000f0c5:	76 05                	jbe    c000f0cc <tcp_write+0x1a8>
c000f0c7:	89 d0                	mov    eax,edx
c000f0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0cc:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f0d1:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f0d6:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0db:	01 d0                	add    eax,edx
c000f0dd:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f0e2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0e7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0ec:	89 d6                	mov    esi,edx
c000f0ee:	29 c6                	sub    esi,eax
c000f0f0:	89 f0                	mov    eax,esi
c000f0f2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f0fb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f100:	89 d6                	mov    esi,edx
c000f102:	29 c6                	sub    esi,eax
c000f104:	89 f0                	mov    eax,esi
c000f106:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f10b:	90                   	nop
c000f10c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f111:	0f b7 c0             	movzx  eax,ax
c000f114:	85 c0                	test   eax,eax
c000f116:	74 24                	je     c000f13c <tcp_write+0x218>
c000f118:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f11d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f122:	39 c2                	cmp    edx,eax
c000f124:	74 16                	je     c000f13c <tcp_write+0x218>
c000f126:	83 ec 08             	sub    esp,0x8
c000f129:	68 78 08 03 c0       	push   0xc0030878
c000f12e:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f133:	e8 90 09 01 00       	call   c001fac8 <CPrintf>
c000f138:	83 c4 10             	add    esp,0x10
c000f13b:	90                   	nop
c000f13c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f141:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f146:	39 c2                	cmp    edx,eax
c000f148:	0f 83 ca 03 00 00    	jae    c000f518 <tcp_write+0x5f4>
c000f14e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f153:	85 c0                	test   eax,eax
c000f155:	0f 84 bd 03 00 00    	je     c000f518 <tcp_write+0x5f4>
c000f15b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f15f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f162:	0f b7 c0             	movzx  eax,ax
c000f165:	85 c0                	test   eax,eax
c000f167:	0f 84 ab 03 00 00    	je     c000f518 <tcp_write+0x5f4>
c000f16d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f172:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f177:	29 c2                	sub    edx,eax
c000f179:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f17e:	39 c2                	cmp    edx,eax
c000f180:	0f 4e c2             	cmovle eax,edx
c000f183:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f188:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f18c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f190:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f195:	83 e0 01             	and    eax,0x1
c000f198:	74 62                	je     c000f1fc <tcp_write+0x2d8>
c000f19a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f19f:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1a4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1a9:	83 ec 04             	sub    esp,0x4
c000f1ac:	6a 01                	push   0x1
c000f1ae:	51                   	push   ecx
c000f1af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1b3:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f1b7:	51                   	push   ecx
c000f1b8:	52                   	push   edx
c000f1b9:	50                   	push   eax
c000f1ba:	6a 03                	push   0x3
c000f1bc:	e8 ef fa ff ff       	call   c000ecb0 <tcp_pbuf_prealloc>
c000f1c1:	83 c4 20             	add    esp,0x20
c000f1c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1c8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1cd:	0f 84 4d 05 00 00    	je     c000f720 <tcp_write+0x7fc>
c000f1d3:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f1d8:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f1dd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f1e1:	01 c1                	add    ecx,eax
c000f1e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1ea:	83 ec 04             	sub    esp,0x4
c000f1ed:	52                   	push   edx
c000f1ee:	51                   	push   ecx
c000f1ef:	50                   	push   eax
c000f1f0:	e8 85 11 ff ff       	call   c000037a <memcpy>
c000f1f5:	83 c4 10             	add    esp,0x10
c000f1f8:	eb 3a                	jmp    c000f234 <tcp_write+0x310>
c000f1fa:	66 90                	xchg   ax,ax
c000f1fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f201:	83 ec 04             	sub    esp,0x4
c000f204:	6a 01                	push   0x1
c000f206:	50                   	push   eax
c000f207:	6a 03                	push   0x3
c000f209:	e8 9a 92 ff ff       	call   c00084a8 <pbuf_alloc>
c000f20e:	83 c4 10             	add    esp,0x10
c000f211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f215:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f21a:	0f 84 04 05 00 00    	je     c000f724 <tcp_write+0x800>
c000f220:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f225:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f229:	01 c2                	add    edx,eax
c000f22b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f22f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f232:	66 90                	xchg   ax,ax
c000f234:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f23d:	01 d0                	add    eax,edx
c000f23f:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f244:	83 ec 0c             	sub    esp,0xc
c000f247:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f24b:	e8 58 98 ff ff       	call   c0008aa8 <pbuf_clen>
c000f250:	83 c4 10             	add    esp,0x10
c000f253:	0f b6 c0             	movzx  eax,al
c000f256:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f25a:	01 d0                	add    eax,edx
c000f25c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f261:	e9 b2 02 00 00       	jmp    c000f518 <tcp_write+0x5f4>
c000f266:	66 90                	xchg   ax,ax
c000f268:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f26c:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f270:	0f b7 c0             	movzx  eax,ax
c000f273:	85 c0                	test   eax,eax
c000f275:	0f 84 9d 02 00 00    	je     c000f518 <tcp_write+0x5f4>
c000f27b:	83 ec 08             	sub    esp,0x8
c000f27e:	68 d4 06 03 c0       	push   0xc00306d4
c000f283:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f288:	e8 3b 08 01 00       	call   c001fac8 <CPrintf>
c000f28d:	83 c4 10             	add    esp,0x10
c000f290:	e9 83 02 00 00       	jmp    c000f518 <tcp_write+0x5f4>
c000f295:	8d 76 00             	lea    esi,[esi+0x0]
c000f298:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f29c:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f2a1:	89 d3                	mov    ebx,edx
c000f2a3:	29 c3                	sub    ebx,eax
c000f2a5:	89 d8                	mov    eax,ebx
c000f2a7:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f2ac:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f2b3:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2b8:	89 d6                	mov    esi,edx
c000f2ba:	29 c6                	sub    esi,eax
c000f2bc:	89 f0                	mov    eax,esi
c000f2be:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f2c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f2c7:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f2cc:	0f b7 d8             	movzx  ebx,ax
c000f2cf:	0f b7 ca             	movzx  ecx,dx
c000f2d2:	39 cb                	cmp    ebx,ecx
c000f2d4:	76 02                	jbe    c000f2d8 <tcp_write+0x3b4>
c000f2d6:	89 d0                	mov    eax,edx
c000f2d8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f2dd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f2e2:	83 e0 01             	and    eax,0x1
c000f2e5:	0f 84 b1 00 00 00    	je     c000f39c <tcp_write+0x478>
c000f2eb:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f2f0:	0f 94 c0             	sete   al
c000f2f3:	0f b6 d8             	movzx  ebx,al
c000f2f6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f2fb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f302:	0f b7 d0             	movzx  edx,ax
c000f305:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f30a:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f30f:	01 f0                	add    eax,esi
c000f311:	0f b7 c0             	movzx  eax,ax
c000f314:	83 ec 04             	sub    esp,0x4
c000f317:	53                   	push   ebx
c000f318:	51                   	push   ecx
c000f319:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f31d:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f321:	51                   	push   ecx
c000f322:	52                   	push   edx
c000f323:	50                   	push   eax
c000f324:	6a 00                	push   0x0
c000f326:	e8 85 f9 ff ff       	call   c000ecb0 <tcp_pbuf_prealloc>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f332:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f337:	0f 84 eb 03 00 00    	je     c000f728 <tcp_write+0x804>
c000f33d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f341:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f345:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f34a:	0f b7 c0             	movzx  eax,ax
c000f34d:	39 c2                	cmp    edx,eax
c000f34f:	76 17                	jbe    c000f368 <tcp_write+0x444>
c000f351:	83 ec 08             	sub    esp,0x8
c000f354:	68 04 07 03 c0       	push   0xc0030704
c000f359:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f35e:	e8 65 07 01 00       	call   c001fac8 <CPrintf>
c000f363:	83 c4 10             	add    esp,0x10
c000f366:	66 90                	xchg   ax,ax
c000f368:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f36d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f372:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f376:	01 d1                	add    ecx,edx
c000f378:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f37c:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f37f:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f384:	01 da                	add    edx,ebx
c000f386:	83 ec 04             	sub    esp,0x4
c000f389:	50                   	push   eax
c000f38a:	51                   	push   ecx
c000f38b:	52                   	push   edx
c000f38c:	e8 e9 0f ff ff       	call   c000037a <memcpy>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	e9 a7 00 00 00       	jmp    c000f440 <tcp_write+0x51c>
c000f399:	8d 76 00             	lea    esi,[esi+0x0]
c000f39c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f3a1:	0f b7 c0             	movzx  eax,ax
c000f3a4:	85 c0                	test   eax,eax
c000f3a6:	74 18                	je     c000f3c0 <tcp_write+0x49c>
c000f3a8:	83 ec 08             	sub    esp,0x8
c000f3ab:	68 96 08 03 c0       	push   0xc0030896
c000f3b0:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f3b5:	e8 0e 07 01 00       	call   c001fac8 <CPrintf>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 00                	push   0x0
c000f3cd:	e8 d6 90 ff ff       	call   c00084a8 <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f3d9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f3de:	0f 84 48 03 00 00    	je     c000f72c <tcp_write+0x808>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f3fb:	83 ec 04             	sub    esp,0x4
c000f3fe:	6a 00                	push   0x0
c000f400:	50                   	push   eax
c000f401:	6a 00                	push   0x0
c000f403:	e8 a0 90 ff ff       	call   c00084a8 <pbuf_alloc>
c000f408:	83 c4 10             	add    esp,0x10
c000f40b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f40f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f414:	75 16                	jne    c000f42c <tcp_write+0x508>
c000f416:	83 ec 0c             	sub    esp,0xc
c000f419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f41d:	e8 aa 8e ff ff       	call   c00082cc <pbuf_free>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	e9 0a 03 00 00       	jmp    c000f734 <tcp_write+0x810>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	83 ec 08             	sub    esp,0x8
c000f42f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f433:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f437:	e8 d4 96 ff ff       	call   c0008b10 <pbuf_cat>
c000f43c:	83 c4 10             	add    esp,0x10
c000f43f:	90                   	nop
c000f440:	83 ec 0c             	sub    esp,0xc
c000f443:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f447:	e8 5c 96 ff ff       	call   c0008aa8 <pbuf_clen>
c000f44c:	83 c4 10             	add    esp,0x10
c000f44f:	0f b6 c0             	movzx  eax,al
c000f452:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f456:	01 d0                	add    eax,edx
c000f458:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f45d:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f462:	83 f8 02             	cmp    eax,0x2
c000f465:	77 0d                	ja     c000f474 <tcp_write+0x550>
c000f467:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f46c:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f471:	76 15                	jbe    c000f488 <tcp_write+0x564>
c000f473:	90                   	nop
c000f474:	83 ec 0c             	sub    esp,0xc
c000f477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f47b:	e8 4c 8e ff ff       	call   c00082cc <pbuf_free>
c000f480:	83 c4 10             	add    esp,0x10
c000f483:	e9 ac 02 00 00       	jmp    c000f734 <tcp_write+0x810>
c000f488:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f48d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f491:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f494:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f499:	01 ca                	add    edx,ecx
c000f49b:	83 ec 0c             	sub    esp,0xc
c000f49e:	50                   	push   eax
c000f49f:	52                   	push   edx
c000f4a0:	6a 00                	push   0x0
c000f4a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f4a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f4aa:	e8 59 f6 ff ff       	call   c000eb08 <tcp_create_segment>
c000f4af:	83 c4 20             	add    esp,0x20
c000f4b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f4b6:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f4bb:	0f 84 6f 02 00 00    	je     c000f730 <tcp_write+0x80c>
c000f4c1:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4c6:	75 0c                	jne    c000f4d4 <tcp_write+0x5b0>
c000f4c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4d0:	eb 2a                	jmp    c000f4fc <tcp_write+0x5d8>
c000f4d2:	66 90                	xchg   ax,ax
c000f4d4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f4d9:	75 15                	jne    c000f4f0 <tcp_write+0x5cc>
c000f4db:	83 ec 08             	sub    esp,0x8
c000f4de:	68 a4 08 03 c0       	push   0xc00308a4
c000f4e3:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f4e8:	e8 db 05 01 00       	call   c001fac8 <CPrintf>
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f4f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f4f8:	89 10                	mov    DWORD PTR [eax],edx
c000f4fa:	66 90                	xchg   ax,ax
c000f4fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f500:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f504:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f509:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f50e:	01 d0                	add    eax,edx
c000f510:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f515:	8d 76 00             	lea    esi,[esi+0x0]
c000f518:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f51d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f522:	39 c2                	cmp    edx,eax
c000f524:	0f 82 6e fd ff ff    	jb     c000f298 <tcp_write+0x374>
c000f52a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f52f:	85 c0                	test   eax,eax
c000f531:	0f 84 a1 00 00 00    	je     c000f5d8 <tcp_write+0x6b4>
c000f537:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f53b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f53e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f542:	eb 74                	jmp    c000f5b8 <tcp_write+0x694>
c000f544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f548:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f54b:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f550:	01 d0                	add    eax,edx
c000f552:	89 c2                	mov    edx,eax
c000f554:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f558:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f55c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f560:	8b 00                	mov    eax,DWORD PTR [eax]
c000f562:	85 c0                	test   eax,eax
c000f564:	75 46                	jne    c000f5ac <tcp_write+0x688>
c000f566:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f56b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f56f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f572:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f576:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f57a:	0f b7 d2             	movzx  edx,dx
c000f57d:	01 ca                	add    edx,ecx
c000f57f:	83 ec 04             	sub    esp,0x4
c000f582:	50                   	push   eax
c000f583:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f587:	52                   	push   edx
c000f588:	e8 ed 0d ff ff       	call   c000037a <memcpy>
c000f58d:	83 c4 10             	add    esp,0x10
c000f590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f594:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f598:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f59d:	01 d0                	add    eax,edx
c000f59f:	89 c2                	mov    edx,eax
c000f5a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a5:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5b6:	66 90                	xchg   ax,ax
c000f5b8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f5bd:	75 85                	jne    c000f544 <tcp_write+0x620>
c000f5bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5c6:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5cb:	01 d0                	add    eax,edx
c000f5cd:	89 c2                	mov    edx,eax
c000f5cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5d3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f5d7:	90                   	nop
c000f5d8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f5dd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5e1:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f5e5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f5ea:	74 50                	je     c000f63c <tcp_write+0x718>
c000f5ec:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5f1:	75 15                	jne    c000f608 <tcp_write+0x6e4>
c000f5f3:	83 ec 08             	sub    esp,0x8
c000f5f6:	68 44 07 03 c0       	push   0xc0030744
c000f5fb:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f600:	e8 c3 04 01 00       	call   c001fac8 <CPrintf>
c000f605:	83 c4 10             	add    esp,0x10
c000f608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f60c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f60f:	83 ec 08             	sub    esp,0x8
c000f612:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f616:	50                   	push   eax
c000f617:	e8 f4 94 ff ff       	call   c0008b10 <pbuf_cat>
c000f61c:	83 c4 10             	add    esp,0x10
c000f61f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f623:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f626:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f62a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f62d:	01 d0                	add    eax,edx
c000f62f:	89 c2                	mov    edx,eax
c000f631:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f635:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f639:	8d 76 00             	lea    esi,[esi+0x0]
c000f63c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f641:	75 0d                	jne    c000f650 <tcp_write+0x72c>
c000f643:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f647:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f64b:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f64e:	eb 0c                	jmp    c000f65c <tcp_write+0x738>
c000f650:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f654:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f658:	89 10                	mov    DWORD PTR [eax],edx
c000f65a:	66 90                	xchg   ax,ax
c000f65c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f660:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f663:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f668:	01 c2                	add    edx,eax
c000f66a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f66e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f671:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f675:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f67d:	89 d3                	mov    ebx,edx
c000f67f:	29 c3                	sub    ebx,eax
c000f681:	89 d8                	mov    eax,ebx
c000f683:	89 c2                	mov    edx,eax
c000f685:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f689:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f68d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f691:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f695:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f699:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f69d:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6a0:	0f b7 c0             	movzx  eax,ax
c000f6a3:	85 c0                	test   eax,eax
c000f6a5:	74 2d                	je     c000f6d4 <tcp_write+0x7b0>
c000f6a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6ab:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6ae:	85 c0                	test   eax,eax
c000f6b0:	75 22                	jne    c000f6d4 <tcp_write+0x7b0>
c000f6b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6b6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6b9:	85 c0                	test   eax,eax
c000f6bb:	75 17                	jne    c000f6d4 <tcp_write+0x7b0>
c000f6bd:	83 ec 08             	sub    esp,0x8
c000f6c0:	68 b5 08 03 c0       	push   0xc00308b5
c000f6c5:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f6ca:	e8 f9 03 01 00       	call   c001fac8 <CPrintf>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	66 90                	xchg   ax,ax
c000f6d4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f6d9:	74 3d                	je     c000f718 <tcp_write+0x7f4>
c000f6db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6e2:	85 c0                	test   eax,eax
c000f6e4:	74 32                	je     c000f718 <tcp_write+0x7f4>
c000f6e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f6eb:	83 e0 02             	and    eax,0x2
c000f6ee:	75 28                	jne    c000f718 <tcp_write+0x7f4>
c000f6f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6f7:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f6fb:	83 ec 0c             	sub    esp,0xc
c000f6fe:	6a 08                	push   0x8
c000f700:	e8 17 15 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 c2                	mov    edx,eax
c000f70a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f70e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f711:	09 da                	or     edx,ebx
c000f713:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f717:	90                   	nop
c000f718:	b0 00                	mov    al,0x0
c000f71a:	e9 a5 00 00 00       	jmp    c000f7c4 <tcp_write+0x8a0>
c000f71f:	90                   	nop
c000f720:	90                   	nop
c000f721:	eb 11                	jmp    c000f734 <tcp_write+0x810>
c000f723:	90                   	nop
c000f724:	90                   	nop
c000f725:	eb 0d                	jmp    c000f734 <tcp_write+0x810>
c000f727:	90                   	nop
c000f728:	90                   	nop
c000f729:	eb 09                	jmp    c000f734 <tcp_write+0x810>
c000f72b:	90                   	nop
c000f72c:	90                   	nop
c000f72d:	eb 05                	jmp    c000f734 <tcp_write+0x810>
c000f72f:	90                   	nop
c000f730:	90                   	nop
c000f731:	8d 76 00             	lea    esi,[esi+0x0]
c000f734:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f738:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f73b:	83 c8 80             	or     eax,0xffffff80
c000f73e:	88 c2                	mov    dl,al
c000f740:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f744:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f747:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f74d:	83 c0 01             	add    eax,0x1
c000f750:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f756:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f75b:	74 0f                	je     c000f76c <tcp_write+0x848>
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f764:	e8 63 8b ff ff       	call   c00082cc <pbuf_free>
c000f769:	83 c4 10             	add    esp,0x10
c000f76c:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f771:	74 11                	je     c000f784 <tcp_write+0x860>
c000f773:	83 ec 0c             	sub    esp,0xc
c000f776:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f77a:	e8 1d a8 ff ff       	call   c0009f9c <tcp_segs_free>
c000f77f:	83 c4 10             	add    esp,0x10
c000f782:	66 90                	xchg   ax,ax
c000f784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f788:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f78b:	0f b7 c0             	movzx  eax,ax
c000f78e:	85 c0                	test   eax,eax
c000f790:	74 2e                	je     c000f7c0 <tcp_write+0x89c>
c000f792:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f796:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f799:	85 c0                	test   eax,eax
c000f79b:	75 23                	jne    c000f7c0 <tcp_write+0x89c>
c000f79d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7a1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f7a4:	85 c0                	test   eax,eax
c000f7a6:	75 18                	jne    c000f7c0 <tcp_write+0x89c>
c000f7a8:	83 ec 08             	sub    esp,0x8
c000f7ab:	68 b5 08 03 c0       	push   0xc00308b5
c000f7b0:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f7b5:	e8 0e 03 01 00       	call   c001fac8 <CPrintf>
c000f7ba:	83 c4 10             	add    esp,0x10
c000f7bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f7c0:	b0 ff                	mov    al,0xff
c000f7c2:	66 90                	xchg   ax,ax
c000f7c4:	83 c4 54             	add    esp,0x54
c000f7c7:	5b                   	pop    ebx
c000f7c8:	5e                   	pop    esi
c000f7c9:	c3                   	ret    
c000f7ca:	66 90                	xchg   ax,ax

c000f7cc <tcp_enqueue_flags>:
c000f7cc:	83 ec 3c             	sub    esp,0x3c
c000f7cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f7d7:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f7dc:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f7e1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f7e6:	83 e0 03             	and    eax,0x3
c000f7e9:	75 15                	jne    c000f800 <tcp_enqueue_flags+0x34>
c000f7eb:	83 ec 08             	sub    esp,0x8
c000f7ee:	68 7c 07 03 c0       	push   0xc003077c
c000f7f3:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f7f8:	e8 cb 02 01 00       	call   c001fac8 <CPrintf>
c000f7fd:	83 c4 10             	add    esp,0x10
c000f800:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f804:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f807:	0f b7 c0             	movzx  eax,ax
c000f80a:	83 f8 01             	cmp    eax,0x1
c000f80d:	77 11                	ja     c000f820 <tcp_enqueue_flags+0x54>
c000f80f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f813:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f816:	0f b7 c0             	movzx  eax,ax
c000f819:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f81e:	76 2c                	jbe    c000f84c <tcp_enqueue_flags+0x80>
c000f820:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f826:	83 c0 01             	add    eax,0x1
c000f829:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f82f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f833:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f836:	83 c8 80             	or     eax,0xffffff80
c000f839:	88 c2                	mov    dl,al
c000f83b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f83f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f842:	b0 ff                	mov    al,0xff
c000f844:	e9 6f 02 00 00       	jmp    c000fab8 <tcp_enqueue_flags+0x2ec>
c000f849:	8d 76 00             	lea    esi,[esi+0x0]
c000f84c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f851:	83 e0 02             	and    eax,0x2
c000f854:	74 06                	je     c000f85c <tcp_enqueue_flags+0x90>
c000f856:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f85b:	90                   	nop
c000f85c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f861:	c1 e0 02             	shl    eax,0x2
c000f864:	83 e0 04             	and    eax,0x4
c000f867:	88 c2                	mov    dl,al
c000f869:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f86e:	83 e0 02             	and    eax,0x2
c000f871:	74 05                	je     c000f878 <tcp_enqueue_flags+0xac>
c000f873:	b0 0c                	mov    al,0xc
c000f875:	eb 05                	jmp    c000f87c <tcp_enqueue_flags+0xb0>
c000f877:	90                   	nop
c000f878:	b0 00                	mov    al,0x0
c000f87a:	66 90                	xchg   ax,ax
c000f87c:	01 d0                	add    eax,edx
c000f87e:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f882:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f886:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f88a:	0f b7 c0             	movzx  eax,ax
c000f88d:	85 c0                	test   eax,eax
c000f88f:	75 17                	jne    c000f8a8 <tcp_enqueue_flags+0xdc>
c000f891:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f897:	83 c0 01             	add    eax,0x1
c000f89a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8a0:	b0 ff                	mov    al,0xff
c000f8a2:	e9 11 02 00 00       	jmp    c000fab8 <tcp_enqueue_flags+0x2ec>
c000f8a7:	90                   	nop
c000f8a8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8ad:	83 ec 04             	sub    esp,0x4
c000f8b0:	6a 00                	push   0x0
c000f8b2:	50                   	push   eax
c000f8b3:	6a 00                	push   0x0
c000f8b5:	e8 ee 8b ff ff       	call   c00084a8 <pbuf_alloc>
c000f8ba:	83 c4 10             	add    esp,0x10
c000f8bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f8c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f8c6:	75 2c                	jne    c000f8f4 <tcp_enqueue_flags+0x128>
c000f8c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8cc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8cf:	83 c8 80             	or     eax,0xffffff80
c000f8d2:	88 c2                	mov    dl,al
c000f8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8d8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8db:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8e1:	83 c0 01             	add    eax,0x1
c000f8e4:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8ea:	b0 ff                	mov    al,0xff
c000f8ec:	e9 c7 01 00 00       	jmp    c000fab8 <tcp_enqueue_flags+0x2ec>
c000f8f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8f8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f8fc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f901:	0f b7 d2             	movzx  edx,dx
c000f904:	0f b7 c0             	movzx  eax,ax
c000f907:	39 c2                	cmp    edx,eax
c000f909:	73 15                	jae    c000f920 <tcp_enqueue_flags+0x154>
c000f90b:	83 ec 08             	sub    esp,0x8
c000f90e:	68 d4 07 03 c0       	push   0xc00307d4
c000f913:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f918:	e8 ab 01 01 00       	call   c001fac8 <CPrintf>
c000f91d:	83 c4 10             	add    esp,0x10
c000f920:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f925:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f929:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f92c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f931:	83 ec 0c             	sub    esp,0xc
c000f934:	51                   	push   ecx
c000f935:	52                   	push   edx
c000f936:	50                   	push   eax
c000f937:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f93b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f93f:	e8 c4 f1 ff ff       	call   c000eb08 <tcp_create_segment>
c000f944:	83 c4 20             	add    esp,0x20
c000f947:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f94b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f950:	75 2a                	jne    c000f97c <tcp_enqueue_flags+0x1b0>
c000f952:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f956:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f959:	83 c8 80             	or     eax,0xffffff80
c000f95c:	88 c2                	mov    dl,al
c000f95e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f962:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f965:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f96b:	83 c0 01             	add    eax,0x1
c000f96e:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f974:	b0 ff                	mov    al,0xff
c000f976:	e9 3d 01 00 00       	jmp    c000fab8 <tcp_enqueue_flags+0x2ec>
c000f97b:	90                   	nop
c000f97c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f980:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f983:	0f b7 c0             	movzx  eax,ax
c000f986:	85 c0                	test   eax,eax
c000f988:	74 16                	je     c000f9a0 <tcp_enqueue_flags+0x1d4>
c000f98a:	83 ec 08             	sub    esp,0x8
c000f98d:	68 10 08 03 c0       	push   0xc0030810
c000f992:	68 c6 f9 02 c0       	push   0xc002f9c6
c000f997:	e8 2c 01 01 00       	call   c001fac8 <CPrintf>
c000f99c:	83 c4 10             	add    esp,0x10
c000f99f:	90                   	nop
c000f9a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9a4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9a7:	85 c0                	test   eax,eax
c000f9a9:	75 0d                	jne    c000f9b8 <tcp_enqueue_flags+0x1ec>
c000f9ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9b3:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f9b6:	eb 30                	jmp    c000f9e8 <tcp_enqueue_flags+0x21c>
c000f9b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9bc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9c3:	eb 0f                	jmp    c000f9d4 <tcp_enqueue_flags+0x208>
c000f9c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9d2:	66 90                	xchg   ax,ax
c000f9d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9da:	85 c0                	test   eax,eax
c000f9dc:	75 ea                	jne    c000f9c8 <tcp_enqueue_flags+0x1fc>
c000f9de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9e6:	89 10                	mov    DWORD PTR [eax],edx
c000f9e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ec:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f9f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9f7:	83 e0 02             	and    eax,0x2
c000f9fa:	75 0c                	jne    c000fa08 <tcp_enqueue_flags+0x23c>
c000f9fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa01:	83 e0 01             	and    eax,0x1
c000fa04:	74 2a                	je     c000fa30 <tcp_enqueue_flags+0x264>
c000fa06:	66 90                	xchg   ax,ax
c000fa08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa0c:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fa0f:	8d 50 01             	lea    edx,[eax+0x1]
c000fa12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa16:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fa19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa1d:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa21:	83 e8 01             	sub    eax,0x1
c000fa24:	89 c2                	mov    edx,eax
c000fa26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa2a:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000fa2e:	66 90                	xchg   ax,ax
c000fa30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa35:	83 e0 01             	and    eax,0x1
c000fa38:	74 16                	je     c000fa50 <tcp_enqueue_flags+0x284>
c000fa3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa3e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa41:	83 c8 20             	or     eax,0x20
c000fa44:	88 c2                	mov    dl,al
c000fa46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa4a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa57:	83 ec 0c             	sub    esp,0xc
c000fa5a:	50                   	push   eax
c000fa5b:	e8 48 90 ff ff       	call   c0008aa8 <pbuf_clen>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	88 c1                	mov    cl,al
c000fa65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa69:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa6c:	0f b6 c1             	movzx  eax,cl
c000fa6f:	01 d0                	add    eax,edx
c000fa71:	89 c2                	mov    edx,eax
c000fa73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa77:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fa7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa7f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa82:	0f b7 c0             	movzx  eax,ax
c000fa85:	85 c0                	test   eax,eax
c000fa87:	74 2b                	je     c000fab4 <tcp_enqueue_flags+0x2e8>
c000fa89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa8d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fa90:	85 c0                	test   eax,eax
c000fa92:	75 20                	jne    c000fab4 <tcp_enqueue_flags+0x2e8>
c000fa94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa98:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa9b:	85 c0                	test   eax,eax
c000fa9d:	75 15                	jne    c000fab4 <tcp_enqueue_flags+0x2e8>
c000fa9f:	83 ec 08             	sub    esp,0x8
c000faa2:	68 3c 08 03 c0       	push   0xc003083c
c000faa7:	68 c6 f9 02 c0       	push   0xc002f9c6
c000faac:	e8 17 00 01 00       	call   c001fac8 <CPrintf>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	b0 00                	mov    al,0x0
c000fab6:	66 90                	xchg   ax,ax
c000fab8:	83 c4 3c             	add    esp,0x3c
c000fabb:	c3                   	ret    

c000fabc <tcp_send_fin>:
c000fabc:	53                   	push   ebx
c000fabd:	83 ec 18             	sub    esp,0x18
c000fac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fac7:	85 c0                	test   eax,eax
c000fac9:	74 71                	je     c000fb3c <tcp_send_fin+0x80>
c000facb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fad2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad6:	eb 0c                	jmp    c000fae4 <tcp_send_fin+0x28>
c000fad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fadc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fade:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fae2:	66 90                	xchg   ax,ax
c000fae4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae8:	8b 00                	mov    eax,DWORD PTR [eax]
c000faea:	85 c0                	test   eax,eax
c000faec:	75 ea                	jne    c000fad8 <tcp_send_fin+0x1c>
c000faee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000faf5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000faf9:	0f b7 c0             	movzx  eax,ax
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	50                   	push   eax
c000fb00:	e8 17 11 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	0f b7 c0             	movzx  eax,ax
c000fb0b:	83 e0 07             	and    eax,0x7
c000fb0e:	75 2c                	jne    c000fb3c <tcp_send_fin+0x80>
c000fb10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb17:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fb1b:	83 ec 0c             	sub    esp,0xc
c000fb1e:	6a 01                	push   0x1
c000fb20:	e8 f7 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	89 c2                	mov    edx,eax
c000fb2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb31:	09 da                	or     edx,ebx
c000fb33:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fb37:	b0 00                	mov    al,0x0
c000fb39:	eb 15                	jmp    c000fb50 <tcp_send_fin+0x94>
c000fb3b:	90                   	nop
c000fb3c:	83 ec 08             	sub    esp,0x8
c000fb3f:	6a 01                	push   0x1
c000fb41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb45:	e8 82 fc ff ff       	call   c000f7cc <tcp_enqueue_flags>
c000fb4a:	83 c4 10             	add    esp,0x10
c000fb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb50:	83 c4 18             	add    esp,0x18
c000fb53:	5b                   	pop    ebx
c000fb54:	c3                   	ret    
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]

c000fb58 <tcp_send_empty_ack>:
c000fb58:	53                   	push   ebx
c000fb59:	83 ec 18             	sub    esp,0x18
c000fb5c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb65:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb68:	83 ec 0c             	sub    esp,0xc
c000fb6b:	50                   	push   eax
c000fb6c:	e8 cf 10 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	89 c2                	mov    edx,eax
c000fb76:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb7b:	52                   	push   edx
c000fb7c:	6a 00                	push   0x0
c000fb7e:	50                   	push   eax
c000fb7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb83:	e8 1c ee ff ff       	call   c000e9a4 <tcp_output_alloc_header>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb8f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fb94:	75 0a                	jne    c000fba0 <tcp_send_empty_ack+0x48>
c000fb96:	b0 fe                	mov    al,0xfe
c000fb98:	e9 9b 00 00 00       	jmp    c000fc38 <tcp_send_empty_ack+0xe0>
c000fb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fba0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fba7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbaf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbb2:	83 e0 fc             	and    eax,0xfffffffc
c000fbb5:	88 c2                	mov    dl,al
c000fbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbbb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbc5:	0f b7 d0             	movzx  edx,ax
c000fbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcc:	8d 48 04             	lea    ecx,[eax+0x4]
c000fbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd3:	83 ec 0c             	sub    esp,0xc
c000fbd6:	52                   	push   edx
c000fbd7:	6a 06                	push   0x6
c000fbd9:	51                   	push   ecx
c000fbda:	50                   	push   eax
c000fbdb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbdf:	e8 a4 35 00 00       	call   c0013188 <inet_chksum_pseudo>
c000fbe4:	83 c4 20             	add    esp,0x20
c000fbe7:	89 c2                	mov    edx,eax
c000fbe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbed:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fbf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf5:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fbf8:	0f b6 c8             	movzx  ecx,al
c000fbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbff:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc02:	0f b6 d0             	movzx  edx,al
c000fc05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc09:	8d 58 04             	lea    ebx,[eax+0x4]
c000fc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc10:	83 ec 08             	sub    esp,0x8
c000fc13:	6a 06                	push   0x6
c000fc15:	51                   	push   ecx
c000fc16:	52                   	push   edx
c000fc17:	53                   	push   ebx
c000fc18:	50                   	push   eax
c000fc19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc1d:	e8 a6 41 00 00       	call   c0013dc8 <ip_output>
c000fc22:	83 c4 20             	add    esp,0x20
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc2c:	e8 9b 86 ff ff       	call   c00082cc <pbuf_free>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	b0 00                	mov    al,0x0
c000fc36:	66 90                	xchg   ax,ax
c000fc38:	83 c4 18             	add    esp,0x18
c000fc3b:	5b                   	pop    ebx
c000fc3c:	c3                   	ret    
c000fc3d:	8d 76 00             	lea    esi,[esi+0x0]

c000fc40 <tcp_output_segment>:
c000fc40:	56                   	push   esi
c000fc41:	53                   	push   ebx
c000fc42:	83 ec 14             	sub    esp,0x14
c000fc45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc49:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc50:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc53:	83 ec 0c             	sub    esp,0xc
c000fc56:	50                   	push   eax
c000fc57:	e8 e4 0f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc66:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc6a:	0f b7 c0             	movzx  eax,ax
c000fc6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc71:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc74:	83 ec 0c             	sub    esp,0xc
c000fc77:	50                   	push   eax
c000fc78:	e8 9f 0f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fc84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc88:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fc8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8f:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc93:	0f b7 c0             	movzx  eax,ax
c000fc96:	01 c2                	add    edx,eax
c000fc98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc9c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fc9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fca6:	83 c0 14             	add    eax,0x14
c000fca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb1:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcb4:	0f b6 c0             	movzx  eax,al
c000fcb7:	83 e0 01             	and    eax,0x1
c000fcba:	74 10                	je     c000fccc <tcp_output_segment+0x8c>
c000fcbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc0:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fcc6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fccb:	90                   	nop
c000fccc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd0:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fcd4:	98                   	cwde   
c000fcd5:	83 f8 ff             	cmp    eax,0xffffffff
c000fcd8:	75 0a                	jne    c000fce4 <tcp_output_segment+0xa4>
c000fcda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcde:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fce4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fce8:	85 c0                	test   eax,eax
c000fcea:	74 0c                	je     c000fcf8 <tcp_output_segment+0xb8>
c000fcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf2:	85 c0                	test   eax,eax
c000fcf4:	75 32                	jne    c000fd28 <tcp_output_segment+0xe8>
c000fcf6:	66 90                	xchg   ax,ax
c000fcf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcfc:	83 c0 04             	add    eax,0x4
c000fcff:	83 ec 0c             	sub    esp,0xc
c000fd02:	50                   	push   eax
c000fd03:	e8 0c 39 00 00       	call   c0013614 <ip_route>
c000fd08:	83 c4 10             	add    esp,0x10
c000fd0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd14:	0f 84 46 01 00 00    	je     c000fe60 <tcp_output_segment+0x220>
c000fd1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fd21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd25:	89 10                	mov    DWORD PTR [eax],edx
c000fd27:	90                   	nop
c000fd28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd2f:	85 c0                	test   eax,eax
c000fd31:	75 2d                	jne    c000fd60 <tcp_output_segment+0x120>
c000fd33:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fd39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd3d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fd40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd4a:	83 ec 0c             	sub    esp,0xc
c000fd4d:	50                   	push   eax
c000fd4e:	e8 ed 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	89 c2                	mov    edx,eax
c000fd58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd5c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd5f:	90                   	nop
c000fd60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd64:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd71:	29 c2                	sub    edx,eax
c000fd73:	89 d0                	mov    eax,edx
c000fd75:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd81:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000fd85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd8c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fd91:	89 ce                	mov    esi,ecx
c000fd93:	29 d6                	sub    esi,edx
c000fd95:	89 f2                	mov    edx,esi
c000fd97:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000fd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fda2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fdb1:	89 ce                	mov    esi,ecx
c000fdb3:	29 d6                	sub    esi,edx
c000fdb5:	89 f2                	mov    edx,esi
c000fdb7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000fdbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fdc6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fdc9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fdd3:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fdd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fddd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fde3:	0f b7 c8             	movzx  ecx,ax
c000fde6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdea:	8d 70 04             	lea    esi,[eax+0x4]
c000fded:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fdf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fdfc:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fdff:	83 ec 0c             	sub    esp,0xc
c000fe02:	51                   	push   ecx
c000fe03:	6a 06                	push   0x6
c000fe05:	56                   	push   esi
c000fe06:	52                   	push   edx
c000fe07:	50                   	push   eax
c000fe08:	e8 7b 33 00 00       	call   c0013188 <inet_chksum_pseudo>
c000fe0d:	83 c4 20             	add    esp,0x20
c000fe10:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fe14:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fe1a:	83 c0 01             	add    eax,0x1
c000fe1d:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fe23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe27:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe2a:	0f b6 d8             	movzx  ebx,al
c000fe2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe31:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe34:	0f b6 c8             	movzx  ecx,al
c000fe37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe3b:	8d 70 04             	lea    esi,[eax+0x4]
c000fe3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe49:	83 ec 08             	sub    esp,0x8
c000fe4c:	6a 06                	push   0x6
c000fe4e:	53                   	push   ebx
c000fe4f:	51                   	push   ecx
c000fe50:	56                   	push   esi
c000fe51:	52                   	push   edx
c000fe52:	50                   	push   eax
c000fe53:	e8 70 3f 00 00       	call   c0013dc8 <ip_output>
c000fe58:	83 c4 20             	add    esp,0x20
c000fe5b:	eb 07                	jmp    c000fe64 <tcp_output_segment+0x224>
c000fe5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe60:	90                   	nop
c000fe61:	8d 76 00             	lea    esi,[esi+0x0]
c000fe64:	83 c4 14             	add    esp,0x14
c000fe67:	5b                   	pop    ebx
c000fe68:	5e                   	pop    esi
c000fe69:	c3                   	ret    
c000fe6a:	66 90                	xchg   ax,ax

c000fe6c <tcp_output>:
c000fe6c:	56                   	push   esi
c000fe6d:	53                   	push   ebx
c000fe6e:	83 ec 24             	sub    esp,0x24
c000fe71:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe76:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe7a:	75 08                	jne    c000fe84 <tcp_output+0x18>
c000fe7c:	b0 00                	mov    al,0x0
c000fe7e:	e9 6d 04 00 00       	jmp    c00102f0 <tcp_output+0x484>
c000fe83:	90                   	nop
c000fe84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe88:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000fe8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe90:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000fe93:	89 c8                	mov    eax,ecx
c000fe95:	0f b7 d8             	movzx  ebx,ax
c000fe98:	0f b7 ca             	movzx  ecx,dx
c000fe9b:	39 cb                	cmp    ebx,ecx
c000fe9d:	76 05                	jbe    c000fea4 <tcp_output+0x38>
c000fe9f:	89 d0                	mov    eax,edx
c000fea1:	8d 76 00             	lea    esi,[esi+0x0]
c000fea4:	0f b7 c0             	movzx  eax,ax
c000fea7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000feab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feaf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000feb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000feb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feba:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000febd:	0f b6 c0             	movzx  eax,al
c000fec0:	83 e0 02             	and    eax,0x2
c000fec3:	74 4f                	je     c000ff14 <tcp_output+0xa8>
c000fec5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000feca:	74 34                	je     c000ff00 <tcp_output+0x94>
c000fecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fed0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fed3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fed6:	83 ec 0c             	sub    esp,0xc
c000fed9:	50                   	push   eax
c000feda:	e8 61 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fedf:	83 c4 10             	add    esp,0x10
c000fee2:	89 c2                	mov    edx,eax
c000fee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fee8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000feeb:	29 c2                	sub    edx,eax
c000feed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fef1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fef4:	0f b7 c0             	movzx  eax,ax
c000fef7:	01 d0                	add    eax,edx
c000fef9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000fefd:	73 15                	jae    c000ff14 <tcp_output+0xa8>
c000feff:	90                   	nop
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ff07:	e8 4c fc ff ff       	call   c000fb58 <tcp_send_empty_ack>
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	e9 dc 03 00 00       	jmp    c00102f0 <tcp_output+0x484>
c000ff14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff18:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ff24:	0f 84 e6 02 00 00    	je     c0010210 <tcp_output+0x3a4>
c000ff2a:	eb 0c                	jmp    c000ff38 <tcp_output+0xcc>
c000ff2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff36:	66 90                	xchg   ax,ax
c000ff38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	75 ea                	jne    c000ff2c <tcp_output+0xc0>
c000ff42:	e9 c9 02 00 00       	jmp    c0010210 <tcp_output+0x3a4>
c000ff47:	90                   	nop
c000ff48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff4f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff53:	0f b7 c0             	movzx  eax,ax
c000ff56:	83 ec 0c             	sub    esp,0xc
c000ff59:	50                   	push   eax
c000ff5a:	e8 bd 0c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ff5f:	83 c4 10             	add    esp,0x10
c000ff62:	0f b7 c0             	movzx  eax,ax
c000ff65:	83 e0 04             	and    eax,0x4
c000ff68:	74 16                	je     c000ff80 <tcp_output+0x114>
c000ff6a:	83 ec 08             	sub    esp,0x8
c000ff6d:	68 d3 08 03 c0       	push   0xc00308d3
c000ff72:	68 c6 f9 02 c0       	push   0xc002f9c6
c000ff77:	e8 4c fb 00 00       	call   c001fac8 <CPrintf>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	90                   	nop
c000ff80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff84:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff87:	85 c0                	test   eax,eax
c000ff89:	74 45                	je     c000ffd0 <tcp_output+0x164>
c000ff8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff92:	0f b6 c0             	movzx  eax,al
c000ff95:	83 e0 44             	and    eax,0x44
c000ff98:	75 36                	jne    c000ffd0 <tcp_output+0x164>
c000ff9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff9e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffa1:	85 c0                	test   eax,eax
c000ffa3:	74 33                	je     c000ffd8 <tcp_output+0x16c>
c000ffa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	75 1e                	jne    c000ffd0 <tcp_output+0x164>
c000ffb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffb6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffb9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ffbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffc3:	0f b7 d2             	movzx  edx,dx
c000ffc6:	0f b7 c0             	movzx  eax,ax
c000ffc9:	39 c2                	cmp    edx,eax
c000ffcb:	72 0b                	jb     c000ffd8 <tcp_output+0x16c>
c000ffcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd0:	b8 01 00 00 00       	mov    eax,0x1
c000ffd5:	eb 09                	jmp    c000ffe0 <tcp_output+0x174>
c000ffd7:	90                   	nop
c000ffd8:	b8 00 00 00 00       	mov    eax,0x0
c000ffdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ffe0:	85 c0                	test   eax,eax
c000ffe2:	75 18                	jne    c000fffc <tcp_output+0x190>
c000ffe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffe8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffeb:	0f b6 c0             	movzx  eax,al
c000ffee:	25 a0 00 00 00       	and    eax,0xa0
c000fff3:	0f 84 57 02 00 00    	je     c0010250 <tcp_output+0x3e4>
c000fff9:	8d 76 00             	lea    esi,[esi+0x0]
c000fffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010000:	8b 10                	mov    edx,DWORD PTR [eax]
c0010002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010006:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001000d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0010010:	83 f8 02             	cmp    eax,0x2
c0010013:	74 3b                	je     c0010050 <tcp_output+0x1e4>
c0010015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001001c:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c0010020:	83 ec 0c             	sub    esp,0xc
c0010023:	6a 10                	push   0x10
c0010025:	e8 f2 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	89 c2                	mov    edx,eax
c001002f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010033:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010036:	09 da                	or     edx,ebx
c0010038:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010043:	83 e0 fc             	and    eax,0xfffffffc
c0010046:	88 c2                	mov    dl,al
c0010048:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001004c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001004f:	90                   	nop
c0010050:	83 ec 08             	sub    esp,0x8
c0010053:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010057:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001005b:	e8 e0 fb ff ff       	call   c000fc40 <tcp_output_segment>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010067:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001006a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001006d:	83 ec 0c             	sub    esp,0xc
c0010070:	50                   	push   eax
c0010071:	e8 ca 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	89 c3                	mov    ebx,eax
c001007b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001007f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010082:	0f b7 f0             	movzx  esi,ax
c0010085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010089:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001008c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010090:	0f b7 c0             	movzx  eax,ax
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	50                   	push   eax
c0010097:	e8 80 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	0f b7 c0             	movzx  eax,ax
c00100a2:	83 e0 03             	and    eax,0x3
c00100a5:	0f 95 c0             	setne  al
c00100a8:	0f b6 c0             	movzx  eax,al
c00100ab:	01 f0                	add    eax,esi
c00100ad:	01 d8                	add    eax,ebx
c00100af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100b7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00100ba:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00100be:	79 0c                	jns    c00100cc <tcp_output+0x260>
c00100c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100c8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c00100cb:	90                   	nop
c00100cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100d3:	0f b7 d8             	movzx  ebx,ax
c00100d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100dd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00100e1:	0f b7 c0             	movzx  eax,ax
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	50                   	push   eax
c00100e8:	e8 2f 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100ed:	83 c4 10             	add    esp,0x10
c00100f0:	0f b7 c0             	movzx  eax,ax
c00100f3:	83 e0 03             	and    eax,0x3
c00100f6:	0f 95 c0             	setne  al
c00100f9:	0f b6 c0             	movzx  eax,al
c00100fc:	01 d8                	add    eax,ebx
c00100fe:	85 c0                	test   eax,eax
c0010100:	0f 8e ee 00 00 00    	jle    c00101f4 <tcp_output+0x388>
c0010106:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001010a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010114:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010117:	85 c0                	test   eax,eax
c0010119:	75 19                	jne    c0010134 <tcp_output+0x2c8>
c001011b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001011f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010123:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001012e:	e9 d1 00 00 00       	jmp    c0010204 <tcp_output+0x398>
c0010133:	90                   	nop
c0010134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010138:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001013b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001013e:	83 ec 0c             	sub    esp,0xc
c0010141:	50                   	push   eax
c0010142:	e8 f9 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010147:	83 c4 10             	add    esp,0x10
c001014a:	89 c3                	mov    ebx,eax
c001014c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010150:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010153:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010156:	83 ec 0c             	sub    esp,0xc
c0010159:	50                   	push   eax
c001015a:	e8 e1 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	29 c3                	sub    ebx,eax
c0010164:	89 d8                	mov    eax,ebx
c0010166:	79 74                	jns    c00101dc <tcp_output+0x370>
c0010168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016c:	83 c0 7c             	add    eax,0x7c
c001016f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010173:	eb 0f                	jmp    c0010184 <tcp_output+0x318>
c0010175:	8d 76 00             	lea    esi,[esi+0x0]
c0010178:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001017c:	8b 00                	mov    eax,DWORD PTR [eax]
c001017e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010182:	66 90                	xchg   ax,ax
c0010184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010188:	8b 00                	mov    eax,DWORD PTR [eax]
c001018a:	85 c0                	test   eax,eax
c001018c:	74 36                	je     c00101c4 <tcp_output+0x358>
c001018e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010192:	8b 00                	mov    eax,DWORD PTR [eax]
c0010194:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010197:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001019a:	83 ec 0c             	sub    esp,0xc
c001019d:	50                   	push   eax
c001019e:	e8 9d 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00101a3:	83 c4 10             	add    esp,0x10
c00101a6:	89 c3                	mov    ebx,eax
c00101a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101b2:	83 ec 0c             	sub    esp,0xc
c00101b5:	50                   	push   eax
c00101b6:	e8 85 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00101bb:	83 c4 10             	add    esp,0x10
c00101be:	29 c3                	sub    ebx,eax
c00101c0:	89 d8                	mov    eax,ebx
c00101c2:	78 b4                	js     c0010178 <tcp_output+0x30c>
c00101c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ce:	89 10                	mov    DWORD PTR [eax],edx
c00101d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101d8:	89 10                	mov    DWORD PTR [eax],edx
c00101da:	eb 28                	jmp    c0010204 <tcp_output+0x398>
c00101dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101e4:	89 10                	mov    DWORD PTR [eax],edx
c00101e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00101ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101f0:	eb 12                	jmp    c0010204 <tcp_output+0x398>
c00101f2:	66 90                	xchg   ax,ax
c00101f4:	83 ec 0c             	sub    esp,0xc
c00101f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101fb:	e8 58 9d ff ff       	call   c0009f58 <tcp_seg_free>
c0010200:	83 c4 10             	add    esp,0x10
c0010203:	90                   	nop
c0010204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010208:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001020b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001020f:	90                   	nop
c0010210:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010215:	74 3d                	je     c0010254 <tcp_output+0x3e8>
c0010217:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001021e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010221:	83 ec 0c             	sub    esp,0xc
c0010224:	50                   	push   eax
c0010225:	e8 16 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001022a:	83 c4 10             	add    esp,0x10
c001022d:	89 c2                	mov    edx,eax
c001022f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010233:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010236:	29 c2                	sub    edx,eax
c0010238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023f:	0f b7 c0             	movzx  eax,ax
c0010242:	01 d0                	add    eax,edx
c0010244:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010248:	0f 83 fa fc ff ff    	jae    c000ff48 <tcp_output+0xdc>
c001024e:	eb 04                	jmp    c0010254 <tcp_output+0x3e8>
c0010250:	90                   	nop
c0010251:	8d 76 00             	lea    esi,[esi+0x0]
c0010254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010258:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001025b:	85 c0                	test   eax,eax
c001025d:	75 0d                	jne    c001026c <tcp_output+0x400>
c001025f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010263:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010269:	8d 76 00             	lea    esi,[esi+0x0]
c001026c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010271:	74 65                	je     c00102d8 <tcp_output+0x46c>
c0010273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010277:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c001027d:	0f b6 c0             	movzx  eax,al
c0010280:	85 c0                	test   eax,eax
c0010282:	75 54                	jne    c00102d8 <tcp_output+0x46c>
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001028b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001028e:	83 ec 0c             	sub    esp,0xc
c0010291:	50                   	push   eax
c0010292:	e8 a9 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010297:	83 c4 10             	add    esp,0x10
c001029a:	89 c2                	mov    edx,eax
c001029c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102a0:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102a3:	29 c2                	sub    edx,eax
c00102a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102ac:	0f b7 c0             	movzx  eax,ax
c00102af:	01 c2                	add    edx,eax
c00102b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102b5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00102b8:	0f b7 c0             	movzx  eax,ax
c00102bb:	39 c2                	cmp    edx,eax
c00102bd:	76 19                	jbe    c00102d8 <tcp_output+0x46c>
c00102bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00102cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d1:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00102d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102dc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00102df:	83 e0 7f             	and    eax,0x7f
c00102e2:	88 c2                	mov    dl,al
c00102e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102e8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00102eb:	b0 00                	mov    al,0x0
c00102ed:	8d 76 00             	lea    esi,[esi+0x0]
c00102f0:	83 c4 24             	add    esp,0x24
c00102f3:	5b                   	pop    ebx
c00102f4:	5e                   	pop    esi
c00102f5:	c3                   	ret    
c00102f6:	66 90                	xchg   ax,ax

c00102f8 <tcp_rst>:
c00102f8:	83 ec 2c             	sub    esp,0x2c
c00102fb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00102ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010303:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010308:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001030d:	83 ec 04             	sub    esp,0x4
c0010310:	6a 00                	push   0x0
c0010312:	6a 14                	push   0x14
c0010314:	6a 01                	push   0x1
c0010316:	e8 8d 81 ff ff       	call   c00084a8 <pbuf_alloc>
c001031b:	83 c4 10             	add    esp,0x10
c001031e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010322:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010327:	0f 84 3f 01 00 00    	je     c001046c <tcp_rst+0x174>
c001032d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010331:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0010335:	0f b7 c0             	movzx  eax,ax
c0010338:	83 f8 13             	cmp    eax,0x13
c001033b:	77 17                	ja     c0010354 <tcp_rst+0x5c>
c001033d:	83 ec 08             	sub    esp,0x8
c0010340:	68 e0 05 03 c0       	push   0xc00305e0
c0010345:	68 c6 f9 02 c0       	push   0xc002f9c6
c001034a:	e8 79 f7 00 00       	call   c001fac8 <CPrintf>
c001034f:	83 c4 10             	add    esp,0x10
c0010352:	66 90                	xchg   ax,ax
c0010354:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001035b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001035f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010364:	83 ec 0c             	sub    esp,0xc
c0010367:	50                   	push   eax
c0010368:	e8 af 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001036d:	83 c4 10             	add    esp,0x10
c0010370:	89 c2                	mov    edx,eax
c0010372:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010376:	66 89 10             	mov    WORD PTR [eax],dx
c0010379:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	50                   	push   eax
c0010382:	e8 95 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	89 c2                	mov    edx,eax
c001038c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010390:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001039b:	e8 a0 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103a0:	83 c4 10             	add    esp,0x10
c00103a3:	89 c2                	mov    edx,eax
c00103a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00103b3:	e8 88 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	89 c2                	mov    edx,eax
c00103bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103c1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103c4:	83 ec 0c             	sub    esp,0xc
c00103c7:	68 14 50 00 00       	push   0x5014
c00103cc:	e8 4b 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00103d1:	83 c4 10             	add    esp,0x10
c00103d4:	89 c2                	mov    edx,eax
c00103d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103da:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c00103de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103e2:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c00103e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103ec:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00103f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103f6:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00103fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010400:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010403:	0f b7 c0             	movzx  eax,ax
c0010406:	83 ec 0c             	sub    esp,0xc
c0010409:	50                   	push   eax
c001040a:	6a 06                	push   0x6
c001040c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010410:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010414:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010418:	e8 6b 2d 00 00       	call   c0013188 <inet_chksum_pseudo>
c001041d:	83 c4 20             	add    esp,0x20
c0010420:	89 c2                	mov    edx,eax
c0010422:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010426:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c001042a:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010430:	83 c0 01             	add    eax,0x1
c0010433:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010439:	83 ec 08             	sub    esp,0x8
c001043c:	6a 06                	push   0x6
c001043e:	6a 00                	push   0x0
c0010440:	68 ff 00 00 00       	push   0xff
c0010445:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010449:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001044d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010451:	e8 72 39 00 00       	call   c0013dc8 <ip_output>
c0010456:	83 c4 20             	add    esp,0x20
c0010459:	83 ec 0c             	sub    esp,0xc
c001045c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010460:	e8 67 7e ff ff       	call   c00082cc <pbuf_free>
c0010465:	83 c4 10             	add    esp,0x10
c0010468:	eb 06                	jmp    c0010470 <tcp_rst+0x178>
c001046a:	66 90                	xchg   ax,ax
c001046c:	90                   	nop
c001046d:	8d 76 00             	lea    esi,[esi+0x0]
c0010470:	83 c4 2c             	add    esp,0x2c
c0010473:	c3                   	ret    

c0010474 <tcp_rexmit_rto>:
c0010474:	83 ec 1c             	sub    esp,0x1c
c0010477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001047b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001047e:	85 c0                	test   eax,eax
c0010480:	74 7a                	je     c00104fc <tcp_rexmit_rto+0x88>
c0010482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010486:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001048d:	eb 0d                	jmp    c001049c <tcp_rexmit_rto+0x28>
c001048f:	90                   	nop
c0010490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010494:	8b 00                	mov    eax,DWORD PTR [eax]
c0010496:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001049a:	66 90                	xchg   ax,ax
c001049c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a2:	85 c0                	test   eax,eax
c00104a4:	75 ea                	jne    c0010490 <tcp_rexmit_rto+0x1c>
c00104a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104aa:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00104ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b1:	89 10                	mov    DWORD PTR [eax],edx
c00104b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104b7:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00104ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104be:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00104c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c5:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00104cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104d0:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104d3:	83 c0 01             	add    eax,0x1
c00104d6:	88 c2                	mov    dl,al
c00104d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104dc:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e3:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00104ea:	83 ec 0c             	sub    esp,0xc
c00104ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00104f1:	e8 76 f9 ff ff       	call   c000fe6c <tcp_output>
c00104f6:	83 c4 10             	add    esp,0x10
c00104f9:	eb 05                	jmp    c0010500 <tcp_rexmit_rto+0x8c>
c00104fb:	90                   	nop
c00104fc:	90                   	nop
c00104fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010500:	83 c4 1c             	add    esp,0x1c
c0010503:	c3                   	ret    

c0010504 <tcp_rexmit>:
c0010504:	53                   	push   ebx
c0010505:	83 ec 18             	sub    esp,0x18
c0010508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001050c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001050f:	85 c0                	test   eax,eax
c0010511:	0f 84 a9 00 00 00    	je     c00105c0 <tcp_rexmit+0xbc>
c0010517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001051b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001051e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010526:	8b 10                	mov    edx,DWORD PTR [eax]
c0010528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001052c:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001052f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010533:	83 c0 78             	add    eax,0x78
c0010536:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001053a:	eb 0c                	jmp    c0010548 <tcp_rexmit+0x44>
c001053c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010540:	8b 00                	mov    eax,DWORD PTR [eax]
c0010542:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010546:	66 90                	xchg   ax,ax
c0010548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001054c:	8b 00                	mov    eax,DWORD PTR [eax]
c001054e:	85 c0                	test   eax,eax
c0010550:	74 36                	je     c0010588 <tcp_rexmit+0x84>
c0010552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010556:	8b 00                	mov    eax,DWORD PTR [eax]
c0010558:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001055b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 d9 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	89 c3                	mov    ebx,eax
c001056c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010570:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 c1 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	29 c3                	sub    ebx,eax
c0010584:	89 d8                	mov    eax,ebx
c0010586:	78 b4                	js     c001053c <tcp_rexmit+0x38>
c0010588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001058c:	8b 10                	mov    edx,DWORD PTR [eax]
c001058e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010592:	89 10                	mov    DWORD PTR [eax],edx
c0010594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001059c:	89 10                	mov    DWORD PTR [eax],edx
c001059e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105a2:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00105a5:	83 c0 01             	add    eax,0x1
c00105a8:	88 c2                	mov    dl,al
c00105aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ae:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00105b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105b5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105bc:	eb 06                	jmp    c00105c4 <tcp_rexmit+0xc0>
c00105be:	66 90                	xchg   ax,ax
c00105c0:	90                   	nop
c00105c1:	8d 76 00             	lea    esi,[esi+0x0]
c00105c4:	83 c4 18             	add    esp,0x18
c00105c7:	5b                   	pop    ebx
c00105c8:	c3                   	ret    
c00105c9:	8d 76 00             	lea    esi,[esi+0x0]

c00105cc <tcp_rexmit_fast>:
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105d6:	85 c0                	test   eax,eax
c00105d8:	0f 84 d2 00 00 00    	je     c00106b0 <tcp_rexmit_fast+0xe4>
c00105de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105e5:	0f b6 c0             	movzx  eax,al
c00105e8:	83 e0 04             	and    eax,0x4
c00105eb:	0f 85 bf 00 00 00    	jne    c00106b0 <tcp_rexmit_fast+0xe4>
c00105f1:	83 ec 0c             	sub    esp,0xc
c00105f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f8:	e8 07 ff ff ff       	call   c0010504 <tcp_rexmit>
c00105fd:	83 c4 10             	add    esp,0x10
c0010600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010604:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060c:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001060f:	0f b7 d2             	movzx  edx,dx
c0010612:	0f b7 c0             	movzx  eax,ax
c0010615:	39 c2                	cmp    edx,eax
c0010617:	76 1b                	jbe    c0010634 <tcp_rexmit_fast+0x68>
c0010619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010620:	0f b7 c0             	movzx  eax,ax
c0010623:	d1 e8                	shr    eax,1
c0010625:	89 c2                	mov    edx,eax
c0010627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c001062f:	eb 1b                	jmp    c001064c <tcp_rexmit_fast+0x80>
c0010631:	8d 76 00             	lea    esi,[esi+0x0]
c0010634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010638:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c001063c:	0f b7 c0             	movzx  eax,ax
c001063f:	d1 e8                	shr    eax,1
c0010641:	89 c2                	mov    edx,eax
c0010643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010647:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c001064b:	90                   	nop
c001064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010650:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c0010653:	0f b7 d0             	movzx  edx,ax
c0010656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001065d:	0f b7 c0             	movzx  eax,ax
c0010660:	d1 e0                	shl    eax,1
c0010662:	39 c2                	cmp    edx,eax
c0010664:	7d 16                	jge    c001067c <tcp_rexmit_fast+0xb0>
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001066d:	d1 e0                	shl    eax,1
c001066f:	89 c2                	mov    edx,eax
c0010671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010675:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010679:	8d 76 00             	lea    esi,[esi+0x0]
c001067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010680:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c0010683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010687:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001068a:	89 c1                	mov    ecx,eax
c001068c:	d1 e1                	shl    ecx,1
c001068e:	01 c8                	add    eax,ecx
c0010690:	01 d0                	add    eax,edx
c0010692:	89 c2                	mov    edx,eax
c0010694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010698:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c001069c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106a3:	83 c8 04             	or     eax,0x4
c00106a6:	88 c2                	mov    dl,al
c00106a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00106af:	90                   	nop
c00106b0:	90                   	nop
c00106b1:	83 c4 0c             	add    esp,0xc
c00106b4:	c3                   	ret    
c00106b5:	8d 76 00             	lea    esi,[esi+0x0]

c00106b8 <tcp_keepalive>:
c00106b8:	83 ec 1c             	sub    esp,0x1c
c00106bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00106c2:	83 e8 01             	sub    eax,0x1
c00106c5:	83 ec 0c             	sub    esp,0xc
c00106c8:	50                   	push   eax
c00106c9:	e8 72 05 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00106ce:	83 c4 10             	add    esp,0x10
c00106d1:	50                   	push   eax
c00106d2:	6a 00                	push   0x0
c00106d4:	6a 00                	push   0x0
c00106d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106da:	e8 c5 e2 ff ff       	call   c000e9a4 <tcp_output_alloc_header>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00106eb:	0f 84 8b 00 00 00    	je     c001077c <tcp_keepalive+0xc4>
c00106f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00106f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010700:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010703:	0f b7 d0             	movzx  edx,ax
c0010706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001070a:	8d 48 04             	lea    ecx,[eax+0x4]
c001070d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010711:	83 ec 0c             	sub    esp,0xc
c0010714:	52                   	push   edx
c0010715:	6a 06                	push   0x6
c0010717:	51                   	push   ecx
c0010718:	50                   	push   eax
c0010719:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001071d:	e8 66 2a 00 00       	call   c0013188 <inet_chksum_pseudo>
c0010722:	83 c4 20             	add    esp,0x20
c0010725:	89 c2                	mov    edx,eax
c0010727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001072b:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c001072f:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010735:	83 c0 01             	add    eax,0x1
c0010738:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001073e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010742:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010745:	0f b6 d0             	movzx  edx,al
c0010748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001074c:	8d 48 04             	lea    ecx,[eax+0x4]
c001074f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010753:	83 ec 08             	sub    esp,0x8
c0010756:	6a 06                	push   0x6
c0010758:	6a 00                	push   0x0
c001075a:	52                   	push   edx
c001075b:	51                   	push   ecx
c001075c:	50                   	push   eax
c001075d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010761:	e8 62 36 00 00       	call   c0013dc8 <ip_output>
c0010766:	83 c4 20             	add    esp,0x20
c0010769:	83 ec 0c             	sub    esp,0xc
c001076c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010770:	e8 57 7b ff ff       	call   c00082cc <pbuf_free>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	eb 06                	jmp    c0010780 <tcp_keepalive+0xc8>
c001077a:	66 90                	xchg   ax,ax
c001077c:	90                   	nop
c001077d:	8d 76 00             	lea    esi,[esi+0x0]
c0010780:	83 c4 1c             	add    esp,0x1c
c0010783:	c3                   	ret    

c0010784 <tcp_zero_window_probe>:
c0010784:	53                   	push   ebx
c0010785:	83 ec 28             	sub    esp,0x28
c0010788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001078c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001078f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010793:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010798:	75 0e                	jne    c00107a8 <tcp_zero_window_probe+0x24>
c001079a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001079e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00107a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00107a5:	8d 76 00             	lea    esi,[esi+0x0]
c00107a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107ad:	0f 84 99 01 00 00    	je     c001094c <tcp_zero_window_probe+0x1c8>
c00107b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107ba:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107be:	0f b7 c0             	movzx  eax,ax
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	50                   	push   eax
c00107c5:	e8 52 04 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00107ca:	83 c4 10             	add    esp,0x10
c00107cd:	0f b7 c0             	movzx  eax,ax
c00107d0:	83 e0 01             	and    eax,0x1
c00107d3:	74 17                	je     c00107ec <tcp_zero_window_probe+0x68>
c00107d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107dc:	0f b7 c0             	movzx  eax,ax
c00107df:	85 c0                	test   eax,eax
c00107e1:	75 09                	jne    c00107ec <tcp_zero_window_probe+0x68>
c00107e3:	b8 01 00 00 00       	mov    eax,0x1
c00107e8:	eb 0a                	jmp    c00107f4 <tcp_zero_window_probe+0x70>
c00107ea:	66 90                	xchg   ax,ax
c00107ec:	b8 00 00 00 00       	mov    eax,0x0
c00107f1:	8d 76 00             	lea    esi,[esi+0x0]
c00107f4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00107f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00107fd:	85 c0                	test   eax,eax
c00107ff:	0f 94 c0             	sete   al
c0010802:	0f b6 c0             	movzx  eax,al
c0010805:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001080a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001080e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010811:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010814:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010819:	52                   	push   edx
c001081a:	50                   	push   eax
c001081b:	6a 00                	push   0x0
c001081d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010821:	e8 7e e1 ff ff       	call   c000e9a4 <tcp_output_alloc_header>
c0010826:	83 c4 10             	add    esp,0x10
c0010829:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001082d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010832:	0f 84 18 01 00 00    	je     c0010950 <tcp_zero_window_probe+0x1cc>
c0010838:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001083c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001083f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010843:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010848:	85 c0                	test   eax,eax
c001084a:	74 28                	je     c0010874 <tcp_zero_window_probe+0xf0>
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010854:	80 e4 c0             	and    ah,0xc0
c0010857:	89 c3                	mov    ebx,eax
c0010859:	83 ec 0c             	sub    esp,0xc
c001085c:	6a 11                	push   0x11
c001085e:	e8 b9 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010863:	83 c4 10             	add    esp,0x10
c0010866:	09 d8                	or     eax,ebx
c0010868:	89 c2                	mov    edx,eax
c001086a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086e:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010872:	eb 58                	jmp    c00108cc <tcp_zero_window_probe+0x148>
c0010874:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001087b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001087e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010889:	83 c0 14             	add    eax,0x14
c001088c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010894:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010898:	0f b7 c0             	movzx  eax,ax
c001089b:	83 ec 0c             	sub    esp,0xc
c001089e:	50                   	push   eax
c001089f:	e8 78 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00108a4:	83 c4 10             	add    esp,0x10
c00108a7:	0f b7 c0             	movzx  eax,ax
c00108aa:	c1 e8 0c             	shr    eax,0xc
c00108ad:	c1 e0 02             	shl    eax,0x2
c00108b0:	0f b7 d0             	movzx  edx,ax
c00108b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108ba:	52                   	push   edx
c00108bb:	6a 01                	push   0x1
c00108bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00108c1:	50                   	push   eax
c00108c2:	e8 b1 86 ff ff       	call   c0008f78 <pbuf_copy_partial>
c00108c7:	83 c4 10             	add    esp,0x10
c00108ca:	66 90                	xchg   ax,ax
c00108cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108d3:	0f b7 d0             	movzx  edx,ax
c00108d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108da:	8d 48 04             	lea    ecx,[eax+0x4]
c00108dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e1:	83 ec 0c             	sub    esp,0xc
c00108e4:	52                   	push   edx
c00108e5:	6a 06                	push   0x6
c00108e7:	51                   	push   ecx
c00108e8:	50                   	push   eax
c00108e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108ed:	e8 96 28 00 00       	call   c0013188 <inet_chksum_pseudo>
c00108f2:	83 c4 20             	add    esp,0x20
c00108f5:	89 c2                	mov    edx,eax
c00108f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fb:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00108ff:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010905:	83 c0 01             	add    eax,0x1
c0010908:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001090e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010912:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010915:	0f b6 d0             	movzx  edx,al
c0010918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091c:	8d 48 04             	lea    ecx,[eax+0x4]
c001091f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010923:	83 ec 08             	sub    esp,0x8
c0010926:	6a 06                	push   0x6
c0010928:	6a 00                	push   0x0
c001092a:	52                   	push   edx
c001092b:	51                   	push   ecx
c001092c:	50                   	push   eax
c001092d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010931:	e8 92 34 00 00       	call   c0013dc8 <ip_output>
c0010936:	83 c4 20             	add    esp,0x20
c0010939:	83 ec 0c             	sub    esp,0xc
c001093c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010940:	e8 87 79 ff ff       	call   c00082cc <pbuf_free>
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	eb 0a                	jmp    c0010954 <tcp_zero_window_probe+0x1d0>
c001094a:	66 90                	xchg   ax,ax
c001094c:	90                   	nop
c001094d:	eb 05                	jmp    c0010954 <tcp_zero_window_probe+0x1d0>
c001094f:	90                   	nop
c0010950:	90                   	nop
c0010951:	8d 76 00             	lea    esi,[esi+0x0]
c0010954:	83 c4 28             	add    esp,0x28
c0010957:	5b                   	pop    ebx
c0010958:	c3                   	ret    
c0010959:	66 90                	xchg   ax,ax
c001095b:	90                   	nop

c001095c <sys_timeout>:
c001095c:	83 ec 1c             	sub    esp,0x1c
c001095f:	83 ec 0c             	sub    esp,0xc
c0010962:	6a 0b                	push   0xb
c0010964:	e8 77 6f ff ff       	call   c00078e0 <memp_malloc>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010970:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010975:	75 25                	jne    c001099c <sys_timeout+0x40>
c0010977:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001097c:	0f 85 3e 01 00 00    	jne    c0010ac0 <sys_timeout+0x164>
c0010982:	83 ec 08             	sub    esp,0x8
c0010985:	68 ec 08 03 c0       	push   0xc00308ec
c001098a:	68 c6 f9 02 c0       	push   0xc002f9c6
c001098f:	e8 34 f1 00 00       	call   c001fac8 <CPrintf>
c0010994:	83 c4 10             	add    esp,0x10
c0010997:	e9 24 01 00 00       	jmp    c0010ac0 <sys_timeout+0x164>
c001099c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00109a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00109c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109c7:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109cc:	85 c0                	test   eax,eax
c00109ce:	75 10                	jne    c00109e0 <sys_timeout+0x84>
c00109d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109d4:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109d9:	e9 e6 00 00 00       	jmp    c0010ac4 <sys_timeout+0x168>
c00109de:	66 90                	xchg   ax,ax
c00109e0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109ec:	73 2e                	jae    c0010a1c <sys_timeout+0xc0>
c00109ee:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109f3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109fb:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00109ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a02:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010a08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a0c:	89 10                	mov    DWORD PTR [eax],edx
c0010a0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a12:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a17:	e9 a8 00 00 00       	jmp    c0010ac4 <sys_timeout+0x168>
c0010a1c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a25:	e9 86 00 00 00       	jmp    c0010ab0 <sys_timeout+0x154>
c0010a2a:	66 90                	xchg   ax,ax
c0010a2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a30:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a3a:	29 c2                	sub    edx,eax
c0010a3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a49:	85 c0                	test   eax,eax
c0010a4b:	74 17                	je     c0010a64 <sys_timeout+0x108>
c0010a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a53:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5d:	39 c2                	cmp    edx,eax
c0010a5f:	76 43                	jbe    c0010aa4 <sys_timeout+0x148>
c0010a61:	8d 76 00             	lea    esi,[esi+0x0]
c0010a64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a6a:	85 c0                	test   eax,eax
c0010a6c:	74 1e                	je     c0010a8c <sys_timeout+0x130>
c0010a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a7b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a84:	29 d1                	sub    ecx,edx
c0010a86:	89 ca                	mov    edx,ecx
c0010a88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a8b:	90                   	nop
c0010a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a90:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a96:	89 10                	mov    DWORD PTR [eax],edx
c0010a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa0:	89 10                	mov    DWORD PTR [eax],edx
c0010aa2:	eb 20                	jmp    c0010ac4 <sys_timeout+0x168>
c0010aa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010aaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aae:	66 90                	xchg   ax,ax
c0010ab0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010ab5:	0f 85 71 ff ff ff    	jne    c0010a2c <sys_timeout+0xd0>
c0010abb:	eb 07                	jmp    c0010ac4 <sys_timeout+0x168>
c0010abd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac0:	90                   	nop
c0010ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac4:	83 c4 1c             	add    esp,0x1c
c0010ac7:	c3                   	ret    

c0010ac8 <tcpip_tcp_timer>:
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	e8 b8 a4 ff ff       	call   c000af88 <tcp_tmr>
c0010ad0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010ad5:	85 c0                	test   eax,eax
c0010ad7:	75 0b                	jne    c0010ae4 <tcpip_tcp_timer+0x1c>
c0010ad9:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ade:	85 c0                	test   eax,eax
c0010ae0:	74 1e                	je     c0010b00 <tcpip_tcp_timer+0x38>
c0010ae2:	66 90                	xchg   ax,ax
c0010ae4:	83 ec 04             	sub    esp,0x4
c0010ae7:	6a 00                	push   0x0
c0010ae9:	68 c8 0a 01 c0       	push   0xc0010ac8
c0010aee:	68 fa 00 00 00       	push   0xfa
c0010af3:	e8 64 fe ff ff       	call   c001095c <sys_timeout>
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	eb 0f                	jmp    c0010b0c <tcpip_tcp_timer+0x44>
c0010afd:	8d 76 00             	lea    esi,[esi+0x0]
c0010b00:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010b0a:	66 90                	xchg   ax,ax
c0010b0c:	90                   	nop
c0010b0d:	83 c4 0c             	add    esp,0xc
c0010b10:	c3                   	ret    
c0010b11:	8d 76 00             	lea    esi,[esi+0x0]

c0010b14 <tcp_timer_needed>:
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	75 38                	jne    c0010b58 <tcp_timer_needed+0x44>
c0010b20:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b25:	85 c0                	test   eax,eax
c0010b27:	75 0b                	jne    c0010b34 <tcp_timer_needed+0x20>
c0010b29:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	74 26                	je     c0010b58 <tcp_timer_needed+0x44>
c0010b32:	66 90                	xchg   ax,ax
c0010b34:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010b3e:	83 ec 04             	sub    esp,0x4
c0010b41:	6a 00                	push   0x0
c0010b43:	68 c8 0a 01 c0       	push   0xc0010ac8
c0010b48:	68 fa 00 00 00       	push   0xfa
c0010b4d:	e8 0a fe ff ff       	call   c001095c <sys_timeout>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	8d 76 00             	lea    esi,[esi+0x0]
c0010b58:	90                   	nop
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	c3                   	ret    
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0010b60 <ip_reass_timer>:
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	e8 18 3b 00 00       	call   c0014680 <ip_reass_tmr>
c0010b68:	83 ec 04             	sub    esp,0x4
c0010b6b:	6a 00                	push   0x0
c0010b6d:	68 60 0b 01 c0       	push   0xc0010b60
c0010b72:	68 e8 03 00 00       	push   0x3e8
c0010b77:	e8 e0 fd ff ff       	call   c001095c <sys_timeout>
c0010b7c:	83 c4 10             	add    esp,0x10
c0010b7f:	90                   	nop
c0010b80:	83 c4 0c             	add    esp,0xc
c0010b83:	c3                   	ret    

c0010b84 <arp_timer>:
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	e8 64 0d 00 00       	call   c00118f0 <etharp_tmr>
c0010b8c:	83 ec 04             	sub    esp,0x4
c0010b8f:	6a 00                	push   0x0
c0010b91:	68 84 0b 01 c0       	push   0xc0010b84
c0010b96:	68 88 13 00 00       	push   0x1388
c0010b9b:	e8 bc fd ff ff       	call   c001095c <sys_timeout>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	90                   	nop
c0010ba4:	83 c4 0c             	add    esp,0xc
c0010ba7:	c3                   	ret    

c0010ba8 <sys_timeouts_init>:
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	83 ec 04             	sub    esp,0x4
c0010bae:	6a 00                	push   0x0
c0010bb0:	68 60 0b 01 c0       	push   0xc0010b60
c0010bb5:	68 e8 03 00 00       	push   0x3e8
c0010bba:	e8 9d fd ff ff       	call   c001095c <sys_timeout>
c0010bbf:	83 c4 10             	add    esp,0x10
c0010bc2:	83 ec 04             	sub    esp,0x4
c0010bc5:	6a 00                	push   0x0
c0010bc7:	68 84 0b 01 c0       	push   0xc0010b84
c0010bcc:	68 88 13 00 00       	push   0x1388
c0010bd1:	e8 86 fd ff ff       	call   c001095c <sys_timeout>
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	90                   	nop
c0010bda:	83 c4 0c             	add    esp,0xc
c0010bdd:	c3                   	ret    
c0010bde:	66 90                	xchg   ax,ax

c0010be0 <sys_untimeout>:
c0010be0:	83 ec 1c             	sub    esp,0x1c
c0010be3:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010be8:	85 c0                	test   eax,eax
c0010bea:	0f 84 b4 00 00 00    	je     c0010ca4 <sys_untimeout+0xc4>
c0010bf0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c01:	e9 8e 00 00 00       	jmp    c0010c94 <sys_untimeout+0xb4>
c0010c06:	66 90                	xchg   ax,ax
c0010c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c0f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c13:	75 6b                	jne    c0010c80 <sys_untimeout+0xa0>
c0010c15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c1c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010c20:	75 5e                	jne    c0010c80 <sys_untimeout+0xa0>
c0010c22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c27:	75 0f                	jne    c0010c38 <sys_untimeout+0x58>
c0010c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c2f:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c34:	eb 0e                	jmp    c0010c44 <sys_untimeout+0x64>
c0010c36:	66 90                	xchg   ax,ax
c0010c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c42:	89 10                	mov    DWORD PTR [eax],edx
c0010c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	85 c0                	test   eax,eax
c0010c4c:	74 1e                	je     c0010c6c <sys_untimeout+0x8c>
c0010c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c54:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c64:	01 ca                	add    edx,ecx
c0010c66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c69:	8d 76 00             	lea    esi,[esi+0x0]
c0010c6c:	83 ec 08             	sub    esp,0x8
c0010c6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c73:	6a 0b                	push   0xb
c0010c75:	e8 92 6d ff ff       	call   c0007a0c <memp_free>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	eb 29                	jmp    c0010ca8 <sys_untimeout+0xc8>
c0010c7f:	90                   	nop
c0010c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c92:	66 90                	xchg   ax,ax
c0010c94:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010c99:	0f 85 69 ff ff ff    	jne    c0010c08 <sys_untimeout+0x28>
c0010c9f:	90                   	nop
c0010ca0:	eb 06                	jmp    c0010ca8 <sys_untimeout+0xc8>
c0010ca2:	66 90                	xchg   ax,ax
c0010ca4:	90                   	nop
c0010ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca8:	83 c4 1c             	add    esp,0x1c
c0010cab:	c3                   	ret    

c0010cac <sys_timeouts_mbox_fetch>:
c0010cac:	83 ec 1c             	sub    esp,0x1c
c0010caf:	90                   	nop
c0010cb0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cb5:	85 c0                	test   eax,eax
c0010cb7:	75 1f                	jne    c0010cd8 <sys_timeouts_mbox_fetch+0x2c>
c0010cb9:	83 ec 04             	sub    esp,0x4
c0010cbc:	6a 00                	push   0x0
c0010cbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cc6:	e8 2d 00 ff ff       	call   c0000cf8 <sys_arch_mbox_fetch>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cd2:	e9 cd 00 00 00       	jmp    c0010da4 <sys_timeouts_mbox_fetch+0xf8>
c0010cd7:	90                   	nop
c0010cd8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce0:	85 c0                	test   eax,eax
c0010ce2:	74 24                	je     c0010d08 <sys_timeouts_mbox_fetch+0x5c>
c0010ce4:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cec:	83 ec 04             	sub    esp,0x4
c0010cef:	50                   	push   eax
c0010cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cf8:	e8 fb ff fe ff       	call   c0000cf8 <sys_arch_mbox_fetch>
c0010cfd:	83 c4 10             	add    esp,0x10
c0010d00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d04:	eb 0a                	jmp    c0010d10 <sys_timeouts_mbox_fetch+0x64>
c0010d06:	66 90                	xchg   ax,ax
c0010d08:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010d10:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010d15:	75 5d                	jne    c0010d74 <sys_timeouts_mbox_fetch+0xc8>
c0010d17:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d26:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010d2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d40:	83 ec 08             	sub    esp,0x8
c0010d43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d47:	6a 0b                	push   0xb
c0010d49:	e8 be 6c ff ff       	call   c0007a0c <memp_free>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d56:	0f 84 54 ff ff ff    	je     c0010cb0 <sys_timeouts_mbox_fetch+0x4>
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d67:	ff d0                	call   eax
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	e9 3f ff ff ff       	jmp    c0010cb0 <sys_timeouts_mbox_fetch+0x4>
c0010d71:	8d 76 00             	lea    esi,[esi+0x0]
c0010d74:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d80:	73 16                	jae    c0010d98 <sys_timeouts_mbox_fetch+0xec>
c0010d82:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d87:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d8f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d96:	eb 0c                	jmp    c0010da4 <sys_timeouts_mbox_fetch+0xf8>
c0010d98:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010da4:	90                   	nop
c0010da5:	83 c4 1c             	add    esp,0x1c
c0010da8:	c3                   	ret    
c0010da9:	66 90                	xchg   ax,ax
c0010dab:	90                   	nop

c0010dac <udp_input>:
c0010dac:	53                   	push   ebx
c0010dad:	83 ec 28             	sub    esp,0x28
c0010db0:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010db6:	83 c0 01             	add    eax,0x1
c0010db9:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010dbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dd1:	0f b7 d8             	movzx  ebx,ax
c0010dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dd8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ddb:	0f b7 c0             	movzx  eax,ax
c0010dde:	83 ec 0c             	sub    esp,0xc
c0010de1:	50                   	push   eax
c0010de2:	e8 35 fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010de7:	83 c4 10             	add    esp,0x10
c0010dea:	0f b7 c0             	movzx  eax,ax
c0010ded:	c1 e8 08             	shr    eax,0x8
c0010df0:	0f b7 c0             	movzx  eax,ax
c0010df3:	83 e0 0f             	and    eax,0xf
c0010df6:	83 c0 02             	add    eax,0x2
c0010df9:	c1 e0 02             	shl    eax,0x2
c0010dfc:	39 c3                	cmp    ebx,eax
c0010dfe:	7c 3c                	jl     c0010e3c <udp_input+0x90>
c0010e00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e04:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e07:	0f b7 c0             	movzx  eax,ax
c0010e0a:	83 ec 0c             	sub    esp,0xc
c0010e0d:	50                   	push   eax
c0010e0e:	e8 09 fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	0f b7 c0             	movzx  eax,ax
c0010e19:	c1 e8 08             	shr    eax,0x8
c0010e1c:	83 e0 0f             	and    eax,0xf
c0010e1f:	c1 e0 02             	shl    eax,0x2
c0010e22:	f7 d8                	neg    eax
c0010e24:	98                   	cwde   
c0010e25:	83 ec 08             	sub    esp,0x8
c0010e28:	50                   	push   eax
c0010e29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e2d:	e8 fa 72 ff ff       	call   c000812c <pbuf_header>
c0010e32:	83 c4 10             	add    esp,0x10
c0010e35:	0f b6 c0             	movzx  eax,al
c0010e38:	85 c0                	test   eax,eax
c0010e3a:	74 34                	je     c0010e70 <udp_input+0xc4>
c0010e3c:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010e42:	83 c0 01             	add    eax,0x1
c0010e45:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010e4b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e51:	83 c0 01             	add    eax,0x1
c0010e54:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e5a:	83 ec 0c             	sub    esp,0xc
c0010e5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e61:	e8 66 74 ff ff       	call   c00082cc <pbuf_free>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	e9 aa 03 00 00       	jmp    c0011218 <udp_input+0x46c>
c0010e6e:	66 90                	xchg   ax,ax
c0010e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e7b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e87:	50                   	push   eax
c0010e88:	e8 e3 2f 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e9b:	0f b7 c0             	movzx  eax,ax
c0010e9e:	83 ec 0c             	sub    esp,0xc
c0010ea1:	50                   	push   eax
c0010ea2:	e8 75 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ea7:	83 c4 10             	add    esp,0x10
c0010eaa:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010eaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eb3:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010eb7:	0f b7 c0             	movzx  eax,ax
c0010eba:	83 ec 0c             	sub    esp,0xc
c0010ebd:	50                   	push   eax
c0010ebe:	e8 59 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010ecb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010ed3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ed8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ee0:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010ee5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ee9:	e9 0a 01 00 00       	jmp    c0010ff8 <udp_input+0x24c>
c0010eee:	66 90                	xchg   ax,ax
c0010ef0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ef5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef9:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010efd:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010f02:	0f b7 c0             	movzx  eax,ax
c0010f05:	39 c2                	cmp    edx,eax
c0010f07:	75 57                	jne    c0010f60 <udp_input+0x1b4>
c0010f09:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f0e:	85 c0                	test   eax,eax
c0010f10:	75 12                	jne    c0010f24 <udp_input+0x178>
c0010f12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f16:	85 c0                	test   eax,eax
c0010f18:	74 22                	je     c0010f3c <udp_input+0x190>
c0010f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f20:	85 c0                	test   eax,eax
c0010f22:	74 18                	je     c0010f3c <udp_input+0x190>
c0010f24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f2a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f2f:	39 c2                	cmp    edx,eax
c0010f31:	74 09                	je     c0010f3c <udp_input+0x190>
c0010f33:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f38:	85 c0                	test   eax,eax
c0010f3a:	74 24                	je     c0010f60 <udp_input+0x1b4>
c0010f3c:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010f41:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f46:	75 18                	jne    c0010f60 <udp_input+0x1b4>
c0010f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f4c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f4f:	0f b6 c0             	movzx  eax,al
c0010f52:	83 e0 04             	and    eax,0x4
c0010f55:	75 09                	jne    c0010f60 <udp_input+0x1b4>
c0010f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f5f:	90                   	nop
c0010f60:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f65:	85 c0                	test   eax,eax
c0010f67:	74 7b                	je     c0010fe4 <udp_input+0x238>
c0010f69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f70:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f75:	0f b7 c0             	movzx  eax,ax
c0010f78:	39 c2                	cmp    edx,eax
c0010f7a:	75 68                	jne    c0010fe4 <udp_input+0x238>
c0010f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f80:	83 c0 04             	add    eax,0x4
c0010f83:	74 1b                	je     c0010fa0 <udp_input+0x1f4>
c0010f85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8c:	85 c0                	test   eax,eax
c0010f8e:	74 10                	je     c0010fa0 <udp_input+0x1f4>
c0010f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f97:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010f9c:	39 c2                	cmp    edx,eax
c0010f9e:	75 44                	jne    c0010fe4 <udp_input+0x238>
c0010fa0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010fa5:	74 29                	je     c0010fd0 <udp_input+0x224>
c0010fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fb5:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010fbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc6:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010fcb:	eb 37                	jmp    c0011004 <udp_input+0x258>
c0010fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd0:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010fd6:	83 c0 01             	add    eax,0x1
c0010fd9:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010fdf:	eb 23                	jmp    c0011004 <udp_input+0x258>
c0010fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ff3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ff7:	90                   	nop
c0010ff8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010ffd:	0f 85 ed fe ff ff    	jne    c0010ef0 <udp_input+0x144>
c0011003:	90                   	nop
c0011004:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011009:	75 09                	jne    c0011014 <udp_input+0x268>
c001100b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001100f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011013:	90                   	nop
c0011014:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011019:	75 15                	jne    c0011030 <udp_input+0x284>
c001101b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001101f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011022:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011027:	39 c2                	cmp    edx,eax
c0011029:	0f 85 d9 01 00 00    	jne    c0011208 <udp_input+0x45c>
c001102f:	90                   	nop
c0011030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011034:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011038:	0f b7 c0             	movzx  eax,ax
c001103b:	85 c0                	test   eax,eax
c001103d:	74 61                	je     c00110a0 <udp_input+0x2f4>
c001103f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011043:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011046:	0f b7 c0             	movzx  eax,ax
c0011049:	83 ec 0c             	sub    esp,0xc
c001104c:	50                   	push   eax
c001104d:	6a 11                	push   0x11
c001104f:	68 98 68 03 c0       	push   0xc0036898
c0011054:	68 90 68 03 c0       	push   0xc0036890
c0011059:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001105d:	e8 26 21 00 00       	call   c0013188 <inet_chksum_pseudo>
c0011062:	83 c4 20             	add    esp,0x20
c0011065:	0f b7 c0             	movzx  eax,ax
c0011068:	85 c0                	test   eax,eax
c001106a:	74 34                	je     c00110a0 <udp_input+0x2f4>
c001106c:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0011072:	83 c0 01             	add    eax,0x1
c0011075:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c001107b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011081:	83 c0 01             	add    eax,0x1
c0011084:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011091:	e8 36 72 ff ff       	call   c00082cc <pbuf_free>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	e9 7a 01 00 00       	jmp    c0011218 <udp_input+0x46c>
c001109e:	66 90                	xchg   ax,ax
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	6a f8                	push   0xfffffff8
c00110a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110a9:	e8 7e 70 ff ff       	call   c000812c <pbuf_header>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	0f b6 c0             	movzx  eax,al
c00110b4:	85 c0                	test   eax,eax
c00110b6:	74 38                	je     c00110f0 <udp_input+0x344>
c00110b8:	83 ec 08             	sub    esp,0x8
c00110bb:	68 29 09 03 c0       	push   0xc0030929
c00110c0:	68 c6 f9 02 c0       	push   0xc002f9c6
c00110c5:	e8 fe e9 00 00       	call   c001fac8 <CPrintf>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110d3:	83 c0 01             	add    eax,0x1
c00110d6:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110e3:	e8 e4 71 ff ff       	call   c00082cc <pbuf_free>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	e9 28 01 00 00       	jmp    c0011218 <udp_input+0x46c>
c00110f0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110f5:	74 51                	je     c0011148 <udp_input+0x39c>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110fe:	85 c0                	test   eax,eax
c0011100:	74 32                	je     c0011134 <udp_input+0x388>
c0011102:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011106:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011109:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c001110e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011112:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0011115:	83 ec 0c             	sub    esp,0xc
c0011118:	51                   	push   ecx
c0011119:	68 90 68 03 c0       	push   0xc0036890
c001111e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011122:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011126:	52                   	push   edx
c0011127:	ff d0                	call   eax
c0011129:	83 c4 20             	add    esp,0x20
c001112c:	e9 e7 00 00 00       	jmp    c0011218 <udp_input+0x46c>
c0011131:	8d 76 00             	lea    esi,[esi+0x0]
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001113b:	e8 8c 71 ff ff       	call   c00082cc <pbuf_free>
c0011140:	83 c4 10             	add    esp,0x10
c0011143:	e9 d0 00 00 00       	jmp    c0011218 <udp_input+0x46c>
c0011148:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c001114d:	85 c0                	test   eax,eax
c001114f:	0f 85 83 00 00 00    	jne    c00111d8 <udp_input+0x42c>
c0011155:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001115a:	25 f0 00 00 00       	and    eax,0xf0
c001115f:	3d e0 00 00 00       	cmp    eax,0xe0
c0011164:	74 72                	je     c00111d8 <udp_input+0x42c>
c0011166:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001116a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001116d:	0f b7 c0             	movzx  eax,ax
c0011170:	83 ec 0c             	sub    esp,0xc
c0011173:	50                   	push   eax
c0011174:	e8 a3 fa fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011179:	83 c4 10             	add    esp,0x10
c001117c:	0f b7 c0             	movzx  eax,ax
c001117f:	c1 e8 08             	shr    eax,0x8
c0011182:	0f b7 c0             	movzx  eax,ax
c0011185:	83 e0 0f             	and    eax,0xf
c0011188:	83 c0 02             	add    eax,0x2
c001118b:	c1 e0 02             	shl    eax,0x2
c001118e:	98                   	cwde   
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	50                   	push   eax
c0011193:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011197:	e8 90 6f ff ff       	call   c000812c <pbuf_header>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00111aa:	74 18                	je     c00111c4 <udp_input+0x418>
c00111ac:	83 ec 08             	sub    esp,0x8
c00111af:	68 3d 09 03 c0       	push   0xc003093d
c00111b4:	68 c6 f9 02 c0       	push   0xc002f9c6
c00111b9:	e8 0a e9 00 00       	call   c001fac8 <CPrintf>
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	8d 76 00             	lea    esi,[esi+0x0]
c00111c4:	83 ec 08             	sub    esp,0x8
c00111c7:	6a 03                	push   0x3
c00111c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111cd:	e8 76 1e 00 00       	call   c0013048 <icmp_dest_unreach>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	8d 76 00             	lea    esi,[esi+0x0]
c00111d8:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00111de:	83 c0 01             	add    eax,0x1
c00111e1:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00111e7:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111ed:	83 c0 01             	add    eax,0x1
c00111f0:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111f6:	83 ec 0c             	sub    esp,0xc
c00111f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111fd:	e8 ca 70 ff ff       	call   c00082cc <pbuf_free>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	eb 11                	jmp    c0011218 <udp_input+0x46c>
c0011207:	90                   	nop
c0011208:	83 ec 0c             	sub    esp,0xc
c001120b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001120f:	e8 b8 70 ff ff       	call   c00082cc <pbuf_free>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	90                   	nop
c0011218:	90                   	nop
c0011219:	83 c4 28             	add    esp,0x28
c001121c:	5b                   	pop    ebx
c001121d:	c3                   	ret    
c001121e:	66 90                	xchg   ax,ax

c0011220 <udp_bind>:
c0011220:	83 ec 2c             	sub    esp,0x2c
c0011223:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011227:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001122c:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011231:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001123a:	e9 8d 00 00 00       	jmp    c00112cc <udp_bind+0xac>
c001123f:	90                   	nop
c0011240:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011244:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011248:	75 26                	jne    c0011270 <udp_bind+0x50>
c001124a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001124f:	85 c0                	test   eax,eax
c0011251:	74 15                	je     c0011268 <udp_bind+0x48>
c0011253:	83 ec 08             	sub    esp,0x8
c0011256:	68 51 09 03 c0       	push   0xc0030951
c001125b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011260:	e8 63 e8 00 00       	call   c001fac8 <CPrintf>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001126d:	eb 51                	jmp    c00112c0 <udp_bind+0xa0>
c001126f:	90                   	nop
c0011270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011274:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011278:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001127d:	0f b7 c0             	movzx  eax,ax
c0011280:	39 c2                	cmp    edx,eax
c0011282:	75 3c                	jne    c00112c0 <udp_bind+0xa0>
c0011284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011288:	85 c0                	test   eax,eax
c001128a:	74 2c                	je     c00112b8 <udp_bind+0x98>
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	8b 00                	mov    eax,DWORD PTR [eax]
c0011292:	85 c0                	test   eax,eax
c0011294:	74 22                	je     c00112b8 <udp_bind+0x98>
c0011296:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001129b:	74 1b                	je     c00112b8 <udp_bind+0x98>
c001129d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00112a3:	85 c0                	test   eax,eax
c00112a5:	74 11                	je     c00112b8 <udp_bind+0x98>
c00112a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00112ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00112b3:	39 c2                	cmp    edx,eax
c00112b5:	75 09                	jne    c00112c0 <udp_bind+0xa0>
c00112b7:	90                   	nop
c00112b8:	b0 f8                	mov    al,0xf8
c00112ba:	e9 dd 00 00 00       	jmp    c001139c <udp_bind+0x17c>
c00112bf:	90                   	nop
c00112c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112cb:	90                   	nop
c00112cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112d1:	0f 85 69 ff ff ff    	jne    c0011240 <udp_bind+0x20>
c00112d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112dc:	74 0a                	je     c00112e8 <udp_bind+0xc8>
c00112de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00112e4:	eb 0a                	jmp    c00112f0 <udp_bind+0xd0>
c00112e6:	66 90                	xchg   ax,ax
c00112e8:	b8 00 00 00 00       	mov    eax,0x0
c00112ed:	8d 76 00             	lea    esi,[esi+0x0]
c00112f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112f4:	89 02                	mov    DWORD PTR [edx],eax
c00112f6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00112fb:	85 c0                	test   eax,eax
c00112fd:	75 6d                	jne    c001136c <udp_bind+0x14c>
c00112ff:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c0011306:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001130b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001130f:	eb 3b                	jmp    c001134c <udp_bind+0x12c>
c0011311:	8d 76 00             	lea    esi,[esi+0x0]
c0011314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011318:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001131c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011321:	0f b7 c0             	movzx  eax,ax
c0011324:	39 c2                	cmp    edx,eax
c0011326:	75 18                	jne    c0011340 <udp_bind+0x120>
c0011328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001132c:	83 c0 01             	add    eax,0x1
c001132f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011334:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011339:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001133d:	eb 0d                	jmp    c001134c <udp_bind+0x12c>
c001133f:	90                   	nop
c0011340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011347:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001134b:	90                   	nop
c001134c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011351:	74 0d                	je     c0011360 <udp_bind+0x140>
c0011353:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011358:	3d ff ff 00 00       	cmp    eax,0xffff
c001135d:	75 b5                	jne    c0011314 <udp_bind+0xf4>
c001135f:	90                   	nop
c0011360:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011365:	74 05                	je     c001136c <udp_bind+0x14c>
c0011367:	b0 f8                	mov    al,0xf8
c0011369:	eb 31                	jmp    c001139c <udp_bind+0x17c>
c001136b:	90                   	nop
c001136c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011370:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011374:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c0011378:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001137d:	85 c0                	test   eax,eax
c001137f:	75 17                	jne    c0011398 <udp_bind+0x178>
c0011381:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001138b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001138e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011392:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011397:	90                   	nop
c0011398:	b0 00                	mov    al,0x0
c001139a:	66 90                	xchg   ax,ax
c001139c:	83 c4 2c             	add    esp,0x2c
c001139f:	c3                   	ret    

c00113a0 <udp_sendto_if>:
c00113a0:	83 ec 2c             	sub    esp,0x2c
c00113a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113b0:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113b4:	0f b7 c0             	movzx  eax,ax
c00113b7:	85 c0                	test   eax,eax
c00113b9:	75 39                	jne    c00113f4 <udp_sendto_if+0x54>
c00113bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113bf:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113c3:	0f b7 d0             	movzx  edx,ax
c00113c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113ca:	83 ec 04             	sub    esp,0x4
c00113cd:	52                   	push   edx
c00113ce:	50                   	push   eax
c00113cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113d3:	e8 48 fe ff ff       	call   c0011220 <udp_bind>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00113df:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00113e4:	85 c0                	test   eax,eax
c00113e6:	74 0c                	je     c00113f4 <udp_sendto_if+0x54>
c00113e8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113ec:	e9 2f 02 00 00       	jmp    c0011620 <udp_sendto_if+0x280>
c00113f1:	8d 76 00             	lea    esi,[esi+0x0]
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	6a 08                	push   0x8
c00113f9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00113fd:	e8 2a 6d ff ff       	call   c000812c <pbuf_header>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	0f b6 c0             	movzx  eax,al
c0011408:	85 c0                	test   eax,eax
c001140a:	74 48                	je     c0011454 <udp_sendto_if+0xb4>
c001140c:	83 ec 04             	sub    esp,0x4
c001140f:	6a 00                	push   0x0
c0011411:	6a 08                	push   0x8
c0011413:	6a 01                	push   0x1
c0011415:	e8 8e 70 ff ff       	call   c00084a8 <pbuf_alloc>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011421:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011426:	75 08                	jne    c0011430 <udp_sendto_if+0x90>
c0011428:	b0 ff                	mov    al,0xff
c001142a:	e9 f1 01 00 00       	jmp    c0011620 <udp_sendto_if+0x280>
c001142f:	90                   	nop
c0011430:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011434:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011437:	0f b7 c0             	movzx  eax,ax
c001143a:	85 c0                	test   eax,eax
c001143c:	74 1e                	je     c001145c <udp_sendto_if+0xbc>
c001143e:	83 ec 08             	sub    esp,0x8
c0011441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011449:	e8 a2 77 ff ff       	call   c0008bf0 <pbuf_chain>
c001144e:	83 c4 10             	add    esp,0x10
c0011451:	eb 09                	jmp    c001145c <udp_sendto_if+0xbc>
c0011453:	90                   	nop
c0011454:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011458:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001145c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011460:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011464:	0f b7 c0             	movzx  eax,ax
c0011467:	83 f8 07             	cmp    eax,0x7
c001146a:	77 18                	ja     c0011484 <udp_sendto_if+0xe4>
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	68 60 09 03 c0       	push   0xc0030960
c0011474:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011479:	e8 4a e6 00 00       	call   c001fac8 <CPrintf>
c001147e:	83 c4 10             	add    esp,0x10
c0011481:	8d 76 00             	lea    esi,[esi+0x0]
c0011484:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001148f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011493:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011497:	0f b7 c0             	movzx  eax,ax
c001149a:	83 ec 0c             	sub    esp,0xc
c001149d:	50                   	push   eax
c001149e:	e8 79 f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	89 c2                	mov    edx,eax
c00114a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ac:	66 89 10             	mov    WORD PTR [eax],dx
c00114af:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	50                   	push   eax
c00114b8:	e8 5f f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	89 c2                	mov    edx,eax
c00114c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114c6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00114ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ce:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00114d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114d8:	85 c0                	test   eax,eax
c00114da:	74 0c                	je     c00114e8 <udp_sendto_if+0x148>
c00114dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e2:	85 c0                	test   eax,eax
c00114e4:	75 12                	jne    c00114f8 <udp_sendto_if+0x158>
c00114e6:	66 90                	xchg   ax,ax
c00114e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114ec:	83 c0 04             	add    eax,0x4
c00114ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f3:	eb 47                	jmp    c001153c <udp_sendto_if+0x19c>
c00114f5:	8d 76 00             	lea    esi,[esi+0x0]
c00114f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00114fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011505:	39 c2                	cmp    edx,eax
c0011507:	74 2b                	je     c0011534 <udp_sendto_if+0x194>
c0011509:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001150d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011511:	74 19                	je     c001152c <udp_sendto_if+0x18c>
c0011513:	83 ec 0c             	sub    esp,0xc
c0011516:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001151a:	e8 ad 6d ff ff       	call   c00082cc <pbuf_free>
c001151f:	83 c4 10             	add    esp,0x10
c0011522:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001152a:	66 90                	xchg   ax,ax
c001152c:	b0 fa                	mov    al,0xfa
c001152e:	e9 ed 00 00 00       	jmp    c0011620 <udp_sendto_if+0x280>
c0011533:	90                   	nop
c0011534:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011538:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001153c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011540:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011543:	0f b7 c0             	movzx  eax,ax
c0011546:	83 ec 0c             	sub    esp,0xc
c0011549:	50                   	push   eax
c001154a:	e8 cd f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001154f:	83 c4 10             	add    esp,0x10
c0011552:	89 c2                	mov    edx,eax
c0011554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011558:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001155c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011560:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011563:	0f b6 c0             	movzx  eax,al
c0011566:	83 e0 01             	and    eax,0x1
c0011569:	75 49                	jne    c00115b4 <udp_sendto_if+0x214>
c001156b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001156f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011572:	0f b7 c0             	movzx  eax,ax
c0011575:	83 ec 0c             	sub    esp,0xc
c0011578:	50                   	push   eax
c0011579:	6a 11                	push   0x11
c001157b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001157f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011583:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011587:	e8 fc 1b 00 00       	call   c0013188 <inet_chksum_pseudo>
c001158c:	83 c4 20             	add    esp,0x20
c001158f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011594:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011599:	85 c0                	test   eax,eax
c001159b:	75 07                	jne    c00115a4 <udp_sendto_if+0x204>
c001159d:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00115a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00115ad:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00115b1:	8d 76 00             	lea    esi,[esi+0x0]
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00115bb:	0f b6 d0             	movzx  edx,al
c00115be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c2:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00115c5:	0f b6 c0             	movzx  eax,al
c00115c8:	83 ec 04             	sub    esp,0x4
c00115cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115cf:	6a 11                	push   0x11
c00115d1:	52                   	push   edx
c00115d2:	50                   	push   eax
c00115d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115df:	e8 08 25 00 00       	call   c0013aec <ip_output_if>
c00115e4:	83 c4 20             	add    esp,0x20
c00115e7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00115eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115ef:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115f3:	74 17                	je     c001160c <udp_sendto_if+0x26c>
c00115f5:	83 ec 0c             	sub    esp,0xc
c00115f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115fc:	e8 cb 6c ff ff       	call   c00082cc <pbuf_free>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001160c:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c0011612:	83 c0 01             	add    eax,0x1
c0011615:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c001161b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001161f:	90                   	nop
c0011620:	83 c4 2c             	add    esp,0x2c
c0011623:	c3                   	ret    

c0011624 <udp_sendto>:
c0011624:	83 ec 2c             	sub    esp,0x2c
c0011627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001162b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011637:	e8 d8 1f 00 00       	call   c0013614 <ip_route>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011643:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011648:	75 16                	jne    c0011660 <udp_sendto+0x3c>
c001164a:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011650:	83 c0 01             	add    eax,0x1
c0011653:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c0011659:	b0 fc                	mov    al,0xfc
c001165b:	eb 27                	jmp    c0011684 <udp_sendto+0x60>
c001165d:	8d 76 00             	lea    esi,[esi+0x0]
c0011660:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011665:	83 ec 0c             	sub    esp,0xc
c0011668:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001166c:	50                   	push   eax
c001166d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011675:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011679:	e8 22 fd ff ff       	call   c00113a0 <udp_sendto_if>
c001167e:	83 c4 20             	add    esp,0x20
c0011681:	8d 76 00             	lea    esi,[esi+0x0]
c0011684:	83 c4 2c             	add    esp,0x2c
c0011687:	c3                   	ret    

c0011688 <udp_send>:
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011692:	0f b7 c0             	movzx  eax,ax
c0011695:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011699:	83 c2 04             	add    edx,0x4
c001169c:	50                   	push   eax
c001169d:	52                   	push   edx
c001169e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	e8 79 ff ff ff       	call   c0011624 <udp_sendto>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	83 c4 0c             	add    esp,0xc
c00116b1:	c3                   	ret    
c00116b2:	66 90                	xchg   ax,ax

c00116b4 <udp_connect>:
c00116b4:	83 ec 2c             	sub    esp,0x2c
c00116b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116bb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c4:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116c8:	0f b7 c0             	movzx  eax,ax
c00116cb:	85 c0                	test   eax,eax
c00116cd:	75 39                	jne    c0011708 <udp_connect+0x54>
c00116cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d3:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116d7:	0f b7 d0             	movzx  edx,ax
c00116da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116de:	83 ec 04             	sub    esp,0x4
c00116e1:	52                   	push   edx
c00116e2:	50                   	push   eax
c00116e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00116e7:	e8 34 fb ff ff       	call   c0011220 <udp_bind>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116f3:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00116f8:	85 c0                	test   eax,eax
c00116fa:	74 0c                	je     c0011708 <udp_connect+0x54>
c00116fc:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011700:	e9 8b 00 00 00       	jmp    c0011790 <udp_connect+0xdc>
c0011705:	8d 76 00             	lea    esi,[esi+0x0]
c0011708:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001170d:	74 09                	je     c0011718 <udp_connect+0x64>
c001170f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011713:	8b 00                	mov    eax,DWORD PTR [eax]
c0011715:	eb 09                	jmp    c0011720 <udp_connect+0x6c>
c0011717:	90                   	nop
c0011718:	b8 00 00 00 00       	mov    eax,0x0
c001171d:	8d 76 00             	lea    esi,[esi+0x0]
c0011720:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011724:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011727:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001172b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001172f:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c0011733:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011737:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001173a:	83 c8 04             	or     eax,0x4
c001173d:	88 c2                	mov    dl,al
c001173f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011743:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011746:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001174b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001174f:	eb 1f                	jmp    c0011770 <udp_connect+0xbc>
c0011751:	8d 76 00             	lea    esi,[esi+0x0]
c0011754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011758:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001175c:	75 06                	jne    c0011764 <udp_connect+0xb0>
c001175e:	b0 00                	mov    al,0x0
c0011760:	eb 2e                	jmp    c0011790 <udp_connect+0xdc>
c0011762:	66 90                	xchg   ax,ax
c0011764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001176b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001176f:	90                   	nop
c0011770:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011775:	75 dd                	jne    c0011754 <udp_connect+0xa0>
c0011777:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001177d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011781:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011784:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011788:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001178d:	b0 00                	mov    al,0x0
c001178f:	90                   	nop
c0011790:	83 c4 2c             	add    esp,0x2c
c0011793:	c3                   	ret    

c0011794 <udp_disconnect>:
c0011794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011798:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001179f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a3:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00117a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ad:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117b0:	83 e0 fb             	and    eax,0xfffffffb
c00117b3:	88 c2                	mov    dl,al
c00117b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b9:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00117bc:	90                   	nop
c00117bd:	c3                   	ret    
c00117be:	66 90                	xchg   ax,ax

c00117c0 <udp_recv>:
c00117c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117d3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00117d6:	90                   	nop
c00117d7:	c3                   	ret    

c00117d8 <udp_remove>:
c00117d8:	83 ec 1c             	sub    esp,0x1c
c00117db:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117e0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117e4:	75 12                	jne    c00117f8 <udp_remove+0x20>
c00117e6:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117ee:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117f3:	eb 4b                	jmp    c0011840 <udp_remove+0x68>
c00117f5:	8d 76 00             	lea    esi,[esi+0x0]
c00117f8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011801:	eb 35                	jmp    c0011838 <udp_remove+0x60>
c0011803:	90                   	nop
c0011804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011808:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180b:	85 c0                	test   eax,eax
c001180d:	74 1d                	je     c001182c <udp_remove+0x54>
c001180f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011813:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011816:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001181a:	75 10                	jne    c001182c <udp_remove+0x54>
c001181c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011820:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011827:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001182a:	66 90                	xchg   ax,ax
c001182c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011830:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011837:	90                   	nop
c0011838:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001183d:	75 c5                	jne    c0011804 <udp_remove+0x2c>
c001183f:	90                   	nop
c0011840:	83 ec 08             	sub    esp,0x8
c0011843:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011847:	6a 01                	push   0x1
c0011849:	e8 be 61 ff ff       	call   c0007a0c <memp_free>
c001184e:	83 c4 10             	add    esp,0x10
c0011851:	90                   	nop
c0011852:	83 c4 1c             	add    esp,0x1c
c0011855:	c3                   	ret    
c0011856:	66 90                	xchg   ax,ax

c0011858 <udp_new>:
c0011858:	83 ec 1c             	sub    esp,0x1c
c001185b:	83 ec 0c             	sub    esp,0xc
c001185e:	6a 01                	push   0x1
c0011860:	e8 7b 60 ff ff       	call   c00078e0 <memp_malloc>
c0011865:	83 c4 10             	add    esp,0x10
c0011868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001186c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011871:	74 1d                	je     c0011890 <udp_new+0x38>
c0011873:	83 ec 04             	sub    esp,0x4
c0011876:	6a 20                	push   0x20
c0011878:	6a 00                	push   0x0
c001187a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001187e:	e8 6d ec fe ff       	call   c00004f0 <memset>
c0011883:	83 c4 10             	add    esp,0x10
c0011886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001188a:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c001188e:	66 90                	xchg   ax,ax
c0011890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011894:	83 c4 1c             	add    esp,0x1c
c0011897:	c3                   	ret    

c0011898 <free_entry>:
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189f:	c1 e0 04             	shl    eax,0x4
c00118a2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a9:	85 c0                	test   eax,eax
c00118ab:	74 2f                	je     c00118dc <free_entry+0x44>
c00118ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b1:	c1 e0 04             	shl    eax,0x4
c00118b4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bb:	83 ec 0c             	sub    esp,0xc
c00118be:	50                   	push   eax
c00118bf:	e8 08 6a ff ff       	call   c00082cc <pbuf_free>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cb:	c1 e0 04             	shl    eax,0x4
c00118ce:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118d9:	8d 76 00             	lea    esi,[esi+0x0]
c00118dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e0:	c1 e0 04             	shl    eax,0x4
c00118e3:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118e8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00118eb:	90                   	nop
c00118ec:	83 c4 0c             	add    esp,0xc
c00118ef:	c3                   	ret    

c00118f0 <etharp_tmr>:
c00118f0:	83 ec 1c             	sub    esp,0x1c
c00118f3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118f8:	e9 a7 00 00 00       	jmp    c00119a4 <etharp_tmr+0xb4>
c00118fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011900:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011905:	c1 e0 04             	shl    eax,0x4
c0011908:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001190d:	8a 00                	mov    al,BYTE PTR [eax]
c001190f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011913:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011918:	85 c0                	test   eax,eax
c001191a:	74 7c                	je     c0011998 <etharp_tmr+0xa8>
c001191c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011921:	89 c2                	mov    edx,eax
c0011923:	c1 e2 04             	shl    edx,0x4
c0011926:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c001192c:	8a 12                	mov    dl,BYTE PTR [edx]
c001192e:	83 c2 01             	add    edx,0x1
c0011931:	c1 e0 04             	shl    eax,0x4
c0011934:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011939:	88 10                	mov    BYTE PTR [eax],dl
c001193b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011940:	c1 e0 04             	shl    eax,0x4
c0011943:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011948:	8a 00                	mov    al,BYTE PTR [eax]
c001194a:	0f b6 c0             	movzx  eax,al
c001194d:	3d ef 00 00 00       	cmp    eax,0xef
c0011952:	77 30                	ja     c0011984 <etharp_tmr+0x94>
c0011954:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011959:	c1 e0 04             	shl    eax,0x4
c001195c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011961:	8a 00                	mov    al,BYTE PTR [eax]
c0011963:	0f b6 c0             	movzx  eax,al
c0011966:	83 f8 01             	cmp    eax,0x1
c0011969:	75 2d                	jne    c0011998 <etharp_tmr+0xa8>
c001196b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011970:	c1 e0 04             	shl    eax,0x4
c0011973:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011978:	8a 00                	mov    al,BYTE PTR [eax]
c001197a:	0f b6 c0             	movzx  eax,al
c001197d:	83 f8 01             	cmp    eax,0x1
c0011980:	76 16                	jbe    c0011998 <etharp_tmr+0xa8>
c0011982:	66 90                	xchg   ax,ax
c0011984:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011989:	83 ec 0c             	sub    esp,0xc
c001198c:	50                   	push   eax
c001198d:	e8 06 ff ff ff       	call   c0011898 <free_entry>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	8d 76 00             	lea    esi,[esi+0x0]
c0011998:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001199c:	83 c0 01             	add    eax,0x1
c001199f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119a3:	90                   	nop
c00119a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119a9:	83 f8 09             	cmp    eax,0x9
c00119ac:	0f 86 4e ff ff ff    	jbe    c0011900 <etharp_tmr+0x10>
c00119b2:	90                   	nop
c00119b3:	83 c4 1c             	add    esp,0x1c
c00119b6:	c3                   	ret    
c00119b7:	90                   	nop

c00119b8 <find_entry>:
c00119b8:	83 ec 2c             	sub    esp,0x2c
c00119bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00119c3:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00119c8:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00119cd:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00119d2:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119d7:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00119dc:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00119e1:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00119e6:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00119eb:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119f0:	e9 7f 01 00 00       	jmp    c0011b74 <find_entry+0x1bc>
c00119f5:	8d 76 00             	lea    esi,[esi+0x0]
c00119f8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119fd:	c1 e0 04             	shl    eax,0x4
c0011a00:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a05:	8a 00                	mov    al,BYTE PTR [eax]
c0011a07:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011a0b:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a10:	83 f8 0a             	cmp    eax,0xa
c0011a13:	75 17                	jne    c0011a2c <find_entry+0x74>
c0011a15:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a1a:	85 c0                	test   eax,eax
c0011a1c:	75 0e                	jne    c0011a2c <find_entry+0x74>
c0011a1e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a22:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011a26:	e9 3d 01 00 00       	jmp    c0011b68 <find_entry+0x1b0>
c0011a2b:	90                   	nop
c0011a2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a31:	85 c0                	test   eax,eax
c0011a33:	0f 84 2f 01 00 00    	je     c0011b68 <find_entry+0x1b0>
c0011a39:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a3e:	83 f8 01             	cmp    eax,0x1
c0011a41:	74 21                	je     c0011a64 <find_entry+0xac>
c0011a43:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a48:	83 f8 02             	cmp    eax,0x2
c0011a4b:	74 17                	je     c0011a64 <find_entry+0xac>
c0011a4d:	83 ec 08             	sub    esp,0x8
c0011a50:	68 90 09 03 c0       	push   0xc0030990
c0011a55:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011a5a:	e8 69 e0 00 00       	call   c001fac8 <CPrintf>
c0011a5f:	83 c4 10             	add    esp,0x10
c0011a62:	66 90                	xchg   ax,ax
c0011a64:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a69:	74 25                	je     c0011a90 <find_entry+0xd8>
c0011a6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a71:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a76:	c1 e0 04             	shl    eax,0x4
c0011a79:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a80:	39 c2                	cmp    edx,eax
c0011a82:	75 0c                	jne    c0011a90 <find_entry+0xd8>
c0011a84:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a88:	e9 53 02 00 00       	jmp    c0011ce0 <find_entry+0x328>
c0011a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a90:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a95:	83 f8 01             	cmp    eax,0x1
c0011a98:	0f 85 8a 00 00 00    	jne    c0011b28 <find_entry+0x170>
c0011a9e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa3:	c1 e0 04             	shl    eax,0x4
c0011aa6:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aad:	85 c0                	test   eax,eax
c0011aaf:	74 3f                	je     c0011af0 <find_entry+0x138>
c0011ab1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ab6:	c1 e0 04             	shl    eax,0x4
c0011ab9:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011abe:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac0:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011ac5:	0f b6 c0             	movzx  eax,al
c0011ac8:	39 c2                	cmp    edx,eax
c0011aca:	0f 87 98 00 00 00    	ja     c0011b68 <find_entry+0x1b0>
c0011ad0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ad4:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011ad8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011add:	c1 e0 04             	shl    eax,0x4
c0011ae0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae5:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011aeb:	eb 7b                	jmp    c0011b68 <find_entry+0x1b0>
c0011aed:	8d 76 00             	lea    esi,[esi+0x0]
c0011af0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011b04:	0f b6 c0             	movzx  eax,al
c0011b07:	39 c2                	cmp    edx,eax
c0011b09:	77 5d                	ja     c0011b68 <find_entry+0x1b0>
c0011b0b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b0f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011b13:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b18:	c1 e0 04             	shl    eax,0x4
c0011b1b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b20:	8a 00                	mov    al,BYTE PTR [eax]
c0011b22:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011b26:	eb 40                	jmp    c0011b68 <find_entry+0x1b0>
c0011b28:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b2d:	83 f8 02             	cmp    eax,0x2
c0011b30:	75 36                	jne    c0011b68 <find_entry+0x1b0>
c0011b32:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b37:	c1 e0 04             	shl    eax,0x4
c0011b3a:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b3f:	8a 00                	mov    al,BYTE PTR [eax]
c0011b41:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011b46:	0f b6 c0             	movzx  eax,al
c0011b49:	39 c2                	cmp    edx,eax
c0011b4b:	77 1b                	ja     c0011b68 <find_entry+0x1b0>
c0011b4d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b51:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b55:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5a:	c1 e0 04             	shl    eax,0x4
c0011b5d:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b62:	8a 00                	mov    al,BYTE PTR [eax]
c0011b64:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b68:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b6c:	83 c0 01             	add    eax,0x1
c0011b6f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b73:	90                   	nop
c0011b74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b79:	83 f8 09             	cmp    eax,0x9
c0011b7c:	0f 86 76 fe ff ff    	jbe    c00119f8 <find_entry+0x40>
c0011b82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b87:	83 e0 02             	and    eax,0x2
c0011b8a:	75 14                	jne    c0011ba0 <find_entry+0x1e8>
c0011b8c:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b91:	83 f8 0a             	cmp    eax,0xa
c0011b94:	75 12                	jne    c0011ba8 <find_entry+0x1f0>
c0011b96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b9b:	83 e0 01             	and    eax,0x1
c0011b9e:	75 08                	jne    c0011ba8 <find_entry+0x1f0>
c0011ba0:	b0 ff                	mov    al,0xff
c0011ba2:	e9 39 01 00 00       	jmp    c0011ce0 <find_entry+0x328>
c0011ba7:	90                   	nop
c0011ba8:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bad:	83 f8 09             	cmp    eax,0x9
c0011bb0:	7f 0e                	jg     c0011bc0 <find_entry+0x208>
c0011bb2:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011bb6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bba:	e9 a1 00 00 00       	jmp    c0011c60 <find_entry+0x2a8>
c0011bbf:	90                   	nop
c0011bc0:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011bc5:	83 f8 09             	cmp    eax,0x9
c0011bc8:	7f 32                	jg     c0011bfc <find_entry+0x244>
c0011bca:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011bce:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bd2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bd7:	c1 e0 04             	shl    eax,0x4
c0011bda:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be1:	85 c0                	test   eax,eax
c0011be3:	74 47                	je     c0011c2c <find_entry+0x274>
c0011be5:	83 ec 08             	sub    esp,0x8
c0011be8:	68 09 0b 03 c0       	push   0xc0030b09
c0011bed:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011bf2:	e8 d1 de 00 00       	call   c001fac8 <CPrintf>
c0011bf7:	83 c4 10             	add    esp,0x10
c0011bfa:	eb 30                	jmp    c0011c2c <find_entry+0x274>
c0011bfc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011c01:	83 f8 09             	cmp    eax,0x9
c0011c04:	7f 0a                	jg     c0011c10 <find_entry+0x258>
c0011c06:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c0a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c0e:	eb 1c                	jmp    c0011c2c <find_entry+0x274>
c0011c10:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011c15:	83 f8 09             	cmp    eax,0x9
c0011c18:	7f 0a                	jg     c0011c24 <find_entry+0x26c>
c0011c1a:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011c1e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c22:	eb 08                	jmp    c0011c2c <find_entry+0x274>
c0011c24:	b0 ff                	mov    al,0xff
c0011c26:	e9 b5 00 00 00       	jmp    c0011ce0 <find_entry+0x328>
c0011c2b:	90                   	nop
c0011c2c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c31:	83 f8 09             	cmp    eax,0x9
c0011c34:	76 16                	jbe    c0011c4c <find_entry+0x294>
c0011c36:	83 ec 08             	sub    esp,0x8
c0011c39:	68 20 0b 03 c0       	push   0xc0030b20
c0011c3e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011c43:	e8 80 de 00 00       	call   c001fac8 <CPrintf>
c0011c48:	83 c4 10             	add    esp,0x10
c0011c4b:	90                   	nop
c0011c4c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	50                   	push   eax
c0011c55:	e8 3e fc ff ff       	call   c0011898 <free_entry>
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c60:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c65:	83 f8 09             	cmp    eax,0x9
c0011c68:	76 16                	jbe    c0011c80 <find_entry+0x2c8>
c0011c6a:	83 ec 08             	sub    esp,0x8
c0011c6d:	68 20 0b 03 c0       	push   0xc0030b20
c0011c72:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011c77:	e8 4c de 00 00       	call   c001fac8 <CPrintf>
c0011c7c:	83 c4 10             	add    esp,0x10
c0011c7f:	90                   	nop
c0011c80:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c85:	c1 e0 04             	shl    eax,0x4
c0011c88:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c8d:	8a 00                	mov    al,BYTE PTR [eax]
c0011c8f:	0f b6 c0             	movzx  eax,al
c0011c92:	85 c0                	test   eax,eax
c0011c94:	74 16                	je     c0011cac <find_entry+0x2f4>
c0011c96:	83 ec 08             	sub    esp,0x8
c0011c99:	68 d0 09 03 c0       	push   0xc00309d0
c0011c9e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011ca3:	e8 20 de 00 00       	call   c001fac8 <CPrintf>
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	90                   	nop
c0011cac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb1:	74 19                	je     c0011ccc <find_entry+0x314>
c0011cb3:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbe:	c1 e2 04             	shl    edx,0x4
c0011cc1:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011cc7:	89 02                	mov    DWORD PTR [edx],eax
c0011cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0011ccc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd1:	c1 e0 04             	shl    eax,0x4
c0011cd4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cd9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011cdc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ce0:	83 c4 2c             	add    esp,0x2c
c0011ce3:	c3                   	ret    

c0011ce4 <etharp_send_ip>:
c0011ce4:	83 ec 1c             	sub    esp,0x1c
c0011ce7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cf6:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cf9:	0f b6 c0             	movzx  eax,al
c0011cfc:	83 f8 06             	cmp    eax,0x6
c0011cff:	74 17                	je     c0011d18 <etharp_send_ip+0x34>
c0011d01:	83 ec 08             	sub    esp,0x8
c0011d04:	68 fc 09 03 c0       	push   0xc00309fc
c0011d09:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011d0e:	e8 b5 dd 00 00       	call   c001fac8 <CPrintf>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	66 90                	xchg   ax,ax
c0011d18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1c:	83 ec 04             	sub    esp,0x4
c0011d1f:	6a 06                	push   0x6
c0011d21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d25:	50                   	push   eax
c0011d26:	e8 4f e6 fe ff       	call   c000037a <memcpy>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d32:	83 c0 06             	add    eax,0x6
c0011d35:	83 ec 04             	sub    esp,0x4
c0011d38:	6a 06                	push   0x6
c0011d3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d3e:	50                   	push   eax
c0011d3f:	e8 36 e6 fe ff       	call   c000037a <memcpy>
c0011d44:	83 c4 10             	add    esp,0x10
c0011d47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d4b:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d55:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d58:	83 ec 08             	sub    esp,0x8
c0011d5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d63:	ff d0                	call   eax
c0011d65:	83 c4 10             	add    esp,0x10
c0011d68:	83 c4 1c             	add    esp,0x1c
c0011d6b:	c3                   	ret    

c0011d6c <update_arp_entry>:
c0011d6c:	83 ec 2c             	sub    esp,0x2c
c0011d6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d7b:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d7e:	0f b6 c0             	movzx  eax,al
c0011d81:	83 f8 06             	cmp    eax,0x6
c0011d84:	74 16                	je     c0011d9c <update_arp_entry+0x30>
c0011d86:	83 ec 08             	sub    esp,0x8
c0011d89:	68 40 0a 03 c0       	push   0xc0030a40
c0011d8e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011d93:	e8 30 dd 00 00       	call   c001fac8 <CPrintf>
c0011d98:	83 c4 10             	add    esp,0x10
c0011d9b:	90                   	nop
c0011d9c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011da1:	74 39                	je     c0011ddc <update_arp_entry+0x70>
c0011da3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da9:	85 c0                	test   eax,eax
c0011dab:	74 2f                	je     c0011ddc <update_arp_entry+0x70>
c0011dad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	83 ec 08             	sub    esp,0x8
c0011db6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dba:	50                   	push   eax
c0011dbb:	e8 b0 20 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	0f b6 c0             	movzx  eax,al
c0011dc6:	85 c0                	test   eax,eax
c0011dc8:	75 12                	jne    c0011ddc <update_arp_entry+0x70>
c0011dca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd0:	25 f0 00 00 00       	and    eax,0xf0
c0011dd5:	3d e0 00 00 00       	cmp    eax,0xe0
c0011dda:	75 08                	jne    c0011de4 <update_arp_entry+0x78>
c0011ddc:	b0 f2                	mov    al,0xf2
c0011dde:	e9 d9 00 00 00       	jmp    c0011ebc <update_arp_entry+0x150>
c0011de3:	90                   	nop
c0011de4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	50                   	push   eax
c0011ded:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011df1:	e8 c2 fb ff ff       	call   c00119b8 <find_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011dfd:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e02:	85 c0                	test   eax,eax
c0011e04:	79 0a                	jns    c0011e10 <update_arp_entry+0xa4>
c0011e06:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e0a:	e9 ad 00 00 00       	jmp    c0011ebc <update_arp_entry+0x150>
c0011e0f:	90                   	nop
c0011e10:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e15:	c1 e0 04             	shl    eax,0x4
c0011e18:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e1d:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011e20:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e25:	c1 e0 04             	shl    eax,0x4
c0011e28:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e2d:	83 c0 08             	add    eax,0x8
c0011e30:	83 ec 04             	sub    esp,0x4
c0011e33:	6a 06                	push   0x6
c0011e35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e39:	50                   	push   eax
c0011e3a:	e8 3b e5 fe ff       	call   c000037a <memcpy>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e47:	c1 e0 04             	shl    eax,0x4
c0011e4a:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e52:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e57:	c1 e0 04             	shl    eax,0x4
c0011e5a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e61:	85 c0                	test   eax,eax
c0011e63:	74 53                	je     c0011eb8 <update_arp_entry+0x14c>
c0011e65:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e6a:	c1 e0 04             	shl    eax,0x4
c0011e6d:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e78:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e7d:	c1 e0 04             	shl    eax,0x4
c0011e80:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8f:	83 c0 23             	add    eax,0x23
c0011e92:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e96:	50                   	push   eax
c0011e97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011e9f:	e8 40 fe ff ff       	call   c0011ce4 <etharp_send_ip>
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011eae:	e8 19 64 ff ff       	call   c00082cc <pbuf_free>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	66 90                	xchg   ax,ax
c0011eb8:	b0 00                	mov    al,0x0
c0011eba:	66 90                	xchg   ax,ax
c0011ebc:	83 c4 2c             	add    esp,0x2c
c0011ebf:	c3                   	ret    

c0011ec0 <etharp_find_addr>:
c0011ec0:	83 ec 1c             	sub    esp,0x1c
c0011ec3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ec8:	74 0a                	je     c0011ed4 <etharp_find_addr+0x14>
c0011eca:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011ecf:	75 1b                	jne    c0011eec <etharp_find_addr+0x2c>
c0011ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ed4:	83 ec 08             	sub    esp,0x8
c0011ed7:	68 68 0a 03 c0       	push   0xc0030a68
c0011edc:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011ee1:	e8 e2 db 00 00       	call   c001fac8 <CPrintf>
c0011ee6:	83 c4 10             	add    esp,0x10
c0011ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	6a 02                	push   0x2
c0011ef1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ef5:	e8 be fa ff ff       	call   c00119b8 <find_entry>
c0011efa:	83 c4 10             	add    esp,0x10
c0011efd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f01:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f06:	85 c0                	test   eax,eax
c0011f08:	78 4a                	js     c0011f54 <etharp_find_addr+0x94>
c0011f0a:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f0f:	c1 e0 04             	shl    eax,0x4
c0011f12:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011f17:	8a 00                	mov    al,BYTE PTR [eax]
c0011f19:	0f b6 c0             	movzx  eax,al
c0011f1c:	83 f8 02             	cmp    eax,0x2
c0011f1f:	75 33                	jne    c0011f54 <etharp_find_addr+0x94>
c0011f21:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f26:	c1 e0 04             	shl    eax,0x4
c0011f29:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f2e:	8d 50 08             	lea    edx,[eax+0x8]
c0011f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f35:	89 10                	mov    DWORD PTR [eax],edx
c0011f37:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f3c:	c1 e0 04             	shl    eax,0x4
c0011f3f:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f44:	8d 50 04             	lea    edx,[eax+0x4]
c0011f47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4b:	89 10                	mov    DWORD PTR [eax],edx
c0011f4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f51:	eb 05                	jmp    c0011f58 <etharp_find_addr+0x98>
c0011f53:	90                   	nop
c0011f54:	b0 ff                	mov    al,0xff
c0011f56:	66 90                	xchg   ax,ax
c0011f58:	83 c4 1c             	add    esp,0x1c
c0011f5b:	c3                   	ret    

c0011f5c <etharp_arp_input>:
c0011f5c:	83 ec 2c             	sub    esp,0x2c
c0011f5f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f64:	75 1a                	jne    c0011f80 <etharp_arp_input+0x24>
c0011f66:	83 ec 08             	sub    esp,0x8
c0011f69:	68 33 0b 03 c0       	push   0xc0030b33
c0011f6e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0011f73:	e8 50 db 00 00       	call   c001fac8 <CPrintf>
c0011f78:	83 c4 10             	add    esp,0x10
c0011f7b:	e9 d4 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f8>
c0011f80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f88:	0f b7 c0             	movzx  eax,ax
c0011f8b:	83 f8 29             	cmp    eax,0x29
c0011f8e:	77 34                	ja     c0011fc4 <etharp_arp_input+0x68>
c0011f90:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f96:	83 c0 01             	add    eax,0x1
c0011f99:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011f9f:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fa5:	83 c0 01             	add    eax,0x1
c0011fa8:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011fb5:	e8 12 63 ff ff       	call   c00082cc <pbuf_free>
c0011fba:	83 c4 10             	add    esp,0x10
c0011fbd:	e9 92 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f8>
c0011fc2:	66 90                	xchg   ax,ax
c0011fc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd3:	83 c0 0e             	add    eax,0xe
c0011fd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fde:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011fe1:	0f b7 c0             	movzx  eax,ax
c0011fe4:	3d 00 01 00 00       	cmp    eax,0x100
c0011fe9:	75 31                	jne    c001201c <etharp_arp_input+0xc0>
c0011feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fef:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011ff2:	0f b6 c0             	movzx  eax,al
c0011ff5:	83 f8 06             	cmp    eax,0x6
c0011ff8:	75 22                	jne    c001201c <etharp_arp_input+0xc0>
c0011ffa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ffe:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012001:	0f b6 c0             	movzx  eax,al
c0012004:	83 f8 04             	cmp    eax,0x4
c0012007:	75 13                	jne    c001201c <etharp_arp_input+0xc0>
c0012009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001200d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012011:	0f b7 c0             	movzx  eax,ax
c0012014:	83 f8 08             	cmp    eax,0x8
c0012017:	74 37                	je     c0012050 <etharp_arp_input+0xf4>
c0012019:	8d 76 00             	lea    esi,[esi+0x0]
c001201c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012022:	83 c0 01             	add    eax,0x1
c0012025:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001202b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012031:	83 c0 01             	add    eax,0x1
c0012034:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012041:	e8 86 62 ff ff       	call   c00082cc <pbuf_free>
c0012046:	83 c4 10             	add    esp,0x10
c0012049:	e9 06 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f8>
c001204e:	66 90                	xchg   ax,ax
c0012050:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0012056:	83 c0 01             	add    eax,0x1
c0012059:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c001205f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012063:	83 c0 0e             	add    eax,0xe
c0012066:	83 ec 04             	sub    esp,0x4
c0012069:	6a 04                	push   0x4
c001206b:	50                   	push   eax
c001206c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012070:	50                   	push   eax
c0012071:	e8 04 e3 fe ff       	call   c000037a <memcpy>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001207d:	83 c0 18             	add    eax,0x18
c0012080:	83 ec 04             	sub    esp,0x4
c0012083:	6a 04                	push   0x4
c0012085:	50                   	push   eax
c0012086:	8d 44 24 18          	lea    eax,[esp+0x18]
c001208a:	50                   	push   eax
c001208b:	e8 ea e2 fe ff       	call   c000037a <memcpy>
c0012090:	83 c4 10             	add    esp,0x10
c0012093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012097:	83 c0 04             	add    eax,0x4
c001209a:	74 0c                	je     c00120a8 <etharp_arp_input+0x14c>
c001209c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120a3:	85 c0                	test   eax,eax
c00120a5:	75 09                	jne    c00120b0 <etharp_arp_input+0x154>
c00120a7:	90                   	nop
c00120a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120ad:	eb 15                	jmp    c00120c4 <etharp_arp_input+0x168>
c00120af:	90                   	nop
c00120b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120bb:	39 c2                	cmp    edx,eax
c00120bd:	0f 94 c0             	sete   al
c00120c0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120c4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120c9:	85 c0                	test   eax,eax
c00120cb:	74 07                	je     c00120d4 <etharp_arp_input+0x178>
c00120cd:	b8 01 00 00 00       	mov    eax,0x1
c00120d2:	eb 08                	jmp    c00120dc <etharp_arp_input+0x180>
c00120d4:	b8 02 00 00 00       	mov    eax,0x2
c00120d9:	8d 76 00             	lea    esi,[esi+0x0]
c00120dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e0:	83 c2 08             	add    edx,0x8
c00120e3:	50                   	push   eax
c00120e4:	52                   	push   edx
c00120e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120e9:	50                   	push   eax
c00120ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ee:	e8 79 fc ff ff       	call   c0011d6c <update_arp_entry>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120fa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00120fe:	0f b7 c0             	movzx  eax,ax
c0012101:	3d 00 01 00 00       	cmp    eax,0x100
c0012106:	74 10                	je     c0012118 <etharp_arp_input+0x1bc>
c0012108:	3d 00 02 00 00       	cmp    eax,0x200
c001210d:	0f 84 2d 01 00 00    	je     c0012240 <etharp_arp_input+0x2e4>
c0012113:	e9 14 01 00 00       	jmp    c001222c <etharp_arp_input+0x2d0>
c0012118:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001211d:	85 c0                	test   eax,eax
c001211f:	0f 84 fb 00 00 00    	je     c0012220 <etharp_arp_input+0x2c4>
c0012125:	83 ec 0c             	sub    esp,0xc
c0012128:	6a 02                	push   0x2
c001212a:	e8 ed ea fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001212f:	83 c4 10             	add    esp,0x10
c0012132:	89 c2                	mov    edx,eax
c0012134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012138:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001213c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012140:	8d 50 0e             	lea    edx,[eax+0xe]
c0012143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012147:	83 c0 18             	add    eax,0x18
c001214a:	83 ec 04             	sub    esp,0x4
c001214d:	6a 04                	push   0x4
c001214f:	52                   	push   edx
c0012150:	50                   	push   eax
c0012151:	e8 24 e2 fe ff       	call   c000037a <memcpy>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215d:	8d 50 04             	lea    edx,[eax+0x4]
c0012160:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012164:	83 c0 0e             	add    eax,0xe
c0012167:	83 ec 04             	sub    esp,0x4
c001216a:	6a 04                	push   0x4
c001216c:	52                   	push   edx
c001216d:	50                   	push   eax
c001216e:	e8 07 e2 fe ff       	call   c000037a <memcpy>
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217a:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c001217d:	0f b6 c0             	movzx  eax,al
c0012180:	83 f8 06             	cmp    eax,0x6
c0012183:	74 17                	je     c001219c <etharp_arp_input+0x240>
c0012185:	83 ec 08             	sub    esp,0x8
c0012188:	68 fc 09 03 c0       	push   0xc00309fc
c001218d:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012192:	e8 31 d9 00 00       	call   c001fac8 <CPrintf>
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	66 90                	xchg   ax,ax
c001219c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a0:	8d 50 08             	lea    edx,[eax+0x8]
c00121a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a7:	83 c0 12             	add    eax,0x12
c00121aa:	83 ec 04             	sub    esp,0x4
c00121ad:	6a 06                	push   0x6
c00121af:	52                   	push   edx
c00121b0:	50                   	push   eax
c00121b1:	e8 c4 e1 fe ff       	call   c000037a <memcpy>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121bd:	8d 50 08             	lea    edx,[eax+0x8]
c00121c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c4:	83 ec 04             	sub    esp,0x4
c00121c7:	6a 06                	push   0x6
c00121c9:	52                   	push   edx
c00121ca:	50                   	push   eax
c00121cb:	e8 aa e1 fe ff       	call   c000037a <memcpy>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d7:	83 c0 08             	add    eax,0x8
c00121da:	83 ec 04             	sub    esp,0x4
c00121dd:	6a 06                	push   0x6
c00121df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121e3:	50                   	push   eax
c00121e4:	e8 91 e1 fe ff       	call   c000037a <memcpy>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f0:	83 c0 06             	add    eax,0x6
c00121f3:	83 ec 04             	sub    esp,0x4
c00121f6:	6a 06                	push   0x6
c00121f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fc:	50                   	push   eax
c00121fd:	e8 78 e1 fe ff       	call   c000037a <memcpy>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012209:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012217:	ff d0                	call   eax
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	eb 26                	jmp    c0012244 <etharp_arp_input+0x2e8>
c001221e:	66 90                	xchg   ax,ax
c0012220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012224:	83 c0 04             	add    eax,0x4
c0012227:	eb 1b                	jmp    c0012244 <etharp_arp_input+0x2e8>
c0012229:	8d 76 00             	lea    esi,[esi+0x0]
c001222c:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c0012232:	83 c0 01             	add    eax,0x1
c0012235:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c001223b:	eb 07                	jmp    c0012244 <etharp_arp_input+0x2e8>
c001223d:	8d 76 00             	lea    esi,[esi+0x0]
c0012240:	90                   	nop
c0012241:	8d 76 00             	lea    esi,[esi+0x0]
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001224b:	e8 7c 60 ff ff       	call   c00082cc <pbuf_free>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	90                   	nop
c0012254:	83 c4 2c             	add    esp,0x2c
c0012257:	c3                   	ret    

c0012258 <etharp_raw>:
c0012258:	83 ec 2c             	sub    esp,0x2c
c001225b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001225f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012264:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012269:	83 ec 04             	sub    esp,0x4
c001226c:	6a 00                	push   0x0
c001226e:	6a 2a                	push   0x2a
c0012270:	6a 03                	push   0x3
c0012272:	e8 31 62 ff ff       	call   c00084a8 <pbuf_alloc>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012283:	75 17                	jne    c001229c <etharp_raw+0x44>
c0012285:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001228b:	83 c0 01             	add    eax,0x1
c001228e:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012294:	b0 ff                	mov    al,0xff
c0012296:	e9 89 01 00 00       	jmp    c0012424 <etharp_raw+0x1cc>
c001229b:	90                   	nop
c001229c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00122a4:	0f b7 c0             	movzx  eax,ax
c00122a7:	83 f8 29             	cmp    eax,0x29
c00122aa:	77 18                	ja     c00122c4 <etharp_raw+0x6c>
c00122ac:	83 ec 08             	sub    esp,0x8
c00122af:	68 8c 0a 03 c0       	push   0xc0030a8c
c00122b4:	68 c6 f9 02 c0       	push   0xc002f9c6
c00122b9:	e8 0a d8 00 00       	call   c001fac8 <CPrintf>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8d 76 00             	lea    esi,[esi+0x0]
c00122c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d3:	83 c0 0e             	add    eax,0xe
c00122d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122da:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00122df:	83 ec 0c             	sub    esp,0xc
c00122e2:	50                   	push   eax
c00122e3:	e8 34 e9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	89 c2                	mov    edx,eax
c00122ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f1:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00122f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f9:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00122fc:	0f b6 c0             	movzx  eax,al
c00122ff:	83 f8 06             	cmp    eax,0x6
c0012302:	74 18                	je     c001231c <etharp_raw+0xc4>
c0012304:	83 ec 08             	sub    esp,0x8
c0012307:	68 fc 09 03 c0       	push   0xc00309fc
c001230c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012311:	e8 b2 d7 00 00       	call   c001fac8 <CPrintf>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	8d 76 00             	lea    esi,[esi+0x0]
c001231c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012320:	83 c0 08             	add    eax,0x8
c0012323:	83 ec 04             	sub    esp,0x4
c0012326:	6a 06                	push   0x6
c0012328:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001232c:	50                   	push   eax
c001232d:	e8 48 e0 fe ff       	call   c000037a <memcpy>
c0012332:	83 c4 10             	add    esp,0x10
c0012335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012339:	83 c0 12             	add    eax,0x12
c001233c:	83 ec 04             	sub    esp,0x4
c001233f:	6a 06                	push   0x6
c0012341:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012345:	50                   	push   eax
c0012346:	e8 2f e0 fe ff       	call   c000037a <memcpy>
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012352:	83 ec 04             	sub    esp,0x4
c0012355:	6a 06                	push   0x6
c0012357:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001235b:	50                   	push   eax
c001235c:	e8 19 e0 fe ff       	call   c000037a <memcpy>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012368:	83 c0 06             	add    eax,0x6
c001236b:	83 ec 04             	sub    esp,0x4
c001236e:	6a 06                	push   0x6
c0012370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012374:	50                   	push   eax
c0012375:	e8 00 e0 fe ff       	call   c000037a <memcpy>
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012381:	83 c0 0e             	add    eax,0xe
c0012384:	83 ec 04             	sub    esp,0x4
c0012387:	6a 04                	push   0x4
c0012389:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001238d:	50                   	push   eax
c001238e:	e8 e7 df fe ff       	call   c000037a <memcpy>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001239a:	83 c0 18             	add    eax,0x18
c001239d:	83 ec 04             	sub    esp,0x4
c00123a0:	6a 04                	push   0x4
c00123a2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00123a6:	50                   	push   eax
c00123a7:	e8 ce df fe ff       	call   c000037a <memcpy>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b3:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00123b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123bc:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00123c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c6:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00123ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ce:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00123d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123d6:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00123dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123e3:	83 ec 08             	sub    esp,0x8
c00123e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123ee:	ff d0                	call   eax
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123f7:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00123fd:	83 c0 01             	add    eax,0x1
c0012400:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c0012406:	83 ec 0c             	sub    esp,0xc
c0012409:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001240d:	e8 ba 5e ff ff       	call   c00082cc <pbuf_free>
c0012412:	83 c4 10             	add    esp,0x10
c0012415:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001241d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012421:	8d 76 00             	lea    esi,[esi+0x0]
c0012424:	83 c4 2c             	add    esp,0x2c
c0012427:	c3                   	ret    

c0012428 <etharp_request>:
c0012428:	83 ec 0c             	sub    esp,0xc
c001242b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242f:	8d 48 04             	lea    ecx,[eax+0x4]
c0012432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012436:	8d 50 23             	lea    edx,[eax+0x23]
c0012439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243d:	83 c0 23             	add    eax,0x23
c0012440:	6a 01                	push   0x1
c0012442:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012446:	68 5c 0b 03 c0       	push   0xc0030b5c
c001244b:	51                   	push   ecx
c001244c:	52                   	push   edx
c001244d:	68 64 0b 03 c0       	push   0xc0030b64
c0012452:	50                   	push   eax
c0012453:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012457:	e8 fc fd ff ff       	call   c0012258 <etharp_raw>
c001245c:	83 c4 20             	add    esp,0x20
c001245f:	83 c4 0c             	add    esp,0xc
c0012462:	c3                   	ret    
c0012463:	90                   	nop

c0012464 <etharp_query>:
c0012464:	83 ec 2c             	sub    esp,0x2c
c0012467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246b:	83 c0 23             	add    eax,0x23
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012477:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247b:	8b 00                	mov    eax,DWORD PTR [eax]
c001247d:	83 ec 08             	sub    esp,0x8
c0012480:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012484:	50                   	push   eax
c0012485:	e8 e6 19 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	0f b6 c0             	movzx  eax,al
c0012490:	85 c0                	test   eax,eax
c0012492:	75 24                	jne    c00124b8 <etharp_query+0x54>
c0012494:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012498:	8b 00                	mov    eax,DWORD PTR [eax]
c001249a:	25 f0 00 00 00       	and    eax,0xf0
c001249f:	3d e0 00 00 00       	cmp    eax,0xe0
c00124a4:	74 12                	je     c00124b8 <etharp_query+0x54>
c00124a6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00124ab:	74 0b                	je     c00124b8 <etharp_query+0x54>
c00124ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b3:	85 c0                	test   eax,eax
c00124b5:	75 09                	jne    c00124c0 <etharp_query+0x5c>
c00124b7:	90                   	nop
c00124b8:	b0 f2                	mov    al,0xf2
c00124ba:	e9 dd 02 00 00       	jmp    c001279c <etharp_query+0x338>
c00124bf:	90                   	nop
c00124c0:	83 ec 08             	sub    esp,0x8
c00124c3:	6a 01                	push   0x1
c00124c5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124c9:	e8 ea f4 ff ff       	call   c00119b8 <find_entry>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124d5:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124da:	85 c0                	test   eax,eax
c00124dc:	79 22                	jns    c0012500 <etharp_query+0x9c>
c00124de:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124e3:	74 0f                	je     c00124f4 <etharp_query+0x90>
c00124e5:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124eb:	83 c0 01             	add    eax,0x1
c00124ee:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124f4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124f8:	e9 9f 02 00 00       	jmp    c001279c <etharp_query+0x338>
c00124fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012500:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012505:	c1 e0 04             	shl    eax,0x4
c0012508:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001250d:	8a 00                	mov    al,BYTE PTR [eax]
c001250f:	0f b6 c0             	movzx  eax,al
c0012512:	85 c0                	test   eax,eax
c0012514:	75 12                	jne    c0012528 <etharp_query+0xc4>
c0012516:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001251b:	c1 e0 04             	shl    eax,0x4
c001251e:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012523:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012526:	66 90                	xchg   ax,ax
c0012528:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001252d:	c1 e0 04             	shl    eax,0x4
c0012530:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012535:	8a 00                	mov    al,BYTE PTR [eax]
c0012537:	0f b6 c0             	movzx  eax,al
c001253a:	83 f8 01             	cmp    eax,0x1
c001253d:	74 2d                	je     c001256c <etharp_query+0x108>
c001253f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012544:	c1 e0 04             	shl    eax,0x4
c0012547:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001254c:	8a 00                	mov    al,BYTE PTR [eax]
c001254e:	0f b6 c0             	movzx  eax,al
c0012551:	83 f8 02             	cmp    eax,0x2
c0012554:	74 16                	je     c001256c <etharp_query+0x108>
c0012556:	83 ec 08             	sub    esp,0x8
c0012559:	68 c0 0a 03 c0       	push   0xc0030ac0
c001255e:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012563:	e8 60 d5 00 00       	call   c001fac8 <CPrintf>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	90                   	nop
c001256c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012571:	c1 e0 04             	shl    eax,0x4
c0012574:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012579:	8a 00                	mov    al,BYTE PTR [eax]
c001257b:	0f b6 c0             	movzx  eax,al
c001257e:	83 f8 01             	cmp    eax,0x1
c0012581:	74 09                	je     c001258c <etharp_query+0x128>
c0012583:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012588:	75 2a                	jne    c00125b4 <etharp_query+0x150>
c001258a:	66 90                	xchg   ax,ax
c001258c:	83 ec 08             	sub    esp,0x8
c001258f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012593:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012597:	e8 8c fe ff ff       	call   c0012428 <etharp_request>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00125a3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125a8:	75 0a                	jne    c00125b4 <etharp_query+0x150>
c00125aa:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125ae:	e9 e9 01 00 00       	jmp    c001279c <etharp_query+0x338>
c00125b3:	90                   	nop
c00125b4:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125b9:	75 15                	jne    c00125d0 <etharp_query+0x16c>
c00125bb:	83 ec 08             	sub    esp,0x8
c00125be:	68 3a fe 02 c0       	push   0xc002fe3a
c00125c3:	68 c6 f9 02 c0       	push   0xc002f9c6
c00125c8:	e8 fb d4 00 00       	call   c001fac8 <CPrintf>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d5:	c1 e0 04             	shl    eax,0x4
c00125d8:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125dd:	8a 00                	mov    al,BYTE PTR [eax]
c00125df:	0f b6 c0             	movzx  eax,al
c00125e2:	83 f8 02             	cmp    eax,0x2
c00125e5:	75 39                	jne    c0012620 <etharp_query+0x1bc>
c00125e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125eb:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125f0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125f5:	c1 e0 04             	shl    eax,0x4
c00125f8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00125fd:	83 c0 08             	add    eax,0x8
c0012600:	50                   	push   eax
c0012601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012605:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012609:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001260d:	e8 d2 f6 ff ff       	call   c0011ce4 <etharp_send_ip>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012619:	e9 7a 01 00 00       	jmp    c0012798 <etharp_query+0x334>
c001261e:	66 90                	xchg   ax,ax
c0012620:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012625:	c1 e0 04             	shl    eax,0x4
c0012628:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001262d:	8a 00                	mov    al,BYTE PTR [eax]
c001262f:	0f b6 c0             	movzx  eax,al
c0012632:	83 f8 01             	cmp    eax,0x1
c0012635:	0f 85 5d 01 00 00    	jne    c0012798 <etharp_query+0x334>
c001263b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012643:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012647:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001264b:	eb 63                	jmp    c00126b0 <etharp_query+0x24c>
c001264d:	8d 76 00             	lea    esi,[esi+0x0]
c0012650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012654:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001265c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001265f:	0f b7 d2             	movzx  edx,dx
c0012662:	0f b7 c0             	movzx  eax,ax
c0012665:	39 c2                	cmp    edx,eax
c0012667:	75 1f                	jne    c0012688 <etharp_query+0x224>
c0012669:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001266d:	8b 00                	mov    eax,DWORD PTR [eax]
c001266f:	85 c0                	test   eax,eax
c0012671:	74 15                	je     c0012688 <etharp_query+0x224>
c0012673:	83 ec 08             	sub    esp,0x8
c0012676:	68 41 0b 03 c0       	push   0xc0030b41
c001267b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012680:	e8 43 d4 00 00       	call   c001fac8 <CPrintf>
c0012685:	83 c4 10             	add    esp,0x10
c0012688:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001268c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001268f:	0f b6 c0             	movzx  eax,al
c0012692:	83 f8 01             	cmp    eax,0x1
c0012695:	74 0d                	je     c00126a4 <etharp_query+0x240>
c0012697:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001269f:	eb 17                	jmp    c00126b8 <etharp_query+0x254>
c00126a1:	8d 76 00             	lea    esi,[esi+0x0]
c00126a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00126aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ae:	66 90                	xchg   ax,ax
c00126b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126b5:	75 99                	jne    c0012650 <etharp_query+0x1ec>
c00126b7:	90                   	nop
c00126b8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126bd:	74 59                	je     c0012718 <etharp_query+0x2b4>
c00126bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00126c6:	0f b7 c0             	movzx  eax,ax
c00126c9:	83 ec 04             	sub    esp,0x4
c00126cc:	6a 00                	push   0x0
c00126ce:	50                   	push   eax
c00126cf:	6a 03                	push   0x3
c00126d1:	e8 d2 5d ff ff       	call   c00084a8 <pbuf_alloc>
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126dd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126e2:	74 4c                	je     c0012730 <etharp_query+0x2cc>
c00126e4:	83 ec 08             	sub    esp,0x8
c00126e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126ef:	e8 1c 66 ff ff       	call   c0008d10 <pbuf_copy>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	0f be c0             	movsx  eax,al
c00126fa:	85 c0                	test   eax,eax
c00126fc:	74 32                	je     c0012730 <etharp_query+0x2cc>
c00126fe:	83 ec 0c             	sub    esp,0xc
c0012701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012705:	e8 c2 5b ff ff       	call   c00082cc <pbuf_free>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012715:	eb 19                	jmp    c0012730 <etharp_query+0x2cc>
c0012717:	90                   	nop
c0012718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001271c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012720:	83 ec 0c             	sub    esp,0xc
c0012723:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012727:	e8 b0 63 ff ff       	call   c0008adc <pbuf_ref>
c001272c:	83 c4 10             	add    esp,0x10
c001272f:	90                   	nop
c0012730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012735:	74 4d                	je     c0012784 <etharp_query+0x320>
c0012737:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001273c:	c1 e0 04             	shl    eax,0x4
c001273f:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012744:	8b 00                	mov    eax,DWORD PTR [eax]
c0012746:	85 c0                	test   eax,eax
c0012748:	74 1e                	je     c0012768 <etharp_query+0x304>
c001274a:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274f:	c1 e0 04             	shl    eax,0x4
c0012752:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012757:	8b 00                	mov    eax,DWORD PTR [eax]
c0012759:	83 ec 0c             	sub    esp,0xc
c001275c:	50                   	push   eax
c001275d:	e8 6a 5b ff ff       	call   c00082cc <pbuf_free>
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	8d 76 00             	lea    esi,[esi+0x0]
c0012768:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001276d:	c1 e0 04             	shl    eax,0x4
c0012770:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012776:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277a:	89 02                	mov    DWORD PTR [edx],eax
c001277c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012781:	eb 15                	jmp    c0012798 <etharp_query+0x334>
c0012783:	90                   	nop
c0012784:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001278a:	83 c0 01             	add    eax,0x1
c001278d:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012793:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012798:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001279c:	83 c4 2c             	add    esp,0x2c
c001279f:	c3                   	ret    

c00127a0 <etharp_output>:
c00127a0:	83 ec 1c             	sub    esp,0x1c
c00127a3:	83 ec 08             	sub    esp,0x8
c00127a6:	6a 0e                	push   0xe
c00127a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127ac:	e8 7b 59 ff ff       	call   c000812c <pbuf_header>
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	0f b6 c0             	movzx  eax,al
c00127b7:	85 c0                	test   eax,eax
c00127b9:	74 19                	je     c00127d4 <etharp_output+0x34>
c00127bb:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00127c1:	83 c0 01             	add    eax,0x1
c00127c4:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00127ca:	b0 fe                	mov    al,0xfe
c00127cc:	e9 8b 01 00 00       	jmp    c001295c <etharp_output+0x1bc>
c00127d1:	8d 76 00             	lea    esi,[esi+0x0]
c00127d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00127e2:	83 ec 08             	sub    esp,0x8
c00127e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127e9:	50                   	push   eax
c00127ea:	e8 81 16 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	0f b6 c0             	movzx  eax,al
c00127f5:	85 c0                	test   eax,eax
c00127f7:	74 0f                	je     c0012808 <etharp_output+0x68>
c00127f9:	c7 44 24 0c 64 0b 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030b64
c0012801:	e9 3a 01 00 00       	jmp    c0012940 <etharp_output+0x1a0>
c0012806:	66 90                	xchg   ax,ax
c0012808:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001280c:	8b 00                	mov    eax,DWORD PTR [eax]
c001280e:	25 f0 00 00 00       	and    eax,0xf0
c0012813:	3d e0 00 00 00       	cmp    eax,0xe0
c0012818:	75 42                	jne    c001285c <etharp_output+0xbc>
c001281a:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001281f:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012824:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012829:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001282d:	83 c0 01             	add    eax,0x1
c0012830:	8a 00                	mov    al,BYTE PTR [eax]
c0012832:	83 e0 7f             	and    eax,0x7f
c0012835:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001283d:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012840:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012844:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012848:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c001284b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001284f:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012857:	e9 e4 00 00 00       	jmp    c0012940 <etharp_output+0x1a0>
c001285c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012860:	8b 10                	mov    edx,DWORD PTR [eax]
c0012862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012869:	31 c2                	xor    edx,eax
c001286b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012872:	21 d0                	and    eax,edx
c0012874:	74 3a                	je     c00128b0 <etharp_output+0x110>
c0012876:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001287a:	8b 00                	mov    eax,DWORD PTR [eax]
c001287c:	0f b7 c0             	movzx  eax,ax
c001287f:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012884:	74 2a                	je     c00128b0 <etharp_output+0x110>
c0012886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001288a:	83 c0 0c             	add    eax,0xc
c001288d:	74 19                	je     c00128a8 <etharp_output+0x108>
c001288f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012893:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012896:	85 c0                	test   eax,eax
c0012898:	74 0e                	je     c00128a8 <etharp_output+0x108>
c001289a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289e:	83 c0 0c             	add    eax,0xc
c00128a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00128a5:	eb 09                	jmp    c00128b0 <etharp_output+0x110>
c00128a7:	90                   	nop
c00128a8:	b0 fc                	mov    al,0xfc
c00128aa:	e9 ad 00 00 00       	jmp    c001295c <etharp_output+0x1bc>
c00128af:	90                   	nop
c00128b0:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128b5:	0f b6 c0             	movzx  eax,al
c00128b8:	c1 e0 04             	shl    eax,0x4
c00128bb:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00128c0:	8a 00                	mov    al,BYTE PTR [eax]
c00128c2:	0f b6 c0             	movzx  eax,al
c00128c5:	83 f8 02             	cmp    eax,0x2
c00128c8:	75 5a                	jne    c0012924 <etharp_output+0x184>
c00128ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d0:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128d5:	0f b6 c0             	movzx  eax,al
c00128d8:	c1 e0 04             	shl    eax,0x4
c00128db:	05 04 a9 03 c0       	add    eax,0xc003a904
c00128e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128e2:	39 c2                	cmp    edx,eax
c00128e4:	75 3e                	jne    c0012924 <etharp_output+0x184>
c00128e6:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128ec:	83 c0 01             	add    eax,0x1
c00128ef:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128f5:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128fa:	0f b6 c0             	movzx  eax,al
c00128fd:	c1 e0 04             	shl    eax,0x4
c0012900:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012905:	8d 50 08             	lea    edx,[eax+0x8]
c0012908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001290c:	83 c0 23             	add    eax,0x23
c001290f:	52                   	push   edx
c0012910:	50                   	push   eax
c0012911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012919:	e8 c6 f3 ff ff       	call   c0011ce4 <etharp_send_ip>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	eb 39                	jmp    c001295c <etharp_output+0x1bc>
c0012923:	90                   	nop
c0012924:	83 ec 04             	sub    esp,0x4
c0012927:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001292b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001292f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012933:	e8 2c fb ff ff       	call   c0012464 <etharp_query>
c0012938:	83 c4 10             	add    esp,0x10
c001293b:	eb 1f                	jmp    c001295c <etharp_output+0x1bc>
c001293d:	8d 76 00             	lea    esi,[esi+0x0]
c0012940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012944:	83 c0 23             	add    eax,0x23
c0012947:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001294b:	50                   	push   eax
c001294c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012954:	e8 8b f3 ff ff       	call   c0011ce4 <etharp_send_ip>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	83 c4 1c             	add    esp,0x1c
c001295f:	c3                   	ret    

c0012960 <ethernet_input>:
c0012960:	83 ec 1c             	sub    esp,0x1c
c0012963:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c001296a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001296e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012972:	0f b7 c0             	movzx  eax,ax
c0012975:	83 f8 0e             	cmp    eax,0xe
c0012978:	77 26                	ja     c00129a0 <ethernet_input+0x40>
c001297a:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012980:	83 c0 01             	add    eax,0x1
c0012983:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012989:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c001298f:	83 c0 01             	add    eax,0x1
c0012992:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012998:	e9 ef 00 00 00       	jmp    c0012a8c <ethernet_input+0x12c>
c001299d:	8d 76 00             	lea    esi,[esi+0x0]
c00129a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129af:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00129b3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00129b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00129bd:	83 f8 08             	cmp    eax,0x8
c00129c0:	74 0e                	je     c00129d0 <ethernet_input+0x70>
c00129c2:	3d 08 06 00 00       	cmp    eax,0x608
c00129c7:	74 6b                	je     c0012a34 <ethernet_input+0xd4>
c00129c9:	e9 92 00 00 00       	jmp    c0012a60 <ethernet_input+0x100>
c00129ce:	66 90                	xchg   ax,ax
c00129d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129d4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129d7:	0f b6 c0             	movzx  eax,al
c00129da:	83 e0 20             	and    eax,0x20
c00129dd:	0f 84 a1 00 00 00    	je     c0012a84 <ethernet_input+0x124>
c00129e3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00129e8:	f7 d8                	neg    eax
c00129ea:	98                   	cwde   
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	50                   	push   eax
c00129ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f3:	e8 34 57 ff ff       	call   c000812c <pbuf_header>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	0f b6 c0             	movzx  eax,al
c00129fe:	85 c0                	test   eax,eax
c0012a00:	74 1a                	je     c0012a1c <ethernet_input+0xbc>
c0012a02:	83 ec 08             	sub    esp,0x8
c0012a05:	68 e8 0a 03 c0       	push   0xc0030ae8
c0012a0a:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012a0f:	e8 b4 d0 00 00       	call   c001fac8 <CPrintf>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	eb 73                	jmp    c0012a8c <ethernet_input+0x12c>
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	83 ec 08             	sub    esp,0x8
c0012a1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a27:	e8 7c 0c 00 00       	call   c00136a8 <ip_input>
c0012a2c:	83 c4 10             	add    esp,0x10
c0012a2f:	eb 4f                	jmp    c0012a80 <ethernet_input+0x120>
c0012a31:	8d 76 00             	lea    esi,[esi+0x0]
c0012a34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a38:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a3b:	0f b6 c0             	movzx  eax,al
c0012a3e:	83 e0 20             	and    eax,0x20
c0012a41:	74 45                	je     c0012a88 <ethernet_input+0x128>
c0012a43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a47:	83 c0 23             	add    eax,0x23
c0012a4a:	83 ec 04             	sub    esp,0x4
c0012a4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a51:	50                   	push   eax
c0012a52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a56:	e8 01 f5 ff ff       	call   c0011f5c <etharp_arp_input>
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	eb 20                	jmp    c0012a80 <ethernet_input+0x120>
c0012a60:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a66:	83 c0 01             	add    eax,0x1
c0012a69:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a6f:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a75:	83 c0 01             	add    eax,0x1
c0012a78:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a7e:	eb 0c                	jmp    c0012a8c <ethernet_input+0x12c>
c0012a80:	b0 00                	mov    al,0x0
c0012a82:	eb 1c                	jmp    c0012aa0 <ethernet_input+0x140>
c0012a84:	90                   	nop
c0012a85:	eb 05                	jmp    c0012a8c <ethernet_input+0x12c>
c0012a87:	90                   	nop
c0012a88:	90                   	nop
c0012a89:	8d 76 00             	lea    esi,[esi+0x0]
c0012a8c:	83 ec 0c             	sub    esp,0xc
c0012a8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a93:	e8 34 58 ff ff       	call   c00082cc <pbuf_free>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	b0 00                	mov    al,0x0
c0012a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012aa0:	83 c4 1c             	add    esp,0x1c
c0012aa3:	c3                   	ret    

c0012aa4 <icmp_input>:
c0012aa4:	83 ec 2c             	sub    esp,0x2c
c0012aa7:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012aad:	83 c0 01             	add    eax,0x1
c0012ab0:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012ab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012abd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ac1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ac5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012ac8:	0f b7 c0             	movzx  eax,ax
c0012acb:	83 ec 0c             	sub    esp,0xc
c0012ace:	50                   	push   eax
c0012acf:	e8 48 e1 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012ad4:	83 c4 10             	add    esp,0x10
c0012ad7:	0f b7 c0             	movzx  eax,ax
c0012ada:	c1 e8 08             	shr    eax,0x8
c0012add:	83 e0 0f             	and    eax,0xf
c0012ae0:	c1 e0 02             	shl    eax,0x2
c0012ae3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ae8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012aed:	f7 d8                	neg    eax
c0012aef:	98                   	cwde   
c0012af0:	83 ec 08             	sub    esp,0x8
c0012af3:	50                   	push   eax
c0012af4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012af8:	e8 2f 56 ff ff       	call   c000812c <pbuf_header>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	0f b6 c0             	movzx  eax,al
c0012b03:	85 c0                	test   eax,eax
c0012b05:	0f 85 b1 03 00 00    	jne    c0012ebc <icmp_input+0x418>
c0012b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b12:	0f b7 c0             	movzx  eax,ax
c0012b15:	83 f8 03             	cmp    eax,0x3
c0012b18:	0f 86 9e 03 00 00    	jbe    c0012ebc <icmp_input+0x418>
c0012b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b25:	8a 00                	mov    al,BYTE PTR [eax]
c0012b27:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b2b:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012b30:	85 c0                	test   eax,eax
c0012b32:	0f 84 6c 03 00 00    	je     c0012ea4 <icmp_input+0x400>
c0012b38:	83 f8 08             	cmp    eax,0x8
c0012b3b:	0f 85 43 03 00 00    	jne    c0012e84 <icmp_input+0x3e0>
c0012b41:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012b49:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b4e:	25 f0 00 00 00       	and    eax,0xf0
c0012b53:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b58:	75 0a                	jne    c0012b64 <icmp_input+0xc0>
c0012b5a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b69:	83 ec 08             	sub    esp,0x8
c0012b6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b70:	50                   	push   eax
c0012b71:	e8 fa 12 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	0f b6 c0             	movzx  eax,al
c0012b7c:	85 c0                	test   eax,eax
c0012b7e:	74 08                	je     c0012b88 <icmp_input+0xe4>
c0012b80:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b88:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b8d:	75 25                	jne    c0012bb4 <icmp_input+0x110>
c0012b8f:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b95:	83 c0 01             	add    eax,0x1
c0012b98:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ba5:	e8 22 57 ff ff       	call   c00082cc <pbuf_free>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	e9 56 03 00 00       	jmp    c0012f08 <icmp_input+0x464>
c0012bb2:	66 90                	xchg   ax,ax
c0012bb4:	90                   	nop
c0012bb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bbc:	0f b7 c0             	movzx  eax,ax
c0012bbf:	83 f8 07             	cmp    eax,0x7
c0012bc2:	0f 86 f8 02 00 00    	jbe    c0012ec0 <icmp_input+0x41c>
c0012bc8:	83 ec 0c             	sub    esp,0xc
c0012bcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bcf:	e8 5c 09 00 00       	call   c0013530 <inet_chksum_pbuf>
c0012bd4:	83 c4 10             	add    esp,0x10
c0012bd7:	0f b7 c0             	movzx  eax,ax
c0012bda:	85 c0                	test   eax,eax
c0012bdc:	74 26                	je     c0012c04 <icmp_input+0x160>
c0012bde:	83 ec 0c             	sub    esp,0xc
c0012be1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be5:	e8 e2 56 ff ff       	call   c00082cc <pbuf_free>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012bf3:	83 c0 01             	add    eax,0x1
c0012bf6:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012bfc:	e9 07 03 00 00       	jmp    c0012f08 <icmp_input+0x464>
c0012c01:	8d 76 00             	lea    esi,[esi+0x0]
c0012c04:	83 ec 08             	sub    esp,0x8
c0012c07:	6a 22                	push   0x22
c0012c09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c0d:	e8 1a 55 ff ff       	call   c000812c <pbuf_header>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	0f b6 c0             	movzx  eax,al
c0012c18:	85 c0                	test   eax,eax
c0012c1a:	0f 84 24 01 00 00    	je     c0012d44 <icmp_input+0x2a0>
c0012c20:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012c25:	83 ec 08             	sub    esp,0x8
c0012c28:	50                   	push   eax
c0012c29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c2d:	e8 fa 54 ff ff       	call   c000812c <pbuf_header>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	0f b6 c0             	movzx  eax,al
c0012c38:	85 c0                	test   eax,eax
c0012c3a:	74 1c                	je     c0012c58 <icmp_input+0x1b4>
c0012c3c:	83 ec 08             	sub    esp,0x8
c0012c3f:	68 6c 0b 03 c0       	push   0xc0030b6c
c0012c44:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012c49:	e8 7a ce 00 00       	call   c001fac8 <CPrintf>
c0012c4e:	83 c4 10             	add    esp,0x10
c0012c51:	e9 92 02 00 00       	jmp    c0012ee8 <icmp_input+0x444>
c0012c56:	66 90                	xchg   ax,ax
c0012c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c5f:	0f b7 c0             	movzx  eax,ax
c0012c62:	83 ec 04             	sub    esp,0x4
c0012c65:	6a 00                	push   0x0
c0012c67:	50                   	push   eax
c0012c68:	6a 02                	push   0x2
c0012c6a:	e8 39 58 ff ff       	call   c00084a8 <pbuf_alloc>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c76:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c7b:	0f 84 63 02 00 00    	je     c0012ee4 <icmp_input+0x440>
c0012c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c85:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c89:	0f b7 c0             	movzx  eax,ax
c0012c8c:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c91:	83 c2 08             	add    edx,0x8
c0012c94:	39 d0                	cmp    eax,edx
c0012c96:	73 18                	jae    c0012cb0 <icmp_input+0x20c>
c0012c98:	83 ec 08             	sub    esp,0x8
c0012c9b:	68 a0 0b 03 c0       	push   0xc0030ba0
c0012ca0:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012ca5:	e8 1e ce 00 00       	call   c001fac8 <CPrintf>
c0012caa:	83 c4 10             	add    esp,0x10
c0012cad:	8d 76 00             	lea    esi,[esi+0x0]
c0012cb0:	83 ec 08             	sub    esp,0x8
c0012cb3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cbb:	e8 50 60 ff ff       	call   c0008d10 <pbuf_copy>
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	0f be c0             	movsx  eax,al
c0012cc6:	85 c0                	test   eax,eax
c0012cc8:	74 1a                	je     c0012ce4 <icmp_input+0x240>
c0012cca:	83 ec 08             	sub    esp,0x8
c0012ccd:	68 d8 0b 03 c0       	push   0xc0030bd8
c0012cd2:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012cd7:	e8 ec cd 00 00       	call   c001fac8 <CPrintf>
c0012cdc:	83 c4 10             	add    esp,0x10
c0012cdf:	e9 04 02 00 00       	jmp    c0012ee8 <icmp_input+0x444>
c0012ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ceb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cef:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cf4:	f7 d8                	neg    eax
c0012cf6:	98                   	cwde   
c0012cf7:	83 ec 08             	sub    esp,0x8
c0012cfa:	50                   	push   eax
c0012cfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cff:	e8 28 54 ff ff       	call   c000812c <pbuf_header>
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	0f b6 c0             	movzx  eax,al
c0012d0a:	85 c0                	test   eax,eax
c0012d0c:	74 1a                	je     c0012d28 <icmp_input+0x284>
c0012d0e:	83 ec 08             	sub    esp,0x8
c0012d11:	68 00 0c 03 c0       	push   0xc0030c00
c0012d16:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012d1b:	e8 a8 cd 00 00       	call   c001fac8 <CPrintf>
c0012d20:	83 c4 10             	add    esp,0x10
c0012d23:	e9 c0 01 00 00       	jmp    c0012ee8 <icmp_input+0x444>
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d2f:	e8 98 55 ff ff       	call   c00082cc <pbuf_free>
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d3f:	eb 37                	jmp    c0012d78 <icmp_input+0x2d4>
c0012d41:	8d 76 00             	lea    esi,[esi+0x0]
c0012d44:	83 ec 08             	sub    esp,0x8
c0012d47:	6a de                	push   0xffffffde
c0012d49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d4d:	e8 da 53 ff ff       	call   c000812c <pbuf_header>
c0012d52:	83 c4 10             	add    esp,0x10
c0012d55:	0f b6 c0             	movzx  eax,al
c0012d58:	85 c0                	test   eax,eax
c0012d5a:	74 1c                	je     c0012d78 <icmp_input+0x2d4>
c0012d5c:	83 ec 08             	sub    esp,0x8
c0012d5f:	68 00 0c 03 c0       	push   0xc0030c00
c0012d64:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012d69:	e8 5a cd 00 00       	call   c001fac8 <CPrintf>
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	e9 72 01 00 00       	jmp    c0012ee8 <icmp_input+0x444>
c0012d76:	66 90                	xchg   ax,ax
c0012d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d83:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d90:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dac:	0f b7 c0             	movzx  eax,ax
c0012daf:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012db4:	76 1a                	jbe    c0012dd0 <icmp_input+0x32c>
c0012db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dba:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dbe:	83 c0 09             	add    eax,0x9
c0012dc1:	89 c2                	mov    edx,eax
c0012dc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dc7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012dcb:	eb 1b                	jmp    c0012de8 <icmp_input+0x344>
c0012dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0012dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dd4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dd8:	83 c0 08             	add    eax,0x8
c0012ddb:	89 c2                	mov    edx,eax
c0012ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012de1:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012de5:	8d 76 00             	lea    esi,[esi+0x0]
c0012de8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012dec:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012df4:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012dfa:	83 ec 08             	sub    esp,0x8
c0012dfd:	6a 14                	push   0x14
c0012dff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012e03:	e8 00 07 00 00       	call   c0013508 <inet_chksum>
c0012e08:	83 c4 10             	add    esp,0x10
c0012e0b:	89 c2                	mov    edx,eax
c0012e0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e11:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0012e15:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012e1b:	83 c0 01             	add    eax,0x1
c0012e1e:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012e24:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e29:	83 ec 08             	sub    esp,0x8
c0012e2c:	50                   	push   eax
c0012e2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e31:	e8 f6 52 ff ff       	call   c000812c <pbuf_header>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	0f b6 c0             	movzx  eax,al
c0012e3c:	85 c0                	test   eax,eax
c0012e3e:	74 18                	je     c0012e58 <icmp_input+0x3b4>
c0012e40:	83 ec 08             	sub    esp,0x8
c0012e43:	68 e8 0a 03 c0       	push   0xc0030ae8
c0012e48:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012e4d:	e8 76 cc 00 00       	call   c001fac8 <CPrintf>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	eb 51                	jmp    c0012ea8 <icmp_input+0x404>
c0012e57:	90                   	nop
c0012e58:	83 ec 04             	sub    esp,0x4
c0012e5b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e5f:	6a 01                	push   0x1
c0012e61:	6a 00                	push   0x0
c0012e63:	68 ff 00 00 00       	push   0xff
c0012e68:	6a 00                	push   0x0
c0012e6a:	68 98 68 03 c0       	push   0xc0036898
c0012e6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e73:	e8 74 0c 00 00       	call   c0013aec <ip_output_if>
c0012e78:	83 c4 20             	add    esp,0x20
c0012e7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e7f:	eb 27                	jmp    c0012ea8 <icmp_input+0x404>
c0012e81:	8d 76 00             	lea    esi,[esi+0x0]
c0012e84:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e8a:	83 c0 01             	add    eax,0x1
c0012e8d:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e93:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012e99:	83 c0 01             	add    eax,0x1
c0012e9c:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012ea2:	eb 04                	jmp    c0012ea8 <icmp_input+0x404>
c0012ea4:	90                   	nop
c0012ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012eaf:	e8 18 54 ff ff       	call   c00082cc <pbuf_free>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	eb 4f                	jmp    c0012f08 <icmp_input+0x464>
c0012eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ebc:	90                   	nop
c0012ebd:	eb 05                	jmp    c0012ec4 <icmp_input+0x420>
c0012ebf:	90                   	nop
c0012ec0:	90                   	nop
c0012ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ecb:	e8 fc 53 ff ff       	call   c00082cc <pbuf_free>
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012ed9:	83 c0 01             	add    eax,0x1
c0012edc:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012ee2:	eb 24                	jmp    c0012f08 <icmp_input+0x464>
c0012ee4:	90                   	nop
c0012ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ee8:	83 ec 0c             	sub    esp,0xc
c0012eeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012eef:	e8 d8 53 ff ff       	call   c00082cc <pbuf_free>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012efd:	83 c0 01             	add    eax,0x1
c0012f00:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012f06:	90                   	nop
c0012f07:	90                   	nop
c0012f08:	83 c4 2c             	add    esp,0x2c
c0012f0b:	c3                   	ret    

c0012f0c <icmp_send_response>:
c0012f0c:	83 ec 2c             	sub    esp,0x2c
c0012f0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f13:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f1b:	88 d0                	mov    al,dl
c0012f1d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012f21:	83 ec 04             	sub    esp,0x4
c0012f24:	6a 00                	push   0x0
c0012f26:	6a 24                	push   0x24
c0012f28:	6a 01                	push   0x1
c0012f2a:	e8 79 55 ff ff       	call   c00084a8 <pbuf_alloc>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f36:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f3b:	0f 84 ff 00 00 00    	je     c0013040 <icmp_send_response+0x134>
c0012f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f45:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f49:	0f b7 c0             	movzx  eax,ax
c0012f4c:	83 f8 23             	cmp    eax,0x23
c0012f4f:	77 17                	ja     c0012f68 <icmp_send_response+0x5c>
c0012f51:	83 ec 08             	sub    esp,0x8
c0012f54:	68 34 0c 03 c0       	push   0xc0030c34
c0012f59:	68 c6 f9 02 c0       	push   0xc002f9c6
c0012f5e:	e8 65 cb 00 00       	call   c001fac8 <CPrintf>
c0012f63:	83 c4 10             	add    esp,0x10
c0012f66:	66 90                	xchg   ax,ax
c0012f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f82:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f86:	88 10                	mov    BYTE PTR [eax],dl
c0012f88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f8c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f90:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f97:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012f9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa1:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012fa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fb2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fb5:	83 c2 08             	add    edx,0x8
c0012fb8:	83 ec 04             	sub    esp,0x4
c0012fbb:	6a 1c                	push   0x1c
c0012fbd:	50                   	push   eax
c0012fbe:	52                   	push   edx
c0012fbf:	e8 b6 d3 fe ff       	call   c000037a <memcpy>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fcb:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012fd9:	0f b7 c0             	movzx  eax,ax
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	50                   	push   eax
c0012fe0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fe4:	e8 1f 05 00 00       	call   c0013508 <inet_chksum>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	89 c2                	mov    edx,eax
c0012fee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ff2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012ff6:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012ffc:	83 c0 01             	add    eax,0x1
c0012fff:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0013005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013009:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001300c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013010:	83 ec 08             	sub    esp,0x8
c0013013:	6a 01                	push   0x1
c0013015:	6a 00                	push   0x0
c0013017:	68 ff 00 00 00       	push   0xff
c001301c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013020:	50                   	push   eax
c0013021:	6a 00                	push   0x0
c0013023:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013027:	e8 9c 0d 00 00       	call   c0013dc8 <ip_output>
c001302c:	83 c4 20             	add    esp,0x20
c001302f:	83 ec 0c             	sub    esp,0xc
c0013032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013036:	e8 91 52 ff ff       	call   c00082cc <pbuf_free>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	eb 04                	jmp    c0013044 <icmp_send_response+0x138>
c0013040:	90                   	nop
c0013041:	8d 76 00             	lea    esi,[esi+0x0]
c0013044:	83 c4 2c             	add    esp,0x2c
c0013047:	c3                   	ret    

c0013048 <icmp_dest_unreach>:
c0013048:	83 ec 0c             	sub    esp,0xc
c001304b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001304f:	0f b6 c0             	movzx  eax,al
c0013052:	83 ec 04             	sub    esp,0x4
c0013055:	50                   	push   eax
c0013056:	6a 03                	push   0x3
c0013058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001305c:	e8 ab fe ff ff       	call   c0012f0c <icmp_send_response>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	90                   	nop
c0013065:	83 c4 0c             	add    esp,0xc
c0013068:	c3                   	ret    
c0013069:	8d 76 00             	lea    esi,[esi+0x0]

c001306c <icmp_time_exceeded>:
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013073:	0f b6 c0             	movzx  eax,al
c0013076:	83 ec 04             	sub    esp,0x4
c0013079:	50                   	push   eax
c001307a:	6a 0b                	push   0xb
c001307c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013080:	e8 87 fe ff ff       	call   c0012f0c <icmp_send_response>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	90                   	nop
c0013089:	83 c4 0c             	add    esp,0xc
c001308c:	c3                   	ret    
c001308d:	66 90                	xchg   ax,ax
c001308f:	90                   	nop

c0013090 <lwip_standard_chksum>:
c0013090:	83 ec 2c             	sub    esp,0x2c
c0013093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013097:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001309b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00130a2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ae:	83 e0 01             	and    eax,0x1
c00130b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130b5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00130ba:	74 24                	je     c00130e0 <lwip_standard_chksum+0x50>
c00130bc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130c1:	7e 1d                	jle    c00130e0 <lwip_standard_chksum+0x50>
c00130c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130c7:	8d 42 01             	lea    eax,[edx+0x1]
c00130ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130ce:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130d2:	83 c0 01             	add    eax,0x1
c00130d5:	8a 12                	mov    dl,BYTE PTR [edx]
c00130d7:	88 10                	mov    BYTE PTR [eax],dl
c00130d9:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c00130de:	66 90                	xchg   ax,ax
c00130e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130e8:	eb 1e                	jmp    c0013108 <lwip_standard_chksum+0x78>
c00130ea:	66 90                	xchg   ax,ax
c00130ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f0:	8d 50 02             	lea    edx,[eax+0x2]
c00130f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00130fa:	0f b7 c0             	movzx  eax,ax
c00130fd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013101:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c0013106:	66 90                	xchg   ax,ax
c0013108:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c001310d:	7f dd                	jg     c00130ec <lwip_standard_chksum+0x5c>
c001310f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013114:	7e 0e                	jle    c0013124 <lwip_standard_chksum+0x94>
c0013116:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001311a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001311e:	8a 12                	mov    dl,BYTE PTR [edx]
c0013120:	88 10                	mov    BYTE PTR [eax],dl
c0013122:	66 90                	xchg   ax,ax
c0013124:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013129:	0f b7 c0             	movzx  eax,ax
c001312c:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013134:	c1 e8 10             	shr    eax,0x10
c0013137:	89 c2                	mov    edx,eax
c0013139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313d:	0f b7 c0             	movzx  eax,ax
c0013140:	01 d0                	add    eax,edx
c0013142:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013146:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001314a:	c1 e8 10             	shr    eax,0x10
c001314d:	89 c2                	mov    edx,eax
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	0f b7 c0             	movzx  eax,ax
c0013156:	01 d0                	add    eax,edx
c0013158:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001315c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013161:	74 1d                	je     c0013180 <lwip_standard_chksum+0xf0>
c0013163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013167:	0f b7 c0             	movzx  eax,ax
c001316a:	83 ec 0c             	sub    esp,0xc
c001316d:	50                   	push   eax
c001316e:	e8 a9 da fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013173:	83 c4 10             	add    esp,0x10
c0013176:	0f b7 c0             	movzx  eax,ax
c0013179:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001317d:	8d 76 00             	lea    esi,[esi+0x0]
c0013180:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013184:	83 c4 2c             	add    esp,0x2c
c0013187:	c3                   	ret    

c0013188 <inet_chksum_pseudo>:
c0013188:	83 ec 2c             	sub    esp,0x2c
c001318b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001318f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013193:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013197:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001319c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131a4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131b1:	e9 8a 00 00 00       	jmp    c0013240 <inet_chksum_pseudo+0xb8>
c00131b6:	66 90                	xchg   ax,ax
c00131b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131bc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131c0:	0f b7 d0             	movzx  edx,ax
c00131c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ca:	83 ec 08             	sub    esp,0x8
c00131cd:	52                   	push   edx
c00131ce:	50                   	push   eax
c00131cf:	e8 bc fe ff ff       	call   c0013090 <lwip_standard_chksum>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	0f b7 c0             	movzx  eax,ax
c00131da:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131e2:	c1 e8 10             	shr    eax,0x10
c00131e5:	89 c2                	mov    edx,eax
c00131e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131eb:	0f b7 c0             	movzx  eax,ax
c00131ee:	01 d0                	add    eax,edx
c00131f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131fc:	83 e0 01             	and    eax,0x1
c00131ff:	0f b7 c0             	movzx  eax,ax
c0013202:	85 c0                	test   eax,eax
c0013204:	74 2e                	je     c0013234 <inet_chksum_pseudo+0xac>
c0013206:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001320a:	ba 01 00 00 00       	mov    edx,0x1
c001320f:	29 c2                	sub    edx,eax
c0013211:	89 d0                	mov    eax,edx
c0013213:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013217:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001321b:	0f b7 c0             	movzx  eax,ax
c001321e:	83 ec 0c             	sub    esp,0xc
c0013221:	50                   	push   eax
c0013222:	e8 f5 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	0f b7 c0             	movzx  eax,ax
c001322d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013231:	8d 76 00             	lea    esi,[esi+0x0]
c0013234:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013238:	8b 00                	mov    eax,DWORD PTR [eax]
c001323a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001323e:	66 90                	xchg   ax,ax
c0013240:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013245:	0f 85 6d ff ff ff    	jne    c00131b8 <inet_chksum_pseudo+0x30>
c001324b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013250:	85 c0                	test   eax,eax
c0013252:	74 1c                	je     c0013270 <inet_chksum_pseudo+0xe8>
c0013254:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013258:	0f b7 c0             	movzx  eax,ax
c001325b:	83 ec 0c             	sub    esp,0xc
c001325e:	50                   	push   eax
c001325f:	e8 b8 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	0f b7 c0             	movzx  eax,ax
c001326a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001326e:	66 90                	xchg   ax,ax
c0013270:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013274:	8b 00                	mov    eax,DWORD PTR [eax]
c0013276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001327a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327e:	0f b7 c0             	movzx  eax,ax
c0013281:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013289:	c1 e8 10             	shr    eax,0x10
c001328c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013290:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013294:	8b 00                	mov    eax,DWORD PTR [eax]
c0013296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001329a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329e:	0f b7 c0             	movzx  eax,ax
c00132a1:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a9:	c1 e8 10             	shr    eax,0x10
c00132ac:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	50                   	push   eax
c00132b9:	e8 5e d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	0f b7 c0             	movzx  eax,ax
c00132c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132c8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00132cd:	83 ec 0c             	sub    esp,0xc
c00132d0:	50                   	push   eax
c00132d1:	e8 46 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	0f b7 c0             	movzx  eax,ax
c00132dc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132e4:	c1 e8 10             	shr    eax,0x10
c00132e7:	89 c2                	mov    edx,eax
c00132e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ed:	0f b7 c0             	movzx  eax,ax
c00132f0:	01 d0                	add    eax,edx
c00132f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132fa:	c1 e8 10             	shr    eax,0x10
c00132fd:	89 c2                	mov    edx,eax
c00132ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013303:	0f b7 c0             	movzx  eax,ax
c0013306:	01 d0                	add    eax,edx
c0013308:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001330c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013310:	f7 d0                	not    eax
c0013312:	83 c4 2c             	add    esp,0x2c
c0013315:	c3                   	ret    
c0013316:	66 90                	xchg   ax,ax

c0013318 <inet_chksum_pseudo_partial>:
c0013318:	83 ec 2c             	sub    esp,0x2c
c001331b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001331f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013323:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013327:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001332b:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013330:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013335:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001333d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013346:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001334a:	e9 d9 00 00 00       	jmp    c0013428 <inet_chksum_pseudo_partial+0x110>
c001334f:	90                   	nop
c0013350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013354:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013358:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001335d:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013362:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013367:	39 c2                	cmp    edx,eax
c0013369:	76 09                	jbe    c0013374 <inet_chksum_pseudo_partial+0x5c>
c001336b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001336f:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013374:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001337d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013380:	83 ec 08             	sub    esp,0x8
c0013383:	52                   	push   edx
c0013384:	50                   	push   eax
c0013385:	e8 06 fd ff ff       	call   c0013090 <lwip_standard_chksum>
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	0f b7 c0             	movzx  eax,ax
c0013390:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013394:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013398:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001339c:	89 d1                	mov    ecx,edx
c001339e:	29 c1                	sub    ecx,eax
c00133a0:	89 c8                	mov    eax,ecx
c00133a2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00133a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00133ac:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00133b1:	76 15                	jbe    c00133c8 <inet_chksum_pseudo_partial+0xb0>
c00133b3:	83 ec 08             	sub    esp,0x8
c00133b6:	68 60 0c 03 c0       	push   0xc0030c60
c00133bb:	68 c6 f9 02 c0       	push   0xc002f9c6
c00133c0:	e8 03 c7 00 00       	call   c001fac8 <CPrintf>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133cc:	c1 e8 10             	shr    eax,0x10
c00133cf:	89 c2                	mov    edx,eax
c00133d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d5:	0f b7 c0             	movzx  eax,ax
c00133d8:	01 d0                	add    eax,edx
c00133da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133e2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00133e6:	83 e0 01             	and    eax,0x1
c00133e9:	0f b7 c0             	movzx  eax,ax
c00133ec:	85 c0                	test   eax,eax
c00133ee:	74 2c                	je     c001341c <inet_chksum_pseudo_partial+0x104>
c00133f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133f4:	ba 01 00 00 00       	mov    edx,0x1
c00133f9:	29 c2                	sub    edx,eax
c00133fb:	89 d0                	mov    eax,edx
c00133fd:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013405:	0f b7 c0             	movzx  eax,ax
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	50                   	push   eax
c001340c:	e8 0b d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013411:	83 c4 10             	add    esp,0x10
c0013414:	0f b7 c0             	movzx  eax,ax
c0013417:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001341b:	90                   	nop
c001341c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013420:	8b 00                	mov    eax,DWORD PTR [eax]
c0013422:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013426:	66 90                	xchg   ax,ax
c0013428:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001342d:	74 0d                	je     c001343c <inet_chksum_pseudo_partial+0x124>
c001342f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013434:	85 c0                	test   eax,eax
c0013436:	0f 85 14 ff ff ff    	jne    c0013350 <inet_chksum_pseudo_partial+0x38>
c001343c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013441:	85 c0                	test   eax,eax
c0013443:	74 1b                	je     c0013460 <inet_chksum_pseudo_partial+0x148>
c0013445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	50                   	push   eax
c0013450:	e8 c7 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	0f b7 c0             	movzx  eax,ax
c001345b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001345f:	90                   	nop
c0013460:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013464:	8b 00                	mov    eax,DWORD PTR [eax]
c0013466:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346e:	0f b7 c0             	movzx  eax,ax
c0013471:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013479:	c1 e8 10             	shr    eax,0x10
c001347c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013480:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013484:	8b 00                	mov    eax,DWORD PTR [eax]
c0013486:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001348a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348e:	0f b7 c0             	movzx  eax,ax
c0013491:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013499:	c1 e8 10             	shr    eax,0x10
c001349c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00134a5:	83 ec 0c             	sub    esp,0xc
c00134a8:	50                   	push   eax
c00134a9:	e8 6e d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134ae:	83 c4 10             	add    esp,0x10
c00134b1:	0f b7 c0             	movzx  eax,ax
c00134b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134b8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00134bd:	83 ec 0c             	sub    esp,0xc
c00134c0:	50                   	push   eax
c00134c1:	e8 56 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134c6:	83 c4 10             	add    esp,0x10
c00134c9:	0f b7 c0             	movzx  eax,ax
c00134cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134d4:	c1 e8 10             	shr    eax,0x10
c00134d7:	89 c2                	mov    edx,eax
c00134d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134dd:	0f b7 c0             	movzx  eax,ax
c00134e0:	01 d0                	add    eax,edx
c00134e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134ea:	c1 e8 10             	shr    eax,0x10
c00134ed:	89 c2                	mov    edx,eax
c00134ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f3:	0f b7 c0             	movzx  eax,ax
c00134f6:	01 d0                	add    eax,edx
c00134f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013500:	f7 d0                	not    eax
c0013502:	83 c4 2c             	add    esp,0x2c
c0013505:	c3                   	ret    
c0013506:	66 90                	xchg   ax,ax

c0013508 <inet_chksum>:
c0013508:	83 ec 1c             	sub    esp,0x1c
c001350b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001350f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013514:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013519:	83 ec 08             	sub    esp,0x8
c001351c:	50                   	push   eax
c001351d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013521:	e8 6a fb ff ff       	call   c0013090 <lwip_standard_chksum>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	f7 d0                	not    eax
c001352b:	83 c4 1c             	add    esp,0x1c
c001352e:	c3                   	ret    
c001352f:	90                   	nop

c0013530 <inet_chksum_pbuf>:
c0013530:	83 ec 1c             	sub    esp,0x1c
c0013533:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001353b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013544:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013548:	e9 8b 00 00 00       	jmp    c00135d8 <inet_chksum_pbuf+0xa8>
c001354d:	8d 76 00             	lea    esi,[esi+0x0]
c0013550:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013554:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013558:	0f b7 d0             	movzx  edx,ax
c001355b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001355f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013562:	83 ec 08             	sub    esp,0x8
c0013565:	52                   	push   edx
c0013566:	50                   	push   eax
c0013567:	e8 24 fb ff ff       	call   c0013090 <lwip_standard_chksum>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	0f b7 c0             	movzx  eax,ax
c0013572:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001357a:	c1 e8 10             	shr    eax,0x10
c001357d:	89 c2                	mov    edx,eax
c001357f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013583:	0f b7 c0             	movzx  eax,ax
c0013586:	01 d0                	add    eax,edx
c0013588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001358c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013590:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013594:	83 e0 01             	and    eax,0x1
c0013597:	0f b7 c0             	movzx  eax,ax
c001359a:	85 c0                	test   eax,eax
c001359c:	74 2e                	je     c00135cc <inet_chksum_pbuf+0x9c>
c001359e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135a2:	ba 01 00 00 00       	mov    edx,0x1
c00135a7:	29 c2                	sub    edx,eax
c00135a9:	89 d0                	mov    eax,edx
c00135ab:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b3:	0f b7 c0             	movzx  eax,ax
c00135b6:	83 ec 0c             	sub    esp,0xc
c00135b9:	50                   	push   eax
c00135ba:	e8 5d d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	0f b7 c0             	movzx  eax,ax
c00135c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135c9:	8d 76 00             	lea    esi,[esi+0x0]
c00135cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135d6:	66 90                	xchg   ax,ax
c00135d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135dd:	0f 85 6d ff ff ff    	jne    c0013550 <inet_chksum_pbuf+0x20>
c00135e3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00135e8:	85 c0                	test   eax,eax
c00135ea:	74 1c                	je     c0013608 <inet_chksum_pbuf+0xd8>
c00135ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f0:	0f b7 c0             	movzx  eax,ax
c00135f3:	83 ec 0c             	sub    esp,0xc
c00135f6:	50                   	push   eax
c00135f7:	e8 20 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	0f b7 c0             	movzx  eax,ax
c0013602:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013606:	66 90                	xchg   ax,ax
c0013608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001360c:	f7 d0                	not    eax
c001360e:	83 c4 1c             	add    esp,0x1c
c0013611:	c3                   	ret    
c0013612:	66 90                	xchg   ax,ax

c0013614 <ip_route>:
c0013614:	83 ec 10             	sub    esp,0x10
c0013617:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c001361c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013620:	eb 42                	jmp    c0013664 <ip_route+0x50>
c0013622:	66 90                	xchg   ax,ax
c0013624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013628:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001362b:	83 e0 01             	and    eax,0x1
c001362e:	0f b6 c0             	movzx  eax,al
c0013631:	85 c0                	test   eax,eax
c0013633:	74 23                	je     c0013658 <ip_route+0x44>
c0013635:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013639:	8b 10                	mov    edx,DWORD PTR [eax]
c001363b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001363f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013642:	31 c2                	xor    edx,eax
c0013644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001364b:	21 d0                	and    eax,edx
c001364d:	75 09                	jne    c0013658 <ip_route+0x44>
c001364f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013653:	eb 4f                	jmp    c00136a4 <ip_route+0x90>
c0013655:	8d 76 00             	lea    esi,[esi+0x0]
c0013658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001365c:	8b 00                	mov    eax,DWORD PTR [eax]
c001365e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013662:	66 90                	xchg   ax,ax
c0013664:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013669:	75 b9                	jne    c0013624 <ip_route+0x10>
c001366b:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013670:	85 c0                	test   eax,eax
c0013672:	74 10                	je     c0013684 <ip_route+0x70>
c0013674:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013679:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001367c:	0f b6 c0             	movzx  eax,al
c001367f:	83 e0 01             	and    eax,0x1
c0013682:	75 18                	jne    c001369c <ip_route+0x88>
c0013684:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c001368a:	83 c0 01             	add    eax,0x1
c001368d:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013693:	b8 00 00 00 00       	mov    eax,0x0
c0013698:	eb 0a                	jmp    c00136a4 <ip_route+0x90>
c001369a:	66 90                	xchg   ax,ax
c001369c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00136a1:	8d 76 00             	lea    esi,[esi+0x0]
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	c3                   	ret    

c00136a8 <ip_input>:
c00136a8:	83 ec 1c             	sub    esp,0x1c
c00136ab:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00136b1:	83 c0 01             	add    eax,0x1
c00136b4:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00136ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136cc:	0f b7 c0             	movzx  eax,ax
c00136cf:	83 ec 0c             	sub    esp,0xc
c00136d2:	50                   	push   eax
c00136d3:	e8 44 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	0f b7 c0             	movzx  eax,ax
c00136de:	c1 e8 0c             	shr    eax,0xc
c00136e1:	0f b7 c0             	movzx  eax,ax
c00136e4:	83 f8 04             	cmp    eax,0x4
c00136e7:	74 37                	je     c0013720 <ip_input+0x78>
c00136e9:	83 ec 0c             	sub    esp,0xc
c00136ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136f0:	e8 d7 4b ff ff       	call   c00082cc <pbuf_free>
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00136fe:	83 c0 01             	add    eax,0x1
c0013701:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013707:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c001370d:	83 c0 01             	add    eax,0x1
c0013710:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013716:	b0 00                	mov    al,0x0
c0013718:	e9 cb 03 00 00       	jmp    c0013ae8 <ip_input+0x440>
c001371d:	8d 76 00             	lea    esi,[esi+0x0]
c0013720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013724:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013727:	0f b7 c0             	movzx  eax,ax
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	50                   	push   eax
c001372e:	e8 e9 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	0f b7 c0             	movzx  eax,ax
c0013739:	c1 e8 08             	shr    eax,0x8
c001373c:	83 e0 0f             	and    eax,0xf
c001373f:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013744:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013749:	c1 e0 02             	shl    eax,0x2
c001374c:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013755:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013759:	0f b7 c0             	movzx  eax,ax
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	50                   	push   eax
c0013760:	e8 b7 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	66 89 04 24          	mov    WORD PTR [esp],ax
c001376c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013770:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013774:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013779:	0f b7 c0             	movzx  eax,ax
c001377c:	39 c2                	cmp    edx,eax
c001377e:	77 14                	ja     c0013794 <ip_input+0xec>
c0013780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013787:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c001378b:	0f b7 c0             	movzx  eax,ax
c001378e:	39 c2                	cmp    edx,eax
c0013790:	76 36                	jbe    c00137c8 <ip_input+0x120>
c0013792:	66 90                	xchg   ax,ax
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001379b:	e8 2c 4b ff ff       	call   c00082cc <pbuf_free>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00137a9:	83 c0 01             	add    eax,0x1
c00137ac:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00137b2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137b8:	83 c0 01             	add    eax,0x1
c00137bb:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137c1:	b0 00                	mov    al,0x0
c00137c3:	e9 20 03 00 00       	jmp    c0013ae8 <ip_input+0x440>
c00137c8:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00137cd:	83 ec 08             	sub    esp,0x8
c00137d0:	50                   	push   eax
c00137d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137d5:	e8 2e fd ff ff       	call   c0013508 <inet_chksum>
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	0f b7 c0             	movzx  eax,ax
c00137e0:	85 c0                	test   eax,eax
c00137e2:	74 34                	je     c0013818 <ip_input+0x170>
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137eb:	e8 dc 4a ff ff       	call   c00082cc <pbuf_free>
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00137f9:	83 c0 01             	add    eax,0x1
c00137fc:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c0013802:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013808:	83 c0 01             	add    eax,0x1
c001380b:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013811:	b0 00                	mov    al,0x0
c0013813:	e9 d0 02 00 00       	jmp    c0013ae8 <ip_input+0x440>
c0013818:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001381c:	83 ec 08             	sub    esp,0x8
c001381f:	50                   	push   eax
c0013820:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013824:	e8 77 50 ff ff       	call   c00088a0 <pbuf_realloc>
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013830:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013833:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001383c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001383f:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013844:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001384c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013858:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001385b:	83 e0 01             	and    eax,0x1
c001385e:	0f b6 c0             	movzx  eax,al
c0013861:	85 c0                	test   eax,eax
c0013863:	74 43                	je     c00138a8 <ip_input+0x200>
c0013865:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013869:	83 c0 04             	add    eax,0x4
c001386c:	74 3a                	je     c00138a8 <ip_input+0x200>
c001386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013875:	85 c0                	test   eax,eax
c0013877:	74 2f                	je     c00138a8 <ip_input+0x200>
c0013879:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001387f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013883:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013886:	39 c2                	cmp    edx,eax
c0013888:	74 66                	je     c00138f0 <ip_input+0x248>
c001388a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001388f:	83 ec 08             	sub    esp,0x8
c0013892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013896:	50                   	push   eax
c0013897:	e8 d4 05 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c001389c:	83 c4 10             	add    esp,0x10
c001389f:	0f b6 c0             	movzx  eax,al
c00138a2:	85 c0                	test   eax,eax
c00138a4:	75 4a                	jne    c00138f0 <ip_input+0x248>
c00138a6:	66 90                	xchg   ax,ax
c00138a8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00138ad:	74 15                	je     c00138c4 <ip_input+0x21c>
c00138af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00138b7:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00138bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138c0:	eb 0e                	jmp    c00138d0 <ip_input+0x228>
c00138c2:	66 90                	xchg   ax,ax
c00138c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ce:	66 90                	xchg   ax,ax
c00138d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138d4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00138d8:	75 0a                	jne    c00138e4 <ip_input+0x23c>
c00138da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138de:	8b 00                	mov    eax,DWORD PTR [eax]
c00138e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138e9:	0f 85 65 ff ff ff    	jne    c0013854 <ip_input+0x1ac>
c00138ef:	90                   	nop
c00138f0:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138f5:	83 ec 08             	sub    esp,0x8
c00138f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138fc:	50                   	push   eax
c00138fd:	e8 6e 05 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	0f b6 c0             	movzx  eax,al
c0013908:	85 c0                	test   eax,eax
c001390a:	75 14                	jne    c0013920 <ip_input+0x278>
c001390c:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013911:	25 f0 00 00 00       	and    eax,0xf0
c0013916:	3d e0 00 00 00       	cmp    eax,0xe0
c001391b:	75 2b                	jne    c0013948 <ip_input+0x2a0>
c001391d:	8d 76 00             	lea    esi,[esi+0x0]
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013927:	e8 a0 49 ff ff       	call   c00082cc <pbuf_free>
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013935:	83 c0 01             	add    eax,0x1
c0013938:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001393e:	b0 00                	mov    al,0x0
c0013940:	e9 a3 01 00 00       	jmp    c0013ae8 <ip_input+0x440>
c0013945:	8d 76 00             	lea    esi,[esi+0x0]
c0013948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001394d:	75 19                	jne    c0013968 <ip_input+0x2c0>
c001394f:	83 ec 0c             	sub    esp,0xc
c0013952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013956:	e8 71 49 ff ff       	call   c00082cc <pbuf_free>
c001395b:	83 c4 10             	add    esp,0x10
c001395e:	b0 00                	mov    al,0x0
c0013960:	e9 83 01 00 00       	jmp    c0013ae8 <ip_input+0x440>
c0013965:	8d 76 00             	lea    esi,[esi+0x0]
c0013968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001396c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013970:	0f b7 c0             	movzx  eax,ax
c0013973:	25 3f ff 00 00       	and    eax,0xff3f
c0013978:	74 2e                	je     c00139a8 <ip_input+0x300>
c001397a:	83 ec 0c             	sub    esp,0xc
c001397d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013981:	e8 8a 13 00 00       	call   c0014d10 <ip_reass>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001398d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013992:	75 08                	jne    c001399c <ip_input+0x2f4>
c0013994:	b0 00                	mov    al,0x0
c0013996:	e9 4d 01 00 00       	jmp    c0013ae8 <ip_input+0x440>
c001399b:	90                   	nop
c001399c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139a7:	90                   	nop
c00139a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139ac:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00139b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b5:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00139ba:	83 ec 08             	sub    esp,0x8
c00139bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c5:	e8 32 5c ff ff       	call   c00095fc <raw_input>
c00139ca:	83 c4 10             	add    esp,0x10
c00139cd:	0f b6 c0             	movzx  eax,al
c00139d0:	85 c0                	test   eax,eax
c00139d2:	0f 85 e0 00 00 00    	jne    c0013ab8 <ip_input+0x410>
c00139d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139dc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00139df:	0f b6 c0             	movzx  eax,al
c00139e2:	83 f8 06             	cmp    eax,0x6
c00139e5:	74 25                	je     c0013a0c <ip_input+0x364>
c00139e7:	83 f8 11             	cmp    eax,0x11
c00139ea:	74 08                	je     c00139f4 <ip_input+0x34c>
c00139ec:	83 f8 01             	cmp    eax,0x1
c00139ef:	74 33                	je     c0013a24 <ip_input+0x37c>
c00139f1:	eb 49                	jmp    c0013a3c <ip_input+0x394>
c00139f3:	90                   	nop
c00139f4:	83 ec 08             	sub    esp,0x8
c00139f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ff:	e8 a8 d3 ff ff       	call   c0010dac <udp_input>
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	e9 b0 00 00 00       	jmp    c0013abc <ip_input+0x414>
c0013a0c:	83 ec 08             	sub    esp,0x8
c0013a0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a17:	e8 b0 a4 ff ff       	call   c000decc <tcp_input>
c0013a1c:	83 c4 10             	add    esp,0x10
c0013a1f:	e9 98 00 00 00       	jmp    c0013abc <ip_input+0x414>
c0013a24:	83 ec 08             	sub    esp,0x8
c0013a27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a2f:	e8 70 f0 ff ff       	call   c0012aa4 <icmp_input>
c0013a34:	83 c4 10             	add    esp,0x10
c0013a37:	e9 80 00 00 00       	jmp    c0013abc <ip_input+0x414>
c0013a3c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a41:	83 ec 08             	sub    esp,0x8
c0013a44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a48:	50                   	push   eax
c0013a49:	e8 22 04 00 00       	call   c0013e70 <ip4_addr_isbroadcast>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	0f b6 c0             	movzx  eax,al
c0013a54:	85 c0                	test   eax,eax
c0013a56:	75 30                	jne    c0013a88 <ip_input+0x3e0>
c0013a58:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a5d:	25 f0 00 00 00       	and    eax,0xf0
c0013a62:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a67:	74 1f                	je     c0013a88 <ip_input+0x3e0>
c0013a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a74:	83 ec 08             	sub    esp,0x8
c0013a77:	6a 02                	push   0x2
c0013a79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7d:	e8 c6 f5 ff ff       	call   c0013048 <icmp_dest_unreach>
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	8d 76 00             	lea    esi,[esi+0x0]
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a8f:	e8 38 48 ff ff       	call   c00082cc <pbuf_free>
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013a9d:	83 c0 01             	add    eax,0x1
c0013aa0:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013aa6:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013aac:	83 c0 01             	add    eax,0x1
c0013aaf:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013ab5:	eb 05                	jmp    c0013abc <ip_input+0x414>
c0013ab7:	90                   	nop
c0013ab8:	90                   	nop
c0013ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0013abc:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013ac6:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013ad0:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013ada:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ae4:	b0 00                	mov    al,0x0
c0013ae6:	66 90                	xchg   ax,ax
c0013ae8:	83 c4 1c             	add    esp,0x1c
c0013aeb:	c3                   	ret    

c0013aec <ip_output_if>:
c0013aec:	83 ec 2c             	sub    esp,0x2c
c0013aef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013af3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013af7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013afb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013aff:	88 c8                	mov    al,cl
c0013b01:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013b05:	88 d0                	mov    al,dl
c0013b07:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013b0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b17:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013b1b:	0f b7 c0             	movzx  eax,ax
c0013b1e:	83 f8 01             	cmp    eax,0x1
c0013b21:	74 15                	je     c0013b38 <ip_output_if+0x4c>
c0013b23:	83 ec 08             	sub    esp,0x8
c0013b26:	68 6a 0c 03 c0       	push   0xc0030c6a
c0013b2b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0013b30:	e8 93 bf 00 00       	call   c001fac8 <CPrintf>
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013b3d:	0f 84 f5 01 00 00    	je     c0013d38 <ip_output_if+0x24c>
c0013b43:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013b4a:	83 ec 08             	sub    esp,0x8
c0013b4d:	6a 14                	push   0x14
c0013b4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b53:	e8 d4 45 ff ff       	call   c000812c <pbuf_header>
c0013b58:	83 c4 10             	add    esp,0x10
c0013b5b:	0f b6 c0             	movzx  eax,al
c0013b5e:	85 c0                	test   eax,eax
c0013b60:	74 16                	je     c0013b78 <ip_output_if+0x8c>
c0013b62:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b68:	83 c0 01             	add    eax,0x1
c0013b6b:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b71:	b0 fe                	mov    al,0xfe
c0013b73:	e9 4c 02 00 00       	jmp    c0013dc4 <ip_output_if+0x2d8>
c0013b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b87:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b8b:	0f b7 c0             	movzx  eax,ax
c0013b8e:	83 f8 13             	cmp    eax,0x13
c0013b91:	77 15                	ja     c0013ba8 <ip_output_if+0xbc>
c0013b93:	83 ec 08             	sub    esp,0x8
c0013b96:	68 78 0c 03 c0       	push   0xc0030c78
c0013b9b:	68 c6 f9 02 c0       	push   0xc002f9c6
c0013ba0:	e8 23 bf 00 00       	call   c001fac8 <CPrintf>
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bac:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013bb0:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013bb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bb7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013bbb:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013bbe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013bc3:	c1 e0 08             	shl    eax,0x8
c0013bc6:	89 c2                	mov    edx,eax
c0013bc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013bcd:	09 d0                	or     eax,edx
c0013bcf:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013bd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bdd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013be0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013be7:	0f b7 c0             	movzx  eax,ax
c0013bea:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bf2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bf5:	c1 e8 10             	shr    eax,0x10
c0013bf8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bfc:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013c01:	c1 e8 02             	shr    eax,0x2
c0013c04:	0f b7 c0             	movzx  eax,ax
c0013c07:	c1 e0 08             	shl    eax,0x8
c0013c0a:	80 cc 40             	or     ah,0x40
c0013c0d:	89 c2                	mov    edx,eax
c0013c0f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c14:	09 d0                	or     eax,edx
c0013c16:	0f b7 c0             	movzx  eax,ax
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	50                   	push   eax
c0013c1d:	e8 fa cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c22:	83 c4 10             	add    esp,0x10
c0013c25:	89 c2                	mov    edx,eax
c0013c27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c2b:	66 89 10             	mov    WORD PTR [eax],dx
c0013c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c32:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c35:	0f b7 c0             	movzx  eax,ax
c0013c38:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c43:	0f b7 c0             	movzx  eax,ax
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	50                   	push   eax
c0013c4a:	e8 cd cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	89 c2                	mov    edx,eax
c0013c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c58:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c64:	0f b7 c0             	movzx  eax,ax
c0013c67:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c6f:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c75:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c7b:	0f b7 c0             	movzx  eax,ax
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	50                   	push   eax
c0013c82:	e8 95 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c87:	83 c4 10             	add    esp,0x10
c0013c8a:	89 c2                	mov    edx,eax
c0013c8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c90:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c98:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013c9c:	0f b7 c0             	movzx  eax,ax
c0013c9f:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ca3:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ca9:	83 c0 01             	add    eax,0x1
c0013cac:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013cb2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013cb7:	74 0b                	je     c0013cc4 <ip_output_if+0x1d8>
c0013cb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cbf:	85 c0                	test   eax,eax
c0013cc1:	75 11                	jne    c0013cd4 <ip_output_if+0x1e8>
c0013cc3:	90                   	nop
c0013cc4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cc8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013ccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ccf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cd2:	eb 10                	jmp    c0013ce4 <ip_output_if+0x1f8>
c0013cd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cde:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ceb:	0f b7 c0             	movzx  eax,ax
c0013cee:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cf9:	c1 e8 10             	shr    eax,0x10
c0013cfc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d04:	c1 e8 10             	shr    eax,0x10
c0013d07:	89 c2                	mov    edx,eax
c0013d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0d:	0f b7 c0             	movzx  eax,ax
c0013d10:	01 d0                	add    eax,edx
c0013d12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1a:	c1 e8 10             	shr    eax,0x10
c0013d1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d21:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d29:	89 c2                	mov    edx,eax
c0013d2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013d33:	eb 23                	jmp    c0013d58 <ip_output_if+0x26c>
c0013d35:	8d 76 00             	lea    esi,[esi+0x0]
c0013d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d56:	66 90                	xchg   ax,ax
c0013d58:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d5e:	83 c0 01             	add    eax,0x1
c0013d61:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d67:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d6e:	0f b7 c0             	movzx  eax,ax
c0013d71:	85 c0                	test   eax,eax
c0013d73:	74 33                	je     c0013da8 <ip_output_if+0x2bc>
c0013d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d83:	0f b7 d2             	movzx  edx,dx
c0013d86:	0f b7 c0             	movzx  eax,ax
c0013d89:	39 c2                	cmp    edx,eax
c0013d8b:	76 1b                	jbe    c0013da8 <ip_output_if+0x2bc>
c0013d8d:	83 ec 04             	sub    esp,0x4
c0013d90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d94:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013d98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9c:	e8 37 14 00 00       	call   c00151d8 <ip_frag>
c0013da1:	83 c4 10             	add    esp,0x10
c0013da4:	eb 1e                	jmp    c0013dc4 <ip_output_if+0x2d8>
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013dac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013daf:	83 ec 04             	sub    esp,0x4
c0013db2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013db6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013dba:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013dbe:	ff d0                	call   eax
c0013dc0:	83 c4 10             	add    esp,0x10
c0013dc3:	90                   	nop
c0013dc4:	83 c4 2c             	add    esp,0x2c
c0013dc7:	c3                   	ret    

c0013dc8 <ip_output>:
c0013dc8:	83 ec 2c             	sub    esp,0x2c
c0013dcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013dcf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013dd3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013dd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013ddb:	88 c8                	mov    al,cl
c0013ddd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013de1:	88 d0                	mov    al,dl
c0013de3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013deb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013def:	0f b7 c0             	movzx  eax,ax
c0013df2:	83 f8 01             	cmp    eax,0x1
c0013df5:	74 15                	je     c0013e0c <ip_output+0x44>
c0013df7:	83 ec 08             	sub    esp,0x8
c0013dfa:	68 6a 0c 03 c0       	push   0xc0030c6a
c0013dff:	68 c6 f9 02 c0       	push   0xc002f9c6
c0013e04:	e8 bf bc 00 00       	call   c001fac8 <CPrintf>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013e13:	e8 fc f7 ff ff       	call   c0013614 <ip_route>
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e1f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e24:	75 16                	jne    c0013e3c <ip_output+0x74>
c0013e26:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013e2c:	83 c0 01             	add    eax,0x1
c0013e2f:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013e35:	b0 fc                	mov    al,0xfc
c0013e37:	eb 33                	jmp    c0013e6c <ip_output+0xa4>
c0013e39:	8d 76 00             	lea    esi,[esi+0x0]
c0013e3c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e41:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e46:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e4b:	83 ec 04             	sub    esp,0x4
c0013e4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e52:	51                   	push   ecx
c0013e53:	52                   	push   edx
c0013e54:	50                   	push   eax
c0013e55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e61:	e8 86 fc ff ff       	call   c0013aec <ip_output_if>
c0013e66:	83 c4 20             	add    esp,0x20
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	83 c4 2c             	add    esp,0x2c
c0013e6f:	c3                   	ret    

c0013e70 <ip4_addr_isbroadcast>:
c0013e70:	83 ec 10             	sub    esp,0x10
c0013e73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e7b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e80:	74 0a                	je     c0013e8c <ip4_addr_isbroadcast+0x1c>
c0013e82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e87:	75 07                	jne    c0013e90 <ip4_addr_isbroadcast+0x20>
c0013e89:	8d 76 00             	lea    esi,[esi+0x0]
c0013e8c:	b0 01                	mov    al,0x1
c0013e8e:	eb 64                	jmp    c0013ef4 <ip4_addr_isbroadcast+0x84>
c0013e90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e94:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e97:	0f b6 c0             	movzx  eax,al
c0013e9a:	83 e0 02             	and    eax,0x2
c0013e9d:	75 05                	jne    c0013ea4 <ip4_addr_isbroadcast+0x34>
c0013e9f:	b0 00                	mov    al,0x0
c0013ea1:	eb 51                	jmp    c0013ef4 <ip4_addr_isbroadcast+0x84>
c0013ea3:	90                   	nop
c0013ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013eab:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013eaf:	75 07                	jne    c0013eb8 <ip4_addr_isbroadcast+0x48>
c0013eb1:	b0 00                	mov    al,0x0
c0013eb3:	eb 3f                	jmp    c0013ef4 <ip4_addr_isbroadcast+0x84>
c0013eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ec3:	31 c2                	xor    edx,eax
c0013ec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ecc:	21 d0                	and    eax,edx
c0013ece:	75 20                	jne    c0013ef0 <ip4_addr_isbroadcast+0x80>
c0013ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ed4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ed7:	f7 d0                	not    eax
c0013ed9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013edd:	89 c2                	mov    edx,eax
c0013edf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ee3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ee6:	f7 d0                	not    eax
c0013ee8:	39 c2                	cmp    edx,eax
c0013eea:	75 04                	jne    c0013ef0 <ip4_addr_isbroadcast+0x80>
c0013eec:	b0 01                	mov    al,0x1
c0013eee:	eb 04                	jmp    c0013ef4 <ip4_addr_isbroadcast+0x84>
c0013ef0:	b0 00                	mov    al,0x0
c0013ef2:	66 90                	xchg   ax,ax
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	c3                   	ret    

c0013ef8 <ip4_addr_netmask_valid>:
c0013ef8:	83 ec 1c             	sub    esp,0x1c
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f02:	e8 39 cd fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0013f07:	83 c4 10             	add    esp,0x10
c0013f0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f0e:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013f16:	eb 10                	jmp    c0013f28 <ip4_addr_netmask_valid+0x30>
c0013f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f1c:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f20:	74 12                	je     c0013f34 <ip4_addr_netmask_valid+0x3c>
c0013f22:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f2d:	75 e9                	jne    c0013f18 <ip4_addr_netmask_valid+0x20>
c0013f2f:	eb 1b                	jmp    c0013f4c <ip4_addr_netmask_valid+0x54>
c0013f31:	8d 76 00             	lea    esi,[esi+0x0]
c0013f34:	90                   	nop
c0013f35:	eb 15                	jmp    c0013f4c <ip4_addr_netmask_valid+0x54>
c0013f37:	90                   	nop
c0013f38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f3c:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f40:	74 06                	je     c0013f48 <ip4_addr_netmask_valid+0x50>
c0013f42:	b0 00                	mov    al,0x0
c0013f44:	eb 12                	jmp    c0013f58 <ip4_addr_netmask_valid+0x60>
c0013f46:	66 90                	xchg   ax,ax
c0013f48:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f51:	75 e5                	jne    c0013f38 <ip4_addr_netmask_valid+0x40>
c0013f53:	b0 01                	mov    al,0x1
c0013f55:	8d 76 00             	lea    esi,[esi+0x0]
c0013f58:	83 c4 1c             	add    esp,0x1c
c0013f5b:	c3                   	ret    

c0013f5c <ipaddr_aton>:
c0013f5c:	83 ec 2c             	sub    esp,0x2c
c0013f5f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f6b:	8a 00                	mov    al,BYTE PTR [eax]
c0013f6d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f71:	8d 76 00             	lea    esi,[esi+0x0]
c0013f74:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f78:	0f b6 c0             	movzx  eax,al
c0013f7b:	83 f8 2f             	cmp    eax,0x2f
c0013f7e:	76 0c                	jbe    c0013f8c <ipaddr_aton+0x30>
c0013f80:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f84:	0f b6 c0             	movzx  eax,al
c0013f87:	83 f8 39             	cmp    eax,0x39
c0013f8a:	76 0c                	jbe    c0013f98 <ipaddr_aton+0x3c>
c0013f8c:	b8 00 00 00 00       	mov    eax,0x0
c0013f91:	e9 f2 02 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c0013f96:	66 90                	xchg   ax,ax
c0013f98:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013fa0:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013fa5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013faa:	83 f8 30             	cmp    eax,0x30
c0013fad:	75 45                	jne    c0013ff4 <ipaddr_aton+0x98>
c0013faf:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fb8:	8a 00                	mov    al,BYTE PTR [eax]
c0013fba:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fbe:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fc3:	83 f8 78             	cmp    eax,0x78
c0013fc6:	74 0c                	je     c0013fd4 <ipaddr_aton+0x78>
c0013fc8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fcd:	83 f8 58             	cmp    eax,0x58
c0013fd0:	75 1a                	jne    c0013fec <ipaddr_aton+0x90>
c0013fd2:	66 90                	xchg   ax,ax
c0013fd4:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013fd9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fe2:	8a 00                	mov    al,BYTE PTR [eax]
c0013fe4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fe8:	eb 0a                	jmp    c0013ff4 <ipaddr_aton+0x98>
c0013fea:	66 90                	xchg   ax,ax
c0013fec:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013ff8:	0f b6 c0             	movzx  eax,al
c0013ffb:	83 f8 2f             	cmp    eax,0x2f
c0013ffe:	76 3c                	jbe    c001403c <ipaddr_aton+0xe0>
c0014000:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014004:	0f b6 c0             	movzx  eax,al
c0014007:	83 f8 39             	cmp    eax,0x39
c001400a:	77 30                	ja     c001403c <ipaddr_aton+0xe0>
c001400c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014011:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0014016:	89 c2                	mov    edx,eax
c0014018:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001401d:	01 d0                	add    eax,edx
c001401f:	83 e8 30             	sub    eax,0x30
c0014022:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014026:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001402b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001402f:	8a 00                	mov    al,BYTE PTR [eax]
c0014031:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014035:	e9 ae 00 00 00       	jmp    c00140e8 <ipaddr_aton+0x18c>
c001403a:	66 90                	xchg   ax,ax
c001403c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014041:	83 f8 10             	cmp    eax,0x10
c0014044:	0f 85 a6 00 00 00    	jne    c00140f0 <ipaddr_aton+0x194>
c001404a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001404e:	0f b6 c0             	movzx  eax,al
c0014051:	83 f8 2f             	cmp    eax,0x2f
c0014054:	76 0e                	jbe    c0014064 <ipaddr_aton+0x108>
c0014056:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001405a:	0f b6 c0             	movzx  eax,al
c001405d:	83 f8 39             	cmp    eax,0x39
c0014060:	76 32                	jbe    c0014094 <ipaddr_aton+0x138>
c0014062:	66 90                	xchg   ax,ax
c0014064:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014068:	0f b6 c0             	movzx  eax,al
c001406b:	83 f8 60             	cmp    eax,0x60
c001406e:	76 0c                	jbe    c001407c <ipaddr_aton+0x120>
c0014070:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014074:	0f b6 c0             	movzx  eax,al
c0014077:	83 f8 66             	cmp    eax,0x66
c001407a:	76 18                	jbe    c0014094 <ipaddr_aton+0x138>
c001407c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014080:	0f b6 c0             	movzx  eax,al
c0014083:	83 f8 40             	cmp    eax,0x40
c0014086:	76 68                	jbe    c00140f0 <ipaddr_aton+0x194>
c0014088:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001408c:	0f b6 c0             	movzx  eax,al
c001408f:	83 f8 46             	cmp    eax,0x46
c0014092:	77 5c                	ja     c00140f0 <ipaddr_aton+0x194>
c0014094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014098:	c1 e0 04             	shl    eax,0x4
c001409b:	89 c2                	mov    edx,eax
c001409d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140a2:	8d 48 0a             	lea    ecx,[eax+0xa]
c00140a5:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140a9:	0f b6 c0             	movzx  eax,al
c00140ac:	83 f8 60             	cmp    eax,0x60
c00140af:	76 13                	jbe    c00140c4 <ipaddr_aton+0x168>
c00140b1:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140b5:	0f b6 c0             	movzx  eax,al
c00140b8:	83 f8 7a             	cmp    eax,0x7a
c00140bb:	77 07                	ja     c00140c4 <ipaddr_aton+0x168>
c00140bd:	b8 61 00 00 00       	mov    eax,0x61
c00140c2:	eb 08                	jmp    c00140cc <ipaddr_aton+0x170>
c00140c4:	b8 41 00 00 00       	mov    eax,0x41
c00140c9:	8d 76 00             	lea    esi,[esi+0x0]
c00140cc:	29 c1                	sub    ecx,eax
c00140ce:	89 c8                	mov    eax,ecx
c00140d0:	09 d0                	or     eax,edx
c00140d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140d6:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140df:	8a 00                	mov    al,BYTE PTR [eax]
c00140e1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	e9 07 ff ff ff       	jmp    c0013ff4 <ipaddr_aton+0x98>
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140f5:	83 f8 2e             	cmp    eax,0x2e
c00140f8:	75 42                	jne    c001413c <ipaddr_aton+0x1e0>
c00140fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140fe:	83 c0 0c             	add    eax,0xc
c0014101:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014105:	72 0d                	jb     c0014114 <ipaddr_aton+0x1b8>
c0014107:	b8 00 00 00 00       	mov    eax,0x0
c001410c:	e9 77 01 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c0014111:	8d 76 00             	lea    esi,[esi+0x0]
c0014114:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014118:	8d 50 04             	lea    edx,[eax+0x4]
c001411b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001411f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014123:	89 10                	mov    DWORD PTR [eax],edx
c0014125:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001412e:	8a 00                	mov    al,BYTE PTR [eax]
c0014130:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014134:	e9 3b fe ff ff       	jmp    c0013f74 <ipaddr_aton+0x18>
c0014139:	8d 76 00             	lea    esi,[esi+0x0]
c001413c:	90                   	nop
c001413d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014142:	85 c0                	test   eax,eax
c0014144:	74 46                	je     c001418c <ipaddr_aton+0x230>
c0014146:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001414b:	83 f8 20             	cmp    eax,0x20
c001414e:	74 3c                	je     c001418c <ipaddr_aton+0x230>
c0014150:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014155:	83 f8 0c             	cmp    eax,0xc
c0014158:	74 32                	je     c001418c <ipaddr_aton+0x230>
c001415a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415f:	83 f8 0a             	cmp    eax,0xa
c0014162:	74 28                	je     c001418c <ipaddr_aton+0x230>
c0014164:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014169:	83 f8 0d             	cmp    eax,0xd
c001416c:	74 1e                	je     c001418c <ipaddr_aton+0x230>
c001416e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014173:	83 f8 09             	cmp    eax,0x9
c0014176:	74 14                	je     c001418c <ipaddr_aton+0x230>
c0014178:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001417d:	83 f8 0b             	cmp    eax,0xb
c0014180:	74 0a                	je     c001418c <ipaddr_aton+0x230>
c0014182:	b8 00 00 00 00       	mov    eax,0x0
c0014187:	e9 fc 00 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c001418c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014190:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014194:	29 c2                	sub    edx,eax
c0014196:	89 d0                	mov    eax,edx
c0014198:	c1 f8 02             	sar    eax,0x2
c001419b:	83 c0 01             	add    eax,0x1
c001419e:	83 f8 04             	cmp    eax,0x4
c00141a1:	0f 87 9d 00 00 00    	ja     c0014244 <ipaddr_aton+0x2e8>
c00141a7:	8b 04 85 b0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf350]
c00141ae:	ff e0                	jmp    eax
c00141b0:	b8 00 00 00 00       	mov    eax,0x0
c00141b5:	e9 ce 00 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c00141ba:	66 90                	xchg   ax,ax
c00141bc:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00141c4:	76 0a                	jbe    c00141d0 <ipaddr_aton+0x274>
c00141c6:	b8 00 00 00 00       	mov    eax,0x0
c00141cb:	e9 b8 00 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c00141d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d4:	c1 e0 18             	shl    eax,0x18
c00141d7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141db:	e9 80 00 00 00       	jmp    c0014260 <ipaddr_aton+0x304>
c00141e0:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00141e8:	76 0a                	jbe    c00141f4 <ipaddr_aton+0x298>
c00141ea:	b8 00 00 00 00       	mov    eax,0x0
c00141ef:	e9 94 00 00 00       	jmp    c0014288 <ipaddr_aton+0x32c>
c00141f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141f8:	c1 e0 18             	shl    eax,0x18
c00141fb:	89 c2                	mov    edx,eax
c00141fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014201:	c1 e0 10             	shl    eax,0x10
c0014204:	09 d0                	or     eax,edx
c0014206:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001420a:	eb 54                	jmp    c0014260 <ipaddr_aton+0x304>
c001420c:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c0014214:	76 0a                	jbe    c0014220 <ipaddr_aton+0x2c4>
c0014216:	b8 00 00 00 00       	mov    eax,0x0
c001421b:	eb 6b                	jmp    c0014288 <ipaddr_aton+0x32c>
c001421d:	8d 76 00             	lea    esi,[esi+0x0]
c0014220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014224:	c1 e0 18             	shl    eax,0x18
c0014227:	89 c2                	mov    edx,eax
c0014229:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001422d:	c1 e0 10             	shl    eax,0x10
c0014230:	09 c2                	or     edx,eax
c0014232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014236:	c1 e0 08             	shl    eax,0x8
c0014239:	09 d0                	or     eax,edx
c001423b:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001423f:	eb 1f                	jmp    c0014260 <ipaddr_aton+0x304>
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	83 ec 08             	sub    esp,0x8
c0014247:	68 a5 0c 03 c0       	push   0xc0030ca5
c001424c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014251:	e8 72 b8 00 00       	call   c001fac8 <CPrintf>
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	eb 05                	jmp    c0014260 <ipaddr_aton+0x304>
c001425b:	90                   	nop
c001425c:	90                   	nop
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014265:	74 19                	je     c0014280 <ipaddr_aton+0x324>
c0014267:	83 ec 0c             	sub    esp,0xc
c001426a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001426e:	e8 cd c9 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	89 c2                	mov    edx,eax
c0014278:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001427c:	89 10                	mov    DWORD PTR [eax],edx
c001427e:	66 90                	xchg   ax,ax
c0014280:	b8 01 00 00 00       	mov    eax,0x1
c0014285:	8d 76 00             	lea    esi,[esi+0x0]
c0014288:	83 c4 2c             	add    esp,0x2c
c001428b:	c3                   	ret    

c001428c <ipaddr_addr>:
c001428c:	83 ec 1c             	sub    esp,0x1c
c001428f:	83 ec 08             	sub    esp,0x8
c0014292:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014296:	50                   	push   eax
c0014297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001429b:	e8 bc fc ff ff       	call   c0013f5c <ipaddr_aton>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	85 c0                	test   eax,eax
c00142a5:	74 09                	je     c00142b0 <ipaddr_addr+0x24>
c00142a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142ab:	eb 0b                	jmp    c00142b8 <ipaddr_addr+0x2c>
c00142ad:	8d 76 00             	lea    esi,[esi+0x0]
c00142b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]
c00142b8:	83 c4 1c             	add    esp,0x1c
c00142bb:	c3                   	ret    

c00142bc <ipaddr_ntoa_r>:
c00142bc:	83 ec 20             	sub    esp,0x20
c00142bf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00142cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00142dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142e1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00142e6:	e9 f9 00 00 00       	jmp    c00143e4 <ipaddr_ntoa_r+0x128>
c00142eb:	90                   	nop
c00142ec:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142f1:	8d 76 00             	lea    esi,[esi+0x0]
c00142f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142f8:	8a 00                	mov    al,BYTE PTR [eax]
c00142fa:	0f b6 c8             	movzx  ecx,al
c00142fd:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014302:	89 c8                	mov    eax,ecx
c0014304:	f7 e2                	mul    edx
c0014306:	c1 ea 03             	shr    edx,0x3
c0014309:	89 d0                	mov    eax,edx
c001430b:	c1 e0 02             	shl    eax,0x2
c001430e:	01 d0                	add    eax,edx
c0014310:	d1 e0                	shl    eax,1
c0014312:	29 c1                	sub    ecx,eax
c0014314:	89 c8                	mov    eax,ecx
c0014316:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001431a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001431e:	8a 00                	mov    al,BYTE PTR [eax]
c0014320:	0f b6 c0             	movzx  eax,al
c0014323:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014328:	f7 e2                	mul    edx
c001432a:	89 d0                	mov    eax,edx
c001432c:	c1 e8 03             	shr    eax,0x3
c001432f:	88 c2                	mov    dl,al
c0014331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014335:	88 10                	mov    BYTE PTR [eax],dl
c0014337:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001433b:	83 c0 30             	add    eax,0x30
c001433e:	88 c1                	mov    cl,al
c0014340:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014344:	8d 50 01             	lea    edx,[eax+0x1]
c0014347:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001434b:	0f b6 c0             	movzx  eax,al
c001434e:	88 ca                	mov    dl,cl
c0014350:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014354:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014358:	8a 00                	mov    al,BYTE PTR [eax]
c001435a:	0f b6 c0             	movzx  eax,al
c001435d:	85 c0                	test   eax,eax
c001435f:	75 93                	jne    c00142f4 <ipaddr_ntoa_r+0x38>
c0014361:	eb 35                	jmp    c0014398 <ipaddr_ntoa_r+0xdc>
c0014363:	90                   	nop
c0014364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014368:	8d 50 01             	lea    edx,[eax+0x1]
c001436b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001436f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014373:	7f 0b                	jg     c0014380 <ipaddr_ntoa_r+0xc4>
c0014375:	b8 00 00 00 00       	mov    eax,0x0
c001437a:	e9 85 00 00 00       	jmp    c0014404 <ipaddr_ntoa_r+0x148>
c001437f:	90                   	nop
c0014380:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014385:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014389:	8d 48 01             	lea    ecx,[eax+0x1]
c001438c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014390:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014394:	88 10                	mov    BYTE PTR [eax],dl
c0014396:	66 90                	xchg   ax,ax
c0014398:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001439c:	8d 50 ff             	lea    edx,[eax-0x1]
c001439f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00143a3:	0f b6 c0             	movzx  eax,al
c00143a6:	85 c0                	test   eax,eax
c00143a8:	75 ba                	jne    c0014364 <ipaddr_ntoa_r+0xa8>
c00143aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ae:	8d 50 01             	lea    edx,[eax+0x1]
c00143b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143b5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00143b9:	7f 09                	jg     c00143c4 <ipaddr_ntoa_r+0x108>
c00143bb:	b8 00 00 00 00       	mov    eax,0x0
c00143c0:	eb 42                	jmp    c0014404 <ipaddr_ntoa_r+0x148>
c00143c2:	66 90                	xchg   ax,ax
c00143c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143c8:	8d 50 01             	lea    edx,[eax+0x1]
c00143cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143cf:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00143d2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00143d7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00143db:	83 c0 01             	add    eax,0x1
c00143de:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00143e2:	66 90                	xchg   ax,ax
c00143e4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00143e9:	83 f8 03             	cmp    eax,0x3
c00143ec:	0f 86 fa fe ff ff    	jbe    c00142ec <ipaddr_ntoa_r+0x30>
c00143f2:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00143fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014402:	66 90                	xchg   ax,ax
c0014404:	83 c4 20             	add    esp,0x20
c0014407:	c3                   	ret    

c0014408 <ipaddr_ntoa>:
c0014408:	6a 10                	push   0x10
c001440a:	68 a4 a9 03 c0       	push   0xc003a9a4
c001440f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014413:	e8 a4 fe ff ff       	call   c00142bc <ipaddr_ntoa_r>
c0014418:	83 c4 0c             	add    esp,0xc
c001441b:	c3                   	ret    

c001441c <ip_reass_dequeue_datagram>:
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014424:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014428:	75 0e                	jne    c0014438 <ip_reass_dequeue_datagram+0x1c>
c001442a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001442e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014430:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014435:	eb 29                	jmp    c0014460 <ip_reass_dequeue_datagram+0x44>
c0014437:	90                   	nop
c0014438:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001443d:	75 15                	jne    c0014454 <ip_reass_dequeue_datagram+0x38>
c001443f:	83 ec 08             	sub    esp,0x8
c0014442:	68 cc 0c 03 c0       	push   0xc0030ccc
c0014447:	68 c6 f9 02 c0       	push   0xc002f9c6
c001444c:	e8 77 b6 00 00       	call   c001fac8 <CPrintf>
c0014451:	83 c4 10             	add    esp,0x10
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	8b 10                	mov    edx,DWORD PTR [eax]
c001445a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001445e:	89 10                	mov    DWORD PTR [eax],edx
c0014460:	83 ec 08             	sub    esp,0x8
c0014463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014467:	6a 05                	push   0x5
c0014469:	e8 9e 35 ff ff       	call   c0007a0c <memp_free>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	90                   	nop
c0014472:	83 c4 0c             	add    esp,0xc
c0014475:	c3                   	ret    
c0014476:	66 90                	xchg   ax,ax

c0014478 <ip_reass_free_complete_datagram>:
c0014478:	83 ec 2c             	sub    esp,0x2c
c001447b:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0014482:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014486:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001448a:	75 18                	jne    c00144a4 <ip_reass_free_complete_datagram+0x2c>
c001448c:	83 ec 08             	sub    esp,0x8
c001448f:	68 e5 0c 03 c0       	push   0xc0030ce5
c0014494:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014499:	e8 2a b6 00 00       	call   c001fac8 <CPrintf>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	8d 76 00             	lea    esi,[esi+0x0]
c00144a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00144a9:	74 21                	je     c00144cc <ip_reass_free_complete_datagram+0x54>
c00144ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144af:	8b 00                	mov    eax,DWORD PTR [eax]
c00144b1:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00144b5:	74 15                	je     c00144cc <ip_reass_free_complete_datagram+0x54>
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	68 f1 0c 03 c0       	push   0xc0030cf1
c00144bf:	68 c6 f9 02 c0       	push   0xc002f9c6
c00144c4:	e8 ff b5 00 00       	call   c001fac8 <CPrintf>
c00144c9:	83 c4 10             	add    esp,0x10
c00144cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144de:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144e2:	0f b7 c0             	movzx  eax,ax
c00144e5:	85 c0                	test   eax,eax
c00144e7:	0f 85 a3 00 00 00    	jne    c0014590 <ip_reass_free_complete_datagram+0x118>
c00144ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00144fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014502:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014509:	8d 50 08             	lea    edx,[eax+0x8]
c001450c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014513:	83 ec 04             	sub    esp,0x4
c0014516:	6a 14                	push   0x14
c0014518:	52                   	push   edx
c0014519:	50                   	push   eax
c001451a:	e8 5b be fe ff       	call   c000037a <memcpy>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	83 ec 08             	sub    esp,0x8
c0014525:	6a 01                	push   0x1
c0014527:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001452b:	e8 3c eb ff ff       	call   c001306c <icmp_time_exceeded>
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	83 ec 0c             	sub    esp,0xc
c0014536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001453a:	e8 69 45 ff ff       	call   c0008aa8 <pbuf_clen>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014546:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001454b:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014550:	01 d0                	add    eax,edx
c0014552:	3d ff ff 00 00       	cmp    eax,0xffff
c0014557:	7e 17                	jle    c0014570 <ip_reass_free_complete_datagram+0xf8>
c0014559:	83 ec 08             	sub    esp,0x8
c001455c:	68 03 0d 03 c0       	push   0xc0030d03
c0014561:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014566:	e8 5d b5 00 00       	call   c001fac8 <CPrintf>
c001456b:	83 c4 10             	add    esp,0x10
c001456e:	66 90                	xchg   ax,ax
c0014570:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014575:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001457a:	01 d0                	add    eax,edx
c001457c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014581:	83 ec 0c             	sub    esp,0xc
c0014584:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014588:	e8 3f 3d ff ff       	call   c00082cc <pbuf_free>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014597:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001459b:	eb 7b                	jmp    c0014618 <ip_reass_free_complete_datagram+0x1a0>
c001459d:	8d 76 00             	lea    esi,[esi+0x0]
c00145a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00145b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c4:	e8 df 44 ff ff       	call   c0008aa8 <pbuf_clen>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00145d0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145d5:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145da:	01 d0                	add    eax,edx
c00145dc:	3d ff ff 00 00       	cmp    eax,0xffff
c00145e1:	7e 15                	jle    c00145f8 <ip_reass_free_complete_datagram+0x180>
c00145e3:	83 ec 08             	sub    esp,0x8
c00145e6:	68 03 0d 03 c0       	push   0xc0030d03
c00145eb:	68 c6 f9 02 c0       	push   0xc002f9c6
c00145f0:	e8 d3 b4 00 00       	call   c001fac8 <CPrintf>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145fd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014602:	01 d0                	add    eax,edx
c0014604:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014609:	83 ec 0c             	sub    esp,0xc
c001460c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014610:	e8 b7 3c ff ff       	call   c00082cc <pbuf_free>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001461d:	75 81                	jne    c00145a0 <ip_reass_free_complete_datagram+0x128>
c001461f:	83 ec 08             	sub    esp,0x8
c0014622:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014626:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001462a:	e8 ed fd ff ff       	call   c001441c <ip_reass_dequeue_datagram>
c001462f:	83 c4 10             	add    esp,0x10
c0014632:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014638:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001463d:	0f b7 c0             	movzx  eax,ax
c0014640:	39 c2                	cmp    edx,eax
c0014642:	76 18                	jbe    c001465c <ip_reass_free_complete_datagram+0x1e4>
c0014644:	83 ec 08             	sub    esp,0x8
c0014647:	68 20 0d 03 c0       	push   0xc0030d20
c001464c:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014651:	e8 72 b4 00 00       	call   c001fac8 <CPrintf>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	8d 76 00             	lea    esi,[esi+0x0]
c001465c:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014663:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014668:	89 d1                	mov    ecx,edx
c001466a:	29 c1                	sub    ecx,eax
c001466c:	89 c8                	mov    eax,ecx
c001466e:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014674:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014679:	83 c4 2c             	add    esp,0x2c
c001467c:	c3                   	ret    
c001467d:	8d 76 00             	lea    esi,[esi+0x0]

c0014680 <ip_reass_tmr>:
c0014680:	83 ec 1c             	sub    esp,0x1c
c0014683:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001468b:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014694:	eb 62                	jmp    c00146f8 <ip_reass_tmr+0x78>
c0014696:	66 90                	xchg   ax,ax
c0014698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001469c:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001469f:	0f b6 c0             	movzx  eax,al
c00146a2:	85 c0                	test   eax,eax
c00146a4:	74 2a                	je     c00146d0 <ip_reass_tmr+0x50>
c00146a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146aa:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00146ad:	83 e8 01             	sub    eax,0x1
c00146b0:	88 c2                	mov    dl,al
c00146b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146b6:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c00146b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00146c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146cb:	eb 2b                	jmp    c00146f8 <ip_reass_tmr+0x78>
c00146cd:	8d 76 00             	lea    esi,[esi+0x0]
c00146d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00146de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146e2:	83 ec 08             	sub    esp,0x8
c00146e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146ed:	e8 86 fd ff ff       	call   c0014478 <ip_reass_free_complete_datagram>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	8d 76 00             	lea    esi,[esi+0x0]
c00146f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146fd:	75 99                	jne    c0014698 <ip_reass_tmr+0x18>
c00146ff:	90                   	nop
c0014700:	83 c4 1c             	add    esp,0x1c
c0014703:	c3                   	ret    

c0014704 <ip_reass_remove_oldest_datagram>:
c0014704:	83 ec 2c             	sub    esp,0x2c
c0014707:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001470f:	90                   	nop
c0014710:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014718:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014728:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001472d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014731:	e9 9a 00 00 00       	jmp    c00147d0 <ip_reass_remove_oldest_datagram+0xcc>
c0014736:	66 90                	xchg   ax,ax
c0014738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001473c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001473f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014743:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014746:	39 c2                	cmp    edx,eax
c0014748:	75 2e                	jne    c0014778 <ip_reass_remove_oldest_datagram+0x74>
c001474a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001474e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014755:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014758:	39 c2                	cmp    edx,eax
c001475a:	75 1c                	jne    c0014778 <ip_reass_remove_oldest_datagram+0x74>
c001475c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014760:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014767:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001476b:	0f b7 d2             	movzx  edx,dx
c001476e:	0f b7 c0             	movzx  eax,ax
c0014771:	39 c2                	cmp    edx,eax
c0014773:	74 3b                	je     c00147b0 <ip_reass_remove_oldest_datagram+0xac>
c0014775:	8d 76 00             	lea    esi,[esi+0x0]
c0014778:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001477d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014782:	75 0c                	jne    c0014790 <ip_reass_remove_oldest_datagram+0x8c>
c0014784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014788:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001478c:	eb 22                	jmp    c00147b0 <ip_reass_remove_oldest_datagram+0xac>
c001478e:	66 90                	xchg   ax,ax
c0014790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014794:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001479b:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001479e:	0f b6 d2             	movzx  edx,dl
c00147a1:	0f b6 c0             	movzx  eax,al
c00147a4:	39 c2                	cmp    edx,eax
c00147a6:	77 08                	ja     c00147b0 <ip_reass_remove_oldest_datagram+0xac>
c00147a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00147b6:	85 c0                	test   eax,eax
c00147b8:	74 0a                	je     c00147c4 <ip_reass_remove_oldest_datagram+0xc0>
c00147ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147c2:	66 90                	xchg   ax,ax
c00147c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00147ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ce:	66 90                	xchg   ax,ax
c00147d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00147d5:	0f 85 5d ff ff ff    	jne    c0014738 <ip_reass_remove_oldest_datagram+0x34>
c00147db:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147e0:	74 22                	je     c0014804 <ip_reass_remove_oldest_datagram+0x100>
c00147e2:	83 ec 08             	sub    esp,0x8
c00147e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147ed:	e8 86 fc ff ff       	call   c0014478 <ip_reass_free_complete_datagram>
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147fd:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014801:	8d 76 00             	lea    esi,[esi+0x0]
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001480c:	7d 0e                	jge    c001481c <ip_reass_remove_oldest_datagram+0x118>
c001480e:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0014813:	0f 8f f7 fe ff ff    	jg     c0014710 <ip_reass_remove_oldest_datagram+0xc>
c0014819:	8d 76 00             	lea    esi,[esi+0x0]
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	83 c4 2c             	add    esp,0x2c
c0014823:	c3                   	ret    

c0014824 <ip_reass_enqueue_new_datagram>:
c0014824:	83 ec 1c             	sub    esp,0x1c
c0014827:	83 ec 0c             	sub    esp,0xc
c001482a:	6a 05                	push   0x5
c001482c:	e8 af 30 ff ff       	call   c00078e0 <memp_malloc>
c0014831:	83 c4 10             	add    esp,0x10
c0014834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014838:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001483d:	75 4d                	jne    c001488c <ip_reass_enqueue_new_datagram+0x68>
c001483f:	83 ec 08             	sub    esp,0x8
c0014842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001484a:	e8 b5 fe ff ff       	call   c0014704 <ip_reass_remove_oldest_datagram>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014856:	7f 14                	jg     c001486c <ip_reass_enqueue_new_datagram+0x48>
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	6a 05                	push   0x5
c001485d:	e8 7e 30 ff ff       	call   c00078e0 <memp_malloc>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014869:	8d 76 00             	lea    esi,[esi+0x0]
c001486c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014871:	75 19                	jne    c001488c <ip_reass_enqueue_new_datagram+0x68>
c0014873:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014879:	83 c0 01             	add    eax,0x1
c001487c:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014882:	b8 00 00 00 00       	mov    eax,0x0
c0014887:	eb 53                	jmp    c00148dc <ip_reass_enqueue_new_datagram+0xb8>
c0014889:	8d 76 00             	lea    esi,[esi+0x0]
c001488c:	83 ec 04             	sub    esp,0x4
c001488f:	6a 20                	push   0x20
c0014891:	6a 00                	push   0x0
c0014893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014897:	e8 54 bc fe ff       	call   c00004f0 <memset>
c001489c:	83 c4 10             	add    esp,0x10
c001489f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148a3:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c00148a7:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c00148ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b1:	89 10                	mov    DWORD PTR [eax],edx
c00148b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b7:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00148bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148c0:	83 c0 08             	add    eax,0x8
c00148c3:	83 ec 04             	sub    esp,0x4
c00148c6:	6a 14                	push   0x14
c00148c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148cc:	50                   	push   eax
c00148cd:	e8 a8 ba fe ff       	call   c000037a <memcpy>
c00148d2:	83 c4 10             	add    esp,0x10
c00148d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148d9:	8d 76 00             	lea    esi,[esi+0x0]
c00148dc:	83 c4 1c             	add    esp,0x1c
c00148df:	c3                   	ret    

c00148e0 <ip_reass_chain_frag_into_datagram_and_validate>:
c00148e0:	53                   	push   ebx
c00148e1:	83 ec 28             	sub    esp,0x28
c00148e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148ec:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014903:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014907:	0f b7 c0             	movzx  eax,ax
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	50                   	push   eax
c001490e:	e8 09 c3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	89 c3                	mov    ebx,eax
c0014918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001491c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001491f:	0f b7 c0             	movzx  eax,ax
c0014922:	83 ec 0c             	sub    esp,0xc
c0014925:	50                   	push   eax
c0014926:	e8 f1 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	0f b7 c0             	movzx  eax,ax
c0014931:	c1 e8 08             	shr    eax,0x8
c0014934:	83 e0 0f             	and    eax,0xf
c0014937:	c1 e0 02             	shl    eax,0x2
c001493a:	89 d9                	mov    ecx,ebx
c001493c:	29 c1                	sub    ecx,eax
c001493e:	89 c8                	mov    eax,ecx
c0014940:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014949:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001494d:	0f b7 c0             	movzx  eax,ax
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	50                   	push   eax
c0014954:	e8 c3 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	25 ff 1f 00 00       	and    eax,0x1fff
c0014961:	c1 e0 03             	shl    eax,0x3
c0014964:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014969:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001496d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014970:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014974:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014978:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001497e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014986:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001498a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001498e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014993:	01 d0                	add    eax,edx
c0014995:	89 c2                	mov    edx,eax
c0014997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001499b:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001499f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149aa:	e9 11 01 00 00       	jmp    c0014ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c00149af:	90                   	nop
c00149b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149bf:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149c7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149cb:	0f b7 d2             	movzx  edx,dx
c00149ce:	0f b7 c0             	movzx  eax,ax
c00149d1:	39 c2                	cmp    edx,eax
c00149d3:	73 6f                	jae    c0014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00149d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149dd:	89 10                	mov    DWORD PTR [eax],edx
c00149df:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149e4:	74 4e                	je     c0014a34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00149e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149ea:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149f2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149f6:	0f b7 d2             	movzx  edx,dx
c00149f9:	0f b7 c0             	movzx  eax,ax
c00149fc:	39 c2                	cmp    edx,eax
c00149fe:	0f 82 bc 02 00 00    	jb     c0014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a08:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a10:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a14:	0f b7 d2             	movzx  edx,dx
c0014a17:	0f b7 c0             	movzx  eax,ax
c0014a1a:	39 c2                	cmp    edx,eax
c0014a1c:	0f 87 9e 02 00 00    	ja     c0014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a2a:	89 10                	mov    DWORD PTR [eax],edx
c0014a2c:	e9 9b 00 00 00       	jmp    c0014acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a31:	8d 76 00             	lea    esi,[esi+0x0]
c0014a34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a3f:	e9 88 00 00 00       	jmp    c0014acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a48:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a50:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a54:	0f b7 d2             	movzx  edx,dx
c0014a57:	0f b7 c0             	movzx  eax,ax
c0014a5a:	39 c2                	cmp    edx,eax
c0014a5c:	0f 84 62 02 00 00    	je     c0014cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a66:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a6e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a72:	0f b7 d2             	movzx  edx,dx
c0014a75:	0f b7 c0             	movzx  eax,ax
c0014a78:	39 c2                	cmp    edx,eax
c0014a7a:	0f 82 48 02 00 00    	jb     c0014cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a80:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a85:	74 25                	je     c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a8b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a93:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a97:	0f b7 d2             	movzx  edx,dx
c0014a9a:	0f b7 c0             	movzx  eax,ax
c0014a9d:	39 c2                	cmp    edx,eax
c0014a9f:	74 0b                	je     c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014aa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ab2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014abe:	66 90                	xchg   ax,ax
c0014ac0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ac5:	0f 85 e5 fe ff ff    	jne    c00149b0 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014acb:	90                   	nop
c0014acc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ad1:	0f 85 95 00 00 00    	jne    c0014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014ad7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014adc:	74 62                	je     c0014b40 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae2:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ae6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aea:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014aee:	0f b7 d2             	movzx  edx,dx
c0014af1:	0f b7 c0             	movzx  eax,ax
c0014af4:	39 c2                	cmp    edx,eax
c0014af6:	76 18                	jbe    c0014b10 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014af8:	83 ec 08             	sub    esp,0x8
c0014afb:	68 3b 0d 03 c0       	push   0xc0030d3b
c0014b00:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014b05:	e8 be af 00 00       	call   c001fac8 <CPrintf>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b18:	89 10                	mov    DWORD PTR [eax],edx
c0014b1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b1e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b26:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b2a:	0f b7 d2             	movzx  edx,dx
c0014b2d:	0f b7 c0             	movzx  eax,ax
c0014b30:	39 c2                	cmp    edx,eax
c0014b32:	74 38                	je     c0014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b34:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b3c:	eb 2e                	jmp    c0014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b3e:	66 90                	xchg   ax,ax
c0014b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b47:	85 c0                	test   eax,eax
c0014b49:	74 15                	je     c0014b60 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014b4b:	83 ec 08             	sub    esp,0x8
c0014b4e:	68 7c 0d 03 c0       	push   0xc0030d7c
c0014b53:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014b58:	e8 6b af 00 00       	call   c001fac8 <CPrintf>
c0014b5d:	83 c4 10             	add    esp,0x10
c0014b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b6b:	90                   	nop
c0014b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b70:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b73:	0f b6 c0             	movzx  eax,al
c0014b76:	83 e0 01             	and    eax,0x1
c0014b79:	0f 84 39 01 00 00    	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b7f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b84:	0f 84 26 01 00 00    	je     c0014cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b94:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b98:	0f b7 c0             	movzx  eax,ax
c0014b9b:	85 c0                	test   eax,eax
c0014b9d:	74 0d                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014b9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ba7:	e9 04 01 00 00       	jmp    c0014cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bbe:	eb 44                	jmp    c0014c04 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014bc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bcf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bdb:	0f b7 d2             	movzx  edx,dx
c0014bde:	0f b7 c0             	movzx  eax,ax
c0014be1:	39 c2                	cmp    edx,eax
c0014be3:	74 0b                	je     c0014bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014be5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bed:	eb 1d                	jmp    c0014c0c <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014bef:	90                   	nop
c0014bf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c02:	66 90                	xchg   ax,ax
c0014c04:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c09:	75 b5                	jne    c0014bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014c0b:	90                   	nop
c0014c0c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014c11:	0f 84 99 00 00 00    	je     c0014cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c1e:	85 c0                	test   eax,eax
c0014c20:	75 16                	jne    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014c22:	83 ec 08             	sub    esp,0x8
c0014c25:	68 59 0d 03 c0       	push   0xc0030d59
c0014c2a:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014c2f:	e8 94 ae 00 00       	call   c001fac8 <CPrintf>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	90                   	nop
c0014c38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c42:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014c46:	75 18                	jne    c0014c60 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014c48:	83 ec 08             	sub    esp,0x8
c0014c4b:	68 59 0d 03 c0       	push   0xc0030d59
c0014c50:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014c55:	e8 6e ae 00 00       	call   c001fac8 <CPrintf>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c66:	85 c0                	test   eax,eax
c0014c68:	74 16                	je     c0014c80 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c6a:	83 ec 08             	sub    esp,0x8
c0014c6d:	68 b4 0d 03 c0       	push   0xc0030db4
c0014c72:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014c77:	e8 4c ae 00 00       	call   c001fac8 <CPrintf>
c0014c7c:	83 c4 10             	add    esp,0x10
c0014c7f:	90                   	nop
c0014c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c84:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c8c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c8f:	0f b7 d2             	movzx  edx,dx
c0014c92:	0f b7 c0             	movzx  eax,ax
c0014c95:	39 c2                	cmp    edx,eax
c0014c97:	74 17                	je     c0014cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c99:	83 ec 08             	sub    esp,0x8
c0014c9c:	68 d8 0d 03 c0       	push   0xc0030dd8
c0014ca1:	68 c6 f9 02 c0       	push   0xc002f9c6
c0014ca6:	e8 1d ae 00 00       	call   c001fac8 <CPrintf>
c0014cab:	83 c4 10             	add    esp,0x10
c0014cae:	66 90                	xchg   ax,ax
c0014cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cb4:	eb 52                	jmp    c0014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	b8 00 00 00 00       	mov    eax,0x0
c0014cbd:	eb 49                	jmp    c0014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014cbf:	90                   	nop
c0014cc0:	90                   	nop
c0014cc1:	eb 09                	jmp    c0014ccc <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014cc3:	90                   	nop
c0014cc4:	90                   	nop
c0014cc5:	eb 05                	jmp    c0014ccc <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014cc7:	90                   	nop
c0014cc8:	90                   	nop
c0014cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cd3:	e8 d0 3d ff ff       	call   c0008aa8 <pbuf_clen>
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014ce2:	0f b6 c0             	movzx  eax,al
c0014ce5:	89 d3                	mov    ebx,edx
c0014ce7:	29 c3                	sub    ebx,eax
c0014ce9:	89 d8                	mov    eax,ebx
c0014ceb:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014cf1:	83 ec 0c             	sub    esp,0xc
c0014cf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cf8:	e8 cf 35 ff ff       	call   c00082cc <pbuf_free>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	b8 00 00 00 00       	mov    eax,0x0
c0014d05:	8d 76 00             	lea    esi,[esi+0x0]
c0014d08:	83 c4 28             	add    esp,0x28
c0014d0b:	5b                   	pop    ebx
c0014d0c:	c3                   	ret    
c0014d0d:	8d 76 00             	lea    esi,[esi+0x0]

c0014d10 <ip_reass>:
c0014d10:	53                   	push   ebx
c0014d11:	83 ec 28             	sub    esp,0x28
c0014d14:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d1c:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014d22:	83 c0 01             	add    eax,0x1
c0014d25:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d3a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d3d:	0f b7 c0             	movzx  eax,ax
c0014d40:	83 ec 0c             	sub    esp,0xc
c0014d43:	50                   	push   eax
c0014d44:	e8 d3 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d49:	83 c4 10             	add    esp,0x10
c0014d4c:	0f b7 c0             	movzx  eax,ax
c0014d4f:	c1 e8 08             	shr    eax,0x8
c0014d52:	0f b7 c0             	movzx  eax,ax
c0014d55:	83 e0 0f             	and    eax,0xf
c0014d58:	c1 e0 02             	shl    eax,0x2
c0014d5b:	83 f8 14             	cmp    eax,0x14
c0014d5e:	74 14                	je     c0014d74 <ip_reass+0x64>
c0014d60:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d66:	83 c0 01             	add    eax,0x1
c0014d69:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d6f:	e9 70 03 00 00       	jmp    c00150e4 <ip_reass+0x3d4>
c0014d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d78:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d7c:	0f b7 c0             	movzx  eax,ax
c0014d7f:	83 ec 0c             	sub    esp,0xc
c0014d82:	50                   	push   eax
c0014d83:	e8 94 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d88:	83 c4 10             	add    esp,0x10
c0014d8b:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d90:	c1 e0 03             	shl    eax,0x3
c0014d93:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d9c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014da0:	0f b7 c0             	movzx  eax,ax
c0014da3:	83 ec 0c             	sub    esp,0xc
c0014da6:	50                   	push   eax
c0014da7:	e8 70 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	89 c3                	mov    ebx,eax
c0014db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014db8:	0f b7 c0             	movzx  eax,ax
c0014dbb:	83 ec 0c             	sub    esp,0xc
c0014dbe:	50                   	push   eax
c0014dbf:	e8 58 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014dc4:	83 c4 10             	add    esp,0x10
c0014dc7:	0f b7 c0             	movzx  eax,ax
c0014dca:	c1 e8 08             	shr    eax,0x8
c0014dcd:	83 e0 0f             	and    eax,0xf
c0014dd0:	c1 e0 02             	shl    eax,0x2
c0014dd3:	89 d9                	mov    ecx,ebx
c0014dd5:	29 c1                	sub    ecx,eax
c0014dd7:	89 c8                	mov    eax,ecx
c0014dd9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014dde:	83 ec 0c             	sub    esp,0xc
c0014de1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014de5:	e8 be 3c ff ff       	call   c0008aa8 <pbuf_clen>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014df1:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014df7:	0f b7 d0             	movzx  edx,ax
c0014dfa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014dff:	01 d0                	add    eax,edx
c0014e01:	83 f8 0a             	cmp    eax,0xa
c0014e04:	7e 42                	jle    c0014e48 <ip_reass+0x138>
c0014e06:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e0b:	83 ec 08             	sub    esp,0x8
c0014e0e:	50                   	push   eax
c0014e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e13:	e8 ec f8 ff ff       	call   c0014704 <ip_reass_remove_oldest_datagram>
c0014e18:	83 c4 10             	add    esp,0x10
c0014e1b:	85 c0                	test   eax,eax
c0014e1d:	74 15                	je     c0014e34 <ip_reass+0x124>
c0014e1f:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e25:	0f b7 d0             	movzx  edx,ax
c0014e28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e2d:	01 d0                	add    eax,edx
c0014e2f:	83 f8 0a             	cmp    eax,0xa
c0014e32:	7e 14                	jle    c0014e48 <ip_reass+0x138>
c0014e34:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014e3a:	83 c0 01             	add    eax,0x1
c0014e3d:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014e43:	e9 9c 02 00 00       	jmp    c00150e4 <ip_reass+0x3d4>
c0014e48:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e51:	eb 65                	jmp    c0014eb8 <ip_reass+0x1a8>
c0014e53:	90                   	nop
c0014e54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e58:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e62:	39 c2                	cmp    edx,eax
c0014e64:	75 3e                	jne    c0014ea4 <ip_reass+0x194>
c0014e66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e71:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e74:	39 c2                	cmp    edx,eax
c0014e76:	75 2c                	jne    c0014ea4 <ip_reass+0x194>
c0014e78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e7c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e83:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e87:	0f b7 d2             	movzx  edx,dx
c0014e8a:	0f b7 c0             	movzx  eax,ax
c0014e8d:	39 c2                	cmp    edx,eax
c0014e8f:	75 13                	jne    c0014ea4 <ip_reass+0x194>
c0014e91:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e97:	83 c0 01             	add    eax,0x1
c0014e9a:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014ea0:	eb 1e                	jmp    c0014ec0 <ip_reass+0x1b0>
c0014ea2:	66 90                	xchg   ax,ax
c0014ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014eb6:	66 90                	xchg   ax,ax
c0014eb8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ebd:	75 95                	jne    c0014e54 <ip_reass+0x144>
c0014ebf:	90                   	nop
c0014ec0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ec5:	75 25                	jne    c0014eec <ip_reass+0x1dc>
c0014ec7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ecc:	83 ec 08             	sub    esp,0x8
c0014ecf:	50                   	push   eax
c0014ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ed4:	e8 4b f9 ff ff       	call   c0014824 <ip_reass_enqueue_new_datagram>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ee0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ee5:	75 61                	jne    c0014f48 <ip_reass+0x238>
c0014ee7:	e9 f8 01 00 00       	jmp    c00150e4 <ip_reass+0x3d4>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 1c bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	0f b7 c0             	movzx  eax,ax
c0014f06:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f0b:	75 3b                	jne    c0014f48 <ip_reass+0x238>
c0014f0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f11:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014f15:	0f b7 c0             	movzx  eax,ax
c0014f18:	83 ec 0c             	sub    esp,0xc
c0014f1b:	50                   	push   eax
c0014f1c:	e8 fb bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	0f b7 c0             	movzx  eax,ax
c0014f27:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f2c:	74 1a                	je     c0014f48 <ip_reass+0x238>
c0014f2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f32:	83 c0 08             	add    eax,0x8
c0014f35:	83 ec 04             	sub    esp,0x4
c0014f38:	6a 14                	push   0x14
c0014f3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f3e:	50                   	push   eax
c0014f3f:	e8 36 b4 fe ff       	call   c000037a <memcpy>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	90                   	nop
c0014f48:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f4d:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f53:	01 d0                	add    eax,edx
c0014f55:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f5f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f63:	0f b7 c0             	movzx  eax,ax
c0014f66:	83 e0 20             	and    eax,0x20
c0014f69:	75 29                	jne    c0014f94 <ip_reass+0x284>
c0014f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f6f:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f72:	83 c8 01             	or     eax,0x1
c0014f75:	88 c2                	mov    dl,al
c0014f77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f7b:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f7e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f87:	01 d0                	add    eax,edx
c0014f89:	89 c2                	mov    edx,eax
c0014f8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f8f:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014f93:	90                   	nop
c0014f94:	83 ec 08             	sub    esp,0x8
c0014f97:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014f9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f9f:	e8 3c f9 ff ff       	call   c00148e0 <ip_reass_chain_frag_into_datagram_and_validate>
c0014fa4:	83 c4 10             	add    esp,0x10
c0014fa7:	85 c0                	test   eax,eax
c0014fa9:	0f 84 2d 01 00 00    	je     c00150dc <ip_reass+0x3cc>
c0014faf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fb6:	83 c0 14             	add    eax,0x14
c0014fb9:	89 c2                	mov    edx,eax
c0014fbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fbf:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014fc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe5:	83 c0 08             	add    eax,0x8
c0014fe8:	83 ec 04             	sub    esp,0x4
c0014feb:	6a 14                	push   0x14
c0014fed:	50                   	push   eax
c0014fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ff2:	e8 83 b3 fe ff       	call   c000037a <memcpy>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ffe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015001:	0f b7 c0             	movzx  eax,ax
c0015004:	83 ec 0c             	sub    esp,0xc
c0015007:	50                   	push   eax
c0015008:	e8 0f bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001500d:	83 c4 10             	add    esp,0x10
c0015010:	89 c2                	mov    edx,eax
c0015012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015016:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001501e:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015028:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c001502e:	83 ec 08             	sub    esp,0x8
c0015031:	6a 14                	push   0x14
c0015033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015037:	e8 cc e4 ff ff       	call   c0013508 <inet_chksum>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	89 c2                	mov    edx,eax
c0015041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015045:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015049:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001504d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015050:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015054:	eb 3e                	jmp    c0015094 <ip_reass+0x384>
c0015056:	66 90                	xchg   ax,ax
c0015058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001505c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001505f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015063:	83 ec 08             	sub    esp,0x8
c0015066:	6a ec                	push   0xffffffec
c0015068:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001506c:	e8 bb 30 ff ff       	call   c000812c <pbuf_header>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	83 ec 08             	sub    esp,0x8
c0015077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001507b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001507f:	e8 8c 3a ff ff       	call   c0008b10 <pbuf_cat>
c0015084:	83 c4 10             	add    esp,0x10
c0015087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001508b:	8b 00                	mov    eax,DWORD PTR [eax]
c001508d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015091:	8d 76 00             	lea    esi,[esi+0x0]
c0015094:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015099:	75 bd                	jne    c0015058 <ip_reass+0x348>
c001509b:	83 ec 08             	sub    esp,0x8
c001509e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150a6:	e8 71 f3 ff ff       	call   c001441c <ip_reass_dequeue_datagram>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	83 ec 0c             	sub    esp,0xc
c00150b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150b5:	e8 ee 39 ff ff       	call   c0008aa8 <pbuf_clen>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00150c4:	0f b6 c0             	movzx  eax,al
c00150c7:	89 d3                	mov    ebx,edx
c00150c9:	29 c3                	sub    ebx,eax
c00150cb:	89 d8                	mov    eax,ebx
c00150cd:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150d7:	eb 2f                	jmp    c0015108 <ip_reass+0x3f8>
c00150d9:	8d 76 00             	lea    esi,[esi+0x0]
c00150dc:	b8 00 00 00 00       	mov    eax,0x0
c00150e1:	eb 25                	jmp    c0015108 <ip_reass+0x3f8>
c00150e3:	90                   	nop
c00150e4:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00150ea:	83 c0 01             	add    eax,0x1
c00150ed:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150fa:	e8 cd 31 ff ff       	call   c00082cc <pbuf_free>
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	b8 00 00 00 00       	mov    eax,0x0
c0015107:	90                   	nop
c0015108:	83 c4 28             	add    esp,0x28
c001510b:	5b                   	pop    ebx
c001510c:	c3                   	ret    
c001510d:	8d 76 00             	lea    esi,[esi+0x0]

c0015110 <ip_frag_alloc_pbuf_custom_ref>:
c0015110:	83 ec 0c             	sub    esp,0xc
c0015113:	83 ec 0c             	sub    esp,0xc
c0015116:	6a 06                	push   0x6
c0015118:	e8 c3 27 ff ff       	call   c00078e0 <memp_malloc>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	83 c4 0c             	add    esp,0xc
c0015123:	c3                   	ret    

c0015124 <ip_frag_free_pbuf_custom_ref>:
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001512c:	75 16                	jne    c0015144 <ip_frag_free_pbuf_custom_ref+0x20>
c001512e:	83 ec 08             	sub    esp,0x8
c0015131:	68 f6 fd 02 c0       	push   0xc002fdf6
c0015136:	68 c6 f9 02 c0       	push   0xc002f9c6
c001513b:	e8 88 a9 00 00       	call   c001fac8 <CPrintf>
c0015140:	83 c4 10             	add    esp,0x10
c0015143:	90                   	nop
c0015144:	83 ec 08             	sub    esp,0x8
c0015147:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001514b:	6a 06                	push   0x6
c001514d:	e8 ba 28 ff ff       	call   c0007a0c <memp_free>
c0015152:	83 c4 10             	add    esp,0x10
c0015155:	90                   	nop
c0015156:	83 c4 0c             	add    esp,0xc
c0015159:	c3                   	ret    
c001515a:	66 90                	xchg   ax,ax

c001515c <ipfrag_free_pbuf_custom>:
c001515c:	83 ec 1c             	sub    esp,0x1c
c001515f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015167:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001516c:	75 16                	jne    c0015184 <ipfrag_free_pbuf_custom+0x28>
c001516e:	83 ec 08             	sub    esp,0x8
c0015171:	68 66 0d 03 c0       	push   0xc0030d66
c0015176:	68 c6 f9 02 c0       	push   0xc002f9c6
c001517b:	e8 48 a9 00 00       	call   c001fac8 <CPrintf>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	90                   	nop
c0015184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015188:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001518c:	74 16                	je     c00151a4 <ipfrag_free_pbuf_custom+0x48>
c001518e:	83 ec 08             	sub    esp,0x8
c0015191:	68 72 0d 03 c0       	push   0xc0030d72
c0015196:	68 c6 f9 02 c0       	push   0xc002f9c6
c001519b:	e8 28 a9 00 00       	call   c001fac8 <CPrintf>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	90                   	nop
c00151a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151ab:	85 c0                	test   eax,eax
c00151ad:	74 15                	je     c00151c4 <ipfrag_free_pbuf_custom+0x68>
c00151af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151b3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151b6:	83 ec 0c             	sub    esp,0xc
c00151b9:	50                   	push   eax
c00151ba:	e8 0d 31 ff ff       	call   c00082cc <pbuf_free>
c00151bf:	83 c4 10             	add    esp,0x10
c00151c2:	66 90                	xchg   ax,ax
c00151c4:	83 ec 0c             	sub    esp,0xc
c00151c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151cb:	e8 54 ff ff ff       	call   c0015124 <ip_frag_free_pbuf_custom_ref>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	90                   	nop
c00151d4:	83 c4 1c             	add    esp,0x1c
c00151d7:	c3                   	ret    

c00151d8 <ip_frag>:
c00151d8:	53                   	push   ebx
c00151d9:	83 ec 38             	sub    esp,0x38
c00151dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151e3:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00151e8:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151ef:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001520d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015211:	0f b7 c0             	movzx  eax,ax
c0015214:	83 ec 0c             	sub    esp,0xc
c0015217:	50                   	push   eax
c0015218:	e8 ff b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015225:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015229:	25 ff 1f 00 00       	and    eax,0x1fff
c001522e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015233:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015237:	25 00 20 00 00       	and    eax,0x2000
c001523c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015241:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015245:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015248:	83 e8 14             	sub    eax,0x14
c001524b:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015250:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015255:	83 e8 14             	sub    eax,0x14
c0015258:	8d 50 07             	lea    edx,[eax+0x7]
c001525b:	0f 48 c2             	cmovs  eax,edx
c001525e:	c1 f8 03             	sar    eax,0x3
c0015261:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015266:	e9 05 03 00 00       	jmp    c0015570 <ip_frag+0x398>
c001526b:	90                   	nop
c001526c:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015271:	8d 50 ed             	lea    edx,[eax-0x13]
c0015274:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015279:	39 c2                	cmp    edx,eax
c001527b:	0f 9f c0             	setg   al
c001527e:	0f b6 c0             	movzx  eax,al
c0015281:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015286:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001528a:	25 ff 1f 00 00       	and    eax,0x1fff
c001528f:	89 c2                	mov    edx,eax
c0015291:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015296:	09 d0                	or     eax,edx
c0015298:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001529d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00152a2:	85 c0                	test   eax,eax
c00152a4:	75 0e                	jne    c00152b4 <ip_frag+0xdc>
c00152a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152aa:	80 cc 20             	or     ah,0x20
c00152ad:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00152b2:	66 90                	xchg   ax,ax
c00152b4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00152b9:	85 c0                	test   eax,eax
c00152bb:	75 0b                	jne    c00152c8 <ip_frag+0xf0>
c00152bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152c1:	c1 e0 03             	shl    eax,0x3
c00152c4:	eb 0a                	jmp    c00152d0 <ip_frag+0xf8>
c00152c6:	66 90                	xchg   ax,ax
c00152c8:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00152cd:	8d 76 00             	lea    esi,[esi+0x0]
c00152d0:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00152d5:	83 ec 04             	sub    esp,0x4
c00152d8:	6a 00                	push   0x0
c00152da:	6a 14                	push   0x14
c00152dc:	6a 02                	push   0x2
c00152de:	e8 c5 31 ff ff       	call   c00084a8 <pbuf_alloc>
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152ef:	75 07                	jne    c00152f8 <ip_frag+0x120>
c00152f1:	b0 ff                	mov    al,0xff
c00152f3:	e9 88 02 00 00       	jmp    c0015580 <ip_frag+0x3a8>
c00152f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015300:	0f b7 c0             	movzx  eax,ax
c0015303:	83 f8 13             	cmp    eax,0x13
c0015306:	77 18                	ja     c0015320 <ip_frag+0x148>
c0015308:	83 ec 08             	sub    esp,0x8
c001530b:	68 08 0e 03 c0       	push   0xc0030e08
c0015310:	68 c6 f9 02 c0       	push   0xc002f9c6
c0015315:	e8 ae a7 00 00       	call   c001fac8 <CPrintf>
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	8d 76 00             	lea    esi,[esi+0x0]
c0015320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015327:	83 ec 04             	sub    esp,0x4
c001532a:	6a 14                	push   0x14
c001532c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015330:	50                   	push   eax
c0015331:	e8 44 b0 fe ff       	call   c000037a <memcpy>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001533d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015340:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015344:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001534b:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015350:	01 c2                	add    edx,eax
c0015352:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015356:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015359:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001535d:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015361:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015366:	89 d1                	mov    ecx,edx
c0015368:	29 c1                	sub    ecx,eax
c001536a:	89 c8                	mov    eax,ecx
c001536c:	89 c2                	mov    edx,eax
c001536e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015372:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001537a:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001537f:	e9 18 01 00 00       	jmp    c001549c <ip_frag+0x2c4>
c0015384:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015388:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001538c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015390:	0f b7 d8             	movzx  ebx,ax
c0015393:	0f b7 ca             	movzx  ecx,dx
c0015396:	39 cb                	cmp    ebx,ecx
c0015398:	76 02                	jbe    c001539c <ip_frag+0x1c4>
c001539a:	89 d0                	mov    eax,edx
c001539c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00153a1:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153a6:	85 c0                	test   eax,eax
c00153a8:	75 12                	jne    c00153bc <ip_frag+0x1e4>
c00153aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00153b4:	e9 e3 00 00 00       	jmp    c001549c <ip_frag+0x2c4>
c00153b9:	8d 76 00             	lea    esi,[esi+0x0]
c00153bc:	e8 4f fd ff ff       	call   c0015110 <ip_frag_alloc_pbuf_custom_ref>
c00153c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153ca:	75 18                	jne    c00153e4 <ip_frag+0x20c>
c00153cc:	83 ec 0c             	sub    esp,0xc
c00153cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153d3:	e8 f4 2e ff ff       	call   c00082cc <pbuf_free>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	b0 ff                	mov    al,0xff
c00153dd:	e9 9e 01 00 00       	jmp    c0015580 <ip_frag+0x3a8>
c00153e2:	66 90                	xchg   ax,ax
c00153e4:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00153e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153ed:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153f4:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	53                   	push   ebx
c00153fd:	51                   	push   ecx
c00153fe:	52                   	push   edx
c00153ff:	6a 02                	push   0x2
c0015401:	50                   	push   eax
c0015402:	6a 03                	push   0x3
c0015404:	e8 ff 2b ff ff       	call   c0008008 <pbuf_alloced_custom>
c0015409:	83 c4 20             	add    esp,0x20
c001540c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015410:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015415:	75 25                	jne    c001543c <ip_frag+0x264>
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001541e:	e8 01 fd ff ff       	call   c0015124 <ip_frag_free_pbuf_custom_ref>
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	83 ec 0c             	sub    esp,0xc
c0015429:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001542d:	e8 9a 2e ff ff       	call   c00082cc <pbuf_free>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	b0 ff                	mov    al,0xff
c0015437:	e9 44 01 00 00       	jmp    c0015580 <ip_frag+0x3a8>
c001543c:	83 ec 0c             	sub    esp,0xc
c001543f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015443:	e8 94 36 ff ff       	call   c0008adc <pbuf_ref>
c0015448:	83 c4 10             	add    esp,0x10
c001544b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001544f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015453:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001545a:	c7 40 10 5c 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc001515c
c0015461:	83 ec 08             	sub    esp,0x8
c0015464:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001546c:	e8 9f 36 ff ff       	call   c0008b10 <pbuf_cat>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015478:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001547d:	89 d3                	mov    ebx,edx
c001547f:	29 c3                	sub    ebx,eax
c0015481:	89 d8                	mov    eax,ebx
c0015483:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015488:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001548d:	85 c0                	test   eax,eax
c001548f:	74 0b                	je     c001549c <ip_frag+0x2c4>
c0015491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015495:	8b 00                	mov    eax,DWORD PTR [eax]
c0015497:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001549b:	90                   	nop
c001549c:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00154a1:	85 c0                	test   eax,eax
c00154a3:	0f 85 db fe ff ff    	jne    c0015384 <ip_frag+0x1ac>
c00154a9:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00154ae:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00154b3:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c00154b8:	83 ec 0c             	sub    esp,0xc
c00154bb:	50                   	push   eax
c00154bc:	e8 5b b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	89 c2                	mov    edx,eax
c00154c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154ca:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00154ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154d2:	83 c0 14             	add    eax,0x14
c00154d5:	0f b7 c0             	movzx  eax,ax
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	50                   	push   eax
c00154dc:	e8 3b b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	89 c2                	mov    edx,eax
c00154e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154ea:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00154ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154f2:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00154f8:	83 ec 08             	sub    esp,0x8
c00154fb:	6a 14                	push   0x14
c00154fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015501:	e8 02 e0 ff ff       	call   c0013508 <inet_chksum>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	89 c2                	mov    edx,eax
c001550b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001550f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015513:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015517:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001551a:	83 ec 04             	sub    esp,0x4
c001551d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015525:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015529:	ff d0                	call   eax
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c0015534:	83 c0 01             	add    eax,0x1
c0015537:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c001553d:	83 ec 0c             	sub    esp,0xc
c0015540:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015544:	e8 83 2d ff ff       	call   c00082cc <pbuf_free>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015555:	89 d1                	mov    ecx,edx
c0015557:	29 c1                	sub    ecx,eax
c0015559:	89 c8                	mov    eax,ecx
c001555b:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015564:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015568:	01 d0                	add    eax,edx
c001556a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001556f:	90                   	nop
c0015570:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015575:	85 c0                	test   eax,eax
c0015577:	0f 85 ef fc ff ff    	jne    c001526c <ip_frag+0x94>
c001557d:	b0 00                	mov    al,0x0
c001557f:	90                   	nop
c0015580:	83 c4 38             	add    esp,0x38
c0015583:	5b                   	pop    ebx
c0015584:	c3                   	ret    
c0015585:	90                   	nop

c0015586 <Computer::close(int, int, void*)>:
c0015586:	53                   	push   ebx
c0015587:	83 ec 08             	sub    esp,0x8
c001558a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001558e:	e8 c7 a3 00 00       	call   c001f95a <KeExecuteAtexit()>
c0015593:	83 ec 0c             	sub    esp,0xc
c0015596:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001559c:	50                   	push   eax
c001559d:	e8 6e 5f 00 00       	call   c001b510 <Device::closeAll()>
c00155a2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00155a8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00155ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00155ae:	51                   	push   ecx
c00155af:	68 0f 27 00 00       	push   0x270f
c00155b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155b8:	53                   	push   ebx
c00155b9:	50                   	push   eax
c00155ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155bd:	83 c4 14             	add    esp,0x14
c00155c0:	68 28 0e 03 c0       	push   0xc0030e28
c00155c5:	e8 d0 ab 00 00       	call   c002019a <KePanic(char const*)>
c00155ca:	83 c4 18             	add    esp,0x18
c00155cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155d2:	5b                   	pop    ebx
c00155d3:	c3                   	ret    

c00155d4 <Krnl::firstTask()>:
c00155d4:	53                   	push   ebx
c00155d5:	83 ec 14             	sub    esp,0x14
c00155d8:	fb                   	sti    
c00155d9:	68 3e 0e 03 c0       	push   0xc0030e3e
c00155de:	e8 56 a4 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c00155e3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00155ea:	e8 ec 0d 00 00       	call   c00163db <malloc>
c00155ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155f6:	89 c3                	mov    ebx,eax
c00155f8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00155fd:	50                   	push   eax
c00155fe:	68 57 0e 03 c0       	push   0xc0030e57
c0015603:	6a 01                	push   0x1
c0015605:	53                   	push   ebx
c0015606:	e8 15 f7 00 00       	call   c0024d20 <Process::Process(bool, char const*, Process*, char**)>
c001560b:	83 c4 20             	add    esp,0x20
c001560e:	68 ff 00 00 00       	push   0xff
c0015613:	6a 00                	push   0x0
c0015615:	68 27 5e 01 c0       	push   0xc0015e27
c001561a:	53                   	push   ebx
c001561b:	e8 28 f9 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c0015620:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c0015626:	6a 7a                	push   0x7a
c0015628:	6a 00                	push   0x0
c001562a:	68 00 58 02 c0       	push   0xc0025800
c001562f:	52                   	push   edx
c0015630:	e8 13 f9 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c0015635:	83 c4 14             	add    esp,0x14
c0015638:	68 54 0f 03 c0       	push   0xc0030f54
c001563d:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015642:	e8 f2 a3 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015647:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c001564e:	e8 fe ac 00 00       	call   c0020351 <KeInitRand()>
c0015653:	e8 3f 05 01 00       	call   c0025b97 <Vm::initialise8086()>
c0015658:	e8 97 4a 00 00       	call   c001a0f4 <Fs::initVFS()>
c001565d:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c0015664:	e8 d0 a3 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015669:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001566e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015674:	8b 10                	mov    edx,DWORD PTR [eax]
c0015676:	6a 00                	push   0x0
c0015678:	6a 00                	push   0x0
c001567a:	6a 00                	push   0x0
c001567c:	50                   	push   eax
c001567d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015680:	83 c4 14             	add    esp,0x14
c0015683:	68 54 0f 03 c0       	push   0xc0030f54
c0015688:	e8 ac a3 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001568d:	e8 fc 41 00 00       	call   c001988e <KeInitialiseSymlinks()>
c0015692:	e8 4b a9 00 00       	call   c001ffe2 <KeLoadSystemEnv()>
c0015697:	e8 c3 ab 00 00       	call   c002025f <KeSetupPowerManager()>
c001569c:	83 c4 0c             	add    esp,0xc
c001569f:	6a 3a                	push   0x3a
c00156a1:	68 7e 0e 03 c0       	push   0xc0030e7e
c00156a6:	68 87 0e 03 c0       	push   0xc0030e87
c00156ab:	e8 0a d8 00 00       	call   c0022eba <Reg::readIntWithDefault(char*, char*, int)>
c00156b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00156b3:	e8 68 56 00 00       	call   c001ad20 <User::loadClockSettings(int)>
c00156b8:	c7 04 24 78 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f78
c00156bf:	e8 75 a3 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c00156c4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00156c9:	59                   	pop    ecx
c00156ca:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00156d0:	53                   	push   ebx
c00156d1:	e8 ee 5c 00 00       	call   c001b3c4 <Device::loadDriversForAll()>
c00156d6:	c7 04 24 8f 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e8f
c00156dd:	e8 57 a3 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c00156e2:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00156e8:	58                   	pop    eax
c00156e9:	5a                   	pop    edx
c00156ea:	6a 01                	push   0x1
c00156ec:	68 a0 0e 03 c0       	push   0xc0030ea0
c00156f1:	e8 0d f0 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c00156f6:	59                   	pop    ecx
c00156f7:	5a                   	pop    edx
c00156f8:	53                   	push   ebx
c00156f9:	50                   	push   eax
c00156fa:	e8 65 f2 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c00156ff:	83 c4 10             	add    esp,0x10
c0015702:	83 ec 0c             	sub    esp,0xc
c0015705:	6a 02                	push   0x2
c0015707:	e8 44 fb 00 00       	call   c0025250 <blockTask(TaskState)>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	eb f1                	jmp    c0015702 <Krnl::firstTask()+0x12e>
c0015711:	90                   	nop

c0015712 <Computer::Computer()>:
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015719:	83 ec 08             	sub    esp,0x8
c001571c:	68 bc 0e 03 c0       	push   0xc0030ebc
c0015721:	50                   	push   eax
c0015722:	e8 e3 5c 00 00       	call   c001b40a <Device::Device(char const*)>
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	ba c4 0f 03 c0       	mov    edx,0xc0030fc4
c001572f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015733:	89 10                	mov    DWORD PTR [eax],edx
c0015735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015739:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015747:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015755:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001575b:	83 ca 04             	or     edx,0x4
c001575e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015768:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001576e:	0f b6 d0             	movzx  edx,al
c0015771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015775:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c001577c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015780:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015786:	0f b6 d0             	movzx  edx,al
c0015789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015796:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001579c:	8d 50 01             	lea    edx,[eax+0x1]
c001579f:	88 d1                	mov    cl,dl
c00157a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157a5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00157ab:	0f b6 d0             	movzx  edx,al
c00157ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157b2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00157b6:	83 e1 3f             	and    ecx,0x3f
c00157b9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00157bd:	90                   	nop
c00157be:	83 c4 0c             	add    esp,0xc
c00157c1:	c3                   	ret    

c00157c2 <Computer::setBootMessage(char const*)>:
c00157c2:	c3                   	ret    
c00157c3:	90                   	nop

c00157c4 <Computer::detectFeatures()>:
c00157c4:	55                   	push   ebp
c00157c5:	57                   	push   edi
c00157c6:	56                   	push   esi
c00157c7:	53                   	push   ebx
c00157c8:	83 ec 1c             	sub    esp,0x1c
c00157cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157cf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00157d5:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00157db:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00157e1:	e8 13 aa fe ff       	call   c00001f9 <detectCPUID>
c00157e6:	31 d2                	xor    edx,edx
c00157e8:	85 c0                	test   eax,eax
c00157ea:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157f0:	0f 95 c2             	setne  dl
c00157f3:	d1 e2                	shl    edx,1
c00157f5:	83 e0 fd             	and    eax,0xfffffffd
c00157f8:	09 d0                	or     eax,edx
c00157fa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015800:	a8 02                	test   al,0x2
c0015802:	75 51                	jne    c0015855 <Computer::detectFeatures()+0x91>
c0015804:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c001580b:	74 0f                	je     c001581c <Computer::detectFeatures()+0x58>
c001580d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015813:	83 e0 fb             	and    eax,0xfffffffb
c0015816:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001581c:	e8 95 8a 01 00       	call   c002e2b6 <x87Detect>
c0015821:	83 e0 01             	and    eax,0x1
c0015824:	c1 e0 04             	shl    eax,0x4
c0015827:	89 c2                	mov    edx,eax
c0015829:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001582f:	83 e0 ef             	and    eax,0xffffffef
c0015832:	09 d0                	or     eax,edx
c0015834:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001583a:	a8 10                	test   al,0x10
c001583c:	88 c2                	mov    dl,al
c001583e:	0f 85 33 01 00 00    	jne    c0015977 <Computer::detectFeatures()+0x1b3>
c0015844:	80 e2 80             	and    dl,0x80
c0015847:	0f 85 4c 01 00 00    	jne    c0015999 <Computer::detectFeatures()+0x1d5>
c001584d:	83 c4 1c             	add    esp,0x1c
c0015850:	5b                   	pop    ebx
c0015851:	5e                   	pop    esi
c0015852:	5f                   	pop    edi
c0015853:	5d                   	pop    ebp
c0015854:	c3                   	ret    
c0015855:	83 ec 0c             	sub    esp,0xc
c0015858:	6a 20                	push   0x20
c001585a:	e8 13 96 00 00       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001585f:	83 e0 01             	and    eax,0x1
c0015862:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015869:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001586f:	83 e0 f7             	and    eax,0xfffffff7
c0015872:	09 d0                	or     eax,edx
c0015874:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001587a:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015881:	e8 ec 95 00 00       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c0015886:	89 c2                	mov    edx,eax
c0015888:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001588e:	83 e2 01             	and    edx,0x1
c0015891:	83 e0 fe             	and    eax,0xfffffffe
c0015894:	09 d0                	or     eax,edx
c0015896:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001589c:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00158a3:	e8 ca 95 00 00       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c00158a8:	89 c2                	mov    edx,eax
c00158aa:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00158b0:	c1 e2 07             	shl    edx,0x7
c00158b3:	83 e0 7f             	and    eax,0x7f
c00158b6:	09 d0                	or     eax,edx
c00158b8:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00158be:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00158c5:	e8 a8 95 00 00       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	83 e0 01             	and    eax,0x1
c00158d0:	c1 e0 05             	shl    eax,0x5
c00158d3:	89 c2                	mov    edx,eax
c00158d5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158db:	83 e0 df             	and    eax,0xffffffdf
c00158de:	09 d0                	or     eax,edx
c00158e0:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00158ea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f0:	0f 84 c9 00 00 00    	je     c00159bf <Computer::detectFeatures()+0x1fb>
c00158f6:	83 e0 fe             	and    eax,0xfffffffe
c00158f9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158ff:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015905:	89 c2                	mov    edx,eax
c0015907:	83 e2 09             	and    edx,0x9
c001590a:	83 fa 01             	cmp    edx,0x1
c001590d:	75 09                	jne    c0015918 <Computer::detectFeatures()+0x154>
c001590f:	83 e0 fe             	and    eax,0xfffffffe
c0015912:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015918:	83 ec 0c             	sub    esp,0xc
c001591b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001591f:	50                   	push   eax
c0015920:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015924:	55                   	push   ebp
c0015925:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015929:	57                   	push   edi
c001592a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001592e:	56                   	push   esi
c001592f:	68 00 00 00 80       	push   0x80000000
c0015934:	e8 b5 94 00 00       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015939:	83 c4 20             	add    esp,0x20
c001593c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015943:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015947:	0f 86 b7 fe ff ff    	jbe    c0015804 <Computer::detectFeatures()+0x40>
c001594d:	83 ec 0c             	sub    esp,0xc
c0015950:	50                   	push   eax
c0015951:	55                   	push   ebp
c0015952:	57                   	push   edi
c0015953:	56                   	push   esi
c0015954:	68 01 00 00 80       	push   0x80000001
c0015959:	e8 90 94 00 00       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001595e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015964:	83 c4 20             	add    esp,0x20
c0015967:	25 bf ff fc ff       	and    eax,0xfffcffbf
c001596c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015972:	e9 8d fe ff ff       	jmp    c0015804 <Computer::detectFeatures()+0x40>
c0015977:	e8 f4 88 01 00       	call   c002e270 <sseDetect>
c001597c:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015982:	83 e2 7f             	and    edx,0x7f
c0015985:	c1 e0 07             	shl    eax,0x7
c0015988:	09 c2                	or     edx,eax
c001598a:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015990:	80 e2 80             	and    dl,0x80
c0015993:	0f 84 b4 fe ff ff    	je     c001584d <Computer::detectFeatures()+0x89>
c0015999:	e8 62 85 01 00       	call   c002df00 <avxDetect>
c001599e:	83 e0 01             	and    eax,0x1
c00159a1:	c1 e0 05             	shl    eax,0x5
c00159a4:	89 c2                	mov    edx,eax
c00159a6:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00159ac:	83 e0 df             	and    eax,0xffffffdf
c00159af:	09 d0                	or     eax,edx
c00159b1:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00159b7:	83 c4 1c             	add    esp,0x1c
c00159ba:	5b                   	pop    ebx
c00159bb:	5e                   	pop    esi
c00159bc:	5f                   	pop    edi
c00159bd:	5d                   	pop    ebp
c00159be:	c3                   	ret    
c00159bf:	83 ec 0c             	sub    esp,0xc
c00159c2:	68 00 02 00 00       	push   0x200
c00159c7:	e8 a6 94 00 00       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c00159cc:	83 c4 10             	add    esp,0x10
c00159cf:	89 c2                	mov    edx,eax
c00159d1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159d7:	83 e2 01             	and    edx,0x1
c00159da:	83 e0 fe             	and    eax,0xfffffffe
c00159dd:	09 d0                	or     eax,edx
c00159df:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159e5:	e9 15 ff ff ff       	jmp    c00158ff <Computer::detectFeatures()+0x13b>

c00159ea <Computer::displayFeatures()>:
c00159ea:	c3                   	ret    
c00159eb:	90                   	nop

c00159ec <Computer::rdmsr(unsigned int)>:
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159fa:	74 0a                	je     c0015a06 <Computer::rdmsr(unsigned int)+0x1a>
c00159fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a00:	0f 32                	rdmsr  
c0015a02:	83 c4 0c             	add    esp,0xc
c0015a05:	c3                   	ret    
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	68 c5 0e 03 c0       	push   0xc0030ec5
c0015a0e:	e8 87 a7 00 00       	call   c002019a <KePanic(char const*)>
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	eb e4                	jmp    c00159fc <Computer::rdmsr(unsigned int)+0x10>

c0015a18 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015a18:	57                   	push   edi
c0015a19:	56                   	push   esi
c0015a1a:	83 ec 04             	sub    esp,0x4
c0015a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015a25:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015a29:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a30:	74 10                	je     c0015a42 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015a32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a36:	89 f0                	mov    eax,esi
c0015a38:	89 fa                	mov    edx,edi
c0015a3a:	0f 30                	wrmsr  
c0015a3c:	83 c4 04             	add    esp,0x4
c0015a3f:	5e                   	pop    esi
c0015a40:	5f                   	pop    edi
c0015a41:	c3                   	ret    
c0015a42:	83 ec 0c             	sub    esp,0xc
c0015a45:	68 cb 0e 03 c0       	push   0xc0030ecb
c0015a4a:	e8 4b a7 00 00       	call   c002019a <KePanic(char const*)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	eb de                	jmp    c0015a32 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a54 <Computer::shutdown()>:
c0015a54:	83 ec 0c             	sub    esp,0xc
c0015a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a5d:	6a 00                	push   0x0
c0015a5f:	6a 00                	push   0x0
c0015a61:	6a 00                	push   0x0
c0015a63:	50                   	push   eax
c0015a64:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a67:	83 c4 1c             	add    esp,0x1c
c0015a6a:	c3                   	ret    
c0015a6b:	90                   	nop

c0015a6c <Computer::restart()>:
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a75:	6a 00                	push   0x0
c0015a77:	6a 00                	push   0x0
c0015a79:	6a 01                	push   0x1
c0015a7b:	50                   	push   eax
c0015a7c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a7f:	83 c4 1c             	add    esp,0x1c
c0015a82:	c3                   	ret    
c0015a83:	90                   	nop

c0015a84 <Computer::sleep()>:
c0015a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a88:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a92:	e9 ad 8e 00 00       	jmp    c001e944 <ACPI::sleep()>
c0015a97:	90                   	nop

c0015a98 <Computer::nmiEnabled()>:
c0015a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a9c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015aa2:	c3                   	ret    
c0015aa3:	90                   	nop

c0015aa4 <Computer::readCMOS(unsigned char)>:
c0015aa4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015aa8:	31 d2                	xor    edx,edx
c0015aaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015aae:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015ab5:	75 02                	jne    c0015ab9 <Computer::readCMOS(unsigned char)+0x15>
c0015ab7:	b2 80                	mov    dl,0x80
c0015ab9:	09 d0                	or     eax,edx
c0015abb:	e6 70                	out    0x70,al
c0015abd:	e4 71                	in     al,0x71
c0015abf:	c3                   	ret    

c0015ac0 <Computer::enableNMI(bool)>:
c0015ac0:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ac8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015ace:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015ad6:	eb cc                	jmp    c0015aa4 <Computer::readCMOS(unsigned char)>

c0015ad8 <Computer::open(int, int, void*)>:
c0015ad8:	56                   	push   esi
c0015ad9:	53                   	push   ebx
c0015ada:	83 ec 10             	sub    esp,0x10
c0015add:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ae8:	68 d1 0e 03 c0       	push   0xc0030ed1
c0015aed:	0f 94 05 a0 3a 03 c0 	sete   BYTE PTR ds:0xc0033aa0
c0015af4:	e8 40 9f 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015af9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015b00:	e8 d6 08 00 00       	call   c00163db <malloc>
c0015b05:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b08:	89 c6                	mov    esi,eax
c0015b0a:	e8 a9 89 00 00       	call   c001e4b8 <ACPI::ACPI()>
c0015b0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015b15:	58                   	pop    eax
c0015b16:	5a                   	pop    edx
c0015b17:	56                   	push   esi
c0015b18:	53                   	push   ebx
c0015b19:	e8 8a 57 00 00       	call   c001b2a8 <Device::addChild(Device*)>
c0015b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b21:	e8 9e fc ff ff       	call   c00157c4 <Computer::detectFeatures()>
c0015b26:	59                   	pop    ecx
c0015b27:	5e                   	pop    esi
c0015b28:	6a 01                	push   0x1
c0015b2a:	53                   	push   ebx
c0015b2b:	e8 90 ff ff ff       	call   c0015ac0 <Computer::enableNMI(bool)>
c0015b30:	c7 04 24 e9 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ee9
c0015b37:	e8 fd 9e 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015b3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015b43:	e8 93 08 00 00       	call   c00163db <malloc>
c0015b48:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b4b:	89 c6                	mov    esi,eax
c0015b4d:	e8 d8 93 00 00       	call   c001ef2a <CPU::CPU()>
c0015b52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b58:	58                   	pop    eax
c0015b59:	5a                   	pop    edx
c0015b5a:	56                   	push   esi
c0015b5b:	53                   	push   ebx
c0015b5c:	e8 47 57 00 00       	call   c001b2a8 <Device::addChild(Device*)>
c0015b61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b6d:	51                   	push   ecx
c0015b6e:	6a 00                	push   0x0
c0015b70:	6a 00                	push   0x0
c0015b72:	50                   	push   eax
c0015b73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b76:	83 c4 14             	add    esp,0x14
c0015b79:	68 98 0f 03 c0       	push   0xc0030f98
c0015b7e:	e8 b6 9e 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015b83:	e8 56 12 01 00       	call   c0026dde <HalInitialiseCoprocessor()>
c0015b88:	c7 04 24 03 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f03
c0015b8f:	e8 a5 9e 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c0015b94:	c7 04 24 d4 55 01 c0 	mov    DWORD PTR [esp],0xc00155d4
c0015b9b:	e8 d0 f4 00 00       	call   c0025070 <setupMultitasking(void (*)())>
c0015ba0:	83 c4 14             	add    esp,0x14
c0015ba3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ba8:	5b                   	pop    ebx
c0015ba9:	5e                   	pop    esi
c0015baa:	c3                   	ret    
c0015bab:	90                   	nop

c0015bac <Computer::disableNMI()>:
c0015bac:	6a 00                	push   0x0
c0015bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bb2:	50                   	push   eax
c0015bb3:	e8 08 ff ff ff       	call   c0015ac0 <Computer::enableNMI(bool)>
c0015bb8:	5a                   	pop    edx
c0015bb9:	59                   	pop    ecx
c0015bba:	c3                   	ret    
c0015bbb:	90                   	nop

c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015bbc:	53                   	push   ebx
c0015bbd:	b2 80                	mov    dl,0x80
c0015bbf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bcb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015bd2:	74 02                	je     c0015bd6 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015bd4:	31 d2                	xor    edx,edx
c0015bd6:	09 d0                	or     eax,edx
c0015bd8:	e6 70                	out    0x70,al
c0015bda:	88 c8                	mov    al,cl
c0015bdc:	e6 71                	out    0x71,al
c0015bde:	5b                   	pop    ebx
c0015bdf:	c3                   	ret    

c0015be0 <Computer::handleNMI()>:
c0015be0:	56                   	push   esi
c0015be1:	53                   	push   ebx
c0015be2:	83 ec 10             	sub    esp,0x10
c0015be5:	e4 92                	in     al,0x92
c0015be7:	89 c6                	mov    esi,eax
c0015be9:	e4 61                	in     al,0x61
c0015beb:	68 1e 0f 03 c0       	push   0xc0030f1e
c0015bf0:	88 c3                	mov    bl,al
c0015bf2:	e8 1b 36 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	83 e6 10             	and    esi,0x10
c0015bfd:	75 10                	jne    c0015c0f <Computer::handleNMI()+0x2f>
c0015bff:	f6 c3 40             	test   bl,0x40
c0015c02:	75 20                	jne    c0015c24 <Computer::handleNMI()+0x44>
c0015c04:	80 e3 80             	and    bl,0x80
c0015c07:	75 30                	jne    c0015c39 <Computer::handleNMI()+0x59>
c0015c09:	83 c4 04             	add    esp,0x4
c0015c0c:	5b                   	pop    ebx
c0015c0d:	5e                   	pop    esi
c0015c0e:	c3                   	ret    
c0015c0f:	83 ec 0c             	sub    esp,0xc
c0015c12:	68 2f 0f 03 c0       	push   0xc0030f2f
c0015c17:	e8 7e a5 00 00       	call   c002019a <KePanic(char const*)>
c0015c1c:	83 c4 10             	add    esp,0x10
c0015c1f:	f6 c3 40             	test   bl,0x40
c0015c22:	74 e0                	je     c0015c04 <Computer::handleNMI()+0x24>
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	68 3c 0f 03 c0       	push   0xc0030f3c
c0015c2c:	e8 69 a5 00 00       	call   c002019a <KePanic(char const*)>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	80 e3 80             	and    bl,0x80
c0015c37:	74 d0                	je     c0015c09 <Computer::handleNMI()+0x29>
c0015c39:	c7 44 24 10 46 0f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030f46
c0015c41:	83 c4 04             	add    esp,0x4
c0015c44:	5b                   	pop    ebx
c0015c45:	5e                   	pop    esi
c0015c46:	e9 4f a5 00 00       	jmp    c002019a <KePanic(char const*)>
c0015c4b:	90                   	nop

c0015c4c <GDTEntry::setBase(unsigned int)>:
c0015c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c54:	89 c1                	mov    ecx,eax
c0015c56:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c5a:	c1 e9 10             	shr    ecx,0x10
c0015c5d:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c60:	c1 e8 18             	shr    eax,0x18
c0015c63:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c66:	c3                   	ret    
c0015c67:	90                   	nop

c0015c68 <GDTEntry::setLimit(unsigned int)>:
c0015c68:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c70:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c73:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c76:	c1 e8 10             	shr    eax,0x10
c0015c79:	83 e0 0f             	and    eax,0xf
c0015c7c:	83 e2 f0             	and    edx,0xfffffff0
c0015c7f:	09 d0                	or     eax,edx
c0015c81:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c84:	c3                   	ret    
c0015c85:	90                   	nop

c0015c86 <GDT::GDT()>:
c0015c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c9a:	90                   	nop
c0015c9b:	c3                   	ret    

c0015c9c <GDT::addEntry(GDTEntry)>:
c0015c9c:	53                   	push   ebx
c0015c9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ca9:	8b 02                	mov    eax,DWORD PTR [edx]
c0015cab:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015caf:	8d 48 01             	lea    ecx,[eax+0x1]
c0015cb2:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015cb6:	c1 e0 03             	shl    eax,0x3
c0015cb9:	89 0a                	mov    DWORD PTR [edx],ecx
c0015cbb:	5b                   	pop    ebx
c0015cbc:	c3                   	ret    
c0015cbd:	90                   	nop

c0015cbe <GDT::getNumberOfEntries()>:
c0015cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc4:	c3                   	ret    
c0015cc5:	90                   	nop

c0015cc6 <GDT::flush()>:
c0015cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cca:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ccc:	83 c0 04             	add    eax,0x4
c0015ccf:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015cd4:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015cdb:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015ce2:	e9 73 a6 fe ff       	jmp    c000035a <loadGDT>
c0015ce7:	90                   	nop

c0015ce8 <GDT::setup()>:
c0015ce8:	57                   	push   edi
c0015ce9:	56                   	push   esi
c0015cea:	53                   	push   ebx
c0015ceb:	83 ec 30             	sub    esp,0x30
c0015cee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015cf2:	6a 00                	push   0x0
c0015cf4:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015cf8:	56                   	push   esi
c0015cf9:	e8 4e ff ff ff       	call   c0015c4c <GDTEntry::setBase(unsigned int)>
c0015cfe:	6a 00                	push   0x0
c0015d00:	56                   	push   esi
c0015d01:	e8 62 ff ff ff       	call   c0015c68 <GDTEntry::setLimit(unsigned int)>
c0015d06:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015d0e:	6a 00                	push   0x0
c0015d10:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015d14:	56                   	push   esi
c0015d15:	e8 32 ff ff ff       	call   c0015c4c <GDTEntry::setBase(unsigned int)>
c0015d1a:	68 ff ff ff 00       	push   0xffffff
c0015d1f:	56                   	push   esi
c0015d20:	e8 43 ff ff ff       	call   c0015c68 <GDTEntry::setLimit(unsigned int)>
c0015d25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d29:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015d2d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015d32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d36:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015d3b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d3f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015d43:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015d47:	89 f8                	mov    eax,edi
c0015d49:	89 fa                	mov    edx,edi
c0015d4b:	80 e4 f7             	and    ah,0xf7
c0015d4e:	80 ce 60             	or     dh,0x60
c0015d51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d55:	89 c7                	mov    edi,eax
c0015d57:	80 cc 60             	or     ah,0x60
c0015d5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d66:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d6a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d6e:	83 c4 20             	add    esp,0x20
c0015d71:	6a 00                	push   0x0
c0015d73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d77:	50                   	push   eax
c0015d78:	e8 cf fe ff ff       	call   c0015c4c <GDTEntry::setBase(unsigned int)>
c0015d7d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d81:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d85:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d89:	83 e0 3f             	and    eax,0x3f
c0015d8c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d90:	6a 00                	push   0x0
c0015d92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d96:	50                   	push   eax
c0015d97:	e8 b0 fe ff ff       	call   c0015c4c <GDTEntry::setBase(unsigned int)>
c0015d9c:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015da0:	83 e0 3f             	and    eax,0x3f
c0015da3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015da7:	83 c4 0c             	add    esp,0xc
c0015daa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015dae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015db2:	53                   	push   ebx
c0015db3:	e8 e4 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015db8:	83 c4 0c             	add    esp,0xc
c0015dbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015dbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015dc3:	53                   	push   ebx
c0015dc4:	e8 d3 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015dc9:	83 c4 0c             	add    esp,0xc
c0015dcc:	57                   	push   edi
c0015dcd:	56                   	push   esi
c0015dce:	53                   	push   ebx
c0015dcf:	e8 c8 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015dd4:	83 c4 0c             	add    esp,0xc
c0015dd7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015ddb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015ddf:	53                   	push   ebx
c0015de0:	e8 b7 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015de5:	83 c4 0c             	add    esp,0xc
c0015de8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015df0:	53                   	push   ebx
c0015df1:	e8 a6 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015df6:	83 c4 0c             	add    esp,0xc
c0015df9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e01:	53                   	push   ebx
c0015e02:	e8 95 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015e07:	83 c4 0c             	add    esp,0xc
c0015e0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e12:	53                   	push   ebx
c0015e13:	e8 84 fe ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c0015e18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e1b:	e8 a6 fe ff ff       	call   c0015cc6 <GDT::flush()>
c0015e20:	83 c4 40             	add    esp,0x40
c0015e23:	5b                   	pop    ebx
c0015e24:	5e                   	pop    esi
c0015e25:	5f                   	pop    edi
c0015e26:	c3                   	ret    

c0015e27 <idleFunction(void*)>:
c0015e27:	83 ec 0c             	sub    esp,0xc
c0015e2a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015e2f:	48                   	dec    eax
c0015e30:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015e35:	75 01                	jne    c0015e38 <idleFunction(void*)+0x11>
c0015e37:	fb                   	sti    
c0015e38:	e8 6d 0c 01 00       	call   c0026aaa <HalSystemIdle()>
c0015e3d:	e8 30 8a 01 00       	call   c002e872 <idleCommon()>
c0015e42:	eb f4                	jmp    c0015e38 <idleFunction(void*)+0x11>

c0015e44 <IDTEntry::IDTEntry(bool)>:
c0015e44:	53                   	push   ebx
c0015e45:	83 ec 04             	sub    esp,0x4
c0015e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e4c:	88 04 24             	mov    BYTE PTR [esp],al
c0015e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e53:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e5d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e65:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e68:	83 e2 f0             	and    edx,0xfffffff0
c0015e6b:	83 ca 0e             	or     edx,0xe
c0015e6e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e75:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e78:	83 e2 ef             	and    edx,0xffffffef
c0015e7b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e7e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e82:	85 c0                	test   eax,eax
c0015e84:	74 06                	je     c0015e8c <IDTEntry::IDTEntry(bool)+0x48>
c0015e86:	b2 03                	mov    dl,0x3
c0015e88:	eb 06                	jmp    c0015e90 <IDTEntry::IDTEntry(bool)+0x4c>
c0015e8a:	66 90                	xchg   ax,ax
c0015e8c:	b2 00                	mov    dl,0x0
c0015e8e:	66 90                	xchg   ax,ax
c0015e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e94:	83 e2 03             	and    edx,0x3
c0015e97:	89 d3                	mov    ebx,edx
c0015e99:	c1 e3 05             	shl    ebx,0x5
c0015e9c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e9f:	83 e2 9f             	and    edx,0xffffff9f
c0015ea2:	88 d1                	mov    cl,dl
c0015ea4:	88 da                	mov    dl,bl
c0015ea6:	09 ca                	or     edx,ecx
c0015ea8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015eaf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015eb2:	83 ca 80             	or     edx,0xffffff80
c0015eb5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015eb8:	90                   	nop
c0015eb9:	83 c4 04             	add    esp,0x4
c0015ebc:	5b                   	pop    ebx
c0015ebd:	c3                   	ret    

c0015ebe <IDTEntry::setOffset(unsigned int)>:
c0015ebe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec6:	66 89 02             	mov    WORD PTR [edx],ax
c0015ec9:	c1 e8 10             	shr    eax,0x10
c0015ecc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015ed0:	c3                   	ret    
c0015ed1:	90                   	nop
c0015ed2:	66 90                	xchg   ax,ax

c0015ed4 <IDT::IDT()>:
c0015ed4:	90                   	nop
c0015ed5:	c3                   	ret    

c0015ed6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eda:	83 c0 30             	add    eax,0x30
c0015edd:	c3                   	ret    

c0015ede <IDT::addEntry(IDTEntry, int)>:
c0015ede:	53                   	push   ebx
c0015edf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ee7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015eef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015ef2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015ef6:	5b                   	pop    ebx
c0015ef7:	c3                   	ret    

c0015ef8 <IDT::addEntry(int, void (*)(), bool)>:
c0015ef8:	53                   	push   ebx
c0015ef9:	83 ec 10             	sub    esp,0x10
c0015efc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015f01:	50                   	push   eax
c0015f02:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015f06:	53                   	push   ebx
c0015f07:	e8 38 ff ff ff       	call   c0015e44 <IDTEntry::IDTEntry(bool)>
c0015f0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f10:	53                   	push   ebx
c0015f11:	e8 a8 ff ff ff       	call   c0015ebe <IDTEntry::setOffset(unsigned int)>
c0015f16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f26:	e8 b3 ff ff ff       	call   c0015ede <IDT::addEntry(IDTEntry, int)>
c0015f2b:	83 c4 30             	add    esp,0x30
c0015f2e:	5b                   	pop    ebx
c0015f2f:	c3                   	ret    

c0015f30 <IDT::flush()>:
c0015f30:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015f39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f3d:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015f42:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015f49:	c3                   	ret    

c0015f4a <IDT::setup()>:
c0015f4a:	57                   	push   edi
c0015f4b:	56                   	push   esi
c0015f4c:	53                   	push   ebx
c0015f4d:	83 ec 10             	sub    esp,0x10
c0015f50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f54:	6a 00                	push   0x0
c0015f56:	68 70 df 02 c0       	push   0xc002df70
c0015f5b:	6a 00                	push   0x0
c0015f5d:	53                   	push   ebx
c0015f5e:	e8 95 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015f63:	6a 00                	push   0x0
c0015f65:	68 80 df 02 c0       	push   0xc002df80
c0015f6a:	6a 01                	push   0x1
c0015f6c:	53                   	push   ebx
c0015f6d:	e8 86 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015f72:	83 c4 20             	add    esp,0x20
c0015f75:	6a 00                	push   0x0
c0015f77:	68 8a df 02 c0       	push   0xc002df8a
c0015f7c:	6a 02                	push   0x2
c0015f7e:	53                   	push   ebx
c0015f7f:	e8 74 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015f84:	6a 00                	push   0x0
c0015f86:	68 94 df 02 c0       	push   0xc002df94
c0015f8b:	6a 03                	push   0x3
c0015f8d:	53                   	push   ebx
c0015f8e:	e8 65 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015f93:	83 c4 20             	add    esp,0x20
c0015f96:	6a 00                	push   0x0
c0015f98:	68 9e df 02 c0       	push   0xc002df9e
c0015f9d:	6a 04                	push   0x4
c0015f9f:	53                   	push   ebx
c0015fa0:	e8 53 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015fa5:	6a 00                	push   0x0
c0015fa7:	68 a8 df 02 c0       	push   0xc002dfa8
c0015fac:	6a 05                	push   0x5
c0015fae:	53                   	push   ebx
c0015faf:	e8 44 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015fb4:	83 c4 20             	add    esp,0x20
c0015fb7:	6a 00                	push   0x0
c0015fb9:	68 b2 df 02 c0       	push   0xc002dfb2
c0015fbe:	6a 06                	push   0x6
c0015fc0:	53                   	push   ebx
c0015fc1:	e8 32 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015fc6:	6a 00                	push   0x0
c0015fc8:	68 bc df 02 c0       	push   0xc002dfbc
c0015fcd:	6a 07                	push   0x7
c0015fcf:	53                   	push   ebx
c0015fd0:	e8 23 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015fd5:	83 c4 20             	add    esp,0x20
c0015fd8:	6a 00                	push   0x0
c0015fda:	68 c6 df 02 c0       	push   0xc002dfc6
c0015fdf:	6a 08                	push   0x8
c0015fe1:	53                   	push   ebx
c0015fe2:	e8 11 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015fe7:	6a 00                	push   0x0
c0015fe9:	68 ce df 02 c0       	push   0xc002dfce
c0015fee:	6a 09                	push   0x9
c0015ff0:	53                   	push   ebx
c0015ff1:	e8 02 ff ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0015ff6:	83 c4 20             	add    esp,0x20
c0015ff9:	6a 00                	push   0x0
c0015ffb:	68 d8 df 02 c0       	push   0xc002dfd8
c0016000:	6a 0a                	push   0xa
c0016002:	53                   	push   ebx
c0016003:	e8 f0 fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016008:	6a 00                	push   0x0
c001600a:	68 e0 df 02 c0       	push   0xc002dfe0
c001600f:	6a 0b                	push   0xb
c0016011:	53                   	push   ebx
c0016012:	e8 e1 fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016017:	83 c4 20             	add    esp,0x20
c001601a:	6a 00                	push   0x0
c001601c:	68 e8 df 02 c0       	push   0xc002dfe8
c0016021:	6a 0c                	push   0xc
c0016023:	53                   	push   ebx
c0016024:	e8 cf fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016029:	6a 00                	push   0x0
c001602b:	68 f0 df 02 c0       	push   0xc002dff0
c0016030:	6a 0d                	push   0xd
c0016032:	53                   	push   ebx
c0016033:	e8 c0 fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016038:	83 c4 20             	add    esp,0x20
c001603b:	6a 00                	push   0x0
c001603d:	68 0a e0 02 c0       	push   0xc002e00a
c0016042:	6a 0e                	push   0xe
c0016044:	53                   	push   ebx
c0016045:	e8 ae fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001604a:	6a 00                	push   0x0
c001604c:	68 12 e0 02 c0       	push   0xc002e012
c0016051:	6a 0f                	push   0xf
c0016053:	53                   	push   ebx
c0016054:	e8 9f fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016059:	83 c4 20             	add    esp,0x20
c001605c:	6a 00                	push   0x0
c001605e:	68 1c e0 02 c0       	push   0xc002e01c
c0016063:	6a 10                	push   0x10
c0016065:	53                   	push   ebx
c0016066:	e8 8d fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001606b:	6a 00                	push   0x0
c001606d:	68 26 e0 02 c0       	push   0xc002e026
c0016072:	6a 11                	push   0x11
c0016074:	53                   	push   ebx
c0016075:	e8 7e fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001607a:	83 c4 20             	add    esp,0x20
c001607d:	6a 00                	push   0x0
c001607f:	68 30 e0 02 c0       	push   0xc002e030
c0016084:	6a 12                	push   0x12
c0016086:	53                   	push   ebx
c0016087:	e8 6c fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001608c:	6a 01                	push   0x1
c001608e:	68 ca e0 02 c0       	push   0xc002e0ca
c0016093:	6a 60                	push   0x60
c0016095:	53                   	push   ebx
c0016096:	e8 5d fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001609b:	83 c4 20             	add    esp,0x20
c001609e:	6a 00                	push   0x0
c00160a0:	68 d1 e0 02 c0       	push   0xc002e0d1
c00160a5:	6a 20                	push   0x20
c00160a7:	53                   	push   ebx
c00160a8:	e8 4b fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160ad:	6a 00                	push   0x0
c00160af:	68 bc e0 02 c0       	push   0xc002e0bc
c00160b4:	6a 21                	push   0x21
c00160b6:	53                   	push   ebx
c00160b7:	e8 3c fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160bc:	83 c4 20             	add    esp,0x20
c00160bf:	6a 00                	push   0x0
c00160c1:	68 c3 e0 02 c0       	push   0xc002e0c3
c00160c6:	6a 22                	push   0x22
c00160c8:	53                   	push   ebx
c00160c9:	e8 2a fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160ce:	6a 00                	push   0x0
c00160d0:	68 3a e0 02 c0       	push   0xc002e03a
c00160d5:	6a 23                	push   0x23
c00160d7:	53                   	push   ebx
c00160d8:	e8 1b fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160dd:	83 c4 20             	add    esp,0x20
c00160e0:	6a 00                	push   0x0
c00160e2:	68 44 e0 02 c0       	push   0xc002e044
c00160e7:	6a 24                	push   0x24
c00160e9:	53                   	push   ebx
c00160ea:	e8 09 fe ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160ef:	6a 00                	push   0x0
c00160f1:	68 4e e0 02 c0       	push   0xc002e04e
c00160f6:	6a 25                	push   0x25
c00160f8:	53                   	push   ebx
c00160f9:	e8 fa fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00160fe:	83 c4 20             	add    esp,0x20
c0016101:	6a 00                	push   0x0
c0016103:	68 58 e0 02 c0       	push   0xc002e058
c0016108:	6a 26                	push   0x26
c001610a:	53                   	push   ebx
c001610b:	e8 e8 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016110:	6a 00                	push   0x0
c0016112:	68 62 e0 02 c0       	push   0xc002e062
c0016117:	6a 27                	push   0x27
c0016119:	53                   	push   ebx
c001611a:	e8 d9 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c001611f:	83 c4 20             	add    esp,0x20
c0016122:	6a 00                	push   0x0
c0016124:	68 6c e0 02 c0       	push   0xc002e06c
c0016129:	6a 28                	push   0x28
c001612b:	53                   	push   ebx
c001612c:	e8 c7 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016131:	6a 00                	push   0x0
c0016133:	68 76 e0 02 c0       	push   0xc002e076
c0016138:	6a 29                	push   0x29
c001613a:	53                   	push   ebx
c001613b:	e8 b8 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016140:	83 c4 20             	add    esp,0x20
c0016143:	6a 00                	push   0x0
c0016145:	68 80 e0 02 c0       	push   0xc002e080
c001614a:	6a 2a                	push   0x2a
c001614c:	53                   	push   ebx
c001614d:	e8 a6 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016152:	6a 00                	push   0x0
c0016154:	68 8a e0 02 c0       	push   0xc002e08a
c0016159:	6a 2b                	push   0x2b
c001615b:	53                   	push   ebx
c001615c:	e8 97 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016161:	83 c4 20             	add    esp,0x20
c0016164:	6a 00                	push   0x0
c0016166:	68 94 e0 02 c0       	push   0xc002e094
c001616b:	6a 2c                	push   0x2c
c001616d:	53                   	push   ebx
c001616e:	e8 85 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016173:	6a 00                	push   0x0
c0016175:	68 9e e0 02 c0       	push   0xc002e09e
c001617a:	6a 2d                	push   0x2d
c001617c:	53                   	push   ebx
c001617d:	e8 76 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016182:	83 c4 20             	add    esp,0x20
c0016185:	6a 00                	push   0x0
c0016187:	68 a8 e0 02 c0       	push   0xc002e0a8
c001618c:	6a 2e                	push   0x2e
c001618e:	53                   	push   ebx
c001618f:	e8 64 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016194:	6a 00                	push   0x0
c0016196:	68 b2 e0 02 c0       	push   0xc002e0b2
c001619b:	6a 2f                	push   0x2f
c001619d:	53                   	push   ebx
c001619e:	e8 55 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161a3:	83 c4 20             	add    esp,0x20
c00161a6:	6a 00                	push   0x0
c00161a8:	68 0c e2 02 c0       	push   0xc002e20c
c00161ad:	6a 30                	push   0x30
c00161af:	53                   	push   ebx
c00161b0:	e8 43 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161b5:	6a 00                	push   0x0
c00161b7:	68 16 e2 02 c0       	push   0xc002e216
c00161bc:	6a 31                	push   0x31
c00161be:	53                   	push   ebx
c00161bf:	e8 34 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161c4:	83 c4 20             	add    esp,0x20
c00161c7:	6a 00                	push   0x0
c00161c9:	68 20 e2 02 c0       	push   0xc002e220
c00161ce:	6a 32                	push   0x32
c00161d0:	53                   	push   ebx
c00161d1:	e8 22 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161d6:	6a 00                	push   0x0
c00161d8:	68 2a e2 02 c0       	push   0xc002e22a
c00161dd:	6a 33                	push   0x33
c00161df:	53                   	push   ebx
c00161e0:	e8 13 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161e5:	83 c4 20             	add    esp,0x20
c00161e8:	6a 00                	push   0x0
c00161ea:	68 34 e2 02 c0       	push   0xc002e234
c00161ef:	6a 34                	push   0x34
c00161f1:	53                   	push   ebx
c00161f2:	e8 01 fd ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c00161f7:	6a 00                	push   0x0
c00161f9:	68 3e e2 02 c0       	push   0xc002e23e
c00161fe:	6a 35                	push   0x35
c0016200:	53                   	push   ebx
c0016201:	e8 f2 fc ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016206:	83 c4 20             	add    esp,0x20
c0016209:	6a 00                	push   0x0
c001620b:	68 48 e2 02 c0       	push   0xc002e248
c0016210:	6a 36                	push   0x36
c0016212:	53                   	push   ebx
c0016213:	e8 e0 fc ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016218:	6a 00                	push   0x0
c001621a:	68 52 e2 02 c0       	push   0xc002e252
c001621f:	6a 37                	push   0x37
c0016221:	53                   	push   ebx
c0016222:	e8 d1 fc ff ff       	call   c0015ef8 <IDT::addEntry(int, void (*)(), bool)>
c0016227:	83 c4 1c             	add    esp,0x1c
c001622a:	6a 03                	push   0x3
c001622c:	6a 02                	push   0x2
c001622e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016234:	e8 d5 24 00 00       	call   c001870e <VAS::allocatePages(int, int)>
c0016239:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016240:	89 c6                	mov    esi,eax
c0016242:	e8 94 01 00 00       	call   c00163db <malloc>
c0016247:	81 c6 00 20 00 00    	add    esi,0x2000
c001624d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016250:	89 c7                	mov    edi,eax
c0016252:	e8 dd 15 00 00       	call   c0017834 <TSS::TSS()>
c0016257:	83 c4 0c             	add    esp,0xc
c001625a:	68 c6 df 02 c0       	push   0xc002dfc6
c001625f:	56                   	push   esi
c0016260:	57                   	push   edi
c0016261:	e8 12 16 00 00       	call   c0017878 <TSS::setup(unsigned long, unsigned long)>
c0016266:	89 c6                	mov    esi,eax
c0016268:	58                   	pop    eax
c0016269:	5a                   	pop    edx
c001626a:	6a 00                	push   0x0
c001626c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016270:	50                   	push   eax
c0016271:	e8 ce fb ff ff       	call   c0015e44 <IDTEntry::IDTEntry(bool)>
c0016276:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001627a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001627f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001628a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016290:	80 ce 05             	or     dh,0x5
c0016293:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016297:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001629a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001629e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00162a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162a4:	e8 87 fc ff ff       	call   c0015f30 <IDT::flush()>
c00162a9:	83 c4 20             	add    esp,0x20
c00162ac:	5b                   	pop    ebx
c00162ad:	5e                   	pop    esi
c00162ae:	5f                   	pop    edi
c00162af:	c3                   	ret    

c00162b0 <sbrk>:
c00162b0:	55                   	push   ebp
c00162b1:	57                   	push   edi
c00162b2:	56                   	push   esi
c00162b3:	53                   	push   ebx
c00162b4:	83 ec 1c             	sub    esp,0x1c
c00162b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162bb:	85 c0                	test   eax,eax
c00162bd:	74 66                	je     c0016325 <sbrk+0x75>
c00162bf:	78 6b                	js     c001632c <sbrk+0x7c>
c00162c1:	8b 15 84 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a84
c00162c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162cb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00162d1:	05 ff 0f 00 00       	add    eax,0xfff
c00162d6:	0f 49 e8             	cmovns ebp,eax
c00162d9:	c1 fd 0c             	sar    ebp,0xc
c00162dc:	bb 00 00 00 00       	mov    ebx,0x0
c00162e1:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00162e7:	8b 3d 84 3a 03 c0    	mov    edi,DWORD PTR ds:0xc0033a84
c00162ed:	e8 f8 03 00 00       	call   c00166ea <Phys::allocatePage()>
c00162f2:	68 01 04 00 00       	push   0x401
c00162f7:	57                   	push   edi
c00162f8:	50                   	push   eax
c00162f9:	56                   	push   esi
c00162fa:	e8 07 23 00 00       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c00162ff:	81 05 84 3a 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033a84,0x1000
c0016309:	83 c3 01             	add    ebx,0x1
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	39 dd                	cmp    ebp,ebx
c0016311:	75 ce                	jne    c00162e1 <sbrk+0x31>
c0016313:	0f 20 d8             	mov    eax,cr3
c0016316:	0f 22 d8             	mov    cr3,eax
c0016319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001631d:	83 c4 1c             	add    esp,0x1c
c0016320:	5b                   	pop    ebx
c0016321:	5e                   	pop    esi
c0016322:	5f                   	pop    edi
c0016323:	5d                   	pop    ebp
c0016324:	c3                   	ret    
c0016325:	a1 84 3a 03 c0       	mov    eax,ds:0xc0033a84
c001632a:	eb f1                	jmp    c001631d <sbrk+0x6d>
c001632c:	83 ec 08             	sub    esp,0x8
c001632f:	50                   	push   eax
c0016330:	68 e8 0f 03 c0       	push   0xc0030fe8
c0016335:	e8 d8 2e 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001633a:	83 c4 10             	add    esp,0x10
c001633d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016342:	eb d9                	jmp    c001631d <sbrk+0x6d>

c0016344 <mmap>:
c0016344:	83 ec 18             	sub    esp,0x18
c0016347:	68 18 10 03 c0       	push   0xc0031018
c001634c:	e8 49 9e 00 00       	call   c002019a <KePanic(char const*)>
c0016351:	b8 00 00 00 00       	mov    eax,0x0
c0016356:	83 c4 1c             	add    esp,0x1c
c0016359:	c3                   	ret    

c001635a <munmap>:
c001635a:	83 ec 18             	sub    esp,0x18
c001635d:	68 1d 10 03 c0       	push   0xc003101d
c0016362:	e8 33 9e 00 00       	call   c002019a <KePanic(char const*)>
c0016367:	b8 00 00 00 00       	mov    eax,0x0
c001636c:	83 c4 1c             	add    esp,0x1c
c001636f:	c3                   	ret    

c0016370 <liballoc_lock()>:
c0016370:	fa                   	cli    
c0016371:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016378:	b8 00 00 00 00       	mov    eax,0x0
c001637d:	c3                   	ret    

c001637e <liballoc_unlock()>:
c001637e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016383:	83 e8 01             	sub    eax,0x1
c0016386:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001638b:	75 01                	jne    c001638e <liballoc_unlock()+0x10>
c001638d:	fb                   	sti    
c001638e:	b8 00 00 00 00       	mov    eax,0x0
c0016393:	c3                   	ret    

c0016394 <liballoc_alloc(int)>:
c0016394:	83 ec 10             	sub    esp,0x10
c0016397:	6a 01                	push   0x1
c0016399:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001639d:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163a3:	e8 66 23 00 00       	call   c001870e <VAS::allocatePages(int, int)>
c00163a8:	83 c4 1c             	add    esp,0x1c
c00163ab:	c3                   	ret    

c00163ac <liballoc_free(void*, int)>:
c00163ac:	83 ec 14             	sub    esp,0x14
c00163af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163b3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163b9:	e8 90 1f 00 00       	call   c001834e <VAS::freeAllocatedPages(unsigned long)>
c00163be:	b8 00 00 00 00       	mov    eax,0x0
c00163c3:	83 c4 1c             	add    esp,0x1c
c00163c6:	c3                   	ret    

c00163c7 <realloc>:
c00163c7:	83 ec 14             	sub    esp,0x14
c00163ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d2:	e8 45 b3 fe ff       	call   c000171c <dlrealloc>
c00163d7:	83 c4 1c             	add    esp,0x1c
c00163da:	c3                   	ret    

c00163db <malloc>:
c00163db:	83 ec 18             	sub    esp,0x18
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	e8 f8 ad fe ff       	call   c00011df <dlmalloc>
c00163e7:	83 c4 1c             	add    esp,0x1c
c00163ea:	c3                   	ret    

c00163eb <free>:
c00163eb:	83 ec 18             	sub    esp,0x18
c00163ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f2:	e8 8a aa fe ff       	call   c0000e81 <dlfree>
c00163f7:	83 c4 1c             	add    esp,0x1c
c00163fa:	c3                   	ret    

c00163fb <rfree>:
c00163fb:	83 ec 18             	sub    esp,0x18
c00163fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016402:	e8 7a aa fe ff       	call   c0000e81 <dlfree>
c0016407:	83 c4 1c             	add    esp,0x1c
c001640a:	c3                   	ret    

c001640b <calloc>:
c001640b:	56                   	push   esi
c001640c:	53                   	push   ebx
c001640d:	83 ec 10             	sub    esp,0x10
c0016410:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016414:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016419:	53                   	push   ebx
c001641a:	e8 bc ff ff ff       	call   c00163db <malloc>
c001641f:	89 c6                	mov    esi,eax
c0016421:	83 c4 0c             	add    esp,0xc
c0016424:	53                   	push   ebx
c0016425:	6a 00                	push   0x0
c0016427:	50                   	push   eax
c0016428:	e8 c3 a0 fe ff       	call   c00004f0 <memset>
c001642d:	89 f0                	mov    eax,esi
c001642f:	83 c4 14             	add    esp,0x14
c0016432:	5b                   	pop    ebx
c0016433:	5e                   	pop    esi
c0016434:	c3                   	ret    

c0016435 <KeEntryPoint>:
c0016435:	57                   	push   edi
c0016436:	bf f9 03 00 00       	mov    edi,0x3f9
c001643b:	56                   	push   esi
c001643c:	31 f6                	xor    esi,esi
c001643e:	53                   	push   ebx
c001643f:	89 fa                	mov    edx,edi
c0016441:	83 ec 2c             	sub    esp,0x2c
c0016444:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016449:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c001644e:	89 f0                	mov    eax,esi
c0016450:	ee                   	out    dx,al
c0016451:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016456:	b0 80                	mov    al,0x80
c0016458:	89 da                	mov    edx,ebx
c001645a:	ee                   	out    dx,al
c001645b:	b1 03                	mov    cl,0x3
c001645d:	ba f8 03 00 00       	mov    edx,0x3f8
c0016462:	88 c8                	mov    al,cl
c0016464:	ee                   	out    dx,al
c0016465:	89 f0                	mov    eax,esi
c0016467:	89 fa                	mov    edx,edi
c0016469:	ee                   	out    dx,al
c001646a:	88 c8                	mov    al,cl
c001646c:	89 da                	mov    edx,ebx
c001646e:	ee                   	out    dx,al
c001646f:	b0 c7                	mov    al,0xc7
c0016471:	ba fa 03 00 00       	mov    edx,0x3fa
c0016476:	ee                   	out    dx,al
c0016477:	b0 0b                	mov    al,0xb
c0016479:	ba fc 03 00 00       	mov    edx,0x3fc
c001647e:	ee                   	out    dx,al
c001647f:	68 24 10 03 c0       	push   0xc0031024
c0016484:	e8 89 2d 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0016489:	e8 2f 95 00 00       	call   c001f9bd <KeDisplaySplashScreen()>
c001648e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016493:	05 ff 0f 00 00       	add    eax,0xfff
c0016498:	25 00 f0 ff ff       	and    eax,0xfffff000
c001649d:	89 04 24             	mov    DWORD PTR [esp],eax
c00164a0:	e8 b3 03 00 00       	call   c0016858 <Phys::physicalMemorySetup(unsigned int)>
c00164a5:	e8 27 1c 00 00       	call   c00180d1 <Virt::virtualMemorySetup()>
c00164aa:	e8 58 94 00 00       	call   c001f907 <KeInitialiseAtexit()>
c00164af:	58                   	pop    eax
c00164b0:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00164b4:	53                   	push   ebx
c00164b5:	e8 14 1f 00 00       	call   c00183ce <VAS::VAS()>
c00164ba:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00164c0:	e8 45 83 01 00       	call   c002e80a <_init>
c00164c5:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00164cc:	e8 0a ff ff ff       	call   c00163db <malloc>
c00164d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00164d4:	89 c6                	mov    esi,eax
c00164d6:	e8 37 f2 ff ff       	call   c0015712 <Computer::Computer()>
c00164db:	53                   	push   ebx
c00164dc:	6a 00                	push   0x0
c00164de:	6a 00                	push   0x0
c00164e0:	56                   	push   esi
c00164e1:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00164e7:	e8 ec f5 ff ff       	call   c0015ad8 <Computer::open(int, int, void*)>
c00164ec:	83 c4 14             	add    esp,0x14
c00164ef:	53                   	push   ebx
c00164f0:	e8 a3 1f 00 00       	call   c0018498 <VAS::~VAS()>
c00164f5:	83 c4 30             	add    esp,0x30
c00164f8:	5b                   	pop    ebx
c00164f9:	5e                   	pop    esi
c00164fa:	5f                   	pop    edi
c00164fb:	c3                   	ret    

c00164fc <Phys::allocateDMA(unsigned long)>:
c00164fc:	55                   	push   ebp
c00164fd:	31 ed                	xor    ebp,ebp
c00164ff:	57                   	push   edi
c0016500:	56                   	push   esi
c0016501:	31 f6                	xor    esi,esi
c0016503:	53                   	push   ebx
c0016504:	31 db                	xor    ebx,ebx
c0016506:	83 ec 1c             	sub    esp,0x1c
c0016509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001650d:	05 ff 0f 00 00       	add    eax,0xfff
c0016512:	c1 e8 0c             	shr    eax,0xc
c0016515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016519:	31 c0                	xor    eax,eax
c001651b:	eb 1b                	jmp    c0016538 <Phys::allocateDMA(unsigned long)+0x3c>
c001651d:	8d 78 01             	lea    edi,[eax+0x1]
c0016520:	85 c0                	test   eax,eax
c0016522:	0f 44 eb             	cmove  ebp,ebx
c0016525:	0f 44 f3             	cmove  esi,ebx
c0016528:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001652c:	74 37                	je     c0016565 <Phys::allocateDMA(unsigned long)+0x69>
c001652e:	89 f8                	mov    eax,edi
c0016530:	83 c3 01             	add    ebx,0x1
c0016533:	83 fb 0f             	cmp    ebx,0xf
c0016536:	7f 13                	jg     c001654b <Phys::allocateDMA(unsigned long)+0x4f>
c0016538:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c001653f:	74 dc                	je     c001651d <Phys::allocateDMA(unsigned long)+0x21>
c0016541:	31 c0                	xor    eax,eax
c0016543:	83 c3 01             	add    ebx,0x1
c0016546:	83 fb 0f             	cmp    ebx,0xf
c0016549:	7e ed                	jle    c0016538 <Phys::allocateDMA(unsigned long)+0x3c>
c001654b:	83 ec 0c             	sub    esp,0xc
c001654e:	68 3c 10 03 c0       	push   0xc003103c
c0016553:	e8 42 9c 00 00       	call   c002019a <KePanic(char const*)>
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	31 c0                	xor    eax,eax
c001655d:	83 c4 1c             	add    esp,0x1c
c0016560:	5b                   	pop    ebx
c0016561:	5e                   	pop    esi
c0016562:	5f                   	pop    edi
c0016563:	5d                   	pop    ebp
c0016564:	c3                   	ret    
c0016565:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016569:	89 f2                	mov    edx,esi
c001656b:	c1 fa 04             	sar    edx,0x4
c001656e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016572:	01 f1                	add    ecx,esi
c0016574:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016577:	83 e9 01             	sub    ecx,0x1
c001657a:	0f 48 ca             	cmovs  ecx,edx
c001657d:	c1 f9 04             	sar    ecx,0x4
c0016580:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016584:	74 06                	je     c001658c <Phys::allocateDMA(unsigned long)+0x90>
c0016586:	89 eb                	mov    ebx,ebp
c0016588:	31 c0                	xor    eax,eax
c001658a:	eb b7                	jmp    c0016543 <Phys::allocateDMA(unsigned long)+0x47>
c001658c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016590:	85 d2                	test   edx,edx
c0016592:	74 17                	je     c00165ab <Phys::allocateDMA(unsigned long)+0xaf>
c0016594:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c001659a:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c00165a1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00165a4:	83 c2 01             	add    edx,0x1
c00165a7:	39 d0                	cmp    eax,edx
c00165a9:	75 f6                	jne    c00165a1 <Phys::allocateDMA(unsigned long)+0xa5>
c00165ab:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00165b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b9:	01 c2                	add    edx,eax
c00165bb:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00165c1:	85 c9                	test   ecx,ecx
c00165c3:	74 17                	je     c00165dc <Phys::allocateDMA(unsigned long)+0xe0>
c00165c5:	83 ec 0c             	sub    esp,0xc
c00165c8:	68 3c 10 03 c0       	push   0xc003103c
c00165cd:	e8 c8 9b 00 00       	call   c002019a <KePanic(char const*)>
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	89 f8                	mov    eax,edi
c00165d7:	e9 54 ff ff ff       	jmp    c0016530 <Phys::allocateDMA(unsigned long)+0x34>
c00165dc:	c1 e6 0c             	shl    esi,0xc
c00165df:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00165e5:	e9 73 ff ff ff       	jmp    c001655d <Phys::allocateDMA(unsigned long)+0x61>

c00165ea <Phys::freeDMA(unsigned long, unsigned long)>:
c00165ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165ee:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165f4:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165f9:	c1 ea 0c             	shr    edx,0xc
c00165fc:	29 d0                	sub    eax,edx
c00165fe:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016607:	05 00 00 ff 3d       	add    eax,0x3dff0000
c001660c:	c1 e8 0c             	shr    eax,0xc
c001660f:	85 d2                	test   edx,edx
c0016611:	74 11                	je     c0016624 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016613:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c0016618:	01 c2                	add    edx,eax
c001661a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001661d:	83 c0 01             	add    eax,0x1
c0016620:	39 d0                	cmp    eax,edx
c0016622:	75 f6                	jne    c001661a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016624:	c3                   	ret    

c0016625 <Phys::setPageState(unsigned long, bool)>:
c0016625:	57                   	push   edi
c0016626:	56                   	push   esi
c0016627:	8b 35 88 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033a88
c001662d:	53                   	push   ebx
c001662e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016633:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001663b:	89 ca                	mov    edx,ecx
c001663d:	83 e1 07             	and    ecx,0x7
c0016640:	c1 ea 03             	shr    edx,0x3
c0016643:	0f b6 c0             	movzx  eax,al
c0016646:	d3 c3                	rol    ebx,cl
c0016648:	01 d6                	add    esi,edx
c001664a:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001664d:	d3 e0                	shl    eax,cl
c001664f:	21 fb                	and    ebx,edi
c0016651:	88 1e                	mov    BYTE PTR [esi],bl
c0016653:	8b 1d 88 3a 03 c0    	mov    ebx,DWORD PTR ds:0xc0033a88
c0016659:	01 da                	add    edx,ebx
c001665b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001665d:	09 c8                	or     eax,ecx
c001665f:	88 02                	mov    BYTE PTR [edx],al
c0016661:	5b                   	pop    ebx
c0016662:	5e                   	pop    esi
c0016663:	5f                   	pop    edi
c0016664:	c3                   	ret    

c0016665 <Phys::getPageState(unsigned long)>:
c0016665:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016669:	8b 15 88 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a88
c001666f:	89 c8                	mov    eax,ecx
c0016671:	83 e1 07             	and    ecx,0x7
c0016674:	c1 e8 03             	shr    eax,0x3
c0016677:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001667b:	d3 f8                	sar    eax,cl
c001667d:	83 e0 01             	and    eax,0x1
c0016680:	c3                   	ret    

c0016681 <Phys::freePage(unsigned long)>:
c0016681:	53                   	push   ebx
c0016682:	83 ec 08             	sub    esp,0x8
c0016685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016689:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001668f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016695:	76 41                	jbe    c00166d8 <Phys::freePage(unsigned long)+0x57>
c0016697:	c1 e8 0c             	shr    eax,0xc
c001669a:	50                   	push   eax
c001669b:	89 c3                	mov    ebx,eax
c001669d:	e8 c3 ff ff ff       	call   c0016665 <Phys::getPageState(unsigned long)>
c00166a2:	5a                   	pop    edx
c00166a3:	84 c0                	test   al,al
c00166a5:	74 20                	je     c00166c7 <Phys::freePage(unsigned long)+0x46>
c00166a7:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00166ac:	83 ec 08             	sub    esp,0x8
c00166af:	6a 00                	push   0x0
c00166b1:	53                   	push   ebx
c00166b2:	83 e8 01             	sub    eax,0x1
c00166b5:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00166ba:	e8 66 ff ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c00166bf:	83 c4 10             	add    esp,0x10
c00166c2:	83 c4 08             	add    esp,0x8
c00166c5:	5b                   	pop    ebx
c00166c6:	c3                   	ret    
c00166c7:	c7 44 24 10 e1 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc00310e1
c00166cf:	83 c4 08             	add    esp,0x8
c00166d2:	5b                   	pop    ebx
c00166d3:	e9 c2 9a 00 00       	jmp    c002019a <KePanic(char const*)>
c00166d8:	68 00 10 00 00       	push   0x1000
c00166dd:	50                   	push   eax
c00166de:	e8 07 ff ff ff       	call   c00165ea <Phys::freeDMA(unsigned long, unsigned long)>
c00166e3:	59                   	pop    ecx
c00166e4:	5b                   	pop    ebx
c00166e5:	83 c4 08             	add    esp,0x8
c00166e8:	5b                   	pop    ebx
c00166e9:	c3                   	ret    

c00166ea <Phys::allocatePage()>:
c00166ea:	56                   	push   esi
c00166eb:	53                   	push   ebx
c00166ec:	83 ec 14             	sub    esp,0x14
c00166ef:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166f5:	89 f3                	mov    ebx,esi
c00166f7:	eb 0a                	jmp    c0016703 <Phys::allocatePage()+0x19>
c00166f9:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00166ff:	39 de                	cmp    esi,ebx
c0016701:	74 26                	je     c0016729 <Phys::allocatePage()+0x3f>
c0016703:	53                   	push   ebx
c0016704:	e8 5c ff ff ff       	call   c0016665 <Phys::getPageState(unsigned long)>
c0016709:	5a                   	pop    edx
c001670a:	84 c0                	test   al,al
c001670c:	74 67                	je     c0016775 <Phys::allocatePage()+0x8b>
c001670e:	83 c3 01             	add    ebx,0x1
c0016711:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016717:	75 e0                	jne    c00166f9 <Phys::allocatePage()+0xf>
c0016719:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016723:	31 db                	xor    ebx,ebx
c0016725:	39 de                	cmp    esi,ebx
c0016727:	75 da                	jne    c0016703 <Phys::allocatePage()+0x19>
c0016729:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	83 f0 01             	xor    eax,0x1
c0016734:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001673e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016741:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016747:	50                   	push   eax
c0016748:	e8 79 27 00 00       	call   c0018ec6 <VAS::scanForEviction()>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	85 c0                	test   eax,eax
c0016752:	75 48                	jne    c001679c <Phys::allocatePage()+0xb2>
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	68 64 10 03 c0       	push   0xc0031064
c001675c:	e8 39 9a 00 00       	call   c002019a <KePanic(char const*)>
c0016761:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016767:	83 c4 10             	add    esp,0x10
c001676a:	53                   	push   ebx
c001676b:	e8 f5 fe ff ff       	call   c0016665 <Phys::getPageState(unsigned long)>
c0016770:	5a                   	pop    edx
c0016771:	84 c0                	test   al,al
c0016773:	75 99                	jne    c001670e <Phys::allocatePage()+0x24>
c0016775:	6a 01                	push   0x1
c0016777:	53                   	push   ebx
c0016778:	e8 a8 fe ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c001677d:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016783:	59                   	pop    ecx
c0016784:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016789:	5b                   	pop    ebx
c001678a:	83 c2 01             	add    edx,0x1
c001678d:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016793:	c1 e0 0c             	shl    eax,0xc
c0016796:	83 c4 14             	add    esp,0x14
c0016799:	5b                   	pop    ebx
c001679a:	5e                   	pop    esi
c001679b:	c3                   	ret    
c001679c:	83 ec 08             	sub    esp,0x8
c001679f:	89 c2                	mov    edx,eax
c00167a1:	6a 01                	push   0x1
c00167a3:	c1 ea 0c             	shr    edx,0xc
c00167a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167aa:	52                   	push   edx
c00167ab:	e8 75 fe ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c00167b0:	83 c4 10             	add    esp,0x10
c00167b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167b7:	eb dd                	jmp    c0016796 <Phys::allocatePage()+0xac>

c00167b9 <Phys::allocateContiguousPages(int)>:
c00167b9:	57                   	push   edi
c00167ba:	56                   	push   esi
c00167bb:	53                   	push   ebx
c00167bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c0:	fa                   	cli    
c00167c1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167c6:	31 db                	xor    ebx,ebx
c00167c8:	83 c0 01             	add    eax,0x1
c00167cb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167d0:	85 db                	test   ebx,ebx
c00167d2:	75 11                	jne    c00167e5 <Phys::allocateContiguousPages(int)+0x2c>
c00167d4:	e8 11 ff ff ff       	call   c00166ea <Phys::allocatePage()>
c00167d9:	83 fe 01             	cmp    esi,0x1
c00167dc:	89 c7                	mov    edi,eax
c00167de:	74 21                	je     c0016801 <Phys::allocateContiguousPages(int)+0x48>
c00167e0:	bb 01 00 00 00       	mov    ebx,0x1
c00167e5:	e8 00 ff ff ff       	call   c00166ea <Phys::allocatePage()>
c00167ea:	89 da                	mov    edx,ebx
c00167ec:	c1 e2 0c             	shl    edx,0xc
c00167ef:	01 fa                	add    edx,edi
c00167f1:	39 c2                	cmp    edx,eax
c00167f3:	74 22                	je     c0016817 <Phys::allocateContiguousPages(int)+0x5e>
c00167f5:	83 fe 01             	cmp    esi,0x1
c00167f8:	bb 01 00 00 00       	mov    ebx,0x1
c00167fd:	89 c7                	mov    edi,eax
c00167ff:	75 e4                	jne    c00167e5 <Phys::allocateContiguousPages(int)+0x2c>
c0016801:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016806:	83 e8 01             	sub    eax,0x1
c0016809:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001680e:	75 01                	jne    c0016811 <Phys::allocateContiguousPages(int)+0x58>
c0016810:	fb                   	sti    
c0016811:	5b                   	pop    ebx
c0016812:	89 f8                	mov    eax,edi
c0016814:	5e                   	pop    esi
c0016815:	5f                   	pop    edi
c0016816:	c3                   	ret    
c0016817:	83 c3 01             	add    ebx,0x1
c001681a:	39 f3                	cmp    ebx,esi
c001681c:	75 b2                	jne    c00167d0 <Phys::allocateContiguousPages(int)+0x17>
c001681e:	eb e1                	jmp    c0016801 <Phys::allocateContiguousPages(int)+0x48>

c0016820 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016820:	56                   	push   esi
c0016821:	53                   	push   ebx
c0016822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016826:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c001682c:	73 06                	jae    c0016834 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001682e:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016838:	c1 eb 0c             	shr    ebx,0xc
c001683b:	c1 e8 0c             	shr    eax,0xc
c001683e:	39 d8                	cmp    eax,ebx
c0016840:	73 13                	jae    c0016855 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016842:	6a 00                	push   0x0
c0016844:	50                   	push   eax
c0016845:	8d 70 01             	lea    esi,[eax+0x1]
c0016848:	e8 d8 fd ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c001684d:	39 f3                	cmp    ebx,esi
c001684f:	89 f0                	mov    eax,esi
c0016851:	5a                   	pop    edx
c0016852:	59                   	pop    ecx
c0016853:	75 ed                	jne    c0016842 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016855:	5b                   	pop    ebx
c0016856:	5e                   	pop    esi
c0016857:	c3                   	ret    

c0016858 <Phys::physicalMemorySetup(unsigned int)>:
c0016858:	55                   	push   ebp
c0016859:	57                   	push   edi
c001685a:	56                   	push   esi
c001685b:	53                   	push   ebx
c001685c:	31 db                	xor    ebx,ebx
c001685e:	83 ec 40             	sub    esp,0x40
c0016861:	6a 10                	push   0x10
c0016863:	6a 00                	push   0x0
c0016865:	68 f0 a9 03 c0       	push   0xc003a9f0
c001686a:	e8 81 9c fe ff       	call   c00004f0 <memset>
c001686f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016873:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016878:	05 00 10 00 00       	add    eax,0x1000
c001687d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016881:	5a                   	pop    edx
c0016882:	59                   	pop    ecx
c0016883:	50                   	push   eax
c0016884:	68 f7 10 03 c0       	push   0xc00310f7
c0016889:	e8 84 29 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001688e:	83 c4 10             	add    esp,0x10
c0016891:	83 ec 08             	sub    esp,0x8
c0016894:	6a 01                	push   0x1
c0016896:	53                   	push   ebx
c0016897:	83 c3 01             	add    ebx,0x1
c001689a:	e8 86 fd ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00168a8:	75 e7                	jne    c0016891 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00168aa:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00168b1:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00168b8:	c1 e0 08             	shl    eax,0x8
c00168bb:	09 c2                	or     edx,eax
c00168bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00168c1:	0f 84 43 01 00 00    	je     c0016a0a <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c00168c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00168cf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00168d4:	e9 82 00 00 00       	jmp    c001695b <Phys::physicalMemorySetup(unsigned int)+0x103>
c00168d9:	ba 00 00 08 00       	mov    edx,0x80000
c00168de:	89 c1                	mov    ecx,eax
c00168e0:	39 f2                	cmp    edx,esi
c00168e2:	19 f9                	sbb    ecx,edi
c00168e4:	0f 82 c0 00 00 00    	jb     c00169aa <Phys::physicalMemorySetup(unsigned int)+0x152>
c00168ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168ee:	89 c5                	mov    ebp,eax
c00168f0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00168f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168f8:	19 cd                	sbb    ebp,ecx
c00168fa:	0f 83 af 00 00 00    	jae    c00169af <Phys::physicalMemorySetup(unsigned int)+0x157>
c0016900:	89 d6                	mov    esi,edx
c0016902:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016907:	39 f2                	cmp    edx,esi
c0016909:	89 cf                	mov    edi,ecx
c001690b:	19 c8                	sbb    eax,ecx
c001690d:	73 07                	jae    c0016916 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c001690f:	be 00 00 0a 00       	mov    esi,0xa0000
c0016914:	31 ff                	xor    edi,edi
c0016916:	89 f2                	mov    edx,esi
c0016918:	b8 ff 1f 00 00       	mov    eax,0x1fff
c001691d:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0016923:	89 f9                	mov    ecx,edi
c0016925:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016929:	83 d1 ff             	adc    ecx,0xffffffff
c001692c:	39 d0                	cmp    eax,edx
c001692e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0016932:	b8 00 00 00 00       	mov    eax,0x0
c0016937:	19 c8                	sbb    eax,ecx
c0016939:	0f 82 9d 01 00 00    	jb     c0016adc <Phys::physicalMemorySetup(unsigned int)+0x284>
c001693f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016943:	83 c3 18             	add    ebx,0x18
c0016946:	83 c6 01             	add    esi,0x1
c0016949:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001694d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016951:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016955:	0f 84 bf 00 00 00    	je     c0016a1a <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c001695b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001695d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016960:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016963:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016966:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001696a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001696d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016971:	01 f0                	add    eax,esi
c0016973:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016977:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001697b:	55                   	push   ebp
c001697c:	11 fa                	adc    edx,edi
c001697e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016982:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001698a:	50                   	push   eax
c001698b:	56                   	push   esi
c001698c:	68 94 10 03 c0       	push   0xc0031094
c0016991:	e8 7c 28 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0016996:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001699a:	83 c4 10             	add    esp,0x10
c001699d:	09 f8                	or     eax,edi
c001699f:	75 79                	jne    c0016a1a <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00169a1:	83 fd 01             	cmp    ebp,0x1
c00169a4:	0f 84 2f ff ff ff    	je     c00168d9 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00169aa:	83 fd 01             	cmp    ebp,0x1
c00169ad:	75 90                	jne    c001693f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00169b3:	31 d2                	xor    edx,edx
c00169b5:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00169b9:	89 c8                	mov    eax,ecx
c00169bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169bf:	19 d1                	sbb    ecx,edx
c00169c1:	0f 82 78 ff ff ff    	jb     c001693f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169c7:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00169cc:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00169d0:	b9 00 00 00 00       	mov    ecx,0x0
c00169d5:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00169d9:	0f 83 60 ff ff ff    	jae    c001693f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169df:	39 c6                	cmp    esi,eax
c00169e1:	19 d7                	sbb    edi,edx
c00169e3:	0f 83 ff 00 00 00    	jae    c0016ae8 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00169e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00169ed:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00169f1:	29 c7                	sub    edi,eax
c00169f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169f7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00169fb:	19 d5                	sbb    ebp,edx
c00169fd:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016a01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016a05:	e9 de 00 00 00       	jmp    c0016ae8 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	68 0f 11 03 c0       	push   0xc003110f
c0016a12:	e8 83 97 00 00       	call   c002019a <KePanic(char const*)>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	83 ec 08             	sub    esp,0x8
c0016a1d:	bb 60 00 00 00       	mov    ebx,0x60
c0016a22:	6a 00                	push   0x0
c0016a24:	6a 06                	push   0x6
c0016a26:	e8 fa fb ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c0016a2b:	58                   	pop    eax
c0016a2c:	5a                   	pop    edx
c0016a2d:	6a 00                	push   0x0
c0016a2f:	6a 07                	push   0x7
c0016a31:	e8 ef fb ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c0016a36:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	83 c1 02             	add    ecx,0x2
c0016a42:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	6a 00                	push   0x0
c0016a4d:	53                   	push   ebx
c0016a4e:	83 c3 01             	add    ebx,0x1
c0016a51:	e8 cf fb ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016a5f:	75 e7                	jne    c0016a48 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016a61:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a66:	bb 40 01 00 00       	mov    ebx,0x140
c0016a6b:	83 c0 20             	add    eax,0x20
c0016a6e:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a73:	eb 26                	jmp    c0016a9b <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016a75:	83 ec 08             	sub    esp,0x8
c0016a78:	6a 00                	push   0x0
c0016a7a:	53                   	push   ebx
c0016a7b:	83 c3 01             	add    ebx,0x1
c0016a7e:	e8 a2 fb ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c0016a83:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	83 c0 01             	add    eax,0x1
c0016a8e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016a94:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a99:	74 07                	je     c0016aa2 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016a9b:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016aa0:	7e d3                	jle    c0016a75 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016aa2:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016aa7:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016aac:	7f 26                	jg     c0016ad4 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016aae:	83 ec 08             	sub    esp,0x8
c0016ab1:	6a 00                	push   0x0
c0016ab3:	53                   	push   ebx
c0016ab4:	83 c3 01             	add    ebx,0x1
c0016ab7:	e8 69 fb ff ff       	call   c0016625 <Phys::setPageState(unsigned long, bool)>
c0016abc:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016ac1:	83 c4 10             	add    esp,0x10
c0016ac4:	83 c0 01             	add    eax,0x1
c0016ac7:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016acd:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ad2:	75 d3                	jne    c0016aa7 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016ad4:	83 c4 3c             	add    esp,0x3c
c0016ad7:	5b                   	pop    ebx
c0016ad8:	5e                   	pop    esi
c0016ad9:	5f                   	pop    edi
c0016ada:	5d                   	pop    ebp
c0016adb:	c3                   	ret    
c0016adc:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016ae0:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016ae8:	83 ec 04             	sub    esp,0x4
c0016aeb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016aef:	56                   	push   esi
c0016af0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016af4:	57                   	push   edi
c0016af5:	68 b8 10 03 c0       	push   0xc00310b8
c0016afa:	e8 13 27 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0016aff:	5d                   	pop    ebp
c0016b00:	58                   	pop    eax
c0016b01:	56                   	push   esi
c0016b02:	57                   	push   edi
c0016b03:	e8 18 fd ff ff       	call   c0016820 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016b08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b10:	83 c4 0c             	add    esp,0xc
c0016b13:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016b19:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016b1d:	01 f0                	add    eax,esi
c0016b1f:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b24:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016b2b:	52                   	push   edx
c0016b2c:	50                   	push   eax
c0016b2d:	68 1d 11 03 c0       	push   0xc003111d
c0016b32:	e8 db 26 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	e9 00 fe ff ff       	jmp    c001693f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016b3f:	90                   	nop

c0016b40 <Pipe::isAtty()>:
c0016b40:	31 c0                	xor    eax,eax
c0016b42:	c3                   	ret    
c0016b43:	90                   	nop

c0016b44 <Pipe::~Pipe()>:
c0016b44:	83 ec 0c             	sub    esp,0xc
c0016b47:	ba 7c 11 03 c0       	mov    edx,0xc003117c
c0016b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b50:	89 10                	mov    DWORD PTR [eax],edx
c0016b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b56:	83 ec 0c             	sub    esp,0xc
c0016b59:	50                   	push   eax
c0016b5a:	e8 35 11 00 00       	call   c0017c94 <UnixFile::~UnixFile()>
c0016b5f:	83 c4 10             	add    esp,0x10
c0016b62:	90                   	nop
c0016b63:	83 c4 0c             	add    esp,0xc
c0016b66:	c3                   	ret    
c0016b67:	90                   	nop

c0016b68 <Pipe::~Pipe()>:
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	83 ec 0c             	sub    esp,0xc
c0016b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b72:	e8 cd ff ff ff       	call   c0016b44 <Pipe::~Pipe()>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	83 ec 08             	sub    esp,0x8
c0016b7d:	6a 20                	push   0x20
c0016b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b83:	e8 8c 25 00 00       	call   c0019114 <operator delete(void*, unsigned long)>
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	83 c4 0c             	add    esp,0xc
c0016b8e:	c3                   	ret    
c0016b8f:	90                   	nop

c0016b90 <Pipe::write(unsigned long long, void*, int*)>:
c0016b90:	55                   	push   ebp
c0016b91:	57                   	push   edi
c0016b92:	56                   	push   esi
c0016b93:	53                   	push   ebx
c0016b94:	83 ec 1c             	sub    esp,0x1c
c0016b97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ba3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016ba6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016baa:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bb0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016bb4:	89 d8                	mov    eax,ebx
c0016bb6:	89 d6                	mov    esi,edx
c0016bb8:	89 d7                	mov    edi,edx
c0016bba:	c1 ff 1f             	sar    edi,0x1f
c0016bbd:	03 34 24             	add    esi,DWORD PTR [esp]
c0016bc0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016bc4:	c1 f8 1f             	sar    eax,0x1f
c0016bc7:	39 f3                	cmp    ebx,esi
c0016bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bd1:	19 f8                	sbb    eax,edi
c0016bd3:	b8 01 00 00 00       	mov    eax,0x1
c0016bd8:	72 72                	jb     c0016c4c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016bda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bdd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016be1:	01 d0                	add    eax,edx
c0016be3:	99                   	cdq    
c0016be4:	f7 fb                	idiv   ebx
c0016be6:	89 d8                	mov    eax,ebx
c0016be8:	29 d0                	sub    eax,edx
c0016bea:	89 d6                	mov    esi,edx
c0016bec:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016bef:	89 c3                	mov    ebx,eax
c0016bf1:	c1 fb 1f             	sar    ebx,0x1f
c0016bf4:	39 c2                	cmp    edx,eax
c0016bf6:	19 df                	sbb    edi,ebx
c0016bf8:	bb 00 00 00 00       	mov    ebx,0x0
c0016bfd:	72 04                	jb     c0016c03 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016bff:	89 d3                	mov    ebx,edx
c0016c01:	29 c3                	sub    ebx,eax
c0016c03:	89 d0                	mov    eax,edx
c0016c05:	29 d8                	sub    eax,ebx
c0016c07:	74 0d                	je     c0016c16 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016c09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c0c:	89 c1                	mov    ecx,eax
c0016c0e:	01 f7                	add    edi,esi
c0016c10:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c16:	85 db                	test   ebx,ebx
c0016c18:	74 0d                	je     c0016c27 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016c1a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c1e:	89 d9                	mov    ecx,ebx
c0016c20:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c23:	89 c6                	mov    esi,eax
c0016c25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c27:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016c2a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c2f:	75 10                	jne    c0016c41 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016c31:	83 ec 0c             	sub    esp,0xc
c0016c34:	68 39 11 03 c0       	push   0xc0031139
c0016c39:	e8 5c 95 00 00       	call   c002019a <KePanic(char const*)>
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c45:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c48:	89 08                	mov    DWORD PTR [eax],ecx
c0016c4a:	31 c0                	xor    eax,eax
c0016c4c:	83 c4 1c             	add    esp,0x1c
c0016c4f:	5b                   	pop    ebx
c0016c50:	5e                   	pop    esi
c0016c51:	5f                   	pop    edi
c0016c52:	5d                   	pop    ebp
c0016c53:	c3                   	ret    

c0016c54 <Pipe::read(unsigned long long, void*, int*)>:
c0016c54:	55                   	push   ebp
c0016c55:	57                   	push   edi
c0016c56:	56                   	push   esi
c0016c57:	53                   	push   ebx
c0016c58:	83 ec 1c             	sub    esp,0x1c
c0016c5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c67:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c6a:	89 c8                	mov    eax,ecx
c0016c6c:	99                   	cdq    
c0016c6d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c71:	74 24                	je     c0016c97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c73:	39 f9                	cmp    ecx,edi
c0016c75:	89 d1                	mov    ecx,edx
c0016c77:	19 f1                	sbb    ecx,esi
c0016c79:	73 1c                	jae    c0016c97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c7b:	fa                   	cli    
c0016c7c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c82:	e8 0d e5 00 00       	call   c0025194 <schedule()>
c0016c87:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c8c:	48                   	dec    eax
c0016c8d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c92:	75 d3                	jne    c0016c67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c94:	fb                   	sti    
c0016c95:	eb d0                	jmp    c0016c67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c97:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016c9b:	39 f8                	cmp    eax,edi
c0016c9d:	89 d1                	mov    ecx,edx
c0016c9f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016ca3:	19 f1                	sbb    ecx,esi
c0016ca5:	73 08                	jae    c0016caf <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016caf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016cb2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016cb5:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016cb9:	29 f7                	sub    edi,esi
c0016cbb:	89 f8                	mov    eax,edi
c0016cbd:	99                   	cdq    
c0016cbe:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016cc2:	89 d0                	mov    eax,edx
c0016cc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cc8:	19 c2                	sbb    edx,eax
c0016cca:	89 f8                	mov    eax,edi
c0016ccc:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016cd1:	89 ea                	mov    edx,ebp
c0016cd3:	29 c2                	sub    edx,eax
c0016cd5:	85 c0                	test   eax,eax
c0016cd7:	74 0b                	je     c0016ce4 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016cd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016cdc:	89 c1                	mov    ecx,eax
c0016cde:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016ce2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce4:	85 d2                	test   edx,edx
c0016ce6:	74 0d                	je     c0016cf5 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016ce8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cec:	89 d1                	mov    ecx,edx
c0016cee:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016cf1:	89 c7                	mov    edi,eax
c0016cf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cf5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016cf8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016cfb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016cfe:	99                   	cdq    
c0016cff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d03:	89 f7                	mov    edi,esi
c0016d05:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016d09:	c1 ff 1f             	sar    edi,0x1f
c0016d0c:	57                   	push   edi
c0016d0d:	56                   	push   esi
c0016d0e:	52                   	push   edx
c0016d0f:	50                   	push   eax
c0016d10:	e8 db 79 01 00       	call   c002e6f0 <__umoddi3>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016d1d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016d20:	75 10                	jne    c0016d32 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016d22:	83 ec 0c             	sub    esp,0xc
c0016d25:	68 56 11 03 c0       	push   0xc0031156
c0016d2a:	e8 6b 94 00 00       	call   c002019a <KePanic(char const*)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d3a:	89 10                	mov    DWORD PTR [eax],edx
c0016d3c:	83 c4 1c             	add    esp,0x1c
c0016d3f:	31 c0                	xor    eax,eax
c0016d41:	5b                   	pop    ebx
c0016d42:	5e                   	pop    esi
c0016d43:	5f                   	pop    edi
c0016d44:	5d                   	pop    ebp
c0016d45:	c3                   	ret    

c0016d46 <Pipe::Pipe(int)>:
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4d:	83 ec 08             	sub    esp,0x8
c0016d50:	6a 00                	push   0x0
c0016d52:	50                   	push   eax
c0016d53:	e8 56 0d 00 00       	call   c0017aae <UnixFile::UnixFile(int)>
c0016d58:	83 c4 10             	add    esp,0x10
c0016d5b:	ba 7c 11 03 c0       	mov    edx,0xc003117c
c0016d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d64:	89 10                	mov    DWORD PTR [eax],edx
c0016d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d75:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d80:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d8b:	83 ec 0c             	sub    esp,0xc
c0016d8e:	50                   	push   eax
c0016d8f:	e8 47 f6 ff ff       	call   c00163db <malloc>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	89 c2                	mov    edx,eax
c0016d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016da8:	90                   	nop
c0016da9:	83 c4 0c             	add    esp,0xc
c0016dac:	c3                   	ret    
c0016dad:	90                   	nop

c0016dae <VgaText::isAtty()>:
c0016dae:	b0 01                	mov    al,0x1
c0016db0:	c3                   	ret    
c0016db1:	90                   	nop

c0016db2 <VgaText::~VgaText()>:
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	ba c4 11 03 c0       	mov    edx,0xc00311c4
c0016dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbe:	89 10                	mov    DWORD PTR [eax],edx
c0016dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	50                   	push   eax
c0016dc8:	e8 c7 0e 00 00       	call   c0017c94 <UnixFile::~UnixFile()>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	90                   	nop
c0016dd1:	83 c4 0c             	add    esp,0xc
c0016dd4:	c3                   	ret    
c0016dd5:	90                   	nop

c0016dd6 <VgaText::~VgaText()>:
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	83 ec 0c             	sub    esp,0xc
c0016ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de0:	e8 cd ff ff ff       	call   c0016db2 <VgaText::~VgaText()>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	83 ec 08             	sub    esp,0x8
c0016deb:	68 84 01 00 00       	push   0x184
c0016df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df4:	e8 1b 23 00 00       	call   c0019114 <operator delete(void*, unsigned long)>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	83 c4 0c             	add    esp,0xc
c0016dff:	c3                   	ret    

c0016e00 <VgaText::read(unsigned long long, void*, int*)>:
c0016e00:	83 ec 10             	sub    esp,0x10
c0016e03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e0f:	e8 82 53 00 00       	call   c001c196 <readKeyboard(VgaText*, char*, unsigned long)>
c0016e14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e18:	89 02                	mov    DWORD PTR [edx],eax
c0016e1a:	31 c0                	xor    eax,eax
c0016e1c:	83 c4 1c             	add    esp,0x1c
c0016e1f:	c3                   	ret    

c0016e20 <setTerminalScrollLock(bool)>:
c0016e20:	c3                   	ret    

c0016e21 <doTerminalCycle()>:
c0016e21:	c3                   	ret    

c0016e22 <addToTerminalCycle(VgaText*)>:
c0016e22:	c3                   	ret    

c0016e23 <scrollTerminalScrollLock(int)>:
c0016e23:	c3                   	ret    

c0016e24 <VgaText::updateTitle()>:
c0016e24:	c3                   	ret    
c0016e25:	90                   	nop

c0016e26 <VgaText::load()>:
c0016e26:	c3                   	ret    
c0016e27:	90                   	nop

c0016e28 <VgaText::updateCursor()>:
c0016e28:	83 ec 14             	sub    esp,0x14
c0016e2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e2f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016e32:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016e35:	e8 62 0e 01 00       	call   c0027c9c <HalConsoleCursorUpdate(int, int)>
c0016e3a:	83 c4 1c             	add    esp,0x1c
c0016e3d:	c3                   	ret    

c0016e3e <VgaText::doANSI_SGR(int)>:
c0016e3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e46:	85 d2                	test   edx,edx
c0016e48:	75 0b                	jne    c0016e55 <VgaText::doANSI_SGR(int)+0x17>
c0016e4a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e4d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e50:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e53:	eb 59                	jmp    c0016eae <VgaText::doANSI_SGR(int)+0x70>
c0016e55:	83 fa 07             	cmp    edx,0x7
c0016e58:	75 0b                	jne    c0016e65 <VgaText::doANSI_SGR(int)+0x27>
c0016e5a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e5d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e60:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e63:	eb 49                	jmp    c0016eae <VgaText::doANSI_SGR(int)+0x70>
c0016e65:	83 fa 1b             	cmp    edx,0x1b
c0016e68:	74 e0                	je     c0016e4a <VgaText::doANSI_SGR(int)+0xc>
c0016e6a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e6d:	83 f9 07             	cmp    ecx,0x7
c0016e70:	77 09                	ja     c0016e7b <VgaText::doANSI_SGR(int)+0x3d>
c0016e72:	8b 14 8d c0 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc540]
c0016e79:	eb 20                	jmp    c0016e9b <VgaText::doANSI_SGR(int)+0x5d>
c0016e7b:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e7e:	83 f9 07             	cmp    ecx,0x7
c0016e81:	77 09                	ja     c0016e8c <VgaText::doANSI_SGR(int)+0x4e>
c0016e83:	8b 14 8d c0 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc540]
c0016e8a:	eb 22                	jmp    c0016eae <VgaText::doANSI_SGR(int)+0x70>
c0016e8c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e8f:	83 f9 07             	cmp    ecx,0x7
c0016e92:	77 0b                	ja     c0016e9f <VgaText::doANSI_SGR(int)+0x61>
c0016e94:	8b 14 95 78 39 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc688]
c0016e9b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e9e:	c3                   	ret    
c0016e9f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016ea2:	83 f9 07             	cmp    ecx,0x7
c0016ea5:	77 0a                	ja     c0016eb1 <VgaText::doANSI_SGR(int)+0x73>
c0016ea7:	8b 14 95 50 39 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc6b0]
c0016eae:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016eb1:	c3                   	ret    

c0016eb2 <VgaText::setDefaultBgColour(VgaColour)>:
c0016eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ebd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016ec0:	c3                   	ret    
c0016ec1:	90                   	nop

c0016ec2 <VgaText::setDefaultFgColour(VgaColour)>:
c0016ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eca:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016ecd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016ed0:	c3                   	ret    
c0016ed1:	90                   	nop

c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016ed2:	53                   	push   ebx
c0016ed3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016ed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016edb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016edf:	51                   	push   ecx
c0016ee0:	e8 cd ff ff ff       	call   c0016eb2 <VgaText::setDefaultBgColour(VgaColour)>
c0016ee5:	58                   	pop    eax
c0016ee6:	5a                   	pop    edx
c0016ee7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016eeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016eef:	5b                   	pop    ebx
c0016ef0:	eb d0                	jmp    c0016ec2 <VgaText::setDefaultFgColour(VgaColour)>

c0016ef2 <VgaText::setTitleTextColour(VgaColour)>:
c0016ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016efa:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016efd:	c3                   	ret    

c0016efe <VgaText::setTitleColour(VgaColour)>:
c0016efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f06:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f09:	c3                   	ret    

c0016f0a <VgaText::setTitle(char*)>:
c0016f0a:	c3                   	ret    
c0016f0b:	90                   	nop

c0016f0c <VgaText::combineColours(unsigned char, unsigned char)>:
c0016f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f10:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f15:	83 e0 0f             	and    eax,0xf
c0016f18:	c1 e2 04             	shl    edx,0x4
c0016f1b:	09 d0                	or     eax,edx
c0016f1d:	c3                   	ret    

c0016f1e <VgaText::scrollScreen()>:
c0016f1e:	55                   	push   ebp
c0016f1f:	57                   	push   edi
c0016f20:	56                   	push   esi
c0016f21:	be 01 00 00 00       	mov    esi,0x1
c0016f26:	53                   	push   ebx
c0016f27:	83 ec 0c             	sub    esp,0xc
c0016f2a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f2e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016f31:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016f37:	31 ff                	xor    edi,edi
c0016f39:	01 e9                	add    ecx,ebp
c0016f3b:	8a 01                	mov    al,BYTE PTR [ecx]
c0016f3d:	83 fe 18             	cmp    esi,0x18
c0016f40:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016f46:	75 20                	jne    c0016f68 <VgaText::scrollScreen()+0x4a>
c0016f48:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f4e:	74 15                	je     c0016f65 <VgaText::scrollScreen()+0x47>
c0016f50:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f54:	50                   	push   eax
c0016f55:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f59:	50                   	push   eax
c0016f5a:	e8 ad ff ff ff       	call   c0016f0c <VgaText::combineColours(unsigned char, unsigned char)>
c0016f5f:	5a                   	pop    edx
c0016f60:	5a                   	pop    edx
c0016f61:	88 01                	mov    BYTE PTR [ecx],al
c0016f63:	eb 03                	jmp    c0016f68 <VgaText::scrollScreen()+0x4a>
c0016f65:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f68:	47                   	inc    edi
c0016f69:	41                   	inc    ecx
c0016f6a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f70:	75 c9                	jne    c0016f3b <VgaText::scrollScreen()+0x1d>
c0016f72:	46                   	inc    esi
c0016f73:	83 fe 19             	cmp    esi,0x19
c0016f76:	75 b9                	jne    c0016f31 <VgaText::scrollScreen()+0x13>
c0016f78:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f7e:	75 1f                	jne    c0016f9f <VgaText::scrollScreen()+0x81>
c0016f80:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f84:	74 05                	je     c0016f8b <VgaText::scrollScreen()+0x6d>
c0016f86:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f89:	eb 14                	jmp    c0016f9f <VgaText::scrollScreen()+0x81>
c0016f8b:	50                   	push   eax
c0016f8c:	50                   	push   eax
c0016f8d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f91:	50                   	push   eax
c0016f92:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f96:	50                   	push   eax
c0016f97:	e8 94 0b 01 00       	call   c0027b30 <HalConsoleScroll(int, int)>
c0016f9c:	83 c4 10             	add    esp,0x10
c0016f9f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016fa3:	83 c4 0c             	add    esp,0xc
c0016fa6:	5b                   	pop    ebx
c0016fa7:	5e                   	pop    esi
c0016fa8:	5f                   	pop    edi
c0016fa9:	5d                   	pop    ebp
c0016faa:	e9 79 fe ff ff       	jmp    c0016e28 <VgaText::updateCursor()>
c0016faf:	90                   	nop

c0016fb0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0016fb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016fb5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016fba:	c1 e0 08             	shl    eax,0x8
c0016fbd:	09 d0                	or     eax,edx
c0016fbf:	c3                   	ret    

c0016fc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016fc0:	55                   	push   ebp
c0016fc1:	57                   	push   edi
c0016fc2:	56                   	push   esi
c0016fc3:	53                   	push   ebx
c0016fc4:	83 ec 1c             	sub    esp,0x1c
c0016fc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fcb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fcf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fd3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fdb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fdf:	0f b6 c3             	movzx  eax,bl
c0016fe2:	50                   	push   eax
c0016fe3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016fe8:	50                   	push   eax
c0016fe9:	e8 1e ff ff ff       	call   c0016f0c <VgaText::combineColours(unsigned char, unsigned char)>
c0016fee:	5a                   	pop    edx
c0016fef:	59                   	pop    ecx
c0016ff0:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016ff5:	0f b6 c0             	movzx  eax,al
c0016ff8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ffc:	50                   	push   eax
c0016ffd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017001:	e8 aa ff ff ff       	call   c0016fb0 <VgaText::combineCharAndColour(char, unsigned char)>
c0017006:	5a                   	pop    edx
c0017007:	6b d7 50             	imul   edx,edi,0x50
c001700a:	59                   	pop    ecx
c001700b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001700e:	01 f2                	add    edx,esi
c0017010:	0f b7 d2             	movzx  edx,dx
c0017013:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017017:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c001701d:	75 28                	jne    c0017047 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c001701f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017027:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001702b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001702f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017033:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017037:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001703b:	83 c4 1c             	add    esp,0x1c
c001703e:	5b                   	pop    ebx
c001703f:	5e                   	pop    esi
c0017040:	5f                   	pop    edi
c0017041:	5d                   	pop    ebp
c0017042:	e9 f1 0b 01 00       	jmp    c0027c38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017047:	83 c4 1c             	add    esp,0x1c
c001704a:	5b                   	pop    ebx
c001704b:	5e                   	pop    esi
c001704c:	5f                   	pop    edi
c001704d:	5d                   	pop    ebp
c001704e:	c3                   	ret    
c001704f:	90                   	nop

c0017050 <VgaText::getCursorX()>:
c0017050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017054:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017057:	c3                   	ret    

c0017058 <VgaText::getCursorY()>:
c0017058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001705c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001705f:	c3                   	ret    

c0017060 <VgaText::setCursor(int, int)>:
c0017060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017068:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001706b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001706f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017072:	e9 b1 fd ff ff       	jmp    c0016e28 <VgaText::updateCursor()>

c0017077 <setActiveTerminal(VgaText*)>:
c0017077:	53                   	push   ebx
c0017078:	83 ec 08             	sub    esp,0x8
c001707b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001707f:	85 db                	test   ebx,ebx
c0017081:	75 11                	jne    c0017094 <setActiveTerminal(VgaText*)+0x1d>
c0017083:	c7 44 24 10 90 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031190
c001708b:	83 c4 08             	add    esp,0x8
c001708e:	5b                   	pop    ebx
c001708f:	e9 06 91 00 00       	jmp    c002019a <KePanic(char const*)>
c0017094:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017099:	85 c0                	test   eax,eax
c001709b:	74 0c                	je     c00170a9 <setActiveTerminal(VgaText*)+0x32>
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	50                   	push   eax
c00170a1:	e8 82 fd ff ff       	call   c0016e28 <VgaText::updateCursor()>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	50                   	push   eax
c00170aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00170ad:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c00170b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00170b6:	53                   	push   ebx
c00170b7:	e8 a4 ff ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c00170bc:	83 c4 18             	add    esp,0x18
c00170bf:	5b                   	pop    ebx
c00170c0:	c3                   	ret    
c00170c1:	90                   	nop

c00170c2 <VgaText::clearScreen()>:
c00170c2:	57                   	push   edi
c00170c3:	56                   	push   esi
c00170c4:	31 f6                	xor    esi,esi
c00170c6:	53                   	push   ebx
c00170c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170cb:	52                   	push   edx
c00170cc:	6a 00                	push   0x0
c00170ce:	6a 00                	push   0x0
c00170d0:	53                   	push   ebx
c00170d1:	e8 8a ff ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00170e0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00170e3:	7e 20                	jle    c0017105 <VgaText::clearScreen()+0x43>
c00170e5:	31 ff                	xor    edi,edi
c00170e7:	50                   	push   eax
c00170e8:	50                   	push   eax
c00170e9:	56                   	push   esi
c00170ea:	57                   	push   edi
c00170eb:	47                   	inc    edi
c00170ec:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170ef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170f2:	6a 20                	push   0x20
c00170f4:	53                   	push   ebx
c00170f5:	e8 c6 fe ff ff       	call   c0016fc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00170fa:	83 c4 20             	add    esp,0x20
c00170fd:	83 ff 50             	cmp    edi,0x50
c0017100:	75 e5                	jne    c00170e7 <VgaText::clearScreen()+0x25>
c0017102:	46                   	inc    esi
c0017103:	eb db                	jmp    c00170e0 <VgaText::clearScreen()+0x1e>
c0017105:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001710c:	5b                   	pop    ebx
c001710d:	5e                   	pop    esi
c001710e:	5f                   	pop    edi
c001710f:	c3                   	ret    

c0017110 <VgaText::setCursorX(int)>:
c0017110:	83 ec 10             	sub    esp,0x10
c0017113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017117:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001711a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001711e:	50                   	push   eax
c001711f:	e8 3c ff ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c0017124:	83 c4 1c             	add    esp,0x1c
c0017127:	c3                   	ret    

c0017128 <VgaText::setCursorY(int)>:
c0017128:	83 ec 10             	sub    esp,0x10
c001712b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001712f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017133:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017136:	50                   	push   eax
c0017137:	e8 24 ff ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c001713c:	83 c4 1c             	add    esp,0x1c
c001713f:	c3                   	ret    

c0017140 <VgaText::incrementCursor(bool)>:
c0017140:	56                   	push   esi
c0017141:	53                   	push   ebx
c0017142:	51                   	push   ecx
c0017143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017147:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001714b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001714e:	40                   	inc    eax
c001714f:	83 f8 50             	cmp    eax,0x50
c0017152:	74 05                	je     c0017159 <VgaText::incrementCursor(bool)+0x19>
c0017154:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017157:	eb 24                	jmp    c001717d <VgaText::incrementCursor(bool)+0x3d>
c0017159:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017160:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017163:	8d 50 01             	lea    edx,[eax+0x1]
c0017166:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017169:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001716c:	75 0f                	jne    c001717d <VgaText::incrementCursor(bool)+0x3d>
c001716e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	53                   	push   ebx
c0017175:	e8 a4 fd ff ff       	call   c0016f1e <VgaText::scrollScreen()>
c001717a:	83 c4 10             	add    esp,0x10
c001717d:	89 f0                	mov    eax,esi
c001717f:	84 c0                	test   al,al
c0017181:	74 0c                	je     c001718f <VgaText::incrementCursor(bool)+0x4f>
c0017183:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017187:	5a                   	pop    edx
c0017188:	5b                   	pop    ebx
c0017189:	5e                   	pop    esi
c001718a:	e9 99 fc ff ff       	jmp    c0016e28 <VgaText::updateCursor()>
c001718f:	58                   	pop    eax
c0017190:	5b                   	pop    ebx
c0017191:	5e                   	pop    esi
c0017192:	c3                   	ret    
c0017193:	90                   	nop

c0017194 <VgaText::decrementCursor(bool)>:
c0017194:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017198:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001719c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001719f:	85 c0                	test   eax,eax
c00171a1:	74 04                	je     c00171a7 <VgaText::decrementCursor(bool)+0x13>
c00171a3:	48                   	dec    eax
c00171a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00171a7:	84 c9                	test   cl,cl
c00171a9:	74 09                	je     c00171b4 <VgaText::decrementCursor(bool)+0x20>
c00171ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00171af:	e9 74 fc ff ff       	jmp    c0016e28 <VgaText::updateCursor()>
c00171b4:	c3                   	ret    
c00171b5:	90                   	nop

c00171b6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00171b6:	53                   	push   ebx
c00171b7:	83 ec 08             	sub    esp,0x8
c00171ba:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00171bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171cb:	83 f8 07             	cmp    eax,0x7
c00171ce:	75 21                	jne    c00171f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00171d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171d8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00171e0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00171e8:	83 c4 08             	add    esp,0x8
c00171eb:	5b                   	pop    ebx
c00171ec:	e9 d6 3a 00 00       	jmp    c001acc7 <Krnl::beep(int, int, bool)>
c00171f1:	83 f8 0d             	cmp    eax,0xd
c00171f4:	75 09                	jne    c00171ff <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171fd:	eb 2d                	jmp    c001722c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00171ff:	83 f8 0a             	cmp    eax,0xa
c0017202:	75 31                	jne    c0017235 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0017204:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001720b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001720e:	8d 50 01             	lea    edx,[eax+0x1]
c0017211:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017214:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017217:	75 0f                	jne    c0017228 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017219:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	53                   	push   ebx
c0017220:	e8 f9 fc ff ff       	call   c0016f1e <VgaText::scrollScreen()>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001722c:	83 c4 08             	add    esp,0x8
c001722f:	5b                   	pop    ebx
c0017230:	e9 f3 fb ff ff       	jmp    c0016e28 <VgaText::updateCursor()>
c0017235:	83 f8 08             	cmp    eax,0x8
c0017238:	75 25                	jne    c001725f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001723a:	50                   	push   eax
c001723b:	50                   	push   eax
c001723c:	6a 01                	push   0x1
c001723e:	53                   	push   ebx
c001723f:	e8 50 ff ff ff       	call   c0017194 <VgaText::decrementCursor(bool)>
c0017244:	5a                   	pop    edx
c0017245:	59                   	pop    ecx
c0017246:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017249:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001724c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001724f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017252:	6a 20                	push   0x20
c0017254:	53                   	push   ebx
c0017255:	e8 66 fd ff ff       	call   c0016fc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001725a:	83 c4 28             	add    esp,0x28
c001725d:	5b                   	pop    ebx
c001725e:	c3                   	ret    
c001725f:	83 ec 08             	sub    esp,0x8
c0017262:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017265:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017268:	51                   	push   ecx
c0017269:	52                   	push   edx
c001726a:	50                   	push   eax
c001726b:	53                   	push   ebx
c001726c:	e8 4f fd ff ff       	call   c0016fc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017271:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017275:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001727d:	83 c4 28             	add    esp,0x28
c0017280:	5b                   	pop    ebx
c0017281:	e9 ba fe ff ff       	jmp    c0017140 <VgaText::incrementCursor(bool)>

c0017286 <VgaText::putchar(char)>:
c0017286:	57                   	push   edi
c0017287:	56                   	push   esi
c0017288:	53                   	push   ebx
c0017289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001728d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017291:	0f be c2             	movsx  eax,dl
c0017294:	83 f8 5b             	cmp    eax,0x5b
c0017297:	75 18                	jne    c00172b1 <VgaText::putchar(char)+0x2b>
c0017299:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001729d:	74 20                	je     c00172bf <VgaText::putchar(char)+0x39>
c001729f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00172a5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00172ac:	e9 b8 00 00 00       	jmp    c0017369 <VgaText::putchar(char)+0xe3>
c00172b1:	83 f8 1b             	cmp    eax,0x1b
c00172b4:	75 09                	jne    c00172bf <VgaText::putchar(char)+0x39>
c00172b6:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00172ba:	e9 aa 00 00 00       	jmp    c0017369 <VgaText::putchar(char)+0xe3>
c00172bf:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00172c3:	89 f9                	mov    ecx,edi
c00172c5:	84 c9                	test   cl,cl
c00172c7:	0f 84 8c 00 00 00    	je     c0017359 <VgaText::putchar(char)+0xd3>
c00172cd:	8d 4a c0             	lea    ecx,[edx-0x40]
c00172d0:	80 f9 3e             	cmp    cl,0x3e
c00172d3:	77 70                	ja     c0017345 <VgaText::putchar(char)+0xbf>
c00172d5:	83 f8 6d             	cmp    eax,0x6d
c00172d8:	75 3f                	jne    c0017319 <VgaText::putchar(char)+0x93>
c00172da:	31 f6                	xor    esi,esi
c00172dc:	31 d2                	xor    edx,edx
c00172de:	31 c0                	xor    eax,eax
c00172e0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00172e3:	7e 25                	jle    c001730a <VgaText::putchar(char)+0x84>
c00172e5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00172ea:	83 fa 3b             	cmp    edx,0x3b
c00172ed:	75 0f                	jne    c00172fe <VgaText::putchar(char)+0x78>
c00172ef:	50                   	push   eax
c00172f0:	53                   	push   ebx
c00172f1:	e8 48 fb ff ff       	call   c0016e3e <VgaText::doANSI_SGR(int)>
c00172f6:	31 d2                	xor    edx,edx
c00172f8:	59                   	pop    ecx
c00172f9:	58                   	pop    eax
c00172fa:	31 c0                	xor    eax,eax
c00172fc:	eb 09                	jmp    c0017307 <VgaText::putchar(char)+0x81>
c00172fe:	6b c0 0a             	imul   eax,eax,0xa
c0017301:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0017305:	89 fa                	mov    edx,edi
c0017307:	46                   	inc    esi
c0017308:	eb d6                	jmp    c00172e0 <VgaText::putchar(char)+0x5a>
c001730a:	84 d2                	test   dl,dl
c001730c:	74 2f                	je     c001733d <VgaText::putchar(char)+0xb7>
c001730e:	50                   	push   eax
c001730f:	53                   	push   ebx
c0017310:	e8 29 fb ff ff       	call   c0016e3e <VgaText::doANSI_SGR(int)>
c0017315:	58                   	pop    eax
c0017316:	5a                   	pop    edx
c0017317:	eb 24                	jmp    c001733d <VgaText::putchar(char)+0xb7>
c0017319:	83 f8 4a             	cmp    eax,0x4a
c001731c:	75 1f                	jne    c001733d <VgaText::putchar(char)+0xb7>
c001731e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017322:	75 19                	jne    c001733d <VgaText::putchar(char)+0xb7>
c0017324:	83 ec 0c             	sub    esp,0xc
c0017327:	53                   	push   ebx
c0017328:	e8 95 fd ff ff       	call   c00170c2 <VgaText::clearScreen()>
c001732d:	83 c4 0c             	add    esp,0xc
c0017330:	6a 00                	push   0x0
c0017332:	6a 00                	push   0x0
c0017334:	53                   	push   ebx
c0017335:	e8 26 fd ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017343:	eb 24                	jmp    c0017369 <VgaText::putchar(char)+0xe3>
c0017345:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017348:	83 f8 0e             	cmp    eax,0xe
c001734b:	7f 1c                	jg     c0017369 <VgaText::putchar(char)+0xe3>
c001734d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017350:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017353:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0017357:	eb 10                	jmp    c0017369 <VgaText::putchar(char)+0xe3>
c0017359:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001735c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001735f:	50                   	push   eax
c0017360:	53                   	push   ebx
c0017361:	e8 50 fe ff ff       	call   c00171b6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	5b                   	pop    ebx
c001736a:	5e                   	pop    esi
c001736b:	5f                   	pop    edi
c001736c:	c3                   	ret    
c001736d:	90                   	nop

c001736e <VgaText::putx(unsigned int)>:
c001736e:	57                   	push   edi
c001736f:	b9 11 00 00 00       	mov    ecx,0x11
c0017374:	56                   	push   esi
c0017375:	be 9e 11 03 c0       	mov    esi,0xc003119e
c001737a:	53                   	push   ebx
c001737b:	83 ec 20             	sub    esp,0x20
c001737e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017382:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017386:	fc                   	cld    
c0017387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017389:	be 08 00 00 00       	mov    esi,0x8
c001738e:	50                   	push   eax
c001738f:	50                   	push   eax
c0017390:	89 d8                	mov    eax,ebx
c0017392:	c1 e8 1c             	shr    eax,0x1c
c0017395:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001739a:	c1 e3 04             	shl    ebx,0x4
c001739d:	50                   	push   eax
c001739e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173a2:	e8 df fe ff ff       	call   c0017286 <VgaText::putchar(char)>
c00173a7:	83 c4 10             	add    esp,0x10
c00173aa:	4e                   	dec    esi
c00173ab:	75 e1                	jne    c001738e <VgaText::putx(unsigned int)+0x20>
c00173ad:	83 c4 20             	add    esp,0x20
c00173b0:	5b                   	pop    ebx
c00173b1:	5e                   	pop    esi
c00173b2:	5f                   	pop    edi
c00173b3:	c3                   	ret    

c00173b4 <VgaText::puts(char const*)>:
c00173b4:	53                   	push   ebx
c00173b5:	83 ec 08             	sub    esp,0x8
c00173b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00173bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00173bf:	85 c0                	test   eax,eax
c00173c1:	74 12                	je     c00173d5 <VgaText::puts(char const*)+0x21>
c00173c3:	51                   	push   ecx
c00173c4:	43                   	inc    ebx
c00173c5:	51                   	push   ecx
c00173c6:	50                   	push   eax
c00173c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173cb:	e8 b6 fe ff ff       	call   c0017286 <VgaText::putchar(char)>
c00173d0:	83 c4 10             	add    esp,0x10
c00173d3:	eb e7                	jmp    c00173bc <VgaText::puts(char const*)+0x8>
c00173d5:	83 c4 08             	add    esp,0x8
c00173d8:	5b                   	pop    ebx
c00173d9:	c3                   	ret    

c00173da <VgaText::write(unsigned long long, void*, int*)>:
c00173da:	55                   	push   ebp
c00173db:	57                   	push   edi
c00173dc:	56                   	push   esi
c00173dd:	53                   	push   ebx
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173e5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00173e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173ed:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173f4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00173f7:	39 eb                	cmp    ebx,ebp
c00173f9:	74 13                	je     c001740e <VgaText::write(unsigned long long, void*, int*)+0x34>
c00173fb:	50                   	push   eax
c00173fc:	43                   	inc    ebx
c00173fd:	50                   	push   eax
c00173fe:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0017402:	50                   	push   eax
c0017403:	56                   	push   esi
c0017404:	e8 7d fe ff ff       	call   c0017286 <VgaText::putchar(char)>
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	eb e9                	jmp    c00173f7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001740e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017419:	89 38                	mov    DWORD PTR [eax],edi
c001741b:	83 c4 0c             	add    esp,0xc
c001741e:	31 c0                	xor    eax,eax
c0017420:	5b                   	pop    ebx
c0017421:	5e                   	pop    esi
c0017422:	5f                   	pop    edi
c0017423:	5d                   	pop    ebp
c0017424:	c3                   	ret    
c0017425:	90                   	nop

c0017426 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017426:	55                   	push   ebp
c0017427:	57                   	push   edi
c0017428:	56                   	push   esi
c0017429:	53                   	push   ebx
c001742a:	83 ec 0c             	sub    esp,0xc
c001742d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017431:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017436:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c001743d:	50                   	push   eax
c001743e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017443:	50                   	push   eax
c0017444:	e8 c3 fa ff ff       	call   c0016f0c <VgaText::combineColours(unsigned char, unsigned char)>
c0017449:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001744d:	5a                   	pop    edx
c001744e:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017451:	59                   	pop    ecx
c0017452:	0f b6 f8             	movzx  edi,al
c0017455:	0f b7 db             	movzx  ebx,bx
c0017458:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001745c:	01 db                	add    ebx,ebx
c001745e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017461:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017464:	85 c0                	test   eax,eax
c0017466:	0f 84 ef 00 00 00    	je     c001755b <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001746c:	83 f8 0d             	cmp    eax,0xd
c001746f:	75 0c                	jne    c001747d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017471:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017478:	e9 d8 00 00 00       	jmp    c0017555 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001747d:	83 f8 0a             	cmp    eax,0xa
c0017480:	75 44                	jne    c00174c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017482:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017489:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001748c:	8d 48 01             	lea    ecx,[eax+0x1]
c001748f:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0017492:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017495:	75 0f                	jne    c00174a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017497:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001749a:	83 ec 0c             	sub    esp,0xc
c001749d:	55                   	push   ebp
c001749e:	e8 7b fa ff ff       	call   c0016f1e <VgaText::scrollScreen()>
c00174a3:	83 c4 10             	add    esp,0x10
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	55                   	push   ebp
c00174aa:	e8 79 f9 ff ff       	call   c0016e28 <VgaText::updateCursor()>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00174b6:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00174b9:	0f b7 db             	movzx  ebx,bx
c00174bc:	01 db                	add    ebx,ebx
c00174be:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00174c1:	e9 8f 00 00 00       	jmp    c0017555 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174c6:	83 f8 08             	cmp    eax,0x8
c00174c9:	75 34                	jne    c00174ff <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00174cb:	51                   	push   ecx
c00174cc:	51                   	push   ecx
c00174cd:	6a 01                	push   0x1
c00174cf:	55                   	push   ebp
c00174d0:	e8 bf fc ff ff       	call   c0017194 <VgaText::decrementCursor(bool)>
c00174d5:	5b                   	pop    ebx
c00174d6:	58                   	pop    eax
c00174d7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00174da:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00174dd:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00174e0:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00174e3:	6a 20                	push   0x20
c00174e5:	55                   	push   ebp
c00174e6:	e8 d5 fa ff ff       	call   c0016fc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174eb:	83 c4 20             	add    esp,0x20
c00174ee:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00174f2:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00174f5:	0f b7 db             	movzx  ebx,bx
c00174f8:	01 db                	add    ebx,ebx
c00174fa:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00174fd:	eb 56                	jmp    c0017555 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174ff:	52                   	push   edx
c0017500:	52                   	push   edx
c0017501:	57                   	push   edi
c0017502:	50                   	push   eax
c0017503:	e8 a8 fa ff ff       	call   c0016fb0 <VgaText::combineCharAndColour(char, unsigned char)>
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	66 89 03             	mov    WORD PTR [ebx],ax
c001750e:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017514:	75 1d                	jne    c0017533 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017516:	83 ec 0c             	sub    esp,0xc
c0017519:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001751c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001751f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017523:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017527:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001752a:	50                   	push   eax
c001752b:	e8 08 07 01 00       	call   c0027c38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017530:	83 c4 20             	add    esp,0x20
c0017533:	50                   	push   eax
c0017534:	83 c3 02             	add    ebx,0x2
c0017537:	50                   	push   eax
c0017538:	6a 00                	push   0x0
c001753a:	55                   	push   ebp
c001753b:	e8 00 fc ff ff       	call   c0017140 <VgaText::incrementCursor(bool)>
c0017540:	83 c4 10             	add    esp,0x10
c0017543:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0017547:	75 0c                	jne    c0017555 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017549:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001754d:	0f b7 db             	movzx  ebx,bx
c0017550:	01 db                	add    ebx,ebx
c0017552:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017555:	46                   	inc    esi
c0017556:	e9 06 ff ff ff       	jmp    c0017461 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001755b:	83 ec 0c             	sub    esp,0xc
c001755e:	55                   	push   ebp
c001755f:	e8 c4 f8 ff ff       	call   c0016e28 <VgaText::updateCursor()>
c0017564:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001756b:	83 c4 1c             	add    esp,0x1c
c001756e:	5b                   	pop    ebx
c001756f:	5e                   	pop    esi
c0017570:	5f                   	pop    edi
c0017571:	5d                   	pop    ebp
c0017572:	c3                   	ret    
c0017573:	90                   	nop

c0017574 <VgaText::VgaText(char const*)>:
c0017574:	56                   	push   esi
c0017575:	53                   	push   ebx
c0017576:	83 ec 04             	sub    esp,0x4
c0017579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757d:	83 ec 08             	sub    esp,0x8
c0017580:	6a 00                	push   0x0
c0017582:	50                   	push   eax
c0017583:	e8 26 05 00 00       	call   c0017aae <UnixFile::UnixFile(int)>
c0017588:	83 c4 10             	add    esp,0x10
c001758b:	ba c4 11 03 c0       	mov    edx,0xc00311c4
c0017590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017594:	89 10                	mov    DWORD PTR [eax],edx
c0017596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00175a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00175ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00175b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00175bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00175c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175cb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00175d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00175dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00175e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ec:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175f3:	83 ec 0c             	sub    esp,0xc
c00175f6:	6a 01                	push   0x1
c00175f8:	e8 00 09 00 00       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	89 c2                	mov    edx,eax
c0017602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017606:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017609:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001760f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017613:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017616:	89 c6                	mov    esi,eax
c0017618:	e8 cd f0 ff ff       	call   c00166ea <Phys::allocatePage()>
c001761d:	68 05 0c 00 00       	push   0xc05
c0017622:	56                   	push   esi
c0017623:	50                   	push   eax
c0017624:	53                   	push   ebx
c0017625:	e8 dc 0f 00 00       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c001762a:	83 c4 10             	add    esp,0x10
c001762d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017631:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017634:	83 ec 04             	sub    esp,0x4
c0017637:	68 a0 0f 00 00       	push   0xfa0
c001763c:	6a 00                	push   0x0
c001763e:	50                   	push   eax
c001763f:	e8 ac 8e fe ff       	call   c00004f0 <memset>
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	83 ec 04             	sub    esp,0x4
c001764a:	6a 00                	push   0x0
c001764c:	6a 07                	push   0x7
c001764e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017652:	e8 7b f8 ff ff       	call   c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	83 ec 04             	sub    esp,0x4
c001765d:	6a 00                	push   0x0
c001765f:	6a 00                	push   0x0
c0017661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017665:	e8 f6 f9 ff ff       	call   c0017060 <VgaText::setCursor(int, int)>
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	83 ec 0c             	sub    esp,0xc
c0017670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017674:	e8 49 fa ff ff       	call   c00170c2 <VgaText::clearScreen()>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017680:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017688:	05 82 00 00 00       	add    eax,0x82
c001768d:	83 ec 04             	sub    esp,0x4
c0017690:	68 80 00 00 00       	push   0x80
c0017695:	6a 00                	push   0x0
c0017697:	50                   	push   eax
c0017698:	e8 53 8e fe ff       	call   c00004f0 <memset>
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a4:	05 02 01 00 00       	add    eax,0x102
c00176a9:	83 ec 04             	sub    esp,0x4
c00176ac:	68 80 00 00 00       	push   0x80
c00176b1:	6a 00                	push   0x0
c00176b3:	50                   	push   eax
c00176b4:	e8 37 8e fe ff       	call   c00004f0 <memset>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	90                   	nop
c00176bd:	83 c4 04             	add    esp,0x4
c00176c0:	5b                   	pop    ebx
c00176c1:	5e                   	pop    esi
c00176c2:	c3                   	ret    
c00176c3:	90                   	nop

c00176c4 <VgaText::receiveKey(unsigned char)>:
c00176c4:	55                   	push   ebp
c00176c5:	57                   	push   edi
c00176c6:	56                   	push   esi
c00176c7:	53                   	push   ebx
c00176c8:	83 ec 2c             	sub    esp,0x2c
c00176cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176cf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176d3:	89 fd                	mov    ebp,edi
c00176d5:	81 e5 ff 00 00 00    	and    ebp,0xff
c00176db:	0f 84 48 01 00 00    	je     c0017829 <VgaText::receiveKey(unsigned char)+0x165>
c00176e1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00176e7:	83 fd 08             	cmp    ebp,0x8
c00176ea:	75 6a                	jne    c0017756 <VgaText::receiveKey(unsigned char)+0x92>
c00176ec:	83 ec 0c             	sub    esp,0xc
c00176ef:	56                   	push   esi
c00176f0:	e8 8b 8e fe ff       	call   c0000580 <strlen>
c00176f5:	83 c4 10             	add    esp,0x10
c00176f8:	85 c0                	test   eax,eax
c00176fa:	0f 84 ef 00 00 00    	je     c00177ef <VgaText::receiveKey(unsigned char)+0x12b>
c0017700:	50                   	push   eax
c0017701:	50                   	push   eax
c0017702:	6a 08                	push   0x8
c0017704:	53                   	push   ebx
c0017705:	e8 7c fb ff ff       	call   c0017286 <VgaText::putchar(char)>
c001770a:	89 34 24             	mov    DWORD PTR [esp],esi
c001770d:	e8 6e 8e fe ff       	call   c0000580 <strlen>
c0017712:	83 c4 10             	add    esp,0x10
c0017715:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001771d:	83 fa 1f             	cmp    edx,0x1f
c0017720:	89 d0                	mov    eax,edx
c0017722:	7f 1c                	jg     c0017740 <VgaText::receiveKey(unsigned char)+0x7c>
c0017724:	83 e8 08             	sub    eax,0x8
c0017727:	3c 02                	cmp    al,0x2
c0017729:	76 15                	jbe    c0017740 <VgaText::receiveKey(unsigned char)+0x7c>
c001772b:	83 fa 0d             	cmp    edx,0xd
c001772e:	74 10                	je     c0017740 <VgaText::receiveKey(unsigned char)+0x7c>
c0017730:	57                   	push   edi
c0017731:	57                   	push   edi
c0017732:	68 af 11 03 c0       	push   0xc00311af
c0017737:	53                   	push   ebx
c0017738:	e8 77 fc ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	83 ec 0c             	sub    esp,0xc
c0017743:	56                   	push   esi
c0017744:	e8 37 8e fe ff       	call   c0000580 <strlen>
c0017749:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017751:	e9 96 00 00 00       	jmp    c00177ec <VgaText::receiveKey(unsigned char)+0x128>
c0017756:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001775c:	83 ec 0c             	sub    esp,0xc
c001775f:	50                   	push   eax
c0017760:	e8 1b 8e fe ff       	call   c0000580 <strlen>
c0017765:	89 34 24             	mov    DWORD PTR [esp],esi
c0017768:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001776c:	e8 0f 8e fe ff       	call   c0000580 <strlen>
c0017771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001777c:	3d 80 00 00 00       	cmp    eax,0x80
c0017781:	0f 87 a2 00 00 00    	ja     c0017829 <VgaText::receiveKey(unsigned char)+0x165>
c0017787:	8d 47 ff             	lea    eax,[edi-0x1]
c001778a:	3c 1e                	cmp    al,0x1e
c001778c:	77 35                	ja     c00177c3 <VgaText::receiveKey(unsigned char)+0xff>
c001778e:	8d 47 f7             	lea    eax,[edi-0x9]
c0017791:	3c 01                	cmp    al,0x1
c0017793:	76 2e                	jbe    c00177c3 <VgaText::receiveKey(unsigned char)+0xff>
c0017795:	83 fd 0d             	cmp    ebp,0xd
c0017798:	74 29                	je     c00177c3 <VgaText::receiveKey(unsigned char)+0xff>
c001779a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001779d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177a0:	68 b5 11 03 c0       	push   0xc00311b5
c00177a5:	53                   	push   ebx
c00177a6:	e8 7b fc ff ff       	call   c0017426 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177ab:	8d 47 40             	lea    eax,[edi+0x40]
c00177ae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177b1:	0f b6 c0             	movzx  eax,al
c00177b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177b7:	50                   	push   eax
c00177b8:	53                   	push   ebx
c00177b9:	e8 f8 f9 ff ff       	call   c00171b6 <VgaText::putchar(char, VgaColour, VgaColour)>
c00177be:	83 c4 20             	add    esp,0x20
c00177c1:	eb 11                	jmp    c00177d4 <VgaText::receiveKey(unsigned char)+0x110>
c00177c3:	51                   	push   ecx
c00177c4:	89 f8                	mov    eax,edi
c00177c6:	51                   	push   ecx
c00177c7:	0f be c0             	movsx  eax,al
c00177ca:	50                   	push   eax
c00177cb:	53                   	push   ebx
c00177cc:	e8 b5 fa ff ff       	call   c0017286 <VgaText::putchar(char)>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177d9:	89 f8                	mov    eax,edi
c00177db:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00177df:	52                   	push   edx
c00177e0:	52                   	push   edx
c00177e1:	8d 44 24 26          	lea    eax,[esp+0x26]
c00177e5:	50                   	push   eax
c00177e6:	56                   	push   esi
c00177e7:	e8 84 90 fe ff       	call   c0000870 <strcat>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00177f6:	75 0f                	jne    c0017807 <VgaText::receiveKey(unsigned char)+0x143>
c00177f8:	83 fd 1c             	cmp    ebp,0x1c
c00177fb:	77 2c                	ja     c0017829 <VgaText::receiveKey(unsigned char)+0x165>
c00177fd:	b8 08 04 00 10       	mov    eax,0x10000408
c0017802:	0f a3 e8             	bt     eax,ebp
c0017805:	73 22                	jae    c0017829 <VgaText::receiveKey(unsigned char)+0x165>
c0017807:	50                   	push   eax
c0017808:	81 c3 02 01 00 00    	add    ebx,0x102
c001780e:	50                   	push   eax
c001780f:	56                   	push   esi
c0017810:	53                   	push   ebx
c0017811:	e8 5a 90 fe ff       	call   c0000870 <strcat>
c0017816:	83 c4 0c             	add    esp,0xc
c0017819:	68 80 00 00 00       	push   0x80
c001781e:	6a 00                	push   0x0
c0017820:	56                   	push   esi
c0017821:	e8 ca 8c fe ff       	call   c00004f0 <memset>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	83 c4 2c             	add    esp,0x2c
c001782c:	5b                   	pop    ebx
c001782d:	5e                   	pop    esi
c001782e:	5f                   	pop    edi
c001782f:	5d                   	pop    ebp
c0017830:	c3                   	ret    
c0017831:	90                   	nop

c0017832 <VgaText::doUpdate()>:
c0017832:	c3                   	ret    
c0017833:	90                   	nop

c0017834 <TSS::TSS()>:
c0017834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017838:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001783f:	90                   	nop
c0017840:	c3                   	ret    
c0017841:	90                   	nop
c0017842:	66 90                	xchg   ax,ax

c0017844 <TSS::setESP(unsigned long)>:
c0017844:	55                   	push   ebp
c0017845:	89 e5                	mov    ebp,esp
c0017847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001784a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017850:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017853:	90                   	nop
c0017854:	5d                   	pop    ebp
c0017855:	c3                   	ret    
c0017856:	66 90                	xchg   ax,ax

c0017858 <TSS::flush()>:
c0017858:	55                   	push   ebp
c0017859:	89 e5                	mov    ebp,esp
c001785b:	83 ec 10             	sub    esp,0x10
c001785e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017861:	8b 00                	mov    eax,DWORD PTR [eax]
c0017863:	83 c8 03             	or     eax,0x3
c0017866:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001786a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001786e:	66 89 d0             	mov    ax,dx
c0017871:	0f 00 d8             	ltr    ax
c0017874:	90                   	nop
c0017875:	c9                   	leave  
c0017876:	c3                   	ret    
c0017877:	90                   	nop

c0017878 <TSS::setup(unsigned long, unsigned long)>:
c0017878:	55                   	push   ebp
c0017879:	89 e5                	mov    ebp,esp
c001787b:	83 ec 18             	sub    esp,0x18
c001787e:	83 ec 0c             	sub    esp,0xc
c0017881:	6a 68                	push   0x68
c0017883:	e8 53 eb ff ff       	call   c00163db <malloc>
c0017888:	83 c4 10             	add    esp,0x10
c001788b:	89 c2                	mov    edx,eax
c001788d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017890:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017899:	83 ec 04             	sub    esp,0x4
c001789c:	6a 68                	push   0x68
c001789e:	6a 00                	push   0x0
c00178a0:	50                   	push   eax
c00178a1:	e8 4a 8c fe ff       	call   c00004f0 <memset>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178af:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00178b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178bb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00178c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178d3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00178d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178df:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00178e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178eb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00178f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178f7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00178fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017903:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001790c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001790f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001791b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001791e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017927:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001792a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001792d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017933:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001793a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001793d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017940:	0f 20 da             	mov    edx,cr3
c0017943:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017946:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017949:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001794c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001794f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017952:	83 ec 08             	sub    esp,0x8
c0017955:	50                   	push   eax
c0017956:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017959:	50                   	push   eax
c001795a:	e8 ed e2 ff ff       	call   c0015c4c <GDTEntry::setBase(unsigned int)>
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	83 ec 08             	sub    esp,0x8
c0017965:	6a 68                	push   0x68
c0017967:	8d 45 ec             	lea    eax,[ebp-0x14]
c001796a:	50                   	push   eax
c001796b:	e8 f8 e2 ff ff       	call   c0015c68 <GDTEntry::setLimit(unsigned int)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017977:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001797a:	83 e0 0f             	and    eax,0xf
c001797d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017980:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017983:	83 c8 40             	or     eax,0x40
c0017986:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017989:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001798e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017994:	05 78 01 00 00       	add    eax,0x178
c0017999:	83 ec 04             	sub    esp,0x4
c001799c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001799f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179a2:	50                   	push   eax
c00179a3:	e8 f4 e2 ff ff       	call   c0015c9c <GDT::addEntry(GDTEntry)>
c00179a8:	83 c4 10             	add    esp,0x10
c00179ab:	89 c2                	mov    edx,eax
c00179ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b0:	89 10                	mov    DWORD PTR [eax],edx
c00179b2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179bd:	05 78 01 00 00       	add    eax,0x178
c00179c2:	83 ec 0c             	sub    esp,0xc
c00179c5:	50                   	push   eax
c00179c6:	e8 fb e2 ff ff       	call   c0015cc6 <GDT::flush()>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00179d3:	c9                   	leave  
c00179d4:	c3                   	ret    
c00179d5:	90                   	nop

c00179d6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00179d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179e6:	75 08                	jne    c00179f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00179e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00179ee:	eb 38                	jmp    c0017a28 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00179f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00179f5:	75 17                	jne    c0017a0e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00179f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a0b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017a0e:	89 c1                	mov    ecx,eax
c0017a10:	83 e1 fd             	and    ecx,0xfffffffd
c0017a13:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017a19:	74 cd                	je     c00179e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a1b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a20:	83 e0 ef             	and    eax,0xffffffef
c0017a23:	83 f8 08             	cmp    eax,0x8
c0017a26:	76 c0                	jbe    c00179e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a28:	31 c0                	xor    eax,eax
c0017a2a:	c3                   	ret    
c0017a2b:	90                   	nop

c0017a2c <ReservedFilename::isAtty()>:
c0017a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a30:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a33:	31 c0                	xor    eax,eax
c0017a35:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017a3b:	74 09                	je     c0017a46 <ReservedFilename::isAtty()+0x1a>
c0017a3d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017a43:	0f 94 c0             	sete   al
c0017a46:	c3                   	ret    
c0017a47:	90                   	nop

c0017a48 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a57:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a5c:	75 08                	jne    c0017a66 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a5e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a64:	eb 3d                	jmp    c0017aa3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a66:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a6b:	75 17                	jne    c0017a84 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a81:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017a84:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017a89:	75 04                	jne    c0017a8f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017a8b:	89 0a                	mov    DWORD PTR [edx],ecx
c0017a8d:	eb 14                	jmp    c0017aa3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a8f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017a94:	74 c8                	je     c0017a5e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017a96:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a9b:	83 e0 ef             	and    eax,0xffffffef
c0017a9e:	83 f8 08             	cmp    eax,0x8
c0017aa1:	76 bb                	jbe    c0017a5e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017aa3:	31 c0                	xor    eax,eax
c0017aa5:	c3                   	ret    

c0017aa6 <UnixFile::getFileDescriptor()>:
c0017aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aad:	c3                   	ret    

c0017aae <UnixFile::UnixFile(int)>:
c0017aae:	53                   	push   ebx
c0017aaf:	83 ec 28             	sub    esp,0x28
c0017ab2:	ba 8c 12 03 c0       	mov    edx,0xc003128c
c0017ab7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017abb:	89 10                	mov    DWORD PTR [eax],edx
c0017abd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017ac5:	0f 8f 90 01 00 00    	jg     c0017c5b <UnixFile::UnixFile(int)+0x1ad>
c0017acb:	a1 00 3b 03 c0       	mov    eax,ds:0xc0033b00
c0017ad0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad3:	89 15 00 3b 03 c0    	mov    DWORD PTR ds:0xc0033b00,edx
c0017ad9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017add:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017ae0:	83 ec 08             	sub    esp,0x8
c0017ae3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017ae7:	68 98 aa 03 c0       	push   0xc003aa98
c0017aec:	e8 e7 6d 01 00       	call   c002e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017af9:	83 f0 01             	xor    eax,0x1
c0017afc:	0f b6 c0             	movzx  eax,al
c0017aff:	85 c0                	test   eax,eax
c0017b01:	0f 84 55 01 00 00    	je     c0017c5c <UnixFile::UnixFile(int)+0x1ae>
c0017b07:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017b0e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017b16:	83 ec 0c             	sub    esp,0xc
c0017b19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b1d:	e8 b9 e8 ff ff       	call   c00163db <malloc>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	89 c3                	mov    ebx,eax
c0017b27:	83 ec 08             	sub    esp,0x8
c0017b2a:	68 03 ff ff 0f       	push   0xfffff03
c0017b2f:	53                   	push   ebx
c0017b30:	e8 2d 01 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017b3e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017b46:	83 ec 0c             	sub    esp,0xc
c0017b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b4d:	e8 89 e8 ff ff       	call   c00163db <malloc>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	89 c3                	mov    ebx,eax
c0017b57:	83 ec 08             	sub    esp,0x8
c0017b5a:	68 01 ff ff 0f       	push   0xfffff01
c0017b5f:	53                   	push   ebx
c0017b60:	e8 fd 00 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017b65:	83 c4 10             	add    esp,0x10
c0017b68:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b6e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b76:	83 ec 0c             	sub    esp,0xc
c0017b79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b7d:	e8 59 e8 ff ff       	call   c00163db <malloc>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	89 c3                	mov    ebx,eax
c0017b87:	83 ec 08             	sub    esp,0x8
c0017b8a:	68 00 ff ff 0f       	push   0xfffff00
c0017b8f:	53                   	push   ebx
c0017b90:	e8 cd 00 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017b9e:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bad:	e8 29 e8 ff ff       	call   c00163db <malloc>
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	89 c3                	mov    ebx,eax
c0017bb7:	83 ec 08             	sub    esp,0x8
c0017bba:	68 02 ff ff 0f       	push   0xfffff02
c0017bbf:	53                   	push   ebx
c0017bc0:	e8 9d 00 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017bc5:	83 c4 10             	add    esp,0x10
c0017bc8:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017bce:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017bd6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017bdb:	7f 7f                	jg     c0017c5c <UnixFile::UnixFile(int)+0x1ae>
c0017bdd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017be5:	83 ec 0c             	sub    esp,0xc
c0017be8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bec:	e8 ea e7 ff ff       	call   c00163db <malloc>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	89 c3                	mov    ebx,eax
c0017bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bfa:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017bff:	83 ec 08             	sub    esp,0x8
c0017c02:	50                   	push   eax
c0017c03:	53                   	push   ebx
c0017c04:	e8 59 00 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c10:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017c17:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c26:	e8 b0 e7 ff ff       	call   c00163db <malloc>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	89 c3                	mov    ebx,eax
c0017c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c34:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017c39:	83 ec 08             	sub    esp,0x8
c0017c3c:	50                   	push   eax
c0017c3d:	53                   	push   ebx
c0017c3e:	e8 1f 00 00 00       	call   c0017c62 <ReservedFilename::ReservedFilename(int)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c4a:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c51:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c56:	e9 7b ff ff ff       	jmp    c0017bd6 <UnixFile::UnixFile(int)+0x128>
c0017c5b:	90                   	nop
c0017c5c:	83 c4 28             	add    esp,0x28
c0017c5f:	5b                   	pop    ebx
c0017c60:	c3                   	ret    
c0017c61:	90                   	nop

c0017c62 <ReservedFilename::ReservedFilename(int)>:
c0017c62:	83 ec 0c             	sub    esp,0xc
c0017c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c69:	83 ec 08             	sub    esp,0x8
c0017c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c70:	50                   	push   eax
c0017c71:	e8 38 fe ff ff       	call   c0017aae <UnixFile::UnixFile(int)>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	ba a8 12 03 c0       	mov    edx,0xc00312a8
c0017c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c82:	89 10                	mov    DWORD PTR [eax],edx
c0017c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c8f:	90                   	nop
c0017c90:	83 c4 0c             	add    esp,0xc
c0017c93:	c3                   	ret    

c0017c94 <UnixFile::~UnixFile()>:
c0017c94:	83 ec 1c             	sub    esp,0x1c
c0017c97:	ba 8c 12 03 c0       	mov    edx,0xc003128c
c0017c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca0:	89 10                	mov    DWORD PTR [eax],edx
c0017ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ca9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017cae:	7f 76                	jg     c0017d26 <UnixFile::~UnixFile()+0x92>
c0017cb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	68 98 aa 03 c0       	push   0xc003aa98
c0017cc0:	e8 e7 6c 01 00       	call   c002e9ac <LinkedList<UnixFile>::getFirstElement()>
c0017cc5:	83 c4 10             	add    esp,0x10
c0017cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	68 98 aa 03 c0       	push   0xc003aa98
c0017cd4:	e8 db 6c 01 00       	call   c002e9b4 <LinkedList<UnixFile>::removeFirst()>
c0017cd9:	83 c4 10             	add    esp,0x10
c0017cdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ce0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017ce4:	74 43                	je     c0017d29 <UnixFile::~UnixFile()+0x95>
c0017ce6:	83 ec 08             	sub    esp,0x8
c0017ce9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ced:	68 98 aa 03 c0       	push   0xc003aa98
c0017cf2:	e8 e1 6b 01 00       	call   c002e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfe:	8d 50 01             	lea    edx,[eax+0x1]
c0017d01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d05:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017d0a:	0f 94 c0             	sete   al
c0017d0d:	0f b6 c0             	movzx  eax,al
c0017d10:	85 c0                	test   eax,eax
c0017d12:	74 a4                	je     c0017cb8 <UnixFile::~UnixFile()+0x24>
c0017d14:	83 ec 0c             	sub    esp,0xc
c0017d17:	68 64 12 03 c0       	push   0xc0031264
c0017d1c:	e8 79 84 00 00       	call   c002019a <KePanic(char const*)>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	eb 92                	jmp    c0017cb8 <UnixFile::~UnixFile()+0x24>
c0017d26:	90                   	nop
c0017d27:	eb 01                	jmp    c0017d2a <UnixFile::~UnixFile()+0x96>
c0017d29:	90                   	nop
c0017d2a:	90                   	nop
c0017d2b:	83 c4 1c             	add    esp,0x1c
c0017d2e:	c3                   	ret    
c0017d2f:	90                   	nop

c0017d30 <UnixFile::~UnixFile()>:
c0017d30:	83 ec 0c             	sub    esp,0xc
c0017d33:	83 ec 0c             	sub    esp,0xc
c0017d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d3a:	e8 55 ff ff ff       	call   c0017c94 <UnixFile::~UnixFile()>
c0017d3f:	83 c4 10             	add    esp,0x10
c0017d42:	83 ec 08             	sub    esp,0x8
c0017d45:	6a 0c                	push   0xc
c0017d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d4b:	e8 c4 13 00 00       	call   c0019114 <operator delete(void*, unsigned long)>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	83 c4 0c             	add    esp,0xc
c0017d56:	c3                   	ret    
c0017d57:	90                   	nop

c0017d58 <ReservedFilename::~ReservedFilename()>:
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	ba a8 12 03 c0       	mov    edx,0xc00312a8
c0017d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d64:	89 10                	mov    DWORD PTR [eax],edx
c0017d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6a:	83 ec 0c             	sub    esp,0xc
c0017d6d:	50                   	push   eax
c0017d6e:	e8 21 ff ff ff       	call   c0017c94 <UnixFile::~UnixFile()>
c0017d73:	83 c4 10             	add    esp,0x10
c0017d76:	90                   	nop
c0017d77:	83 c4 0c             	add    esp,0xc
c0017d7a:	c3                   	ret    
c0017d7b:	90                   	nop

c0017d7c <ReservedFilename::~ReservedFilename()>:
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d86:	e8 cd ff ff ff       	call   c0017d58 <ReservedFilename::~ReservedFilename()>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	83 ec 08             	sub    esp,0x8
c0017d91:	6a 0c                	push   0xc
c0017d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d97:	e8 78 13 00 00       	call   c0019114 <operator delete(void*, unsigned long)>
c0017d9c:	83 c4 10             	add    esp,0x10
c0017d9f:	83 c4 0c             	add    esp,0xc
c0017da2:	c3                   	ret    

c0017da3 <KeGetFileFromDescriptor(int)>:
c0017da3:	53                   	push   ebx
c0017da4:	83 ec 08             	sub    esp,0x8
c0017da7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dab:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017db1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017db7:	7f 2c                	jg     c0017de5 <KeGetFileFromDescriptor(int)+0x42>
c0017db9:	83 ec 0c             	sub    esp,0xc
c0017dbc:	68 98 aa 03 c0       	push   0xc003aa98
c0017dc1:	e8 e6 6b 01 00       	call   c002e9ac <LinkedList<UnixFile>::getFirstElement()>
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	85 c0                	test   eax,eax
c0017dcb:	75 04                	jne    c0017dd1 <KeGetFileFromDescriptor(int)+0x2e>
c0017dcd:	31 c0                	xor    eax,eax
c0017dcf:	eb 6e                	jmp    c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017dd1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017dd4:	74 69                	je     c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017dd6:	52                   	push   edx
c0017dd7:	52                   	push   edx
c0017dd8:	50                   	push   eax
c0017dd9:	68 98 aa 03 c0       	push   0xc003aa98
c0017dde:	e8 73 6c 01 00       	call   c002ea56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017de3:	eb e1                	jmp    c0017dc6 <KeGetFileFromDescriptor(int)+0x23>
c0017de5:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017deb:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017df0:	74 4d                	je     c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017df2:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017df8:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017dfd:	74 40                	je     c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017dff:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017e05:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017e0a:	74 33                	je     c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017e0c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017e12:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017e17:	74 26                	je     c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017e19:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017e1f:	83 f8 08             	cmp    eax,0x8
c0017e22:	77 09                	ja     c0017e2d <KeGetFileFromDescriptor(int)+0x8a>
c0017e24:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017e2b:	eb 12                	jmp    c0017e3f <KeGetFileFromDescriptor(int)+0x9c>
c0017e2d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017e33:	83 fb 08             	cmp    ebx,0x8
c0017e36:	77 95                	ja     c0017dcd <KeGetFileFromDescriptor(int)+0x2a>
c0017e38:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017e3f:	83 c4 08             	add    esp,0x8
c0017e42:	5b                   	pop    ebx
c0017e43:	c3                   	ret    

c0017e44 <__static_initialization_and_destruction_0(int, int)>:
c0017e44:	83 ec 0c             	sub    esp,0xc
c0017e47:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e4c:	75 34                	jne    c0017e82 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e4e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e56:	75 2a                	jne    c0017e82 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e58:	83 ec 0c             	sub    esp,0xc
c0017e5b:	68 98 aa 03 c0       	push   0xc003aa98
c0017e60:	e8 31 6a 01 00       	call   c002e896 <LinkedList<UnixFile>::LinkedList()>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	83 ec 04             	sub    esp,0x4
c0017e6b:	68 78 3a 03 c0       	push   0xc0033a78
c0017e70:	68 98 aa 03 c0       	push   0xc003aa98
c0017e75:	68 94 e8 02 c0       	push   0xc002e894
c0017e7a:	e8 45 12 00 00       	call   c00190c4 <__cxa_atexit>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	90                   	nop
c0017e83:	83 c4 0c             	add    esp,0xc
c0017e86:	c3                   	ret    

c0017e87 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	83 ec 08             	sub    esp,0x8
c0017e8d:	68 ff ff 00 00       	push   0xffff
c0017e92:	6a 01                	push   0x1
c0017e94:	e8 ab ff ff ff       	call   c0017e44 <__static_initialization_and_destruction_0(int, int)>
c0017e99:	83 c4 10             	add    esp,0x10
c0017e9c:	83 c4 0c             	add    esp,0xc
c0017e9f:	c3                   	ret    

c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017ea0:	53                   	push   ebx
c0017ea1:	8b 15 08 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b08
c0017ea7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017eaf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017eb5:	89 d8                	mov    eax,ebx
c0017eb7:	d1 e8                	shr    eax,1
c0017eb9:	01 d0                	add    eax,edx
c0017ebb:	80 e3 01             	and    bl,0x1
c0017ebe:	8a 10                	mov    dl,BYTE PTR [eax]
c0017ec0:	75 09                	jne    c0017ecb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017ec2:	83 e2 f0             	and    edx,0xfffffff0
c0017ec5:	09 ca                	or     edx,ecx
c0017ec7:	88 10                	mov    BYTE PTR [eax],dl
c0017ec9:	5b                   	pop    ebx
c0017eca:	c3                   	ret    
c0017ecb:	0f b6 c9             	movzx  ecx,cl
c0017ece:	83 e2 0f             	and    edx,0xf
c0017ed1:	c1 e1 04             	shl    ecx,0x4
c0017ed4:	09 ca                	or     edx,ecx
c0017ed6:	88 10                	mov    BYTE PTR [eax],dl
c0017ed8:	5b                   	pop    ebx
c0017ed9:	c3                   	ret    

c0017eda <Virt::getPageState(unsigned long)>:
c0017eda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ede:	8b 0d 08 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b08
c0017ee4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017eea:	89 d0                	mov    eax,edx
c0017eec:	d1 e8                	shr    eax,1
c0017eee:	80 e2 01             	and    dl,0x1
c0017ef1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017ef4:	74 03                	je     c0017ef9 <Virt::getPageState(unsigned long)+0x1f>
c0017ef6:	c1 e8 04             	shr    eax,0x4
c0017ef9:	83 e0 0f             	and    eax,0xf
c0017efc:	c3                   	ret    

c0017efd <Virt::allocateKernelVirtualPages(int)>:
c0017efd:	55                   	push   ebp
c0017efe:	57                   	push   edi
c0017eff:	56                   	push   esi
c0017f00:	31 f6                	xor    esi,esi
c0017f02:	53                   	push   ebx
c0017f03:	31 db                	xor    ebx,ebx
c0017f05:	83 ec 1c             	sub    esp,0x1c
c0017f08:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017f11:	8b 2d 04 3b 03 c0    	mov    ebp,DWORD PTR ds:0xc0033b04
c0017f17:	55                   	push   ebp
c0017f18:	e8 bd ff ff ff       	call   c0017eda <Virt::getPageState(unsigned long)>
c0017f1d:	5a                   	pop    edx
c0017f1e:	84 c0                	test   al,al
c0017f20:	75 3d                	jne    c0017f5f <Virt::allocateKernelVirtualPages(int)+0x62>
c0017f22:	85 db                	test   ebx,ebx
c0017f24:	0f 44 f5             	cmove  esi,ebp
c0017f27:	83 c3 01             	add    ebx,0x1
c0017f2a:	39 fb                	cmp    ebx,edi
c0017f2c:	74 5e                	je     c0017f8c <Virt::allocateKernelVirtualPages(int)+0x8f>
c0017f2e:	83 c5 01             	add    ebp,0x1
c0017f31:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017f37:	76 33                	jbe    c0017f6c <Virt::allocateKernelVirtualPages(int)+0x6f>
c0017f39:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017f3e:	c7 05 04 3b 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033b04,0xc8000
c0017f48:	75 2a                	jne    c0017f74 <Virt::allocateKernelVirtualPages(int)+0x77>
c0017f4a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017f4f:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0017f54:	55                   	push   ebp
c0017f55:	e8 80 ff ff ff       	call   c0017eda <Virt::getPageState(unsigned long)>
c0017f5a:	5a                   	pop    edx
c0017f5b:	84 c0                	test   al,al
c0017f5d:	74 c3                	je     c0017f22 <Virt::allocateKernelVirtualPages(int)+0x25>
c0017f5f:	83 c5 01             	add    ebp,0x1
c0017f62:	31 db                	xor    ebx,ebx
c0017f64:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017f6a:	77 cd                	ja     c0017f39 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0017f6c:	89 2d 04 3b 03 c0    	mov    DWORD PTR ds:0xc0033b04,ebp
c0017f72:	eb a3                	jmp    c0017f17 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	68 bc 12 03 c0       	push   0xc00312bc
c0017f7c:	e8 19 82 00 00       	call   c002019a <KePanic(char const*)>
c0017f81:	8b 2d 04 3b 03 c0    	mov    ebp,DWORD PTR ds:0xc0033b04
c0017f87:	83 c4 10             	add    esp,0x10
c0017f8a:	eb 8b                	jmp    c0017f17 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f8c:	89 35 04 3b 03 c0    	mov    DWORD PTR ds:0xc0033b04,esi
c0017f92:	83 fb 01             	cmp    ebx,0x1
c0017f95:	74 63                	je     c0017ffa <Virt::allocateKernelVirtualPages(int)+0xfd>
c0017f97:	85 ff                	test   edi,edi
c0017f99:	74 41                	je     c0017fdc <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017f9b:	89 f0                	mov    eax,esi
c0017f9d:	31 db                	xor    ebx,ebx
c0017f9f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0017fa2:	eb 16                	jmp    c0017fba <Virt::allocateKernelVirtualPages(int)+0xbd>
c0017fa4:	6a 01                	push   0x1
c0017fa6:	83 c3 01             	add    ebx,0x1
c0017fa9:	50                   	push   eax
c0017faa:	e8 f1 fe ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017faf:	39 fb                	cmp    ebx,edi
c0017fb1:	58                   	pop    eax
c0017fb2:	5a                   	pop    edx
c0017fb3:	74 27                	je     c0017fdc <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017fb5:	a1 04 3b 03 c0       	mov    eax,ds:0xc0033b04
c0017fba:	8d 50 01             	lea    edx,[eax+0x1]
c0017fbd:	85 db                	test   ebx,ebx
c0017fbf:	89 15 04 3b 03 c0    	mov    DWORD PTR ds:0xc0033b04,edx
c0017fc5:	74 22                	je     c0017fe9 <Virt::allocateKernelVirtualPages(int)+0xec>
c0017fc7:	39 dd                	cmp    ebp,ebx
c0017fc9:	75 d9                	jne    c0017fa4 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0017fcb:	6a 03                	push   0x3
c0017fcd:	83 c3 01             	add    ebx,0x1
c0017fd0:	50                   	push   eax
c0017fd1:	e8 ca fe ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fd6:	39 fb                	cmp    ebx,edi
c0017fd8:	59                   	pop    ecx
c0017fd9:	58                   	pop    eax
c0017fda:	75 d9                	jne    c0017fb5 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0017fdc:	83 c4 1c             	add    esp,0x1c
c0017fdf:	89 f0                	mov    eax,esi
c0017fe1:	5b                   	pop    ebx
c0017fe2:	c1 e0 0c             	shl    eax,0xc
c0017fe5:	5e                   	pop    esi
c0017fe6:	5f                   	pop    edi
c0017fe7:	5d                   	pop    ebp
c0017fe8:	c3                   	ret    
c0017fe9:	6a 02                	push   0x2
c0017feb:	bb 01 00 00 00       	mov    ebx,0x1
c0017ff0:	50                   	push   eax
c0017ff1:	e8 aa fe ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ff6:	58                   	pop    eax
c0017ff7:	5a                   	pop    edx
c0017ff8:	eb bb                	jmp    c0017fb5 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0017ffa:	6a 04                	push   0x4
c0017ffc:	56                   	push   esi
c0017ffd:	8d 46 01             	lea    eax,[esi+0x1]
c0018000:	a3 04 3b 03 c0       	mov    ds:0xc0033b04,eax
c0018005:	e8 96 fe ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001800a:	89 f0                	mov    eax,esi
c001800c:	59                   	pop    ecx
c001800d:	c1 e0 0c             	shl    eax,0xc
c0018010:	5b                   	pop    ebx
c0018011:	83 c4 1c             	add    esp,0x1c
c0018014:	5b                   	pop    ebx
c0018015:	5e                   	pop    esi
c0018016:	5f                   	pop    edi
c0018017:	5d                   	pop    ebp
c0018018:	c3                   	ret    

c0018019 <Virt::freeSwapfilePage(unsigned long)>:
c0018019:	53                   	push   ebx
c001801a:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018020:	b8 01 00 00 00       	mov    eax,0x1
c0018025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018029:	d3 e0                	shl    eax,cl
c001802b:	89 cb                	mov    ebx,ecx
c001802d:	c1 eb 05             	shr    ebx,0x5
c0018030:	f7 d0                	not    eax
c0018032:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0018035:	21 c1                	and    ecx,eax
c0018037:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001803a:	5b                   	pop    ebx
c001803b:	c3                   	ret    

c001803c <Virt::swapIDToSector(unsigned long)>:
c001803c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018040:	8b 15 0c 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b0c
c0018046:	8b 0d 14 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b14
c001804c:	0f af c2             	imul   eax,edx
c001804f:	01 c8                	add    eax,ecx
c0018051:	c3                   	ret    

c0018052 <Virt::allocateSwapfilePage()>:
c0018052:	55                   	push   ebp
c0018053:	31 d2                	xor    edx,edx
c0018055:	57                   	push   edi
c0018056:	56                   	push   esi
c0018057:	53                   	push   ebx
c0018058:	83 ec 0c             	sub    esp,0xc
c001805b:	8b 1d 10 3b 03 c0    	mov    ebx,DWORD PTR ds:0xc0033b10
c0018061:	8b 0d 0c 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b0c
c0018067:	89 d8                	mov    eax,ebx
c0018069:	f7 f1                	div    ecx
c001806b:	39 cb                	cmp    ebx,ecx
c001806d:	72 2f                	jb     c001809e <Virt::allocateSwapfilePage()+0x4c>
c001806f:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018075:	8b 16                	mov    edx,DWORD PTR [esi]
c0018077:	f6 c2 01             	test   dl,0x1
c001807a:	74 3e                	je     c00180ba <Virt::allocateSwapfilePage()+0x68>
c001807c:	31 c9                	xor    ecx,ecx
c001807e:	bf 01 00 00 00       	mov    edi,0x1
c0018083:	eb 12                	jmp    c0018097 <Virt::allocateSwapfilePage()+0x45>
c0018085:	89 ca                	mov    edx,ecx
c0018087:	89 fd                	mov    ebp,edi
c0018089:	c1 ea 05             	shr    edx,0x5
c001808c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001808f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018091:	d3 e5                	shl    ebp,cl
c0018093:	85 ea                	test   edx,ebp
c0018095:	74 2c                	je     c00180c3 <Virt::allocateSwapfilePage()+0x71>
c0018097:	83 c1 01             	add    ecx,0x1
c001809a:	39 c8                	cmp    eax,ecx
c001809c:	77 e7                	ja     c0018085 <Virt::allocateSwapfilePage()+0x33>
c001809e:	83 ec 0c             	sub    esp,0xc
c00180a1:	68 50 15 03 c0       	push   0xc0031550
c00180a6:	e8 ef 80 00 00       	call   c002019a <KePanic(char const*)>
c00180ab:	83 c4 10             	add    esp,0x10
c00180ae:	31 c9                	xor    ecx,ecx
c00180b0:	83 c4 0c             	add    esp,0xc
c00180b3:	89 c8                	mov    eax,ecx
c00180b5:	5b                   	pop    ebx
c00180b6:	5e                   	pop    esi
c00180b7:	5f                   	pop    edi
c00180b8:	5d                   	pop    ebp
c00180b9:	c3                   	ret    
c00180ba:	89 f3                	mov    ebx,esi
c00180bc:	bd 01 00 00 00       	mov    ebp,0x1
c00180c1:	31 c9                	xor    ecx,ecx
c00180c3:	09 ea                	or     edx,ebp
c00180c5:	89 c8                	mov    eax,ecx
c00180c7:	89 13                	mov    DWORD PTR [ebx],edx
c00180c9:	83 c4 0c             	add    esp,0xc
c00180cc:	5b                   	pop    ebx
c00180cd:	5e                   	pop    esi
c00180ce:	5f                   	pop    edi
c00180cf:	5d                   	pop    ebp
c00180d0:	c3                   	ret    

c00180d1 <Virt::virtualMemorySetup()>:
c00180d1:	53                   	push   ebx
c00180d2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180d7:	6a 0f                	push   0xf
c00180d9:	53                   	push   ebx
c00180da:	83 c3 01             	add    ebx,0x1
c00180dd:	e8 be fd ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180e2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00180e8:	58                   	pop    eax
c00180e9:	5a                   	pop    edx
c00180ea:	75 eb                	jne    c00180d7 <Virt::virtualMemorySetup()+0x6>
c00180ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180f1:	6a 00                	push   0x0
c00180f3:	53                   	push   ebx
c00180f4:	83 c3 01             	add    ebx,0x1
c00180f7:	e8 a4 fd ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180fc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018102:	59                   	pop    ecx
c0018103:	58                   	pop    eax
c0018104:	75 eb                	jne    c00180f1 <Virt::virtualMemorySetup()+0x20>
c0018106:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001810b:	6a 0f                	push   0xf
c001810d:	53                   	push   ebx
c001810e:	83 c3 01             	add    ebx,0x1
c0018111:	e8 8a fd ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018116:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001811c:	58                   	pop    eax
c001811d:	5a                   	pop    edx
c001811e:	75 eb                	jne    c001810b <Virt::virtualMemorySetup()+0x3a>
c0018120:	5b                   	pop    ebx
c0018121:	c3                   	ret    

c0018122 <Virt::setupPageSwapping(int)>:
c0018122:	53                   	push   ebx
c0018123:	83 ec 0c             	sub    esp,0xc
c0018126:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c001812b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001812f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018135:	8b 10                	mov    edx,DWORD PTR [eax]
c0018137:	53                   	push   ebx
c0018138:	68 67 15 03 c0       	push   0xc0031567
c001813d:	50                   	push   eax
c001813e:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018141:	c1 e3 0b             	shl    ebx,0xb
c0018144:	89 1d 10 3b 03 c0    	mov    DWORD PTR ds:0xc0033b10,ebx
c001814a:	c1 eb 08             	shr    ebx,0x8
c001814d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018150:	c6 05 18 3b 03 c0 43 	mov    BYTE PTR ds:0xc0033b18,0x43
c0018157:	c7 05 0c 3b 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033b0c,0x8
c0018161:	a3 14 3b 03 c0       	mov    ds:0xc0033b14,eax
c0018166:	e8 70 e2 ff ff       	call   c00163db <malloc>
c001816b:	31 d2                	xor    edx,edx
c001816d:	83 c4 0c             	add    esp,0xc
c0018170:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018175:	89 c1                	mov    ecx,eax
c0018177:	a1 10 3b 03 c0       	mov    eax,ds:0xc0033b10
c001817c:	f7 35 0c 3b 03 c0    	div    DWORD PTR ds:0xc0033b0c
c0018182:	c1 e8 05             	shr    eax,0x5
c0018185:	50                   	push   eax
c0018186:	6a 00                	push   0x0
c0018188:	51                   	push   ecx
c0018189:	e8 62 83 fe ff       	call   c00004f0 <memset>
c001818e:	83 c4 18             	add    esp,0x18
c0018191:	5b                   	pop    ebx
c0018192:	c3                   	ret    
c0018193:	90                   	nop

c0018194 <VAS::setCPUSpecific(unsigned long)>:
c0018194:	c3                   	ret    
c0018195:	90                   	nop

c0018196 <VAS::VAS(VAS*)>:
c0018196:	83 ec 0c             	sub    esp,0xc
c0018199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181af:	83 ec 0c             	sub    esp,0xc
c00181b2:	68 dc 12 03 c0       	push   0xc00312dc
c00181b7:	e8 de 7f 00 00       	call   c002019a <KePanic(char const*)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	90                   	nop
c00181c0:	83 c4 0c             	add    esp,0xc
c00181c3:	c3                   	ret    

c00181c4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00181c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00181cd:	89 c2                	mov    edx,eax
c00181cf:	c1 ea 16             	shr    edx,0x16
c00181d2:	c1 e8 0a             	shr    eax,0xa
c00181d5:	83 f9 01             	cmp    ecx,0x1
c00181d8:	19 c9                	sbb    ecx,ecx
c00181da:	25 fc 0f 00 00       	and    eax,0xffc
c00181df:	c1 e2 0c             	shl    edx,0xc
c00181e2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00181e8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00181ef:	01 d0                	add    eax,edx
c00181f1:	c3                   	ret    

c00181f2 <VAS::getPageTableEntry(unsigned long)>:
c00181f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181f6:	89 ca                	mov    edx,ecx
c00181f8:	c1 ea 16             	shr    edx,0x16
c00181fb:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018201:	c1 e9 0a             	shr    ecx,0xa
c0018204:	c1 e0 0c             	shl    eax,0xc
c0018207:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001820d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018210:	c3                   	ret    

c0018211 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018211:	55                   	push   ebp
c0018212:	57                   	push   edi
c0018213:	bf 01 00 00 00       	mov    edi,0x1
c0018218:	56                   	push   esi
c0018219:	53                   	push   ebx
c001821a:	83 ec 1c             	sub    esp,0x1c
c001821d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018221:	c1 ee 0c             	shr    esi,0xc
c0018224:	eb 48                	jmp    c001826e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018226:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001822b:	83 ec 08             	sub    esp,0x8
c001822e:	55                   	push   ebp
c001822f:	50                   	push   eax
c0018230:	e8 bd ff ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	8b 10                	mov    edx,DWORD PTR [eax]
c001823a:	f6 c6 04             	test   dh,0x4
c001823d:	75 70                	jne    c00182af <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001823f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018245:	83 fb 04             	cmp    ebx,0x4
c0018248:	0f 84 8a 00 00 00    	je     c00182d8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001824e:	83 fb 02             	cmp    ebx,0x2
c0018251:	0f 84 9a 00 00 00    	je     c00182f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018257:	83 fb 03             	cmp    ebx,0x3
c001825a:	0f 84 be 00 00 00    	je     c001831e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018260:	83 fb 01             	cmp    ebx,0x1
c0018263:	0f 84 a2 00 00 00    	je     c001830b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018269:	83 c6 01             	add    esi,0x1
c001826c:	31 ff                	xor    edi,edi
c001826e:	56                   	push   esi
c001826f:	89 f5                	mov    ebp,esi
c0018271:	e8 64 fc ff ff       	call   c0017eda <Virt::getPageState(unsigned long)>
c0018276:	c1 e5 0c             	shl    ebp,0xc
c0018279:	5a                   	pop    edx
c001827a:	0f b6 d8             	movzx  ebx,al
c001827d:	85 db                	test   ebx,ebx
c001827f:	75 a5                	jne    c0018226 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	68 7e 15 03 c0       	push   0xc003157e
c0018289:	e8 0c 7f 00 00       	call   c002019a <KePanic(char const*)>
c001828e:	5a                   	pop    edx
c001828f:	59                   	pop    ecx
c0018290:	55                   	push   ebp
c0018291:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c0018297:	55                   	push   ebp
c0018298:	e8 55 ff ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00182a2:	f6 c6 04             	test   dh,0x4
c00182a5:	75 08                	jne    c00182af <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182ad:	eb ba                	jmp    c0018269 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182b3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00182b9:	83 ec 0c             	sub    esp,0xc
c00182bc:	52                   	push   edx
c00182bd:	e8 bf e3 ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	83 fb 04             	cmp    ebx,0x4
c00182c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182d2:	0f 85 76 ff ff ff    	jne    c001824e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00182d8:	83 e7 01             	and    edi,0x1
c00182db:	75 46                	jne    c0018323 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00182dd:	c7 44 24 30 00 13 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031300
c00182e5:	83 c4 1c             	add    esp,0x1c
c00182e8:	5b                   	pop    ebx
c00182e9:	5e                   	pop    esi
c00182ea:	5f                   	pop    edi
c00182eb:	5d                   	pop    ebp
c00182ec:	e9 a9 7e 00 00       	jmp    c002019a <KePanic(char const*)>
c00182f1:	83 e7 01             	and    edi,0x1
c00182f4:	75 15                	jne    c001830b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	68 9a 15 03 c0       	push   0xc003159a
c00182fe:	e8 97 7e 00 00       	call   c002019a <KePanic(char const*)>
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	e9 5e ff ff ff       	jmp    c0018269 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001830b:	83 ec 08             	sub    esp,0x8
c001830e:	6a 00                	push   0x0
c0018310:	56                   	push   esi
c0018311:	e8 8a fb ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018316:	83 c4 10             	add    esp,0x10
c0018319:	e9 4b ff ff ff       	jmp    c0018269 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001831e:	83 e7 01             	and    edi,0x1
c0018321:	75 16                	jne    c0018339 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018323:	83 ec 08             	sub    esp,0x8
c0018326:	6a 00                	push   0x0
c0018328:	56                   	push   esi
c0018329:	e8 72 fb ff ff       	call   c0017ea0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	83 c4 1c             	add    esp,0x1c
c0018334:	5b                   	pop    ebx
c0018335:	5e                   	pop    esi
c0018336:	5f                   	pop    edi
c0018337:	5d                   	pop    ebp
c0018338:	c3                   	ret    
c0018339:	c7 44 24 30 b6 15 03 c0 	mov    DWORD PTR [esp+0x30],0xc00315b6
c0018341:	83 c4 1c             	add    esp,0x1c
c0018344:	5b                   	pop    ebx
c0018345:	5e                   	pop    esi
c0018346:	5f                   	pop    edi
c0018347:	5d                   	pop    ebp
c0018348:	e9 4d 7e 00 00       	jmp    c002019a <KePanic(char const*)>
c001834d:	90                   	nop

c001834e <VAS::freeAllocatedPages(unsigned long)>:
c001834e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018352:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018356:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001835a:	74 09                	je     c0018365 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001835c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018360:	e9 ac fe ff ff       	jmp    c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c0018365:	c7 44 24 04 24 13 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031324
c001836d:	e9 a0 0e 00 00       	jmp    c0019212 <Dbg::kprintf(char const*, ...)>

c0018372 <VAS::virtualToPhysical(unsigned long)>:
c0018372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018376:	50                   	push   eax
c0018377:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001837b:	52                   	push   edx
c001837c:	e8 71 fe ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018381:	59                   	pop    ecx
c0018382:	5a                   	pop    edx
c0018383:	8b 00                	mov    eax,DWORD PTR [eax]
c0018385:	25 00 f0 ff ff       	and    eax,0xfffff000
c001838a:	c3                   	ret    
c001838b:	90                   	nop

c001838c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001838c:	55                   	push   ebp
c001838d:	57                   	push   edi
c001838e:	56                   	push   esi
c001838f:	53                   	push   ebx
c0018390:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018394:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018398:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001839c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183a0:	85 db                	test   ebx,ebx
c00183a2:	7e 24                	jle    c00183c8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00183a4:	c1 e3 0c             	shl    ebx,0xc
c00183a7:	01 f3                	add    ebx,esi
c00183a9:	56                   	push   esi
c00183aa:	81 c6 00 10 00 00    	add    esi,0x1000
c00183b0:	55                   	push   ebp
c00183b1:	e8 3c fe ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c00183b6:	5a                   	pop    edx
c00183b7:	59                   	pop    ecx
c00183b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00183ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183be:	21 f9                	and    ecx,edi
c00183c0:	09 d1                	or     ecx,edx
c00183c2:	39 f3                	cmp    ebx,esi
c00183c4:	89 08                	mov    DWORD PTR [eax],ecx
c00183c6:	75 e1                	jne    c00183a9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00183c8:	5b                   	pop    ebx
c00183c9:	5e                   	pop    esi
c00183ca:	5f                   	pop    edi
c00183cb:	5d                   	pop    ebp
c00183cc:	c3                   	ret    
c00183cd:	90                   	nop

c00183ce <VAS::VAS()>:
c00183ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183e8:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00183ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00183f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00183fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018400:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018407:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c001840c:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018411:	29 c2                	sub    edx,eax
c0018413:	89 d0                	mov    eax,edx
c0018415:	05 ff 0f 00 00       	add    eax,0xfff
c001841a:	c1 e8 0c             	shr    eax,0xc
c001841d:	89 c2                	mov    edx,eax
c001841f:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018424:	6a 04                	push   0x4
c0018426:	6a ff                	push   0xffffffff
c0018428:	52                   	push   edx
c0018429:	50                   	push   eax
c001842a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001842e:	e8 59 ff ff ff       	call   c001838c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018433:	83 c4 14             	add    esp,0x14
c0018436:	90                   	nop
c0018437:	c3                   	ret    

c0018438 <VAS::setToWriteCombining(unsigned long, int)>:
c0018438:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001843d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018443:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c001844a:	75 01                	jne    c001844d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001844c:	c3                   	ret    
c001844d:	68 80 00 00 00       	push   0x80
c0018452:	6a ff                	push   0xffffffff
c0018454:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018458:	50                   	push   eax
c0018459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001845d:	52                   	push   edx
c001845e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018462:	51                   	push   ecx
c0018463:	e8 24 ff ff ff       	call   c001838c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018468:	83 c4 14             	add    esp,0x14
c001846b:	c3                   	ret    

c001846c <VAS::mapOtherVASIn(bool, VAS*)>:
c001846c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018470:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018477:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001847a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001847f:	83 f8 01             	cmp    eax,0x1
c0018482:	19 c0                	sbb    eax,eax
c0018484:	83 ca 03             	or     edx,0x3
c0018487:	83 e0 fc             	and    eax,0xfffffffc
c001848a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018491:	0f 20 d8             	mov    eax,cr3
c0018494:	0f 22 d8             	mov    cr3,eax
c0018497:	c3                   	ret    

c0018498 <VAS::~VAS()>:
c0018498:	83 ec 2c             	sub    esp,0x2c
c001849b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184a3:	fa                   	cli    
c00184a4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00184a9:	83 c0 01             	add    eax,0x1
c00184ac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00184b1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00184b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184bb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184c5:	6a 01                	push   0x1
c00184c7:	50                   	push   eax
c00184c8:	e8 9f ff ff ff       	call   c001846c <VAS::mapOtherVASIn(bool, VAS*)>
c00184cd:	83 c4 0c             	add    esp,0xc
c00184d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00184d8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00184e0:	0f 8f d8 00 00 00    	jg     c00185be <VAS::~VAS()+0x126>
c00184e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00184ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184f1:	c1 e2 02             	shl    edx,0x2
c00184f4:	01 d0                	add    eax,edx
c00184f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00184f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00184fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018500:	83 e0 01             	and    eax,0x1
c0018503:	0f 84 ab 00 00 00    	je     c00185b4 <VAS::~VAS()+0x11c>
c0018509:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018511:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018519:	7f 74                	jg     c001858f <VAS::~VAS()+0xf7>
c001851b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001851f:	c1 e0 0a             	shl    eax,0xa
c0018522:	89 c2                	mov    edx,eax
c0018524:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018528:	01 d0                	add    eax,edx
c001852a:	c1 e0 0c             	shl    eax,0xc
c001852d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018531:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018536:	8b 00                	mov    eax,DWORD PTR [eax]
c0018538:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001853b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018541:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018545:	6a 01                	push   0x1
c0018547:	50                   	push   eax
c0018548:	e8 77 fc ff ff       	call   c00181c4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001854d:	83 c4 0c             	add    esp,0xc
c0018550:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018558:	8b 00                	mov    eax,DWORD PTR [eax]
c001855a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018562:	25 01 04 00 00       	and    eax,0x401
c0018567:	3d 01 04 00 00       	cmp    eax,0x401
c001856c:	75 1a                	jne    c0018588 <VAS::~VAS()+0xf0>
c001856e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018572:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018577:	83 ec 0c             	sub    esp,0xc
c001857a:	50                   	push   eax
c001857b:	e8 01 e1 ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018588:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001858d:	eb 82                	jmp    c0018511 <VAS::~VAS()+0x79>
c001858f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018593:	25 00 04 00 00       	and    eax,0x400
c0018598:	74 1a                	je     c00185b4 <VAS::~VAS()+0x11c>
c001859a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185a3:	83 ec 0c             	sub    esp,0xc
c00185a6:	50                   	push   eax
c00185a7:	e8 d5 e0 ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185b4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00185b9:	e9 1a ff ff ff       	jmp    c00184d8 <VAS::~VAS()+0x40>
c00185be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185c5:	83 ec 0c             	sub    esp,0xc
c00185c8:	50                   	push   eax
c00185c9:	e8 43 fc ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	50                   	push   eax
c00185dc:	e8 a0 e0 ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c00185e1:	83 c4 10             	add    esp,0x10
c00185e4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00185ee:	83 e8 01             	sub    eax,0x1
c00185f1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00185f6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00185fb:	85 c0                	test   eax,eax
c00185fd:	75 01                	jne    c0018600 <VAS::~VAS()+0x168>
c00185ff:	fb                   	sti    
c0018600:	90                   	nop
c0018601:	83 c4 2c             	add    esp,0x2c
c0018604:	c3                   	ret    
c0018605:	90                   	nop

c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018606:	55                   	push   ebp
c0018607:	57                   	push   edi
c0018608:	56                   	push   esi
c0018609:	53                   	push   ebx
c001860a:	83 ec 1c             	sub    esp,0x1c
c001860d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018611:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018615:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018619:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001861f:	77 08                	ja     c0018629 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0018621:	0f 20 d8             	mov    eax,cr3
c0018624:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0018627:	75 43                	jne    c001866c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0018629:	89 d8                	mov    eax,ebx
c001862b:	09 f8                	or     eax,edi
c001862d:	a9 ff 0f 00 00       	test   eax,0xfff
c0018632:	75 53                	jne    c0018687 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0018634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018637:	89 de                	mov    esi,ebx
c0018639:	c1 ee 16             	shr    esi,0x16
c001863c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018643:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018647:	74 50                	je     c0018699 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018649:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001864d:	c1 eb 0a             	shr    ebx,0xa
c0018650:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018656:	c1 e6 0c             	shl    esi,0xc
c0018659:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001865f:	09 c7                	or     edi,eax
c0018661:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018664:	83 c4 1c             	add    esp,0x1c
c0018667:	5b                   	pop    ebx
c0018668:	5e                   	pop    esi
c0018669:	5f                   	pop    edi
c001866a:	5d                   	pop    ebp
c001866b:	c3                   	ret    
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	68 48 13 03 c0       	push   0xc0031348
c0018674:	e8 99 0b 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018679:	89 d8                	mov    eax,ebx
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	09 f8                	or     eax,edi
c0018680:	a9 ff 0f 00 00       	test   eax,0xfff
c0018685:	74 ad                	je     c0018634 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018687:	83 ec 0c             	sub    esp,0xc
c001868a:	68 b0 13 03 c0       	push   0xc00313b0
c001868f:	e8 06 7b 00 00       	call   c002019a <KePanic(char const*)>
c0018694:	83 c4 10             	add    esp,0x10
c0018697:	eb 9b                	jmp    c0018634 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018699:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001869d:	e8 48 e0 ff ff       	call   c00166ea <Phys::allocatePage()>
c00186a2:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00186a8:	83 ec 0c             	sub    esp,0xc
c00186ab:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00186af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186b3:	6a 01                	push   0x1
c00186b5:	e8 43 f8 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c00186ba:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186c1:	6a 01                	push   0x1
c00186c3:	50                   	push   eax
c00186c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186c8:	52                   	push   edx
c00186c9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00186cd:	51                   	push   ecx
c00186ce:	e8 3d 01 00 00       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00186d3:	83 c4 1c             	add    esp,0x1c
c00186d6:	68 00 10 00 00       	push   0x1000
c00186db:	6a 00                	push   0x0
c00186dd:	50                   	push   eax
c00186de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00186e2:	e8 09 7e fe ff       	call   c00004f0 <memset>
c00186e7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00186eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00186ee:	e8 1e fb ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c00186f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186fb:	83 c4 10             	add    esp,0x10
c00186fe:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0018701:	0d 07 04 00 00       	or     eax,0x407
c0018706:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0018709:	e9 3b ff ff ff       	jmp    c0018649 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c001870e <VAS::allocatePages(int, int)>:
c001870e:	55                   	push   ebp
c001870f:	57                   	push   edi
c0018710:	56                   	push   esi
c0018711:	53                   	push   ebx
c0018712:	83 ec 1c             	sub    esp,0x1c
c0018715:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018719:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001871d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018721:	75 75                	jne    c0018798 <VAS::allocatePages(int, int)+0x8a>
c0018723:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001872a:	85 c0                	test   eax,eax
c001872c:	74 49                	je     c0018777 <VAS::allocatePages(int, int)+0x69>
c001872e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018732:	89 d5                	mov    ebp,edx
c0018734:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018738:	c1 e5 0c             	shl    ebp,0xc
c001873b:	01 dd                	add    ebp,ebx
c001873d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018740:	81 cf 00 04 00 00    	or     edi,0x400
c0018746:	85 d2                	test   edx,edx
c0018748:	7e 1b                	jle    c0018765 <VAS::allocatePages(int, int)+0x57>
c001874a:	e8 9b df ff ff       	call   c00166ea <Phys::allocatePage()>
c001874f:	57                   	push   edi
c0018750:	53                   	push   ebx
c0018751:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018757:	50                   	push   eax
c0018758:	56                   	push   esi
c0018759:	e8 a8 fe ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c001875e:	83 c4 10             	add    esp,0x10
c0018761:	39 dd                	cmp    ebp,ebx
c0018763:	75 e5                	jne    c001874a <VAS::allocatePages(int, int)+0x3c>
c0018765:	0f 20 d8             	mov    eax,cr3
c0018768:	0f 22 d8             	mov    cr3,eax
c001876b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001876f:	83 c4 1c             	add    esp,0x1c
c0018772:	5b                   	pop    ebx
c0018773:	5e                   	pop    esi
c0018774:	5f                   	pop    edi
c0018775:	5d                   	pop    ebp
c0018776:	c3                   	ret    
c0018777:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	68 d4 13 03 c0       	push   0xc00313d4
c0018783:	e8 12 7a 00 00       	call   c002019a <KePanic(char const*)>
c0018788:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001878b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018796:	eb 96                	jmp    c001872e <VAS::allocatePages(int, int)+0x20>
c0018798:	83 ec 0c             	sub    esp,0xc
c001879b:	52                   	push   edx
c001879c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00187a0:	e8 58 f7 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c00187a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00187b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187b5:	77 38                	ja     c00187ef <VAS::allocatePages(int, int)+0xe1>
c00187b7:	85 d2                	test   edx,edx
c00187b9:	7e aa                	jle    c0018765 <VAS::allocatePages(int, int)+0x57>
c00187bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187bf:	c1 e2 0c             	shl    edx,0xc
c00187c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00187c6:	81 cf 00 04 00 00    	or     edi,0x400
c00187cc:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00187cf:	e8 16 df ff ff       	call   c00166ea <Phys::allocatePage()>
c00187d4:	57                   	push   edi
c00187d5:	53                   	push   ebx
c00187d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00187dc:	50                   	push   eax
c00187dd:	56                   	push   esi
c00187de:	e8 23 fe ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	39 dd                	cmp    ebp,ebx
c00187e8:	75 e5                	jne    c00187cf <VAS::allocatePages(int, int)+0xc1>
c00187ea:	e9 76 ff ff ff       	jmp    c0018765 <VAS::allocatePages(int, int)+0x57>
c00187ef:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00187f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00187fa:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018801:	74 b4                	je     c00187b7 <VAS::allocatePages(int, int)+0xa9>
c0018803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018807:	80 cc 01             	or     ah,0x1
c001880a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001880e:	eb a7                	jmp    c00187b7 <VAS::allocatePages(int, int)+0xa9>

c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018810:	55                   	push   ebp
c0018811:	57                   	push   edi
c0018812:	56                   	push   esi
c0018813:	53                   	push   ebx
c0018814:	83 ec 1c             	sub    esp,0x1c
c0018817:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001881b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001881f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018823:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018827:	85 db                	test   ebx,ebx
c0018829:	7e 2c                	jle    c0018857 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c001882b:	c1 e3 0c             	shl    ebx,0xc
c001882e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018831:	89 f3                	mov    ebx,esi
c0018833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018837:	55                   	push   ebp
c0018838:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001883c:	29 f2                	sub    edx,esi
c001883e:	01 da                	add    edx,ebx
c0018840:	52                   	push   edx
c0018841:	53                   	push   ebx
c0018842:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018848:	57                   	push   edi
c0018849:	e8 b8 fd ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c001884e:	83 c4 10             	add    esp,0x10
c0018851:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018855:	75 e0                	jne    c0018837 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018857:	0f 20 d8             	mov    eax,cr3
c001885a:	0f 22 d8             	mov    cr3,eax
c001885d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018861:	83 c4 1c             	add    esp,0x1c
c0018864:	5b                   	pop    ebx
c0018865:	5e                   	pop    esi
c0018866:	5f                   	pop    edi
c0018867:	5d                   	pop    ebp
c0018868:	c3                   	ret    
c0018869:	90                   	nop

c001886a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001886a:	55                   	push   ebp
c001886b:	57                   	push   edi
c001886c:	56                   	push   esi
c001886d:	53                   	push   ebx
c001886e:	83 ec 1c             	sub    esp,0x1c
c0018871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018875:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018879:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001887d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018881:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018885:	09 d8                	or     eax,ebx
c0018887:	a9 ff 0f 00 00       	test   eax,0xfff
c001888c:	75 4b                	jne    c00188d9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001888e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018891:	89 de                	mov    esi,ebx
c0018893:	c1 ee 16             	shr    esi,0x16
c0018896:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c001889d:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00188a1:	74 48                	je     c00188eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00188a3:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00188a8:	c1 eb 0a             	shr    ebx,0xa
c00188ab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00188af:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00188b3:	83 ff 01             	cmp    edi,0x1
c00188b6:	19 c0                	sbb    eax,eax
c00188b8:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00188be:	c1 e6 0c             	shl    esi,0xc
c00188c1:	25 00 00 c0 ff       	and    eax,0xffc00000
c00188c6:	01 f3                	add    ebx,esi
c00188c8:	09 ca                	or     edx,ecx
c00188ca:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00188d1:	83 c4 1c             	add    esp,0x1c
c00188d4:	5b                   	pop    ebx
c00188d5:	5e                   	pop    esi
c00188d6:	5f                   	pop    edi
c00188d7:	5d                   	pop    ebp
c00188d8:	c3                   	ret    
c00188d9:	83 ec 0c             	sub    esp,0xc
c00188dc:	68 00 14 03 c0       	push   0xc0031400
c00188e1:	e8 b4 78 00 00       	call   c002019a <KePanic(char const*)>
c00188e6:	83 c4 10             	add    esp,0x10
c00188e9:	eb a3                	jmp    c001888e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00188eb:	e8 fa dd ff ff       	call   c00166ea <Phys::allocatePage()>
c00188f0:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00188f6:	83 ec 0c             	sub    esp,0xc
c00188f9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00188fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018901:	6a 01                	push   0x1
c0018903:	e8 f5 f5 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c0018908:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001890f:	6a 01                	push   0x1
c0018911:	50                   	push   eax
c0018912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018916:	50                   	push   eax
c0018917:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001891b:	51                   	push   ecx
c001891c:	e8 ef fe ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018921:	83 c4 1c             	add    esp,0x1c
c0018924:	68 00 10 00 00       	push   0x1000
c0018929:	6a 00                	push   0x0
c001892b:	50                   	push   eax
c001892c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018930:	e8 bb 7b fe ff       	call   c00004f0 <memset>
c0018935:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018939:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001893c:	e8 d0 f8 ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c0018941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018945:	83 c4 10             	add    esp,0x10
c0018948:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001894b:	81 ca 07 04 00 00    	or     edx,0x407
c0018951:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018954:	e9 4a ff ff ff       	jmp    c00188a3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018959:	90                   	nop

c001895a <VAS::VAS(bool)>:
c001895a:	53                   	push   ebx
c001895b:	83 ec 28             	sub    esp,0x28
c001895e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018962:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018966:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001896a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018975:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001897c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018980:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018984:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018987:	e8 5e dd ff ff       	call   c00166ea <Phys::allocatePage()>
c001898c:	89 c2                	mov    edx,eax
c001898e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018992:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018995:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001899b:	83 ec 0c             	sub    esp,0xc
c001899e:	6a 01                	push   0x1
c00189a0:	e8 58 f5 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	89 c2                	mov    edx,eax
c00189aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189b1:	83 ec 0c             	sub    esp,0xc
c00189b4:	6a 03                	push   0x3
c00189b6:	6a 01                	push   0x1
c00189b8:	52                   	push   edx
c00189b9:	50                   	push   eax
c00189ba:	53                   	push   ebx
c00189bb:	e8 50 fe ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189c0:	83 c4 20             	add    esp,0x20
c00189c3:	89 c2                	mov    edx,eax
c00189c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00189cc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00189d4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00189dc:	7f 1d                	jg     c00189fb <VAS::VAS(bool)+0xa1>
c00189de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189e9:	c1 e2 02             	shl    edx,0x2
c00189ec:	01 d0                	add    eax,edx
c00189ee:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00189f4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00189f9:	eb d9                	jmp    c00189d4 <VAS::VAS(bool)+0x7a>
c00189fb:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018a03:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018a0b:	7f 7e                	jg     c0018a8b <VAS::VAS(bool)+0x131>
c0018a0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a11:	2d 00 02 00 00       	sub    eax,0x200
c0018a16:	c1 e0 0c             	shl    eax,0xc
c0018a19:	83 c8 05             	or     eax,0x5
c0018a1c:	89 c2                	mov    edx,eax
c0018a1e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a29:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a2f:	83 e0 10             	and    eax,0x10
c0018a32:	0f b6 c0             	movzx  eax,al
c0018a35:	85 c0                	test   eax,eax
c0018a37:	74 07                	je     c0018a40 <VAS::VAS(bool)+0xe6>
c0018a39:	b8 00 01 00 00       	mov    eax,0x100
c0018a3e:	eb 05                	jmp    c0018a45 <VAS::VAS(bool)+0xeb>
c0018a40:	b8 00 00 00 00       	mov    eax,0x0
c0018a45:	09 d0                	or     eax,edx
c0018a47:	89 c1                	mov    ecx,eax
c0018a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a54:	c1 e2 02             	shl    edx,0x2
c0018a57:	01 d0                	add    eax,edx
c0018a59:	89 ca                	mov    edx,ecx
c0018a5b:	89 10                	mov    DWORD PTR [eax],edx
c0018a5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a61:	2d 40 03 00 00       	sub    eax,0x340
c0018a66:	83 f8 7f             	cmp    eax,0x7f
c0018a69:	77 16                	ja     c0018a81 <VAS::VAS(bool)+0x127>
c0018a6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a76:	c1 e2 02             	shl    edx,0x2
c0018a79:	01 d0                	add    eax,edx
c0018a7b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a81:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018a86:	e9 78 ff ff ff       	jmp    c0018a03 <VAS::VAS(bool)+0xa9>
c0018a8b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a9c:	83 e0 10             	and    eax,0x10
c0018a9f:	0f b6 c0             	movzx  eax,al
c0018aa2:	85 c0                	test   eax,eax
c0018aa4:	74 07                	je     c0018aad <VAS::VAS(bool)+0x153>
c0018aa6:	b8 03 41 00 00       	mov    eax,0x4103
c0018aab:	eb 05                	jmp    c0018ab2 <VAS::VAS(bool)+0x158>
c0018aad:	b8 03 40 00 00       	mov    eax,0x4003
c0018ab2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ab6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018ab9:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018abf:	89 02                	mov    DWORD PTR [edx],eax
c0018ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ac8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018acd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ad3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ad9:	83 e0 10             	and    eax,0x10
c0018adc:	0f b6 c0             	movzx  eax,al
c0018adf:	85 c0                	test   eax,eax
c0018ae1:	74 07                	je     c0018aea <VAS::VAS(bool)+0x190>
c0018ae3:	b8 00 01 00 00       	mov    eax,0x100
c0018ae8:	eb 05                	jmp    c0018aef <VAS::VAS(bool)+0x195>
c0018aea:	b8 00 00 00 00       	mov    eax,0x0
c0018aef:	09 c2                	or     edx,eax
c0018af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018af5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018af8:	05 fc 0f 00 00       	add    eax,0xffc
c0018afd:	83 ca 03             	or     edx,0x3
c0018b00:	89 10                	mov    DWORD PTR [eax],edx
c0018b02:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b0d:	83 ec 0c             	sub    esp,0xc
c0018b10:	50                   	push   eax
c0018b11:	e8 f0 29 00 00       	call   c001b506 <Device::getName()>
c0018b16:	83 c4 10             	add    esp,0x10
c0018b19:	83 ec 08             	sub    esp,0x8
c0018b1c:	68 d0 15 03 c0       	push   0xc00315d0
c0018b21:	50                   	push   eax
c0018b22:	e8 59 7c fe ff       	call   c0000780 <strcmp>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	85 c0                	test   eax,eax
c0018b2c:	0f 94 c0             	sete   al
c0018b2f:	0f b6 c0             	movzx  eax,al
c0018b32:	85 c0                	test   eax,eax
c0018b34:	74 68                	je     c0018b9e <VAS::VAS(bool)+0x244>
c0018b36:	fa                   	cli    
c0018b37:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b42:	05 7c 09 00 00       	add    eax,0x97c
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	50                   	push   eax
c0018b4b:	e8 86 d3 ff ff       	call   c0015ed6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b58:	89 c3                	mov    ebx,eax
c0018b5a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b65:	05 7c 09 00 00       	add    eax,0x97c
c0018b6a:	83 ec 0c             	sub    esp,0xc
c0018b6d:	50                   	push   eax
c0018b6e:	e8 63 d3 ff ff       	call   c0015ed6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b73:	83 c4 10             	add    esp,0x10
c0018b76:	83 ec 08             	sub    esp,0x8
c0018b79:	50                   	push   eax
c0018b7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b7e:	e8 6f f6 ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b8d:	6a 11                	push   0x11
c0018b8f:	53                   	push   ebx
c0018b90:	50                   	push   eax
c0018b91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b95:	e8 6c fa ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	fb                   	sti    
c0018b9e:	90                   	nop
c0018b9f:	83 c4 28             	add    esp,0x28
c0018ba2:	5b                   	pop    ebx
c0018ba3:	c3                   	ret    

c0018ba4 <VAS::evict(unsigned long)>:
c0018ba4:	55                   	push   ebp
c0018ba5:	57                   	push   edi
c0018ba6:	56                   	push   esi
c0018ba7:	53                   	push   ebx
c0018ba8:	83 ec 1c             	sub    esp,0x1c
c0018bab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018baf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bb7:	e8 96 f4 ff ff       	call   c0018052 <Virt::allocateSwapfilePage()>
c0018bbc:	89 c7                	mov    edi,eax
c0018bbe:	a1 0c 3b 03 c0       	mov    eax,ds:0xc0033b0c
c0018bc3:	85 c0                	test   eax,eax
c0018bc5:	7e 40                	jle    c0018c07 <VAS::evict(unsigned long)+0x63>
c0018bc7:	89 ee                	mov    esi,ebp
c0018bc9:	31 db                	xor    ebx,ebx
c0018bcb:	83 ec 0c             	sub    esp,0xc
c0018bce:	57                   	push   edi
c0018bcf:	e8 68 f4 ff ff       	call   c001803c <Virt::swapIDToSector(unsigned long)>
c0018bd4:	31 d2                	xor    edx,edx
c0018bd6:	89 34 24             	mov    DWORD PTR [esp],esi
c0018bd9:	81 c6 00 02 00 00    	add    esi,0x200
c0018bdf:	6a 01                	push   0x1
c0018be1:	52                   	push   edx
c0018be2:	01 d8                	add    eax,ebx
c0018be4:	83 c3 01             	add    ebx,0x1
c0018be7:	50                   	push   eax
c0018be8:	0f be 05 18 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033b18
c0018bef:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018bf6:	50                   	push   eax
c0018bf7:	e8 0e 3b 00 00       	call   c001c70a <LogicalDisk::write(unsigned long long, int, void*)>
c0018bfc:	83 c4 20             	add    esp,0x20
c0018bff:	39 1d 0c 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b0c,ebx
c0018c05:	7f c4                	jg     c0018bcb <VAS::evict(unsigned long)+0x27>
c0018c07:	c1 e7 0c             	shl    edi,0xc
c0018c0a:	83 ec 08             	sub    esp,0x8
c0018c0d:	55                   	push   ebp
c0018c0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c12:	50                   	push   eax
c0018c13:	e8 da f5 ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018c18:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c1a:	89 d3                	mov    ebx,edx
c0018c1c:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018c22:	09 d7                	or     edi,edx
c0018c24:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c2a:	89 38                	mov    DWORD PTR [eax],edi
c0018c2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c2f:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018c35:	83 c2 01             	add    edx,0x1
c0018c38:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018c3e:	e8 3e da ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c0018c43:	0f 20 d8             	mov    eax,cr3
c0018c46:	0f 22 d8             	mov    cr3,eax
c0018c49:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c4f:	51                   	push   ecx
c0018c50:	55                   	push   ebp
c0018c51:	53                   	push   ebx
c0018c52:	68 24 14 03 c0       	push   0xc0031424
c0018c57:	e8 b6 05 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018c5c:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c61:	c7 44 24 50 de 15 03 c0 	mov    DWORD PTR [esp+0x50],0xc00315de
c0018c69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c6d:	8d 50 01             	lea    edx,[eax+0x1]
c0018c70:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c76:	83 c4 3c             	add    esp,0x3c
c0018c79:	5b                   	pop    ebx
c0018c7a:	5e                   	pop    esi
c0018c7b:	5f                   	pop    edi
c0018c7c:	5d                   	pop    ebp
c0018c7d:	e9 90 05 00 00       	jmp    c0019212 <Dbg::kprintf(char const*, ...)>

c0018c82 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018c82:	55                   	push   ebp
c0018c83:	57                   	push   edi
c0018c84:	56                   	push   esi
c0018c85:	53                   	push   ebx
c0018c86:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018c8c:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018c93:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018c99:	77 78                	ja     c0018d13 <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018c9b:	83 ec 08             	sub    esp,0x8
c0018c9e:	53                   	push   ebx
c0018c9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ca5:	68 01 16 03 c0       	push   0xc0031601
c0018caa:	e8 63 05 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018caf:	58                   	pop    eax
c0018cb0:	5a                   	pop    edx
c0018cb1:	53                   	push   ebx
c0018cb2:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018cb9:	51                   	push   ecx
c0018cba:	e8 33 f5 ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	85 c0                	test   eax,eax
c0018cc4:	89 c5                	mov    ebp,eax
c0018cc6:	0f 95 c0             	setne  al
c0018cc9:	85 db                	test   ebx,ebx
c0018ccb:	0f 95 c2             	setne  dl
c0018cce:	21 d0                	and    eax,edx
c0018cd0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018cd4:	a8 01                	test   al,0x1
c0018cd6:	75 0f                	jne    c0018ce7 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018cd8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018cdc:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018ce2:	5b                   	pop    ebx
c0018ce3:	5e                   	pop    esi
c0018ce4:	5f                   	pop    edi
c0018ce5:	5d                   	pop    ebp
c0018ce6:	c3                   	ret    
c0018ce7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cea:	f6 c4 02             	test   ah,0x2
c0018ced:	75 39                	jne    c0018d28 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018cef:	89 c2                	mov    edx,eax
c0018cf1:	81 e2 01 04 00 00    	and    edx,0x401
c0018cf7:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018cfd:	74 73                	je     c0018d72 <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018cff:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018d04:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018d08:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018d0e:	5b                   	pop    ebx
c0018d0f:	5e                   	pop    esi
c0018d10:	5f                   	pop    edi
c0018d11:	5d                   	pop    ebp
c0018d12:	c3                   	ret    
c0018d13:	83 ec 0c             	sub    esp,0xc
c0018d16:	68 ef 15 03 c0       	push   0xc00315ef
c0018d1b:	e8 7a 74 00 00       	call   c002019a <KePanic(char const*)>
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	e9 73 ff ff ff       	jmp    c0018c9b <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018d28:	83 ec 0c             	sub    esp,0xc
c0018d2b:	89 de                	mov    esi,ebx
c0018d2d:	68 54 14 03 c0       	push   0xc0031454
c0018d32:	e8 db 04 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018d37:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018d3b:	e8 aa d9 ff ff       	call   c00166ea <Phys::allocatePage()>
c0018d40:	ba 00 10 00 00       	mov    edx,0x1000
c0018d45:	89 d1                	mov    ecx,edx
c0018d47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d49:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018d4c:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d52:	09 c8                	or     eax,ecx
c0018d54:	83 c8 02             	or     eax,0x2
c0018d57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d5a:	0f 20 d8             	mov    eax,cr3
c0018d5d:	0f 22 d8             	mov    cr3,eax
c0018d60:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d64:	89 df                	mov    edi,ebx
c0018d66:	89 d1                	mov    ecx,edx
c0018d68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d6a:	83 c4 10             	add    esp,0x10
c0018d6d:	e9 66 ff ff ff       	jmp    c0018cd8 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0018d72:	c1 e8 0c             	shr    eax,0xc
c0018d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d79:	e8 6c d9 ff ff       	call   c00166ea <Phys::allocatePage()>
c0018d7e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d81:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0018d87:	09 c2                	or     edx,eax
c0018d89:	81 ca 01 08 00 00    	or     edx,0x801
c0018d8f:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0018d92:	a1 0c 3b 03 c0       	mov    eax,ds:0xc0033b0c
c0018d97:	85 c0                	test   eax,eax
c0018d99:	7e 44                	jle    c0018ddf <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0018d9b:	89 df                	mov    edi,ebx
c0018d9d:	31 f6                	xor    esi,esi
c0018d9f:	83 ec 0c             	sub    esp,0xc
c0018da2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018da6:	51                   	push   ecx
c0018da7:	e8 90 f2 ff ff       	call   c001803c <Virt::swapIDToSector(unsigned long)>
c0018dac:	31 d2                	xor    edx,edx
c0018dae:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018db1:	81 c7 00 02 00 00    	add    edi,0x200
c0018db7:	6a 01                	push   0x1
c0018db9:	52                   	push   edx
c0018dba:	01 f0                	add    eax,esi
c0018dbc:	83 c6 01             	add    esi,0x1
c0018dbf:	50                   	push   eax
c0018dc0:	0f be 05 18 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033b18
c0018dc7:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0018dce:	55                   	push   ebp
c0018dcf:	e8 ca 38 00 00       	call   c001c69e <LogicalDisk::read(unsigned long long, int, void*)>
c0018dd4:	83 c4 20             	add    esp,0x20
c0018dd7:	39 35 0c 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b0c,esi
c0018ddd:	7f c0                	jg     c0018d9f <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0018ddf:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018de4:	83 ec 04             	sub    esp,0x4
c0018de7:	83 e8 01             	sub    eax,0x1
c0018dea:	50                   	push   eax
c0018deb:	53                   	push   ebx
c0018dec:	68 14 16 03 c0       	push   0xc0031614
c0018df1:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018df6:	e8 17 04 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018dfb:	58                   	pop    eax
c0018dfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e00:	52                   	push   edx
c0018e01:	e8 13 f2 ff ff       	call   c0018019 <Virt::freeSwapfilePage(unsigned long)>
c0018e06:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	83 e8 01             	sub    eax,0x1
c0018e11:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018e16:	85 c0                	test   eax,eax
c0018e18:	75 01                	jne    c0018e1b <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0018e1a:	fb                   	sti    
c0018e1b:	0f 20 d8             	mov    eax,cr3
c0018e1e:	0f 22 d8             	mov    cr3,eax
c0018e21:	e9 b2 fe ff ff       	jmp    c0018cd8 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0018e26 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018e26:	55                   	push   ebp
c0018e27:	57                   	push   edi
c0018e28:	56                   	push   esi
c0018e29:	53                   	push   ebx
c0018e2a:	83 ec 28             	sub    esp,0x28
c0018e2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e31:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018e35:	50                   	push   eax
c0018e36:	e8 c2 f0 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c0018e3b:	83 c4 0c             	add    esp,0xc
c0018e3e:	6a 07                	push   0x7
c0018e40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e44:	52                   	push   edx
c0018e45:	89 c5                	mov    ebp,eax
c0018e47:	53                   	push   ebx
c0018e48:	e8 c1 f8 ff ff       	call   c001870e <VAS::allocatePages(int, int)>
c0018e4d:	83 c4 10             	add    esp,0x10
c0018e50:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e54:	89 c7                	mov    edi,eax
c0018e56:	85 c9                	test   ecx,ecx
c0018e58:	74 2f                	je     c0018e89 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e5a:	31 f6                	xor    esi,esi
c0018e5c:	e8 89 d8 ff ff       	call   c00166ea <Phys::allocatePage()>
c0018e61:	83 c6 01             	add    esi,0x1
c0018e64:	6a 03                	push   0x3
c0018e66:	55                   	push   ebp
c0018e67:	50                   	push   eax
c0018e68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e6c:	53                   	push   ebx
c0018e6d:	e8 94 f7 ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e72:	6a 07                	push   0x7
c0018e74:	57                   	push   edi
c0018e75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e79:	50                   	push   eax
c0018e7a:	53                   	push   ebx
c0018e7b:	e8 86 f7 ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e80:	83 c4 20             	add    esp,0x20
c0018e83:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0018e87:	75 d3                	jne    c0018e5c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018e89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e8d:	89 28                	mov    DWORD PTR [eax],ebp
c0018e8f:	83 c4 1c             	add    esp,0x1c
c0018e92:	89 f8                	mov    eax,edi
c0018e94:	5b                   	pop    ebx
c0018e95:	5e                   	pop    esi
c0018e96:	5f                   	pop    edi
c0018e97:	5d                   	pop    ebp
c0018e98:	c3                   	ret    
c0018e99:	90                   	nop

c0018e9a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018e9a:	53                   	push   ebx
c0018e9b:	83 ec 14             	sub    esp,0x14
c0018e9e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018ea2:	68 74 14 03 c0       	push   0xc0031474
c0018ea7:	e8 66 03 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018eac:	c7 04 24 d4 14 03 c0 	mov    DWORD PTR [esp],0xc00314d4
c0018eb3:	e8 5a 03 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018eb8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018ebc:	83 c4 18             	add    esp,0x18
c0018ebf:	5b                   	pop    ebx
c0018ec0:	e9 4c f3 ff ff       	jmp    c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c0018ec5:	90                   	nop

c0018ec6 <VAS::scanForEviction()>:
c0018ec6:	57                   	push   edi
c0018ec7:	56                   	push   esi
c0018ec8:	31 f6                	xor    esi,esi
c0018eca:	53                   	push   ebx
c0018ecb:	83 ec 10             	sub    esp,0x10
c0018ece:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018ed2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018ed5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018edb:	75 0e                	jne    c0018eeb <VAS::scanForEviction()+0x25>
c0018edd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018ee0:	89 da                	mov    edx,ebx
c0018ee2:	c1 ea 16             	shr    edx,0x16
c0018ee5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ee9:	74 57                	je     c0018f42 <VAS::scanForEviction()+0x7c>
c0018eeb:	53                   	push   ebx
c0018eec:	57                   	push   edi
c0018eed:	e8 00 f3 ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c0018ef2:	5a                   	pop    edx
c0018ef3:	59                   	pop    ecx
c0018ef4:	8b 10                	mov    edx,DWORD PTR [eax]
c0018ef6:	89 d1                	mov    ecx,edx
c0018ef8:	c1 e9 0c             	shr    ecx,0xc
c0018efb:	74 10                	je     c0018f0d <VAS::scanForEviction()+0x47>
c0018efd:	89 d1                	mov    ecx,edx
c0018eff:	81 e1 01 08 00 00    	and    ecx,0x801
c0018f05:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018f0b:	74 40                	je     c0018f4d <VAS::scanForEviction()+0x87>
c0018f0d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018f13:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018f19:	76 2d                	jbe    c0018f48 <VAS::scanForEviction()+0x82>
c0018f1b:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018f22:	83 c6 01             	add    esi,0x1
c0018f25:	83 fe 03             	cmp    esi,0x3
c0018f28:	74 32                	je     c0018f5c <VAS::scanForEviction()+0x96>
c0018f2a:	31 db                	xor    ebx,ebx
c0018f2c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f32:	75 b7                	jne    c0018eeb <VAS::scanForEviction()+0x25>
c0018f34:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f37:	89 da                	mov    edx,ebx
c0018f39:	c1 ea 16             	shr    edx,0x16
c0018f3c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f40:	75 a9                	jne    c0018eeb <VAS::scanForEviction()+0x25>
c0018f42:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018f48:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018f4b:	eb 88                	jmp    c0018ed5 <VAS::scanForEviction()+0xf>
c0018f4d:	f6 c2 20             	test   dl,0x20
c0018f50:	74 13                	je     c0018f65 <VAS::scanForEviction()+0x9f>
c0018f52:	83 e2 df             	and    edx,0xffffffdf
c0018f55:	89 10                	mov    DWORD PTR [eax],edx
c0018f57:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f5a:	eb b1                	jmp    c0018f0d <VAS::scanForEviction()+0x47>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	31 c0                	xor    eax,eax
c0018f61:	5b                   	pop    ebx
c0018f62:	5e                   	pop    esi
c0018f63:	5f                   	pop    edi
c0018f64:	c3                   	ret    
c0018f65:	89 d0                	mov    eax,edx
c0018f67:	83 ec 08             	sub    esp,0x8
c0018f6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f73:	53                   	push   ebx
c0018f74:	68 29 16 03 c0       	push   0xc0031629
c0018f79:	e8 94 02 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018f7e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f81:	58                   	pop    eax
c0018f82:	5a                   	pop    edx
c0018f83:	51                   	push   ecx
c0018f84:	57                   	push   edi
c0018f85:	e8 1a fc ff ff       	call   c0018ba4 <VAS::evict(unsigned long)>
c0018f8a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018f8d:	5b                   	pop    ebx
c0018f8e:	5e                   	pop    esi
c0018f8f:	50                   	push   eax
c0018f90:	68 3d 16 03 c0       	push   0xc003163d
c0018f95:	e8 78 02 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018f9a:	58                   	pop    eax
c0018f9b:	5a                   	pop    edx
c0018f9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fa0:	50                   	push   eax
c0018fa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fa5:	68 50 16 03 c0       	push   0xc0031650
c0018faa:	e8 63 02 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0018faf:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018fbb:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	5b                   	pop    ebx
c0018fc6:	5e                   	pop    esi
c0018fc7:	5f                   	pop    edi
c0018fc8:	c3                   	ret    

c0018fc9 <mapVASFirstTime>:
c0018fc9:	55                   	push   ebp
c0018fca:	57                   	push   edi
c0018fcb:	56                   	push   esi
c0018fcc:	53                   	push   ebx
c0018fcd:	83 ec 0c             	sub    esp,0xc
c0018fd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fd5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018fd8:	83 fa 01             	cmp    edx,0x1
c0018fdb:	0f 84 cb 00 00 00    	je     c00190ac <mapVASFirstTime+0xe3>
c0018fe1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018fe4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018fe9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018fee:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018ff1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018ff7:	c1 e5 15             	shl    ebp,0x15
c0018ffa:	29 eb                	sub    ebx,ebp
c0018ffc:	29 ef                	sub    edi,ebp
c0018ffe:	e8 e7 d6 ff ff       	call   c00166ea <Phys::allocatePage()>
c0019003:	83 ec 0c             	sub    esp,0xc
c0019006:	68 03 04 00 00       	push   0x403
c001900b:	6a 01                	push   0x1
c001900d:	53                   	push   ebx
c001900e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019014:	50                   	push   eax
c0019015:	56                   	push   esi
c0019016:	e8 f5 f7 ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001901b:	83 c4 20             	add    esp,0x20
c001901e:	39 fb                	cmp    ebx,edi
c0019020:	75 dc                	jne    c0018ffe <mapVASFirstTime+0x35>
c0019022:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0019027:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001902c:	29 eb                	sub    ebx,ebp
c001902e:	29 ef                	sub    edi,ebp
c0019030:	e8 b5 d6 ff ff       	call   c00166ea <Phys::allocatePage()>
c0019035:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019039:	83 fa 01             	cmp    edx,0x1
c001903c:	19 d2                	sbb    edx,edx
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	83 e2 04             	and    edx,0x4
c0019044:	81 c2 03 04 00 00    	add    edx,0x403
c001904a:	52                   	push   edx
c001904b:	6a 01                	push   0x1
c001904d:	53                   	push   ebx
c001904e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019054:	50                   	push   eax
c0019055:	56                   	push   esi
c0019056:	e8 b5 f7 ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001905b:	83 c4 20             	add    esp,0x20
c001905e:	39 df                	cmp    edi,ebx
c0019060:	75 ce                	jne    c0019030 <mapVASFirstTime+0x67>
c0019062:	83 ec 0c             	sub    esp,0xc
c0019065:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c001906a:	6a 04                	push   0x4
c001906c:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019072:	6a ff                	push   0xffffffff
c0019074:	c1 eb 0c             	shr    ebx,0xc
c0019077:	53                   	push   ebx
c0019078:	68 00 50 03 c0       	push   0xc0035000
c001907d:	56                   	push   esi
c001907e:	e8 09 f3 ff ff       	call   c001838c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019083:	83 c4 14             	add    esp,0x14
c0019086:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001908b:	6a 04                	push   0x4
c001908d:	6a ff                	push   0xffffffff
c001908f:	53                   	push   ebx
c0019090:	68 00 50 03 c0       	push   0xc0035000
c0019095:	50                   	push   eax
c0019096:	e8 f1 f2 ff ff       	call   c001838c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001909b:	0f 20 d8             	mov    eax,cr3
c001909e:	0f 22 d8             	mov    cr3,eax
c00190a1:	83 c4 20             	add    esp,0x20
c00190a4:	83 c4 0c             	add    esp,0xc
c00190a7:	5b                   	pop    ebx
c00190a8:	5e                   	pop    esi
c00190a9:	5f                   	pop    edi
c00190aa:	5d                   	pop    ebp
c00190ab:	c3                   	ret    
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	68 5d 16 03 c0       	push   0xc003165d
c00190b4:	e8 59 01 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00190b9:	83 c4 10             	add    esp,0x10
c00190bc:	83 c4 0c             	add    esp,0xc
c00190bf:	5b                   	pop    ebx
c00190c0:	5e                   	pop    esi
c00190c1:	5f                   	pop    edi
c00190c2:	5d                   	pop    ebp
c00190c3:	c3                   	ret    

c00190c4 <__cxa_atexit>:
c00190c4:	31 c0                	xor    eax,eax
c00190c6:	c3                   	ret    

c00190c7 <__cxa_finalize>:
c00190c7:	c3                   	ret    

c00190c8 <__stack_chk_fail>:
c00190c8:	55                   	push   ebp
c00190c9:	89 e5                	mov    ebp,esp
c00190cb:	83 ec 10             	sub    esp,0x10
c00190ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190d1:	68 76 16 03 c0       	push   0xc0031676
c00190d6:	e8 37 01 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00190db:	58                   	pop    eax
c00190dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190df:	5a                   	pop    edx
c00190e0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00190e3:	68 76 16 03 c0       	push   0xc0031676
c00190e8:	e8 25 01 00 00       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00190ed:	c7 04 24 7e 16 03 c0 	mov    DWORD PTR [esp],0xc003167e
c00190f4:	e8 a1 70 00 00       	call   c002019a <KePanic(char const*)>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	c9                   	leave  
c00190fd:	c3                   	ret    

c00190fe <__cxa_pure_virtual>:
c00190fe:	83 ec 18             	sub    esp,0x18
c0019101:	68 96 16 03 c0       	push   0xc0031696
c0019106:	e8 8f 70 00 00       	call   c002019a <KePanic(char const*)>
c001910b:	83 c4 1c             	add    esp,0x1c
c001910e:	c3                   	ret    

c001910f <operator new[](unsigned long)>:
c001910f:	e9 c7 d2 ff ff       	jmp    c00163db <malloc>

c0019114 <operator delete(void*, unsigned long)>:
c0019114:	e9 e2 d2 ff ff       	jmp    c00163fb <rfree>

c0019119 <operator delete[](void*)>:
c0019119:	e9 dd d2 ff ff       	jmp    c00163fb <rfree>

c001911e <operator delete[](void*, unsigned long)>:
c001911e:	e9 d8 d2 ff ff       	jmp    c00163fb <rfree>

c0019123 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019123:	55                   	push   ebp
c0019124:	57                   	push   edi
c0019125:	56                   	push   esi
c0019126:	53                   	push   ebx
c0019127:	83 ec 20             	sub    esp,0x20
c001912a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001912e:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0019136:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001913a:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0019142:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019146:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c001914e:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0019156:	89 f7                	mov    edi,esi
c0019158:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001915d:	89 eb                	mov    ebx,ebp
c001915f:	eb 02                	jmp    c0019163 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019161:	89 c7                	mov    edi,eax
c0019163:	31 d2                	xor    edx,edx
c0019165:	89 f8                	mov    eax,edi
c0019167:	f7 f1                	div    ecx
c0019169:	83 c3 01             	add    ebx,0x1
c001916c:	39 cf                	cmp    edi,ecx
c001916e:	73 f1                	jae    c0019161 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0019170:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0019173:	eb 02                	jmp    c0019177 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019175:	89 c6                	mov    esi,eax
c0019177:	31 d2                	xor    edx,edx
c0019179:	89 f0                	mov    eax,esi
c001917b:	f7 f1                	div    ecx
c001917d:	83 eb 01             	sub    ebx,0x1
c0019180:	39 ce                	cmp    esi,ecx
c0019182:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019186:	88 13                	mov    BYTE PTR [ebx],dl
c0019188:	73 eb                	jae    c0019175 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c001918a:	83 c4 20             	add    esp,0x20
c001918d:	89 e8                	mov    eax,ebp
c001918f:	5b                   	pop    ebx
c0019190:	5e                   	pop    esi
c0019191:	5f                   	pop    edi
c0019192:	5d                   	pop    ebp
c0019193:	c3                   	ret    

c0019194 <Dbg::logc(char)>:
c0019194:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001919b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001919f:	75 12                	jne    c00191b3 <Dbg::logc(char)+0x1f>
c00191a1:	ba fd 03 00 00       	mov    edx,0x3fd
c00191a6:	ec                   	in     al,dx
c00191a7:	a8 20                	test   al,0x20
c00191a9:	74 fb                	je     c00191a6 <Dbg::logc(char)+0x12>
c00191ab:	ba f8 03 00 00       	mov    edx,0x3f8
c00191b0:	88 c8                	mov    al,cl
c00191b2:	ee                   	out    dx,al
c00191b3:	c3                   	ret    

c00191b4 <Dbg::logs(char*)>:
c00191b4:	53                   	push   ebx
c00191b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00191b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191bc:	85 c0                	test   eax,eax
c00191be:	74 11                	je     c00191d1 <Dbg::logs(char*)+0x1d>
c00191c0:	50                   	push   eax
c00191c1:	83 c3 01             	add    ebx,0x1
c00191c4:	e8 cb ff ff ff       	call   c0019194 <Dbg::logc(char)>
c00191c9:	58                   	pop    eax
c00191ca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191cd:	85 c0                	test   eax,eax
c00191cf:	75 ef                	jne    c00191c0 <Dbg::logs(char*)+0xc>
c00191d1:	5b                   	pop    ebx
c00191d2:	c3                   	ret    

c00191d3 <Dbg::logWriteInt(unsigned int)>:
c00191d3:	83 ec 10             	sub    esp,0x10
c00191d6:	6a 0a                	push   0xa
c00191d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191dc:	50                   	push   eax
c00191dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191e1:	50                   	push   eax
c00191e2:	e8 3c ff ff ff       	call   c0019123 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00191e7:	50                   	push   eax
c00191e8:	e8 c7 ff ff ff       	call   c00191b4 <Dbg::logs(char*)>
c00191ed:	83 c4 20             	add    esp,0x20
c00191f0:	c3                   	ret    

c00191f1 <Dbg::logWriteIntBase(unsigned int, int)>:
c00191f1:	83 ec 10             	sub    esp,0x10
c00191f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191f8:	50                   	push   eax
c00191f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191fd:	50                   	push   eax
c00191fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019202:	52                   	push   edx
c0019203:	e8 1b ff ff ff       	call   c0019123 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019208:	50                   	push   eax
c0019209:	e8 a6 ff ff ff       	call   c00191b4 <Dbg::logs(char*)>
c001920e:	83 c4 20             	add    esp,0x20
c0019211:	c3                   	ret    

c0019212 <Dbg::kprintf(char const*, ...)>:
c0019212:	55                   	push   ebp
c0019213:	57                   	push   edi
c0019214:	56                   	push   esi
c0019215:	53                   	push   ebx
c0019216:	83 ec 0c             	sub    esp,0xc
c0019219:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019224:	74 08                	je     c001922e <Dbg::kprintf(char const*, ...)+0x1c>
c0019226:	83 c4 0c             	add    esp,0xc
c0019229:	5b                   	pop    ebx
c001922a:	5e                   	pop    esi
c001922b:	5f                   	pop    edi
c001922c:	5d                   	pop    ebp
c001922d:	c3                   	ret    
c001922e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019232:	31 ff                	xor    edi,edi
c0019234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019238:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001923b:	85 c0                	test   eax,eax
c001923d:	74 e7                	je     c0019226 <Dbg::kprintf(char const*, ...)+0x14>
c001923f:	8d 77 01             	lea    esi,[edi+0x1]
c0019242:	83 f8 25             	cmp    eax,0x25
c0019245:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019248:	75 47                	jne    c0019291 <Dbg::kprintf(char const*, ...)+0x7f>
c001924a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001924d:	83 c7 02             	add    edi,0x2
c0019250:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019253:	83 e8 25             	sub    eax,0x25
c0019256:	0f b6 c0             	movzx  eax,al
c0019259:	83 f8 53             	cmp    eax,0x53
c001925c:	0f 87 ce 00 00 00    	ja     c0019330 <Dbg::kprintf(char const*, ...)+0x11e>
c0019262:	ff 24 85 ac 16 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce954]
c0019269:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001926d:	89 c8                	mov    eax,ecx
c001926f:	83 c1 04             	add    ecx,0x4
c0019272:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019276:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019278:	55                   	push   ebp
c0019279:	e8 55 ff ff ff       	call   c00191d3 <Dbg::logWriteInt(unsigned int)>
c001927e:	58                   	pop    eax
c001927f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019282:	85 c0                	test   eax,eax
c0019284:	74 a0                	je     c0019226 <Dbg::kprintf(char const*, ...)+0x14>
c0019286:	8d 77 01             	lea    esi,[edi+0x1]
c0019289:	83 f8 25             	cmp    eax,0x25
c001928c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001928f:	74 b9                	je     c001924a <Dbg::kprintf(char const*, ...)+0x38>
c0019291:	50                   	push   eax
c0019292:	89 f7                	mov    edi,esi
c0019294:	e8 fb fe ff ff       	call   c0019194 <Dbg::logc(char)>
c0019299:	89 ee                	mov    esi,ebp
c001929b:	58                   	pop    eax
c001929c:	eb e1                	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c001929e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192a2:	89 c8                	mov    eax,ecx
c00192a4:	83 c1 04             	add    ecx,0x4
c00192a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ad:	50                   	push   eax
c00192ae:	e8 01 ff ff ff       	call   c00191b4 <Dbg::logs(char*)>
c00192b3:	58                   	pop    eax
c00192b4:	eb c9                	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c00192b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192ba:	89 d0                	mov    eax,edx
c00192bc:	83 c2 04             	add    edx,0x4
c00192bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00192c5:	50                   	push   eax
c00192c6:	e8 08 ff ff ff       	call   c00191d3 <Dbg::logWriteInt(unsigned int)>
c00192cb:	58                   	pop    eax
c00192cc:	eb b1                	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c00192ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192d2:	89 d0                	mov    eax,edx
c00192d4:	83 c2 04             	add    edx,0x4
c00192d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192db:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00192de:	50                   	push   eax
c00192df:	e8 b0 fe ff ff       	call   c0019194 <Dbg::logc(char)>
c00192e4:	58                   	pop    eax
c00192e5:	eb 98                	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c00192e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192eb:	89 c8                	mov    eax,ecx
c00192ed:	83 c1 04             	add    ecx,0x4
c00192f0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192f4:	6a 10                	push   0x10
c00192f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00192f8:	51                   	push   ecx
c00192f9:	e8 f3 fe ff ff       	call   c00191f1 <Dbg::logWriteIntBase(unsigned int, int)>
c00192fe:	5d                   	pop    ebp
c00192ff:	58                   	pop    eax
c0019300:	e9 7a ff ff ff       	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c0019305:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019309:	89 d0                	mov    eax,edx
c001930b:	83 c2 08             	add    edx,0x8
c001930e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019312:	6a 10                	push   0x10
c0019314:	8b 00                	mov    eax,DWORD PTR [eax]
c0019316:	50                   	push   eax
c0019317:	e8 d5 fe ff ff       	call   c00191f1 <Dbg::logWriteIntBase(unsigned int, int)>
c001931c:	58                   	pop    eax
c001931d:	5a                   	pop    edx
c001931e:	e9 5c ff ff ff       	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c0019323:	6a 25                	push   0x25
c0019325:	e8 6a fe ff ff       	call   c0019194 <Dbg::logc(char)>
c001932a:	5a                   	pop    edx
c001932b:	e9 4f ff ff ff       	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>
c0019330:	6a 25                	push   0x25
c0019332:	e8 5d fe ff ff       	call   c0019194 <Dbg::logc(char)>
c0019337:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001933b:	50                   	push   eax
c001933c:	e8 53 fe ff ff       	call   c0019194 <Dbg::logc(char)>
c0019341:	5a                   	pop    edx
c0019342:	59                   	pop    ecx
c0019343:	e9 37 ff ff ff       	jmp    c001927f <Dbg::kprintf(char const*, ...)+0x6d>

c0019348 <KiUbsanPrintDetails(char const*, void*)>:
c0019348:	83 ec 1c             	sub    esp,0x1c
c001934b:	83 ec 08             	sub    esp,0x8
c001934e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019352:	68 fc 17 03 c0       	push   0xc00317fc
c0019357:	e8 b6 fe ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019367:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001936b:	8b 00                	mov    eax,DWORD PTR [eax]
c001936d:	83 ec 08             	sub    esp,0x8
c0019370:	50                   	push   eax
c0019371:	68 10 18 03 c0       	push   0xc0031810
c0019376:	e8 97 fe ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001937b:	83 c4 10             	add    esp,0x10
c001937e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019385:	83 ec 08             	sub    esp,0x8
c0019388:	50                   	push   eax
c0019389:	68 1a 18 03 c0       	push   0xc003181a
c001938e:	e8 7f fe ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001939a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001939d:	83 ec 08             	sub    esp,0x8
c00193a0:	50                   	push   eax
c00193a1:	68 24 18 03 c0       	push   0xc0031824
c00193a6:	e8 67 fe ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	90                   	nop
c00193af:	83 c4 1c             	add    esp,0x1c
c00193b2:	c3                   	ret    
c00193b3:	90                   	nop

c00193b4 <__ubsan_handle_type_mismatch_v1>:
c00193b4:	83 ec 0c             	sub    esp,0xc
c00193b7:	83 ec 08             	sub    esp,0x8
c00193ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193be:	68 68 19 03 c0       	push   0xc0031968
c00193c3:	e8 80 ff ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193d0:	75 16                	jne    c00193e8 <__ubsan_handle_type_mismatch_v1+0x34>
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	68 2e 18 03 c0       	push   0xc003182e
c00193da:	e8 33 fe ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	e9 91 00 00 00       	jmp    c0019478 <__ubsan_handle_type_mismatch_v1+0xc4>
c00193e7:	90                   	nop
c00193e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00193ef:	85 c0                	test   eax,eax
c00193f1:	74 29                	je     c001941c <__ubsan_handle_type_mismatch_v1+0x68>
c00193f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00193fa:	83 e8 01             	sub    eax,0x1
c00193fd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019401:	75 19                	jne    c001941c <__ubsan_handle_type_mismatch_v1+0x68>
c0019403:	83 ec 08             	sub    esp,0x8
c0019406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001940a:	68 88 19 03 c0       	push   0xc0031988
c001940f:	e8 fe fd ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	eb 5f                	jmp    c0019478 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019419:	8d 76 00             	lea    esi,[esi+0x0]
c001941c:	83 ec 0c             	sub    esp,0xc
c001941f:	68 43 18 03 c0       	push   0xc0031843
c0019424:	e8 e9 fd ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019429:	83 c4 10             	add    esp,0x10
c001942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019430:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019433:	0f b6 c0             	movzx  eax,al
c0019436:	83 ec 08             	sub    esp,0x8
c0019439:	50                   	push   eax
c001943a:	68 5d 18 03 c0       	push   0xc003185d
c001943f:	e8 ce fd ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001944b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001944e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019451:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019459:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001945c:	0f b6 c0             	movzx  eax,al
c001945f:	8b 04 85 20 3b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc4e0]
c0019466:	51                   	push   ecx
c0019467:	52                   	push   edx
c0019468:	50                   	push   eax
c0019469:	68 b0 19 03 c0       	push   0xc00319b0
c001946e:	e8 9f fd ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	66 90                	xchg   ax,ax
c0019478:	83 ec 0c             	sub    esp,0xc
c001947b:	68 68 19 03 c0       	push   0xc0031968
c0019480:	e8 15 6d 00 00       	call   c002019a <KePanic(char const*)>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	90                   	nop
c0019489:	83 c4 0c             	add    esp,0xc
c001948c:	c3                   	ret    
c001948d:	8d 76 00             	lea    esi,[esi+0x0]

c0019490 <__ubsan_handle_pointer_overflow>:
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	83 ec 08             	sub    esp,0x8
c0019496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001949a:	68 f8 19 03 c0       	push   0xc00319f8
c001949f:	e8 a4 fe ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	83 ec 0c             	sub    esp,0xc
c00194aa:	68 f8 19 03 c0       	push   0xc00319f8
c00194af:	e8 e6 6c 00 00       	call   c002019a <KePanic(char const*)>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	90                   	nop
c00194b8:	83 c4 0c             	add    esp,0xc
c00194bb:	c3                   	ret    

c00194bc <__ubsan_handle_out_of_bounds>:
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	83 ec 08             	sub    esp,0x8
c00194c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194c6:	68 68 18 03 c0       	push   0xc0031868
c00194cb:	e8 78 fe ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	68 68 18 03 c0       	push   0xc0031868
c00194db:	e8 ba 6c 00 00       	call   c002019a <KePanic(char const*)>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	90                   	nop
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	c3                   	ret    

c00194e8 <__ubsan_handle_add_overflow>:
c00194e8:	83 ec 0c             	sub    esp,0xc
c00194eb:	83 ec 08             	sub    esp,0x8
c00194ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194f2:	68 85 18 03 c0       	push   0xc0031885
c00194f7:	e8 4c fe ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00194fc:	83 c4 10             	add    esp,0x10
c00194ff:	83 ec 0c             	sub    esp,0xc
c0019502:	68 85 18 03 c0       	push   0xc0031885
c0019507:	e8 8e 6c 00 00       	call   c002019a <KePanic(char const*)>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	90                   	nop
c0019510:	83 c4 0c             	add    esp,0xc
c0019513:	c3                   	ret    

c0019514 <__ubsan_handle_load_invalid_value>:
c0019514:	83 ec 0c             	sub    esp,0xc
c0019517:	83 ec 08             	sub    esp,0x8
c001951a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951e:	68 18 1a 03 c0       	push   0xc0031a18
c0019523:	e8 20 fe ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	68 18 1a 03 c0       	push   0xc0031a18
c0019533:	e8 62 6c 00 00       	call   c002019a <KePanic(char const*)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	90                   	nop
c001953c:	83 c4 0c             	add    esp,0xc
c001953f:	c3                   	ret    

c0019540 <__ubsan_handle_divrem_overflow>:
c0019540:	83 ec 0c             	sub    esp,0xc
c0019543:	83 ec 08             	sub    esp,0x8
c0019546:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001954a:	68 3c 1a 03 c0       	push   0xc0031a3c
c001954f:	e8 f4 fd ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	68 3c 1a 03 c0       	push   0xc0031a3c
c001955f:	e8 36 6c 00 00       	call   c002019a <KePanic(char const*)>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	90                   	nop
c0019568:	83 c4 0c             	add    esp,0xc
c001956b:	c3                   	ret    

c001956c <__ubsan_handle_mul_overflow>:
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	83 ec 08             	sub    esp,0x8
c0019572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019576:	68 a1 18 03 c0       	push   0xc00318a1
c001957b:	e8 c8 fd ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	68 a1 18 03 c0       	push   0xc00318a1
c001958b:	e8 0a 6c 00 00       	call   c002019a <KePanic(char const*)>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	90                   	nop
c0019594:	83 c4 0c             	add    esp,0xc
c0019597:	c3                   	ret    

c0019598 <__ubsan_handle_sub_overflow>:
c0019598:	83 ec 0c             	sub    esp,0xc
c001959b:	83 ec 08             	sub    esp,0x8
c001959e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195a2:	68 bd 18 03 c0       	push   0xc00318bd
c00195a7:	e8 9c fd ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	83 ec 0c             	sub    esp,0xc
c00195b2:	68 bd 18 03 c0       	push   0xc00318bd
c00195b7:	e8 de 6b 00 00       	call   c002019a <KePanic(char const*)>
c00195bc:	83 c4 10             	add    esp,0x10
c00195bf:	90                   	nop
c00195c0:	83 c4 0c             	add    esp,0xc
c00195c3:	c3                   	ret    

c00195c4 <__ubsan_handle_shift_out_of_bounds>:
c00195c4:	83 ec 0c             	sub    esp,0xc
c00195c7:	83 ec 08             	sub    esp,0x8
c00195ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ce:	68 5c 1a 03 c0       	push   0xc0031a5c
c00195d3:	e8 70 fd ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c00195d8:	83 c4 10             	add    esp,0x10
c00195db:	83 ec 0c             	sub    esp,0xc
c00195de:	68 5c 1a 03 c0       	push   0xc0031a5c
c00195e3:	e8 b2 6b 00 00       	call   c002019a <KePanic(char const*)>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	90                   	nop
c00195ec:	83 c4 0c             	add    esp,0xc
c00195ef:	c3                   	ret    

c00195f0 <__ubsan_handle_negate_overflow>:
c00195f0:	83 ec 0c             	sub    esp,0xc
c00195f3:	83 ec 08             	sub    esp,0x8
c00195f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195fa:	68 80 1a 03 c0       	push   0xc0031a80
c00195ff:	e8 44 fd ff ff       	call   c0019348 <KiUbsanPrintDetails(char const*, void*)>
c0019604:	83 c4 10             	add    esp,0x10
c0019607:	83 ec 0c             	sub    esp,0xc
c001960a:	68 80 1a 03 c0       	push   0xc0031a80
c001960f:	e8 86 6b 00 00       	call   c002019a <KePanic(char const*)>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	90                   	nop
c0019618:	83 c4 0c             	add    esp,0xc
c001961b:	c3                   	ret    

c001961c <KiIsHashInTable(unsigned short)>:
c001961c:	0f b7 d0             	movzx  edx,ax
c001961f:	83 e0 07             	and    eax,0x7
c0019622:	c1 fa 03             	sar    edx,0x3
c0019625:	88 c1                	mov    cl,al
c0019627:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c001962e:	d3 fa                	sar    edx,cl
c0019630:	89 d0                	mov    eax,edx
c0019632:	83 e0 01             	and    eax,0x1
c0019635:	c3                   	ret    

c0019636 <KiSetHashInTable(unsigned short, bool)>:
c0019636:	56                   	push   esi
c0019637:	53                   	push   ebx
c0019638:	0f b7 d8             	movzx  ebx,ax
c001963b:	c1 fb 03             	sar    ebx,0x3
c001963e:	83 e0 07             	and    eax,0x7
c0019641:	89 c1                	mov    ecx,eax
c0019643:	b8 01 00 00 00       	mov    eax,0x1
c0019648:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001964f:	d3 e0                	shl    eax,cl
c0019651:	84 d2                	test   dl,dl
c0019653:	74 04                	je     c0019659 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019655:	09 f0                	or     eax,esi
c0019657:	eb 04                	jmp    c001965d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019659:	f7 d0                	not    eax
c001965b:	21 f0                	and    eax,esi
c001965d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019663:	5b                   	pop    ebx
c0019664:	5e                   	pop    esi
c0019665:	c3                   	ret    

c0019666 <KiFlushSymlinkChanges()>:
c0019666:	57                   	push   edi
c0019667:	56                   	push   esi
c0019668:	53                   	push   ebx
c0019669:	83 ec 1c             	sub    esp,0x1c
c001966c:	68 14 01 00 00       	push   0x114
c0019671:	e8 65 cd ff ff       	call   c00163db <malloc>
c0019676:	83 c4 0c             	add    esp,0xc
c0019679:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001967f:	68 9f 1a 03 c0       	push   0xc0031a9f
c0019684:	50                   	push   eax
c0019685:	89 c3                	mov    ebx,eax
c0019687:	e8 9e 0d 00 00       	call   c001a42a <File::File(char const*, Process*)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	85 db                	test   ebx,ebx
c0019691:	75 10                	jne    c00196a3 <KiFlushSymlinkChanges()+0x3d>
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	68 bd 1a 03 c0       	push   0xc0031abd
c001969b:	e8 fa 6a 00 00       	call   c002019a <KePanic(char const*)>
c00196a0:	83 c4 10             	add    esp,0x10
c00196a3:	50                   	push   eax
c00196a4:	50                   	push   eax
c00196a5:	6a 06                	push   0x6
c00196a7:	53                   	push   ebx
c00196a8:	e8 9b 0d 00 00       	call   c001a448 <File::open(FileOpenMode)>
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	85 c0                	test   eax,eax
c00196b2:	74 10                	je     c00196c4 <KiFlushSymlinkChanges()+0x5e>
c00196b4:	83 ec 0c             	sub    esp,0xc
c00196b7:	68 d7 1a 03 c0       	push   0xc0031ad7
c00196bc:	e8 d9 6a 00 00       	call   c002019a <KePanic(char const*)>
c00196c1:	83 c4 10             	add    esp,0x10
c00196c4:	31 f6                	xor    esi,esi
c00196c6:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c00196cc:	7e 70                	jle    c001973e <KiFlushSymlinkChanges()+0xd8>
c00196ce:	83 ec 0c             	sub    esp,0xc
c00196d1:	89 f0                	mov    eax,esi
c00196d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00196d9:	c1 e0 08             	shl    eax,0x8
c00196dc:	57                   	push   edi
c00196dd:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00196e2:	50                   	push   eax
c00196e3:	6a 00                	push   0x0
c00196e5:	68 00 01 00 00       	push   0x100
c00196ea:	53                   	push   ebx
c00196eb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00196ee:	83 c4 20             	add    esp,0x20
c00196f1:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00196f9:	74 10                	je     c001970b <KiFlushSymlinkChanges()+0xa5>
c00196fb:	83 ec 0c             	sub    esp,0xc
c00196fe:	68 f1 1a 03 c0       	push   0xc0031af1
c0019703:	e8 92 6a 00 00       	call   c002019a <KePanic(char const*)>
c0019708:	83 c4 10             	add    esp,0x10
c001970b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001970d:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019714:	83 ec 0c             	sub    esp,0xc
c0019717:	57                   	push   edi
c0019718:	52                   	push   edx
c0019719:	6a 00                	push   0x0
c001971b:	6a 08                	push   0x8
c001971d:	53                   	push   ebx
c001971e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019721:	83 c4 20             	add    esp,0x20
c0019724:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019729:	74 10                	je     c001973b <KiFlushSymlinkChanges()+0xd5>
c001972b:	83 ec 0c             	sub    esp,0xc
c001972e:	68 0b 1b 03 c0       	push   0xc0031b0b
c0019733:	e8 62 6a 00 00       	call   c002019a <KePanic(char const*)>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	46                   	inc    esi
c001973c:	eb 88                	jmp    c00196c6 <KiFlushSymlinkChanges()+0x60>
c001973e:	83 ec 0c             	sub    esp,0xc
c0019741:	53                   	push   ebx
c0019742:	e8 5f 0d 00 00       	call   c001a4a6 <File::close()>
c0019747:	83 c4 10             	add    esp,0x10
c001974a:	85 db                	test   ebx,ebx
c001974c:	74 0c                	je     c001975a <KiFlushSymlinkChanges()+0xf4>
c001974e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	53                   	push   ebx
c0019754:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	5b                   	pop    ebx
c0019768:	5e                   	pop    esi
c0019769:	5f                   	pop    edi
c001976a:	c3                   	ret    

c001976b <KiDeinitialiseSymlinks(void*)>:
c001976b:	e9 f6 fe ff ff       	jmp    c0019666 <KiFlushSymlinkChanges()>

c0019770 <KiGetSymlinkHash(char const*)>:
c0019770:	53                   	push   ebx
c0019771:	89 c3                	mov    ebx,eax
c0019773:	83 ec 14             	sub    esp,0x14
c0019776:	50                   	push   eax
c0019777:	e8 04 6e fe ff       	call   c0000580 <strlen>
c001977c:	5a                   	pop    edx
c001977d:	59                   	pop    ecx
c001977e:	50                   	push   eax
c001977f:	53                   	push   ebx
c0019780:	e8 7c 63 00 00       	call   c001fb01 <KeCalculateCRC32(unsigned char*, int)>
c0019785:	83 c4 18             	add    esp,0x18
c0019788:	5b                   	pop    ebx
c0019789:	89 c2                	mov    edx,eax
c001978b:	c1 ea 10             	shr    edx,0x10
c001978e:	31 d0                	xor    eax,edx
c0019790:	c3                   	ret    

c0019791 <KiCreateSymlinkID()>:
c0019791:	55                   	push   ebp
c0019792:	57                   	push   edi
c0019793:	56                   	push   esi
c0019794:	53                   	push   ebx
c0019795:	31 db                	xor    ebx,ebx
c0019797:	83 ec 1c             	sub    esp,0x1c
c001979a:	e8 49 6b 00 00       	call   c00202e8 <KeRand()>
c001979f:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00197a5:	31 d2                	xor    edx,edx
c00197a7:	43                   	inc    ebx
c00197a8:	31 ff                	xor    edi,edi
c00197aa:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00197ad:	89 ee                	mov    esi,ebp
c00197af:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00197b5:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00197b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197bd:	c1 e0 1f             	shl    eax,0x1f
c00197c0:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00197c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197ca:	75 10                	jne    c00197dc <KiCreateSymlinkID()+0x4b>
c00197cc:	83 ec 0c             	sub    esp,0xc
c00197cf:	68 25 1b 03 c0       	push   0xc0031b25
c00197d4:	e8 c1 69 00 00       	call   c002019a <KePanic(char const*)>
c00197d9:	83 c4 10             	add    esp,0x10
c00197dc:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00197e0:	75 06                	jne    c00197e8 <KiCreateSymlinkID()+0x57>
c00197e2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00197e6:	74 b2                	je     c001979a <KiCreateSymlinkID()+0x9>
c00197e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197f0:	83 c4 1c             	add    esp,0x1c
c00197f3:	5b                   	pop    ebx
c00197f4:	31 f0                	xor    eax,esi
c00197f6:	5e                   	pop    esi
c00197f7:	31 fa                	xor    edx,edi
c00197f9:	5f                   	pop    edi
c00197fa:	5d                   	pop    ebp
c00197fb:	c3                   	ret    

c00197fc <KeRegisterSymlink(char const*, unsigned long long)>:
c00197fc:	53                   	push   ebx
c00197fd:	83 ec 0c             	sub    esp,0xc
c0019800:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019808:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001980d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019811:	68 00 01 00 00       	push   0x100
c0019816:	6a 00                	push   0x0
c0019818:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c001981f:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019826:	c1 e0 08             	shl    eax,0x8
c0019829:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001982e:	50                   	push   eax
c001982f:	e8 bc 6c fe ff       	call   c00004f0 <memset>
c0019834:	58                   	pop    eax
c0019835:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001983a:	5a                   	pop    edx
c001983b:	c1 e0 08             	shl    eax,0x8
c001983e:	53                   	push   ebx
c001983f:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019844:	50                   	push   eax
c0019845:	e8 06 6e fe ff       	call   c0000650 <strcpy>
c001984a:	89 d8                	mov    eax,ebx
c001984c:	e8 1f ff ff ff       	call   c0019770 <KiGetSymlinkHash(char const*)>
c0019851:	59                   	pop    ecx
c0019852:	0f b7 d8             	movzx  ebx,ax
c0019855:	58                   	pop    eax
c0019856:	53                   	push   ebx
c0019857:	68 2e 1b 03 c0       	push   0xc0031b2e
c001985c:	e8 b1 f9 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019861:	89 d8                	mov    eax,ebx
c0019863:	ba 01 00 00 00       	mov    edx,0x1
c0019868:	e8 c9 fd ff ff       	call   c0019636 <KiSetHashInTable(unsigned short, bool)>
c001986d:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019872:	83 c4 10             	add    esp,0x10
c0019875:	40                   	inc    eax
c0019876:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c001987b:	83 f8 03             	cmp    eax,0x3
c001987e:	7e 09                	jle    c0019889 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019880:	83 c4 08             	add    esp,0x8
c0019883:	5b                   	pop    ebx
c0019884:	e9 dd fd ff ff       	jmp    c0019666 <KiFlushSymlinkChanges()>
c0019889:	83 c4 08             	add    esp,0x8
c001988c:	5b                   	pop    ebx
c001988d:	c3                   	ret    

c001988e <KeInitialiseSymlinks()>:
c001988e:	57                   	push   edi
c001988f:	56                   	push   esi
c0019890:	53                   	push   ebx
c0019891:	81 ec 14 01 00 00    	sub    esp,0x114
c0019897:	68 00 20 00 00       	push   0x2000
c001989c:	6a 00                	push   0x0
c001989e:	68 00 af 03 c0       	push   0xc003af00
c00198a3:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00198ad:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00198b7:	e8 34 6c fe ff       	call   c00004f0 <memset>
c00198bc:	59                   	pop    ecx
c00198bd:	5b                   	pop    ebx
c00198be:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c00198c4:	68 42 1b 03 c0       	push   0xc0031b42
c00198c9:	e8 44 f9 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00198ce:	5e                   	pop    esi
c00198cf:	5f                   	pop    edi
c00198d0:	6a 00                	push   0x0
c00198d2:	68 6b 97 01 c0       	push   0xc001976b
c00198d7:	e8 4a 60 00 00       	call   c001f926 <KeRegisterAtexit(void (*)(void*), void*)>
c00198dc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00198e3:	e8 f3 ca ff ff       	call   c00163db <malloc>
c00198e8:	83 c4 0c             	add    esp,0xc
c00198eb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00198f1:	68 9f 1a 03 c0       	push   0xc0031a9f
c00198f6:	50                   	push   eax
c00198f7:	89 c3                	mov    ebx,eax
c00198f9:	e8 2c 0b 00 00       	call   c001a42a <File::File(char const*, Process*)>
c00198fe:	83 c4 10             	add    esp,0x10
c0019901:	85 db                	test   ebx,ebx
c0019903:	75 10                	jne    c0019915 <KeInitialiseSymlinks()+0x87>
c0019905:	83 ec 0c             	sub    esp,0xc
c0019908:	68 5f 1b 03 c0       	push   0xc0031b5f
c001990d:	e8 88 68 00 00       	call   c002019a <KePanic(char const*)>
c0019912:	83 c4 10             	add    esp,0x10
c0019915:	83 ec 0c             	sub    esp,0xc
c0019918:	53                   	push   ebx
c0019919:	e8 ee 0d 00 00       	call   c001a70c <File::exists()>
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	84 c0                	test   al,al
c0019923:	75 3a                	jne    c001995f <KeInitialiseSymlinks()+0xd1>
c0019925:	52                   	push   edx
c0019926:	52                   	push   edx
c0019927:	6a 12                	push   0x12
c0019929:	53                   	push   ebx
c001992a:	e8 19 0b 00 00       	call   c001a448 <File::open(FileOpenMode)>
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	85 c0                	test   eax,eax
c0019934:	74 10                	je     c0019946 <KeInitialiseSymlinks()+0xb8>
c0019936:	83 ec 0c             	sub    esp,0xc
c0019939:	68 7c 1b 03 c0       	push   0xc0031b7c
c001993e:	e8 57 68 00 00       	call   c002019a <KePanic(char const*)>
c0019943:	83 c4 10             	add    esp,0x10
c0019946:	83 ec 0c             	sub    esp,0xc
c0019949:	53                   	push   ebx
c001994a:	e8 57 0b 00 00       	call   c001a4a6 <File::close()>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	85 db                	test   ebx,ebx
c0019954:	0f 84 9e 00 00 00    	je     c00199f8 <KeInitialiseSymlinks()+0x16a>
c001995a:	e9 8d 00 00 00       	jmp    c00199ec <KeInitialiseSymlinks()+0x15e>
c001995f:	50                   	push   eax
c0019960:	50                   	push   eax
c0019961:	6a 01                	push   0x1
c0019963:	53                   	push   ebx
c0019964:	e8 df 0a 00 00       	call   c001a448 <File::open(FileOpenMode)>
c0019969:	83 c4 10             	add    esp,0x10
c001996c:	85 c0                	test   eax,eax
c001996e:	74 10                	je     c0019980 <KeInitialiseSymlinks()+0xf2>
c0019970:	83 ec 0c             	sub    esp,0xc
c0019973:	68 99 1b 03 c0       	push   0xc0031b99
c0019978:	e8 1d 68 00 00       	call   c002019a <KePanic(char const*)>
c001997d:	83 c4 10             	add    esp,0x10
c0019980:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019986:	83 ec 0c             	sub    esp,0xc
c0019989:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001998d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001998f:	57                   	push   edi
c0019990:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019994:	56                   	push   esi
c0019995:	6a 00                	push   0x0
c0019997:	68 00 01 00 00       	push   0x100
c001999c:	53                   	push   ebx
c001999d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199a0:	83 c4 20             	add    esp,0x20
c00199a3:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00199ab:	75 33                	jne    c00199e0 <KeInitialiseSymlinks()+0x152>
c00199ad:	83 ec 0c             	sub    esp,0xc
c00199b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199b2:	57                   	push   edi
c00199b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00199b7:	52                   	push   edx
c00199b8:	6a 00                	push   0x0
c00199ba:	6a 08                	push   0x8
c00199bc:	53                   	push   ebx
c00199bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199c0:	83 c4 20             	add    esp,0x20
c00199c3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00199c8:	75 16                	jne    c00199e0 <KeInitialiseSymlinks()+0x152>
c00199ca:	89 f0                	mov    eax,esi
c00199cc:	e8 9f fd ff ff       	call   c0019770 <KiGetSymlinkHash(char const*)>
c00199d1:	ba 01 00 00 00       	mov    edx,0x1
c00199d6:	0f b7 c0             	movzx  eax,ax
c00199d9:	e8 58 fc ff ff       	call   c0019636 <KiSetHashInTable(unsigned short, bool)>
c00199de:	eb a0                	jmp    c0019980 <KeInitialiseSymlinks()+0xf2>
c00199e0:	83 ec 0c             	sub    esp,0xc
c00199e3:	53                   	push   ebx
c00199e4:	e8 bd 0a 00 00       	call   c001a4a6 <File::close()>
c00199e9:	83 c4 10             	add    esp,0x10
c00199ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ee:	83 ec 0c             	sub    esp,0xc
c00199f1:	53                   	push   ebx
c00199f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199f5:	83 c4 10             	add    esp,0x10
c00199f8:	81 c4 10 01 00 00    	add    esp,0x110
c00199fe:	5b                   	pop    ebx
c00199ff:	5e                   	pop    esi
c0019a00:	5f                   	pop    edi
c0019a01:	c3                   	ret    

c0019a02 <KiIsSymlinkRegistered(char const*)>:
c0019a02:	55                   	push   ebp
c0019a03:	57                   	push   edi
c0019a04:	56                   	push   esi
c0019a05:	53                   	push   ebx
c0019a06:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a0c:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019a13:	89 f0                	mov    eax,esi
c0019a15:	e8 56 fd ff ff       	call   c0019770 <KiGetSymlinkHash(char const*)>
c0019a1a:	53                   	push   ebx
c0019a1b:	56                   	push   esi
c0019a1c:	0f b7 c0             	movzx  eax,ax
c0019a1f:	50                   	push   eax
c0019a20:	68 b4 1b 03 c0       	push   0xc0031bb4
c0019a25:	e8 e8 f7 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019a2a:	89 f0                	mov    eax,esi
c0019a2c:	e8 3f fd ff ff       	call   c0019770 <KiGetSymlinkHash(char const*)>
c0019a31:	0f b7 c0             	movzx  eax,ax
c0019a34:	e8 e3 fb ff ff       	call   c001961c <KiIsHashInTable(unsigned short)>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	31 d2                	xor    edx,edx
c0019a3e:	88 c1                	mov    cl,al
c0019a40:	31 c0                	xor    eax,eax
c0019a42:	84 c9                	test   cl,cl
c0019a44:	0f 84 31 01 00 00    	je     c0019b7b <KiIsSymlinkRegistered(char const*)+0x179>
c0019a4a:	31 db                	xor    ebx,ebx
c0019a4c:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019a52:	7e 30                	jle    c0019a84 <KiIsSymlinkRegistered(char const*)+0x82>
c0019a54:	89 d8                	mov    eax,ebx
c0019a56:	c1 e0 08             	shl    eax,0x8
c0019a59:	51                   	push   ecx
c0019a5a:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a5f:	51                   	push   ecx
c0019a60:	50                   	push   eax
c0019a61:	56                   	push   esi
c0019a62:	e8 19 6d fe ff       	call   c0000780 <strcmp>
c0019a67:	83 c4 10             	add    esp,0x10
c0019a6a:	85 c0                	test   eax,eax
c0019a6c:	75 13                	jne    c0019a81 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019a6e:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019a75:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019a7c:	e9 fa 00 00 00       	jmp    c0019b7b <KiIsSymlinkRegistered(char const*)+0x179>
c0019a81:	43                   	inc    ebx
c0019a82:	eb c8                	jmp    c0019a4c <KiIsSymlinkRegistered(char const*)+0x4a>
c0019a84:	83 ec 0c             	sub    esp,0xc
c0019a87:	68 14 01 00 00       	push   0x114
c0019a8c:	e8 4a c9 ff ff       	call   c00163db <malloc>
c0019a91:	83 c4 0c             	add    esp,0xc
c0019a94:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019a9a:	68 9f 1a 03 c0       	push   0xc0031a9f
c0019a9f:	50                   	push   eax
c0019aa0:	89 c3                	mov    ebx,eax
c0019aa2:	e8 83 09 00 00       	call   c001a42a <File::File(char const*, Process*)>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	85 db                	test   ebx,ebx
c0019aac:	75 12                	jne    c0019ac0 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019aae:	83 ec 0c             	sub    esp,0xc
c0019ab1:	68 c9 1b 03 c0       	push   0xc0031bc9
c0019ab6:	e8 df 66 00 00       	call   c002019a <KePanic(char const*)>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	eb 10                	jmp    c0019ad0 <KiIsSymlinkRegistered(char const*)+0xce>
c0019ac0:	83 ec 0c             	sub    esp,0xc
c0019ac3:	53                   	push   ebx
c0019ac4:	e8 43 0c 00 00       	call   c001a70c <File::exists()>
c0019ac9:	83 c4 10             	add    esp,0x10
c0019acc:	84 c0                	test   al,al
c0019ace:	74 de                	je     c0019aae <KiIsSymlinkRegistered(char const*)+0xac>
c0019ad0:	52                   	push   edx
c0019ad1:	52                   	push   edx
c0019ad2:	6a 01                	push   0x1
c0019ad4:	53                   	push   ebx
c0019ad5:	e8 6e 09 00 00       	call   c001a448 <File::open(FileOpenMode)>
c0019ada:	83 c4 10             	add    esp,0x10
c0019add:	85 c0                	test   eax,eax
c0019adf:	74 10                	je     c0019af1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019ae1:	83 ec 0c             	sub    esp,0xc
c0019ae4:	68 e4 1b 03 c0       	push   0xc0031be4
c0019ae9:	e8 ac 66 00 00       	call   c002019a <KePanic(char const*)>
c0019aee:	83 c4 10             	add    esp,0x10
c0019af1:	83 ec 0c             	sub    esp,0xc
c0019af4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af6:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019afa:	55                   	push   ebp
c0019afb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019aff:	57                   	push   edi
c0019b00:	6a 00                	push   0x0
c0019b02:	68 00 01 00 00       	push   0x100
c0019b07:	53                   	push   ebx
c0019b08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b0b:	83 c4 20             	add    esp,0x20
c0019b0e:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019b16:	75 4b                	jne    c0019b63 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b18:	83 ec 0c             	sub    esp,0xc
c0019b1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b1d:	55                   	push   ebp
c0019b1e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b22:	52                   	push   edx
c0019b23:	6a 00                	push   0x0
c0019b25:	6a 08                	push   0x8
c0019b27:	53                   	push   ebx
c0019b28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b2b:	83 c4 20             	add    esp,0x20
c0019b2e:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019b33:	75 2e                	jne    c0019b63 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b35:	50                   	push   eax
c0019b36:	50                   	push   eax
c0019b37:	57                   	push   edi
c0019b38:	56                   	push   esi
c0019b39:	e8 42 6c fe ff       	call   c0000780 <strcmp>
c0019b3e:	83 c4 10             	add    esp,0x10
c0019b41:	85 c0                	test   eax,eax
c0019b43:	75 ac                	jne    c0019af1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019b45:	83 ec 0c             	sub    esp,0xc
c0019b48:	53                   	push   ebx
c0019b49:	e8 58 09 00 00       	call   c001a4a6 <File::close()>
c0019b4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b5e:	83 c4 10             	add    esp,0x10
c0019b61:	eb 18                	jmp    c0019b7b <KiIsSymlinkRegistered(char const*)+0x179>
c0019b63:	83 ec 0c             	sub    esp,0xc
c0019b66:	53                   	push   ebx
c0019b67:	e8 3a 09 00 00       	call   c001a4a6 <File::close()>
c0019b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b74:	83 c4 10             	add    esp,0x10
c0019b77:	31 c0                	xor    eax,eax
c0019b79:	31 d2                	xor    edx,edx
c0019b7b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b81:	5b                   	pop    ebx
c0019b82:	5e                   	pop    esi
c0019b83:	5f                   	pop    edi
c0019b84:	5d                   	pop    ebp
c0019b85:	c3                   	ret    

c0019b86 <KeDereferenceSymlink(char const*, char*)>:
c0019b86:	55                   	push   ebp
c0019b87:	57                   	push   edi
c0019b88:	56                   	push   esi
c0019b89:	53                   	push   ebx
c0019b8a:	83 ec 48             	sub    esp,0x48
c0019b8d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019b91:	56                   	push   esi
c0019b92:	e8 6b fe ff ff       	call   c0019a02 <KiIsSymlinkRegistered(char const*)>
c0019b97:	83 c4 10             	add    esp,0x10
c0019b9a:	89 c7                	mov    edi,eax
c0019b9c:	89 d0                	mov    eax,edx
c0019b9e:	09 f8                	or     eax,edi
c0019ba0:	75 07                	jne    c0019ba9 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019ba2:	31 c0                	xor    eax,eax
c0019ba4:	e9 7c 01 00 00       	jmp    c0019d25 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019ba9:	83 ec 0c             	sub    esp,0xc
c0019bac:	89 d5                	mov    ebp,edx
c0019bae:	68 14 01 00 00       	push   0x114
c0019bb3:	e8 23 c8 ff ff       	call   c00163db <malloc>
c0019bb8:	83 c4 0c             	add    esp,0xc
c0019bbb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019bc1:	56                   	push   esi
c0019bc2:	50                   	push   eax
c0019bc3:	89 c3                	mov    ebx,eax
c0019bc5:	e8 60 08 00 00       	call   c001a42a <File::File(char const*, Process*)>
c0019bca:	83 c4 10             	add    esp,0x10
c0019bcd:	85 db                	test   ebx,ebx
c0019bcf:	0f 84 32 01 00 00    	je     c0019d07 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019bd5:	56                   	push   esi
c0019bd6:	56                   	push   esi
c0019bd7:	6a 01                	push   0x1
c0019bd9:	53                   	push   ebx
c0019bda:	e8 69 08 00 00       	call   c001a448 <File::open(FileOpenMode)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	85 c0                	test   eax,eax
c0019be4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be6:	74 09                	je     c0019bf1 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	53                   	push   ebx
c0019bec:	e9 10 01 00 00       	jmp    c0019d01 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019bf1:	83 ec 0c             	sub    esp,0xc
c0019bf4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019bf8:	56                   	push   esi
c0019bf9:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019bfd:	52                   	push   edx
c0019bfe:	6a 00                	push   0x0
c0019c00:	6a 08                	push   0x8
c0019c02:	53                   	push   ebx
c0019c03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c06:	83 c4 20             	add    esp,0x20
c0019c09:	85 c0                	test   eax,eax
c0019c0b:	0f 85 e2 00 00 00    	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c11:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c16:	0f 85 d7 00 00 00    	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c21:	56                   	push   esi
c0019c22:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019c26:	52                   	push   edx
c0019c27:	6a 00                	push   0x0
c0019c29:	6a 08                	push   0x8
c0019c2b:	53                   	push   ebx
c0019c2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c2f:	83 c4 20             	add    esp,0x20
c0019c32:	85 c0                	test   eax,eax
c0019c34:	0f 85 b9 00 00 00    	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c3a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c3f:	0f 85 ae 00 00 00    	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c45:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019c49:	0f 85 53 ff ff ff    	jne    c0019ba2 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c4f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019c53:	0f 85 49 ff ff ff    	jne    c0019ba2 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c59:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c61:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c69:	51                   	push   ecx
c0019c6a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019c6e:	50                   	push   eax
c0019c6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c73:	50                   	push   eax
c0019c74:	53                   	push   ebx
c0019c75:	e8 d0 0a 00 00       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0019c7a:	83 c4 10             	add    esp,0x10
c0019c7d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c82:	75 6f                	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c88:	31 c9                	xor    ecx,ecx
c0019c8a:	bf 0f 00 00 00       	mov    edi,0xf
c0019c8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c93:	39 c7                	cmp    edi,eax
c0019c95:	89 cf                	mov    edi,ecx
c0019c97:	19 d7                	sbb    edi,edx
c0019c99:	73 58                	jae    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c9b:	83 c0 f0             	add    eax,0xfffffff0
c0019c9e:	bf ff 00 00 00       	mov    edi,0xff
c0019ca3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ca7:	83 d2 ff             	adc    edx,0xffffffff
c0019caa:	39 c7                	cmp    edi,eax
c0019cac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cb0:	19 d1                	sbb    ecx,edx
c0019cb2:	72 53                	jb     c0019d07 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019cb4:	40                   	inc    eax
c0019cb5:	52                   	push   edx
c0019cb6:	50                   	push   eax
c0019cb7:	6a 00                	push   0x0
c0019cb9:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019cbd:	e8 2e 68 fe ff       	call   c00004f0 <memset>
c0019cc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cc4:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cc7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019ccb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ccf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019cd3:	53                   	push   ebx
c0019cd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cd7:	83 c4 20             	add    esp,0x20
c0019cda:	85 c0                	test   eax,eax
c0019cdc:	75 15                	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce2:	89 c7                	mov    edi,eax
c0019ce4:	c1 ff 1f             	sar    edi,0x1f
c0019ce7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019ceb:	75 06                	jne    c0019cf3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ced:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019cf1:	74 19                	je     c0019d0c <KeDereferenceSymlink(char const*, char*)+0x186>
c0019cf3:	83 ec 0c             	sub    esp,0xc
c0019cf6:	53                   	push   ebx
c0019cf7:	e8 aa 07 00 00       	call   c001a4a6 <File::close()>
c0019cfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d04:	83 c4 10             	add    esp,0x10
c0019d07:	83 c8 ff             	or     eax,0xffffffff
c0019d0a:	eb 19                	jmp    c0019d25 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	53                   	push   ebx
c0019d10:	e8 91 07 00 00       	call   c001a4a6 <File::close()>
c0019d15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d1d:	83 c4 10             	add    esp,0x10
c0019d20:	b8 01 00 00 00       	mov    eax,0x1
c0019d25:	83 c4 3c             	add    esp,0x3c
c0019d28:	5b                   	pop    ebx
c0019d29:	5e                   	pop    esi
c0019d2a:	5f                   	pop    edi
c0019d2b:	5d                   	pop    ebp
c0019d2c:	c3                   	ret    

c0019d2d <KeCreateSymlink(char const*, char const*)>:
c0019d2d:	55                   	push   ebp
c0019d2e:	57                   	push   edi
c0019d2f:	56                   	push   esi
c0019d30:	53                   	push   ebx
c0019d31:	83 ec 38             	sub    esp,0x38
c0019d34:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019d38:	68 14 01 00 00       	push   0x114
c0019d3d:	e8 99 c6 ff ff       	call   c00163db <malloc>
c0019d42:	6a 00                	push   0x0
c0019d44:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d4e:	89 c3                	mov    ebx,eax
c0019d50:	50                   	push   eax
c0019d51:	e8 f6 05 00 00       	call   c001a34c <File::File(char const*, Process*, bool)>
c0019d56:	83 c4 20             	add    esp,0x20
c0019d59:	85 db                	test   ebx,ebx
c0019d5b:	b8 01 00 00 00       	mov    eax,0x1
c0019d60:	0f 84 19 01 00 00    	je     c0019e7f <KeCreateSymlink(char const*, char const*)+0x152>
c0019d66:	52                   	push   edx
c0019d67:	52                   	push   edx
c0019d68:	6a 12                	push   0x12
c0019d6a:	53                   	push   ebx
c0019d6b:	e8 d8 06 00 00       	call   c001a448 <File::open(FileOpenMode)>
c0019d70:	83 c4 10             	add    esp,0x10
c0019d73:	85 c0                	test   eax,eax
c0019d75:	74 0b                	je     c0019d82 <KeCreateSymlink(char const*, char const*)+0x55>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d7c:	53                   	push   ebx
c0019d7d:	e9 f2 00 00 00       	jmp    c0019e74 <KeCreateSymlink(char const*, char const*)+0x147>
c0019d82:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019d86:	be 31 1c 03 c0       	mov    esi,0xc0031c31
c0019d8b:	b9 09 00 00 00       	mov    ecx,0x9
c0019d90:	fc                   	cld    
c0019d91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d93:	83 ec 0c             	sub    esp,0xc
c0019d96:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d9c:	56                   	push   esi
c0019d9d:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019da1:	52                   	push   edx
c0019da2:	6a 00                	push   0x0
c0019da4:	6a 08                	push   0x8
c0019da6:	53                   	push   ebx
c0019da7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019daa:	83 c4 20             	add    esp,0x20
c0019dad:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019db2:	0f 85 ae 00 00 00    	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019db8:	85 c0                	test   eax,eax
c0019dba:	0f 85 a6 00 00 00    	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019dc0:	e8 cc f9 ff ff       	call   c0019791 <KiCreateSymlinkID()>
c0019dc5:	83 ec 0c             	sub    esp,0xc
c0019dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dcc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019dd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dd2:	56                   	push   esi
c0019dd3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019dd7:	52                   	push   edx
c0019dd8:	6a 00                	push   0x0
c0019dda:	6a 08                	push   0x8
c0019ddc:	53                   	push   ebx
c0019ddd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019de0:	83 c4 20             	add    esp,0x20
c0019de3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019de8:	75 7c                	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019dea:	85 c0                	test   eax,eax
c0019dec:	75 78                	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019df0:	83 ec 0c             	sub    esp,0xc
c0019df3:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019df6:	55                   	push   ebp
c0019df7:	e8 84 67 fe ff       	call   c0000580 <strlen>
c0019dfc:	31 d2                	xor    edx,edx
c0019dfe:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e01:	55                   	push   ebp
c0019e02:	52                   	push   edx
c0019e03:	50                   	push   eax
c0019e04:	53                   	push   ebx
c0019e05:	ff d7                	call   edi
c0019e07:	83 c4 14             	add    esp,0x14
c0019e0a:	55                   	push   ebp
c0019e0b:	89 c6                	mov    esi,eax
c0019e0d:	e8 6e 67 fe ff       	call   c0000580 <strlen>
c0019e12:	83 c4 10             	add    esp,0x10
c0019e15:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e19:	75 4b                	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e1b:	85 f6                	test   esi,esi
c0019e1d:	75 47                	jne    c0019e66 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e1f:	50                   	push   eax
c0019e20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e24:	55                   	push   ebp
c0019e25:	68 ff 1b 03 c0       	push   0xc0031bff
c0019e2a:	e8 e3 f3 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019e2f:	83 c4 0c             	add    esp,0xc
c0019e32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e3a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019e3e:	e8 b9 f9 ff ff       	call   c00197fc <KeRegisterSymlink(char const*, unsigned long long)>
c0019e43:	c7 04 24 24 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c24
c0019e4a:	e8 c3 f3 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0019e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e52:	e8 4f 06 00 00       	call   c001a4a6 <File::close()>
c0019e57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e5f:	83 c4 10             	add    esp,0x10
c0019e62:	31 c0                	xor    eax,eax
c0019e64:	eb 19                	jmp    c0019e7f <KeCreateSymlink(char const*, char const*)+0x152>
c0019e66:	83 ec 0c             	sub    esp,0xc
c0019e69:	53                   	push   ebx
c0019e6a:	e8 37 06 00 00       	call   c001a4a6 <File::close()>
c0019e6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	b8 01 00 00 00       	mov    eax,0x1
c0019e7f:	83 c4 2c             	add    esp,0x2c
c0019e82:	5b                   	pop    ebx
c0019e83:	5e                   	pop    esi
c0019e84:	5f                   	pop    edi
c0019e85:	5d                   	pop    ebp
c0019e86:	c3                   	ret    
c0019e87:	90                   	nop

c0019e88 <File::read(unsigned long long, void*, int*)>:
c0019e88:	53                   	push   ebx
c0019e89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e8d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e91:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e98:	83 f8 19             	cmp    eax,0x19
c0019e9b:	77 35                	ja     c0019ed2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e9d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019ea4:	85 c0                	test   eax,eax
c0019ea6:	74 2a                	je     c0019ed2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019ea8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019eae:	85 c0                	test   eax,eax
c0019eb0:	74 20                	je     c0019ed2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019eb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019eb6:	74 21                	je     c0019ed9 <File::read(unsigned long long, void*, int*)+0x51>
c0019eb8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019eba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019ebe:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ecc:	5b                   	pop    ebx
c0019ecd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019ed0:	ff e0                	jmp    eax
c0019ed2:	b8 0b 00 00 00       	mov    eax,0xb
c0019ed7:	eb 05                	jmp    c0019ede <File::read(unsigned long long, void*, int*)+0x56>
c0019ed9:	b8 05 00 00 00       	mov    eax,0x5
c0019ede:	5b                   	pop    ebx
c0019edf:	c3                   	ret    

c0019ee0 <File::write(unsigned long long, void*, int*)>:
c0019ee0:	53                   	push   ebx
c0019ee1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ee5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ee9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ef0:	83 f8 19             	cmp    eax,0x19
c0019ef3:	77 35                	ja     c0019f2a <File::write(unsigned long long, void*, int*)+0x4a>
c0019ef5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019efc:	85 c0                	test   eax,eax
c0019efe:	74 2a                	je     c0019f2a <File::write(unsigned long long, void*, int*)+0x4a>
c0019f00:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f06:	85 c0                	test   eax,eax
c0019f08:	74 20                	je     c0019f2a <File::write(unsigned long long, void*, int*)+0x4a>
c0019f0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f0e:	74 21                	je     c0019f31 <File::write(unsigned long long, void*, int*)+0x51>
c0019f10:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f16:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f24:	5b                   	pop    ebx
c0019f25:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019f28:	ff e0                	jmp    eax
c0019f2a:	b8 0b 00 00 00       	mov    eax,0xb
c0019f2f:	eb 05                	jmp    c0019f36 <File::write(unsigned long long, void*, int*)+0x56>
c0019f31:	b8 05 00 00 00       	mov    eax,0x5
c0019f36:	5b                   	pop    ebx
c0019f37:	c3                   	ret    

c0019f38 <Directory::read(unsigned long long, void*, int*)>:
c0019f38:	53                   	push   ebx
c0019f39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f41:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f48:	83 f8 19             	cmp    eax,0x19
c0019f4b:	77 35                	ja     c0019f82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f4d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f54:	85 c0                	test   eax,eax
c0019f56:	74 2a                	je     c0019f82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f58:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f5e:	85 c0                	test   eax,eax
c0019f60:	74 20                	je     c0019f82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f66:	74 21                	je     c0019f89 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019f68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f6a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f6e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f7c:	5b                   	pop    ebx
c0019f7d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019f80:	ff e0                	jmp    eax
c0019f82:	b8 0b 00 00 00       	mov    eax,0xb
c0019f87:	eb 05                	jmp    c0019f8e <Directory::read(unsigned long long, void*, int*)+0x56>
c0019f89:	b8 05 00 00 00       	mov    eax,0x5
c0019f8e:	5b                   	pop    ebx
c0019f8f:	c3                   	ret    

c0019f90 <Directory::write(unsigned long long, void*, int*)>:
c0019f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f94:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019f9b:	b8 0b 00 00 00       	mov    eax,0xb
c0019fa0:	83 fa 19             	cmp    edx,0x19
c0019fa3:	77 18                	ja     c0019fbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fa5:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019fac:	85 d2                	test   edx,edx
c0019fae:	74 0d                	je     c0019fbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fb0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019fb7:	19 c0                	sbb    eax,eax
c0019fb9:	83 e0 0a             	and    eax,0xa
c0019fbc:	40                   	inc    eax
c0019fbd:	c3                   	ret    

c0019fbe <File::isAtty()>:
c0019fbe:	31 c0                	xor    eax,eax
c0019fc0:	c3                   	ret    
c0019fc1:	90                   	nop

c0019fc2 <Directory::isAtty()>:
c0019fc2:	31 c0                	xor    eax,eax
c0019fc4:	c3                   	ret    
c0019fc5:	90                   	nop

c0019fc6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fc6:	b8 0a 00 00 00       	mov    eax,0xa
c0019fcb:	c3                   	ret    

c0019fcc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019fcc:	b8 0a 00 00 00       	mov    eax,0xa
c0019fd1:	c3                   	ret    

c0019fd2 <Filesystem::allocateSwapfile(char const*, int)>:
c0019fd2:	31 c0                	xor    eax,eax
c0019fd4:	31 d2                	xor    edx,edx
c0019fd6:	c3                   	ret    
c0019fd7:	90                   	nop

c0019fd8 <File::~File()>:
c0019fd8:	83 ec 0c             	sub    esp,0xc
c0019fdb:	ba f0 1c 03 c0       	mov    edx,0xc0031cf0
c0019fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe4:	89 10                	mov    DWORD PTR [eax],edx
c0019fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fea:	83 ec 0c             	sub    esp,0xc
c0019fed:	50                   	push   eax
c0019fee:	e8 a1 dc ff ff       	call   c0017c94 <UnixFile::~UnixFile()>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	90                   	nop
c0019ff7:	83 c4 0c             	add    esp,0xc
c0019ffa:	c3                   	ret    
c0019ffb:	90                   	nop

c0019ffc <File::~File()>:
c0019ffc:	83 ec 0c             	sub    esp,0xc
c0019fff:	83 ec 0c             	sub    esp,0xc
c001a002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a006:	e8 cd ff ff ff       	call   c0019fd8 <File::~File()>
c001a00b:	83 c4 10             	add    esp,0x10
c001a00e:	83 ec 08             	sub    esp,0x8
c001a011:	68 14 01 00 00       	push   0x114
c001a016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a01a:	e8 f5 f0 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	83 c4 0c             	add    esp,0xc
c001a025:	c3                   	ret    

c001a026 <Directory::~Directory()>:
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	ba 0c 1d 03 c0       	mov    edx,0xc0031d0c
c001a02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a032:	89 10                	mov    DWORD PTR [eax],edx
c001a034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	50                   	push   eax
c001a03c:	e8 53 dc ff ff       	call   c0017c94 <UnixFile::~UnixFile()>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	90                   	nop
c001a045:	83 c4 0c             	add    esp,0xc
c001a048:	c3                   	ret    
c001a049:	90                   	nop

c001a04a <Directory::~Directory()>:
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	83 ec 0c             	sub    esp,0xc
c001a050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a054:	e8 cd ff ff ff       	call   c001a026 <Directory::~Directory()>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	83 ec 08             	sub    esp,0x8
c001a05f:	68 14 01 00 00       	push   0x114
c001a064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a068:	e8 a7 f0 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001a06d:	83 c4 10             	add    esp,0x10
c001a070:	83 c4 0c             	add    esp,0xc
c001a073:	c3                   	ret    

c001a074 <Filesystem::Filesystem()>:
c001a074:	ba 84 1c 03 c0       	mov    edx,0xc0031c84
c001a079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a07d:	89 10                	mov    DWORD PTR [eax],edx
c001a07f:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a085:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a089:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a090:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a095:	90                   	nop
c001a096:	c3                   	ret    
c001a097:	90                   	nop

c001a098 <Filesystem::~Filesystem()>:
c001a098:	ba 84 1c 03 c0       	mov    edx,0xc0031c84
c001a09d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a1:	89 10                	mov    DWORD PTR [eax],edx
c001a0a3:	90                   	nop
c001a0a4:	c3                   	ret    
c001a0a5:	90                   	nop

c001a0a6 <Filesystem::~Filesystem()>:
c001a0a6:	83 ec 0c             	sub    esp,0xc
c001a0a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0ad:	e8 e6 ff ff ff       	call   c001a098 <Filesystem::~Filesystem()>
c001a0b2:	83 c4 04             	add    esp,0x4
c001a0b5:	83 ec 08             	sub    esp,0x8
c001a0b8:	6a 08                	push   0x8
c001a0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0be:	e8 51 f0 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	83 c4 0c             	add    esp,0xc
c001a0c9:	c3                   	ret    

c001a0ca <Fs::getcwd(Process*, char*, int)>:
c001a0ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ce:	31 c0                	xor    eax,eax
c001a0d0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a0d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a0d7:	7d 15                	jge    c001a0ee <Fs::getcwd(Process*, char*, int)+0x24>
c001a0d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a0dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a0e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a0e7:	84 c9                	test   cl,cl
c001a0e9:	74 06                	je     c001a0f1 <Fs::getcwd(Process*, char*, int)+0x27>
c001a0eb:	40                   	inc    eax
c001a0ec:	eb e2                	jmp    c001a0d0 <Fs::getcwd(Process*, char*, int)+0x6>
c001a0ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a0f1:	31 c0                	xor    eax,eax
c001a0f3:	c3                   	ret    

c001a0f4 <Fs::initVFS()>:
c001a0f4:	83 ec 18             	sub    esp,0x18
c001a0f7:	6a 08                	push   0x8
c001a0f9:	e8 dd c2 ff ff       	call   c00163db <malloc>
c001a0fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001a101:	e8 6a e9 00 00       	call   c0028a70 <FAT::FAT()>
c001a106:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a10d:	e8 c9 c2 ff ff       	call   c00163db <malloc>
c001a112:	89 04 24             	mov    DWORD PTR [esp],eax
c001a115:	e8 84 f8 00 00       	call   c002999e <ISO9660::ISO9660()>
c001a11a:	83 c4 1c             	add    esp,0x1c
c001a11d:	c3                   	ret    

c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a11e:	55                   	push   ebp
c001a11f:	57                   	push   edi
c001a120:	56                   	push   esi
c001a121:	53                   	push   ebx
c001a122:	81 ec 20 04 00 00    	sub    esp,0x420
c001a128:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a12f:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a136:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a13d:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a144:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a148:	68 00 04 00 00       	push   0x400
c001a14d:	6a 00                	push   0x0
c001a14f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a153:	57                   	push   edi
c001a154:	e8 97 63 fe ff       	call   c00004f0 <memset>
c001a159:	83 c4 10             	add    esp,0x10
c001a15c:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a160:	75 0b                	jne    c001a16d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a162:	50                   	push   eax
c001a163:	50                   	push   eax
c001a164:	56                   	push   esi
c001a165:	57                   	push   edi
c001a166:	e8 e5 64 fe ff       	call   c0000650 <strcpy>
c001a16b:	eb 45                	jmp    c001a1b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a16d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a170:	83 f8 2f             	cmp    eax,0x2f
c001a173:	74 05                	je     c001a17a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a175:	83 f8 5c             	cmp    eax,0x5c
c001a178:	75 19                	jne    c001a193 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a17a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a17d:	3c 60                	cmp    al,0x60
c001a17f:	7e 03                	jle    c001a184 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a181:	83 e8 20             	sub    eax,0x20
c001a184:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a188:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a18f:	50                   	push   eax
c001a190:	50                   	push   eax
c001a191:	eb 18                	jmp    c001a1ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a193:	50                   	push   eax
c001a194:	50                   	push   eax
c001a195:	55                   	push   ebp
c001a196:	57                   	push   edi
c001a197:	e8 b4 64 fe ff       	call   c0000650 <strcpy>
c001a19c:	58                   	pop    eax
c001a19d:	5a                   	pop    edx
c001a19e:	68 7f 2d 03 c0       	push   0xc0032d7f
c001a1a3:	57                   	push   edi
c001a1a4:	e8 c7 66 fe ff       	call   c0000870 <strcat>
c001a1a9:	59                   	pop    ecx
c001a1aa:	5d                   	pop    ebp
c001a1ab:	56                   	push   esi
c001a1ac:	57                   	push   edi
c001a1ad:	e8 be 66 fe ff       	call   c0000870 <strcat>
c001a1b2:	83 c4 10             	add    esp,0x10
c001a1b5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a1b9:	3c 60                	cmp    al,0x60
c001a1bb:	7e 03                	jle    c001a1c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a1bd:	83 e8 20             	sub    eax,0x20
c001a1c0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a1c4:	be 03 00 00 00       	mov    esi,0x3
c001a1c9:	88 03                	mov    BYTE PTR [ebx],al
c001a1cb:	b8 03 00 00 00       	mov    eax,0x3
c001a1d0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a1d7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a1dd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a1e1:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a1e6:	89 fa                	mov    edx,edi
c001a1e8:	0f be ea             	movsx  ebp,dl
c001a1eb:	85 ed                	test   ebp,ebp
c001a1ed:	0f 84 a1 00 00 00    	je     c001a294 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a1f3:	8d 56 01             	lea    edx,[esi+0x1]
c001a1f6:	83 fd 2f             	cmp    ebp,0x2f
c001a1f9:	74 05                	je     c001a200 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a1fb:	83 fd 5c             	cmp    ebp,0x5c
c001a1fe:	75 12                	jne    c001a212 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a200:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a205:	89 c5                	mov    ebp,eax
c001a207:	74 09                	je     c001a212 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a209:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a20d:	40                   	inc    eax
c001a20e:	89 d6                	mov    esi,edx
c001a210:	eb cf                	jmp    c001a1e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a212:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a217:	89 f9                	mov    ecx,edi
c001a219:	0f be e9             	movsx  ebp,cl
c001a21c:	75 61                	jne    c001a27f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a21e:	83 fd 2e             	cmp    ebp,0x2e
c001a221:	75 5c                	jne    c001a27f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a223:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a228:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a22d:	74 19                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a22f:	83 fd 2e             	cmp    ebp,0x2e
c001a232:	74 55                	je     c001a289 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a234:	89 f2                	mov    edx,esi
c001a236:	42                   	inc    edx
c001a237:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a23c:	83 f9 2f             	cmp    ecx,0x2f
c001a23f:	74 f5                	je     c001a236 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a241:	83 f9 5c             	cmp    ecx,0x5c
c001a244:	74 f0                	je     c001a236 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a246:	eb c6                	jmp    c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a248:	83 fd 2e             	cmp    ebp,0x2e
c001a24b:	74 3c                	je     c001a289 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a24d:	83 f8 03             	cmp    eax,0x3
c001a250:	74 bc                	je     c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a252:	42                   	inc    edx
c001a253:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a258:	83 f9 2f             	cmp    ecx,0x2f
c001a25b:	74 f5                	je     c001a252 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a25d:	83 f9 5c             	cmp    ecx,0x5c
c001a260:	74 f0                	je     c001a252 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a262:	48                   	dec    eax
c001a263:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a267:	75 06                	jne    c001a26f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a269:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a26d:	eb f3                	jmp    c001a262 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a26f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a273:	74 07                	je     c001a27c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a275:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a279:	48                   	dec    eax
c001a27a:	eb f3                	jmp    c001a26f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a27c:	40                   	inc    eax
c001a27d:	eb 8f                	jmp    c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a27f:	83 fd 2f             	cmp    ebp,0x2f
c001a282:	74 8a                	je     c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a284:	83 fd 5c             	cmp    ebp,0x5c
c001a287:	74 85                	je     c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a289:	89 f9                	mov    ecx,edi
c001a28b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a28e:	40                   	inc    eax
c001a28f:	e9 7a ff ff ff       	jmp    c001a20e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a294:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a298:	83 ec 0c             	sub    esp,0xc
c001a29b:	53                   	push   ebx
c001a29c:	e8 df 62 fe ff       	call   c0000580 <strlen>
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a2a9:	74 1c                	je     c001a2c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a2ab:	83 ec 0c             	sub    esp,0xc
c001a2ae:	53                   	push   ebx
c001a2af:	e8 cc 62 fe ff       	call   c0000580 <strlen>
c001a2b4:	83 c4 10             	add    esp,0x10
c001a2b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a2bc:	74 09                	je     c001a2c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a2be:	31 ff                	xor    edi,edi
c001a2c0:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a2c5:	eb 5c                	jmp    c001a323 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a2c7:	83 ec 0c             	sub    esp,0xc
c001a2ca:	53                   	push   ebx
c001a2cb:	e8 b0 62 fe ff       	call   c0000580 <strlen>
c001a2d0:	83 c4 10             	add    esp,0x10
c001a2d3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a2d8:	74 e4                	je     c001a2be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a2da:	83 ec 0c             	sub    esp,0xc
c001a2dd:	53                   	push   ebx
c001a2de:	e8 9d 62 fe ff       	call   c0000580 <strlen>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a2eb:	eb ab                	jmp    c001a298 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a2ed:	52                   	push   edx
c001a2ee:	52                   	push   edx
c001a2ef:	53                   	push   ebx
c001a2f0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a2f4:	55                   	push   ebp
c001a2f5:	e8 56 63 fe ff       	call   c0000650 <strcpy>
c001a2fa:	59                   	pop    ecx
c001a2fb:	58                   	pop    eax
c001a2fc:	53                   	push   ebx
c001a2fd:	55                   	push   ebp
c001a2fe:	e8 83 f8 ff ff       	call   c0019b86 <KeDereferenceSymlink(char const*, char*)>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	48                   	dec    eax
c001a307:	75 37                	jne    c001a340 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a309:	50                   	push   eax
c001a30a:	53                   	push   ebx
c001a30b:	55                   	push   ebp
c001a30c:	68 3a 1c 03 c0       	push   0xc0031c3a
c001a311:	e8 fc ee ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001a316:	8d 47 01             	lea    eax,[edi+0x1]
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	83 ff 14             	cmp    edi,0x14
c001a31f:	74 08                	je     c001a329 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a321:	89 c7                	mov    edi,eax
c001a323:	85 f6                	test   esi,esi
c001a325:	75 c6                	jne    c001a2ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a327:	eb 17                	jmp    c001a340 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a329:	83 ec 0c             	sub    esp,0xc
c001a32c:	bf 15 00 00 00       	mov    edi,0x15
c001a331:	68 55 1c 03 c0       	push   0xc0031c55
c001a336:	e8 5f 5e 00 00       	call   c002019a <KePanic(char const*)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	eb e3                	jmp    c001a323 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a340:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a346:	5b                   	pop    ebx
c001a347:	5e                   	pop    esi
c001a348:	5f                   	pop    edi
c001a349:	5d                   	pop    ebp
c001a34a:	c3                   	ret    
c001a34b:	90                   	nop

c001a34c <File::File(char const*, Process*, bool)>:
c001a34c:	83 ec 1c             	sub    esp,0x1c
c001a34f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a353:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a35b:	83 ec 08             	sub    esp,0x8
c001a35e:	6a 00                	push   0x0
c001a360:	50                   	push   eax
c001a361:	e8 48 d7 ff ff       	call   c0017aae <UnixFile::UnixFile(int)>
c001a366:	83 c4 10             	add    esp,0x10
c001a369:	ba f0 1c 03 c0       	mov    edx,0xc0031cf0
c001a36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a372:	89 10                	mov    DWORD PTR [eax],edx
c001a374:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a379:	85 c0                	test   eax,eax
c001a37b:	74 0f                	je     c001a38c <File::File(char const*, Process*, bool)+0x40>
c001a37d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a382:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a386:	74 04                	je     c001a38c <File::File(char const*, Process*, bool)+0x40>
c001a388:	b0 01                	mov    al,0x1
c001a38a:	eb 02                	jmp    c001a38e <File::File(char const*, Process*, bool)+0x42>
c001a38c:	b0 00                	mov    al,0x0
c001a38e:	0f b6 c0             	movzx  eax,al
c001a391:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a395:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a39b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a39f:	83 c2 0d             	add    edx,0xd
c001a3a2:	50                   	push   eax
c001a3a3:	51                   	push   ecx
c001a3a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a8:	52                   	push   edx
c001a3a9:	e8 70 fd ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3b5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a3b8:	83 e8 41             	sub    eax,0x41
c001a3bb:	88 c2                	mov    dl,al
c001a3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3c1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a3c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3cb:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3d9:	0f b6 c0             	movzx  eax,al
c001a3dc:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a3e3:	85 c0                	test   eax,eax
c001a3e5:	74 3e                	je     c001a425 <File::File(char const*, Process*, bool)+0xd9>
c001a3e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3f1:	0f b6 c0             	movzx  eax,al
c001a3f4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a3fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a401:	85 c0                	test   eax,eax
c001a403:	75 20                	jne    c001a425 <File::File(char const*, Process*, bool)+0xd9>
c001a405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a409:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a40f:	0f b6 c0             	movzx  eax,al
c001a412:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a419:	83 ec 0c             	sub    esp,0xc
c001a41c:	50                   	push   eax
c001a41d:	e8 ba 21 00 00       	call   c001c5dc <LogicalDisk::mount()>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	90                   	nop
c001a426:	83 c4 1c             	add    esp,0x1c
c001a429:	c3                   	ret    

c001a42a <File::File(char const*, Process*)>:
c001a42a:	83 ec 0c             	sub    esp,0xc
c001a42d:	6a 01                	push   0x1
c001a42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a43b:	e8 0c ff ff ff       	call   c001a34c <File::File(char const*, Process*, bool)>
c001a440:	83 c4 10             	add    esp,0x10
c001a443:	90                   	nop
c001a444:	83 c4 0c             	add    esp,0xc
c001a447:	c3                   	ret    

c001a448 <File::open(FileOpenMode)>:
c001a448:	53                   	push   ebx
c001a449:	b8 0b 00 00 00       	mov    eax,0xb
c001a44e:	83 ec 08             	sub    esp,0x8
c001a451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a455:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a45c:	83 fa 19             	cmp    edx,0x19
c001a45f:	77 40                	ja     c001a4a1 <File::open(FileOpenMode)+0x59>
c001a461:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a468:	85 d2                	test   edx,edx
c001a46a:	74 35                	je     c001a4a1 <File::open(FileOpenMode)+0x59>
c001a46c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a472:	85 d2                	test   edx,edx
c001a474:	74 2b                	je     c001a4a1 <File::open(FileOpenMode)+0x59>
c001a476:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a47a:	b8 06 00 00 00       	mov    eax,0x6
c001a47f:	75 20                	jne    c001a4a1 <File::open(FileOpenMode)+0x59>
c001a481:	8b 02                	mov    eax,DWORD PTR [edx]
c001a483:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a489:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a48d:	51                   	push   ecx
c001a48e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a491:	51                   	push   ecx
c001a492:	52                   	push   edx
c001a493:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	85 c0                	test   eax,eax
c001a49b:	75 04                	jne    c001a4a1 <File::open(FileOpenMode)+0x59>
c001a49d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a4a1:	83 c4 08             	add    esp,0x8
c001a4a4:	5b                   	pop    ebx
c001a4a5:	c3                   	ret    

c001a4a6 <File::close()>:
c001a4a6:	53                   	push   ebx
c001a4a7:	b8 0b 00 00 00       	mov    eax,0xb
c001a4ac:	83 ec 08             	sub    esp,0x8
c001a4af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a4ba:	83 f9 19             	cmp    ecx,0x19
c001a4bd:	77 41                	ja     c001a500 <File::close()+0x5a>
c001a4bf:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4c6:	85 db                	test   ebx,ebx
c001a4c8:	74 36                	je     c001a500 <File::close()+0x5a>
c001a4ca:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a4d1:	74 2d                	je     c001a500 <File::close()+0x5a>
c001a4d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a4d7:	b8 05 00 00 00       	mov    eax,0x5
c001a4dc:	74 22                	je     c001a500 <File::close()+0x5a>
c001a4de:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a4e2:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4e9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a4ef:	53                   	push   ebx
c001a4f0:	53                   	push   ebx
c001a4f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a4f3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a4f9:	50                   	push   eax
c001a4fa:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	83 c4 08             	add    esp,0x8
c001a503:	5b                   	pop    ebx
c001a504:	c3                   	ret    
c001a505:	90                   	nop

c001a506 <File::seek(unsigned long long)>:
c001a506:	56                   	push   esi
c001a507:	b8 0b 00 00 00       	mov    eax,0xb
c001a50c:	53                   	push   ebx
c001a50d:	51                   	push   ecx
c001a50e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a512:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a516:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a51a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a521:	83 fa 19             	cmp    edx,0x19
c001a524:	77 31                	ja     c001a557 <File::seek(unsigned long long)+0x51>
c001a526:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a52d:	85 d2                	test   edx,edx
c001a52f:	74 26                	je     c001a557 <File::seek(unsigned long long)+0x51>
c001a531:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a537:	85 d2                	test   edx,edx
c001a539:	74 1c                	je     c001a557 <File::seek(unsigned long long)+0x51>
c001a53b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a53f:	b8 05 00 00 00       	mov    eax,0x5
c001a544:	74 11                	je     c001a557 <File::seek(unsigned long long)+0x51>
c001a546:	8b 02                	mov    eax,DWORD PTR [edx]
c001a548:	53                   	push   ebx
c001a549:	51                   	push   ecx
c001a54a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a550:	52                   	push   edx
c001a551:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a554:	83 c4 10             	add    esp,0x10
c001a557:	5a                   	pop    edx
c001a558:	5b                   	pop    ebx
c001a559:	5e                   	pop    esi
c001a55a:	c3                   	ret    
c001a55b:	90                   	nop

c001a55c <File::truncate(unsigned long long)>:
c001a55c:	56                   	push   esi
c001a55d:	b8 0b 00 00 00       	mov    eax,0xb
c001a562:	53                   	push   ebx
c001a563:	51                   	push   ecx
c001a564:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a568:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a56c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a570:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a577:	83 fa 19             	cmp    edx,0x19
c001a57a:	77 31                	ja     c001a5ad <File::truncate(unsigned long long)+0x51>
c001a57c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a583:	85 d2                	test   edx,edx
c001a585:	74 26                	je     c001a5ad <File::truncate(unsigned long long)+0x51>
c001a587:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a58d:	85 d2                	test   edx,edx
c001a58f:	74 1c                	je     c001a5ad <File::truncate(unsigned long long)+0x51>
c001a591:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a595:	b8 05 00 00 00       	mov    eax,0x5
c001a59a:	74 11                	je     c001a5ad <File::truncate(unsigned long long)+0x51>
c001a59c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a59e:	53                   	push   ebx
c001a59f:	51                   	push   ecx
c001a5a0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a5a6:	52                   	push   edx
c001a5a7:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	5a                   	pop    edx
c001a5ae:	5b                   	pop    ebx
c001a5af:	5e                   	pop    esi
c001a5b0:	c3                   	ret    
c001a5b1:	90                   	nop

c001a5b2 <File::tell(unsigned long long*)>:
c001a5b2:	83 ec 0c             	sub    esp,0xc
c001a5b5:	b8 0b 00 00 00       	mov    eax,0xb
c001a5ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5be:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a5c5:	83 fa 19             	cmp    edx,0x19
c001a5c8:	77 34                	ja     c001a5fe <File::tell(unsigned long long*)+0x4c>
c001a5ca:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5d1:	85 d2                	test   edx,edx
c001a5d3:	74 29                	je     c001a5fe <File::tell(unsigned long long*)+0x4c>
c001a5d5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5db:	85 d2                	test   edx,edx
c001a5dd:	74 1f                	je     c001a5fe <File::tell(unsigned long long*)+0x4c>
c001a5df:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a5e3:	b8 05 00 00 00       	mov    eax,0x5
c001a5e8:	74 14                	je     c001a5fe <File::tell(unsigned long long*)+0x4c>
c001a5ea:	50                   	push   eax
c001a5eb:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a5f7:	52                   	push   edx
c001a5f8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	83 c4 0c             	add    esp,0xc
c001a601:	c3                   	ret    

c001a602 <File::rewind()>:
c001a602:	83 ec 10             	sub    esp,0x10
c001a605:	6a 00                	push   0x0
c001a607:	6a 00                	push   0x0
c001a609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a60d:	e8 f4 fe ff ff       	call   c001a506 <File::seek(unsigned long long)>
c001a612:	83 c4 1c             	add    esp,0x1c
c001a615:	c3                   	ret    

c001a616 <File::unlink()>:
c001a616:	83 ec 0c             	sub    esp,0xc
c001a619:	b8 0b 00 00 00       	mov    eax,0xb
c001a61e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a629:	83 f9 19             	cmp    ecx,0x19
c001a62c:	77 2f                	ja     c001a65d <File::unlink()+0x47>
c001a62e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a635:	85 c9                	test   ecx,ecx
c001a637:	74 24                	je     c001a65d <File::unlink()+0x47>
c001a639:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a63f:	85 c9                	test   ecx,ecx
c001a641:	74 1a                	je     c001a65d <File::unlink()+0x47>
c001a643:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a647:	b8 06 00 00 00       	mov    eax,0x6
c001a64c:	75 0f                	jne    c001a65d <File::unlink()+0x47>
c001a64e:	50                   	push   eax
c001a64f:	83 c2 0d             	add    edx,0xd
c001a652:	50                   	push   eax
c001a653:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a655:	52                   	push   edx
c001a656:	51                   	push   ecx
c001a657:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	83 c4 0c             	add    esp,0xc
c001a660:	c3                   	ret    
c001a661:	90                   	nop

c001a662 <File::rename(char const*)>:
c001a662:	83 ec 0c             	sub    esp,0xc
c001a665:	b8 0b 00 00 00       	mov    eax,0xb
c001a66a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a66e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a675:	83 f9 19             	cmp    ecx,0x19
c001a678:	77 32                	ja     c001a6ac <File::rename(char const*)+0x4a>
c001a67a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a681:	85 c9                	test   ecx,ecx
c001a683:	74 27                	je     c001a6ac <File::rename(char const*)+0x4a>
c001a685:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a68b:	85 c9                	test   ecx,ecx
c001a68d:	74 1d                	je     c001a6ac <File::rename(char const*)+0x4a>
c001a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a693:	b8 06 00 00 00       	mov    eax,0x6
c001a698:	75 12                	jne    c001a6ac <File::rename(char const*)+0x4a>
c001a69a:	50                   	push   eax
c001a69b:	83 c2 0d             	add    edx,0xd
c001a69e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a4:	52                   	push   edx
c001a6a5:	51                   	push   ecx
c001a6a6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	83 c4 0c             	add    esp,0xc
c001a6af:	c3                   	ret    

c001a6b0 <File::chfatattr(unsigned char, unsigned char)>:
c001a6b0:	57                   	push   edi
c001a6b1:	b8 0b 00 00 00       	mov    eax,0xb
c001a6b6:	56                   	push   esi
c001a6b7:	53                   	push   ebx
c001a6b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6c0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6cb:	83 f9 19             	cmp    ecx,0x19
c001a6ce:	77 37                	ja     c001a707 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6d0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6d7:	85 c9                	test   ecx,ecx
c001a6d9:	74 2c                	je     c001a707 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6e1:	85 c9                	test   ecx,ecx
c001a6e3:	74 22                	je     c001a707 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6e9:	b8 06 00 00 00       	mov    eax,0x6
c001a6ee:	75 17                	jne    c001a707 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6f0:	89 f0                	mov    eax,esi
c001a6f2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a6f4:	0f b6 db             	movzx  ebx,bl
c001a6f7:	0f b6 f0             	movzx  esi,al
c001a6fa:	83 c2 0d             	add    edx,0xd
c001a6fd:	56                   	push   esi
c001a6fe:	53                   	push   ebx
c001a6ff:	52                   	push   edx
c001a700:	51                   	push   ecx
c001a701:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	5b                   	pop    ebx
c001a708:	5e                   	pop    esi
c001a709:	5f                   	pop    edi
c001a70a:	c3                   	ret    
c001a70b:	90                   	nop

c001a70c <File::exists()>:
c001a70c:	83 ec 0c             	sub    esp,0xc
c001a70f:	31 c0                	xor    eax,eax
c001a711:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a715:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a71c:	83 f9 19             	cmp    ecx,0x19
c001a71f:	77 24                	ja     c001a745 <File::exists()+0x39>
c001a721:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a728:	85 c9                	test   ecx,ecx
c001a72a:	74 19                	je     c001a745 <File::exists()+0x39>
c001a72c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a732:	85 c9                	test   ecx,ecx
c001a734:	74 0f                	je     c001a745 <File::exists()+0x39>
c001a736:	50                   	push   eax
c001a737:	83 c2 0d             	add    edx,0xd
c001a73a:	50                   	push   eax
c001a73b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a73d:	52                   	push   edx
c001a73e:	51                   	push   ecx
c001a73f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a742:	83 c4 10             	add    esp,0x10
c001a745:	83 c4 0c             	add    esp,0xc
c001a748:	c3                   	ret    
c001a749:	90                   	nop

c001a74a <File::stat(unsigned long long*, bool*)>:
c001a74a:	56                   	push   esi
c001a74b:	53                   	push   ebx
c001a74c:	50                   	push   eax
c001a74d:	b8 0b 00 00 00       	mov    eax,0xb
c001a752:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a756:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a75a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a75e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a765:	83 f9 19             	cmp    ecx,0x19
c001a768:	77 3d                	ja     c001a7a7 <File::stat(unsigned long long*, bool*)+0x5d>
c001a76a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a771:	85 c9                	test   ecx,ecx
c001a773:	74 32                	je     c001a7a7 <File::stat(unsigned long long*, bool*)+0x5d>
c001a775:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a77b:	85 c9                	test   ecx,ecx
c001a77d:	74 28                	je     c001a7a7 <File::stat(unsigned long long*, bool*)+0x5d>
c001a77f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a783:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a785:	74 13                	je     c001a79a <File::stat(unsigned long long*, bool*)+0x50>
c001a787:	83 ec 04             	sub    esp,0x4
c001a78a:	56                   	push   esi
c001a78b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a791:	51                   	push   ecx
c001a792:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a795:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a798:	eb 0a                	jmp    c001a7a4 <File::stat(unsigned long long*, bool*)+0x5a>
c001a79a:	53                   	push   ebx
c001a79b:	83 c2 0d             	add    edx,0xd
c001a79e:	56                   	push   esi
c001a79f:	52                   	push   edx
c001a7a0:	51                   	push   ecx
c001a7a1:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a7a4:	83 c4 10             	add    esp,0x10
c001a7a7:	5a                   	pop    edx
c001a7a8:	5b                   	pop    ebx
c001a7a9:	5e                   	pop    esi
c001a7aa:	c3                   	ret    

c001a7ab <Fs::setcwd(Process*, char*)>:
c001a7ab:	55                   	push   ebp
c001a7ac:	57                   	push   edi
c001a7ad:	56                   	push   esi
c001a7ae:	53                   	push   ebx
c001a7af:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a7b5:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a7bc:	6a 00                	push   0x0
c001a7be:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a7c4:	57                   	push   edi
c001a7c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a7cc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a7d0:	56                   	push   esi
c001a7d1:	e8 48 f9 ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a7d6:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7d9:	e8 a2 5d fe ff       	call   c0000580 <strlen>
c001a7de:	83 c4 10             	add    esp,0x10
c001a7e1:	83 f8 02             	cmp    eax,0x2
c001a7e4:	77 15                	ja     c001a7fb <Fs::setcwd(Process*, char*)+0x50>
c001a7e6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a7eb:	83 eb 41             	sub    ebx,0x41
c001a7ee:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7f5:	85 c0                	test   eax,eax
c001a7f7:	75 1c                	jne    c001a815 <Fs::setcwd(Process*, char*)+0x6a>
c001a7f9:	eb 2f                	jmp    c001a82a <Fs::setcwd(Process*, char*)+0x7f>
c001a7fb:	83 ec 0c             	sub    esp,0xc
c001a7fe:	56                   	push   esi
c001a7ff:	e8 7c 5d fe ff       	call   c0000580 <strlen>
c001a804:	83 c4 10             	add    esp,0x10
c001a807:	83 f8 03             	cmp    eax,0x3
c001a80a:	75 57                	jne    c001a863 <Fs::setcwd(Process*, char*)+0xb8>
c001a80c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a811:	75 50                	jne    c001a863 <Fs::setcwd(Process*, char*)+0xb8>
c001a813:	eb d1                	jmp    c001a7e6 <Fs::setcwd(Process*, char*)+0x3b>
c001a815:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a81c:	75 0c                	jne    c001a82a <Fs::setcwd(Process*, char*)+0x7f>
c001a81e:	83 ec 0c             	sub    esp,0xc
c001a821:	50                   	push   eax
c001a822:	e8 b5 1d 00 00       	call   c001c5dc <LogicalDisk::mount()>
c001a827:	83 c4 10             	add    esp,0x10
c001a82a:	83 fb 19             	cmp    ebx,0x19
c001a82d:	b8 03 00 00 00       	mov    eax,0x3
c001a832:	0f 87 c6 00 00 00    	ja     c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a838:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a83f:	b8 05 00 00 00       	mov    eax,0x5
c001a844:	85 d2                	test   edx,edx
c001a846:	0f 84 b2 00 00 00    	je     c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a84c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a853:	b8 06 00 00 00       	mov    eax,0x6
c001a858:	0f 85 92 00 00 00    	jne    c001a8f0 <Fs::setcwd(Process*, char*)+0x145>
c001a85e:	e9 9b 00 00 00       	jmp    c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a863:	83 ec 0c             	sub    esp,0xc
c001a866:	68 14 01 00 00       	push   0x114
c001a86b:	e8 6b bb ff ff       	call   c00163db <malloc>
c001a870:	83 c4 0c             	add    esp,0xc
c001a873:	55                   	push   ebp
c001a874:	56                   	push   esi
c001a875:	50                   	push   eax
c001a876:	89 c3                	mov    ebx,eax
c001a878:	e8 ad fb ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001a87d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a882:	83 c4 0c             	add    esp,0xc
c001a885:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a889:	50                   	push   eax
c001a88a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a88e:	50                   	push   eax
c001a88f:	53                   	push   ebx
c001a890:	e8 b5 fe ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c001a895:	83 c4 10             	add    esp,0x10
c001a898:	83 f8 02             	cmp    eax,0x2
c001a89b:	74 27                	je     c001a8c4 <Fs::setcwd(Process*, char*)+0x119>
c001a89d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a8a2:	75 1c                	jne    c001a8c0 <Fs::setcwd(Process*, char*)+0x115>
c001a8a4:	85 db                	test   ebx,ebx
c001a8a6:	b8 02 00 00 00       	mov    eax,0x2
c001a8ab:	74 51                	je     c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a8ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8af:	83 ec 0c             	sub    esp,0xc
c001a8b2:	53                   	push   ebx
c001a8b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	b8 02 00 00 00       	mov    eax,0x2
c001a8be:	eb 3e                	jmp    c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a8c0:	85 c0                	test   eax,eax
c001a8c2:	74 1c                	je     c001a8e0 <Fs::setcwd(Process*, char*)+0x135>
c001a8c4:	85 db                	test   ebx,ebx
c001a8c6:	b8 01 00 00 00       	mov    eax,0x1
c001a8cb:	74 31                	je     c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a8cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8cf:	83 ec 0c             	sub    esp,0xc
c001a8d2:	53                   	push   ebx
c001a8d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8d6:	83 c4 10             	add    esp,0x10
c001a8d9:	b8 01 00 00 00       	mov    eax,0x1
c001a8de:	eb 1e                	jmp    c001a8fe <Fs::setcwd(Process*, char*)+0x153>
c001a8e0:	85 db                	test   ebx,ebx
c001a8e2:	74 0c                	je     c001a8f0 <Fs::setcwd(Process*, char*)+0x145>
c001a8e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8e6:	83 ec 0c             	sub    esp,0xc
c001a8e9:	53                   	push   ebx
c001a8ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8ed:	83 c4 10             	add    esp,0x10
c001a8f0:	50                   	push   eax
c001a8f1:	50                   	push   eax
c001a8f2:	56                   	push   esi
c001a8f3:	57                   	push   edi
c001a8f4:	e8 57 5d fe ff       	call   c0000650 <strcpy>
c001a8f9:	83 c4 10             	add    esp,0x10
c001a8fc:	31 c0                	xor    eax,eax
c001a8fe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a904:	5b                   	pop    ebx
c001a905:	5e                   	pop    esi
c001a906:	5f                   	pop    edi
c001a907:	5d                   	pop    ebp
c001a908:	c3                   	ret    
c001a909:	90                   	nop

c001a90a <Directory::Directory(char const*, Process*)>:
c001a90a:	83 ec 0c             	sub    esp,0xc
c001a90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a911:	83 ec 08             	sub    esp,0x8
c001a914:	6a 00                	push   0x0
c001a916:	50                   	push   eax
c001a917:	e8 92 d1 ff ff       	call   c0017aae <UnixFile::UnixFile(int)>
c001a91c:	83 c4 10             	add    esp,0x10
c001a91f:	ba 0c 1d 03 c0       	mov    edx,0xc0031d0c
c001a924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a928:	89 10                	mov    DWORD PTR [eax],edx
c001a92a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a92f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a933:	0f 95 c0             	setne  al
c001a936:	0f b6 c0             	movzx  eax,al
c001a939:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a93d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a943:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a947:	83 c2 0d             	add    edx,0xd
c001a94a:	50                   	push   eax
c001a94b:	51                   	push   ecx
c001a94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a950:	52                   	push   edx
c001a951:	e8 c8 f7 ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a960:	83 e8 41             	sub    eax,0x41
c001a963:	88 c2                	mov    dl,al
c001a965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a969:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a973:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a97b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a981:	0f b6 c0             	movzx  eax,al
c001a984:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a98b:	85 c0                	test   eax,eax
c001a98d:	74 3e                	je     c001a9cd <Directory::Directory(char const*, Process*)+0xc3>
c001a98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a993:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a999:	0f b6 c0             	movzx  eax,al
c001a99c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9a3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9a9:	85 c0                	test   eax,eax
c001a9ab:	75 20                	jne    c001a9cd <Directory::Directory(char const*, Process*)+0xc3>
c001a9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9b7:	0f b6 c0             	movzx  eax,al
c001a9ba:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9c1:	83 ec 0c             	sub    esp,0xc
c001a9c4:	50                   	push   eax
c001a9c5:	e8 12 1c 00 00       	call   c001c5dc <LogicalDisk::mount()>
c001a9ca:	83 c4 10             	add    esp,0x10
c001a9cd:	90                   	nop
c001a9ce:	83 c4 0c             	add    esp,0xc
c001a9d1:	c3                   	ret    

c001a9d2 <Directory::open()>:
c001a9d2:	53                   	push   ebx
c001a9d3:	b8 0b 00 00 00       	mov    eax,0xb
c001a9d8:	83 ec 08             	sub    esp,0x8
c001a9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9df:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a9e6:	83 fa 19             	cmp    edx,0x19
c001a9e9:	77 3d                	ja     c001aa28 <Directory::open()+0x56>
c001a9eb:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a9f2:	85 d2                	test   edx,edx
c001a9f4:	74 32                	je     c001aa28 <Directory::open()+0x56>
c001a9f6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a9fc:	85 d2                	test   edx,edx
c001a9fe:	74 28                	je     c001aa28 <Directory::open()+0x56>
c001aa00:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aa04:	b8 06 00 00 00       	mov    eax,0x6
c001aa09:	75 1d                	jne    c001aa28 <Directory::open()+0x56>
c001aa0b:	50                   	push   eax
c001aa0c:	8b 02                	mov    eax,DWORD PTR [edx]
c001aa0e:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aa14:	51                   	push   ecx
c001aa15:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aa18:	51                   	push   ecx
c001aa19:	52                   	push   edx
c001aa1a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aa1d:	83 c4 10             	add    esp,0x10
c001aa20:	85 c0                	test   eax,eax
c001aa22:	75 04                	jne    c001aa28 <Directory::open()+0x56>
c001aa24:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aa28:	83 c4 08             	add    esp,0x8
c001aa2b:	5b                   	pop    ebx
c001aa2c:	c3                   	ret    
c001aa2d:	90                   	nop

c001aa2e <Directory::close()>:
c001aa2e:	53                   	push   ebx
c001aa2f:	b8 0b 00 00 00       	mov    eax,0xb
c001aa34:	83 ec 08             	sub    esp,0x8
c001aa37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa42:	83 f9 19             	cmp    ecx,0x19
c001aa45:	77 41                	ja     c001aa88 <Directory::close()+0x5a>
c001aa47:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa4e:	85 db                	test   ebx,ebx
c001aa50:	74 36                	je     c001aa88 <Directory::close()+0x5a>
c001aa52:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa59:	74 2d                	je     c001aa88 <Directory::close()+0x5a>
c001aa5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa5f:	b8 05 00 00 00       	mov    eax,0x5
c001aa64:	74 22                	je     c001aa88 <Directory::close()+0x5a>
c001aa66:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aa6a:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa71:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa77:	53                   	push   ebx
c001aa78:	53                   	push   ebx
c001aa79:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa7b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa81:	50                   	push   eax
c001aa82:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aa85:	83 c4 10             	add    esp,0x10
c001aa88:	83 c4 08             	add    esp,0x8
c001aa8b:	5b                   	pop    ebx
c001aa8c:	c3                   	ret    
c001aa8d:	90                   	nop

c001aa8e <Directory::unlink()>:
c001aa8e:	83 ec 0c             	sub    esp,0xc
c001aa91:	b8 0b 00 00 00       	mov    eax,0xb
c001aa96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaa1:	83 f9 19             	cmp    ecx,0x19
c001aaa4:	77 2f                	ja     c001aad5 <Directory::unlink()+0x47>
c001aaa6:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaad:	85 c9                	test   ecx,ecx
c001aaaf:	74 24                	je     c001aad5 <Directory::unlink()+0x47>
c001aab1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aab7:	85 c9                	test   ecx,ecx
c001aab9:	74 1a                	je     c001aad5 <Directory::unlink()+0x47>
c001aabb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aabf:	b8 06 00 00 00       	mov    eax,0x6
c001aac4:	75 0f                	jne    c001aad5 <Directory::unlink()+0x47>
c001aac6:	50                   	push   eax
c001aac7:	83 c2 0d             	add    edx,0xd
c001aaca:	50                   	push   eax
c001aacb:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aacd:	52                   	push   edx
c001aace:	51                   	push   ecx
c001aacf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aad2:	83 c4 10             	add    esp,0x10
c001aad5:	83 c4 0c             	add    esp,0xc
c001aad8:	c3                   	ret    
c001aad9:	90                   	nop

c001aada <Directory::rename(char const*)>:
c001aada:	83 ec 0c             	sub    esp,0xc
c001aadd:	b8 0b 00 00 00       	mov    eax,0xb
c001aae2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aae6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaed:	83 f9 19             	cmp    ecx,0x19
c001aaf0:	77 32                	ja     c001ab24 <Directory::rename(char const*)+0x4a>
c001aaf2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaf9:	85 c9                	test   ecx,ecx
c001aafb:	74 27                	je     c001ab24 <Directory::rename(char const*)+0x4a>
c001aafd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab03:	85 c9                	test   ecx,ecx
c001ab05:	74 1d                	je     c001ab24 <Directory::rename(char const*)+0x4a>
c001ab07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab0b:	b8 06 00 00 00       	mov    eax,0x6
c001ab10:	75 12                	jne    c001ab24 <Directory::rename(char const*)+0x4a>
c001ab12:	50                   	push   eax
c001ab13:	83 c2 0d             	add    edx,0xd
c001ab16:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab1c:	52                   	push   edx
c001ab1d:	51                   	push   ecx
c001ab1e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	83 c4 0c             	add    esp,0xc
c001ab27:	c3                   	ret    

c001ab28 <Directory::exists()>:
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	31 c0                	xor    eax,eax
c001ab2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab31:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab38:	83 f9 19             	cmp    ecx,0x19
c001ab3b:	77 24                	ja     c001ab61 <Directory::exists()+0x39>
c001ab3d:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab44:	85 c9                	test   ecx,ecx
c001ab46:	74 19                	je     c001ab61 <Directory::exists()+0x39>
c001ab48:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab4e:	85 c9                	test   ecx,ecx
c001ab50:	74 0f                	je     c001ab61 <Directory::exists()+0x39>
c001ab52:	50                   	push   eax
c001ab53:	83 c2 0d             	add    edx,0xd
c001ab56:	50                   	push   eax
c001ab57:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab59:	52                   	push   edx
c001ab5a:	51                   	push   ecx
c001ab5b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab5e:	83 c4 10             	add    esp,0x10
c001ab61:	83 c4 0c             	add    esp,0xc
c001ab64:	c3                   	ret    
c001ab65:	90                   	nop

c001ab66 <Directory::read(dirent*)>:
c001ab66:	83 ec 1c             	sub    esp,0x1c
c001ab69:	b8 0b 00 00 00       	mov    eax,0xb
c001ab6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab79:	83 f9 19             	cmp    ecx,0x19
c001ab7c:	77 30                	ja     c001abae <Directory::read(dirent*)+0x48>
c001ab7e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab85:	85 c9                	test   ecx,ecx
c001ab87:	74 25                	je     c001abae <Directory::read(dirent*)+0x48>
c001ab89:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ab90:	74 1c                	je     c001abae <Directory::read(dirent*)+0x48>
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	8b 02                	mov    eax,DWORD PTR [edx]
c001ab97:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ab9b:	51                   	push   ecx
c001ab9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aba0:	6a 00                	push   0x0
c001aba2:	68 10 01 00 00       	push   0x110
c001aba7:	52                   	push   edx
c001aba8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abab:	83 c4 20             	add    esp,0x20
c001abae:	83 c4 1c             	add    esp,0x1c
c001abb1:	c3                   	ret    

c001abb2 <Directory::create()>:
c001abb2:	83 ec 0c             	sub    esp,0xc
c001abb5:	b8 0b 00 00 00       	mov    eax,0xb
c001abba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abbe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abc5:	83 f9 19             	cmp    ecx,0x19
c001abc8:	77 2f                	ja     c001abf9 <Directory::create()+0x47>
c001abca:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abd1:	85 c9                	test   ecx,ecx
c001abd3:	74 24                	je     c001abf9 <Directory::create()+0x47>
c001abd5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001abdb:	85 c9                	test   ecx,ecx
c001abdd:	74 1a                	je     c001abf9 <Directory::create()+0x47>
c001abdf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001abe3:	b8 06 00 00 00       	mov    eax,0x6
c001abe8:	75 0f                	jne    c001abf9 <Directory::create()+0x47>
c001abea:	50                   	push   eax
c001abeb:	83 c2 0d             	add    edx,0xd
c001abee:	50                   	push   eax
c001abef:	8b 01                	mov    eax,DWORD PTR [ecx]
c001abf1:	52                   	push   edx
c001abf2:	51                   	push   ecx
c001abf3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	83 c4 0c             	add    esp,0xc
c001abfc:	c3                   	ret    
c001abfd:	90                   	nop

c001abfe <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001abfe:	b8 0a 00 00 00       	mov    eax,0xa
c001ac03:	c3                   	ret    

c001ac04 <Bus::Bus(char const*)>:
c001ac04:	83 ec 0c             	sub    esp,0xc
c001ac07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0b:	83 ec 08             	sub    esp,0x8
c001ac0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac12:	50                   	push   eax
c001ac13:	e8 f2 07 00 00       	call   c001b40a <Device::Device(char const*)>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	ba 28 1d 03 c0       	mov    edx,0xc0031d28
c001ac20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac24:	89 10                	mov    DWORD PTR [eax],edx
c001ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ac34:	90                   	nop
c001ac35:	83 c4 0c             	add    esp,0xc
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop
c001ac3a:	66 90                	xchg   ax,ax

c001ac3c <Bus::~Bus()>:
c001ac3c:	83 ec 0c             	sub    esp,0xc
c001ac3f:	ba 28 1d 03 c0       	mov    edx,0xc0031d28
c001ac44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac48:	89 10                	mov    DWORD PTR [eax],edx
c001ac4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4e:	83 ec 0c             	sub    esp,0xc
c001ac51:	50                   	push   eax
c001ac52:	e8 53 05 00 00       	call   c001b1aa <Device::~Device()>
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	90                   	nop
c001ac5b:	83 c4 0c             	add    esp,0xc
c001ac5e:	c3                   	ret    
c001ac5f:	90                   	nop

c001ac60 <Bus::~Bus()>:
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	83 ec 0c             	sub    esp,0xc
c001ac66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6a:	e8 cd ff ff ff       	call   c001ac3c <Bus::~Bus()>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	83 ec 08             	sub    esp,0x8
c001ac75:	68 58 01 00 00       	push   0x158
c001ac7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac7e:	e8 91 e4 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001ac83:	83 c4 10             	add    esp,0x10
c001ac86:	83 c4 0c             	add    esp,0xc
c001ac89:	c3                   	ret    

c001ac8a <beepThread(void*)>:
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ac92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac96:	48                   	dec    eax
c001ac97:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ac9c:	75 01                	jne    c001ac9f <beepThread(void*)+0x15>
c001ac9e:	fb                   	sti    
c001ac9f:	6b c2 0a             	imul   eax,edx,0xa
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	50                   	push   eax
c001aca6:	e8 c1 a6 00 00       	call   c002536c <milliTenthSleep(unsigned int)>
c001acab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acb2:	e8 ba c4 00 00       	call   c0027171 <HalMakeBeep(int)>
c001acb7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001acbf:	83 c4 1c             	add    esp,0x1c
c001acc2:	e9 89 a5 00 00       	jmp    c0025250 <blockTask(TaskState)>

c001acc7 <Krnl::beep(int, int, bool)>:
c001acc7:	56                   	push   esi
c001acc8:	53                   	push   ebx
c001acc9:	83 ec 10             	sub    esp,0x10
c001accc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acd8:	e8 94 c4 00 00       	call   c0027171 <HalMakeBeep(int)>
c001acdd:	89 f0                	mov    eax,esi
c001acdf:	83 c4 10             	add    esp,0x10
c001ace2:	84 c0                	test   al,al
c001ace4:	74 1e                	je     c001ad04 <Krnl::beep(int, int, bool)+0x3d>
c001ace6:	6b db 0a             	imul   ebx,ebx,0xa
c001ace9:	83 ec 0c             	sub    esp,0xc
c001acec:	53                   	push   ebx
c001aced:	e8 7a a6 00 00       	call   c002536c <milliTenthSleep(unsigned int)>
c001acf2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001acfa:	83 c4 14             	add    esp,0x14
c001acfd:	5b                   	pop    ebx
c001acfe:	5e                   	pop    esi
c001acff:	e9 6d c4 00 00       	jmp    c0027171 <HalMakeBeep(int)>
c001ad04:	68 e6 00 00 00       	push   0xe6
c001ad09:	53                   	push   ebx
c001ad0a:	68 8a ac 01 c0       	push   0xc001ac8a
c001ad0f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad15:	e8 2e a2 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c001ad1a:	83 c4 14             	add    esp,0x14
c001ad1d:	5b                   	pop    ebx
c001ad1e:	5e                   	pop    esi
c001ad1f:	c3                   	ret    

c001ad20 <User::loadClockSettings(int)>:
c001ad20:	53                   	push   ebx
c001ad21:	83 ec 14             	sub    esp,0x14
c001ad24:	68 14 01 00 00       	push   0x114
c001ad29:	e8 ad b6 ff ff       	call   c00163db <malloc>
c001ad2e:	83 c4 0c             	add    esp,0xc
c001ad31:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad37:	68 4c 1d 03 c0       	push   0xc0031d4c
c001ad3c:	50                   	push   eax
c001ad3d:	89 c3                	mov    ebx,eax
c001ad3f:	e8 e6 f6 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001ad44:	58                   	pop    eax
c001ad45:	5a                   	pop    edx
c001ad46:	6a 01                	push   0x1
c001ad48:	53                   	push   ebx
c001ad49:	e8 fa f6 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c001ad4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad51:	e8 50 f7 ff ff       	call   c001a4a6 <File::close()>
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	85 db                	test   ebx,ebx
c001ad5b:	74 0f                	je     c001ad6c <User::loadClockSettings(int)+0x4c>
c001ad5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad5f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ad66:	83 c4 08             	add    esp,0x8
c001ad69:	5b                   	pop    ebx
c001ad6a:	ff e0                	jmp    eax
c001ad6c:	83 c4 08             	add    esp,0x8
c001ad6f:	5b                   	pop    ebx
c001ad70:	c3                   	ret    
c001ad71:	90                   	nop

c001ad72 <Clock::Clock(char const*)>:
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad79:	83 ec 08             	sub    esp,0x8
c001ad7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad80:	50                   	push   eax
c001ad81:	e8 84 06 00 00       	call   c001b40a <Device::Device(char const*)>
c001ad86:	83 c4 10             	add    esp,0x10
c001ad89:	ba 74 1d 03 c0       	mov    edx,0xc0031d74
c001ad8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad92:	89 10                	mov    DWORD PTR [eax],edx
c001ad94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad98:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ada2:	90                   	nop
c001ada3:	83 c4 0c             	add    esp,0xc
c001ada6:	c3                   	ret    
c001ada7:	90                   	nop

c001ada8 <Clock::~Clock()>:
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	ba 74 1d 03 c0       	mov    edx,0xc0031d74
c001adb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb4:	89 10                	mov    DWORD PTR [eax],edx
c001adb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adba:	83 ec 0c             	sub    esp,0xc
c001adbd:	50                   	push   eax
c001adbe:	e8 e7 03 00 00       	call   c001b1aa <Device::~Device()>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	90                   	nop
c001adc7:	83 c4 0c             	add    esp,0xc
c001adca:	c3                   	ret    
c001adcb:	90                   	nop

c001adcc <Clock::~Clock()>:
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	83 ec 0c             	sub    esp,0xc
c001add2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001add6:	e8 cd ff ff ff       	call   c001ada8 <Clock::~Clock()>
c001addb:	83 c4 10             	add    esp,0x10
c001adde:	83 ec 08             	sub    esp,0x8
c001ade1:	68 58 01 00 00       	push   0x158
c001ade6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adea:	e8 25 e3 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	83 c4 0c             	add    esp,0xc
c001adf5:	c3                   	ret    

c001adf6 <Clock::timeInSecondsLocal()>:
c001adf6:	53                   	push   ebx
c001adf7:	83 ec 14             	sub    esp,0x14
c001adfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adfe:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae00:	50                   	push   eax
c001ae01:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae04:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ae0b:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ae11:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ae17:	89 cb                	mov    ebx,ecx
c001ae19:	c1 fb 1f             	sar    ebx,0x1f
c001ae1c:	01 c8                	add    eax,ecx
c001ae1e:	11 da                	adc    edx,ebx
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	31 c9                	xor    ecx,ecx
c001ae25:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae2c:	74 05                	je     c001ae33 <Clock::timeInSecondsLocal()+0x3d>
c001ae2e:	b9 08 07 00 00       	mov    ecx,0x708
c001ae33:	31 db                	xor    ebx,ebx
c001ae35:	01 c8                	add    eax,ecx
c001ae37:	11 da                	adc    edx,ebx
c001ae39:	83 c4 08             	add    esp,0x8
c001ae3c:	5b                   	pop    ebx
c001ae3d:	c3                   	ret    

c001ae3e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ae3e:	57                   	push   edi
c001ae3f:	56                   	push   esi
c001ae40:	53                   	push   ebx
c001ae41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae4f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae52:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae59:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae5f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ae65:	99                   	cdq    
c001ae66:	29 c6                	sub    esi,eax
c001ae68:	19 d7                	sbb    edi,edx
c001ae6a:	89 f0                	mov    eax,esi
c001ae6c:	31 f6                	xor    esi,esi
c001ae6e:	89 fa                	mov    edx,edi
c001ae70:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae77:	74 05                	je     c001ae7e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001ae79:	be 08 07 00 00       	mov    esi,0x708
c001ae7e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ae82:	31 ff                	xor    edi,edi
c001ae84:	29 f0                	sub    eax,esi
c001ae86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae8a:	19 fa                	sbb    edx,edi
c001ae8c:	89 d8                	mov    eax,ebx
c001ae8e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae92:	5b                   	pop    ebx
c001ae93:	5e                   	pop    esi
c001ae94:	5f                   	pop    edi
c001ae95:	ff e0                	jmp    eax

c001ae97 <datetimeToSeconds(datetime_t)>:
c001ae97:	55                   	push   ebp
c001ae98:	57                   	push   edi
c001ae99:	56                   	push   esi
c001ae9a:	53                   	push   ebx
c001ae9b:	83 ec 0c             	sub    esp,0xc
c001ae9e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aea2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aea6:	89 f7                	mov    edi,esi
c001aea8:	89 f0                	mov    eax,esi
c001aeaa:	0f b6 cf             	movzx  ecx,bh
c001aead:	0f b6 c4             	movzx  eax,ah
c001aeb0:	c1 ef 10             	shr    edi,0x10
c001aeb3:	89 da                	mov    edx,ebx
c001aeb5:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001aeb8:	89 f9                	mov    ecx,edi
c001aeba:	0f b6 f9             	movzx  edi,cl
c001aebd:	89 f1                	mov    ecx,esi
c001aebf:	6b c0 3c             	imul   eax,eax,0x3c
c001aec2:	0f b6 f1             	movzx  esi,cl
c001aec5:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001aecb:	0f b6 db             	movzx  ebx,bl
c001aece:	c1 ea 10             	shr    edx,0x10
c001aed1:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001aed7:	01 f8                	add    eax,edi
c001aed9:	01 f0                	add    eax,esi
c001aedb:	89 04 24             	mov    DWORD PTR [esp],eax
c001aede:	c1 f8 1f             	sar    eax,0x1f
c001aee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aee5:	89 e8                	mov    eax,ebp
c001aee7:	0f b6 c0             	movzx  eax,al
c001aeea:	8b 0c 85 c0 1d 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce240]
c001aef1:	83 f8 01             	cmp    eax,0x1
c001aef4:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001aef8:	0f b7 da             	movzx  ebx,dx
c001aefb:	76 27                	jbe    c001af24 <datetimeToSeconds(datetime_t)+0x8d>
c001aefd:	80 e2 03             	and    dl,0x3
c001af00:	75 22                	jne    c001af24 <datetimeToSeconds(datetime_t)+0x8d>
c001af02:	31 d2                	xor    edx,edx
c001af04:	be 64 00 00 00       	mov    esi,0x64
c001af09:	89 d8                	mov    eax,ebx
c001af0b:	f7 f6                	div    esi
c001af0d:	85 d2                	test   edx,edx
c001af0f:	75 12                	jne    c001af23 <datetimeToSeconds(datetime_t)+0x8c>
c001af11:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001af17:	be 90 01 00 00       	mov    esi,0x190
c001af1c:	99                   	cdq    
c001af1d:	f7 fe                	idiv   esi
c001af1f:	85 d2                	test   edx,edx
c001af21:	75 01                	jne    c001af24 <datetimeToSeconds(datetime_t)+0x8d>
c001af23:	41                   	inc    ecx
c001af24:	83 fb 46             	cmp    ebx,0x46
c001af27:	76 48                	jbe    c001af71 <datetimeToSeconds(datetime_t)+0xda>
c001af29:	be 46 00 00 00       	mov    esi,0x46
c001af2e:	bf 64 00 00 00       	mov    edi,0x64
c001af33:	bd 90 01 00 00       	mov    ebp,0x190
c001af38:	f7 c6 03 00 00 00    	test   esi,0x3
c001af3e:	b8 6d 01 00 00       	mov    eax,0x16d
c001af43:	75 23                	jne    c001af68 <datetimeToSeconds(datetime_t)+0xd1>
c001af45:	89 f0                	mov    eax,esi
c001af47:	99                   	cdq    
c001af48:	f7 ff                	idiv   edi
c001af4a:	b8 6e 01 00 00       	mov    eax,0x16e
c001af4f:	85 d2                	test   edx,edx
c001af51:	75 15                	jne    c001af68 <datetimeToSeconds(datetime_t)+0xd1>
c001af53:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af59:	99                   	cdq    
c001af5a:	f7 fd                	idiv   ebp
c001af5c:	83 fa 01             	cmp    edx,0x1
c001af5f:	19 c0                	sbb    eax,eax
c001af61:	f7 d0                	not    eax
c001af63:	05 6e 01 00 00       	add    eax,0x16e
c001af68:	46                   	inc    esi
c001af69:	01 c1                	add    ecx,eax
c001af6b:	39 de                	cmp    esi,ebx
c001af6d:	7c c9                	jl     c001af38 <datetimeToSeconds(datetime_t)+0xa1>
c001af6f:	eb 34                	jmp    c001afa5 <datetimeToSeconds(datetime_t)+0x10e>
c001af71:	74 32                	je     c001afa5 <datetimeToSeconds(datetime_t)+0x10e>
c001af73:	b8 45 00 00 00       	mov    eax,0x45
c001af78:	89 c2                	mov    edx,eax
c001af7a:	83 e2 03             	and    edx,0x3
c001af7d:	39 d8                	cmp    eax,ebx
c001af7f:	7e 0f                	jle    c001af90 <datetimeToSeconds(datetime_t)+0xf9>
c001af81:	83 fa 01             	cmp    edx,0x1
c001af84:	19 d2                	sbb    edx,edx
c001af86:	48                   	dec    eax
c001af87:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001af8e:	eb e8                	jmp    c001af78 <datetimeToSeconds(datetime_t)+0xe1>
c001af90:	85 d2                	test   edx,edx
c001af92:	b8 6d 01 00 00       	mov    eax,0x16d
c001af97:	75 0a                	jne    c001afa3 <datetimeToSeconds(datetime_t)+0x10c>
c001af99:	83 fb 01             	cmp    ebx,0x1
c001af9c:	19 c0                	sbb    eax,eax
c001af9e:	05 6e 01 00 00       	add    eax,0x16e
c001afa3:	29 c1                	sub    ecx,eax
c001afa5:	b8 80 51 01 00       	mov    eax,0x15180
c001afaa:	f7 e9                	imul   ecx
c001afac:	03 04 24             	add    eax,DWORD PTR [esp]
c001afaf:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001afb3:	83 c4 0c             	add    esp,0xc
c001afb6:	5b                   	pop    ebx
c001afb7:	5e                   	pop    esi
c001afb8:	5f                   	pop    edi
c001afb9:	5d                   	pop    ebp
c001afba:	c3                   	ret    
c001afbb:	90                   	nop

c001afbc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001afbc:	57                   	push   edi
c001afbd:	56                   	push   esi
c001afbe:	53                   	push   ebx
c001afbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afc3:	8b 06                	mov    eax,DWORD PTR [esi]
c001afc5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001afc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afd0:	e8 c2 fe ff ff       	call   c001ae97 <datetimeToSeconds(datetime_t)>
c001afd5:	59                   	pop    ecx
c001afd6:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001afdd:	5b                   	pop    ebx
c001afde:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001afe4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001afea:	89 cb                	mov    ebx,ecx
c001afec:	c1 fb 1f             	sar    ebx,0x1f
c001afef:	29 c8                	sub    eax,ecx
c001aff1:	19 da                	sbb    edx,ebx
c001aff3:	31 c9                	xor    ecx,ecx
c001aff5:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001affc:	74 05                	je     c001b003 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001affe:	b9 08 07 00 00       	mov    ecx,0x708
c001b003:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b007:	31 db                	xor    ebx,ebx
c001b009:	29 c8                	sub    eax,ecx
c001b00b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b00f:	19 da                	sbb    edx,ebx
c001b011:	89 f8                	mov    eax,edi
c001b013:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b017:	5b                   	pop    ebx
c001b018:	5e                   	pop    esi
c001b019:	5f                   	pop    edi
c001b01a:	ff e0                	jmp    eax

c001b01c <secondsToDatetime(unsigned long long)>:
c001b01c:	55                   	push   ebp
c001b01d:	57                   	push   edi
c001b01e:	56                   	push   esi
c001b01f:	53                   	push   ebx
c001b020:	83 ec 1c             	sub    esp,0x1c
c001b023:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b027:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b02b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b02f:	6a 00                	push   0x0
c001b031:	68 80 51 01 00       	push   0x15180
c001b036:	55                   	push   ebp
c001b037:	57                   	push   edi
c001b038:	e8 b3 35 01 00       	call   c002e5f0 <__udivdi3>
c001b03d:	83 c4 10             	add    esp,0x10
c001b040:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b044:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b04a:	6a 00                	push   0x0
c001b04c:	68 80 51 01 00       	push   0x15180
c001b051:	55                   	push   ebp
c001b052:	57                   	push   edi
c001b053:	bf 10 0e 00 00       	mov    edi,0xe10
c001b058:	e8 93 36 01 00       	call   c002e6f0 <__umoddi3>
c001b05d:	83 c4 10             	add    esp,0x10
c001b060:	99                   	cdq    
c001b061:	f7 ff                	idiv   edi
c001b063:	bf 3c 00 00 00       	mov    edi,0x3c
c001b068:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b06b:	89 d0                	mov    eax,edx
c001b06d:	99                   	cdq    
c001b06e:	f7 ff                	idiv   edi
c001b070:	85 db                	test   ebx,ebx
c001b072:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b075:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b078:	79 11                	jns    c001b08b <secondsToDatetime(unsigned long long)+0x6f>
c001b07a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b07e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b084:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b089:	eb 07                	jmp    c001b092 <secondsToDatetime(unsigned long long)+0x76>
c001b08b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b090:	89 d8                	mov    eax,ebx
c001b092:	99                   	cdq    
c001b093:	bf b4 05 00 00       	mov    edi,0x5b4
c001b098:	f7 f9                	idiv   ecx
c001b09a:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b09f:	31 d2                	xor    edx,edx
c001b0a1:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b0a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0aa:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b0b2:	01 c3                	add    ebx,eax
c001b0b4:	89 d8                	mov    eax,ebx
c001b0b6:	f7 f1                	div    ecx
c001b0b8:	31 d2                	xor    edx,edx
c001b0ba:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b0bd:	89 d8                	mov    eax,ebx
c001b0bf:	f7 f7                	div    edi
c001b0c1:	31 d2                	xor    edx,edx
c001b0c3:	29 c1                	sub    ecx,eax
c001b0c5:	89 d8                	mov    eax,ebx
c001b0c7:	f7 f5                	div    ebp
c001b0c9:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	29 c1                	sub    ecx,eax
c001b0d2:	89 c8                	mov    eax,ecx
c001b0d4:	f7 f5                	div    ebp
c001b0d6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b0db:	31 d2                	xor    edx,edx
c001b0dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0e1:	89 c8                	mov    eax,ecx
c001b0e3:	f7 f5                	div    ebp
c001b0e5:	31 d2                	xor    edx,edx
c001b0e7:	01 c3                	add    ebx,eax
c001b0e9:	89 c8                	mov    eax,ecx
c001b0eb:	f7 f7                	div    edi
c001b0ed:	bf 99 00 00 00       	mov    edi,0x99
c001b0f2:	31 d2                	xor    edx,edx
c001b0f4:	29 c3                	sub    ebx,eax
c001b0f6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b0fe:	29 c3                	sub    ebx,eax
c001b100:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b103:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b106:	83 c1 02             	add    ecx,0x2
c001b109:	89 c8                	mov    eax,ecx
c001b10b:	bb 05 00 00 00       	mov    ebx,0x5
c001b110:	f7 f7                	div    edi
c001b112:	31 d2                	xor    edx,edx
c001b114:	89 c7                	mov    edi,eax
c001b116:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b11c:	83 c0 02             	add    eax,0x2
c001b11f:	f7 f3                	div    ebx
c001b121:	89 eb                	mov    ebx,ebp
c001b123:	29 c3                	sub    ebx,eax
c001b125:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b12b:	88 1e                	mov    BYTE PTR [esi],bl
c001b12d:	19 c0                	sbb    eax,eax
c001b12f:	31 d2                	xor    edx,edx
c001b131:	83 e0 0c             	and    eax,0xc
c001b134:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b138:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b140:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b144:	83 f9 01             	cmp    ecx,0x1
c001b147:	0f 96 c2             	setbe  dl
c001b14a:	41                   	inc    ecx
c001b14b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b14e:	01 d0                	add    eax,edx
c001b150:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b154:	83 c4 1c             	add    esp,0x1c
c001b157:	89 f0                	mov    eax,esi
c001b159:	5b                   	pop    ebx
c001b15a:	5e                   	pop    esi
c001b15b:	5f                   	pop    edi
c001b15c:	5d                   	pop    ebp
c001b15d:	c2 04 00             	ret    0x4

c001b160 <Clock::timeInDatetimeLocal()>:
c001b160:	53                   	push   ebx
c001b161:	83 ec 14             	sub    esp,0x14
c001b164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b16c:	e8 85 fc ff ff       	call   c001adf6 <Clock::timeInSecondsLocal()>
c001b171:	83 c4 0c             	add    esp,0xc
c001b174:	52                   	push   edx
c001b175:	50                   	push   eax
c001b176:	53                   	push   ebx
c001b177:	e8 a0 fe ff ff       	call   c001b01c <secondsToDatetime(unsigned long long)>
c001b17c:	89 d8                	mov    eax,ebx
c001b17e:	83 c4 14             	add    esp,0x14
c001b181:	5b                   	pop    ebx
c001b182:	c2 04 00             	ret    0x4
c001b185:	90                   	nop

c001b186 <Device::hibernate()>:
c001b186:	c3                   	ret    
c001b187:	90                   	nop

c001b188 <Device::wake()>:
c001b188:	c3                   	ret    
c001b189:	90                   	nop

c001b18a <Device::detect()>:
c001b18a:	c3                   	ret    
c001b18b:	90                   	nop

c001b18c <Device::disableLegacy()>:
c001b18c:	c3                   	ret    
c001b18d:	90                   	nop

c001b18e <Device::powerSaving(PowerSavingLevel)>:
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <DriverlessDevice::close(int, int, void*)>:
c001b190:	31 c0                	xor    eax,eax
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <DriverlessDevice::detect()>:
c001b194:	c3                   	ret    
c001b195:	90                   	nop

c001b196 <DriverlessDevice::open(int, int, void*)>:
c001b196:	83 ec 18             	sub    esp,0x18
c001b199:	68 f0 1d 03 c0       	push   0xc0031df0
c001b19e:	e8 f7 4f 00 00       	call   c002019a <KePanic(char const*)>
c001b1a3:	83 c8 ff             	or     eax,0xffffffff
c001b1a6:	83 c4 1c             	add    esp,0x1c
c001b1a9:	c3                   	ret    

c001b1aa <Device::~Device()>:
c001b1aa:	ba 5c 1e 03 c0       	mov    edx,0xc0031e5c
c001b1af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1b3:	89 10                	mov    DWORD PTR [eax],edx
c001b1b5:	90                   	nop
c001b1b6:	c3                   	ret    
c001b1b7:	90                   	nop

c001b1b8 <Device::~Device()>:
c001b1b8:	83 ec 0c             	sub    esp,0xc
c001b1bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1bf:	e8 e6 ff ff ff       	call   c001b1aa <Device::~Device()>
c001b1c4:	83 c4 04             	add    esp,0x4
c001b1c7:	83 ec 08             	sub    esp,0x8
c001b1ca:	68 58 01 00 00       	push   0x158
c001b1cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d3:	e8 3c df ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	83 c4 0c             	add    esp,0xc
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <Device::findAndLoadDriver()>:
c001b1e0:	c7 44 24 04 0e 1e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031e0e
c001b1e8:	e9 25 e0 ff ff       	jmp    c0019212 <Dbg::kprintf(char const*, ...)>
c001b1ed:	90                   	nop

c001b1ee <Device::preOpenPCI(PCIDeviceInfo)>:
c001b1ee:	57                   	push   edi
c001b1ef:	b9 09 00 00 00       	mov    ecx,0x9
c001b1f4:	56                   	push   esi
c001b1f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1f9:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b1fd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b207:	81 c7 18 01 00 00    	add    edi,0x118
c001b20d:	fc                   	cld    
c001b20e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b210:	5e                   	pop    esi
c001b211:	5f                   	pop    edi
c001b212:	c3                   	ret    
c001b213:	90                   	nop

c001b214 <Device::preOpenACPI(void*, char*, char*)>:
c001b214:	57                   	push   edi
c001b215:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b21a:	56                   	push   esi
c001b21b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b21f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b223:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b227:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b231:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b237:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b23d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b23f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b245:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b249:	b9 0e 00 00 00       	mov    ecx,0xe
c001b24e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b250:	5e                   	pop    esi
c001b251:	5f                   	pop    edi
c001b252:	c3                   	ret    
c001b253:	90                   	nop

c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b254:	53                   	push   ebx
c001b255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b25d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b261:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b265:	0f b6 c0             	movzx  eax,al
c001b268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b26c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b270:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b274:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b278:	5b                   	pop    ebx
c001b279:	e9 be 05 00 00       	jmp    c001b83c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b27e <Device::getParent()>:
c001b27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b282:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b288:	c3                   	ret    
c001b289:	90                   	nop

c001b28a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b28a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b28e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b292:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b297:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b29b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b29f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2a3:	e9 0b 07 00 00       	jmp    c001b9b3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b2a8 <Device::addChild(Device*)>:
c001b2a8:	53                   	push   ebx
c001b2a9:	83 ec 08             	sub    esp,0x8
c001b2ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2b4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b2ba:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b2c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2c2:	85 d2                	test   edx,edx
c001b2c4:	74 04                	je     c001b2ca <Device::addChild(Device*)+0x22>
c001b2c6:	89 d3                	mov    ebx,edx
c001b2c8:	eb f6                	jmp    c001b2c0 <Device::addChild(Device*)+0x18>
c001b2ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b2cd:	83 ec 0c             	sub    esp,0xc
c001b2d0:	6a 08                	push   0x8
c001b2d2:	e8 04 b1 ff ff       	call   c00163db <malloc>
c001b2d7:	89 03                	mov    DWORD PTR [ebx],eax
c001b2d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2e6:	83 c4 18             	add    esp,0x18
c001b2e9:	5b                   	pop    ebx
c001b2ea:	c3                   	ret    
c001b2eb:	90                   	nop

c001b2ec <Device::removeAllChildren()>:
c001b2ec:	56                   	push   esi
c001b2ed:	53                   	push   ebx
c001b2ee:	52                   	push   edx
c001b2ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2f3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b2f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2fc:	74 17                	je     c001b315 <Device::removeAllChildren()+0x29>
c001b2fe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b301:	85 c0                	test   eax,eax
c001b303:	74 0c                	je     c001b311 <Device::removeAllChildren()+0x25>
c001b305:	8b 10                	mov    edx,DWORD PTR [eax]
c001b307:	83 ec 0c             	sub    esp,0xc
c001b30a:	50                   	push   eax
c001b30b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b313:	eb e4                	jmp    c001b2f9 <Device::removeAllChildren()+0xd>
c001b315:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b31b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b321:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b327:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b32e:	58                   	pop    eax
c001b32f:	5b                   	pop    ebx
c001b330:	5e                   	pop    esi
c001b331:	c3                   	ret    

c001b332 <Device::hibernateAll()>:
c001b332:	53                   	push   ebx
c001b333:	83 ec 14             	sub    esp,0x14
c001b336:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b33a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b33c:	53                   	push   ebx
c001b33d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b340:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b34c:	74 0f                	je     c001b35d <Device::hibernateAll()+0x2b>
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b354:	e8 d9 ff ff ff       	call   c001b332 <Device::hibernateAll()>
c001b359:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b35b:	eb e9                	jmp    c001b346 <Device::hibernateAll()+0x14>
c001b35d:	83 c4 08             	add    esp,0x8
c001b360:	5b                   	pop    ebx
c001b361:	c3                   	ret    

c001b362 <Device::wakeAll()>:
c001b362:	53                   	push   ebx
c001b363:	83 ec 14             	sub    esp,0x14
c001b366:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b36a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b36c:	53                   	push   ebx
c001b36d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b370:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b376:	83 c4 10             	add    esp,0x10
c001b379:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b37c:	74 0f                	je     c001b38d <Device::wakeAll()+0x2b>
c001b37e:	83 ec 0c             	sub    esp,0xc
c001b381:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b384:	e8 d9 ff ff ff       	call   c001b362 <Device::wakeAll()>
c001b389:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b38b:	eb e9                	jmp    c001b376 <Device::wakeAll()+0x14>
c001b38d:	83 c4 08             	add    esp,0x8
c001b390:	5b                   	pop    ebx
c001b391:	c3                   	ret    

c001b392 <Device::detectAll()>:
c001b392:	53                   	push   ebx
c001b393:	83 ec 14             	sub    esp,0x14
c001b396:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b39a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b39c:	53                   	push   ebx
c001b39d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b3a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3ac:	74 0f                	je     c001b3bd <Device::detectAll()+0x2b>
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3b4:	e8 d9 ff ff ff       	call   c001b392 <Device::detectAll()>
c001b3b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3bb:	eb e9                	jmp    c001b3a6 <Device::detectAll()+0x14>
c001b3bd:	83 c4 08             	add    esp,0x8
c001b3c0:	5b                   	pop    ebx
c001b3c1:	c3                   	ret    

c001b3c2 <Device::disableLegacyAll()>:
c001b3c2:	c3                   	ret    
c001b3c3:	90                   	nop

c001b3c4 <Device::loadDriversForAll()>:
c001b3c4:	c3                   	ret    
c001b3c5:	90                   	nop

c001b3c6 <Device::powerSavingAll(PowerSavingLevel)>:
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	83 ec 0c             	sub    esp,0xc
c001b3cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b3cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b3d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3d5:	56                   	push   esi
c001b3d6:	53                   	push   ebx
c001b3d7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b3da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3e0:	83 c4 10             	add    esp,0x10
c001b3e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3e6:	74 0f                	je     c001b3f7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b3e8:	52                   	push   edx
c001b3e9:	52                   	push   edx
c001b3ea:	56                   	push   esi
c001b3eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3ee:	e8 d3 ff ff ff       	call   c001b3c6 <Device::powerSavingAll(PowerSavingLevel)>
c001b3f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3f5:	eb e9                	jmp    c001b3e0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b3f7:	58                   	pop    eax
c001b3f8:	5b                   	pop    ebx
c001b3f9:	5e                   	pop    esi
c001b3fa:	c3                   	ret    
c001b3fb:	90                   	nop

c001b3fc <Device::setName(char const*)>:
c001b3fc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b404:	e9 47 52 fe ff       	jmp    c0000650 <strcpy>
c001b409:	90                   	nop

c001b40a <Device::Device(char const*)>:
c001b40a:	83 ec 1c             	sub    esp,0x1c
c001b40d:	ba 5c 1e 03 c0       	mov    edx,0xc0031e5c
c001b412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b416:	89 10                	mov    DWORD PTR [eax],edx
c001b418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b42a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b438:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b446:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b450:	83 ec 08             	sub    esp,0x8
c001b453:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45b:	e8 9c ff ff ff       	call   c001b3fc <Device::setName(char const*)>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b46b:	83 ec 0c             	sub    esp,0xc
c001b46e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b472:	e8 64 af ff ff       	call   c00163db <malloc>
c001b477:	83 c4 10             	add    esp,0x10
c001b47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b48b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b495:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b49b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4b6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b4bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4c1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b4c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4cc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4da:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b4e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b500:	90                   	nop
c001b501:	83 c4 1c             	add    esp,0x1c
c001b504:	c3                   	ret    
c001b505:	90                   	nop

c001b506 <Device::getName()>:
c001b506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b50a:	05 d0 00 00 00       	add    eax,0xd0
c001b50f:	c3                   	ret    

c001b510 <Device::closeAll()>:
c001b510:	53                   	push   ebx
c001b511:	83 ec 08             	sub    esp,0x8
c001b514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b518:	53                   	push   ebx
c001b519:	e8 e8 ff ff ff       	call   c001b506 <Device::getName()>
c001b51e:	52                   	push   edx
c001b51f:	50                   	push   eax
c001b520:	68 48 1e 03 c0       	push   0xc0031e48
c001b525:	e8 e8 dc ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001b52a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b52c:	6a 00                	push   0x0
c001b52e:	6a 00                	push   0x0
c001b530:	6a 00                	push   0x0
c001b532:	53                   	push   ebx
c001b533:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b536:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b53c:	83 c4 20             	add    esp,0x20
c001b53f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b542:	74 12                	je     c001b556 <Device::closeAll()+0x46>
c001b544:	83 ec 0c             	sub    esp,0xc
c001b547:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b54a:	e8 c1 ff ff ff       	call   c001b510 <Device::closeAll()>
c001b54f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b551:	83 c4 10             	add    esp,0x10
c001b554:	eb e9                	jmp    c001b53f <Device::closeAll()+0x2f>
c001b556:	83 c4 08             	add    esp,0x8
c001b559:	5b                   	pop    ebx
c001b55a:	c3                   	ret    
c001b55b:	90                   	nop

c001b55c <DriverlessDevice::DriverlessDevice(char const*)>:
c001b55c:	83 ec 0c             	sub    esp,0xc
c001b55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b563:	83 ec 08             	sub    esp,0x8
c001b566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b56a:	50                   	push   eax
c001b56b:	e8 9a fe ff ff       	call   c001b40a <Device::Device(char const*)>
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	ba 88 1e 03 c0       	mov    edx,0xc0031e88
c001b578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57c:	89 10                	mov    DWORD PTR [eax],edx
c001b57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b582:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b58c:	90                   	nop
c001b58d:	83 c4 0c             	add    esp,0xc
c001b590:	c3                   	ret    
c001b591:	90                   	nop

c001b592 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b592:	57                   	push   edi
c001b593:	56                   	push   esi
c001b594:	53                   	push   ebx
c001b595:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b599:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b59d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5a1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b5a7:	75 0c                	jne    c001b5b5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b5a9:	52                   	push   edx
c001b5aa:	52                   	push   edx
c001b5ab:	53                   	push   ebx
c001b5ac:	56                   	push   esi
c001b5ad:	e8 f0 34 01 00       	call   c002eaa2 <LinkedList<Device>::addElement(Device*)>
c001b5b2:	83 c4 10             	add    esp,0x10
c001b5b5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5be:	74 12                	je     c001b5d2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b5c0:	50                   	push   eax
c001b5c1:	57                   	push   edi
c001b5c2:	56                   	push   esi
c001b5c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5c6:	e8 c7 ff ff ff       	call   c001b592 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5cd:	83 c4 10             	add    esp,0x10
c001b5d0:	eb e9                	jmp    c001b5bb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b5d2:	5b                   	pop    ebx
c001b5d3:	5e                   	pop    esi
c001b5d4:	5f                   	pop    edi
c001b5d5:	c3                   	ret    

c001b5d6 <getDevicesOfType(DeviceType)>:
c001b5d6:	53                   	push   ebx
c001b5d7:	83 ec 14             	sub    esp,0x14
c001b5da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5de:	53                   	push   ebx
c001b5df:	e8 9a 35 01 00       	call   c002eb7e <LinkedList<Device>::LinkedList()>
c001b5e4:	83 c4 0c             	add    esp,0xc
c001b5e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5eb:	53                   	push   ebx
c001b5ec:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b5f2:	e8 9b ff ff ff       	call   c001b592 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5f7:	83 c4 18             	add    esp,0x18
c001b5fa:	89 d8                	mov    eax,ebx
c001b5fc:	5b                   	pop    ebx
c001b5fd:	c2 04 00             	ret    0x4

c001b600 <HardDiskController::HardDiskController(char const*)>:
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b607:	83 ec 08             	sub    esp,0x8
c001b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b60e:	50                   	push   eax
c001b60f:	e8 f6 fd ff ff       	call   c001b40a <Device::Device(char const*)>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	ba b4 1e 03 c0       	mov    edx,0xc0031eb4
c001b61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b620:	89 10                	mov    DWORD PTR [eax],edx
c001b622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b626:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b630:	90                   	nop
c001b631:	83 c4 0c             	add    esp,0xc
c001b634:	c3                   	ret    
c001b635:	90                   	nop
c001b636:	66 90                	xchg   ax,ax

c001b638 <HardDiskController::~HardDiskController()>:
c001b638:	83 ec 0c             	sub    esp,0xc
c001b63b:	ba b4 1e 03 c0       	mov    edx,0xc0031eb4
c001b640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b644:	89 10                	mov    DWORD PTR [eax],edx
c001b646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64a:	83 ec 0c             	sub    esp,0xc
c001b64d:	50                   	push   eax
c001b64e:	e8 57 fb ff ff       	call   c001b1aa <Device::~Device()>
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	90                   	nop
c001b657:	83 c4 0c             	add    esp,0xc
c001b65a:	c3                   	ret    
c001b65b:	90                   	nop

c001b65c <HardDiskController::~HardDiskController()>:
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	83 ec 0c             	sub    esp,0xc
c001b662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b666:	e8 cd ff ff ff       	call   c001b638 <HardDiskController::~HardDiskController()>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	83 ec 08             	sub    esp,0x8
c001b671:	68 58 01 00 00       	push   0x158
c001b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b67a:	e8 95 da ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	83 c4 0c             	add    esp,0xc
c001b685:	c3                   	ret    

c001b686 <PhysicalDisk::eject()>:
c001b686:	83 c8 ff             	or     eax,0xffffffff
c001b689:	c3                   	ret    

c001b68a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b691:	83 ec 08             	sub    esp,0x8
c001b694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b698:	50                   	push   eax
c001b699:	e8 6c fd ff ff       	call   c001b40a <Device::Device(char const*)>
c001b69e:	83 c4 10             	add    esp,0x10
c001b6a1:	ba e0 1e 03 c0       	mov    edx,0xc0031ee0
c001b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6aa:	89 10                	mov    DWORD PTR [eax],edx
c001b6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6bb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b6ec:	90                   	nop
c001b6ed:	83 c4 0c             	add    esp,0xc
c001b6f0:	c3                   	ret    
c001b6f1:	90                   	nop

c001b6f2 <PhysicalDisk::startCache()>:
c001b6f2:	56                   	push   esi
c001b6f3:	53                   	push   ebx
c001b6f4:	83 ec 10             	sub    esp,0x10
c001b6f7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6fb:	6a 44                	push   0x44
c001b6fd:	e8 d9 ac ff ff       	call   c00163db <malloc>
c001b702:	89 c6                	mov    esi,eax
c001b704:	58                   	pop    eax
c001b705:	5a                   	pop    edx
c001b706:	53                   	push   ebx
c001b707:	56                   	push   esi
c001b708:	e8 77 17 00 00       	call   c001ce84 <VCache::VCache(PhysicalDisk*)>
c001b70d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b713:	83 c4 14             	add    esp,0x14
c001b716:	5b                   	pop    ebx
c001b717:	5e                   	pop    esi
c001b718:	c3                   	ret    
c001b719:	90                   	nop

c001b71a <PhysicalDisk::~PhysicalDisk()>:
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	ba e0 1e 03 c0       	mov    edx,0xc0031ee0
c001b722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b726:	89 10                	mov    DWORD PTR [eax],edx
c001b728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72c:	83 ec 0c             	sub    esp,0xc
c001b72f:	50                   	push   eax
c001b730:	e8 75 fa ff ff       	call   c001b1aa <Device::~Device()>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	90                   	nop
c001b739:	83 c4 0c             	add    esp,0xc
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <PhysicalDisk::~PhysicalDisk()>:
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	83 ec 0c             	sub    esp,0xc
c001b744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b748:	e8 cd ff ff ff       	call   c001b71a <PhysicalDisk::~PhysicalDisk()>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	68 6c 01 00 00       	push   0x16c
c001b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b75c:	e8 b3 d9 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	83 c4 0c             	add    esp,0xc
c001b767:	c3                   	ret    

c001b768 <int_handler>:
c001b768:	55                   	push   ebp
c001b769:	57                   	push   edi
c001b76a:	56                   	push   esi
c001b76b:	53                   	push   ebx
c001b76c:	83 ec 0c             	sub    esp,0xc
c001b76f:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b776:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b77a:	74 0b                	je     c001b787 <int_handler+0x1f>
c001b77c:	fa                   	cli    
c001b77d:	f4                   	hlt    
c001b77e:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b785:	75 f5                	jne    c001b77c <int_handler+0x14>
c001b787:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b78a:	8d 46 e0             	lea    eax,[esi-0x20]
c001b78d:	83 f8 17             	cmp    eax,0x17
c001b790:	76 40                	jbe    c001b7d2 <int_handler+0x6a>
c001b792:	c1 e6 04             	shl    esi,0x4
c001b795:	31 db                	xor    ebx,ebx
c001b797:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b79d:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b7a3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7a7:	85 c0                	test   eax,eax
c001b7a9:	74 13                	je     c001b7be <int_handler+0x56>
c001b7ab:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7af:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7b2:	74 2c                	je     c001b7e0 <int_handler+0x78>
c001b7b4:	83 ec 08             	sub    esp,0x8
c001b7b7:	52                   	push   edx
c001b7b8:	57                   	push   edi
c001b7b9:	ff d0                	call   eax
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	83 c3 01             	add    ebx,0x1
c001b7c1:	83 fb 04             	cmp    ebx,0x4
c001b7c4:	75 dd                	jne    c001b7a3 <int_handler+0x3b>
c001b7c6:	83 c4 0c             	add    esp,0xc
c001b7c9:	31 c0                	xor    eax,eax
c001b7cb:	5b                   	pop    ebx
c001b7cc:	31 d2                	xor    edx,edx
c001b7ce:	5e                   	pop    esi
c001b7cf:	5f                   	pop    edi
c001b7d0:	5d                   	pop    ebp
c001b7d1:	c3                   	ret    
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	50                   	push   eax
c001b7d6:	e8 d3 b9 00 00       	call   c00271ae <HalEndOfInterrupt(int)>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	eb b2                	jmp    c001b792 <int_handler+0x2a>
c001b7e0:	83 ec 08             	sub    esp,0x8
c001b7e3:	52                   	push   edx
c001b7e4:	57                   	push   edi
c001b7e5:	ff d0                	call   eax
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	83 c4 0c             	add    esp,0xc
c001b7ed:	5b                   	pop    ebx
c001b7ee:	5e                   	pop    esi
c001b7ef:	5f                   	pop    edi
c001b7f0:	5d                   	pop    ebp
c001b7f1:	c3                   	ret    

c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b7f2:	56                   	push   esi
c001b7f3:	31 c0                	xor    eax,eax
c001b7f5:	53                   	push   ebx
c001b7f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b7fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7fe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b802:	89 ca                	mov    edx,ecx
c001b804:	c1 e2 04             	shl    edx,0x4
c001b807:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b80f:	74 17                	je     c001b828 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b811:	83 c0 01             	add    eax,0x1
c001b814:	83 f8 04             	cmp    eax,0x4
c001b817:	75 ee                	jne    c001b807 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b819:	c7 44 24 0c 10 1f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031f10
c001b821:	5b                   	pop    ebx
c001b822:	5e                   	pop    esi
c001b823:	e9 72 49 00 00       	jmp    c002019a <KePanic(char const*)>
c001b828:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b82b:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b832:	5b                   	pop    ebx
c001b833:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b83a:	5e                   	pop    esi
c001b83b:	c3                   	ret    

c001b83c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b83c:	55                   	push   ebp
c001b83d:	57                   	push   edi
c001b83e:	56                   	push   esi
c001b83f:	53                   	push   ebx
c001b840:	83 ec 0c             	sub    esp,0xc
c001b843:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b849:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b84d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b851:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b858:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b85b:	74 57                	je     c001b8b4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b85d:	84 c0                	test   al,al
c001b85f:	89 c7                	mov    edi,eax
c001b861:	74 1d                	je     c001b880 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b863:	83 fe 0f             	cmp    esi,0xf
c001b866:	0f 8f d9 00 00 00    	jg     c001b945 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001b86c:	0f b6 b6 48 3b 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc4b8]
c001b873:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b87b:	d1 ef                	shr    edi,1
c001b87d:	83 e7 01             	and    edi,0x1
c001b880:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b885:	83 ec 08             	sub    esp,0x8
c001b888:	31 db                	xor    ebx,ebx
c001b88a:	50                   	push   eax
c001b88b:	68 1d 1f 03 c0       	push   0xc0031f1d
c001b890:	e8 7d d9 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001b895:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b89a:	83 c4 10             	add    esp,0x10
c001b89d:	85 c0                	test   eax,eax
c001b89f:	7f 59                	jg     c001b8fa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001b8a1:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b8a4:	83 ec 0c             	sub    esp,0xc
c001b8a7:	68 34 1f 03 c0       	push   0xc0031f34
c001b8ac:	e8 e9 48 00 00       	call   c002019a <KePanic(char const*)>
c001b8b1:	83 c4 10             	add    esp,0x10
c001b8b4:	89 e8                	mov    eax,ebp
c001b8b6:	31 d2                	xor    edx,edx
c001b8b8:	c1 e0 04             	shl    eax,0x4
c001b8bb:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b8c2:	85 c9                	test   ecx,ecx
c001b8c4:	0f 84 92 00 00 00    	je     c001b95c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001b8ca:	83 c2 01             	add    edx,0x1
c001b8cd:	83 fa 04             	cmp    edx,0x4
c001b8d0:	75 e9                	jne    c001b8bb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	68 88 1f 03 c0       	push   0xc0031f88
c001b8da:	e8 bb 48 00 00       	call   c002019a <KePanic(char const*)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8e7:	83 c4 0c             	add    esp,0xc
c001b8ea:	5b                   	pop    ebx
c001b8eb:	5e                   	pop    esi
c001b8ec:	5f                   	pop    edi
c001b8ed:	5d                   	pop    ebp
c001b8ee:	c3                   	ret    
c001b8ef:	83 c3 01             	add    ebx,0x1
c001b8f2:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b8f8:	7e a7                	jle    c001b8a1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001b8fa:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001b901:	83 ec 08             	sub    esp,0x8
c001b904:	56                   	push   esi
c001b905:	55                   	push   ebp
c001b906:	e8 e3 20 01 00       	call   c002d9ee <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	84 c0                	test   al,al
c001b910:	74 dd                	je     c001b8ef <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b912:	89 f8                	mov    eax,edi
c001b914:	83 ec 04             	sub    esp,0x4
c001b917:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b91e:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b921:	0f b6 f8             	movzx  edi,al
c001b924:	57                   	push   edi
c001b925:	89 e8                	mov    eax,ebp
c001b927:	6a 00                	push   0x0
c001b929:	0f b6 c0             	movzx  eax,al
c001b92c:	50                   	push   eax
c001b92d:	89 f0                	mov    eax,esi
c001b92f:	6a 00                	push   0x0
c001b931:	0f b6 c0             	movzx  eax,al
c001b934:	6a 00                	push   0x0
c001b936:	50                   	push   eax
c001b937:	53                   	push   ebx
c001b938:	e8 1d 22 01 00       	call   c002db5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b93d:	83 c4 20             	add    esp,0x20
c001b940:	e9 6f ff ff ff       	jmp    c001b8b4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b945:	83 ec 0c             	sub    esp,0xc
c001b948:	31 ff                	xor    edi,edi
c001b94a:	68 50 1f 03 c0       	push   0xc0031f50
c001b94f:	e8 46 48 00 00       	call   c002019a <KePanic(char const*)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	e9 24 ff ff ff       	jmp    c001b880 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b95c:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b95f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b963:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b96a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b96e:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b975:	83 c4 0c             	add    esp,0xc
c001b978:	89 f0                	mov    eax,esi
c001b97a:	5b                   	pop    ebx
c001b97b:	5e                   	pop    esi
c001b97c:	5f                   	pop    edi
c001b97d:	5d                   	pop    ebp
c001b97e:	c3                   	ret    

c001b97f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b97f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b983:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b987:	c1 e0 04             	shl    eax,0x4
c001b98a:	8d 50 10             	lea    edx,[eax+0x10]
c001b98d:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b993:	74 08                	je     c001b99d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b995:	83 c0 04             	add    eax,0x4
c001b998:	39 d0                	cmp    eax,edx
c001b99a:	75 f1                	jne    c001b98d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b99c:	c3                   	ret    
c001b99d:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9a7:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9b1:	eb e2                	jmp    c001b995 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9b3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9b3:	56                   	push   esi
c001b9b4:	53                   	push   ebx
c001b9b5:	83 ec 04             	sub    esp,0x4
c001b9b8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b9c5:	74 0e                	je     c001b9d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001b9c7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b9cc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b9d3:	75 34                	jne    c001ba09 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001b9d5:	8d 43 20             	lea    eax,[ebx+0x20]
c001b9d8:	c1 e0 04             	shl    eax,0x4
c001b9db:	8d 50 10             	lea    edx,[eax+0x10]
c001b9de:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001b9e4:	74 0d                	je     c001b9f3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001b9e6:	83 c0 04             	add    eax,0x4
c001b9e9:	39 d0                	cmp    eax,edx
c001b9eb:	75 f1                	jne    c001b9de <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001b9ed:	83 c4 04             	add    esp,0x4
c001b9f0:	5b                   	pop    ebx
c001b9f1:	5e                   	pop    esi
c001b9f2:	c3                   	ret    
c001b9f3:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9fd:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba07:	eb dd                	jmp    c001b9e6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001ba09:	83 fb 0f             	cmp    ebx,0xf
c001ba0c:	7f 09                	jg     c001ba17 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001ba0e:	0f b6 9b 48 3b 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc4b8]
c001ba15:	eb be                	jmp    c001b9d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001ba17:	83 ec 0c             	sub    esp,0xc
c001ba1a:	68 41 1f 03 c0       	push   0xc0031f41
c001ba1f:	e8 76 47 00 00       	call   c002019a <KePanic(char const*)>
c001ba24:	83 c4 10             	add    esp,0x10
c001ba27:	eb ac                	jmp    c001b9d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001ba29 <setupINTS()>:
c001ba29:	31 c0                	xor    eax,eax
c001ba2b:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba35:	83 c0 10             	add    eax,0x10
c001ba38:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001ba42:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001ba4c:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001ba56:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001ba60:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001ba6a:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001ba74:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001ba7e:	3d 00 10 00 00       	cmp    eax,0x1000
c001ba83:	75 a6                	jne    c001ba2b <setupINTS()+0x2>
c001ba85:	c3                   	ret    

c001ba86 <convertLegacyIRQNumber(int)>:
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001ba8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba93:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001ba9a:	74 0c                	je     c001baa8 <convertLegacyIRQNumber(int)+0x22>
c001ba9c:	83 f8 0f             	cmp    eax,0xf
c001ba9f:	7f 0b                	jg     c001baac <convertLegacyIRQNumber(int)+0x26>
c001baa1:	0f b6 80 48 3b 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc4b8]
c001baa8:	83 c4 0c             	add    esp,0xc
c001baab:	c3                   	ret    
c001baac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	68 50 1f 03 c0       	push   0xc0031f50
c001bab8:	e8 dd 46 00 00       	call   c002019a <KePanic(char const*)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac4:	83 c4 0c             	add    esp,0xc
c001bac7:	c3                   	ret    

c001bac8 <startGUI(void*)>:
c001bac8:	55                   	push   ebp
c001bac9:	89 e5                	mov    ebp,esp
c001bacb:	53                   	push   ebx
c001bacc:	83 ec 04             	sub    esp,0x4
c001bacf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bad4:	83 e8 01             	sub    eax,0x1
c001bad7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001badc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bae1:	85 c0                	test   eax,eax
c001bae3:	75 01                	jne    c001bae6 <startGUI(void*)+0x1e>
c001bae5:	fb                   	sti    
c001bae6:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001baec:	83 ec 08             	sub    esp,0x8
c001baef:	6a 01                	push   0x1
c001baf1:	68 ad 1f 03 c0       	push   0xc0031fad
c001baf6:	e8 08 8c 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	83 ec 08             	sub    esp,0x8
c001bb01:	53                   	push   ebx
c001bb02:	50                   	push   eax
c001bb03:	e8 5c 8e 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb11:	83 ec 08             	sub    esp,0x8
c001bb14:	6a 01                	push   0x1
c001bb16:	68 c7 1f 03 c0       	push   0xc0031fc7
c001bb1b:	e8 e3 8b 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	83 ec 08             	sub    esp,0x8
c001bb26:	53                   	push   ebx
c001bb27:	50                   	push   eax
c001bb28:	e8 37 8e 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	eb fe                	jmp    c001bb30 <startGUI(void*)+0x68>

c001bb32 <startGUIVESA(void*)>:
c001bb32:	55                   	push   ebp
c001bb33:	89 e5                	mov    ebp,esp
c001bb35:	53                   	push   ebx
c001bb36:	83 ec 04             	sub    esp,0x4
c001bb39:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb3e:	83 e8 01             	sub    eax,0x1
c001bb41:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb46:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb4b:	85 c0                	test   eax,eax
c001bb4d:	75 01                	jne    c001bb50 <startGUIVESA(void*)+0x1e>
c001bb4f:	fb                   	sti    
c001bb50:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb56:	83 ec 08             	sub    esp,0x8
c001bb59:	6a 01                	push   0x1
c001bb5b:	68 e5 1f 03 c0       	push   0xc0031fe5
c001bb60:	e8 9e 8b 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001bb65:	83 c4 10             	add    esp,0x10
c001bb68:	83 ec 08             	sub    esp,0x8
c001bb6b:	53                   	push   ebx
c001bb6c:	50                   	push   eax
c001bb6d:	e8 f2 8d 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb7b:	83 ec 08             	sub    esp,0x8
c001bb7e:	6a 01                	push   0x1
c001bb80:	68 c7 1f 03 c0       	push   0xc0031fc7
c001bb85:	e8 79 8b 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	83 ec 08             	sub    esp,0x8
c001bb90:	53                   	push   ebx
c001bb91:	50                   	push   eax
c001bb92:	e8 cd 8d 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	eb fe                	jmp    c001bb9a <startGUIVESA(void*)+0x68>

c001bb9c <sendKeyToTerminal(unsigned char)>:
c001bb9c:	55                   	push   ebp
c001bb9d:	89 e5                	mov    ebp,esp
c001bb9f:	83 ec 28             	sub    esp,0x28
c001bba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bba5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bba8:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bbad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bbb1:	83 ec 08             	sub    esp,0x8
c001bbb4:	52                   	push   edx
c001bbb5:	50                   	push   eax
c001bbb6:	e8 09 bb ff ff       	call   c00176c4 <VgaText::receiveKey(unsigned char)>
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbc2:	83 f8 0a             	cmp    eax,0xa
c001bbc5:	74 16                	je     c001bbdd <sendKeyToTerminal(unsigned char)+0x41>
c001bbc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbcb:	83 f8 03             	cmp    eax,0x3
c001bbce:	74 0d                	je     c001bbdd <sendKeyToTerminal(unsigned char)+0x41>
c001bbd0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbd4:	83 f8 1c             	cmp    eax,0x1c
c001bbd7:	0f 85 97 00 00 00    	jne    c001bc74 <sendKeyToTerminal(unsigned char)+0xd8>
c001bbdd:	fa                   	cli    
c001bbde:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbe3:	83 c0 01             	add    eax,0x1
c001bbe6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bbeb:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bbf0:	83 c0 01             	add    eax,0x1
c001bbf3:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bbf8:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bbfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc00:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bc0a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bc0e:	74 1f                	je     c001bc2f <sendKeyToTerminal(unsigned char)+0x93>
c001bc10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bc13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc19:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc1c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc1f:	83 ec 0c             	sub    esp,0xc
c001bc22:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bc25:	e8 56 98 00 00       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c001bc2a:	83 c4 10             	add    esp,0x10
c001bc2d:	eb db                	jmp    c001bc0a <sendKeyToTerminal(unsigned char)+0x6e>
c001bc2f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc34:	83 e8 01             	sub    eax,0x1
c001bc37:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc3c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc41:	85 c0                	test   eax,eax
c001bc43:	75 18                	jne    c001bc5d <sendKeyToTerminal(unsigned char)+0xc1>
c001bc45:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bc4a:	85 c0                	test   eax,eax
c001bc4c:	74 0f                	je     c001bc5d <sendKeyToTerminal(unsigned char)+0xc1>
c001bc4e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc58:	e8 37 95 00 00       	call   c0025194 <schedule()>
c001bc5d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc62:	83 e8 01             	sub    eax,0x1
c001bc65:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc6a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc6f:	85 c0                	test   eax,eax
c001bc71:	75 01                	jne    c001bc74 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc73:	fb                   	sti    
c001bc74:	90                   	nop
c001bc75:	c9                   	leave  
c001bc76:	c3                   	ret    

c001bc77 <sendKeyboardToken(KeyboardToken)>:
c001bc77:	55                   	push   ebp
c001bc78:	89 e5                	mov    ebp,esp
c001bc7a:	83 ec 18             	sub    esp,0x18
c001bc7d:	e8 68 45 00 00       	call   c00201ea <KeUserIOReceived()>
c001bc82:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc88:	0f b7 c0             	movzx  eax,ax
c001bc8b:	83 f2 01             	xor    edx,0x1
c001bc8e:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bc94:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	74 24                	je     c001bcc1 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bc9d:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bca3:	83 ec 04             	sub    esp,0x4
c001bca6:	68 40 ef 03 c0       	push   0xc003ef40
c001bcab:	83 ec 08             	sub    esp,0x8
c001bcae:	89 e0                	mov    eax,esp
c001bcb0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bcb3:	89 08                	mov    DWORD PTR [eax],ecx
c001bcb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bcb8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bcbc:	ff d2                	call   edx
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bcc5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bcc8:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bccd:	0f b6 d2             	movzx  edx,dl
c001bcd0:	0f b6 c0             	movzx  eax,al
c001bcd3:	39 c2                	cmp    edx,eax
c001bcd5:	74 1c                	je     c001bcf3 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bcd7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bcda:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bcdf:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bce4:	0f b6 c0             	movzx  eax,al
c001bce7:	83 ec 0c             	sub    esp,0xc
c001bcea:	50                   	push   eax
c001bceb:	e8 30 b1 ff ff       	call   c0016e20 <setTerminalScrollLock(bool)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bcf6:	0f b6 c0             	movzx  eax,al
c001bcf9:	85 c0                	test   eax,eax
c001bcfb:	0f 84 da 00 00 00    	je     c001bddb <sendKeyboardToken(KeyboardToken)+0x164>
c001bd01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd04:	0f b7 c0             	movzx  eax,ax
c001bd07:	3d 18 03 00 00       	cmp    eax,0x318
c001bd0c:	75 06                	jne    c001bd14 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bd0e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bd14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd17:	0f b7 c0             	movzx  eax,ax
c001bd1a:	3d 19 03 00 00       	cmp    eax,0x319
c001bd1f:	75 06                	jne    c001bd27 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bd21:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bd27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd2a:	0f b7 c0             	movzx  eax,ax
c001bd2d:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd32:	75 06                	jne    c001bd3a <sendKeyboardToken(KeyboardToken)+0xc3>
c001bd34:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bd3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd3d:	0f b7 c0             	movzx  eax,ax
c001bd40:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd45:	75 06                	jne    c001bd4d <sendKeyboardToken(KeyboardToken)+0xd6>
c001bd47:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd50:	0f b7 c0             	movzx  eax,ax
c001bd53:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd58:	75 06                	jne    c001bd60 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd5a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd63:	0f b7 c0             	movzx  eax,ax
c001bd66:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd6b:	75 06                	jne    c001bd73 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd6d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd76:	0f b7 c0             	movzx  eax,ax
c001bd79:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bd7e:	75 06                	jne    c001bd86 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bd80:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bd86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd89:	0f b7 c0             	movzx  eax,ax
c001bd8c:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bd91:	75 06                	jne    c001bd99 <sendKeyboardToken(KeyboardToken)+0x122>
c001bd93:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd9c:	0f b7 c0             	movzx  eax,ax
c001bd9f:	3d 20 03 00 00       	cmp    eax,0x320
c001bda4:	75 06                	jne    c001bdac <sendKeyboardToken(KeyboardToken)+0x135>
c001bda6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bdac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdaf:	0f b7 c0             	movzx  eax,ax
c001bdb2:	3d 21 03 00 00       	cmp    eax,0x321
c001bdb7:	75 06                	jne    c001bdbf <sendKeyboardToken(KeyboardToken)+0x148>
c001bdb9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bdbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc2:	0f b7 c0             	movzx  eax,ax
c001bdc5:	3d 22 03 00 00       	cmp    eax,0x322
c001bdca:	0f 85 f1 00 00 00    	jne    c001bec1 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdd0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bdd6:	e9 e6 00 00 00       	jmp    c001bec1 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdde:	0f b7 c0             	movzx  eax,ax
c001bde1:	3d 18 03 00 00       	cmp    eax,0x318
c001bde6:	75 0a                	jne    c001bdf2 <sendKeyboardToken(KeyboardToken)+0x17b>
c001bde8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bdee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf5:	0f b7 c0             	movzx  eax,ax
c001bdf8:	3d 19 03 00 00       	cmp    eax,0x319
c001bdfd:	75 0a                	jne    c001be09 <sendKeyboardToken(KeyboardToken)+0x192>
c001bdff:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001be05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0c:	0f b7 c0             	movzx  eax,ax
c001be0f:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be14:	75 0a                	jne    c001be20 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001be16:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001be1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be23:	0f b7 c0             	movzx  eax,ax
c001be26:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be2b:	75 0a                	jne    c001be37 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001be2d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001be33:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be3a:	0f b7 c0             	movzx  eax,ax
c001be3d:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be42:	75 0a                	jne    c001be4e <sendKeyboardToken(KeyboardToken)+0x1d7>
c001be44:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001be4a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be51:	0f b7 c0             	movzx  eax,ax
c001be54:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be59:	75 0a                	jne    c001be65 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be5b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be61:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be68:	0f b7 c0             	movzx  eax,ax
c001be6b:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be70:	75 0a                	jne    c001be7c <sendKeyboardToken(KeyboardToken)+0x205>
c001be72:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001be78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be7f:	0f b7 c0             	movzx  eax,ax
c001be82:	3d 1f 03 00 00       	cmp    eax,0x31f
c001be87:	75 0a                	jne    c001be93 <sendKeyboardToken(KeyboardToken)+0x21c>
c001be89:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001be8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be96:	0f b7 c0             	movzx  eax,ax
c001be99:	3d 20 03 00 00       	cmp    eax,0x320
c001be9e:	75 0a                	jne    c001beaa <sendKeyboardToken(KeyboardToken)+0x233>
c001bea0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bea6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bead:	0f b7 c0             	movzx  eax,ax
c001beb0:	3d 21 03 00 00       	cmp    eax,0x321
c001beb5:	75 0a                	jne    c001bec1 <sendKeyboardToken(KeyboardToken)+0x24a>
c001beb7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bebd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec4:	0f b7 c0             	movzx  eax,ax
c001bec7:	3d 00 02 00 00       	cmp    eax,0x200
c001becc:	75 2f                	jne    c001befd <sendKeyboardToken(KeyboardToken)+0x286>
c001bece:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bed3:	83 f0 01             	xor    eax,0x1
c001bed6:	0f b6 c0             	movzx  eax,al
c001bed9:	85 c0                	test   eax,eax
c001bedb:	74 20                	je     c001befd <sendKeyboardToken(KeyboardToken)+0x286>
c001bedd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bee2:	6a 01                	push   0x1
c001bee4:	6a 00                	push   0x0
c001bee6:	68 c8 ba 01 c0       	push   0xc001bac8
c001beeb:	50                   	push   eax
c001beec:	e8 57 90 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c001bef1:	83 c4 10             	add    esp,0x10
c001bef4:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001befb:	eb 3a                	jmp    c001bf37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001befd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf00:	0f b7 c0             	movzx  eax,ax
c001bf03:	3d 01 02 00 00       	cmp    eax,0x201
c001bf08:	75 2d                	jne    c001bf37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf0a:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf0f:	83 f0 01             	xor    eax,0x1
c001bf12:	0f b6 c0             	movzx  eax,al
c001bf15:	85 c0                	test   eax,eax
c001bf17:	74 1e                	je     c001bf37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf19:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf1e:	6a 01                	push   0x1
c001bf20:	6a 00                	push   0x0
c001bf22:	68 32 bb 01 c0       	push   0xc001bb32
c001bf27:	50                   	push   eax
c001bf28:	e8 1b 90 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf3a:	0f b7 c0             	movzx  eax,ax
c001bf3d:	3d 25 03 00 00       	cmp    eax,0x325
c001bf42:	75 06                	jne    c001bf4a <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bf44:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001bf4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4d:	0f b7 c0             	movzx  eax,ax
c001bf50:	3d 24 03 00 00       	cmp    eax,0x324
c001bf55:	75 06                	jne    c001bf5d <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf57:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf60:	0f b7 c0             	movzx  eax,ax
c001bf63:	3d 23 03 00 00       	cmp    eax,0x323
c001bf68:	75 06                	jne    c001bf70 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf6a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bf70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf73:	0f b7 c0             	movzx  eax,ax
c001bf76:	3d 26 03 00 00       	cmp    eax,0x326
c001bf7b:	75 06                	jne    c001bf83 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bf7d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bf83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf86:	0f b7 c0             	movzx  eax,ax
c001bf89:	3d 27 03 00 00       	cmp    eax,0x327
c001bf8e:	75 06                	jne    c001bf96 <sendKeyboardToken(KeyboardToken)+0x31f>
c001bf90:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bf96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf99:	0f b7 c0             	movzx  eax,ax
c001bf9c:	3d 22 03 00 00       	cmp    eax,0x322
c001bfa1:	75 06                	jne    c001bfa9 <sendKeyboardToken(KeyboardToken)+0x332>
c001bfa3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bfa9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bfad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfb0:	83 f0 01             	xor    eax,0x1
c001bfb3:	0f b6 c0             	movzx  eax,al
c001bfb6:	85 c0                	test   eax,eax
c001bfb8:	74 7c                	je     c001c036 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bfba:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bfbf:	0f b6 c0             	movzx  eax,al
c001bfc2:	85 c0                	test   eax,eax
c001bfc4:	74 43                	je     c001c009 <sendKeyboardToken(KeyboardToken)+0x392>
c001bfc6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bfce:	85 c0                	test   eax,eax
c001bfd0:	74 2b                	je     c001bffd <sendKeyboardToken(KeyboardToken)+0x386>
c001bfd2:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bfd8:	89 d0                	mov    eax,edx
c001bfda:	c1 e0 02             	shl    eax,0x2
c001bfdd:	01 d0                	add    eax,edx
c001bfdf:	d1 e0                	shl    eax,1
c001bfe1:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bfe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfe9:	0f b7 c0             	movzx  eax,ax
c001bfec:	8d 50 d0             	lea    edx,[eax-0x30]
c001bfef:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bff4:	01 d0                	add    eax,edx
c001bff6:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bffb:	eb 71                	jmp    c001c06e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bffd:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c007:	eb 65                	jmp    c001c06e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c009:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c00e:	85 c0                	test   eax,eax
c001c010:	74 18                	je     c001c02a <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c012:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c017:	0f b6 c0             	movzx  eax,al
c001c01a:	83 ec 0c             	sub    esp,0xc
c001c01d:	50                   	push   eax
c001c01e:	e8 79 fb ff ff       	call   c001bb9c <sendKeyToTerminal(unsigned char)>
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c02a:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c034:	eb 38                	jmp    c001c06e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c039:	0f b7 c0             	movzx  eax,ax
c001c03c:	3d 01 01 00 00       	cmp    eax,0x101
c001c041:	75 2b                	jne    c001c06e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c043:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c048:	85 c0                	test   eax,eax
c001c04a:	74 18                	je     c001c064 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c04c:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c051:	0f b6 c0             	movzx  eax,al
c001c054:	83 ec 0c             	sub    esp,0xc
c001c057:	50                   	push   eax
c001c058:	e8 3f fb ff ff       	call   c001bb9c <sendKeyToTerminal(unsigned char)>
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c064:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c06e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c071:	83 f0 01             	xor    eax,0x1
c001c074:	0f b6 c0             	movzx  eax,al
c001c077:	85 c0                	test   eax,eax
c001c079:	74 5a                	je     c001c0d5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c07b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c07e:	83 f0 01             	xor    eax,0x1
c001c081:	0f b6 c0             	movzx  eax,al
c001c084:	85 c0                	test   eax,eax
c001c086:	74 4d                	je     c001c0d5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c088:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c08d:	83 f0 01             	xor    eax,0x1
c001c090:	0f b6 c0             	movzx  eax,al
c001c093:	85 c0                	test   eax,eax
c001c095:	74 3e                	je     c001c0d5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c09a:	0f b7 c0             	movzx  eax,ax
c001c09d:	83 f8 1f             	cmp    eax,0x1f
c001c0a0:	76 0b                	jbe    c001c0ad <sendKeyboardToken(KeyboardToken)+0x436>
c001c0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a5:	0f b7 c0             	movzx  eax,ax
c001c0a8:	83 f8 7e             	cmp    eax,0x7e
c001c0ab:	76 16                	jbe    c001c0c3 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b0:	0f b7 c0             	movzx  eax,ax
c001c0b3:	83 f8 0a             	cmp    eax,0xa
c001c0b6:	74 0b                	je     c001c0c3 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0bb:	0f b7 c0             	movzx  eax,ax
c001c0be:	83 f8 08             	cmp    eax,0x8
c001c0c1:	75 12                	jne    c001c0d5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c6:	0f b6 c0             	movzx  eax,al
c001c0c9:	83 ec 0c             	sub    esp,0xc
c001c0cc:	50                   	push   eax
c001c0cd:	e8 ca fa ff ff       	call   c001bb9c <sendKeyToTerminal(unsigned char)>
c001c0d2:	83 c4 10             	add    esp,0x10
c001c0d5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c0d8:	83 f0 01             	xor    eax,0x1
c001c0db:	0f b6 c0             	movzx  eax,al
c001c0de:	85 c0                	test   eax,eax
c001c0e0:	74 5d                	je     c001c13f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0e5:	83 f0 01             	xor    eax,0x1
c001c0e8:	0f b6 c0             	movzx  eax,al
c001c0eb:	85 c0                	test   eax,eax
c001c0ed:	74 50                	je     c001c13f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0ef:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0f4:	0f b6 c0             	movzx  eax,al
c001c0f7:	85 c0                	test   eax,eax
c001c0f9:	74 44                	je     c001c13f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0fe:	0f b7 c0             	movzx  eax,ax
c001c101:	83 f8 3f             	cmp    eax,0x3f
c001c104:	76 39                	jbe    c001c13f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c109:	0f b7 c0             	movzx  eax,ax
c001c10c:	83 f8 7f             	cmp    eax,0x7f
c001c10f:	77 2e                	ja     c001c13f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c114:	88 c2                	mov    dl,al
c001c116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c119:	0f b7 c0             	movzx  eax,ax
c001c11c:	83 f8 5f             	cmp    eax,0x5f
c001c11f:	76 04                	jbe    c001c125 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c121:	b0 20                	mov    al,0x20
c001c123:	eb 02                	jmp    c001c127 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c125:	b0 00                	mov    al,0x0
c001c127:	89 d1                	mov    ecx,edx
c001c129:	29 c1                	sub    ecx,eax
c001c12b:	89 c8                	mov    eax,ecx
c001c12d:	83 e8 40             	sub    eax,0x40
c001c130:	0f b6 c0             	movzx  eax,al
c001c133:	83 ec 0c             	sub    esp,0xc
c001c136:	50                   	push   eax
c001c137:	e8 60 fa ff ff       	call   c001bb9c <sendKeyToTerminal(unsigned char)>
c001c13c:	83 c4 10             	add    esp,0x10
c001c13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c142:	0f b7 c0             	movzx  eax,ax
c001c145:	3d 00 03 00 00       	cmp    eax,0x300
c001c14a:	75 12                	jne    c001c15e <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c14c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c14f:	83 f0 01             	xor    eax,0x1
c001c152:	0f b6 c0             	movzx  eax,al
c001c155:	85 c0                	test   eax,eax
c001c157:	74 05                	je     c001c15e <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c159:	e8 c3 ac ff ff       	call   c0016e21 <doTerminalCycle()>
c001c15e:	90                   	nop
c001c15f:	c9                   	leave  
c001c160:	c3                   	ret    

c001c161 <clearInternalKeybuffer(VgaText*)>:
c001c161:	55                   	push   ebp
c001c162:	89 e5                	mov    ebp,esp
c001c164:	83 ec 08             	sub    esp,0x8
c001c167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c16a:	05 02 01 00 00       	add    eax,0x102
c001c16f:	83 ec 0c             	sub    esp,0xc
c001c172:	50                   	push   eax
c001c173:	e8 08 44 fe ff       	call   c0000580 <strlen>
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c17e:	81 c2 02 01 00 00    	add    edx,0x102
c001c184:	83 ec 04             	sub    esp,0x4
c001c187:	50                   	push   eax
c001c188:	6a 00                	push   0x0
c001c18a:	52                   	push   edx
c001c18b:	e8 60 43 fe ff       	call   c00004f0 <memset>
c001c190:	83 c4 10             	add    esp,0x10
c001c193:	90                   	nop
c001c194:	c9                   	leave  
c001c195:	c3                   	ret    

c001c196 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c196:	55                   	push   ebp
c001c197:	89 e5                	mov    ebp,esp
c001c199:	83 ec 18             	sub    esp,0x18
c001c19c:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	74 2a                	je     c001c1cf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c1a5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c1ab:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c1b1:	83 ec 04             	sub    esp,0x4
c001c1b4:	68 40 ef 03 c0       	push   0xc003ef40
c001c1b9:	83 ec 08             	sub    esp,0x8
c001c1bc:	89 e0                	mov    eax,esp
c001c1be:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c1c1:	89 08                	mov    DWORD PTR [eax],ecx
c001c1c3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c1c6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c1ca:	ff d2                	call   edx
c001c1cc:	83 c4 10             	add    esp,0x10
c001c1cf:	fb                   	sti    
c001c1d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c1d7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c1db:	0f 84 0d 01 00 00    	je     c001c2ee <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c1ea:	0f be c0             	movsx  eax,al
c001c1ed:	85 c0                	test   eax,eax
c001c1ef:	75 2c                	jne    c001c21d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c1f1:	fa                   	cli    
c001c1f2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c1f7:	83 c0 01             	add    eax,0x1
c001c1fa:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c1ff:	e8 90 8f 00 00       	call   c0025194 <schedule()>
c001c204:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c209:	83 e8 01             	sub    eax,0x1
c001c20c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c211:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c216:	85 c0                	test   eax,eax
c001c218:	75 c7                	jne    c001c1e1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c21a:	fb                   	sti    
c001c21b:	eb c4                	jmp    c001c1e1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c21d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c220:	8d 50 01             	lea    edx,[eax+0x1]
c001c223:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c226:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c229:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c22f:	88 10                	mov    BYTE PTR [eax],dl
c001c231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c234:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c23a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c23d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c241:	83 f8 03             	cmp    eax,0x3
c001c244:	75 1e                	jne    c001c264 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c246:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c24b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c24d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c250:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c256:	83 ec 08             	sub    esp,0x8
c001c259:	6a 02                	push   0x2
c001c25b:	50                   	push   eax
c001c25c:	e8 eb 47 00 00       	call   c0020a4c <KeRaiseSignal(SigHandlerBlock*, int)>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c268:	83 f8 1c             	cmp    eax,0x1c
c001c26b:	75 1e                	jne    c001c28b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c26d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c272:	8b 00                	mov    eax,DWORD PTR [eax]
c001c274:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c277:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c27d:	83 ec 08             	sub    esp,0x8
c001c280:	6a 09                	push   0x9
c001c282:	50                   	push   eax
c001c283:	e8 c4 47 00 00       	call   c0020a4c <KeRaiseSignal(SigHandlerBlock*, int)>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c28e:	05 02 01 00 00       	add    eax,0x102
c001c293:	83 ec 0c             	sub    esp,0xc
c001c296:	50                   	push   eax
c001c297:	e8 e4 42 fe ff       	call   c0000580 <strlen>
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2a2:	81 c2 02 01 00 00    	add    edx,0x102
c001c2a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c2ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2ae:	81 c2 02 01 00 00    	add    edx,0x102
c001c2b4:	83 ec 04             	sub    esp,0x4
c001c2b7:	50                   	push   eax
c001c2b8:	51                   	push   ecx
c001c2b9:	52                   	push   edx
c001c2ba:	e8 11 41 fe ff       	call   c00003d0 <memmove>
c001c2bf:	83 c4 10             	add    esp,0x10
c001c2c2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c2c6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c2ca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2ce:	83 f8 0a             	cmp    eax,0xa
c001c2d1:	74 16                	je     c001c2e9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2d3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2d7:	83 f8 03             	cmp    eax,0x3
c001c2da:	74 0d                	je     c001c2e9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2dc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2e0:	83 f8 1c             	cmp    eax,0x1c
c001c2e3:	0f 85 ee fe ff ff    	jne    c001c1d7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c2e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2ec:	eb 03                	jmp    c001c2f1 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c2ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2f1:	c9                   	leave  
c001c2f2:	c3                   	ret    
c001c2f3:	90                   	nop

c001c2f4 <Keyboard::Keyboard(char const*)>:
c001c2f4:	83 ec 0c             	sub    esp,0xc
c001c2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fb:	83 ec 08             	sub    esp,0x8
c001c2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c302:	50                   	push   eax
c001c303:	e8 02 f1 ff ff       	call   c001b40a <Device::Device(char const*)>
c001c308:	83 c4 10             	add    esp,0x10
c001c30b:	ba 08 20 03 c0       	mov    edx,0xc0032008
c001c310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c314:	89 10                	mov    DWORD PTR [eax],edx
c001c316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c324:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c32b:	90                   	nop
c001c32c:	83 c4 0c             	add    esp,0xc
c001c32f:	c3                   	ret    

c001c330 <Keyboard::~Keyboard()>:
c001c330:	83 ec 0c             	sub    esp,0xc
c001c333:	ba 08 20 03 c0       	mov    edx,0xc0032008
c001c338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33c:	89 10                	mov    DWORD PTR [eax],edx
c001c33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c342:	83 ec 0c             	sub    esp,0xc
c001c345:	50                   	push   eax
c001c346:	e8 5f ee ff ff       	call   c001b1aa <Device::~Device()>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	90                   	nop
c001c34f:	83 c4 0c             	add    esp,0xc
c001c352:	c3                   	ret    
c001c353:	90                   	nop

c001c354 <Keyboard::~Keyboard()>:
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	83 ec 0c             	sub    esp,0xc
c001c35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35e:	e8 cd ff ff ff       	call   c001c330 <Keyboard::~Keyboard()>
c001c363:	83 c4 10             	add    esp,0x10
c001c366:	83 ec 08             	sub    esp,0x8
c001c369:	68 5c 01 00 00       	push   0x15c
c001c36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c372:	e8 9d cd ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	83 c4 0c             	add    esp,0xc
c001c37d:	c3                   	ret    

c001c37e <LogicalDisk::close(int, int, void*)>:
c001c37e:	83 c8 ff             	or     eax,0xffffffff
c001c381:	c3                   	ret    

c001c382 <LogicalDisk::~LogicalDisk()>:
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	ba 80 20 03 c0       	mov    edx,0xc0032080
c001c38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38e:	89 10                	mov    DWORD PTR [eax],edx
c001c390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c394:	83 ec 0c             	sub    esp,0xc
c001c397:	50                   	push   eax
c001c398:	e8 0d ee ff ff       	call   c001b1aa <Device::~Device()>
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	90                   	nop
c001c3a1:	83 c4 0c             	add    esp,0xc
c001c3a4:	c3                   	ret    
c001c3a5:	90                   	nop

c001c3a6 <LogicalDisk::~LogicalDisk()>:
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	83 ec 0c             	sub    esp,0xc
c001c3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3b0:	e8 cd ff ff ff       	call   c001c382 <LogicalDisk::~LogicalDisk()>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	83 ec 08             	sub    esp,0x8
c001c3bb:	68 78 01 00 00       	push   0x178
c001c3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c4:	e8 4b cd ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001c3c9:	83 c4 10             	add    esp,0x10
c001c3cc:	83 c4 0c             	add    esp,0xc
c001c3cf:	c3                   	ret    

c001c3d0 <LogicalDisk::open(int, int, void*)>:
c001c3d0:	83 ec 18             	sub    esp,0x18
c001c3d3:	68 34 20 03 c0       	push   0xc0032034
c001c3d8:	e8 bd 3d 00 00       	call   c002019a <KePanic(char const*)>
c001c3dd:	83 c8 ff             	or     eax,0xffffffff
c001c3e0:	83 c4 1c             	add    esp,0x1c
c001c3e3:	c3                   	ret    

c001c3e4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c3e4:	53                   	push   ebx
c001c3e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3f1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c3f7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c3fd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c403:	77 10                	ja     c001c415 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c405:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c40b:	89 d3                	mov    ebx,edx
c001c40d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c413:	72 05                	jb     c001c41a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c415:	83 c8 ff             	or     eax,0xffffffff
c001c418:	89 c2                	mov    edx,eax
c001c41a:	5b                   	pop    ebx
c001c41b:	c3                   	ret    

c001c41c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c41c:	56                   	push   esi
c001c41d:	83 c8 ff             	or     eax,0xffffffff
c001c420:	53                   	push   ebx
c001c421:	89 c2                	mov    edx,eax
c001c423:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c427:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c42b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c42f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c435:	77 27                	ja     c001c45e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c437:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c43d:	89 d8                	mov    eax,ebx
c001c43f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c445:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c44a:	89 c2                	mov    edx,eax
c001c44c:	73 10                	jae    c001c45e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c44e:	89 c8                	mov    eax,ecx
c001c450:	89 da                	mov    edx,ebx
c001c452:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c458:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c45e:	5b                   	pop    ebx
c001c45f:	5e                   	pop    esi
c001c460:	c3                   	ret    
c001c461:	90                   	nop

c001c462 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c462:	83 ec 1c             	sub    esp,0x1c
c001c465:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c46d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c475:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c479:	89 04 24             	mov    DWORD PTR [esp],eax
c001c47c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c480:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c48f:	50                   	push   eax
c001c490:	e8 75 ef ff ff       	call   c001b40a <Device::Device(char const*)>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	ba 80 20 03 c0       	mov    edx,0xc0032080
c001c49d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a1:	89 10                	mov    DWORD PTR [eax],edx
c001c4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4bd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c4d2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4de:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c4e4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c4ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c4f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4f5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c4fb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c505:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c509:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c50f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c513:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c51d:	90                   	nop
c001c51e:	83 c4 1c             	add    esp,0x1c
c001c521:	c3                   	ret    

c001c522 <LogicalDisk::assignDriveLetter()>:
c001c522:	55                   	push   ebp
c001c523:	57                   	push   edi
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	83 ec 14             	sub    esp,0x14
c001c529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c52d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c533:	b0 41                	mov    al,0x41
c001c535:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c53b:	84 d2                	test   dl,dl
c001c53d:	75 02                	jne    c001c541 <LogicalDisk::assignDriveLetter()+0x1f>
c001c53f:	b0 43                	mov    al,0x43
c001c541:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c547:	0f b6 ca             	movzx  ecx,dl
c001c54a:	0f be e8             	movsx  ebp,al
c001c54d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c551:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c555:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c55b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c55f:	3c 43                	cmp    al,0x43
c001c561:	75 10                	jne    c001c573 <LogicalDisk::assignDriveLetter()+0x51>
c001c563:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c56a:	75 5a                	jne    c001c5c6 <LogicalDisk::assignDriveLetter()+0xa4>
c001c56c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c571:	75 53                	jne    c001c5c6 <LogicalDisk::assignDriveLetter()+0xa4>
c001c573:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c576:	ba 01 00 00 00       	mov    edx,0x1
c001c57b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c57e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c581:	d3 e2                	shl    edx,cl
c001c583:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c587:	89 d7                	mov    edi,edx
c001c589:	89 d6                	mov    esi,edx
c001c58b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c58f:	c1 ff 1f             	sar    edi,0x1f
c001c592:	21 f9                	and    ecx,edi
c001c594:	09 d1                	or     ecx,edx
c001c596:	75 2e                	jne    c001c5c6 <LogicalDisk::assignDriveLetter()+0xa4>
c001c598:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c59c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5a0:	09 f2                	or     edx,esi
c001c5a2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5a5:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c5ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5af:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c5b5:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c5bc:	09 fa                	or     edx,edi
c001c5be:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c5c4:	eb 0d                	jmp    c001c5d3 <LogicalDisk::assignDriveLetter()+0xb1>
c001c5c6:	8d 50 01             	lea    edx,[eax+0x1]
c001c5c9:	45                   	inc    ebp
c001c5ca:	80 fa 5b             	cmp    dl,0x5b
c001c5cd:	88 d0                	mov    al,dl
c001c5cf:	75 8e                	jne    c001c55f <LogicalDisk::assignDriveLetter()+0x3d>
c001c5d1:	31 c0                	xor    eax,eax
c001c5d3:	83 c4 14             	add    esp,0x14
c001c5d6:	5b                   	pop    ebx
c001c5d7:	5e                   	pop    esi
c001c5d8:	5f                   	pop    edi
c001c5d9:	5d                   	pop    ebp
c001c5da:	c3                   	ret    
c001c5db:	90                   	nop

c001c5dc <LogicalDisk::mount()>:
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	53                   	push   ebx
c001c5df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5e3:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c5e9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c5f3:	85 db                	test   ebx,ebx
c001c5f5:	74 27                	je     c001c61e <LogicalDisk::mount()+0x42>
c001c5f7:	51                   	push   ecx
c001c5f8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c5ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c601:	83 e8 41             	sub    eax,0x41
c001c604:	50                   	push   eax
c001c605:	56                   	push   esi
c001c606:	53                   	push   ebx
c001c607:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	84 c0                	test   al,al
c001c60f:	74 08                	je     c001c619 <LogicalDisk::mount()+0x3d>
c001c611:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c617:	eb 07                	jmp    c001c620 <LogicalDisk::mount()+0x44>
c001c619:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c61c:	eb d5                	jmp    c001c5f3 <LogicalDisk::mount()+0x17>
c001c61e:	31 c0                	xor    eax,eax
c001c620:	5a                   	pop    edx
c001c621:	5b                   	pop    ebx
c001c622:	5e                   	pop    esi
c001c623:	c3                   	ret    

c001c624 <LogicalDisk::unmount()>:
c001c624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c628:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c632:	c3                   	ret    
c001c633:	90                   	nop

c001c634 <LogicalDisk::eject()>:
c001c634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c638:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c63e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c644:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c647:	90                   	nop

c001c648 <LogicalDisk::unassignDriveLetter()>:
c001c648:	57                   	push   edi
c001c649:	56                   	push   esi
c001c64a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c64e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c655:	85 c9                	test   ecx,ecx
c001c657:	75 0f                	jne    c001c668 <LogicalDisk::unassignDriveLetter()+0x20>
c001c659:	c7 44 24 0c 58 20 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032058
c001c661:	5e                   	pop    esi
c001c662:	5f                   	pop    edi
c001c663:	e9 32 3b 00 00       	jmp    c002019a <KePanic(char const*)>
c001c668:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c66f:	83 e9 41             	sub    ecx,0x41
c001c672:	b8 01 00 00 00       	mov    eax,0x1
c001c677:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c682:	d3 e0                	shl    eax,cl
c001c684:	89 c7                	mov    edi,eax
c001c686:	f7 d0                	not    eax
c001c688:	c1 ff 1f             	sar    edi,0x1f
c001c68b:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c691:	89 fe                	mov    esi,edi
c001c693:	f7 d6                	not    esi
c001c695:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c69b:	5e                   	pop    esi
c001c69c:	5f                   	pop    edi
c001c69d:	c3                   	ret    

c001c69e <LogicalDisk::read(unsigned long long, int, void*)>:
c001c69e:	57                   	push   edi
c001c69f:	56                   	push   esi
c001c6a0:	53                   	push   ebx
c001c6a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6b7:	77 41                	ja     c001c6fa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c6b9:	99                   	cdq    
c001c6ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6c0:	01 c8                	add    eax,ecx
c001c6c2:	11 da                	adc    edx,ebx
c001c6c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6ca:	19 d7                	sbb    edi,edx
c001c6cc:	72 33                	jb     c001c701 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c6ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c6e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c6e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6f2:	5b                   	pop    ebx
c001c6f3:	5e                   	pop    esi
c001c6f4:	5f                   	pop    edi
c001c6f5:	e9 c6 0a 00 00       	jmp    c001d1c0 <VCache::read(unsigned long long, int, void*)>
c001c6fa:	b8 05 00 00 00       	mov    eax,0x5
c001c6ff:	eb 05                	jmp    c001c706 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c701:	b8 07 00 00 00       	mov    eax,0x7
c001c706:	5b                   	pop    ebx
c001c707:	5e                   	pop    esi
c001c708:	5f                   	pop    edi
c001c709:	c3                   	ret    

c001c70a <LogicalDisk::write(unsigned long long, int, void*)>:
c001c70a:	57                   	push   edi
c001c70b:	56                   	push   esi
c001c70c:	53                   	push   ebx
c001c70d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c711:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c715:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c71d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c723:	77 41                	ja     c001c766 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c725:	99                   	cdq    
c001c726:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c72c:	01 c8                	add    eax,ecx
c001c72e:	11 da                	adc    edx,ebx
c001c730:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c736:	19 d7                	sbb    edi,edx
c001c738:	72 33                	jb     c001c76d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c73a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c740:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c746:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c74a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c74e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c754:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c75e:	5b                   	pop    ebx
c001c75f:	5e                   	pop    esi
c001c760:	5f                   	pop    edi
c001c761:	e9 6a 09 00 00       	jmp    c001d0d0 <VCache::write(unsigned long long, int, void*)>
c001c766:	b8 05 00 00 00       	mov    eax,0x5
c001c76b:	eb 05                	jmp    c001c772 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c76d:	b8 07 00 00 00       	mov    eax,0x7
c001c772:	5b                   	pop    ebx
c001c773:	5e                   	pop    esi
c001c774:	5f                   	pop    edi
c001c775:	c3                   	ret    
c001c776:	66 90                	xchg   ax,ax

c001c778 <Mouse::Mouse(char const*)>:
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77f:	83 ec 08             	sub    esp,0x8
c001c782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c786:	50                   	push   eax
c001c787:	e8 7e ec ff ff       	call   c001b40a <Device::Device(char const*)>
c001c78c:	83 c4 10             	add    esp,0x10
c001c78f:	ba ac 20 03 c0       	mov    edx,0xc00320ac
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	89 10                	mov    DWORD PTR [eax],edx
c001c79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c7a8:	90                   	nop
c001c7a9:	83 c4 0c             	add    esp,0xc
c001c7ac:	c3                   	ret    
c001c7ad:	90                   	nop
c001c7ae:	66 90                	xchg   ax,ax

c001c7b0 <Mouse::~Mouse()>:
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	ba ac 20 03 c0       	mov    edx,0xc00320ac
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	89 10                	mov    DWORD PTR [eax],edx
c001c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c2:	83 ec 0c             	sub    esp,0xc
c001c7c5:	50                   	push   eax
c001c7c6:	e8 df e9 ff ff       	call   c001b1aa <Device::~Device()>
c001c7cb:	83 c4 10             	add    esp,0x10
c001c7ce:	90                   	nop
c001c7cf:	83 c4 0c             	add    esp,0xc
c001c7d2:	c3                   	ret    
c001c7d3:	90                   	nop

c001c7d4 <Mouse::~Mouse()>:
c001c7d4:	83 ec 0c             	sub    esp,0xc
c001c7d7:	83 ec 0c             	sub    esp,0xc
c001c7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7de:	e8 cd ff ff ff       	call   c001c7b0 <Mouse::~Mouse()>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	83 ec 08             	sub    esp,0x8
c001c7e9:	68 58 01 00 00       	push   0x158
c001c7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f2:	e8 1d c9 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	83 c4 0c             	add    esp,0xc
c001c7fd:	c3                   	ret    

c001c7fe <NIC::getMAC()>:
c001c7fe:	31 c0                	xor    eax,eax
c001c800:	31 d2                	xor    edx,edx
c001c802:	c3                   	ret    
c001c803:	90                   	nop

c001c804 <NIC::write(int, unsigned char*, int*)>:
c001c804:	b8 01 00 00 00       	mov    eax,0x1
c001c809:	c3                   	ret    

c001c80a <NIC::NIC(char const*)>:
c001c80a:	83 ec 0c             	sub    esp,0xc
c001c80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c811:	83 ec 08             	sub    esp,0x8
c001c814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c818:	50                   	push   eax
c001c819:	e8 ec eb ff ff       	call   c001b40a <Device::Device(char const*)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	ba d8 20 03 c0       	mov    edx,0xc00320d8
c001c826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82a:	89 10                	mov    DWORD PTR [eax],edx
c001c82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c830:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c83a:	90                   	nop
c001c83b:	83 c4 0c             	add    esp,0xc
c001c83e:	c3                   	ret    
c001c83f:	90                   	nop

c001c840 <NIC::~NIC()>:
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	ba d8 20 03 c0       	mov    edx,0xc00320d8
c001c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84c:	89 10                	mov    DWORD PTR [eax],edx
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	83 ec 0c             	sub    esp,0xc
c001c855:	50                   	push   eax
c001c856:	e8 4f e9 ff ff       	call   c001b1aa <Device::~Device()>
c001c85b:	83 c4 10             	add    esp,0x10
c001c85e:	90                   	nop
c001c85f:	83 c4 0c             	add    esp,0xc
c001c862:	c3                   	ret    
c001c863:	90                   	nop

c001c864 <NIC::~NIC()>:
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	83 ec 0c             	sub    esp,0xc
c001c86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c86e:	e8 cd ff ff ff       	call   c001c840 <NIC::~NIC()>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	83 ec 08             	sub    esp,0x8
c001c879:	68 58 01 00 00       	push   0x158
c001c87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c882:	e8 8d c8 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	83 c4 0c             	add    esp,0xc
c001c88d:	c3                   	ret    

c001c88e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c88e:	55                   	push   ebp
c001c88f:	57                   	push   edi
c001c890:	56                   	push   esi
c001c891:	53                   	push   ebx
c001c892:	81 ec 28 01 00 00    	sub    esp,0x128
c001c898:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c89f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001c8a6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001c8ad:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001c8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8bc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8c3:	e8 3e ec ff ff       	call   c001b506 <Device::getName()>
c001c8c8:	5a                   	pop    edx
c001c8c9:	59                   	pop    ecx
c001c8ca:	50                   	push   eax
c001c8cb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c8cf:	55                   	push   ebp
c001c8d0:	e8 7b 3d fe ff       	call   c0000650 <strcpy>
c001c8d5:	5b                   	pop    ebx
c001c8d6:	58                   	pop    eax
c001c8d7:	68 04 21 03 c0       	push   0xc0032104
c001c8dc:	55                   	push   ebp
c001c8dd:	e8 8e 3f fe ff       	call   c0000870 <strcat>
c001c8e2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c8e9:	e8 ed 9a ff ff       	call   c00163db <malloc>
c001c8ee:	83 c4 0c             	add    esp,0xc
c001c8f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8f9:	89 c3                	mov    ebx,eax
c001c8fb:	57                   	push   edi
c001c8fc:	56                   	push   esi
c001c8fd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c904:	55                   	push   ebp
c001c905:	50                   	push   eax
c001c906:	e8 57 fb ff ff       	call   c001c462 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c90b:	83 c4 14             	add    esp,0x14
c001c90e:	53                   	push   ebx
c001c90f:	e8 0e fc ff ff       	call   c001c522 <LogicalDisk::assignDriveLetter()>
c001c914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c917:	e8 c0 fc ff ff       	call   c001c5dc <LogicalDisk::mount()>
c001c91c:	58                   	pop    eax
c001c91d:	5a                   	pop    edx
c001c91e:	53                   	push   ebx
c001c91f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c926:	e8 7d e9 ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c001c92b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c931:	5b                   	pop    ebx
c001c932:	5e                   	pop    esi
c001c933:	5f                   	pop    edi
c001c934:	5d                   	pop    ebp
c001c935:	c3                   	ret    

c001c936 <createPartitionsForDisk(PhysicalDisk*)>:
c001c936:	55                   	push   ebp
c001c937:	57                   	push   edi
c001c938:	56                   	push   esi
c001c939:	53                   	push   ebx
c001c93a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c940:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c947:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c94d:	3d 00 02 00 00       	cmp    eax,0x200
c001c952:	74 27                	je     c001c97b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c954:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c95a:	83 ec 10             	sub    esp,0x10
c001c95d:	99                   	cdq    
c001c95e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c964:	52                   	push   edx
c001c965:	50                   	push   eax
c001c966:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c96a:	c1 e6 0a             	shl    esi,0xa
c001c96d:	89 fd                	mov    ebp,edi
c001c96f:	55                   	push   ebp
c001c970:	56                   	push   esi
c001c971:	e8 7a 1c 01 00       	call   c002e5f0 <__udivdi3>
c001c976:	e9 b9 00 00 00       	jmp    c001ca34 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c97b:	83 ec 0c             	sub    esp,0xc
c001c97e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c980:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c984:	56                   	push   esi
c001c985:	6a 01                	push   0x1
c001c987:	6a 00                	push   0x0
c001c989:	6a 00                	push   0x0
c001c98b:	53                   	push   ebx
c001c98c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c98f:	83 c4 20             	add    esp,0x20
c001c992:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c99a:	75 0a                	jne    c001c9a6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c99c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c9a4:	74 2c                	je     c001c9d2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c9a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9ac:	83 ec 10             	sub    esp,0x10
c001c9af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9bb:	89 f7                	mov    edi,esi
c001c9bd:	c1 ff 1f             	sar    edi,0x1f
c001c9c0:	57                   	push   edi
c001c9c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9c5:	56                   	push   esi
c001c9c6:	c1 e0 0a             	shl    eax,0xa
c001c9c9:	52                   	push   edx
c001c9ca:	50                   	push   eax
c001c9cb:	e8 20 1c 01 00       	call   c002e5f0 <__udivdi3>
c001c9d0:	eb 62                	jmp    c001ca34 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c9d2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c9d9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c9e0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c9e7:	89 cf                	mov    edi,ecx
c001c9e9:	83 e2 7f             	and    edx,0x7f
c001c9ec:	83 e7 7f             	and    edi,0x7f
c001c9ef:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c9f2:	83 e0 7f             	and    eax,0x7f
c001c9f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c001c9f8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001c9ff:	83 e0 7f             	and    eax,0x7f
c001ca02:	01 d0                	add    eax,edx
c001ca04:	84 c0                	test   al,al
c001ca06:	89 c5                	mov    ebp,eax
c001ca08:	74 41                	je     c001ca4b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ca0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca10:	83 ec 10             	sub    esp,0x10
c001ca13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca1f:	89 f7                	mov    edi,esi
c001ca21:	c1 ff 1f             	sar    edi,0x1f
c001ca24:	57                   	push   edi
c001ca25:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca29:	56                   	push   esi
c001ca2a:	c1 e0 0a             	shl    eax,0xa
c001ca2d:	52                   	push   edx
c001ca2e:	50                   	push   eax
c001ca2f:	e8 bc 1b 01 00       	call   c002e5f0 <__udivdi3>
c001ca34:	83 c4 14             	add    esp,0x14
c001ca37:	52                   	push   edx
c001ca38:	50                   	push   eax
c001ca39:	6a 00                	push   0x0
c001ca3b:	6a 00                	push   0x0
c001ca3d:	53                   	push   ebx
c001ca3e:	e8 4b fe ff ff       	call   c001c88e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ca43:	83 c4 20             	add    esp,0x20
c001ca46:	e9 73 01 00 00       	jmp    c001cbbe <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ca4b:	89 f0                	mov    eax,esi
c001ca4d:	31 c9                	xor    ecx,ecx
c001ca4f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca56:	75 02                	jne    c001ca5a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca58:	89 cd                	mov    ebp,ecx
c001ca5a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ca62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca69:	83 c0 10             	add    eax,0x10
c001ca6c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ca74:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001ca7b:	c1 e2 08             	shl    edx,0x8
c001ca7e:	c1 e6 10             	shl    esi,0x10
c001ca81:	09 f2                	or     edx,esi
c001ca83:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001ca8a:	09 f2                	or     edx,esi
c001ca8c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001ca93:	c1 e6 18             	shl    esi,0x18
c001ca96:	09 f2                	or     edx,esi
c001ca98:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ca9f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001caa3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001caaa:	c1 e6 10             	shl    esi,0x10
c001caad:	c1 e2 08             	shl    edx,0x8
c001cab0:	09 f2                	or     edx,esi
c001cab2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cab9:	09 f2                	or     edx,esi
c001cabb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cac2:	c1 e6 18             	shl    esi,0x18
c001cac5:	09 f2                	or     edx,esi
c001cac7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cacb:	41                   	inc    ecx
c001cacc:	83 f9 04             	cmp    ecx,0x4
c001cacf:	0f 85 7a ff ff ff    	jne    c001ca4f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad9:	83 f0 01             	xor    eax,0x1
c001cadc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cae0:	75 4f                	jne    c001cb31 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cae6:	83 f0 01             	xor    eax,0x1
c001cae9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001caed:	75 42                	jne    c001cb31 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001caef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001caf5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cafd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cb03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb0b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cb11:	89 f7                	mov    edi,esi
c001cb13:	c1 ff 1f             	sar    edi,0x1f
c001cb16:	57                   	push   edi
c001cb17:	56                   	push   esi
c001cb18:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb1c:	52                   	push   edx
c001cb1d:	c1 e0 0a             	shl    eax,0xa
c001cb20:	50                   	push   eax
c001cb21:	e8 ca 1a 01 00       	call   c002e5f0 <__udivdi3>
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb31:	89 e8                	mov    eax,ebp
c001cb33:	0f b6 e8             	movzx  ebp,al
c001cb36:	85 ed                	test   ebp,ebp
c001cb38:	74 50                	je     c001cb8a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cb3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cb42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb4e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb56:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb6a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb6e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb76:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb7a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cb7e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cb82:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cb86:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cb8a:	31 ed                	xor    ebp,ebp
c001cb8c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb90:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb94:	89 f8                	mov    eax,edi
c001cb96:	09 f0                	or     eax,esi
c001cb98:	74 1e                	je     c001cbb8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb9a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cba2:	89 d1                	mov    ecx,edx
c001cba4:	09 c1                	or     ecx,eax
c001cba6:	74 10                	je     c001cbb8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cba8:	83 ec 0c             	sub    esp,0xc
c001cbab:	57                   	push   edi
c001cbac:	56                   	push   esi
c001cbad:	52                   	push   edx
c001cbae:	50                   	push   eax
c001cbaf:	53                   	push   ebx
c001cbb0:	e8 d9 fc ff ff       	call   c001c88e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbb5:	83 c4 20             	add    esp,0x20
c001cbb8:	45                   	inc    ebp
c001cbb9:	83 fd 04             	cmp    ebp,0x4
c001cbbc:	75 ce                	jne    c001cb8c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cbbe:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cbc4:	5b                   	pop    ebx
c001cbc5:	5e                   	pop    esi
c001cbc6:	5f                   	pop    edi
c001cbc7:	5d                   	pop    ebp
c001cbc8:	c3                   	ret    
c001cbc9:	66 90                	xchg   ax,ax
c001cbcb:	90                   	nop

c001cbcc <Serial::Serial(char const*)>:
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd3:	83 ec 08             	sub    esp,0x8
c001cbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbda:	50                   	push   eax
c001cbdb:	e8 2a e8 ff ff       	call   c001b40a <Device::Device(char const*)>
c001cbe0:	83 c4 10             	add    esp,0x10
c001cbe3:	ba 18 21 03 c0       	mov    edx,0xc0032118
c001cbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbec:	89 10                	mov    DWORD PTR [eax],edx
c001cbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cbfc:	90                   	nop
c001cbfd:	83 c4 0c             	add    esp,0xc
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop
c001cc02:	66 90                	xchg   ax,ax

c001cc04 <Serial::~Serial()>:
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	ba 18 21 03 c0       	mov    edx,0xc0032118
c001cc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc10:	89 10                	mov    DWORD PTR [eax],edx
c001cc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	50                   	push   eax
c001cc1a:	e8 8b e5 ff ff       	call   c001b1aa <Device::~Device()>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	90                   	nop
c001cc23:	83 c4 0c             	add    esp,0xc
c001cc26:	c3                   	ret    
c001cc27:	90                   	nop

c001cc28 <Serial::~Serial()>:
c001cc28:	83 ec 0c             	sub    esp,0xc
c001cc2b:	83 ec 0c             	sub    esp,0xc
c001cc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc32:	e8 cd ff ff ff       	call   c001cc04 <Serial::~Serial()>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	83 ec 08             	sub    esp,0x8
c001cc3d:	68 58 01 00 00       	push   0x158
c001cc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc46:	e8 c9 c4 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001cc4b:	83 c4 10             	add    esp,0x10
c001cc4e:	83 c4 0c             	add    esp,0xc
c001cc51:	c3                   	ret    
c001cc52:	66 90                	xchg   ax,ax

c001cc54 <Timer::Timer(char const*)>:
c001cc54:	83 ec 0c             	sub    esp,0xc
c001cc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5b:	83 ec 08             	sub    esp,0x8
c001cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc62:	50                   	push   eax
c001cc63:	e8 a2 e7 ff ff       	call   c001b40a <Device::Device(char const*)>
c001cc68:	83 c4 10             	add    esp,0x10
c001cc6b:	ba 5c 21 03 c0       	mov    edx,0xc003215c
c001cc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc74:	89 10                	mov    DWORD PTR [eax],edx
c001cc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cc84:	90                   	nop
c001cc85:	83 c4 0c             	add    esp,0xc
c001cc88:	c3                   	ret    
c001cc89:	90                   	nop
c001cc8a:	66 90                	xchg   ax,ax

c001cc8c <Timer::~Timer()>:
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	ba 5c 21 03 c0       	mov    edx,0xc003215c
c001cc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc98:	89 10                	mov    DWORD PTR [eax],edx
c001cc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	50                   	push   eax
c001cca2:	e8 03 e5 ff ff       	call   c001b1aa <Device::~Device()>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	90                   	nop
c001ccab:	83 c4 0c             	add    esp,0xc
c001ccae:	c3                   	ret    
c001ccaf:	90                   	nop

c001ccb0 <Timer::~Timer()>:
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 cd ff ff ff       	call   c001cc8c <Timer::~Timer()>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 ec 08             	sub    esp,0x8
c001ccc5:	68 5c 01 00 00       	push   0x15c
c001ccca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccce:	e8 41 c4 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	c3                   	ret    

c001ccda <Timer::read()>:
c001ccda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cce4:	c3                   	ret    

c001cce5 <setupTimer(int)>:
c001cce5:	53                   	push   ebx
c001cce6:	83 ec 14             	sub    esp,0x14
c001cce9:	68 5c 01 00 00       	push   0x15c
c001ccee:	e8 e8 96 ff ff       	call   c00163db <malloc>
c001ccf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccf6:	89 c3                	mov    ebx,eax
c001ccf8:	e8 7b 11 01 00       	call   c002de78 <PIT::PIT()>
c001ccfd:	58                   	pop    eax
c001ccfe:	5a                   	pop    edx
c001ccff:	53                   	push   ebx
c001cd00:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cd06:	e8 9d e5 ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c001cd0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd0d:	6a 00                	push   0x0
c001cd0f:	6a 00                	push   0x0
c001cd11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd15:	53                   	push   ebx
c001cd16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd19:	83 c4 28             	add    esp,0x28
c001cd1c:	89 d8                	mov    eax,ebx
c001cd1e:	5b                   	pop    ebx
c001cd1f:	c3                   	ret    

c001cd20 <timerHandler(unsigned int)>:
c001cd20:	57                   	push   edi
c001cd21:	56                   	push   esi
c001cd22:	53                   	push   ebx
c001cd23:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cd27:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cd2d:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cd34:	0f 84 46 01 00 00    	je     c001ce80 <timerHandler(unsigned int)+0x160>
c001cd3a:	fa                   	cli    
c001cd3b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	68 e0 01 04 c0       	push   0xc00401e0
c001cd49:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd4f:	e8 6c 1e 01 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd54:	83 c4 10             	add    esp,0x10
c001cd57:	84 c0                	test   al,al
c001cd59:	0f 85 a1 00 00 00    	jne    c001ce00 <timerHandler(unsigned int)+0xe0>
c001cd5f:	83 ec 0c             	sub    esp,0xc
c001cd62:	68 e0 01 04 c0       	push   0xc00401e0
c001cd67:	e8 70 1e 01 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	89 c6                	mov    esi,eax
c001cd71:	8d 76 00             	lea    esi,[esi+0x0]
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	68 e0 01 04 c0       	push   0xc00401e0
c001cd7c:	e8 5b 1e 01 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd81:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cd88:	89 c3                	mov    ebx,eax
c001cd8a:	e8 55 1e 01 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cd8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd92:	83 c4 10             	add    esp,0x10
c001cd95:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cd9b:	77 23                	ja     c001cdc0 <timerHandler(unsigned int)+0xa0>
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	53                   	push   ebx
c001cda1:	e8 da 86 00 00       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	39 de                	cmp    esi,ebx
c001cdab:	75 27                	jne    c001cdd4 <timerHandler(unsigned int)+0xb4>
c001cdad:	83 ec 0c             	sub    esp,0xc
c001cdb0:	68 e0 01 04 c0       	push   0xc00401e0
c001cdb5:	e8 22 1e 01 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdba:	89 c6                	mov    esi,eax
c001cdbc:	eb 12                	jmp    c001cdd0 <timerHandler(unsigned int)+0xb0>
c001cdbe:	66 90                	xchg   ax,ax
c001cdc0:	50                   	push   eax
c001cdc1:	50                   	push   eax
c001cdc2:	53                   	push   ebx
c001cdc3:	68 e0 01 04 c0       	push   0xc00401e0
c001cdc8:	e8 d3 1e 01 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	90                   	nop
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	68 e0 01 04 c0       	push   0xc00401e0
c001cddc:	e8 df 1d 01 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	84 c0                	test   al,al
c001cde6:	75 18                	jne    c001ce00 <timerHandler(unsigned int)+0xe0>
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	68 e0 01 04 c0       	push   0xc00401e0
c001cdf0:	e8 e7 1d 01 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	39 f0                	cmp    eax,esi
c001cdfa:	0f 85 74 ff ff ff    	jne    c001cd74 <timerHandler(unsigned int)+0x54>
c001ce00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce05:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ce09:	74 3d                	je     c001ce48 <timerHandler(unsigned int)+0x128>
c001ce0b:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001ce12:	74 34                	je     c001ce48 <timerHandler(unsigned int)+0x128>
c001ce14:	fa                   	cli    
c001ce15:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce1b:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001ce21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce26:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001ce29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce2e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ce31:	77 05                	ja     c001ce38 <timerHandler(unsigned int)+0x118>
c001ce33:	e8 5c 83 00 00       	call   c0025194 <schedule()>
c001ce38:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce3d:	48                   	dec    eax
c001ce3e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce43:	75 03                	jne    c001ce48 <timerHandler(unsigned int)+0x128>
c001ce45:	fb                   	sti    
c001ce46:	66 90                	xchg   ax,ax
c001ce48:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce4d:	48                   	dec    eax
c001ce4e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce53:	75 1b                	jne    c001ce70 <timerHandler(unsigned int)+0x150>
c001ce55:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce5c:	74 12                	je     c001ce70 <timerHandler(unsigned int)+0x150>
c001ce5e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce68:	e8 27 83 00 00       	call   c0025194 <schedule()>
c001ce6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce70:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce75:	48                   	dec    eax
c001ce76:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce7b:	75 03                	jne    c001ce80 <timerHandler(unsigned int)+0x160>
c001ce7d:	fb                   	sti    
c001ce7e:	66 90                	xchg   ax,ax
c001ce80:	5b                   	pop    ebx
c001ce81:	5e                   	pop    esi
c001ce82:	5f                   	pop    edi
c001ce83:	c3                   	ret    

c001ce84 <VCache::VCache(PhysicalDisk*)>:
c001ce84:	53                   	push   ebx
c001ce85:	83 ec 18             	sub    esp,0x18
c001ce88:	ba 8c 21 03 c0       	mov    edx,0xc003218c
c001ce8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce91:	89 10                	mov    DWORD PTR [eax],edx
c001ce93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce97:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001ce9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cead:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ceb4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cebf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cec6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ced8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001ceeb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cefa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefe:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cf02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf06:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf15:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cf1d:	83 ec 0c             	sub    esp,0xc
c001cf20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf24:	e8 b2 94 ff ff       	call   c00163db <malloc>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	89 c3                	mov    ebx,eax
c001cf2e:	83 ec 0c             	sub    esp,0xc
c001cf31:	53                   	push   ebx
c001cf32:	e8 49 32 00 00       	call   c0020180 <Mutex::Mutex()>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cf41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf45:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf50:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf5b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf65:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf6c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cf72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf78:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf7c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cf7f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cf82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf86:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cf94:	05 00 02 00 00       	add    eax,0x200
c001cf99:	c1 e0 03             	shl    eax,0x3
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	50                   	push   eax
c001cfa0:	e8 36 94 ff ff       	call   c00163db <malloc>
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	89 c2                	mov    edx,eax
c001cfaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cfb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cfc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfc8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cfce:	89 d0                	mov    eax,edx
c001cfd0:	c1 e0 02             	shl    eax,0x2
c001cfd3:	01 d0                	add    eax,edx
c001cfd5:	c1 e0 04             	shl    eax,0x4
c001cfd8:	83 ec 0c             	sub    esp,0xc
c001cfdb:	50                   	push   eax
c001cfdc:	e8 fa 93 ff ff       	call   c00163db <malloc>
c001cfe1:	83 c4 10             	add    esp,0x10
c001cfe4:	89 c2                	mov    edx,eax
c001cfe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cfed:	90                   	nop
c001cfee:	83 c4 18             	add    esp,0x18
c001cff1:	5b                   	pop    ebx
c001cff2:	c3                   	ret    
c001cff3:	90                   	nop

c001cff4 <VCache::invalidateReadBuffer()>:
c001cff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cff8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001cffe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d002:	c3                   	ret    
c001d003:	90                   	nop

c001d004 <VCache::writeWriteBuffer()>:
c001d004:	53                   	push   ebx
c001d005:	83 ec 08             	sub    esp,0x8
c001d008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d00c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d010:	74 1e                	je     c001d030 <VCache::writeWriteBuffer()+0x2c>
c001d012:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d015:	83 ec 0c             	sub    esp,0xc
c001d018:	8b 10                	mov    edx,DWORD PTR [eax]
c001d01a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d01d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d020:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d023:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d026:	50                   	push   eax
c001d027:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d02a:	83 c4 20             	add    esp,0x20
c001d02d:	8d 76 00             	lea    esi,[esi+0x0]
c001d030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d037:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d03e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d042:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d049:	83 c4 08             	add    esp,0x8
c001d04c:	5b                   	pop    ebx
c001d04d:	c3                   	ret    
c001d04e:	66 90                	xchg   ax,ax

c001d050 <VCache::~VCache()>:
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	ba 8c 21 03 c0       	mov    edx,0xc003218c
c001d058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05c:	89 10                	mov    DWORD PTR [eax],edx
c001d05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d062:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d065:	0f b6 c0             	movzx  eax,al
c001d068:	85 c0                	test   eax,eax
c001d06a:	74 10                	je     c001d07c <VCache::~VCache()+0x2c>
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d073:	e8 8c ff ff ff       	call   c001d004 <VCache::writeWriteBuffer()>
c001d078:	83 c4 10             	add    esp,0x10
c001d07b:	90                   	nop
c001d07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d080:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d083:	83 ec 0c             	sub    esp,0xc
c001d086:	50                   	push   eax
c001d087:	e8 5f 93 ff ff       	call   c00163eb <free>
c001d08c:	83 c4 10             	add    esp,0x10
c001d08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d093:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d096:	83 ec 0c             	sub    esp,0xc
c001d099:	50                   	push   eax
c001d09a:	e8 4c 93 ff ff       	call   c00163eb <free>
c001d09f:	83 c4 10             	add    esp,0x10
c001d0a2:	90                   	nop
c001d0a3:	83 c4 0c             	add    esp,0xc
c001d0a6:	c3                   	ret    
c001d0a7:	90                   	nop

c001d0a8 <VCache::~VCache()>:
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	83 ec 0c             	sub    esp,0xc
c001d0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b2:	e8 99 ff ff ff       	call   c001d050 <VCache::~VCache()>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	83 ec 08             	sub    esp,0x8
c001d0bd:	6a 44                	push   0x44
c001d0bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c3:	e8 4c c0 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	83 c4 0c             	add    esp,0xc
c001d0ce:	c3                   	ret    
c001d0cf:	90                   	nop

c001d0d0 <VCache::write(unsigned long long, int, void*)>:
c001d0d0:	55                   	push   ebp
c001d0d1:	57                   	push   edi
c001d0d2:	56                   	push   esi
c001d0d3:	53                   	push   ebx
c001d0d4:	83 ec 1c             	sub    esp,0x1c
c001d0d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d0df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d0e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d0e7:	e8 14 7e 00 00       	call   c0024f00 <KeDisablePreemption()>
c001d0ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d0f0:	74 0e                	je     c001d100 <VCache::write(unsigned long long, int, void*)+0x30>
c001d0f2:	83 ec 0c             	sub    esp,0xc
c001d0f5:	53                   	push   ebx
c001d0f6:	e8 f9 fe ff ff       	call   c001cff4 <VCache::invalidateReadBuffer()>
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	66 90                	xchg   ax,ax
c001d100:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d104:	74 5e                	je     c001d164 <VCache::write(unsigned long long, int, void*)+0x94>
c001d106:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d10d:	99                   	cdq    
c001d10e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d111:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d114:	89 c1                	mov    ecx,eax
c001d116:	31 f1                	xor    ecx,esi
c001d118:	89 d0                	mov    eax,edx
c001d11a:	31 f8                	xor    eax,edi
c001d11c:	09 c1                	or     ecx,eax
c001d11e:	75 38                	jne    c001d158 <VCache::write(unsigned long long, int, void*)+0x88>
c001d120:	83 fd 01             	cmp    ebp,0x1
c001d123:	75 33                	jne    c001d158 <VCache::write(unsigned long long, int, void*)+0x88>
c001d125:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d128:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d12c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d130:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d136:	0f af f9             	imul   edi,ecx
c001d139:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d13c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d13e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d141:	40                   	inc    eax
c001d142:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d145:	83 f8 50             	cmp    eax,0x50
c001d148:	75 66                	jne    c001d1b0 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d14a:	83 ec 0c             	sub    esp,0xc
c001d14d:	53                   	push   ebx
c001d14e:	e8 b1 fe ff ff       	call   c001d004 <VCache::writeWriteBuffer()>
c001d153:	83 c4 10             	add    esp,0x10
c001d156:	eb 58                	jmp    c001d1b0 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	53                   	push   ebx
c001d15c:	e8 a3 fe ff ff       	call   c001d004 <VCache::writeWriteBuffer()>
c001d161:	83 c4 10             	add    esp,0x10
c001d164:	83 fd 4f             	cmp    ebp,0x4f
c001d167:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d16a:	7f 20                	jg     c001d18c <VCache::write(unsigned long long, int, void*)+0xbc>
c001d16c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d16f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d173:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d176:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d179:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d17c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d180:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d188:	eb 26                	jmp    c001d1b0 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d18a:	66 90                	xchg   ax,ax
c001d18c:	83 ec 0c             	sub    esp,0xc
c001d18f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d191:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d195:	55                   	push   ebp
c001d196:	57                   	push   edi
c001d197:	56                   	push   esi
c001d198:	50                   	push   eax
c001d199:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d19c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1a0:	83 c4 20             	add    esp,0x20
c001d1a3:	e8 80 7d 00 00       	call   c0024f28 <KeRestorePreemption()>
c001d1a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1ac:	eb 0a                	jmp    c001d1b8 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d1ae:	66 90                	xchg   ax,ax
c001d1b0:	e8 73 7d 00 00       	call   c0024f28 <KeRestorePreemption()>
c001d1b5:	31 c0                	xor    eax,eax
c001d1b7:	90                   	nop
c001d1b8:	83 c4 1c             	add    esp,0x1c
c001d1bb:	5b                   	pop    ebx
c001d1bc:	5e                   	pop    esi
c001d1bd:	5f                   	pop    edi
c001d1be:	5d                   	pop    ebp
c001d1bf:	c3                   	ret    

c001d1c0 <VCache::read(unsigned long long, int, void*)>:
c001d1c0:	55                   	push   ebp
c001d1c1:	57                   	push   edi
c001d1c2:	56                   	push   esi
c001d1c3:	53                   	push   ebx
c001d1c4:	83 ec 1c             	sub    esp,0x1c
c001d1c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d1d3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d1d7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d1db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d1e2:	e8 19 7d 00 00       	call   c0024f00 <KeDisablePreemption()>
c001d1e7:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d1eb:	74 0f                	je     c001d1fc <VCache::read(unsigned long long, int, void*)+0x3c>
c001d1ed:	83 ec 0c             	sub    esp,0xc
c001d1f0:	53                   	push   ebx
c001d1f1:	e8 0e fe ff ff       	call   c001d004 <VCache::writeWriteBuffer()>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1fc:	83 fe 01             	cmp    esi,0x1
c001d1ff:	0f 85 8b 00 00 00    	jne    c001d290 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d205:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d208:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d20f:	75 7f                	jne    c001d290 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d211:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d214:	89 d1                	mov    ecx,edx
c001d216:	f7 d9                	neg    ecx
c001d218:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d21c:	89 cf                	mov    edi,ecx
c001d21e:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d221:	c1 ff 1f             	sar    edi,0x1f
c001d224:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d228:	89 ce                	mov    esi,ecx
c001d22a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d22e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d232:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d236:	89 cf                	mov    edi,ecx
c001d238:	74 32                	je     c001d26c <VCache::read(unsigned long long, int, void*)+0xac>
c001d23a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d23d:	75 2d                	jne    c001d26c <VCache::read(unsigned long long, int, void*)+0xac>
c001d23f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d242:	75 28                	jne    c001d26c <VCache::read(unsigned long long, int, void*)+0xac>
c001d244:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d247:	89 ef                	mov    edi,ebp
c001d249:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d24f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d252:	8d 70 ff             	lea    esi,[eax-0x1]
c001d255:	23 34 24             	and    esi,DWORD PTR [esp]
c001d258:	0f af f1             	imul   esi,ecx
c001d25b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d25e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d260:	e8 c3 7c 00 00       	call   c0024f28 <KeRestorePreemption()>
c001d265:	31 c0                	xor    eax,eax
c001d267:	eb 57                	jmp    c001d2c0 <VCache::read(unsigned long long, int, void*)+0x100>
c001d269:	8d 76 00             	lea    esi,[esi+0x0]
c001d26c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d270:	83 ec 0c             	sub    esp,0xc
c001d273:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d276:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d279:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d27b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d27e:	52                   	push   edx
c001d27f:	57                   	push   edi
c001d280:	56                   	push   esi
c001d281:	50                   	push   eax
c001d282:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d285:	83 c4 20             	add    esp,0x20
c001d288:	85 c0                	test   eax,eax
c001d28a:	75 34                	jne    c001d2c0 <VCache::read(unsigned long long, int, void*)+0x100>
c001d28c:	eb b6                	jmp    c001d244 <VCache::read(unsigned long long, int, void*)+0x84>
c001d28e:	66 90                	xchg   ax,ax
c001d290:	83 ec 0c             	sub    esp,0xc
c001d293:	53                   	push   ebx
c001d294:	e8 5b fd ff ff       	call   c001cff4 <VCache::invalidateReadBuffer()>
c001d299:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d29c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d29e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2a1:	56                   	push   esi
c001d2a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2aa:	50                   	push   eax
c001d2ab:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d2ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2b2:	83 c4 20             	add    esp,0x20
c001d2b5:	e8 6e 7c 00 00       	call   c0024f28 <KeRestorePreemption()>
c001d2ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001d2c0:	83 c4 1c             	add    esp,0x1c
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	5d                   	pop    ebp
c001d2c7:	c3                   	ret    

c001d2c8 <Video::putrect(int, int, int, int, unsigned int)>:
c001d2c8:	55                   	push   ebp
c001d2c9:	57                   	push   edi
c001d2ca:	56                   	push   esi
c001d2cb:	53                   	push   ebx
c001d2cc:	83 ec 1c             	sub    esp,0x1c
c001d2cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2d7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d2db:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d2df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2e7:	01 df                	add    edi,ebx
c001d2e9:	39 fb                	cmp    ebx,edi
c001d2eb:	7d 1f                	jge    c001d30c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d2ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2f1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d2f5:	7d 12                	jge    c001d309 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d2f7:	8b 16                	mov    edx,DWORD PTR [esi]
c001d2f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2fd:	53                   	push   ebx
c001d2fe:	55                   	push   ebp
c001d2ff:	45                   	inc    ebp
c001d300:	56                   	push   esi
c001d301:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d304:	83 c4 10             	add    esp,0x10
c001d307:	eb e8                	jmp    c001d2f1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d309:	43                   	inc    ebx
c001d30a:	eb dd                	jmp    c001d2e9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d30c:	83 c4 1c             	add    esp,0x1c
c001d30f:	5b                   	pop    ebx
c001d310:	5e                   	pop    esi
c001d311:	5f                   	pop    edi
c001d312:	5d                   	pop    ebp
c001d313:	c3                   	ret    

c001d314 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d314:	55                   	push   ebp
c001d315:	57                   	push   edi
c001d316:	31 ff                	xor    edi,edi
c001d318:	56                   	push   esi
c001d319:	53                   	push   ebx
c001d31a:	83 ec 1c             	sub    esp,0x1c
c001d31d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d321:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d325:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d32c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d335:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d339:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d33d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d340:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d344:	01 f9                	add    ecx,edi
c001d346:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d34a:	7d 2f                	jge    c001d37b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d34c:	31 f6                	xor    esi,esi
c001d34e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d352:	01 f2                	add    edx,esi
c001d354:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d358:	7d 1a                	jge    c001d374 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d35a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d35d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d360:	46                   	inc    esi
c001d361:	51                   	push   ecx
c001d362:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d366:	52                   	push   edx
c001d367:	55                   	push   ebp
c001d368:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d36b:	83 c4 10             	add    esp,0x10
c001d36e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d372:	eb da                	jmp    c001d34e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d374:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d378:	47                   	inc    edi
c001d379:	eb c5                	jmp    c001d340 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d37b:	83 c4 1c             	add    esp,0x1c
c001d37e:	5b                   	pop    ebx
c001d37f:	5e                   	pop    esi
c001d380:	5f                   	pop    edi
c001d381:	5d                   	pop    ebp
c001d382:	c3                   	ret    
c001d383:	90                   	nop

c001d384 <Video::blit(unsigned int*, int, int, int, int)>:
c001d384:	55                   	push   ebp
c001d385:	ba 00 00 00 00       	mov    edx,0x0
c001d38a:	57                   	push   edi
c001d38b:	56                   	push   esi
c001d38c:	53                   	push   ebx
c001d38d:	83 ec 1c             	sub    esp,0x1c
c001d390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d394:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d398:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d39c:	85 c0                	test   eax,eax
c001d39e:	0f 49 d0             	cmovns edx,eax
c001d3a1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d3a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d3ac:	89 eb                	mov    ebx,ebp
c001d3ae:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d3b2:	01 ea                	add    edx,ebp
c001d3b4:	39 da                	cmp    edx,ebx
c001d3b6:	7e 54                	jle    c001d40c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d3b8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3be:	7c 4c                	jl     c001d40c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d3c0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d3c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d3cc:	01 c1                	add    ecx,eax
c001d3ce:	39 f9                	cmp    ecx,edi
c001d3d0:	7e 2f                	jle    c001d401 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d3d2:	83 c2 04             	add    edx,0x4
c001d3d5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d3db:	7c 21                	jl     c001d3fe <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d3dd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d3e1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d3e3:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d3e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d3ea:	55                   	push   ebp
c001d3eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d3ef:	56                   	push   esi
c001d3f0:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d3f3:	83 c4 10             	add    esp,0x10
c001d3f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d3fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3fe:	47                   	inc    edi
c001d3ff:	eb c7                	jmp    c001d3c8 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d401:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d405:	43                   	inc    ebx
c001d406:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d40a:	eb a2                	jmp    c001d3ae <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d40c:	83 c4 1c             	add    esp,0x1c
c001d40f:	5b                   	pop    ebx
c001d410:	5e                   	pop    esi
c001d411:	5f                   	pop    edi
c001d412:	5d                   	pop    ebp
c001d413:	c3                   	ret    

c001d414 <Video::clearScreen(unsigned int)>:
c001d414:	57                   	push   edi
c001d415:	56                   	push   esi
c001d416:	53                   	push   ebx
c001d417:	31 db                	xor    ebx,ebx
c001d419:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d41d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d423:	7e 1f                	jle    c001d444 <Video::clearScreen(unsigned int)+0x30>
c001d425:	31 ff                	xor    edi,edi
c001d427:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d42d:	7e 12                	jle    c001d441 <Video::clearScreen(unsigned int)+0x2d>
c001d42f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d435:	53                   	push   ebx
c001d436:	57                   	push   edi
c001d437:	47                   	inc    edi
c001d438:	56                   	push   esi
c001d439:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	eb e6                	jmp    c001d427 <Video::clearScreen(unsigned int)+0x13>
c001d441:	43                   	inc    ebx
c001d442:	eb d9                	jmp    c001d41d <Video::clearScreen(unsigned int)+0x9>
c001d444:	5b                   	pop    ebx
c001d445:	5e                   	pop    esi
c001d446:	5f                   	pop    edi
c001d447:	c3                   	ret    

c001d448 <Video::putpixel(int, int, unsigned int)>:
c001d448:	c7 44 24 04 94 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032194
c001d450:	e9 45 2d 00 00       	jmp    c002019a <KePanic(char const*)>
c001d455:	90                   	nop

c001d456 <Video::readPixelApprox(int, int)>:
c001d456:	83 ec 18             	sub    esp,0x18
c001d459:	68 b5 21 03 c0       	push   0xc00321b5
c001d45e:	e8 37 2d 00 00       	call   c002019a <KePanic(char const*)>
c001d463:	31 c0                	xor    eax,eax
c001d465:	83 c4 1c             	add    esp,0x1c
c001d468:	c3                   	ret    
c001d469:	90                   	nop

c001d46a <Video::Video(char const*)>:
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d471:	83 ec 08             	sub    esp,0x8
c001d474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d478:	50                   	push   eax
c001d479:	e8 8c df ff ff       	call   c001b40a <Device::Device(char const*)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	ba 58 22 03 c0       	mov    edx,0xc0032258
c001d486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48a:	89 10                	mov    DWORD PTR [eax],edx
c001d48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d490:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d49a:	90                   	nop
c001d49b:	83 c4 0c             	add    esp,0xc
c001d49e:	c3                   	ret    
c001d49f:	90                   	nop

c001d4a0 <Video::~Video()>:
c001d4a0:	83 ec 0c             	sub    esp,0xc
c001d4a3:	ba 58 22 03 c0       	mov    edx,0xc0032258
c001d4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ac:	89 10                	mov    DWORD PTR [eax],edx
c001d4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b2:	83 ec 0c             	sub    esp,0xc
c001d4b5:	50                   	push   eax
c001d4b6:	e8 ef dc ff ff       	call   c001b1aa <Device::~Device()>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	90                   	nop
c001d4bf:	83 c4 0c             	add    esp,0xc
c001d4c2:	c3                   	ret    
c001d4c3:	90                   	nop

c001d4c4 <Video::~Video()>:
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	83 ec 0c             	sub    esp,0xc
c001d4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ce:	e8 cd ff ff ff       	call   c001d4a0 <Video::~Video()>
c001d4d3:	83 c4 10             	add    esp,0x10
c001d4d6:	83 ec 08             	sub    esp,0x8
c001d4d9:	68 64 01 00 00       	push   0x164
c001d4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4e2:	e8 2d bc ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	83 c4 0c             	add    esp,0xc
c001d4ed:	c3                   	ret    

c001d4ee <Video::isMonochrome()>:
c001d4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d4f8:	c3                   	ret    
c001d4f9:	90                   	nop

c001d4fa <Video::getWidth()>:
c001d4fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d504:	c3                   	ret    
c001d505:	90                   	nop

c001d506 <Video::getHeight()>:
c001d506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d50a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d510:	c3                   	ret    
c001d511:	90                   	nop

c001d512 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d512:	55                   	push   ebp
c001d513:	57                   	push   edi
c001d514:	56                   	push   esi
c001d515:	53                   	push   ebx
c001d516:	83 ec 2c             	sub    esp,0x2c
c001d519:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d51d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d521:	83 f8 01             	cmp    eax,0x1
c001d524:	19 c9                	sbb    ecx,ecx
c001d526:	31 db                	xor    ebx,ebx
c001d528:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d52c:	89 ce                	mov    esi,ecx
c001d52e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d536:	f7 d6                	not    esi
c001d538:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d53e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d542:	01 d8                	add    eax,ebx
c001d544:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d548:	57                   	push   edi
c001d549:	e8 b8 ff ff ff       	call   c001d506 <Video::getHeight()>
c001d54e:	59                   	pop    ecx
c001d54f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d553:	7e 70                	jle    c001d5c5 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d555:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d559:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d55d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d560:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d564:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d568:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d56f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d573:	89 e8                	mov    eax,ebp
c001d575:	83 c0 20             	add    eax,0x20
c001d578:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d57c:	57                   	push   edi
c001d57d:	e8 78 ff ff ff       	call   c001d4fa <Video::getWidth()>
c001d582:	5a                   	pop    edx
c001d583:	39 c5                	cmp    ebp,eax
c001d585:	7d 34                	jge    c001d5bb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d587:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d58c:	74 05                	je     c001d593 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d58e:	8b 07                	mov    eax,DWORD PTR [edi]
c001d590:	56                   	push   esi
c001d591:	eb 0d                	jmp    c001d5a0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d593:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d598:	74 12                	je     c001d5ac <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d59a:	8b 07                	mov    eax,DWORD PTR [edi]
c001d59c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5a4:	55                   	push   ebp
c001d5a5:	57                   	push   edi
c001d5a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d5b0:	45                   	inc    ebp
c001d5b1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d5b5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d5b9:	75 c1                	jne    c001d57c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d5bb:	43                   	inc    ebx
c001d5bc:	83 fb 20             	cmp    ebx,0x20
c001d5bf:	0f 85 79 ff ff ff    	jne    c001d53e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d5c5:	83 c4 2c             	add    esp,0x2c
c001d5c8:	5b                   	pop    ebx
c001d5c9:	5e                   	pop    esi
c001d5ca:	5f                   	pop    edi
c001d5cb:	5d                   	pop    ebp
c001d5cc:	c3                   	ret    
c001d5cd:	90                   	nop

c001d5ce <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d5ce:	55                   	push   ebp
c001d5cf:	57                   	push   edi
c001d5d0:	56                   	push   esi
c001d5d1:	53                   	push   ebx
c001d5d2:	83 ec 48             	sub    esp,0x48
c001d5d5:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d5d9:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d5dd:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d5e1:	c1 e0 08             	shl    eax,0x8
c001d5e4:	01 d0                	add    eax,edx
c001d5e6:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d5ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d5ee:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d5f2:	c1 e0 08             	shl    eax,0x8
c001d5f5:	01 d0                	add    eax,edx
c001d5f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ff:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d604:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d60c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d613:	50                   	push   eax
c001d614:	e8 c2 8d ff ff       	call   c00163db <malloc>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	85 c0                	test   eax,eax
c001d61e:	89 c5                	mov    ebp,eax
c001d620:	75 10                	jne    c001d632 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	68 e0 21 03 c0       	push   0xc00321e0
c001d62a:	e8 6b 2b 00 00       	call   c002019a <KePanic(char const*)>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	52                   	push   edx
c001d633:	bf 12 00 00 00       	mov    edi,0x12
c001d638:	52                   	push   edx
c001d639:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d63d:	50                   	push   eax
c001d63e:	68 f0 21 03 c0       	push   0xc00321f0
c001d643:	e8 ca bb ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001d648:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d64b:	83 e0 20             	and    eax,0x20
c001d64e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d652:	85 c0                	test   eax,eax
c001d654:	59                   	pop    ecx
c001d655:	0f 94 c0             	sete   al
c001d658:	0f b6 c0             	movzx  eax,al
c001d65b:	5e                   	pop    esi
c001d65c:	50                   	push   eax
c001d65d:	68 fa 21 03 c0       	push   0xc00321fa
c001d662:	e8 ab bb ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001d667:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d66b:	83 c4 10             	add    esp,0x10
c001d66e:	85 c0                	test   eax,eax
c001d670:	89 c2                	mov    edx,eax
c001d672:	74 11                	je     c001d685 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d674:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d678:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d67c:	c1 ff 03             	sar    edi,0x3
c001d67f:	0f af f9             	imul   edi,ecx
c001d682:	83 c7 12             	add    edi,0x12
c001d685:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d68a:	74 07                	je     c001d693 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d68c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d691:	75 12                	jne    c001d6a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d693:	83 ec 0c             	sub    esp,0xc
c001d696:	68 08 22 03 c0       	push   0xc0032208
c001d69b:	e8 72 bb ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001d6a0:	e9 aa 02 00 00       	jmp    c001d94f <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001d6a5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d6a9:	83 f9 02             	cmp    ecx,0x2
c001d6ac:	74 0e                	je     c001d6bc <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001d6ae:	83 f9 0a             	cmp    ecx,0xa
c001d6b1:	0f 84 d1 00 00 00    	je     c001d788 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001d6b7:	e9 7e 02 00 00       	jmp    c001d93a <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001d6bc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6c1:	75 0e                	jne    c001d6d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d6c3:	84 d2                	test   dl,dl
c001d6c5:	75 0a                	jne    c001d6d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d6c7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6ca:	83 e8 18             	sub    eax,0x18
c001d6cd:	a8 f7                	test   al,0xf7
c001d6cf:	74 0d                	je     c001d6de <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001d6d1:	83 ec 0c             	sub    esp,0xc
c001d6d4:	68 1d 22 03 c0       	push   0xc003221d
c001d6d9:	e9 64 02 00 00       	jmp    c001d942 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d6de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6e6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d6eb:	31 c0                	xor    eax,eax
c001d6ed:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d6f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d6f9:	89 c6                	mov    esi,eax
c001d6fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d700:	75 15                	jne    c001d717 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d702:	99                   	cdq    
c001d703:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d707:	85 d2                	test   edx,edx
c001d709:	75 0c                	jne    c001d717 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d70b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001d70f:	29 c6                	sub    esi,eax
c001d711:	4e                   	dec    esi
c001d712:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001d717:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d71b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d723:	75 0c                	jne    c001d731 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001d725:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001d72a:	c1 e2 18             	shl    edx,0x18
c001d72d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d731:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001d736:	8d 46 01             	lea    eax,[esi+0x1]
c001d739:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001d73d:	c1 e1 10             	shl    ecx,0x10
c001d740:	89 ca                	mov    edx,ecx
c001d742:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001d747:	c1 e1 08             	shl    ecx,0x8
c001d74a:	09 d1                	or     ecx,edx
c001d74c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d750:	09 d1                	or     ecx,edx
c001d752:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001d756:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001d75a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d75e:	c1 fa 03             	sar    edx,0x3
c001d761:	01 d7                	add    edi,edx
c001d763:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d767:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001d76b:	7e 04                	jle    c001d771 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001d76d:	89 c6                	mov    esi,eax
c001d76f:	eb 8a                	jmp    c001d6fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001d771:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001d775:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d779:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d77d:	0f 8f 6e ff ff ff    	jg     c001d6f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001d783:	e9 ce 01 00 00       	jmp    c001d956 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d788:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d78d:	75 0e                	jne    c001d79d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d78f:	85 c0                	test   eax,eax
c001d791:	75 0a                	jne    c001d79d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d793:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d796:	83 e8 18             	sub    eax,0x18
c001d799:	a8 f7                	test   al,0xf7
c001d79b:	74 0d                	je     c001d7aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001d79d:	83 ec 0c             	sub    esp,0xc
c001d7a0:	68 2b 22 03 c0       	push   0xc003222b
c001d7a5:	e9 98 01 00 00       	jmp    c001d942 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d7aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d7b2:	31 c9                	xor    ecx,ecx
c001d7b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7bc:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001d7c0:	0f 8d 90 01 00 00    	jge    c001d956 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d7c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7ca:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d7ce:	0f 8e 82 01 00 00    	jle    c001d956 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d7d4:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d7d8:	8d 77 01             	lea    esi,[edi+0x1]
c001d7db:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d7df:	83 fa 7f             	cmp    edx,0x7f
c001d7e2:	89 d0                	mov    eax,edx
c001d7e4:	0f 8e a3 00 00 00    	jle    c001d88d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001d7ea:	83 e0 7f             	and    eax,0x7f
c001d7ed:	31 d2                	xor    edx,edx
c001d7ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7f3:	40                   	inc    eax
c001d7f4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d7f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7fc:	75 08                	jne    c001d806 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001d7fe:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001d803:	c1 e2 18             	shl    edx,0x18
c001d806:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001d80b:	c1 e0 10             	shl    eax,0x10
c001d80e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d812:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001d817:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d81b:	c1 e0 08             	shl    eax,0x8
c001d81e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d822:	09 f8                	or     eax,edi
c001d824:	31 ff                	xor    edi,edi
c001d826:	09 d0                	or     eax,edx
c001d828:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d82c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d831:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d835:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001d83a:	75 1d                	jne    c001d859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d83c:	89 c8                	mov    eax,ecx
c001d83e:	99                   	cdq    
c001d83f:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d843:	85 d2                	test   edx,edx
c001d845:	75 12                	jne    c001d859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d847:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d84b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d84f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d853:	49                   	dec    ecx
c001d854:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d859:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d85d:	8d 51 01             	lea    edx,[ecx+0x1]
c001d860:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001d864:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d868:	8d 47 01             	lea    eax,[edi+0x1]
c001d86b:	7e 06                	jle    c001d873 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001d86d:	89 c7                	mov    edi,eax
c001d86f:	89 d1                	mov    ecx,edx
c001d871:	eb c2                	jmp    c001d835 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001d873:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d877:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d87b:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d87f:	c1 f8 03             	sar    eax,0x3
c001d882:	01 c6                	add    esi,eax
c001d884:	89 d1                	mov    ecx,edx
c001d886:	89 f7                	mov    edi,esi
c001d888:	e9 2f ff ff ff       	jmp    c001d7bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001d88d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d899:	40                   	inc    eax
c001d89a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d89e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d8a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d8a7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d8ac:	75 1d                	jne    c001d8cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d8ae:	89 c8                	mov    eax,ecx
c001d8b0:	99                   	cdq    
c001d8b1:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d8b5:	85 d2                	test   edx,edx
c001d8b7:	75 12                	jne    c001d8cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d8b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8bd:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d8c1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d8c5:	49                   	dec    ecx
c001d8c6:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d8cb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8cf:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d8d7:	75 0c                	jne    c001d8e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001d8d9:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001d8de:	c1 e7 18             	shl    edi,0x18
c001d8e1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d8e5:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d8ea:	8d 51 01             	lea    edx,[ecx+0x1]
c001d8ed:	c1 e0 10             	shl    eax,0x10
c001d8f0:	89 c7                	mov    edi,eax
c001d8f2:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001d8f7:	c1 e0 08             	shl    eax,0x8
c001d8fa:	09 f8                	or     eax,edi
c001d8fc:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d900:	09 f8                	or     eax,edi
c001d902:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d906:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d90a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d90e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d912:	c1 f8 03             	sar    eax,0x3
c001d915:	01 c6                	add    esi,eax
c001d917:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d91b:	40                   	inc    eax
c001d91c:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001d920:	7e 0b                	jle    c001d92d <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001d922:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d926:	89 d1                	mov    ecx,edx
c001d928:	e9 7a ff ff ff       	jmp    c001d8a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001d92d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d931:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d935:	e9 4a ff ff ff       	jmp    c001d884 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001d93a:	50                   	push   eax
c001d93b:	50                   	push   eax
c001d93c:	51                   	push   ecx
c001d93d:	68 3a 22 03 c0       	push   0xc003223a
c001d942:	e8 cb b8 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001d947:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d94a:	e8 9c 8a ff ff       	call   c00163eb <free>
c001d94f:	83 c4 10             	add    esp,0x10
c001d952:	31 ed                	xor    ebp,ebp
c001d954:	eb 14                	jmp    c001d96a <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001d956:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d95a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001d95e:	89 18                	mov    DWORD PTR [eax],ebx
c001d960:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d964:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d968:	89 18                	mov    DWORD PTR [eax],ebx
c001d96a:	83 c4 3c             	add    esp,0x3c
c001d96d:	89 e8                	mov    eax,ebp
c001d96f:	5b                   	pop    ebx
c001d970:	5e                   	pop    esi
c001d971:	5f                   	pop    edi
c001d972:	5d                   	pop    ebp
c001d973:	c3                   	ret    

c001d974 <Video::putTGA(int, int, unsigned char*, int)>:
c001d974:	55                   	push   ebp
c001d975:	57                   	push   edi
c001d976:	56                   	push   esi
c001d977:	53                   	push   ebx
c001d978:	83 ec 28             	sub    esp,0x28
c001d97b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d97f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d983:	50                   	push   eax
c001d984:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d988:	50                   	push   eax
c001d989:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d98d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d991:	55                   	push   ebp
c001d992:	e8 37 fc ff ff       	call   c001d5ce <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d997:	83 c4 20             	add    esp,0x20
c001d99a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d99e:	85 c0                	test   eax,eax
c001d9a0:	74 3b                	je     c001d9dd <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d9a2:	89 c6                	mov    esi,eax
c001d9a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d9ac:	39 d8                	cmp    eax,ebx
c001d9ae:	7e 2d                	jle    c001d9dd <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d9b0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d9b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9bc:	39 f8                	cmp    eax,edi
c001d9be:	7e 1a                	jle    c001d9da <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001d9c0:	83 c6 04             	add    esi,0x4
c001d9c3:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d9c6:	85 c0                	test   eax,eax
c001d9c8:	79 0d                	jns    c001d9d7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001d9ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d9cd:	50                   	push   eax
c001d9ce:	53                   	push   ebx
c001d9cf:	57                   	push   edi
c001d9d0:	55                   	push   ebp
c001d9d1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	47                   	inc    edi
c001d9d8:	eb da                	jmp    c001d9b4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d9da:	43                   	inc    ebx
c001d9db:	eb c7                	jmp    c001d9a4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d9dd:	83 c4 1c             	add    esp,0x1c
c001d9e0:	5b                   	pop    ebx
c001d9e1:	5e                   	pop    esi
c001d9e2:	5f                   	pop    edi
c001d9e3:	5d                   	pop    ebp
c001d9e4:	c3                   	ret    
c001d9e5:	66 90                	xchg   ax,ax
c001d9e7:	90                   	nop

c001d9e8 <ACPI::close(int, int, void*)>:
c001d9e8:	83 ec 1c             	sub    esp,0x1c
c001d9eb:	83 ec 0c             	sub    esp,0xc
c001d9ee:	68 9c 22 03 c0       	push   0xc003229c
c001d9f3:	e8 1a b8 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001d9f8:	83 c4 10             	add    esp,0x10
c001d9fb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001da03:	74 1b                	je     c001da20 <ACPI::close(int, int, void*)+0x38>
c001da05:	83 ec 0c             	sub    esp,0xc
c001da08:	68 ab 22 03 c0       	push   0xc00322ab
c001da0d:	e8 00 b8 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001da12:	83 c4 10             	add    esp,0x10
c001da15:	b8 00 00 00 00       	mov    eax,0x0
c001da1a:	e9 01 01 00 00       	jmp    c001db20 <ACPI::close(int, int, void*)+0x138>
c001da1f:	90                   	nop
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	68 bc 22 03 c0       	push   0xc00322bc
c001da28:	e8 e5 b7 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001da2d:	83 c4 10             	add    esp,0x10
c001da30:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001da35:	75 45                	jne    c001da7c <ACPI::close(int, int, void*)+0x94>
c001da37:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da3c:	83 ec 08             	sub    esp,0x8
c001da3f:	50                   	push   eax
c001da40:	68 cb 22 03 c0       	push   0xc00322cb
c001da45:	e8 c8 b7 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da52:	85 c0                	test   eax,eax
c001da54:	74 0a                	je     c001da60 <ACPI::close(int, int, void*)+0x78>
c001da56:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da5b:	ff d0                	call   eax
c001da5d:	8d 76 00             	lea    esi,[esi+0x0]
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	68 9c 24 03 c0       	push   0xc003249c
c001da68:	e8 2d 27 00 00       	call   c002019a <KePanic(char const*)>
c001da6d:	83 c4 10             	add    esp,0x10
c001da70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da75:	e9 a6 00 00 00       	jmp    c001db20 <ACPI::close(int, int, void*)+0x138>
c001da7a:	66 90                	xchg   ax,ax
c001da7c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001da81:	0f 85 81 00 00 00    	jne    c001db08 <ACPI::close(int, int, void*)+0x120>
c001da87:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da8c:	83 ec 08             	sub    esp,0x8
c001da8f:	50                   	push   eax
c001da90:	68 e9 22 03 c0       	push   0xc00322e9
c001da95:	e8 78 b7 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001da9a:	83 c4 10             	add    esp,0x10
c001da9d:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001daa2:	85 c0                	test   eax,eax
c001daa4:	74 0a                	je     c001dab0 <ACPI::close(int, int, void*)+0xc8>
c001daa6:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001daab:	ff d0                	call   eax
c001daad:	8d 76 00             	lea    esi,[esi+0x0]
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	68 04 23 03 c0       	push   0xc0032304
c001dab8:	e8 55 b7 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dac5:	8d 76 00             	lea    esi,[esi+0x0]
c001dac8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dacd:	83 e0 02             	and    eax,0x2
c001dad0:	74 1e                	je     c001daf0 <ACPI::close(int, int, void*)+0x108>
c001dad2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dadd:	89 c2                	mov    edx,eax
c001dadf:	ec                   	in     al,dx
c001dae0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dae4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dae8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daec:	eb da                	jmp    c001dac8 <ACPI::close(int, int, void*)+0xe0>
c001daee:	66 90                	xchg   ax,ax
c001daf0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001daf7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dafc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001db00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db04:	ee                   	out    dx,al
c001db05:	8d 76 00             	lea    esi,[esi+0x0]
c001db08:	83 ec 0c             	sub    esp,0xc
c001db0b:	68 16 23 03 c0       	push   0xc0032316
c001db10:	e8 fd b6 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db1d:	8d 76 00             	lea    esi,[esi+0x0]
c001db20:	83 c4 1c             	add    esp,0x1c
c001db23:	c3                   	ret    

c001db24 <findRSDP()>:
c001db24:	83 ec 1c             	sub    esp,0x1c
c001db27:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db2c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db32:	83 e0 04             	and    eax,0x4
c001db35:	0f b6 c0             	movzx  eax,al
c001db38:	85 c0                	test   eax,eax
c001db3a:	75 08                	jne    c001db44 <findRSDP()+0x20>
c001db3c:	b8 00 00 00 00       	mov    eax,0x0
c001db41:	eb 75                	jmp    c001dbb8 <findRSDP()+0x94>
c001db43:	90                   	nop
c001db44:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001db49:	3d ff 07 00 00       	cmp    eax,0x7ff
c001db4e:	7f 1c                	jg     c001db6c <findRSDP()+0x48>
c001db50:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db55:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001db5b:	83 e2 fb             	and    edx,0xfffffffb
c001db5e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001db64:	b8 00 00 00 00       	mov    eax,0x0
c001db69:	eb 4d                	jmp    c001dbb8 <findRSDP()+0x94>
c001db6b:	90                   	nop
c001db6c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001db74:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001db7c:	77 32                	ja     c001dbb0 <findRSDP()+0x8c>
c001db7e:	83 ec 04             	sub    esp,0x4
c001db81:	6a 08                	push   0x8
c001db83:	68 25 23 03 c0       	push   0xc0032325
c001db88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db8c:	e8 ef 27 fe ff       	call   c0000380 <memcmp>
c001db91:	83 c4 10             	add    esp,0x10
c001db94:	85 c0                	test   eax,eax
c001db96:	0f 94 c0             	sete   al
c001db99:	0f b6 c0             	movzx  eax,al
c001db9c:	85 c0                	test   eax,eax
c001db9e:	74 08                	je     c001dba8 <findRSDP()+0x84>
c001dba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dba4:	eb 12                	jmp    c001dbb8 <findRSDP()+0x94>
c001dba6:	66 90                	xchg   ax,ax
c001dba8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dbad:	eb c5                	jmp    c001db74 <findRSDP()+0x50>
c001dbaf:	90                   	nop
c001dbb0:	b8 00 00 00 00       	mov    eax,0x0
c001dbb5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbb8:	83 c4 1c             	add    esp,0x1c
c001dbbb:	c3                   	ret    

c001dbbc <loadACPITables(unsigned char*)>:
c001dbbc:	57                   	push   edi
c001dbbd:	56                   	push   esi
c001dbbe:	53                   	push   ebx
c001dbbf:	83 ec 60             	sub    esp,0x60
c001dbc2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbc7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbcd:	83 e0 04             	and    eax,0x4
c001dbd0:	0f b6 c0             	movzx  eax,al
c001dbd3:	85 c0                	test   eax,eax
c001dbd5:	0f 84 41 02 00 00    	je     c001de1c <loadACPITables(unsigned char*)+0x260>
c001dbdb:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dbe0:	0f b6 c0             	movzx  eax,al
c001dbe3:	85 c0                	test   eax,eax
c001dbe5:	74 79                	je     c001dc60 <loadACPITables(unsigned char*)+0xa4>
c001dbe7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbeb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dbef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dbf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dbf6:	83 e8 24             	sub    eax,0x24
c001dbf9:	c1 e8 03             	shr    eax,0x3
c001dbfc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc00:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dc08:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc0c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dc10:	0f 8d ba 00 00 00    	jge    c001dcd0 <loadACPITables(unsigned char*)+0x114>
c001dc16:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc1a:	83 c0 24             	add    eax,0x24
c001dc1d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dc21:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc25:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc29:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc2d:	c1 e0 03             	shl    eax,0x3
c001dc30:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dc34:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc3d:	89 c1                	mov    ecx,eax
c001dc3f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc44:	8d 50 01             	lea    edx,[eax+0x1]
c001dc47:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc4d:	89 ca                	mov    edx,ecx
c001dc4f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc56:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dc5b:	eb ab                	jmp    c001dc08 <loadACPITables(unsigned char*)+0x4c>
c001dc5d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc60:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc64:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dc68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dc6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc6f:	83 e8 24             	sub    eax,0x24
c001dc72:	c1 e8 02             	shr    eax,0x2
c001dc75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dc81:	8d 76 00             	lea    esi,[esi+0x0]
c001dc84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dc88:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dc8c:	7d 42                	jge    c001dcd0 <loadACPITables(unsigned char*)+0x114>
c001dc8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc92:	83 c0 24             	add    eax,0x24
c001dc95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dc99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dca1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dca5:	c1 e0 02             	shl    eax,0x2
c001dca8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dcac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcb2:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcb7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcba:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dcc0:	89 ca                	mov    edx,ecx
c001dcc2:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dcc9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dcce:	eb b4                	jmp    c001dc84 <loadACPITables(unsigned char*)+0xc8>
c001dcd0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dcd8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcdd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dce1:	0f 8d 39 01 00 00    	jge    c001de20 <loadACPITables(unsigned char*)+0x264>
c001dce7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dceb:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dcf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dcf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dcfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd02:	25 ff 0f 00 00       	and    eax,0xfff
c001dd07:	89 c6                	mov    esi,eax
c001dd09:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd0f:	83 ec 0c             	sub    esp,0xc
c001dd12:	6a 01                	push   0x1
c001dd14:	e8 e4 a1 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	6a 01                	push   0x1
c001dd2b:	6a 01                	push   0x1
c001dd2d:	50                   	push   eax
c001dd2e:	52                   	push   edx
c001dd2f:	53                   	push   ebx
c001dd30:	e8 db aa ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd35:	83 c4 20             	add    esp,0x20
c001dd38:	09 f0                	or     eax,esi
c001dd3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd3e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd42:	c1 e0 03             	shl    eax,0x3
c001dd45:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dd4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd56:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dd5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dd72:	89 c6                	mov    esi,eax
c001dd74:	89 d7                	mov    edi,edx
c001dd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd78:	89 c8                	mov    eax,ecx
c001dd7a:	89 fa                	mov    edx,edi
c001dd7c:	89 f3                	mov    ebx,esi
c001dd7e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dd82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dd95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dd99:	05 00 10 00 00       	add    eax,0x1000
c001dd9e:	c1 e8 0c             	shr    eax,0xc
c001dda1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dda5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb1:	25 ff 0f 00 00       	and    eax,0xfff
c001ddb6:	89 c6                	mov    esi,eax
c001ddb8:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddbe:	83 ec 0c             	sub    esp,0xc
c001ddc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddc5:	e8 33 a1 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c001ddca:	83 c4 10             	add    esp,0x10
c001ddcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ddd1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ddd7:	83 ec 0c             	sub    esp,0xc
c001ddda:	6a 01                	push   0x1
c001dddc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dde0:	50                   	push   eax
c001dde1:	52                   	push   edx
c001dde2:	53                   	push   ebx
c001dde3:	e8 28 aa ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dde8:	83 c4 20             	add    esp,0x20
c001ddeb:	09 f0                	or     eax,esi
c001dded:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddf5:	83 ec 0c             	sub    esp,0xc
c001ddf8:	50                   	push   eax
c001ddf9:	e8 13 a4 ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c001ddfe:	83 c4 10             	add    esp,0x10
c001de01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de09:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de10:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001de15:	e9 be fe ff ff       	jmp    c001dcd8 <loadACPITables(unsigned char*)+0x11c>
c001de1a:	66 90                	xchg   ax,ax
c001de1c:	90                   	nop
c001de1d:	8d 76 00             	lea    esi,[esi+0x0]
c001de20:	83 c4 60             	add    esp,0x60
c001de23:	5b                   	pop    ebx
c001de24:	5e                   	pop    esi
c001de25:	5f                   	pop    edi
c001de26:	c3                   	ret    
c001de27:	90                   	nop

c001de28 <findRSDT(unsigned char*)>:
c001de28:	57                   	push   edi
c001de29:	56                   	push   esi
c001de2a:	53                   	push   ebx
c001de2b:	83 ec 50             	sub    esp,0x50
c001de2e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de39:	83 e0 04             	and    eax,0x4
c001de3c:	0f b6 c0             	movzx  eax,al
c001de3f:	85 c0                	test   eax,eax
c001de41:	75 0d                	jne    c001de50 <findRSDT(unsigned char*)+0x28>
c001de43:	b8 00 00 00 00       	mov    eax,0x0
c001de48:	e9 2b 01 00 00       	jmp    c001df78 <findRSDT(unsigned char*)+0x150>
c001de4d:	8d 76 00             	lea    esi,[esi+0x0]
c001de50:	89 e0                	mov    eax,esp
c001de52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de56:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001de5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de5e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001de66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de7a:	89 c6                	mov    esi,eax
c001de7c:	89 d7                	mov    edi,edx
c001de7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de80:	89 c8                	mov    eax,ecx
c001de82:	89 fa                	mov    edx,edi
c001de84:	89 f3                	mov    ebx,esi
c001de86:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001de8a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001de8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001de96:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001de9a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001dea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dea6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001deae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001deb6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001deba:	25 ff 0f 00 00       	and    eax,0xfff
c001debf:	89 c6                	mov    esi,eax
c001dec1:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dec7:	83 ec 0c             	sub    esp,0xc
c001deca:	6a 02                	push   0x2
c001decc:	e8 2c a0 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c001ded1:	83 c4 10             	add    esp,0x10
c001ded4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ded8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	6a 01                	push   0x1
c001dee3:	6a 02                	push   0x2
c001dee5:	50                   	push   eax
c001dee6:	52                   	push   edx
c001dee7:	53                   	push   ebx
c001dee8:	e8 23 a9 ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001deed:	83 c4 20             	add    esp,0x20
c001def0:	09 f0                	or     eax,esi
c001def2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001def6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001defa:	25 ff 0f 00 00       	and    eax,0xfff
c001deff:	89 c6                	mov    esi,eax
c001df01:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df07:	83 ec 0c             	sub    esp,0xc
c001df0a:	6a 02                	push   0x2
c001df0c:	e8 ec 9f ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c001df11:	83 c4 10             	add    esp,0x10
c001df14:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df18:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df1e:	83 ec 0c             	sub    esp,0xc
c001df21:	6a 01                	push   0x1
c001df23:	6a 02                	push   0x2
c001df25:	50                   	push   eax
c001df26:	52                   	push   edx
c001df27:	53                   	push   ebx
c001df28:	e8 e3 a8 ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df2d:	83 c4 20             	add    esp,0x20
c001df30:	09 f0                	or     eax,esi
c001df32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df36:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df3b:	85 c0                	test   eax,eax
c001df3d:	75 11                	jne    c001df50 <findRSDT(unsigned char*)+0x128>
c001df3f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001df46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df4e:	eb 24                	jmp    c001df74 <findRSDT(unsigned char*)+0x14c>
c001df50:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df55:	83 f8 02             	cmp    eax,0x2
c001df58:	75 12                	jne    c001df6c <findRSDT(unsigned char*)+0x144>
c001df5a:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001df61:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df65:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df69:	eb 09                	jmp    c001df74 <findRSDT(unsigned char*)+0x14c>
c001df6b:	90                   	nop
c001df6c:	b8 00 00 00 00       	mov    eax,0x0
c001df71:	eb 05                	jmp    c001df78 <findRSDT(unsigned char*)+0x150>
c001df73:	90                   	nop
c001df74:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df78:	83 c4 50             	add    esp,0x50
c001df7b:	5b                   	pop    ebx
c001df7c:	5e                   	pop    esi
c001df7d:	5f                   	pop    edi
c001df7e:	c3                   	ret    
c001df7f:	90                   	nop

c001df80 <findDataTable(unsigned char*, char*)>:
c001df80:	83 ec 1c             	sub    esp,0x1c
c001df83:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df88:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df8e:	83 e0 04             	and    eax,0x4
c001df91:	0f b6 c0             	movzx  eax,al
c001df94:	85 c0                	test   eax,eax
c001df96:	75 08                	jne    c001dfa0 <findDataTable(unsigned char*, char*)+0x20>
c001df98:	b8 00 00 00 00       	mov    eax,0x0
c001df9d:	eb 5d                	jmp    c001dffc <findDataTable(unsigned char*, char*)+0x7c>
c001df9f:	90                   	nop
c001dfa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dfa8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dfb1:	7d 41                	jge    c001dff4 <findDataTable(unsigned char*, char*)+0x74>
c001dfb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfb7:	c1 e0 03             	shl    eax,0x3
c001dfba:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfbf:	83 ec 04             	sub    esp,0x4
c001dfc2:	6a 04                	push   0x4
c001dfc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfc8:	50                   	push   eax
c001dfc9:	e8 b2 23 fe ff       	call   c0000380 <memcmp>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	85 c0                	test   eax,eax
c001dfd3:	0f 94 c0             	sete   al
c001dfd6:	0f b6 c0             	movzx  eax,al
c001dfd9:	85 c0                	test   eax,eax
c001dfdb:	74 0f                	je     c001dfec <findDataTable(unsigned char*, char*)+0x6c>
c001dfdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe1:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dfe8:	eb 12                	jmp    c001dffc <findDataTable(unsigned char*, char*)+0x7c>
c001dfea:	66 90                	xchg   ax,ax
c001dfec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dff1:	eb b5                	jmp    c001dfa8 <findDataTable(unsigned char*, char*)+0x28>
c001dff3:	90                   	nop
c001dff4:	b8 00 00 00 00       	mov    eax,0x0
c001dff9:	8d 76 00             	lea    esi,[esi+0x0]
c001dffc:	83 c4 1c             	add    esp,0x1c
c001dfff:	c3                   	ret    

c001e000 <scanMADT()>:
c001e000:	53                   	push   ebx
c001e001:	83 ec 38             	sub    esp,0x38
c001e004:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e009:	25 00 04 00 00       	and    eax,0x400
c001e00e:	74 14                	je     c001e024 <scanMADT()+0x24>
c001e010:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e015:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e01b:	83 e2 fb             	and    edx,0xfffffffb
c001e01e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e024:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e029:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e02f:	83 e0 04             	and    eax,0x4
c001e032:	0f b6 c0             	movzx  eax,al
c001e035:	85 c0                	test   eax,eax
c001e037:	0f 84 6b 04 00 00    	je     c001e4a8 <scanMADT()+0x4a8>
c001e03d:	e8 e2 fa ff ff       	call   c001db24 <findRSDP()>
c001e042:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e047:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e04c:	85 c0                	test   eax,eax
c001e04e:	75 1c                	jne    c001e06c <scanMADT()+0x6c>
c001e050:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e055:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e05b:	83 e2 fb             	and    edx,0xfffffffb
c001e05e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e064:	e9 47 04 00 00       	jmp    c001e4b0 <scanMADT()+0x4b0>
c001e069:	8d 76 00             	lea    esi,[esi+0x0]
c001e06c:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e071:	83 ec 0c             	sub    esp,0xc
c001e074:	50                   	push   eax
c001e075:	e8 ae fd ff ff       	call   c001de28 <findRSDT(unsigned char*)>
c001e07a:	83 c4 10             	add    esp,0x10
c001e07d:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e082:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e087:	85 c0                	test   eax,eax
c001e089:	75 19                	jne    c001e0a4 <scanMADT()+0xa4>
c001e08b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e090:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e096:	83 e2 fb             	and    edx,0xfffffffb
c001e099:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e09f:	e9 0c 04 00 00       	jmp    c001e4b0 <scanMADT()+0x4b0>
c001e0a4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0a9:	83 ec 0c             	sub    esp,0xc
c001e0ac:	50                   	push   eax
c001e0ad:	e8 0a fb ff ff       	call   c001dbbc <loadACPITables(unsigned char*)>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0ba:	83 ec 08             	sub    esp,0x8
c001e0bd:	68 2e 23 03 c0       	push   0xc003232e
c001e0c2:	50                   	push   eax
c001e0c3:	e8 b8 fe ff ff       	call   c001df80 <findDataTable(unsigned char*, char*)>
c001e0c8:	83 c4 10             	add    esp,0x10
c001e0cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0cf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e0d4:	75 1a                	jne    c001e0f0 <scanMADT()+0xf0>
c001e0d6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0db:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0e1:	83 e2 fe             	and    edx,0xfffffffe
c001e0e4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0ea:	e9 c1 03 00 00       	jmp    c001e4b0 <scanMADT()+0x4b0>
c001e0ef:	90                   	nop
c001e0f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e0f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0ff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e103:	0f 87 a7 03 00 00    	ja     c001e4b0 <scanMADT()+0x4b0>
c001e109:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e111:	0f 87 99 03 00 00    	ja     c001e4b0 <scanMADT()+0x4b0>
c001e117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e11b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e11f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e123:	8d 50 01             	lea    edx,[eax+0x1]
c001e126:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e12a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e12e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e132:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e136:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e13a:	8d 50 01             	lea    edx,[eax+0x1]
c001e13d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e141:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e145:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e149:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e14d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e152:	83 f8 02             	cmp    eax,0x2
c001e155:	0f 86 51 03 00 00    	jbe    c001e4ac <scanMADT()+0x4ac>
c001e15b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e160:	85 c0                	test   eax,eax
c001e162:	75 58                	jne    c001e1bc <scanMADT()+0x1bc>
c001e164:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e168:	8d 50 01             	lea    edx,[eax+0x1]
c001e16b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e16f:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e175:	0f b6 d2             	movzx  edx,dl
c001e178:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e17c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e180:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e186:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e18a:	8d 50 01             	lea    edx,[eax+0x1]
c001e18d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e191:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e197:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e19a:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e1a0:	0f b6 d2             	movzx  edx,dl
c001e1a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1ab:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e1b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1b6:	e9 d9 02 00 00       	jmp    c001e494 <scanMADT()+0x494>
c001e1bb:	90                   	nop
c001e1bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1c1:	83 f8 01             	cmp    eax,0x1
c001e1c4:	0f 85 1a 01 00 00    	jne    c001e2e4 <scanMADT()+0x2e4>
c001e1ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e1d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1d5:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e1db:	0f b6 d2             	movzx  edx,dl
c001e1de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1e2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1e6:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e1ec:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e1f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1f9:	01 d0                	add    eax,edx
c001e1fb:	83 c0 2c             	add    eax,0x2c
c001e1fe:	8a 00                	mov    al,BYTE PTR [eax]
c001e200:	0f b6 d0             	movzx  edx,al
c001e203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e207:	8d 48 01             	lea    ecx,[eax+0x1]
c001e20a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e20e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e212:	0f b6 c0             	movzx  eax,al
c001e215:	c1 e0 08             	shl    eax,0x8
c001e218:	89 d1                	mov    ecx,edx
c001e21a:	09 c1                	or     ecx,eax
c001e21c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e220:	8d 50 02             	lea    edx,[eax+0x2]
c001e223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e227:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e22b:	0f b6 c0             	movzx  eax,al
c001e22e:	c1 e0 10             	shl    eax,0x10
c001e231:	09 c1                	or     ecx,eax
c001e233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e237:	8d 50 03             	lea    edx,[eax+0x3]
c001e23a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e23e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e242:	0f b6 c0             	movzx  eax,al
c001e245:	c1 e0 18             	shl    eax,0x18
c001e248:	09 c1                	or     ecx,eax
c001e24a:	89 ca                	mov    edx,ecx
c001e24c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e251:	0f b6 c0             	movzx  eax,al
c001e254:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e25b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e260:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e268:	01 d0                	add    eax,edx
c001e26a:	83 c0 2c             	add    eax,0x2c
c001e26d:	8a 00                	mov    al,BYTE PTR [eax]
c001e26f:	0f b6 d0             	movzx  edx,al
c001e272:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e276:	8d 48 01             	lea    ecx,[eax+0x1]
c001e279:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e27d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e281:	0f b6 c0             	movzx  eax,al
c001e284:	c1 e0 08             	shl    eax,0x8
c001e287:	89 d1                	mov    ecx,edx
c001e289:	09 c1                	or     ecx,eax
c001e28b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e28f:	8d 50 02             	lea    edx,[eax+0x2]
c001e292:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e296:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e29a:	0f b6 c0             	movzx  eax,al
c001e29d:	c1 e0 10             	shl    eax,0x10
c001e2a0:	09 c1                	or     ecx,eax
c001e2a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2a6:	8d 50 03             	lea    edx,[eax+0x3]
c001e2a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2b1:	0f b6 c0             	movzx  eax,al
c001e2b4:	c1 e0 18             	shl    eax,0x18
c001e2b7:	09 c1                	or     ecx,eax
c001e2b9:	89 ca                	mov    edx,ecx
c001e2bb:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2c0:	0f b6 c0             	movzx  eax,al
c001e2c3:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e2ca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2cf:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2d4:	83 c0 01             	add    eax,0x1
c001e2d7:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e2dc:	e9 b3 01 00 00       	jmp    c001e494 <scanMADT()+0x494>
c001e2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e2e9:	83 f8 02             	cmp    eax,0x2
c001e2ec:	0f 85 ea 00 00 00    	jne    c001e3dc <scanMADT()+0x3dc>
c001e2f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2f6:	8d 50 01             	lea    edx,[eax+0x1]
c001e2f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e2fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e301:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e305:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e309:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e30d:	8d 50 01             	lea    edx,[eax+0x1]
c001e310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e314:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e318:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e31c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e320:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e324:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e328:	01 d0                	add    eax,edx
c001e32a:	83 c0 2c             	add    eax,0x2c
c001e32d:	8a 00                	mov    al,BYTE PTR [eax]
c001e32f:	0f b6 d0             	movzx  edx,al
c001e332:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e336:	8d 48 01             	lea    ecx,[eax+0x1]
c001e339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e33d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e341:	0f b6 c0             	movzx  eax,al
c001e344:	c1 e0 08             	shl    eax,0x8
c001e347:	89 d1                	mov    ecx,edx
c001e349:	09 c1                	or     ecx,eax
c001e34b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e34f:	8d 50 02             	lea    edx,[eax+0x2]
c001e352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e356:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e35a:	0f b6 c0             	movzx  eax,al
c001e35d:	c1 e0 10             	shl    eax,0x10
c001e360:	09 c1                	or     ecx,eax
c001e362:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e366:	8d 50 03             	lea    edx,[eax+0x3]
c001e369:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e36d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e371:	0f b6 c0             	movzx  eax,al
c001e374:	c1 e0 18             	shl    eax,0x18
c001e377:	09 c8                	or     eax,ecx
c001e379:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e37d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e382:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e38a:	01 d0                	add    eax,edx
c001e38c:	83 c0 2c             	add    eax,0x2c
c001e38f:	8a 00                	mov    al,BYTE PTR [eax]
c001e391:	0f b6 d0             	movzx  edx,al
c001e394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e398:	8d 48 01             	lea    ecx,[eax+0x1]
c001e39b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e39f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e3a3:	0f b6 c0             	movzx  eax,al
c001e3a6:	c1 e0 08             	shl    eax,0x8
c001e3a9:	09 d0                	or     eax,edx
c001e3ab:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e3b0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e3b5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3be:	88 90 48 3b 03 c0    	mov    BYTE PTR [eax-0x3ffcc4b8],dl
c001e3c4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3c9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e3ce:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e3d6:	e9 b9 00 00 00       	jmp    c001e494 <scanMADT()+0x494>
c001e3db:	90                   	nop
c001e3dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3e1:	83 f8 04             	cmp    eax,0x4
c001e3e4:	0f 85 9a 00 00 00    	jne    c001e484 <scanMADT()+0x484>
c001e3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3ee:	8d 50 01             	lea    edx,[eax+0x1]
c001e3f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3fd:	0f b6 c0             	movzx  eax,al
c001e400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e404:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e408:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e40c:	01 d0                	add    eax,edx
c001e40e:	83 c0 2c             	add    eax,0x2c
c001e411:	8a 00                	mov    al,BYTE PTR [eax]
c001e413:	0f b6 d0             	movzx  edx,al
c001e416:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e41a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e41d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e421:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e425:	0f b6 c0             	movzx  eax,al
c001e428:	c1 e0 08             	shl    eax,0x8
c001e42b:	09 d0                	or     eax,edx
c001e42d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e431:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e43a:	8d 50 01             	lea    edx,[eax+0x1]
c001e43d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e445:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e449:	0f b6 c0             	movzx  eax,al
c001e44c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e454:	c1 e0 08             	shl    eax,0x8
c001e457:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e45b:	89 c1                	mov    ecx,eax
c001e45d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e461:	c1 e0 18             	shl    eax,0x18
c001e464:	89 c3                	mov    ebx,eax
c001e466:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e46b:	8d 50 01             	lea    edx,[eax+0x1]
c001e46e:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e474:	09 d9                	or     ecx,ebx
c001e476:	89 ca                	mov    edx,ecx
c001e478:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e47f:	eb 13                	jmp    c001e494 <scanMADT()+0x494>
c001e481:	8d 76 00             	lea    esi,[esi+0x0]
c001e484:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e489:	83 f8 05             	cmp    eax,0x5
c001e48c:	75 06                	jne    c001e494 <scanMADT()+0x494>
c001e48e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e493:	90                   	nop
c001e494:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e499:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e49d:	01 d0                	add    eax,edx
c001e49f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4a3:	e9 50 fc ff ff       	jmp    c001e0f8 <scanMADT()+0xf8>
c001e4a8:	90                   	nop
c001e4a9:	eb 05                	jmp    c001e4b0 <scanMADT()+0x4b0>
c001e4ab:	90                   	nop
c001e4ac:	90                   	nop
c001e4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e4b0:	83 c4 38             	add    esp,0x38
c001e4b3:	5b                   	pop    ebx
c001e4b4:	c3                   	ret    
c001e4b5:	90                   	nop
c001e4b6:	66 90                	xchg   ax,ax

c001e4b8 <ACPI::ACPI()>:
c001e4b8:	83 ec 0c             	sub    esp,0xc
c001e4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4bf:	83 ec 08             	sub    esp,0x8
c001e4c2:	68 33 23 03 c0       	push   0xc0032333
c001e4c7:	50                   	push   eax
c001e4c8:	e8 3d cf ff ff       	call   c001b40a <Device::Device(char const*)>
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	ba 40 25 03 c0       	mov    edx,0xc0032540
c001e4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d9:	89 10                	mov    DWORD PTR [eax],edx
c001e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ea:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e502:	e8 f9 fa ff ff       	call   c001e000 <scanMADT()>
c001e507:	90                   	nop
c001e508:	83 c4 0c             	add    esp,0xc
c001e50b:	c3                   	ret    

c001e50c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e50c:	83 ec 2c             	sub    esp,0x2c
c001e50f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e513:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e517:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e51b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e51f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e524:	88 c8                	mov    al,cl
c001e526:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e52a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e52f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e537:	90                   	nop
c001e538:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e53c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e542:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e546:	0f 8d b0 00 00 00    	jge    c001e5fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e54c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e550:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e554:	83 c2 2a             	add    edx,0x2a
c001e557:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e55b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e560:	0f b7 c0             	movzx  eax,ax
c001e563:	39 c2                	cmp    edx,eax
c001e565:	0f 85 85 00 00 00    	jne    c001e5f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e56b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e56f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e573:	83 c2 2a             	add    edx,0x2a
c001e576:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e57a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e57f:	0f b6 c0             	movzx  eax,al
c001e582:	39 c2                	cmp    edx,eax
c001e584:	75 6a                	jne    c001e5f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e586:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e58b:	85 c0                	test   eax,eax
c001e58d:	74 3d                	je     c001e5cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e58f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e593:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e597:	83 c2 2a             	add    edx,0x2a
c001e59a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e59e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e5a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5a5:	39 c2                	cmp    edx,eax
c001e5a7:	74 13                	je     c001e5bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e5a9:	83 ec 0c             	sub    esp,0xc
c001e5ac:	68 c0 24 03 c0       	push   0xc00324c0
c001e5b1:	e8 e4 1b 00 00       	call   c002019a <KePanic(char const*)>
c001e5b6:	83 c4 10             	add    esp,0x10
c001e5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	68 38 23 03 c0       	push   0xc0032338
c001e5c4:	e8 d1 1b 00 00       	call   c002019a <KePanic(char const*)>
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e5d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5d8:	83 c2 2a             	add    edx,0x2a
c001e5db:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e5df:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5e1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5e4:	89 01                	mov    DWORD PTR [ecx],eax
c001e5e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e5e9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5ee:	66 90                	xchg   ax,ax
c001e5f0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e5f5:	e9 3e ff ff ff       	jmp    c001e538 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e5fa:	66 90                	xchg   ax,ax
c001e5fc:	90                   	nop
c001e5fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e601:	83 c4 2c             	add    esp,0x2c
c001e604:	c2 04 00             	ret    0x4
c001e607:	90                   	nop

c001e608 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e608:	83 ec 1c             	sub    esp,0x1c
c001e60b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e60f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e613:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e617:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e61c:	88 c8                	mov    al,cl
c001e61e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e622:	88 d0                	mov    al,dl
c001e624:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e62c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e636:	83 c2 2a             	add    edx,0x2a
c001e639:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e63d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e645:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e64b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e64f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e652:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e656:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e65b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e65f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e665:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e669:	83 c0 01             	add    eax,0x1
c001e66c:	88 c1                	mov    cl,al
c001e66e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e672:	83 c2 2a             	add    edx,0x2a
c001e675:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e67d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e687:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e68a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e68e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e696:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e69c:	8d 50 01             	lea    edx,[eax+0x1]
c001e69f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6ad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6b3:	3d 00 02 00 00       	cmp    eax,0x200
c001e6b8:	75 12                	jne    c001e6cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e6ba:	83 ec 0c             	sub    esp,0xc
c001e6bd:	68 47 23 03 c0       	push   0xc0032347
c001e6c2:	e8 d3 1a 00 00       	call   c002019a <KePanic(char const*)>
c001e6c7:	83 c4 10             	add    esp,0x10
c001e6ca:	66 90                	xchg   ax,ax
c001e6cc:	90                   	nop
c001e6cd:	83 c4 1c             	add    esp,0x1c
c001e6d0:	c3                   	ret    
c001e6d1:	90                   	nop
c001e6d2:	66 90                	xchg   ax,ax

c001e6d4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e6d4:	b8 00 00 00 00       	mov    eax,0x0
c001e6d9:	c3                   	ret    
c001e6da:	66 90                	xchg   ax,ax

c001e6dc <ACPI::detectPCI()>:
c001e6dc:	53                   	push   ebx
c001e6dd:	83 ec 28             	sub    esp,0x28
c001e6e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6e5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e6ea:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e6ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e6f5:	83 e0 04             	and    eax,0x4
c001e6f8:	0f b6 c0             	movzx  eax,al
c001e6fb:	85 c0                	test   eax,eax
c001e6fd:	74 2d                	je     c001e72c <ACPI::detectPCI()+0x50>
c001e6ff:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e704:	83 ec 08             	sub    esp,0x8
c001e707:	68 64 23 03 c0       	push   0xc0032364
c001e70c:	50                   	push   eax
c001e70d:	e8 6e f8 ff ff       	call   c001df80 <findDataTable(unsigned char*, char*)>
c001e712:	83 c4 10             	add    esp,0x10
c001e715:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e719:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e71e:	74 0c                	je     c001e72c <ACPI::detectPCI()+0x50>
c001e720:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e725:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e72a:	66 90                	xchg   ax,ax
c001e72c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e738:	8a 00                	mov    al,BYTE PTR [eax]
c001e73a:	0f b6 c0             	movzx  eax,al
c001e73d:	83 f8 01             	cmp    eax,0x1
c001e740:	75 0e                	jne    c001e750 <ACPI::detectPCI()+0x74>
c001e742:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e747:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e74c:	eb 2e                	jmp    c001e77c <ACPI::detectPCI()+0xa0>
c001e74e:	66 90                	xchg   ax,ax
c001e750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e754:	8a 00                	mov    al,BYTE PTR [eax]
c001e756:	0f b6 c0             	movzx  eax,al
c001e759:	83 f8 02             	cmp    eax,0x2
c001e75c:	75 1e                	jne    c001e77c <ACPI::detectPCI()+0xa0>
c001e75e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e763:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e768:	85 c0                	test   eax,eax
c001e76a:	74 10                	je     c001e77c <ACPI::detectPCI()+0xa0>
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	68 f0 24 03 c0       	push   0xc00324f0
c001e774:	e8 21 1a 00 00       	call   c002019a <KePanic(char const*)>
c001e779:	83 c4 10             	add    esp,0x10
c001e77c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e780:	83 f0 01             	xor    eax,0x1
c001e783:	0f b6 c0             	movzx  eax,al
c001e786:	85 c0                	test   eax,eax
c001e788:	74 46                	je     c001e7d0 <ACPI::detectPCI()+0xf4>
c001e78a:	e8 a1 19 fe ff       	call   c0000130 <manualPCIProbe>
c001e78f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e793:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e798:	75 0e                	jne    c001e7a8 <ACPI::detectPCI()+0xcc>
c001e79a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e79f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7a4:	eb 2a                	jmp    c001e7d0 <ACPI::detectPCI()+0xf4>
c001e7a6:	66 90                	xchg   ax,ax
c001e7a8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e7ad:	75 21                	jne    c001e7d0 <ACPI::detectPCI()+0xf4>
c001e7af:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7b4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7b9:	85 c0                	test   eax,eax
c001e7bb:	74 13                	je     c001e7d0 <ACPI::detectPCI()+0xf4>
c001e7bd:	83 ec 0c             	sub    esp,0xc
c001e7c0:	68 f0 24 03 c0       	push   0xc00324f0
c001e7c5:	e8 d0 19 00 00       	call   c002019a <KePanic(char const*)>
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7d5:	85 c0                	test   eax,eax
c001e7d7:	0f 84 87 00 00 00    	je     c001e864 <ACPI::detectPCI()+0x188>
c001e7dd:	83 ec 0c             	sub    esp,0xc
c001e7e0:	68 69 23 03 c0       	push   0xc0032369
c001e7e5:	e8 4f 12 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e7f5:	83 ec 0c             	sub    esp,0xc
c001e7f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e7fc:	e8 da 7b ff ff       	call   c00163db <malloc>
c001e801:	83 c4 10             	add    esp,0x10
c001e804:	89 c3                	mov    ebx,eax
c001e806:	83 ec 0c             	sub    esp,0xc
c001e809:	53                   	push   ebx
c001e80a:	e8 db b7 00 00       	call   c0029fea <PCI::PCI()>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e81a:	83 ec 08             	sub    esp,0x8
c001e81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e821:	50                   	push   eax
c001e822:	e8 81 ca ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c001e827:	83 c4 10             	add    esp,0x10
c001e82a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e82e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e830:	83 c0 08             	add    eax,0x8
c001e833:	8b 00                	mov    eax,DWORD PTR [eax]
c001e835:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e83a:	85 d2                	test   edx,edx
c001e83c:	74 0a                	je     c001e848 <ACPI::detectPCI()+0x16c>
c001e83e:	ba 01 00 00 00       	mov    edx,0x1
c001e843:	eb 0b                	jmp    c001e850 <ACPI::detectPCI()+0x174>
c001e845:	8d 76 00             	lea    esi,[esi+0x0]
c001e848:	ba 02 00 00 00       	mov    edx,0x2
c001e84d:	8d 76 00             	lea    esi,[esi+0x0]
c001e850:	6a 00                	push   0x0
c001e852:	6a 00                	push   0x0
c001e854:	52                   	push   edx
c001e855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e859:	ff d0                	call   eax
c001e85b:	83 c4 10             	add    esp,0x10
c001e85e:	e9 91 00 00 00       	jmp    c001e8f4 <ACPI::detectPCI()+0x218>
c001e863:	90                   	nop
c001e864:	83 ec 0c             	sub    esp,0xc
c001e867:	68 81 23 03 c0       	push   0xc0032381
c001e86c:	e8 c8 11 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001e871:	83 c4 10             	add    esp,0x10
c001e874:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e87b:	83 ec 0c             	sub    esp,0xc
c001e87e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e882:	e8 54 7b ff ff       	call   c00163db <malloc>
c001e887:	83 c4 10             	add    esp,0x10
c001e88a:	89 c3                	mov    ebx,eax
c001e88c:	83 ec 0c             	sub    esp,0xc
c001e88f:	53                   	push   ebx
c001e890:	e8 fd c2 00 00       	call   c002ab92 <IDE::IDE()>
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e89c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8a0:	83 ec 08             	sub    esp,0x8
c001e8a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8a7:	50                   	push   eax
c001e8a8:	e8 fb c9 ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8b4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e8be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8c2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e8cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8cf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e8d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8de:	83 c0 08             	add    eax,0x8
c001e8e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8e3:	6a 00                	push   0x0
c001e8e5:	6a 00                	push   0x0
c001e8e7:	6a 00                	push   0x0
c001e8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8ed:	ff d0                	call   eax
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	66 90                	xchg   ax,ax
c001e8f4:	90                   	nop
c001e8f5:	83 c4 28             	add    esp,0x28
c001e8f8:	5b                   	pop    ebx
c001e8f9:	c3                   	ret    
c001e8fa:	66 90                	xchg   ax,ax

c001e8fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e8fc:	83 ec 1c             	sub    esp,0x1c
c001e8ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e903:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e906:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e90a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e90f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e914:	83 ec 08             	sub    esp,0x8
c001e917:	52                   	push   edx
c001e918:	50                   	push   eax
c001e919:	e8 86 71 ff ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e925:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e92a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e92f:	83 ec 04             	sub    esp,0x4
c001e932:	6a 01                	push   0x1
c001e934:	52                   	push   edx
c001e935:	50                   	push   eax
c001e936:	e8 81 72 ff ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001e93b:	83 c4 10             	add    esp,0x10
c001e93e:	90                   	nop
c001e93f:	83 c4 1c             	add    esp,0x1c
c001e942:	c3                   	ret    
c001e943:	90                   	nop

c001e944 <ACPI::sleep()>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e94c:	85 c0                	test   eax,eax
c001e94e:	74 08                	je     c001e958 <ACPI::sleep()+0x14>
c001e950:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e955:	ff d0                	call   eax
c001e957:	90                   	nop
c001e958:	90                   	nop
c001e959:	83 c4 0c             	add    esp,0xc
c001e95c:	c3                   	ret    
c001e95d:	90                   	nop
c001e95e:	66 90                	xchg   ax,ax

c001e960 <ACPI::open(int, int, void*)>:
c001e960:	55                   	push   ebp
c001e961:	89 e5                	mov    ebp,esp
c001e963:	53                   	push   ebx
c001e964:	81 ec 74 01 00 00    	sub    esp,0x174
c001e96a:	83 ec 0c             	sub    esp,0xc
c001e96d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e970:	e8 67 fd ff ff       	call   c001e6dc <ACPI::detectPCI()>
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	83 ec 0c             	sub    esp,0xc
c001e97b:	68 18 25 03 c0       	push   0xc0032518
c001e980:	e8 b4 10 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	b8 4c 05 00 00       	mov    eax,0x54c
c001e98d:	8a 00                	mov    al,BYTE PTR [eax]
c001e98f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001e992:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e996:	83 f8 01             	cmp    eax,0x1
c001e999:	75 15                	jne    c001e9b0 <ACPI::open(int, int, void*)+0x50>
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	68 96 23 03 c0       	push   0xc0032396
c001e9a3:	e8 d9 52 00 00       	call   c0023c81 <Thr::loadKernelSymbolTable(char const*)>
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	eb 33                	jmp    c001e9e0 <ACPI::open(int, int, void*)+0x80>
c001e9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e9b0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e9b4:	3d bb 00 00 00       	cmp    eax,0xbb
c001e9b9:	75 15                	jne    c001e9d0 <ACPI::open(int, int, void*)+0x70>
c001e9bb:	83 ec 0c             	sub    esp,0xc
c001e9be:	68 b4 23 03 c0       	push   0xc00323b4
c001e9c3:	e8 b9 52 00 00       	call   c0023c81 <Thr::loadKernelSymbolTable(char const*)>
c001e9c8:	83 c4 10             	add    esp,0x10
c001e9cb:	eb 13                	jmp    c001e9e0 <ACPI::open(int, int, void*)+0x80>
c001e9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	68 d2 23 03 c0       	push   0xc00323d2
c001e9d8:	e8 bd 17 00 00       	call   c002019a <KePanic(char const*)>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9e4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001e9f1:	e8 e5 79 ff ff       	call   c00163db <malloc>
c001e9f6:	83 c4 10             	add    esp,0x10
c001e9f9:	89 c3                	mov    ebx,eax
c001e9fb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea00:	83 ec 04             	sub    esp,0x4
c001ea03:	50                   	push   eax
c001ea04:	68 ec 23 03 c0       	push   0xc00323ec
c001ea09:	53                   	push   ebx
c001ea0a:	e8 1b ba ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001ea0f:	83 c4 10             	add    esp,0x10
c001ea12:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ea15:	83 ec 08             	sub    esp,0x8
c001ea18:	6a 01                	push   0x1
c001ea1a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea1d:	e8 26 ba ff ff       	call   c001a448 <File::open(FileOpenMode)>
c001ea22:	83 c4 10             	add    esp,0x10
c001ea25:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ea28:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001ea2c:	75 12                	jne    c001ea40 <ACPI::open(int, int, void*)+0xe0>
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea34:	e8 6d ba ff ff       	call   c001a4a6 <File::close()>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	eb 06                	jmp    c001ea44 <ACPI::open(int, int, void*)+0xe4>
c001ea3e:	66 90                	xchg   ax,ax
c001ea40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001ea44:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001ea48:	74 16                	je     c001ea60 <ACPI::open(int, int, void*)+0x100>
c001ea4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea4f:	83 c0 08             	add    eax,0x8
c001ea52:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea54:	83 ec 0c             	sub    esp,0xc
c001ea57:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea5a:	ff d0                	call   eax
c001ea5c:	83 c4 10             	add    esp,0x10
c001ea5f:	90                   	nop
c001ea60:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea63:	83 f0 01             	xor    eax,0x1
c001ea66:	0f b6 c0             	movzx  eax,al
c001ea69:	85 c0                	test   eax,eax
c001ea6b:	74 3b                	je     c001eaa8 <ACPI::open(int, int, void*)+0x148>
c001ea6d:	83 ec 0c             	sub    esp,0xc
c001ea70:	68 0a 24 03 c0       	push   0xc003240a
c001ea75:	e8 bf 0f 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	83 ec 04             	sub    esp,0x4
c001ea80:	6a 0c                	push   0xc
c001ea82:	68 25 24 03 c0       	push   0xc0032425
c001ea87:	68 36 24 03 c0       	push   0xc0032436
c001ea8c:	e8 29 44 00 00       	call   c0022eba <Reg::readIntWithDefault(char*, char*, int)>
c001ea91:	83 c4 10             	add    esp,0x10
c001ea94:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea97:	83 ec 0c             	sub    esp,0xc
c001ea9a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001ea9d:	e8 80 96 ff ff       	call   c0018122 <Virt::setupPageSwapping(int)>
c001eaa2:	83 c4 10             	add    esp,0x10
c001eaa5:	8d 76 00             	lea    esi,[esi+0x0]
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	68 64 0e 03 c0       	push   0xc0030e64
c001eab0:	e8 84 0f 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eabb:	83 ec 08             	sub    esp,0x8
c001eabe:	6a 13                	push   0x13
c001eac0:	50                   	push   eax
c001eac1:	e8 10 cb ff ff       	call   c001b5d6 <getDevicesOfType(DeviceType)>
c001eac6:	83 c4 0c             	add    esp,0xc
c001eac9:	8d 76 00             	lea    esi,[esi+0x0]
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ead2:	50                   	push   eax
c001ead3:	e8 f8 02 01 00       	call   c002edd0 <LinkedList<Device>::isEmpty()>
c001ead8:	83 c4 10             	add    esp,0x10
c001eadb:	83 f0 01             	xor    eax,0x1
c001eade:	0f b6 c0             	movzx  eax,al
c001eae1:	85 c0                	test   eax,eax
c001eae3:	0f 84 1f 01 00 00    	je     c001ec08 <ACPI::open(int, int, void*)+0x2a8>
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eaef:	50                   	push   eax
c001eaf0:	e8 f7 02 01 00       	call   c002edec <LinkedList<Device>::getFirstElement()>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb01:	50                   	push   eax
c001eb02:	e8 ed 02 01 00       	call   c002edf4 <LinkedList<Device>::removeFirst()>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001eb0d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001eb10:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001eb13:	b8 24 00 00 00       	mov    eax,0x24
c001eb18:	83 e0 fc             	and    eax,0xfffffffc
c001eb1b:	89 c3                	mov    ebx,eax
c001eb1d:	b8 00 00 00 00       	mov    eax,0x0
c001eb22:	66 90                	xchg   ax,ax
c001eb24:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001eb2b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001eb32:	83 c0 04             	add    eax,0x4
c001eb35:	39 d8                	cmp    eax,ebx
c001eb37:	72 eb                	jb     c001eb24 <ACPI::open(int, int, void*)+0x1c4>
c001eb39:	83 ec 08             	sub    esp,0x8
c001eb3c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001eb42:	50                   	push   eax
c001eb43:	83 ec 24             	sub    esp,0x24
c001eb46:	89 e1                	mov    ecx,esp
c001eb48:	b8 24 00 00 00       	mov    eax,0x24
c001eb4d:	83 e0 fc             	and    eax,0xfffffffc
c001eb50:	89 c3                	mov    ebx,eax
c001eb52:	b8 00 00 00 00       	mov    eax,0x0
c001eb57:	90                   	nop
c001eb58:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001eb5f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001eb62:	83 c0 04             	add    eax,0x4
c001eb65:	39 d8                	cmp    eax,ebx
c001eb67:	72 ef                	jb     c001eb58 <ACPI::open(int, int, void*)+0x1f8>
c001eb69:	e8 64 b9 00 00       	call   c002a4d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eb6e:	83 c4 30             	add    esp,0x30
c001eb71:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eb74:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001eb78:	0f 84 4e ff ff ff    	je     c001eacc <ACPI::open(int, int, void*)+0x16c>
c001eb7e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001eb85:	83 ec 0c             	sub    esp,0xc
c001eb88:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001eb8b:	e8 4b 78 ff ff       	call   c00163db <malloc>
c001eb90:	83 c4 10             	add    esp,0x10
c001eb93:	89 c3                	mov    ebx,eax
c001eb95:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eb9a:	83 ec 04             	sub    esp,0x4
c001eb9d:	50                   	push   eax
c001eb9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001eba1:	53                   	push   ebx
c001eba2:	e8 83 b8 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001eba7:	83 c4 10             	add    esp,0x10
c001ebaa:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001ebad:	83 ec 0c             	sub    esp,0xc
c001ebb0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ebb3:	e8 54 bb ff ff       	call   c001a70c <File::exists()>
c001ebb8:	83 c4 10             	add    esp,0x10
c001ebbb:	0f b6 c0             	movzx  eax,al
c001ebbe:	85 c0                	test   eax,eax
c001ebc0:	74 22                	je     c001ebe4 <ACPI::open(int, int, void*)+0x284>
c001ebc2:	83 ec 08             	sub    esp,0x8
c001ebc5:	6a 01                	push   0x1
c001ebc7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ebca:	e8 34 5b 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	83 ec 08             	sub    esp,0x8
c001ebd5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001ebd8:	50                   	push   eax
c001ebd9:	e8 86 5d 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	8d 76 00             	lea    esi,[esi+0x0]
c001ebe4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001ebe8:	0f 84 de fe ff ff    	je     c001eacc <ACPI::open(int, int, void*)+0x16c>
c001ebee:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf3:	83 c0 08             	add    eax,0x8
c001ebf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ebfe:	ff d0                	call   eax
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	e9 c4 fe ff ff       	jmp    c001eacc <ACPI::open(int, int, void*)+0x16c>
c001ec08:	83 ec 0c             	sub    esp,0xc
c001ec0b:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ec0e:	50                   	push   eax
c001ec0f:	e8 b8 01 01 00       	call   c002edcc <LinkedList<Device>::~LinkedList()>
c001ec14:	83 c4 10             	add    esp,0x10
c001ec17:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ec1d:	83 ec 08             	sub    esp,0x8
c001ec20:	6a 01                	push   0x1
c001ec22:	68 3d 24 03 c0       	push   0xc003243d
c001ec27:	e8 d7 5a 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001ec2c:	83 c4 10             	add    esp,0x10
c001ec2f:	83 ec 08             	sub    esp,0x8
c001ec32:	53                   	push   ebx
c001ec33:	50                   	push   eax
c001ec34:	e8 2b 5d 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001ec39:	83 c4 10             	add    esp,0x10
c001ec3c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec41:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ec47:	83 e0 04             	and    eax,0x4
c001ec4a:	0f b6 c0             	movzx  eax,al
c001ec4d:	85 c0                	test   eax,eax
c001ec4f:	0f 84 e3 00 00 00    	je     c001ed38 <ACPI::open(int, int, void*)+0x3d8>
c001ec55:	83 ec 0c             	sub    esp,0xc
c001ec58:	68 5a 24 03 c0       	push   0xc003245a
c001ec5d:	e8 d7 0d 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001ec6c:	83 ec 0c             	sub    esp,0xc
c001ec6f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001ec72:	e8 64 77 ff ff       	call   c00163db <malloc>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	89 c3                	mov    ebx,eax
c001ec7c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec81:	83 ec 04             	sub    esp,0x4
c001ec84:	50                   	push   eax
c001ec85:	68 77 24 03 c0       	push   0xc0032477
c001ec8a:	53                   	push   ebx
c001ec8b:	e8 9a b7 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001ec90:	83 c4 10             	add    esp,0x10
c001ec93:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001ec96:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ec9a:	74 1c                	je     c001ecb8 <ACPI::open(int, int, void*)+0x358>
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001eca2:	e8 65 ba ff ff       	call   c001a70c <File::exists()>
c001eca7:	83 c4 10             	add    esp,0x10
c001ecaa:	0f b6 c0             	movzx  eax,al
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	74 07                	je     c001ecb8 <ACPI::open(int, int, void*)+0x358>
c001ecb1:	b0 01                	mov    al,0x1
c001ecb3:	eb 07                	jmp    c001ecbc <ACPI::open(int, int, void*)+0x35c>
c001ecb5:	8d 76 00             	lea    esi,[esi+0x0]
c001ecb8:	b0 00                	mov    al,0x0
c001ecba:	66 90                	xchg   ax,ax
c001ecbc:	0f b6 c0             	movzx  eax,al
c001ecbf:	85 c0                	test   eax,eax
c001ecc1:	74 21                	je     c001ece4 <ACPI::open(int, int, void*)+0x384>
c001ecc3:	83 ec 08             	sub    esp,0x8
c001ecc6:	6a 01                	push   0x1
c001ecc8:	68 77 24 03 c0       	push   0xc0032477
c001eccd:	e8 31 5a 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c001ecd2:	83 c4 10             	add    esp,0x10
c001ecd5:	83 ec 08             	sub    esp,0x8
c001ecd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecdb:	50                   	push   eax
c001ecdc:	e8 83 5c 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c001ece1:	83 c4 10             	add    esp,0x10
c001ece4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ece8:	74 1e                	je     c001ed08 <ACPI::open(int, int, void*)+0x3a8>
c001ecea:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ecee:	74 18                	je     c001ed08 <ACPI::open(int, int, void*)+0x3a8>
c001ecf0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001ecf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf5:	83 c0 08             	add    eax,0x8
c001ecf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecfa:	83 ec 0c             	sub    esp,0xc
c001ecfd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ed00:	ff d0                	call   eax
c001ed02:	83 c4 10             	add    esp,0x10
c001ed05:	8d 76 00             	lea    esi,[esi+0x0]
c001ed08:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ed0d:	83 ec 08             	sub    esp,0x8
c001ed10:	68 94 24 03 c0       	push   0xc0032494
c001ed15:	50                   	push   eax
c001ed16:	e8 65 f2 ff ff       	call   c001df80 <findDataTable(unsigned char*, char*)>
c001ed1b:	83 c4 10             	add    esp,0x10
c001ed1e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001ed21:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001ed25:	74 11                	je     c001ed38 <ACPI::open(int, int, void*)+0x3d8>
c001ed27:	83 ec 08             	sub    esp,0x8
c001ed2a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed30:	e8 c7 fb ff ff       	call   c001e8fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ed35:	83 c4 10             	add    esp,0x10
c001ed38:	b8 00 00 00 00       	mov    eax,0x0
c001ed3d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed40:	c9                   	leave  
c001ed41:	c3                   	ret    

c001ed42 <CPU::close(int, int, void*)>:
c001ed42:	31 c0                	xor    eax,eax
c001ed44:	c3                   	ret    
c001ed45:	90                   	nop

c001ed46 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ed46:	60                   	pusha  
c001ed47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed53:	9c                   	pushf  
c001ed54:	fa                   	cli    
c001ed55:	0f 09                	wbinvd 
c001ed57:	0f 30                	wrmsr  
c001ed59:	9d                   	popf   
c001ed5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed5e:	89 02                	mov    DWORD PTR [edx],eax
c001ed60:	61                   	popa   
c001ed61:	c3                   	ret    

c001ed62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ed62:	60                   	pusha  
c001ed63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed67:	9c                   	pushf  
c001ed68:	fa                   	cli    
c001ed69:	0f 09                	wbinvd 
c001ed6b:	31 c0                	xor    eax,eax
c001ed6d:	31 d2                	xor    edx,edx
c001ed6f:	0f 32                	rdmsr  
c001ed71:	9d                   	popf   
c001ed72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed76:	89 02                	mov    DWORD PTR [edx],eax
c001ed78:	61                   	popa   
c001ed79:	c3                   	ret    

c001ed7a <CPU::AMD_K6_writeback(int, int, int)>:
c001ed7a:	56                   	push   esi
c001ed7b:	53                   	push   ebx
c001ed7c:	83 ec 10             	sub    esp,0x10
c001ed7f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	75 5d                	jne    c001ede7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ed8a:	83 f8 08             	cmp    eax,0x8
c001ed8d:	75 09                	jne    c001ed98 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ed8f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ed94:	7e 13                	jle    c001eda9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ed96:	eb 30                	jmp    c001edc8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ed98:	83 f8 06             	cmp    eax,0x6
c001ed9b:	7c 4a                	jl     c001ede7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ed9d:	83 f8 07             	cmp    eax,0x7
c001eda0:	7e 07                	jle    c001eda9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001eda2:	83 f8 09             	cmp    eax,0x9
c001eda5:	74 21                	je     c001edc8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001eda7:	eb 3e                	jmp    c001ede7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001eda9:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001edaf:	89 e6                	mov    esi,esp
c001edb1:	56                   	push   esi
c001edb2:	68 82 00 00 c0       	push   0xc0000082
c001edb7:	e8 a6 ff ff ff       	call   c001ed62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001edbc:	c1 eb 15             	shr    ebx,0x15
c001edbf:	56                   	push   esi
c001edc0:	83 e3 7e             	and    ebx,0x7e
c001edc3:	6a 00                	push   0x0
c001edc5:	53                   	push   ebx
c001edc6:	eb 12                	jmp    c001edda <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001edc8:	89 e3                	mov    ebx,esp
c001edca:	53                   	push   ebx
c001edcb:	68 82 00 00 c0       	push   0xc0000082
c001edd0:	e8 8d ff ff ff       	call   c001ed62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001edd5:	53                   	push   ebx
c001edd6:	6a 00                	push   0x0
c001edd8:	6a 00                	push   0x0
c001edda:	68 82 00 00 c0       	push   0xc0000082
c001eddf:	e8 62 ff ff ff       	call   c001ed46 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001ede4:	83 c4 18             	add    esp,0x18
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	5b                   	pop    ebx
c001edeb:	5e                   	pop    esi
c001edec:	c3                   	ret    
c001eded:	90                   	nop

c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001edee:	55                   	push   ebp
c001edef:	57                   	push   edi
c001edf0:	56                   	push   esi
c001edf1:	53                   	push   ebx
c001edf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edf6:	39 05 58 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b58,eax
c001edfc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ee00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ee04:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ee08:	75 23                	jne    c001ee2d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ee0a:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ee0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee13:	89 06                	mov    DWORD PTR [esi],eax
c001ee15:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ee1a:	89 07                	mov    DWORD PTR [edi],eax
c001ee1c:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001ee21:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ee24:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ee29:	89 02                	mov    DWORD PTR [edx],eax
c001ee2b:	eb 3f                	jmp    c001ee6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ee2d:	31 c9                	xor    ecx,ecx
c001ee2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee33:	0f a2                	cpuid  
c001ee35:	89 06                	mov    DWORD PTR [esi],eax
c001ee37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee3b:	89 1f                	mov    DWORD PTR [edi],ebx
c001ee3d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ee40:	89 10                	mov    DWORD PTR [eax],edx
c001ee42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee46:	a3 58 3b 03 c0       	mov    ds:0xc0033b58,eax
c001ee4b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ee4d:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ee52:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee54:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ee59:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee5c:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ee61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee67:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ee6c:	5b                   	pop    ebx
c001ee6d:	5e                   	pop    esi
c001ee6e:	5f                   	pop    edi
c001ee6f:	5d                   	pop    ebp
c001ee70:	c3                   	ret    
c001ee71:	90                   	nop

c001ee72 <CPU::cpuidCheckEDX(unsigned int)>:
c001ee72:	83 ec 10             	sub    esp,0x10
c001ee75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee79:	50                   	push   eax
c001ee7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee7e:	50                   	push   eax
c001ee7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee83:	50                   	push   eax
c001ee84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee88:	50                   	push   eax
c001ee89:	6a 01                	push   0x1
c001ee8b:	e8 5e ff ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ee90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee94:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ee98:	0f 95 c0             	setne  al
c001ee9b:	83 c4 24             	add    esp,0x24
c001ee9e:	c3                   	ret    
c001ee9f:	90                   	nop

c001eea0 <CPU::cpuidCheckECX(unsigned int)>:
c001eea0:	83 ec 10             	sub    esp,0x10
c001eea3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eea7:	50                   	push   eax
c001eea8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeac:	50                   	push   eax
c001eead:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb1:	50                   	push   eax
c001eeb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb6:	50                   	push   eax
c001eeb7:	6a 01                	push   0x1
c001eeb9:	e8 30 ff ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eebe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eec2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001eec6:	0f 95 c0             	setne  al
c001eec9:	83 c4 24             	add    esp,0x24
c001eecc:	c3                   	ret    
c001eecd:	90                   	nop

c001eece <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001eece:	83 ec 10             	sub    esp,0x10
c001eed1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eed5:	50                   	push   eax
c001eed6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeda:	50                   	push   eax
c001eedb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eedf:	50                   	push   eax
c001eee0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee4:	50                   	push   eax
c001eee5:	6a 07                	push   0x7
c001eee7:	e8 02 ff ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eeec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eef0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001eef4:	0f 95 c0             	setne  al
c001eef7:	83 c4 24             	add    esp,0x24
c001eefa:	c3                   	ret    
c001eefb:	90                   	nop

c001eefc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001eefc:	83 ec 10             	sub    esp,0x10
c001eeff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef03:	50                   	push   eax
c001ef04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef08:	50                   	push   eax
c001ef09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef0d:	50                   	push   eax
c001ef0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef12:	50                   	push   eax
c001ef13:	6a 07                	push   0x7
c001ef15:	e8 d4 fe ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef1e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef22:	0f 95 c0             	setne  al
c001ef25:	83 c4 24             	add    esp,0x24
c001ef28:	c3                   	ret    
c001ef29:	90                   	nop

c001ef2a <CPU::CPU()>:
c001ef2a:	83 ec 0c             	sub    esp,0xc
c001ef2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef31:	83 ec 08             	sub    esp,0x8
c001ef34:	68 55 26 03 c0       	push   0xc0032655
c001ef39:	50                   	push   eax
c001ef3a:	e8 cb c4 ff ff       	call   c001b40a <Device::Device(char const*)>
c001ef3f:	83 c4 10             	add    esp,0x10
c001ef42:	ba e8 26 03 c0       	mov    edx,0xc00326e8
c001ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4b:	89 10                	mov    DWORD PTR [eax],edx
c001ef4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef51:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ef5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5f:	05 78 01 00 00       	add    eax,0x178
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	50                   	push   eax
c001ef68:	e8 19 6d ff ff       	call   c0015c86 <GDT::GDT()>
c001ef6d:	83 c4 10             	add    esp,0x10
c001ef70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef74:	05 7c 09 00 00       	add    eax,0x97c
c001ef79:	83 ec 0c             	sub    esp,0xc
c001ef7c:	50                   	push   eax
c001ef7d:	e8 52 6f ff ff       	call   c0015ed4 <IDT::IDT()>
c001ef82:	83 c4 10             	add    esp,0x10
c001ef85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef89:	05 7c 11 00 00       	add    eax,0x117c
c001ef8e:	83 ec 0c             	sub    esp,0xc
c001ef91:	50                   	push   eax
c001ef92:	e8 9d 88 ff ff       	call   c0017834 <TSS::TSS()>
c001ef97:	83 c4 10             	add    esp,0x10
c001ef9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001efa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa9:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001efb3:	90                   	nop
c001efb4:	83 c4 0c             	add    esp,0xc
c001efb7:	c3                   	ret    

c001efb8 <CPU::displayFeatures()>:
c001efb8:	c3                   	ret    
c001efb9:	90                   	nop

c001efba <CPU::detectFeatures()>:
c001efba:	55                   	push   ebp
c001efbb:	57                   	push   edi
c001efbc:	56                   	push   esi
c001efbd:	53                   	push   ebx
c001efbe:	83 ec 30             	sub    esp,0x30
c001efc1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efc5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001efcf:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001efd5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001efdc:	6a 0d                	push   0xd
c001efde:	6a 00                	push   0x0
c001efe0:	55                   	push   ebp
c001efe1:	e8 0a 15 fe ff       	call   c00004f0 <memset>
c001efe6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001eff5:	0f 84 db 05 00 00    	je     c001f5d6 <CPU::detectFeatures()+0x61c>
c001effb:	83 ec 0c             	sub    esp,0xc
c001effe:	89 ef                	mov    edi,ebp
c001f000:	6a 10                	push   0x10
c001f002:	e8 6b fe ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f007:	83 e0 01             	and    eax,0x1
c001f00a:	8d 14 00             	lea    edx,[eax+eax*1]
c001f00d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f013:	83 e0 fd             	and    eax,0xfffffffd
c001f016:	09 d0                	or     eax,edx
c001f018:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f01e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f025:	e8 48 fe ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f02a:	83 e0 01             	and    eax,0x1
c001f02d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f034:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f03a:	83 e0 fb             	and    eax,0xfffffffb
c001f03d:	09 d0                	or     eax,edx
c001f03f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f045:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f04c:	e8 21 fe ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f051:	83 e0 01             	and    eax,0x1
c001f054:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f05b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f061:	83 e0 f7             	and    eax,0xfffffff7
c001f064:	09 d0                	or     eax,edx
c001f066:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f06c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f073:	e8 fa fd ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f078:	83 e0 01             	and    eax,0x1
c001f07b:	c1 e0 04             	shl    eax,0x4
c001f07e:	89 c2                	mov    edx,eax
c001f080:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f086:	83 e0 ef             	and    eax,0xffffffef
c001f089:	09 d0                	or     eax,edx
c001f08b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f091:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f098:	e8 d5 fd ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f09d:	83 e0 01             	and    eax,0x1
c001f0a0:	c1 e0 05             	shl    eax,0x5
c001f0a3:	89 c2                	mov    edx,eax
c001f0a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0ab:	83 e0 df             	and    eax,0xffffffdf
c001f0ae:	09 d0                	or     eax,edx
c001f0b0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0b6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f0bd:	e8 b0 fd ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f0c2:	83 e0 01             	and    eax,0x1
c001f0c5:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0c8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f0ce:	83 e0 fd             	and    eax,0xfffffffd
c001f0d1:	09 d0                	or     eax,edx
c001f0d3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f0d9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f0e0:	e8 8d fd ff ff       	call   c001ee72 <CPU::cpuidCheckEDX(unsigned int)>
c001f0e5:	83 e0 01             	and    eax,0x1
c001f0e8:	c1 e0 06             	shl    eax,0x6
c001f0eb:	89 c2                	mov    edx,eax
c001f0ed:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f0f3:	83 e0 bf             	and    eax,0xffffffbf
c001f0f6:	09 d0                	or     eax,edx
c001f0f8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f0fe:	58                   	pop    eax
c001f0ff:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f103:	50                   	push   eax
c001f104:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f108:	50                   	push   eax
c001f109:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f10d:	56                   	push   esi
c001f10e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f112:	50                   	push   eax
c001f113:	6a 00                	push   0x0
c001f115:	e8 d4 fc ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f11a:	b8 04 00 00 00       	mov    eax,0x4
c001f11f:	89 c1                	mov    ecx,eax
c001f121:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f123:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f129:	89 c1                	mov    ecx,eax
c001f12b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f12f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f131:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f137:	89 c1                	mov    ecx,eax
c001f139:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f13d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f13f:	83 c4 18             	add    esp,0x18
c001f142:	68 64 25 03 c0       	push   0xc0032564
c001f147:	55                   	push   ebp
c001f148:	e8 33 16 fe ff       	call   c0000780 <strcmp>
c001f14d:	83 c4 10             	add    esp,0x10
c001f150:	85 c0                	test   eax,eax
c001f152:	75 0f                	jne    c001f163 <CPU::detectFeatures()+0x1a9>
c001f154:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f15e:	e9 22 02 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f163:	50                   	push   eax
c001f164:	50                   	push   eax
c001f165:	68 71 25 03 c0       	push   0xc0032571
c001f16a:	55                   	push   ebp
c001f16b:	e8 10 16 fe ff       	call   c0000780 <strcmp>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	85 c0                	test   eax,eax
c001f175:	74 dd                	je     c001f154 <CPU::detectFeatures()+0x19a>
c001f177:	50                   	push   eax
c001f178:	50                   	push   eax
c001f179:	68 7e 25 03 c0       	push   0xc003257e
c001f17e:	55                   	push   ebp
c001f17f:	e8 fc 15 fe ff       	call   c0000780 <strcmp>
c001f184:	83 c4 10             	add    esp,0x10
c001f187:	85 c0                	test   eax,eax
c001f189:	74 2a                	je     c001f1b5 <CPU::detectFeatures()+0x1fb>
c001f18b:	50                   	push   eax
c001f18c:	50                   	push   eax
c001f18d:	68 8b 25 03 c0       	push   0xc003258b
c001f192:	55                   	push   ebp
c001f193:	e8 e8 15 fe ff       	call   c0000780 <strcmp>
c001f198:	83 c4 10             	add    esp,0x10
c001f19b:	85 c0                	test   eax,eax
c001f19d:	74 16                	je     c001f1b5 <CPU::detectFeatures()+0x1fb>
c001f19f:	50                   	push   eax
c001f1a0:	50                   	push   eax
c001f1a1:	68 98 25 03 c0       	push   0xc0032598
c001f1a6:	55                   	push   ebp
c001f1a7:	e8 d4 15 fe ff       	call   c0000780 <strcmp>
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	85 c0                	test   eax,eax
c001f1b1:	74 48                	je     c001f1fb <CPU::detectFeatures()+0x241>
c001f1b3:	eb 0f                	jmp    c001f1c4 <CPU::detectFeatures()+0x20a>
c001f1b5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f1bf:	e9 c1 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f1c4:	50                   	push   eax
c001f1c5:	50                   	push   eax
c001f1c6:	68 a5 25 03 c0       	push   0xc00325a5
c001f1cb:	55                   	push   ebp
c001f1cc:	e8 af 15 fe ff       	call   c0000780 <strcmp>
c001f1d1:	83 c4 10             	add    esp,0x10
c001f1d4:	85 c0                	test   eax,eax
c001f1d6:	74 23                	je     c001f1fb <CPU::detectFeatures()+0x241>
c001f1d8:	57                   	push   edi
c001f1d9:	57                   	push   edi
c001f1da:	68 b2 25 03 c0       	push   0xc00325b2
c001f1df:	55                   	push   ebp
c001f1e0:	e8 9b 15 fe ff       	call   c0000780 <strcmp>
c001f1e5:	83 c4 10             	add    esp,0x10
c001f1e8:	85 c0                	test   eax,eax
c001f1ea:	75 1e                	jne    c001f20a <CPU::detectFeatures()+0x250>
c001f1ec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f1f6:	e9 8a 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f1fb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f205:	e9 7b 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f20a:	56                   	push   esi
c001f20b:	56                   	push   esi
c001f20c:	68 bf 25 03 c0       	push   0xc00325bf
c001f211:	55                   	push   ebp
c001f212:	e8 69 15 fe ff       	call   c0000780 <strcmp>
c001f217:	83 c4 10             	add    esp,0x10
c001f21a:	85 c0                	test   eax,eax
c001f21c:	75 0f                	jne    c001f22d <CPU::detectFeatures()+0x273>
c001f21e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f228:	e9 58 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f22d:	51                   	push   ecx
c001f22e:	51                   	push   ecx
c001f22f:	68 7e 25 03 c0       	push   0xc003257e
c001f234:	55                   	push   ebp
c001f235:	e8 46 15 fe ff       	call   c0000780 <strcmp>
c001f23a:	83 c4 10             	add    esp,0x10
c001f23d:	85 c0                	test   eax,eax
c001f23f:	75 0f                	jne    c001f250 <CPU::detectFeatures()+0x296>
c001f241:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f24b:	e9 35 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f250:	52                   	push   edx
c001f251:	52                   	push   edx
c001f252:	68 cc 25 03 c0       	push   0xc00325cc
c001f257:	55                   	push   ebp
c001f258:	e8 23 15 fe ff       	call   c0000780 <strcmp>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	85 c0                	test   eax,eax
c001f262:	75 0f                	jne    c001f273 <CPU::detectFeatures()+0x2b9>
c001f264:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f26e:	e9 12 01 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f273:	50                   	push   eax
c001f274:	50                   	push   eax
c001f275:	68 d9 25 03 c0       	push   0xc00325d9
c001f27a:	55                   	push   ebp
c001f27b:	e8 00 15 fe ff       	call   c0000780 <strcmp>
c001f280:	83 c4 10             	add    esp,0x10
c001f283:	85 c0                	test   eax,eax
c001f285:	75 0f                	jne    c001f296 <CPU::detectFeatures()+0x2dc>
c001f287:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f291:	e9 ef 00 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f296:	50                   	push   eax
c001f297:	50                   	push   eax
c001f298:	68 e6 25 03 c0       	push   0xc00325e6
c001f29d:	55                   	push   ebp
c001f29e:	e8 dd 14 fe ff       	call   c0000780 <strcmp>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	85 c0                	test   eax,eax
c001f2a8:	75 0f                	jne    c001f2b9 <CPU::detectFeatures()+0x2ff>
c001f2aa:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f2b4:	e9 cc 00 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f2b9:	50                   	push   eax
c001f2ba:	50                   	push   eax
c001f2bb:	68 f3 25 03 c0       	push   0xc00325f3
c001f2c0:	55                   	push   ebp
c001f2c1:	e8 ba 14 fe ff       	call   c0000780 <strcmp>
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	85 c0                	test   eax,eax
c001f2cb:	75 0f                	jne    c001f2dc <CPU::detectFeatures()+0x322>
c001f2cd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f2d7:	e9 a9 00 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f2dc:	50                   	push   eax
c001f2dd:	50                   	push   eax
c001f2de:	68 00 26 03 c0       	push   0xc0032600
c001f2e3:	55                   	push   ebp
c001f2e4:	e8 97 14 fe ff       	call   c0000780 <strcmp>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	85 c0                	test   eax,eax
c001f2ee:	75 0f                	jne    c001f2ff <CPU::detectFeatures()+0x345>
c001f2f0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f2fa:	e9 86 00 00 00       	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f2ff:	50                   	push   eax
c001f300:	50                   	push   eax
c001f301:	68 0d 26 03 c0       	push   0xc003260d
c001f306:	55                   	push   ebp
c001f307:	e8 74 14 fe ff       	call   c0000780 <strcmp>
c001f30c:	83 c4 10             	add    esp,0x10
c001f30f:	85 c0                	test   eax,eax
c001f311:	75 0c                	jne    c001f31f <CPU::detectFeatures()+0x365>
c001f313:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f31d:	eb 66                	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f31f:	50                   	push   eax
c001f320:	50                   	push   eax
c001f321:	68 1a 26 03 c0       	push   0xc003261a
c001f326:	55                   	push   ebp
c001f327:	e8 54 14 fe ff       	call   c0000780 <strcmp>
c001f32c:	83 c4 10             	add    esp,0x10
c001f32f:	85 c0                	test   eax,eax
c001f331:	75 0c                	jne    c001f33f <CPU::detectFeatures()+0x385>
c001f333:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f33d:	eb 46                	jmp    c001f385 <CPU::detectFeatures()+0x3cb>
c001f33f:	57                   	push   edi
c001f340:	57                   	push   edi
c001f341:	68 27 26 03 c0       	push   0xc0032627
c001f346:	55                   	push   ebp
c001f347:	e8 34 14 fe ff       	call   c0000780 <strcmp>
c001f34c:	83 c4 10             	add    esp,0x10
c001f34f:	85 c0                	test   eax,eax
c001f351:	74 e0                	je     c001f333 <CPU::detectFeatures()+0x379>
c001f353:	56                   	push   esi
c001f354:	56                   	push   esi
c001f355:	68 34 26 03 c0       	push   0xc0032634
c001f35a:	55                   	push   ebp
c001f35b:	e8 20 14 fe ff       	call   c0000780 <strcmp>
c001f360:	83 c4 10             	add    esp,0x10
c001f363:	85 c0                	test   eax,eax
c001f365:	74 cc                	je     c001f333 <CPU::detectFeatures()+0x379>
c001f367:	51                   	push   ecx
c001f368:	51                   	push   ecx
c001f369:	68 41 26 03 c0       	push   0xc0032641
c001f36e:	55                   	push   ebp
c001f36f:	e8 0c 14 fe ff       	call   c0000780 <strcmp>
c001f374:	83 c4 10             	add    esp,0x10
c001f377:	85 c0                	test   eax,eax
c001f379:	74 b8                	je     c001f333 <CPU::detectFeatures()+0x379>
c001f37b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f385:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f38a:	0f 86 be 00 00 00    	jbe    c001f44e <CPU::detectFeatures()+0x494>
c001f390:	83 ec 0c             	sub    esp,0xc
c001f393:	68 80 00 00 00       	push   0x80
c001f398:	e8 31 fb ff ff       	call   c001eece <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f39d:	83 e0 01             	and    eax,0x1
c001f3a0:	c1 e0 06             	shl    eax,0x6
c001f3a3:	89 c2                	mov    edx,eax
c001f3a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3ab:	83 e0 bf             	and    eax,0xffffffbf
c001f3ae:	09 d0                	or     eax,edx
c001f3b0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3b6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f3bd:	e8 0c fb ff ff       	call   c001eece <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3c2:	83 e0 01             	and    eax,0x1
c001f3c5:	c1 e0 04             	shl    eax,0x4
c001f3c8:	89 c2                	mov    edx,eax
c001f3ca:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3d0:	83 e0 ef             	and    eax,0xffffffef
c001f3d3:	09 d0                	or     eax,edx
c001f3d5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f3db:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f3e2:	e8 e7 fa ff ff       	call   c001eece <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3e7:	89 c2                	mov    edx,eax
c001f3e9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3ef:	c1 e2 07             	shl    edx,0x7
c001f3f2:	83 e0 7f             	and    eax,0x7f
c001f3f5:	09 d0                	or     eax,edx
c001f3f7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3fd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f404:	e8 f3 fa ff ff       	call   c001eefc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f409:	83 e0 01             	and    eax,0x1
c001f40c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f413:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f419:	83 e0 f7             	and    eax,0xfffffff7
c001f41c:	09 d0                	or     eax,edx
c001f41e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f424:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f42b:	e8 cc fa ff ff       	call   c001eefc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f430:	83 c4 10             	add    esp,0x10
c001f433:	83 e0 01             	and    eax,0x1
c001f436:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f43d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f443:	83 e0 fb             	and    eax,0xfffffffb
c001f446:	09 d0                	or     eax,edx
c001f448:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f455:	50                   	push   eax
c001f456:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f45a:	50                   	push   eax
c001f45b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f45f:	57                   	push   edi
c001f460:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f464:	56                   	push   esi
c001f465:	6a 01                	push   0x1
c001f467:	e8 82 f9 ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f46c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f470:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f476:	89 c1                	mov    ecx,eax
c001f478:	83 e1 0f             	and    ecx,0xf
c001f47b:	83 e2 f0             	and    edx,0xfffffff0
c001f47e:	09 ca                	or     edx,ecx
c001f480:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f486:	89 c2                	mov    edx,eax
c001f488:	c1 ea 04             	shr    edx,0x4
c001f48b:	83 e2 0f             	and    edx,0xf
c001f48e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f492:	89 d1                	mov    ecx,edx
c001f494:	83 c4 20             	add    esp,0x20
c001f497:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f49d:	c1 e1 06             	shl    ecx,0x6
c001f4a0:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f4a6:	09 ca                	or     edx,ecx
c001f4a8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f4af:	89 c2                	mov    edx,eax
c001f4b1:	c1 ea 08             	shr    edx,0x8
c001f4b4:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f4ba:	83 e2 0f             	and    edx,0xf
c001f4bd:	89 d5                	mov    ebp,edx
c001f4bf:	83 e5 03             	and    ebp,0x3
c001f4c2:	c1 e5 06             	shl    ebp,0x6
c001f4c5:	83 e1 3f             	and    ecx,0x3f
c001f4c8:	09 e9                	or     ecx,ebp
c001f4ca:	89 d5                	mov    ebp,edx
c001f4cc:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f4d2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f4d8:	c1 ed 02             	shr    ebp,0x2
c001f4db:	83 e1 c0             	and    ecx,0xffffffc0
c001f4de:	09 e9                	or     ecx,ebp
c001f4e0:	89 c5                	mov    ebp,eax
c001f4e2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f4e8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f4ee:	c1 ed 08             	shr    ebp,0x8
c001f4f1:	83 e5 30             	and    ebp,0x30
c001f4f4:	83 e1 cf             	and    ecx,0xffffffcf
c001f4f7:	09 e9                	or     ecx,ebp
c001f4f9:	83 fa 06             	cmp    edx,0x6
c001f4fc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f502:	74 05                	je     c001f509 <CPU::detectFeatures()+0x54f>
c001f504:	83 fa 0f             	cmp    edx,0xf
c001f507:	75 64                	jne    c001f56d <CPU::detectFeatures()+0x5b3>
c001f509:	89 c1                	mov    ecx,eax
c001f50b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f511:	c1 e9 10             	shr    ecx,0x10
c001f514:	c1 e1 04             	shl    ecx,0x4
c001f517:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f51b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f521:	0f b6 c9             	movzx  ecx,cl
c001f524:	c1 e1 06             	shl    ecx,0x6
c001f527:	09 e9                	or     ecx,ebp
c001f529:	83 fa 0f             	cmp    edx,0xf
c001f52c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f533:	75 38                	jne    c001f56d <CPU::detectFeatures()+0x5b3>
c001f535:	c1 e8 14             	shr    eax,0x14
c001f538:	83 c0 0f             	add    eax,0xf
c001f53b:	0f b6 c0             	movzx  eax,al
c001f53e:	89 c2                	mov    edx,eax
c001f540:	c1 e8 02             	shr    eax,0x2
c001f543:	83 e2 03             	and    edx,0x3
c001f546:	89 d1                	mov    ecx,edx
c001f548:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f54e:	c1 e1 06             	shl    ecx,0x6
c001f551:	83 e2 3f             	and    edx,0x3f
c001f554:	09 ca                	or     edx,ecx
c001f556:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f55c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f562:	83 e2 c0             	and    edx,0xffffffc0
c001f565:	09 d0                	or     eax,edx
c001f567:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f56d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f573:	83 ec 0c             	sub    esp,0xc
c001f576:	83 c8 07             	or     eax,0x7
c001f579:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f57f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f583:	50                   	push   eax
c001f584:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f588:	55                   	push   ebp
c001f589:	57                   	push   edi
c001f58a:	56                   	push   esi
c001f58b:	68 00 00 00 80       	push   0x80000000
c001f590:	e8 59 f8 ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f595:	83 c4 20             	add    esp,0x20
c001f598:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f5a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5a4:	76 1e                	jbe    c001f5c4 <CPU::detectFeatures()+0x60a>
c001f5a6:	83 ec 0c             	sub    esp,0xc
c001f5a9:	50                   	push   eax
c001f5aa:	55                   	push   ebp
c001f5ab:	57                   	push   edi
c001f5ac:	56                   	push   esi
c001f5ad:	68 01 00 00 80       	push   0x80000001
c001f5b2:	e8 37 f8 ff ff       	call   c001edee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f5b7:	83 c4 20             	add    esp,0x20
c001f5ba:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f5c4:	52                   	push   edx
c001f5c5:	52                   	push   edx
c001f5c6:	68 4d 26 03 c0       	push   0xc003264d
c001f5cb:	53                   	push   ebx
c001f5cc:	e8 2b be ff ff       	call   c001b3fc <Device::setName(char const*)>
c001f5d1:	83 c4 10             	add    esp,0x10
c001f5d4:	eb 69                	jmp    c001f63f <CPU::detectFeatures()+0x685>
c001f5d6:	50                   	push   eax
c001f5d7:	50                   	push   eax
c001f5d8:	68 b2 25 03 c0       	push   0xc00325b2
c001f5dd:	55                   	push   ebp
c001f5de:	e8 6d 10 fe ff       	call   c0000650 <strcpy>
c001f5e3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5ed:	e8 d1 0b fe ff       	call   c00001c3 <is486>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	85 c0                	test   eax,eax
c001f5f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f5fd:	74 1f                	je     c001f61e <CPU::detectFeatures()+0x664>
c001f5ff:	83 c8 07             	or     eax,0x7
c001f602:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f608:	0f 20 c0             	mov    eax,cr0
c001f60b:	83 e0 14             	and    eax,0x14
c001f60e:	83 f8 04             	cmp    eax,0x4
c001f611:	75 10                	jne    c001f623 <CPU::detectFeatures()+0x669>
c001f613:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f619:	83 e0 fd             	and    eax,0xfffffffd
c001f61c:	eb 1b                	jmp    c001f639 <CPU::detectFeatures()+0x67f>
c001f61e:	83 e0 f8             	and    eax,0xfffffff8
c001f621:	eb df                	jmp    c001f602 <CPU::detectFeatures()+0x648>
c001f623:	e8 76 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f628:	83 e0 01             	and    eax,0x1
c001f62b:	8d 14 00             	lea    edx,[eax+eax*1]
c001f62e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f634:	83 e0 fd             	and    eax,0xfffffffd
c001f637:	09 d0                	or     eax,edx
c001f639:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f63f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f646:	74 17                	je     c001f65f <CPU::detectFeatures()+0x6a5>
c001f648:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f64e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f654:	83 c8 10             	or     eax,0x10
c001f657:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f65d:	eb 20                	jmp    c001f67f <CPU::detectFeatures()+0x6c5>
c001f65f:	e8 3a 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f664:	83 e0 01             	and    eax,0x1
c001f667:	8d 14 00             	lea    edx,[eax+eax*1]
c001f66a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f670:	83 e0 fd             	and    eax,0xfffffffd
c001f673:	09 d0                	or     eax,edx
c001f675:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f67b:	a8 02                	test   al,0x2
c001f67d:	75 c9                	jne    c001f648 <CPU::detectFeatures()+0x68e>
c001f67f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f686:	83 c4 2c             	add    esp,0x2c
c001f689:	5b                   	pop    ebx
c001f68a:	5e                   	pop    esi
c001f68b:	5f                   	pop    edi
c001f68c:	5d                   	pop    ebp
c001f68d:	c3                   	ret    

c001f68e <CPU::setupSMEP()>:
c001f68e:	0f 20 e0             	mov    eax,cr4
c001f691:	0d 00 00 10 00       	or     eax,0x100000
c001f696:	0f 22 e0             	mov    cr4,eax
c001f699:	c3                   	ret    

c001f69a <CPU::setupUMIP()>:
c001f69a:	0f 20 e0             	mov    eax,cr4
c001f69d:	80 cc 08             	or     ah,0x8
c001f6a0:	0f 22 e0             	mov    cr4,eax
c001f6a3:	c3                   	ret    

c001f6a4 <CPU::setupTSC()>:
c001f6a4:	0f 20 e0             	mov    eax,cr4
c001f6a7:	83 c8 04             	or     eax,0x4
c001f6aa:	0f 22 e0             	mov    cr4,eax
c001f6ad:	c3                   	ret    

c001f6ae <CPU::setupLargePages()>:
c001f6ae:	0f 20 e0             	mov    eax,cr4
c001f6b1:	83 c8 10             	or     eax,0x10
c001f6b4:	0f 22 e0             	mov    cr4,eax
c001f6b7:	c3                   	ret    

c001f6b8 <CPU::setupPAT()>:
c001f6b8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f6bd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f6c4:	74 2c                	je     c001f6f2 <CPU::setupPAT()+0x3a>
c001f6c6:	53                   	push   ebx
c001f6c7:	83 ec 10             	sub    esp,0x10
c001f6ca:	68 77 02 00 00       	push   0x277
c001f6cf:	50                   	push   eax
c001f6d0:	e8 17 63 ff ff       	call   c00159ec <Computer::rdmsr(unsigned int)>
c001f6d5:	83 e2 f8             	and    edx,0xfffffff8
c001f6d8:	83 ca 01             	or     edx,0x1
c001f6db:	52                   	push   edx
c001f6dc:	50                   	push   eax
c001f6dd:	68 77 02 00 00       	push   0x277
c001f6e2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f6e8:	e8 2b 63 ff ff       	call   c0015a18 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f6ed:	83 c4 28             	add    esp,0x28
c001f6f0:	5b                   	pop    ebx
c001f6f1:	c3                   	ret    
c001f6f2:	c3                   	ret    
c001f6f3:	90                   	nop

c001f6f4 <CPU::setupMTRR()>:
c001f6f4:	c3                   	ret    
c001f6f5:	90                   	nop

c001f6f6 <CPU::setupGlobalPages()>:
c001f6f6:	0f 20 e0             	mov    eax,cr4
c001f6f9:	0c 80                	or     al,0x80
c001f6fb:	0f 22 e0             	mov    cr4,eax
c001f6fe:	c3                   	ret    
c001f6ff:	90                   	nop

c001f700 <CPU::allowUsermodeDataAccess()>:
c001f700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f704:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f70b:	74 03                	je     c001f710 <CPU::allowUsermodeDataAccess()+0x10>
c001f70d:	0f 01 cb             	stac   
c001f710:	c3                   	ret    
c001f711:	90                   	nop

c001f712 <CPU::prohibitUsermodeDataAccess()>:
c001f712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f716:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f71d:	74 03                	je     c001f722 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f71f:	0f 01 ca             	clac   
c001f722:	c3                   	ret    
c001f723:	90                   	nop

c001f724 <CPU::setupSMAP()>:
c001f724:	0f 20 e0             	mov    eax,cr4
c001f727:	0d 00 00 20 00       	or     eax,0x200000
c001f72c:	0f 22 e0             	mov    cr4,eax
c001f72f:	eb e1                	jmp    c001f712 <CPU::prohibitUsermodeDataAccess()>
c001f731:	90                   	nop

c001f732 <CPU::setupFeatures()>:
c001f732:	53                   	push   ebx
c001f733:	83 ec 08             	sub    esp,0x8
c001f736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f73a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f741:	74 18                	je     c001f75b <CPU::setupFeatures()+0x29>
c001f743:	83 ec 0c             	sub    esp,0xc
c001f746:	68 59 26 03 c0       	push   0xc0032659
c001f74b:	e8 c2 9a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f750:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f753:	e8 42 ff ff ff       	call   c001f69a <CPU::setupUMIP()>
c001f758:	83 c4 10             	add    esp,0x10
c001f75b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f762:	74 18                	je     c001f77c <CPU::setupFeatures()+0x4a>
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	68 63 26 03 c0       	push   0xc0032663
c001f76c:	e8 a1 9a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f771:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f774:	e8 2b ff ff ff       	call   c001f6a4 <CPU::setupTSC()>
c001f779:	83 c4 10             	add    esp,0x10
c001f77c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f783:	74 18                	je     c001f79d <CPU::setupFeatures()+0x6b>
c001f785:	83 ec 0c             	sub    esp,0xc
c001f788:	68 6c 26 03 c0       	push   0xc003266c
c001f78d:	e8 80 9a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f792:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f795:	e8 14 ff ff ff       	call   c001f6ae <CPU::setupLargePages()>
c001f79a:	83 c4 10             	add    esp,0x10
c001f79d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f7a4:	74 18                	je     c001f7be <CPU::setupFeatures()+0x8c>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	68 75 26 03 c0       	push   0xc0032675
c001f7ae:	e8 5f 9a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f7b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7b6:	e8 3b ff ff ff       	call   c001f6f6 <CPU::setupGlobalPages()>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f7c5:	74 18                	je     c001f7df <CPU::setupFeatures()+0xad>
c001f7c7:	83 ec 0c             	sub    esp,0xc
c001f7ca:	68 87 26 03 c0       	push   0xc0032687
c001f7cf:	e8 3e 9a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f7d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7d7:	e8 dc fe ff ff       	call   c001f6b8 <CPU::setupPAT()>
c001f7dc:	83 c4 10             	add    esp,0x10
c001f7df:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f7e6:	74 11                	je     c001f7f9 <CPU::setupFeatures()+0xc7>
c001f7e8:	c7 44 24 10 90 26 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032690
c001f7f0:	83 c4 08             	add    esp,0x8
c001f7f3:	5b                   	pop    ebx
c001f7f4:	e9 19 9a ff ff       	jmp    c0019212 <Dbg::kprintf(char const*, ...)>
c001f7f9:	83 c4 08             	add    esp,0x8
c001f7fc:	5b                   	pop    ebx
c001f7fd:	c3                   	ret    

c001f7fe <CPU::open(int, int, void*)>:
c001f7fe:	55                   	push   ebp
c001f7ff:	57                   	push   edi
c001f800:	56                   	push   esi
c001f801:	53                   	push   ebx
c001f802:	83 ec 18             	sub    esp,0x18
c001f805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f809:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f80d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f811:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f817:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f81d:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f823:	50                   	push   eax
c001f824:	e8 bf 64 ff ff       	call   c0015ce8 <GDT::setup()>
c001f829:	83 c4 0c             	add    esp,0xc
c001f82c:	6a 00                	push   0x0
c001f82e:	68 ef be ad de       	push   0xdeadbeef
c001f833:	55                   	push   ebp
c001f834:	e8 3f 80 ff ff       	call   c0017878 <TSS::setup(unsigned long, unsigned long)>
c001f839:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f83c:	e8 17 80 ff ff       	call   c0017858 <TSS::flush()>
c001f841:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f847:	89 04 24             	mov    DWORD PTR [esp],eax
c001f84a:	e8 fb 66 ff ff       	call   c0015f4a <IDT::setup()>
c001f84f:	b8 00 04 00 00       	mov    eax,0x400
c001f854:	0f 23 f8             	mov    db7,eax
c001f857:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f861:	e8 84 6e ff ff       	call   c00166ea <Phys::allocatePage()>
c001f866:	83 c4 10             	add    esp,0x10
c001f869:	85 f6                	test   esi,esi
c001f86b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f871:	89 38                	mov    DWORD PTR [eax],edi
c001f873:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f879:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f87c:	74 10                	je     c001f88e <CPU::open(int, int, void*)+0x90>
c001f87e:	50                   	push   eax
c001f87f:	50                   	push   eax
c001f880:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f886:	56                   	push   esi
c001f887:	e8 08 89 ff ff       	call   c0018194 <VAS::setCPUSpecific(unsigned long)>
c001f88c:	eb 0d                	jmp    c001f89b <CPU::open(int, int, void*)+0x9d>
c001f88e:	83 ec 0c             	sub    esp,0xc
c001f891:	68 9a 26 03 c0       	push   0xc003269a
c001f896:	e8 ff 08 00 00       	call   c002019a <KePanic(char const*)>
c001f89b:	83 c4 10             	add    esp,0x10
c001f89e:	83 ec 0c             	sub    esp,0xc
c001f8a1:	68 a8 26 03 c0       	push   0xc00326a8
c001f8a6:	e8 8e 01 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001f8ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8ae:	e8 07 f7 ff ff       	call   c001efba <CPU::detectFeatures()>
c001f8b3:	c7 04 24 cb 26 03 c0 	mov    DWORD PTR [esp],0xc00326cb
c001f8ba:	e8 7a 01 00 00       	call   c001fa39 <KeSetBootMessage(char const*)>
c001f8bf:	e8 f7 76 00 00       	call   c0026fbb <HalInitialise()>
c001f8c4:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f8c9:	83 e0 10             	and    eax,0x10
c001f8cc:	83 f8 01             	cmp    eax,0x1
c001f8cf:	19 c0                	sbb    eax,eax
c001f8d1:	83 e0 46             	and    eax,0x46
c001f8d4:	83 c0 1e             	add    eax,0x1e
c001f8d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8da:	e8 06 d4 ff ff       	call   c001cce5 <setupTimer(int)>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f8e9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f8ef:	74 0c                	je     c001f8fd <CPU::open(int, int, void*)+0xff>
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	53                   	push   ebx
c001f8f5:	e8 38 fe ff ff       	call   c001f732 <CPU::setupFeatures()>
c001f8fa:	83 c4 10             	add    esp,0x10
c001f8fd:	83 c4 0c             	add    esp,0xc
c001f900:	31 c0                	xor    eax,eax
c001f902:	5b                   	pop    ebx
c001f903:	5e                   	pop    esi
c001f904:	5f                   	pop    edi
c001f905:	5d                   	pop    ebp
c001f906:	c3                   	ret    

c001f907 <KeInitialiseAtexit()>:
c001f907:	83 ec 10             	sub    esp,0x10
c001f90a:	6a 60                	push   0x60
c001f90c:	6a 00                	push   0x0
c001f90e:	68 20 f9 03 c0       	push   0xc003f920
c001f913:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f91d:	e8 ce 0b fe ff       	call   c00004f0 <memset>
c001f922:	83 c4 1c             	add    esp,0x1c
c001f925:	c3                   	ret    

c001f926 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f926:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f92b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f92f:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f93a:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f941:	40                   	inc    eax
c001f942:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f947:	83 f8 17             	cmp    eax,0x17
c001f94a:	7e 0d                	jle    c001f959 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f94c:	c7 44 24 04 0c 27 03 c0 	mov    DWORD PTR [esp+0x4],0xc003270c
c001f954:	e9 41 08 00 00       	jmp    c002019a <KePanic(char const*)>
c001f959:	c3                   	ret    

c001f95a <KeExecuteAtexit()>:
c001f95a:	53                   	push   ebx
c001f95b:	31 db                	xor    ebx,ebx
c001f95d:	83 ec 08             	sub    esp,0x8
c001f960:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f966:	7e 50                	jle    c001f9b8 <KeExecuteAtexit()+0x5e>
c001f968:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f96f:	85 c0                	test   eax,eax
c001f971:	74 42                	je     c001f9b5 <KeExecuteAtexit()+0x5b>
c001f973:	51                   	push   ecx
c001f974:	50                   	push   eax
c001f975:	53                   	push   ebx
c001f976:	68 25 27 03 c0       	push   0xc0032725
c001f97b:	e8 92 98 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f980:	58                   	pop    eax
c001f981:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f988:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f98f:	c7 04 24 47 27 03 c0 	mov    DWORD PTR [esp],0xc0032747
c001f996:	e8 77 98 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f99b:	c7 04 24 f3 38 03 c0 	mov    DWORD PTR [esp],0xc00338f3
c001f9a2:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f9ad:	e8 60 98 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001f9b2:	83 c4 10             	add    esp,0x10
c001f9b5:	43                   	inc    ebx
c001f9b6:	eb a8                	jmp    c001f960 <KeExecuteAtexit()+0x6>
c001f9b8:	83 c4 08             	add    esp,0x8
c001f9bb:	5b                   	pop    ebx
c001f9bc:	c3                   	ret    

c001f9bd <KeDisplaySplashScreen()>:
c001f9bd:	55                   	push   ebp
c001f9be:	bd 05 00 00 00       	mov    ebp,0x5
c001f9c3:	57                   	push   edi
c001f9c4:	bf 0a 00 00 00       	mov    edi,0xa
c001f9c9:	56                   	push   esi
c001f9ca:	31 f6                	xor    esi,esi
c001f9cc:	53                   	push   ebx
c001f9cd:	31 db                	xor    ebx,ebx
c001f9cf:	83 ec 0c             	sub    esp,0xc
c001f9d2:	0f b6 96 60 3b 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc4a0]
c001f9d9:	85 d2                	test   edx,edx
c001f9db:	89 d0                	mov    eax,edx
c001f9dd:	74 52                	je     c001fa31 <KeDisplaySplashScreen()+0x74>
c001f9df:	80 bb 96 3b 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc46a],0xdb
c001f9e6:	75 13                	jne    c001f9fb <KeDisplaySplashScreen()+0x3e>
c001f9e8:	0f b6 8b 95 3b 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc46b]
c001f9ef:	83 e1 fe             	and    ecx,0xfffffffe
c001f9f2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001f9f8:	75 01                	jne    c001f9fb <KeDisplaySplashScreen()+0x3e>
c001f9fa:	47                   	inc    edi
c001f9fb:	83 fa 0d             	cmp    edx,0xd
c001f9fe:	74 28                	je     c001fa28 <KeDisplaySplashScreen()+0x6b>
c001fa00:	83 fa 0a             	cmp    edx,0xa
c001fa03:	75 0a                	jne    c001fa0f <KeDisplaySplashScreen()+0x52>
c001fa05:	45                   	inc    ebp
c001fa06:	bf 0a 00 00 00       	mov    edi,0xa
c001fa0b:	31 db                	xor    ebx,ebx
c001fa0d:	eb 19                	jmp    c001fa28 <KeDisplaySplashScreen()+0x6b>
c001fa0f:	83 ec 0c             	sub    esp,0xc
c001fa12:	0f be c0             	movsx  eax,al
c001fa15:	55                   	push   ebp
c001fa16:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fa19:	43                   	inc    ebx
c001fa1a:	52                   	push   edx
c001fa1b:	6a 00                	push   0x0
c001fa1d:	6a 0e                	push   0xe
c001fa1f:	50                   	push   eax
c001fa20:	e8 13 82 00 00       	call   c0027c38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fa25:	83 c4 20             	add    esp,0x20
c001fa28:	46                   	inc    esi
c001fa29:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fa2f:	75 a1                	jne    c001f9d2 <KeDisplaySplashScreen()+0x15>
c001fa31:	83 c4 0c             	add    esp,0xc
c001fa34:	5b                   	pop    ebx
c001fa35:	5e                   	pop    esi
c001fa36:	5f                   	pop    edi
c001fa37:	5d                   	pop    ebp
c001fa38:	c3                   	ret    

c001fa39 <KeSetBootMessage(char const*)>:
c001fa39:	57                   	push   edi
c001fa3a:	56                   	push   esi
c001fa3b:	53                   	push   ebx
c001fa3c:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fa42:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fa49:	68 9e 00 00 00       	push   0x9e
c001fa4e:	6a 00                	push   0x0
c001fa50:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fa54:	56                   	push   esi
c001fa55:	e8 96 0a fe ff       	call   c00004f0 <memset>
c001fa5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa5d:	e8 1e 0b fe ff       	call   c0000580 <strlen>
c001fa62:	ba 50 00 00 00       	mov    edx,0x50
c001fa67:	83 c4 10             	add    esp,0x10
c001fa6a:	31 c9                	xor    ecx,ecx
c001fa6c:	29 c2                	sub    edx,eax
c001fa6e:	83 e2 fe             	and    edx,0xfffffffe
c001fa71:	01 f2                	add    edx,esi
c001fa73:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fa78:	84 c0                	test   al,al
c001fa7a:	74 0a                	je     c001fa86 <KeSetBootMessage(char const*)+0x4d>
c001fa7c:	80 cc 0f             	or     ah,0xf
c001fa7f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fa83:	41                   	inc    ecx
c001fa84:	eb ed                	jmp    c001fa73 <KeSetBootMessage(char const*)+0x3a>
c001fa86:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fa8b:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fa90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa92:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fa98:	5b                   	pop    ebx
c001fa99:	5e                   	pop    esi
c001fa9a:	5f                   	pop    edi
c001fa9b:	c3                   	ret    

c001fa9c <CUnlockScheduler>:
c001fa9c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faa1:	83 e8 01             	sub    eax,0x1
c001faa4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001faa9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faae:	85 c0                	test   eax,eax
c001fab0:	75 02                	jne    c001fab4 <CUnlockScheduler+0x18>
c001fab2:	fb                   	sti    
c001fab3:	90                   	nop
c001fab4:	90                   	nop
c001fab5:	c3                   	ret    
c001fab6:	66 90                	xchg   ax,ax

c001fab8 <CLockScheduler>:
c001fab8:	fa                   	cli    
c001fab9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fabe:	83 c0 01             	add    eax,0x1
c001fac1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fac6:	90                   	nop
c001fac7:	c3                   	ret    

c001fac8 <CPrintf>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	83 ec 08             	sub    esp,0x8
c001face:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fad2:	68 d0 f9 02 c0       	push   0xc002f9d0
c001fad7:	e8 36 97 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	90                   	nop
c001fae0:	83 c4 0c             	add    esp,0xc
c001fae3:	c3                   	ret    

c001fae4 <Krnl::handlePowerButton()>:
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	e8 09 07 00 00       	call   c00201f5 <KeHandlePowerButton()>
c001faec:	90                   	nop
c001faed:	83 c4 0c             	add    esp,0xc
c001faf0:	c3                   	ret    
c001faf1:	8d 76 00             	lea    esi,[esi+0x0]

c001faf4 <Krnl::handleSleepButton()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	e8 2e 07 00 00       	call   c002022a <KeHandleSleepButton()>
c001fafc:	90                   	nop
c001fafd:	83 c4 0c             	add    esp,0xc
c001fb00:	c3                   	ret    

c001fb01 <KeCalculateCRC32(unsigned char*, int)>:
c001fb01:	53                   	push   ebx
c001fb02:	83 c8 ff             	or     eax,0xffffffff
c001fb05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb0d:	01 cb                	add    ebx,ecx
c001fb0f:	39 d9                	cmp    ecx,ebx
c001fb11:	74 15                	je     c001fb28 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fb13:	41                   	inc    ecx
c001fb14:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fb17:	31 c2                	xor    edx,eax
c001fb19:	c1 e8 08             	shr    eax,0x8
c001fb1c:	0f b6 d2             	movzx  edx,dl
c001fb1f:	33 04 95 c0 3c 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc340]
c001fb26:	eb e7                	jmp    c001fb0f <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fb28:	5b                   	pop    ebx
c001fb29:	f7 d0                	not    eax
c001fb2b:	c3                   	ret    

c001fb2c <EnvVarContainer::getEnv(char const*)>:
c001fb2c:	57                   	push   edi
c001fb2d:	56                   	push   esi
c001fb2e:	53                   	push   ebx
c001fb2f:	31 db                	xor    ebx,ebx
c001fb31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb35:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fb37:	7e 2b                	jle    c001fb64 <EnvVarContainer::getEnv(char const*)+0x38>
c001fb39:	50                   	push   eax
c001fb3a:	50                   	push   eax
c001fb3b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb3e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fb45:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fb48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb4c:	e8 2f 0c fe ff       	call   c0000780 <strcmp>
c001fb51:	83 c4 10             	add    esp,0x10
c001fb54:	85 c0                	test   eax,eax
c001fb56:	75 09                	jne    c001fb61 <EnvVarContainer::getEnv(char const*)+0x35>
c001fb58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb5b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fb5f:	eb 05                	jmp    c001fb66 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fb61:	43                   	inc    ebx
c001fb62:	eb d1                	jmp    c001fb35 <EnvVarContainer::getEnv(char const*)+0x9>
c001fb64:	31 c0                	xor    eax,eax
c001fb66:	5b                   	pop    ebx
c001fb67:	5e                   	pop    esi
c001fb68:	5f                   	pop    edi
c001fb69:	c3                   	ret    

c001fb6a <EnvVarContainer::setEnv(char const*, char const*)>:
c001fb6a:	55                   	push   ebp
c001fb6b:	57                   	push   edi
c001fb6c:	56                   	push   esi
c001fb6d:	53                   	push   ebx
c001fb6e:	83 ec 28             	sub    esp,0x28
c001fb71:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fb75:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fb79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fb7d:	56                   	push   esi
c001fb7e:	e8 fd 09 fe ff       	call   c0000580 <strlen>
c001fb83:	40                   	inc    eax
c001fb84:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb87:	e8 4f 68 ff ff       	call   c00163db <malloc>
c001fb8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb93:	e8 e8 09 fe ff       	call   c0000580 <strlen>
c001fb98:	40                   	inc    eax
c001fb99:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb9c:	e8 3a 68 ff ff       	call   c00163db <malloc>
c001fba1:	89 34 24             	mov    DWORD PTR [esp],esi
c001fba4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fba8:	e8 d3 09 fe ff       	call   c0000580 <strlen>
c001fbad:	83 c4 0c             	add    esp,0xc
c001fbb0:	40                   	inc    eax
c001fbb1:	50                   	push   eax
c001fbb2:	6a 00                	push   0x0
c001fbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fbb8:	e8 33 09 fe ff       	call   c00004f0 <memset>
c001fbbd:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbc0:	e8 bb 09 fe ff       	call   c0000580 <strlen>
c001fbc5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fbc9:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbd1:	89 de                	mov    esi,ebx
c001fbd3:	e8 a8 09 fe ff       	call   c0000580 <strlen>
c001fbd8:	83 c4 0c             	add    esp,0xc
c001fbdb:	40                   	inc    eax
c001fbdc:	50                   	push   eax
c001fbdd:	6a 00                	push   0x0
c001fbdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbe3:	e8 08 09 fe ff       	call   c00004f0 <memset>
c001fbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbeb:	e8 90 09 fe ff       	call   c0000580 <strlen>
c001fbf0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fbf4:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fbfc:	40                   	inc    eax
c001fbfd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc00:	c1 e0 03             	shl    eax,0x3
c001fc03:	5a                   	pop    edx
c001fc04:	59                   	pop    ecx
c001fc05:	50                   	push   eax
c001fc06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fc09:	e8 b9 67 ff ff       	call   c00163c7 <realloc>
c001fc0e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc11:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fc15:	b9 08 00 00 00       	mov    ecx,0x8
c001fc1a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fc1d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fc21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc23:	83 c4 2c             	add    esp,0x2c
c001fc26:	5b                   	pop    ebx
c001fc27:	5e                   	pop    esi
c001fc28:	5f                   	pop    edi
c001fc29:	5d                   	pop    ebp
c001fc2a:	c3                   	ret    
c001fc2b:	90                   	nop

c001fc2c <EnvVarContainer::deleteEnv(char const*)>:
c001fc2c:	c3                   	ret    
c001fc2d:	90                   	nop

c001fc2e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fc2e:	55                   	push   ebp
c001fc2f:	57                   	push   edi
c001fc30:	56                   	push   esi
c001fc31:	53                   	push   ebx
c001fc32:	81 ec 38 01 00 00    	sub    esp,0x138
c001fc38:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fc3f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fc46:	68 14 01 00 00       	push   0x114
c001fc4b:	e8 8b 67 ff ff       	call   c00163db <malloc>
c001fc50:	83 c4 0c             	add    esp,0xc
c001fc53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc5d:	89 c3                	mov    ebx,eax
c001fc5f:	50                   	push   eax
c001fc60:	e8 c5 a7 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c001fc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc68:	e8 9f aa ff ff       	call   c001a70c <File::exists()>
c001fc6d:	83 c4 10             	add    esp,0x10
c001fc70:	84 c0                	test   al,al
c001fc72:	75 31                	jne    c001fca5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fc74:	50                   	push   eax
c001fc75:	50                   	push   eax
c001fc76:	6a 12                	push   0x12
c001fc78:	53                   	push   ebx
c001fc79:	e8 ca a7 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c001fc7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fc80:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fc83:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc86:	e8 f5 08 fe ff       	call   c0000580 <strlen>
c001fc8b:	5a                   	pop    edx
c001fc8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fc90:	52                   	push   edx
c001fc91:	31 d2                	xor    edx,edx
c001fc93:	56                   	push   esi
c001fc94:	52                   	push   edx
c001fc95:	50                   	push   eax
c001fc96:	53                   	push   ebx
c001fc97:	ff d7                	call   edi
c001fc99:	83 c4 14             	add    esp,0x14
c001fc9c:	53                   	push   ebx
c001fc9d:	e8 04 a8 ff ff       	call   c001a4a6 <File::close()>
c001fca2:	83 c4 10             	add    esp,0x10
c001fca5:	56                   	push   esi
c001fca6:	31 f6                	xor    esi,esi
c001fca8:	68 00 01 00 00       	push   0x100
c001fcad:	6a 00                	push   0x0
c001fcaf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fcb3:	50                   	push   eax
c001fcb4:	e8 37 08 fe ff       	call   c00004f0 <memset>
c001fcb9:	5f                   	pop    edi
c001fcba:	58                   	pop    eax
c001fcbb:	6a 01                	push   0x1
c001fcbd:	53                   	push   ebx
c001fcbe:	e8 85 a7 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c001fcc3:	83 c4 10             	add    esp,0x10
c001fcc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fcce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fcdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fcdf:	52                   	push   edx
c001fce0:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001fce4:	51                   	push   ecx
c001fce5:	6a 00                	push   0x0
c001fce7:	6a 01                	push   0x1
c001fce9:	53                   	push   ebx
c001fcea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fced:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fcf2:	83 c4 20             	add    esp,0x20
c001fcf5:	85 c0                	test   eax,eax
c001fcf7:	89 c1                	mov    ecx,eax
c001fcf9:	0f 84 36 01 00 00    	je     c001fe35 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fcff:	83 f8 0d             	cmp    eax,0xd
c001fd02:	0f 84 22 01 00 00    	je     c001fe2a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd0d:	0f 84 f0 00 00 00    	je     c001fe03 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fd13:	83 f8 0a             	cmp    eax,0xa
c001fd16:	74 13                	je     c001fd2b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd18:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd1d:	74 0c                	je     c001fd2b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd1f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fd25:	0f 8e f6 00 00 00    	jle    c001fe21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fd2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	8d 78 01             	lea    edi,[eax+0x1]
c001fd35:	57                   	push   edi
c001fd36:	e8 a0 66 ff ff       	call   c00163db <malloc>
c001fd3b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fd3f:	8d 56 04             	lea    edx,[esi+0x4]
c001fd42:	89 14 24             	mov    DWORD PTR [esp],edx
c001fd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fd4d:	e8 89 66 ff ff       	call   c00163db <malloc>
c001fd52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fd56:	83 c4 0c             	add    esp,0xc
c001fd59:	57                   	push   edi
c001fd5a:	6a 00                	push   0x0
c001fd5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fd60:	e8 8b 07 fe ff       	call   c00004f0 <memset>
c001fd65:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd69:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fd6d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd73:	83 c4 0c             	add    esp,0xc
c001fd76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd7a:	52                   	push   edx
c001fd7b:	6a 00                	push   0x0
c001fd7d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fd81:	e8 6a 07 fe ff       	call   c00004f0 <memset>
c001fd86:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd8a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fd8e:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd91:	e8 ea 07 fe ff       	call   c0000580 <strlen>
c001fd96:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fd9a:	89 c1                	mov    ecx,eax
c001fd9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd9e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fda7:	40                   	inc    eax
c001fda8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fdab:	85 d2                	test   edx,edx
c001fdad:	75 0c                	jne    c001fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fdaf:	83 ec 0c             	sub    esp,0xc
c001fdb2:	6a 08                	push   0x8
c001fdb4:	e8 22 66 ff ff       	call   c00163db <malloc>
c001fdb9:	eb 0c                	jmp    c001fdc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fdbb:	51                   	push   ecx
c001fdbc:	51                   	push   ecx
c001fdbd:	c1 e0 03             	shl    eax,0x3
c001fdc0:	50                   	push   eax
c001fdc1:	52                   	push   edx
c001fdc2:	e8 00 66 ff ff       	call   c00163c7 <realloc>
c001fdc7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fdca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fdd3:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fdd7:	b9 08 00 00 00       	mov    ecx,0x8
c001fddc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fde0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fde2:	50                   	push   eax
c001fde3:	31 f6                	xor    esi,esi
c001fde5:	68 00 01 00 00       	push   0x100
c001fdea:	6a 00                	push   0x0
c001fdec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fdf0:	50                   	push   eax
c001fdf1:	e8 fa 06 fe ff       	call   c00004f0 <memset>
c001fdf6:	83 c4 10             	add    esp,0x10
c001fdf9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fe01:	eb 27                	jmp    c001fe2a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe03:	83 f8 3d             	cmp    eax,0x3d
c001fe06:	74 1e                	je     c001fe26 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fe08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fe0e:	7f 07                	jg     c001fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fe10:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001fe14:	46                   	inc    esi
c001fe15:	eb 13                	jmp    c001fe2a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe17:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fe1f:	eb 09                	jmp    c001fe2a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe21:	83 f8 3d             	cmp    eax,0x3d
c001fe24:	75 ea                	jne    c001fe10 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fe26:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fe2a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe2f:	0f 85 99 fe ff ff    	jne    c001fcce <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fe35:	83 ec 0c             	sub    esp,0xc
c001fe38:	53                   	push   ebx
c001fe39:	e8 68 a6 ff ff       	call   c001a4a6 <File::close()>
c001fe3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fe40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fe46:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fe4c:	5b                   	pop    ebx
c001fe4d:	5e                   	pop    esi
c001fe4e:	5f                   	pop    edi
c001fe4f:	5d                   	pop    ebp
c001fe50:	c3                   	ret    
c001fe51:	90                   	nop

c001fe52 <EnvVarContainer::__loadSystem()>:
c001fe52:	83 ec 10             	sub    esp,0x10
c001fe55:	68 c0 40 03 c0       	push   0xc00340c0
c001fe5a:	68 4c 27 03 c0       	push   0xc003274c
c001fe5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe63:	e8 c6 fd ff ff       	call   c001fc2e <EnvVarContainer::loadFrom(char const*, char const*)>
c001fe68:	83 c4 1c             	add    esp,0x1c
c001fe6b:	c3                   	ret    

c001fe6c <EnvVarContainer::__loadUser()>:
c001fe6c:	c3                   	ret    
c001fe6d:	90                   	nop

c001fe6e <EnvVarContainer::EnvVarContainer(Process*)>:
c001fe6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe8e:	90                   	nop
c001fe8f:	c3                   	ret    

c001fe90 <EnvVarContainer::~EnvVarContainer()>:
c001fe90:	83 ec 0c             	sub    esp,0xc
c001fe93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe9a:	85 c0                	test   eax,eax
c001fe9c:	74 1d                	je     c001febb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fe9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea2:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea4:	85 c0                	test   eax,eax
c001fea6:	74 13                	je     c001febb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	50                   	push   eax
c001feb3:	e8 33 65 ff ff       	call   c00163eb <free>
c001feb8:	83 c4 10             	add    esp,0x10
c001febb:	90                   	nop
c001febc:	83 c4 0c             	add    esp,0xc
c001febf:	c3                   	ret    

c001fec0 <KeGetEnv(Process*, char const*)>:
c001fec0:	53                   	push   ebx
c001fec1:	83 ec 08             	sub    esp,0x8
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fece:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fed2:	74 04                	je     c001fed8 <KeGetEnv(Process*, char const*)+0x18>
c001fed4:	85 c0                	test   eax,eax
c001fed6:	75 0b                	jne    c001fee3 <KeGetEnv(Process*, char const*)+0x23>
c001fed8:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fedd:	85 c0                	test   eax,eax
c001fedf:	75 19                	jne    c001fefa <KeGetEnv(Process*, char const*)+0x3a>
c001fee1:	eb 27                	jmp    c001ff0a <KeGetEnv(Process*, char const*)+0x4a>
c001fee3:	52                   	push   edx
c001fee4:	52                   	push   edx
c001fee5:	53                   	push   ebx
c001fee6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001feec:	e8 3b fc ff ff       	call   c001fb2c <EnvVarContainer::getEnv(char const*)>
c001fef1:	83 c4 10             	add    esp,0x10
c001fef4:	85 c0                	test   eax,eax
c001fef6:	75 28                	jne    c001ff20 <KeGetEnv(Process*, char const*)+0x60>
c001fef8:	eb de                	jmp    c001fed8 <KeGetEnv(Process*, char const*)+0x18>
c001fefa:	52                   	push   edx
c001fefb:	52                   	push   edx
c001fefc:	53                   	push   ebx
c001fefd:	50                   	push   eax
c001fefe:	e8 29 fc ff ff       	call   c001fb2c <EnvVarContainer::getEnv(char const*)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	85 c0                	test   eax,eax
c001ff08:	75 16                	jne    c001ff20 <KeGetEnv(Process*, char const*)+0x60>
c001ff0a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ff0e:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff17:	83 c4 08             	add    esp,0x8
c001ff1a:	5b                   	pop    ebx
c001ff1b:	e9 0c fc ff ff       	jmp    c001fb2c <EnvVarContainer::getEnv(char const*)>
c001ff20:	83 c4 08             	add    esp,0x8
c001ff23:	5b                   	pop    ebx
c001ff24:	c3                   	ret    

c001ff25 <KeSetEnvSystem(char const*, char const*)>:
c001ff25:	83 ec 10             	sub    esp,0x10
c001ff28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff30:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001ff36:	e8 2f fc ff ff       	call   c001fb6a <EnvVarContainer::setEnv(char const*, char const*)>
c001ff3b:	83 c4 1c             	add    esp,0x1c
c001ff3e:	c3                   	ret    

c001ff3f <KeSetEnvUser(char const*, char const*)>:
c001ff3f:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ff44:	85 c0                	test   eax,eax
c001ff46:	74 15                	je     c001ff5d <KeSetEnvUser(char const*, char const*)+0x1e>
c001ff48:	83 ec 10             	sub    esp,0x10
c001ff4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff53:	50                   	push   eax
c001ff54:	e8 11 fc ff ff       	call   c001fb6a <EnvVarContainer::setEnv(char const*, char const*)>
c001ff59:	83 c4 1c             	add    esp,0x1c
c001ff5c:	c3                   	ret    
c001ff5d:	c3                   	ret    

c001ff5e <KeSetEnvProcess(Process*, char const*, char const*)>:
c001ff5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff62:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001ff68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff6c:	e9 f9 fb ff ff       	jmp    c001fb6a <EnvVarContainer::setEnv(char const*, char const*)>

c001ff71 <KeDeleteEnvSystem(char const*)>:
c001ff71:	c3                   	ret    

c001ff72 <KeDeleteEnvUser(char const*)>:
c001ff72:	c3                   	ret    

c001ff73 <KeDeleteEnvProcess(Process*, char const*)>:
c001ff73:	c3                   	ret    

c001ff74 <KeNewProcessEnv(Process*)>:
c001ff74:	83 ec 28             	sub    esp,0x28
c001ff77:	6a 0c                	push   0xc
c001ff79:	e8 5d 64 ff ff       	call   c00163db <malloc>
c001ff7e:	5a                   	pop    edx
c001ff7f:	59                   	pop    ecx
c001ff80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ff84:	50                   	push   eax
c001ff85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff89:	e8 e0 fe ff ff       	call   c001fe6e <EnvVarContainer::EnvVarContainer(Process*)>
c001ff8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff92:	83 c4 2c             	add    esp,0x2c
c001ff95:	c3                   	ret    

c001ff96 <KeCopyProcessEnv(Process*, Process*)>:
c001ff96:	57                   	push   edi
c001ff97:	56                   	push   esi
c001ff98:	53                   	push   ebx
c001ff99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9d:	83 ec 0c             	sub    esp,0xc
c001ffa0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001ffa6:	6a 0c                	push   0xc
c001ffa8:	e8 2e 64 ff ff       	call   c00163db <malloc>
c001ffad:	89 c3                	mov    ebx,eax
c001ffaf:	58                   	pop    eax
c001ffb0:	5a                   	pop    edx
c001ffb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb5:	53                   	push   ebx
c001ffb6:	e8 b3 fe ff ff       	call   c001fe6e <EnvVarContainer::EnvVarContainer(Process*)>
c001ffbb:	8b 07                	mov    eax,DWORD PTR [edi]
c001ffbd:	89 03                	mov    DWORD PTR [ebx],eax
c001ffbf:	c1 e0 03             	shl    eax,0x3
c001ffc2:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffc5:	e8 11 64 ff ff       	call   c00163db <malloc>
c001ffca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001ffcd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ffcf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001ffd2:	89 c7                	mov    edi,eax
c001ffd4:	c1 e1 03             	shl    ecx,0x3
c001ffd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffd9:	83 c4 10             	add    esp,0x10
c001ffdc:	89 d8                	mov    eax,ebx
c001ffde:	5b                   	pop    ebx
c001ffdf:	5e                   	pop    esi
c001ffe0:	5f                   	pop    edi
c001ffe1:	c3                   	ret    

c001ffe2 <KeLoadSystemEnv()>:
c001ffe2:	53                   	push   ebx
c001ffe3:	83 ec 14             	sub    esp,0x14
c001ffe6:	6a 0c                	push   0xc
c001ffe8:	e8 ee 63 ff ff       	call   c00163db <malloc>
c001ffed:	89 c3                	mov    ebx,eax
c001ffef:	58                   	pop    eax
c001fff0:	5a                   	pop    edx
c001fff1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001fff7:	53                   	push   ebx
c001fff8:	e8 71 fe ff ff       	call   c001fe6e <EnvVarContainer::EnvVarContainer(Process*)>
c001fffd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020000:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c0020006:	e8 47 fe ff ff       	call   c001fe52 <EnvVarContainer::__loadSystem()>
c002000b:	83 c4 18             	add    esp,0x18
c002000e:	5b                   	pop    ebx
c002000f:	c3                   	ret    

c0020010 <KeLoadUserEnv()>:
c0020010:	53                   	push   ebx
c0020011:	83 ec 14             	sub    esp,0x14
c0020014:	6a 0c                	push   0xc
c0020016:	e8 c0 63 ff ff       	call   c00163db <malloc>
c002001b:	89 c3                	mov    ebx,eax
c002001d:	58                   	pop    eax
c002001e:	5a                   	pop    edx
c002001f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020025:	53                   	push   ebx
c0020026:	e8 43 fe ff ff       	call   c001fe6e <EnvVarContainer::EnvVarContainer(Process*)>
c002002b:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020031:	83 c4 18             	add    esp,0x18
c0020034:	5b                   	pop    ebx
c0020035:	c3                   	ret    

c0020036 <KeFlushEnv()>:
c0020036:	c3                   	ret    

c0020037 <KeGetProcessTotalEnvCount(Process*)>:
c0020037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003b:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020041:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020047:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002004c:	8b 00                	mov    eax,DWORD PTR [eax]
c002004e:	03 01                	add    eax,DWORD PTR [ecx]
c0020050:	85 d2                	test   edx,edx
c0020052:	74 02                	je     c0020056 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020054:	03 02                	add    eax,DWORD PTR [edx]
c0020056:	c3                   	ret    

c0020057 <KeGetProcessEnvPair(Process*, int)>:
c0020057:	57                   	push   edi
c0020058:	56                   	push   esi
c0020059:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002005f:	53                   	push   ebx
c0020060:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020064:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020068:	85 f6                	test   esi,esi
c002006a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002006e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020074:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020076:	75 16                	jne    c002008e <KeGetProcessEnvPair(Process*, int)+0x37>
c0020078:	39 c2                	cmp    edx,eax
c002007a:	7c 16                	jl     c0020092 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002007c:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c0020082:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020084:	01 c6                	add    esi,eax
c0020086:	39 d6                	cmp    esi,edx
c0020088:	7e 3c                	jle    c00200c6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002008a:	29 c2                	sub    edx,eax
c002008c:	eb 04                	jmp    c0020092 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002008e:	39 c2                	cmp    edx,eax
c0020090:	7d 05                	jge    c0020097 <KeGetProcessEnvPair(Process*, int)+0x40>
c0020092:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020095:	eb 20                	jmp    c00200b7 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020097:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020099:	8d 0c 07             	lea    ecx,[edi+eax*1]
c002009c:	39 d1                	cmp    ecx,edx
c002009e:	7e 04                	jle    c00200a4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00200a0:	29 c2                	sub    edx,eax
c00200a2:	eb 10                	jmp    c00200b4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00200a4:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00200aa:	03 0e                	add    ecx,DWORD PTR [esi]
c00200ac:	39 d1                	cmp    ecx,edx
c00200ae:	7e 16                	jle    c00200c6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00200b0:	29 c2                	sub    edx,eax
c00200b2:	29 fa                	sub    edx,edi
c00200b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00200b7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00200ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00200bc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00200bf:	89 03                	mov    DWORD PTR [ebx],eax
c00200c1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00200c4:	eb 1d                	jmp    c00200e3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00200c6:	83 ec 0c             	sub    esp,0xc
c00200c9:	68 6e 27 03 c0       	push   0xc003276e
c00200ce:	e8 c7 00 00 00       	call   c002019a <KePanic(char const*)>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00200dc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200e3:	89 d8                	mov    eax,ebx
c00200e5:	5b                   	pop    ebx
c00200e6:	5e                   	pop    esi
c00200e7:	5f                   	pop    edi
c00200e8:	c2 04 00             	ret    0x4

c00200eb <CPU::current()>:
c00200eb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00200f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00200f6:	c3                   	ret    

c00200f7 <operator new(unsigned long)>:
c00200f7:	e9 df 62 ff ff       	jmp    c00163db <malloc>

c00200fc <operator delete(void*)>:
c00200fc:	e9 fa 62 ff ff       	jmp    c00163fb <rfree>

c0020101 <disableIRQs()>:
c0020101:	fa                   	cli    
c0020102:	c3                   	ret    

c0020103 <enableIRQs()>:
c0020103:	fb                   	sti    
c0020104:	c3                   	ret    

c0020105 <lockScheduler()>:
c0020105:	fa                   	cli    
c0020106:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002010c:	c3                   	ret    

c002010d <unlockScheduler()>:
c002010d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020112:	48                   	dec    eax
c0020113:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020118:	75 01                	jne    c002011b <unlockScheduler()+0xe>
c002011a:	fb                   	sti    
c002011b:	c3                   	ret    

c002011c <lockStuff()>:
c002011c:	fa                   	cli    
c002011d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020123:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020129:	c3                   	ret    

c002012a <unlockStuff()>:
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020132:	48                   	dec    eax
c0020133:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020138:	75 18                	jne    c0020152 <unlockStuff()+0x28>
c002013a:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020141:	74 0f                	je     c0020152 <unlockStuff()+0x28>
c0020143:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002014d:	e8 42 50 00 00       	call   c0025194 <schedule()>
c0020152:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020157:	48                   	dec    eax
c0020158:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002015d:	75 01                	jne    c0020160 <unlockStuff()+0x36>
c002015f:	fb                   	sti    
c0020160:	83 c4 0c             	add    esp,0xc
c0020163:	c3                   	ret    

c0020164 <Virt::getAKernelVAS()>:
c0020164:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020169:	c3                   	ret    

c002016a <__not_memcpy>:
c002016a:	57                   	push   edi
c002016b:	56                   	push   esi
c002016c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020170:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020174:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020178:	89 c7                	mov    edi,eax
c002017a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002017c:	5e                   	pop    esi
c002017d:	5f                   	pop    edi
c002017e:	c3                   	ret    
c002017f:	90                   	nop

c0020180 <Mutex::Mutex()>:
c0020180:	83 ec 0c             	sub    esp,0xc
c0020183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020187:	83 ec 08             	sub    esp,0x8
c002018a:	6a 01                	push   0x1
c002018c:	50                   	push   eax
c002018d:	e8 ae 03 00 00       	call   c0020540 <Semaphore::Semaphore(int)>
c0020192:	83 c4 10             	add    esp,0x10
c0020195:	90                   	nop
c0020196:	83 c4 0c             	add    esp,0xc
c0020199:	c3                   	ret    

c002019a <KePanic(char const*)>:
c002019a:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00201a1:	e9 e6 6c 00 00       	jmp    c0026e8c <HalPanic(char const*)>

c00201a6 <KePowerThread(void*)>:
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201ae:	48                   	dec    eax
c00201af:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201b4:	75 01                	jne    c00201b7 <KePowerThread(void*)+0x11>
c00201b6:	fb                   	sti    
c00201b7:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00201be:	83 ec 0c             	sub    esp,0xc
c00201c1:	6a 0a                	push   0xa
c00201c3:	e8 b8 51 00 00       	call   c0025380 <sleep(unsigned int)>
c00201c8:	83 c4 10             	add    esp,0x10
c00201cb:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00201d2:	eb e3                	jmp    c00201b7 <KePowerThread(void*)+0x11>

c00201d4 <KeChangePowerSettings(PowerSettings)>:
c00201d4:	57                   	push   edi
c00201d5:	b9 09 00 00 00       	mov    ecx,0x9
c00201da:	56                   	push   esi
c00201db:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00201e0:	fc                   	cld    
c00201e1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00201e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00201e7:	5e                   	pop    esi
c00201e8:	5f                   	pop    edi
c00201e9:	c3                   	ret    

c00201ea <KeUserIOReceived()>:
c00201ea:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00201f4:	c3                   	ret    

c00201f5 <KeHandlePowerButton()>:
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00201fd:	83 f8 02             	cmp    eax,0x2
c0020200:	75 10                	jne    c0020212 <KeHandlePowerButton()+0x1d>
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002020b:	e8 44 58 ff ff       	call   c0015a54 <Computer::shutdown()>
c0020210:	eb 11                	jmp    c0020223 <KeHandlePowerButton()+0x2e>
c0020212:	48                   	dec    eax
c0020213:	75 11                	jne    c0020226 <KeHandlePowerButton()+0x31>
c0020215:	83 ec 0c             	sub    esp,0xc
c0020218:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002021e:	e8 61 58 ff ff       	call   c0015a84 <Computer::sleep()>
c0020223:	83 c4 10             	add    esp,0x10
c0020226:	83 c4 0c             	add    esp,0xc
c0020229:	c3                   	ret    

c002022a <KeHandleSleepButton()>:
c002022a:	83 ec 0c             	sub    esp,0xc
c002022d:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c0020232:	83 f8 02             	cmp    eax,0x2
c0020235:	75 10                	jne    c0020247 <KeHandleSleepButton()+0x1d>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020240:	e8 0f 58 ff ff       	call   c0015a54 <Computer::shutdown()>
c0020245:	eb 11                	jmp    c0020258 <KeHandleSleepButton()+0x2e>
c0020247:	48                   	dec    eax
c0020248:	75 11                	jne    c002025b <KeHandleSleepButton()+0x31>
c002024a:	83 ec 0c             	sub    esp,0xc
c002024d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020253:	e8 2c 58 ff ff       	call   c0015a84 <Computer::sleep()>
c0020258:	83 c4 10             	add    esp,0x10
c002025b:	83 c4 0c             	add    esp,0xc
c002025e:	c3                   	ret    

c002025f <KeSetupPowerManager()>:
c002025f:	83 ec 0c             	sub    esp,0xc
c0020262:	68 f0 00 00 00       	push   0xf0
c0020267:	6a 00                	push   0x0
c0020269:	68 a6 01 02 c0       	push   0xc00201a6
c002026e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020274:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002027e:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020285:	e8 be 4c 00 00       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c002028a:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020294:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002029e:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00202a8:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00202b2:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00202bc:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00202c6:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00202d0:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00202da:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00202e4:	83 c4 1c             	add    esp,0x1c
c00202e7:	c3                   	ret    

c00202e8 <KeRand()>:
c00202e8:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00202f2:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00202fc:	53                   	push   ebx
c00202fd:	01 c1                	add    ecx,eax
c00202ff:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020304:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c002030a:	01 ca                	add    edx,ecx
c002030c:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020311:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020316:	83 d2 00             	adc    edx,0x0
c0020319:	0f b7 da             	movzx  ebx,dx
c002031c:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020322:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0020326:	5b                   	pop    ebx
c0020327:	c3                   	ret    

c0020328 <KeSeedRand(unsigned int)>:
c0020328:	53                   	push   ebx
c0020329:	83 ec 08             	sub    esp,0x8
c002032c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020330:	e8 76 6e 00 00       	call   c00271ab <HalGetRand()>
c0020335:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002033f:	31 d8                	xor    eax,ebx
c0020341:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020346:	e8 9d ff ff ff       	call   c00202e8 <KeRand()>
c002034b:	83 c4 08             	add    esp,0x8
c002034e:	5b                   	pop    ebx
c002034f:	eb 97                	jmp    c00202e8 <KeRand()>

c0020351 <KeInitRand()>:
c0020351:	83 ec 0c             	sub    esp,0xc
c0020354:	e8 47 6c 00 00       	call   c0026fa0 <HalQueryPerformanceCounter()>
c0020359:	0f 20 da             	mov    edx,cr3
c002035c:	0f 22 da             	mov    cr3,edx
c002035f:	0f 20 da             	mov    edx,cr3
c0020362:	0f 22 da             	mov    cr3,edx
c0020365:	0f 20 da             	mov    edx,cr3
c0020368:	0f 22 da             	mov    cr3,edx
c002036b:	0f 20 da             	mov    edx,cr3
c002036e:	0f 22 da             	mov    cr3,edx
c0020371:	83 ec 0c             	sub    esp,0xc
c0020374:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020379:	50                   	push   eax
c002037a:	e8 a9 ff ff ff       	call   c0020328 <KeSeedRand(unsigned int)>
c002037f:	83 c4 1c             	add    esp,0x1c
c0020382:	c3                   	ret    
c0020383:	90                   	nop

c0020384 <KeResolveCompatibilitySymbol(char*)>:
c0020384:	83 ec 0c             	sub    esp,0xc
c0020387:	83 ec 08             	sub    esp,0x8
c002038a:	68 88 27 03 c0       	push   0xc0032788
c002038f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020393:	e8 e8 03 fe ff       	call   c0000780 <strcmp>
c0020398:	83 c4 10             	add    esp,0x10
c002039b:	85 c0                	test   eax,eax
c002039d:	0f 94 c0             	sete   al
c00203a0:	0f b6 c0             	movzx  eax,al
c00203a3:	85 c0                	test   eax,eax
c00203a5:	74 0d                	je     c00203b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00203a7:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00203ac:	e9 8b 01 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203b1:	8d 76 00             	lea    esi,[esi+0x0]
c00203b4:	83 ec 08             	sub    esp,0x8
c00203b7:	68 91 27 03 c0       	push   0xc0032791
c00203bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c0:	e8 bb 03 fe ff       	call   c0000780 <strcmp>
c00203c5:	83 c4 10             	add    esp,0x10
c00203c8:	85 c0                	test   eax,eax
c00203ca:	0f 94 c0             	sete   al
c00203cd:	0f b6 c0             	movzx  eax,al
c00203d0:	85 c0                	test   eax,eax
c00203d2:	74 0c                	je     c00203e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00203d4:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00203d9:	e9 5e 01 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203de:	66 90                	xchg   ax,ax
c00203e0:	83 ec 08             	sub    esp,0x8
c00203e3:	68 9b 27 03 c0       	push   0xc003279b
c00203e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ec:	e8 8f 03 fe ff       	call   c0000780 <strcmp>
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	85 c0                	test   eax,eax
c00203f6:	0f 94 c0             	sete   al
c00203f9:	0f b6 c0             	movzx  eax,al
c00203fc:	85 c0                	test   eax,eax
c00203fe:	74 0c                	je     c002040c <KeResolveCompatibilitySymbol(char*)+0x88>
c0020400:	b8 24 e3 02 c0       	mov    eax,0xc002e324
c0020405:	e9 32 01 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002040a:	66 90                	xchg   ax,ax
c002040c:	83 ec 08             	sub    esp,0x8
c002040f:	68 a4 27 03 c0       	push   0xc00327a4
c0020414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020418:	e8 63 03 fe ff       	call   c0000780 <strcmp>
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	85 c0                	test   eax,eax
c0020422:	0f 94 c0             	sete   al
c0020425:	0f b6 c0             	movzx  eax,al
c0020428:	85 c0                	test   eax,eax
c002042a:	74 0c                	je     c0020438 <KeResolveCompatibilitySymbol(char*)+0xb4>
c002042c:	b8 9a 01 02 c0       	mov    eax,0xc002019a
c0020431:	e9 06 01 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020436:	66 90                	xchg   ax,ax
c0020438:	83 ec 08             	sub    esp,0x8
c002043b:	68 b7 27 03 c0       	push   0xc00327b7
c0020440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020444:	e8 37 03 fe ff       	call   c0000780 <strcmp>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	85 c0                	test   eax,eax
c002044e:	0f 94 c0             	sete   al
c0020451:	0f b6 c0             	movzx  eax,al
c0020454:	85 c0                	test   eax,eax
c0020456:	74 0c                	je     c0020464 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020458:	b8 39 fa 01 c0       	mov    eax,0xc001fa39
c002045d:	e9 da 00 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020462:	66 90                	xchg   ax,ax
c0020464:	83 ec 08             	sub    esp,0x8
c0020467:	68 d4 27 03 c0       	push   0xc00327d4
c002046c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020470:	e8 0b 03 fe ff       	call   c0000780 <strcmp>
c0020475:	83 c4 10             	add    esp,0x10
c0020478:	85 c0                	test   eax,eax
c002047a:	0f 94 c0             	sete   al
c002047d:	0f b6 c0             	movzx  eax,al
c0020480:	85 c0                	test   eax,eax
c0020482:	74 0c                	je     c0020490 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020484:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0020489:	e9 ae 00 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002048e:	66 90                	xchg   ax,ax
c0020490:	83 ec 08             	sub    esp,0x8
c0020493:	68 de 27 03 c0       	push   0xc00327de
c0020498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002049c:	e8 df 02 fe ff       	call   c0000780 <strcmp>
c00204a1:	83 c4 10             	add    esp,0x10
c00204a4:	85 c0                	test   eax,eax
c00204a6:	0f 94 c0             	sete   al
c00204a9:	0f b6 c0             	movzx  eax,al
c00204ac:	85 c0                	test   eax,eax
c00204ae:	74 0c                	je     c00204bc <KeResolveCompatibilitySymbol(char*)+0x138>
c00204b0:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c00204b5:	e9 82 00 00 00       	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204ba:	66 90                	xchg   ax,ax
c00204bc:	83 ec 08             	sub    esp,0x8
c00204bf:	68 e7 27 03 c0       	push   0xc00327e7
c00204c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204c8:	e8 b3 02 fe ff       	call   c0000780 <strcmp>
c00204cd:	83 c4 10             	add    esp,0x10
c00204d0:	85 c0                	test   eax,eax
c00204d2:	0f 94 c0             	sete   al
c00204d5:	0f b6 c0             	movzx  eax,al
c00204d8:	85 c0                	test   eax,eax
c00204da:	74 08                	je     c00204e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00204dc:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00204e1:	eb 59                	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204e3:	90                   	nop
c00204e4:	83 ec 08             	sub    esp,0x8
c00204e7:	68 ff 27 03 c0       	push   0xc00327ff
c00204ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204f0:	e8 8b 02 fe ff       	call   c0000780 <strcmp>
c00204f5:	83 c4 10             	add    esp,0x10
c00204f8:	85 c0                	test   eax,eax
c00204fa:	0f 94 c0             	sete   al
c00204fd:	0f b6 c0             	movzx  eax,al
c0020500:	85 c0                	test   eax,eax
c0020502:	74 08                	je     c002050c <KeResolveCompatibilitySymbol(char*)+0x188>
c0020504:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020509:	eb 31                	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002050b:	90                   	nop
c002050c:	83 ec 08             	sub    esp,0x8
c002050f:	68 0c 28 03 c0       	push   0xc003280c
c0020514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020518:	e8 63 02 fe ff       	call   c0000780 <strcmp>
c002051d:	83 c4 10             	add    esp,0x10
c0020520:	85 c0                	test   eax,eax
c0020522:	0f 94 c0             	sete   al
c0020525:	0f b6 c0             	movzx  eax,al
c0020528:	85 c0                	test   eax,eax
c002052a:	74 08                	je     c0020534 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c002052c:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020531:	eb 09                	jmp    c002053c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020533:	90                   	nop
c0020534:	b8 00 00 00 00       	mov    eax,0x0
c0020539:	8d 76 00             	lea    esi,[esi+0x0]
c002053c:	83 c4 0c             	add    esp,0xc
c002053f:	c3                   	ret    

c0020540 <Semaphore::Semaphore(int)>:
c0020540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020544:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020548:	89 10                	mov    DWORD PTR [eax],edx
c002054a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002054e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020559:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020564:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002056b:	90                   	nop
c002056c:	c3                   	ret    
c002056d:	90                   	nop
c002056e:	66 90                	xchg   ax,ax

c0020570 <Semaphore::tryAcquire()>:
c0020570:	83 ec 0c             	sub    esp,0xc
c0020573:	fa                   	cli    
c0020574:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020579:	83 c0 01             	add    eax,0x1
c002057c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020581:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020586:	83 c0 01             	add    eax,0x1
c0020589:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020592:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020599:	8b 00                	mov    eax,DWORD PTR [eax]
c002059b:	39 c2                	cmp    edx,eax
c002059d:	7d 5d                	jge    c00205fc <Semaphore::tryAcquire()+0x8c>
c002059f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205a6:	8d 50 01             	lea    edx,[eax+0x1]
c00205a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00205b0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205b5:	83 e8 01             	sub    eax,0x1
c00205b8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00205bd:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205c2:	85 c0                	test   eax,eax
c00205c4:	75 1a                	jne    c00205e0 <Semaphore::tryAcquire()+0x70>
c00205c6:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00205cb:	85 c0                	test   eax,eax
c00205cd:	74 11                	je     c00205e0 <Semaphore::tryAcquire()+0x70>
c00205cf:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00205d9:	e8 b6 4b 00 00       	call   c0025194 <schedule()>
c00205de:	66 90                	xchg   ax,ax
c00205e0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205e5:	83 e8 01             	sub    eax,0x1
c00205e8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00205ed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205f2:	85 c0                	test   eax,eax
c00205f4:	75 02                	jne    c00205f8 <Semaphore::tryAcquire()+0x88>
c00205f6:	fb                   	sti    
c00205f7:	90                   	nop
c00205f8:	b0 01                	mov    al,0x1
c00205fa:	eb 4c                	jmp    c0020648 <Semaphore::tryAcquire()+0xd8>
c00205fc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020601:	83 e8 01             	sub    eax,0x1
c0020604:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020609:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002060e:	85 c0                	test   eax,eax
c0020610:	75 1a                	jne    c002062c <Semaphore::tryAcquire()+0xbc>
c0020612:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020617:	85 c0                	test   eax,eax
c0020619:	74 11                	je     c002062c <Semaphore::tryAcquire()+0xbc>
c002061b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020625:	e8 6a 4b 00 00       	call   c0025194 <schedule()>
c002062a:	66 90                	xchg   ax,ax
c002062c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020631:	83 e8 01             	sub    eax,0x1
c0020634:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020639:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002063e:	85 c0                	test   eax,eax
c0020640:	75 02                	jne    c0020644 <Semaphore::tryAcquire()+0xd4>
c0020642:	fb                   	sti    
c0020643:	90                   	nop
c0020644:	b0 00                	mov    al,0x0
c0020646:	66 90                	xchg   ax,ax
c0020648:	83 c4 0c             	add    esp,0xc
c002064b:	c3                   	ret    

c002064c <Semaphore::assertLocked(char const*)>:
c002064c:	83 ec 0c             	sub    esp,0xc
c002064f:	fa                   	cli    
c0020650:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020655:	83 c0 01             	add    eax,0x1
c0020658:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002065d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020662:	83 c0 01             	add    eax,0x1
c0020665:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020675:	8b 00                	mov    eax,DWORD PTR [eax]
c0020677:	39 c2                	cmp    edx,eax
c0020679:	7d 11                	jge    c002068c <Semaphore::assertLocked(char const*)+0x40>
c002067b:	83 ec 0c             	sub    esp,0xc
c002067e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020682:	e8 13 fb ff ff       	call   c002019a <KePanic(char const*)>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	66 90                	xchg   ax,ax
c002068c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020691:	83 e8 01             	sub    eax,0x1
c0020694:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020699:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002069e:	85 c0                	test   eax,eax
c00206a0:	75 1a                	jne    c00206bc <Semaphore::assertLocked(char const*)+0x70>
c00206a2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206a7:	85 c0                	test   eax,eax
c00206a9:	74 11                	je     c00206bc <Semaphore::assertLocked(char const*)+0x70>
c00206ab:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206b5:	e8 da 4a 00 00       	call   c0025194 <schedule()>
c00206ba:	66 90                	xchg   ax,ax
c00206bc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206c1:	83 e8 01             	sub    eax,0x1
c00206c4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206c9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206ce:	85 c0                	test   eax,eax
c00206d0:	75 02                	jne    c00206d4 <Semaphore::assertLocked(char const*)+0x88>
c00206d2:	fb                   	sti    
c00206d3:	90                   	nop
c00206d4:	90                   	nop
c00206d5:	83 c4 0c             	add    esp,0xc
c00206d8:	c3                   	ret    
c00206d9:	90                   	nop
c00206da:	66 90                	xchg   ax,ax

c00206dc <Semaphore::acquire(int)>:
c00206dc:	83 ec 1c             	sub    esp,0x1c
c00206df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206e4:	0f 84 9a 00 00 00    	je     c0020784 <Semaphore::acquire(int)+0xa8>
c00206ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00206f2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00206f7:	90                   	nop
c00206f8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00206fd:	85 c0                	test   eax,eax
c00206ff:	74 77                	je     c0020778 <Semaphore::acquire(int)+0x9c>
c0020701:	83 ec 0c             	sub    esp,0xc
c0020704:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020708:	e8 63 fe ff ff       	call   c0020570 <Semaphore::tryAcquire()>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	83 f0 01             	xor    eax,0x1
c0020713:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020717:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c002071b:	83 f0 01             	xor    eax,0x1
c002071e:	0f b6 c0             	movzx  eax,al
c0020721:	85 c0                	test   eax,eax
c0020723:	75 4f                	jne    c0020774 <Semaphore::acquire(int)+0x98>
c0020725:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c002072a:	7f 2c                	jg     c0020758 <Semaphore::acquire(int)+0x7c>
c002072c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020730:	89 d0                	mov    eax,edx
c0020732:	c1 e0 02             	shl    eax,0x2
c0020735:	01 d0                	add    eax,edx
c0020737:	d1 e0                	shl    eax,1
c0020739:	83 ec 0c             	sub    esp,0xc
c002073c:	50                   	push   eax
c002073d:	e8 2a 4c 00 00       	call   c002536c <milliTenthSleep(unsigned int)>
c0020742:	83 c4 10             	add    esp,0x10
c0020745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020749:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002074d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020755:	eb a1                	jmp    c00206f8 <Semaphore::acquire(int)+0x1c>
c0020757:	90                   	nop
c0020758:	83 ec 0c             	sub    esp,0xc
c002075b:	68 90 01 00 00       	push   0x190
c0020760:	e8 07 4c 00 00       	call   c002536c <milliTenthSleep(unsigned int)>
c0020765:	83 c4 10             	add    esp,0x10
c0020768:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c002076d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020772:	eb 84                	jmp    c00206f8 <Semaphore::acquire(int)+0x1c>
c0020774:	90                   	nop
c0020775:	8d 76 00             	lea    esi,[esi+0x0]
c0020778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002077c:	e9 ff 00 00 00       	jmp    c0020880 <Semaphore::acquire(int)+0x1a4>
c0020781:	8d 76 00             	lea    esi,[esi+0x0]
c0020784:	fa                   	cli    
c0020785:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002078a:	83 c0 01             	add    eax,0x1
c002078d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020792:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020797:	83 c0 01             	add    eax,0x1
c002079a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002079f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207a3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00207a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00207ac:	39 c2                	cmp    edx,eax
c00207ae:	7d 14                	jge    c00207c4 <Semaphore::acquire(int)+0xe8>
c00207b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00207b7:	8d 50 01             	lea    edx,[eax+0x1]
c00207ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00207c1:	eb 6d                	jmp    c0020830 <Semaphore::acquire(int)+0x154>
c00207c3:	90                   	nop
c00207c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00207cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00207d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207d9:	85 c0                	test   eax,eax
c00207db:	75 13                	jne    c00207f0 <Semaphore::acquire(int)+0x114>
c00207dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00207e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00207eb:	eb 17                	jmp    c0020804 <Semaphore::acquire(int)+0x128>
c00207ed:	8d 76 00             	lea    esi,[esi+0x0]
c00207f0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00207f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207fc:	8b 12                	mov    edx,DWORD PTR [edx]
c00207fe:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020801:	8d 76 00             	lea    esi,[esi+0x0]
c0020804:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020809:	8b 10                	mov    edx,DWORD PTR [eax]
c002080b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002080f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020812:	83 ec 0c             	sub    esp,0xc
c0020815:	68 1c 28 03 c0       	push   0xc003281c
c002081a:	e8 f3 89 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002081f:	83 c4 10             	add    esp,0x10
c0020822:	83 ec 0c             	sub    esp,0xc
c0020825:	6a 05                	push   0x5
c0020827:	e8 24 4a 00 00       	call   c0025250 <blockTask(TaskState)>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	90                   	nop
c0020830:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020835:	83 e8 01             	sub    eax,0x1
c0020838:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002083d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020842:	85 c0                	test   eax,eax
c0020844:	75 1a                	jne    c0020860 <Semaphore::acquire(int)+0x184>
c0020846:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002084b:	85 c0                	test   eax,eax
c002084d:	74 11                	je     c0020860 <Semaphore::acquire(int)+0x184>
c002084f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020859:	e8 36 49 00 00       	call   c0025194 <schedule()>
c002085e:	66 90                	xchg   ax,ax
c0020860:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020865:	83 e8 01             	sub    eax,0x1
c0020868:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002086d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020872:	85 c0                	test   eax,eax
c0020874:	75 02                	jne    c0020878 <Semaphore::acquire(int)+0x19c>
c0020876:	fb                   	sti    
c0020877:	90                   	nop
c0020878:	b8 00 00 00 00       	mov    eax,0x0
c002087d:	8d 76 00             	lea    esi,[esi+0x0]
c0020880:	83 c4 1c             	add    esp,0x1c
c0020883:	c3                   	ret    

c0020884 <Semaphore::acquire()>:
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	83 ec 08             	sub    esp,0x8
c002088a:	6a 00                	push   0x0
c002088c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020890:	e8 47 fe ff ff       	call   c00206dc <Semaphore::acquire(int)>
c0020895:	83 c4 10             	add    esp,0x10
c0020898:	90                   	nop
c0020899:	83 c4 0c             	add    esp,0xc
c002089c:	c3                   	ret    
c002089d:	90                   	nop
c002089e:	66 90                	xchg   ax,ax

c00208a0 <Semaphore::release()>:
c00208a0:	83 ec 1c             	sub    esp,0x1c
c00208a3:	fa                   	cli    
c00208a4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208a9:	83 c0 01             	add    eax,0x1
c00208ac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208b1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208b6:	83 c0 01             	add    eax,0x1
c00208b9:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208c5:	85 c0                	test   eax,eax
c00208c7:	74 2b                	je     c00208f4 <Semaphore::release()+0x54>
c00208c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00208db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208e9:	e8 92 4b 00 00       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c00208ee:	83 c4 10             	add    esp,0x10
c00208f1:	eb 15                	jmp    c0020908 <Semaphore::release()+0x68>
c00208f3:	90                   	nop
c00208f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00208fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020902:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020905:	8d 76 00             	lea    esi,[esi+0x0]
c0020908:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002090d:	83 e8 01             	sub    eax,0x1
c0020910:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020915:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002091a:	85 c0                	test   eax,eax
c002091c:	75 1a                	jne    c0020938 <Semaphore::release()+0x98>
c002091e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020923:	85 c0                	test   eax,eax
c0020925:	74 11                	je     c0020938 <Semaphore::release()+0x98>
c0020927:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020931:	e8 5e 48 00 00       	call   c0025194 <schedule()>
c0020936:	66 90                	xchg   ax,ax
c0020938:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002093d:	83 e8 01             	sub    eax,0x1
c0020940:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020945:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002094a:	85 c0                	test   eax,eax
c002094c:	75 02                	jne    c0020950 <Semaphore::release()+0xb0>
c002094e:	fb                   	sti    
c002094f:	90                   	nop
c0020950:	90                   	nop
c0020951:	83 c4 1c             	add    esp,0x1c
c0020954:	c3                   	ret    

c0020955 <KiSigKill(int)>:
c0020955:	83 ec 0c             	sub    esp,0xc
c0020958:	6a 00                	push   0x0
c002095a:	6a 00                	push   0x0
c002095c:	6a ff                	push   0xffffffff
c002095e:	6a 01                	push   0x1
c0020960:	e8 ed 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020965:	83 c4 1c             	add    esp,0x1c
c0020968:	c3                   	ret    

c0020969 <KiDefaultSignalHandlerIgnore(int)>:
c0020969:	c3                   	ret    

c002096a <KiDefaultSignalHandlerPause(int)>:
c002096a:	57                   	push   edi
c002096b:	b9 07 00 00 00       	mov    ecx,0x7
c0020970:	56                   	push   esi
c0020971:	be 77 28 03 c0       	mov    esi,0xc0032877
c0020976:	83 ec 24             	sub    esp,0x24
c0020979:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002097d:	fc                   	cld    
c002097e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020980:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020984:	50                   	push   eax
c0020985:	6a 00                	push   0x0
c0020987:	6a 00                	push   0x0
c0020989:	6a 27                	push   0x27
c002098b:	e8 c2 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020990:	83 c4 34             	add    esp,0x34
c0020993:	5e                   	pop    esi
c0020994:	5f                   	pop    edi
c0020995:	c3                   	ret    

c0020996 <KiDefaultSignalHandlerResume(int)>:
c0020996:	57                   	push   edi
c0020997:	b9 1d 00 00 00       	mov    ecx,0x1d
c002099c:	56                   	push   esi
c002099d:	be 93 28 03 c0       	mov    esi,0xc0032893
c00209a2:	83 ec 24             	sub    esp,0x24
c00209a5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00209a9:	fc                   	cld    
c00209aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209ac:	8d 44 24 03          	lea    eax,[esp+0x3]
c00209b0:	50                   	push   eax
c00209b1:	6a 00                	push   0x0
c00209b3:	6a 00                	push   0x0
c00209b5:	6a 27                	push   0x27
c00209b7:	e8 96 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209bc:	83 c4 34             	add    esp,0x34
c00209bf:	5e                   	pop    esi
c00209c0:	5f                   	pop    edi
c00209c1:	c3                   	ret    

c00209c2 <KeDeinitSignals(SigHandlerBlock*)>:
c00209c2:	e9 24 5a ff ff       	jmp    c00163eb <free>

c00209c7 <KeInitSignals()>:
c00209c7:	53                   	push   ebx
c00209c8:	83 ec 14             	sub    esp,0x14
c00209cb:	68 c8 00 00 00       	push   0xc8
c00209d0:	e8 06 5a ff ff       	call   c00163db <malloc>
c00209d5:	83 c4 0c             	add    esp,0xc
c00209d8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00209e2:	89 c3                	mov    ebx,eax
c00209e4:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00209ee:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00209f4:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00209f8:	6a 20                	push   0x20
c00209fa:	6a 00                	push   0x0
c00209fc:	50                   	push   eax
c00209fd:	e8 ee fa fd ff       	call   c00004f0 <memset>
c0020a02:	83 c4 0c             	add    esp,0xc
c0020a05:	6a 44                	push   0x44
c0020a07:	6a 00                	push   0x0
c0020a09:	53                   	push   ebx
c0020a0a:	e8 e1 fa fd ff       	call   c00004f0 <memset>
c0020a0f:	83 c4 18             	add    esp,0x18
c0020a12:	89 d8                	mov    eax,ebx
c0020a14:	5b                   	pop    ebx
c0020a15:	c3                   	ret    

c0020a16 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020a16:	53                   	push   ebx
c0020a17:	b8 01 00 00 00       	mov    eax,0x1
c0020a1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a24:	83 f9 10             	cmp    ecx,0x10
c0020a27:	7f 21                	jg     c0020a4a <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2d:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020a30:	89 03                	mov    DWORD PTR [ebx],eax
c0020a32:	b8 01 00 00 00       	mov    eax,0x1
c0020a37:	d3 e0                	shl    eax,cl
c0020a39:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020a3d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020a40:	31 c0                	xor    eax,eax
c0020a42:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020a4a:	5b                   	pop    ebx
c0020a4b:	c3                   	ret    

c0020a4c <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020a4c:	55                   	push   ebp
c0020a4d:	57                   	push   edi
c0020a4e:	bf 08 00 00 00       	mov    edi,0x8
c0020a53:	56                   	push   esi
c0020a54:	53                   	push   ebx
c0020a55:	83 ec 18             	sub    esp,0x18
c0020a58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a5c:	68 b0 28 03 c0       	push   0xc00328b0
c0020a61:	e8 ac 87 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0020a66:	83 c4 10             	add    esp,0x10
c0020a69:	31 c9                	xor    ecx,ecx
c0020a6b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020a72:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020a78:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020a7c:	99                   	cdq    
c0020a7d:	f7 ff                	idiv   edi
c0020a7f:	8d 42 24             	lea    eax,[edx+0x24]
c0020a82:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020a86:	85 f6                	test   esi,esi
c0020a88:	75 1a                	jne    c0020aa4 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020a8a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020a8e:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020a92:	50                   	push   eax
c0020a93:	50                   	push   eax
c0020a94:	52                   	push   edx
c0020a95:	68 c1 28 03 c0       	push   0xc00328c1
c0020a9a:	e8 73 87 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	eb 1b                	jmp    c0020abf <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020aa4:	41                   	inc    ecx
c0020aa5:	83 f9 08             	cmp    ecx,0x8
c0020aa8:	75 ce                	jne    c0020a78 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020aaa:	83 ec 0c             	sub    esp,0xc
c0020aad:	be 01 00 00 00       	mov    esi,0x1
c0020ab2:	68 e2 28 03 c0       	push   0xc00328e2
c0020ab7:	e8 56 87 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0020abc:	83 c4 10             	add    esp,0x10
c0020abf:	83 c4 0c             	add    esp,0xc
c0020ac2:	89 f0                	mov    eax,esi
c0020ac4:	5b                   	pop    ebx
c0020ac5:	5e                   	pop    esi
c0020ac6:	5f                   	pop    edi
c0020ac7:	5d                   	pop    ebp
c0020ac8:	c3                   	ret    

c0020ac9 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020ac9:	55                   	push   ebp
c0020aca:	57                   	push   edi
c0020acb:	56                   	push   esi
c0020acc:	53                   	push   ebx
c0020acd:	51                   	push   ecx
c0020ace:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ad2:	85 db                	test   ebx,ebx
c0020ad4:	0f 84 bc 00 00 00    	je     c0020b96 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ada:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020ae1:	0f 84 af 00 00 00    	je     c0020b96 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ae7:	31 c9                	xor    ecx,ecx
c0020ae9:	bf 08 00 00 00       	mov    edi,0x8
c0020aee:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020af4:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020af7:	99                   	cdq    
c0020af8:	f7 ff                	idiv   edi
c0020afa:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020b01:	85 ed                	test   ebp,ebp
c0020b03:	0f 84 9e 00 00 00    	je     c0020ba7 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020b09:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020b0f:	89 e9                	mov    ecx,ebp
c0020b11:	bf 01 00 00 00       	mov    edi,0x1
c0020b16:	d3 e7                	shl    edi,cl
c0020b18:	31 c9                	xor    ecx,ecx
c0020b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b1d:	b8 01 00 00 00       	mov    eax,0x1
c0020b22:	d3 e0                	shl    eax,cl
c0020b24:	85 04 24             	test   DWORD PTR [esp],eax
c0020b27:	74 06                	je     c0020b2f <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020b29:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020b2d:	75 67                	jne    c0020b96 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b2f:	41                   	inc    ecx
c0020b30:	83 f9 11             	cmp    ecx,0x11
c0020b33:	75 e8                	jne    c0020b1d <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020b35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b38:	46                   	inc    esi
c0020b39:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020b3f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020b4a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020b51:	09 f8                	or     eax,edi
c0020b53:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020b59:	31 c0                	xor    eax,eax
c0020b5b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020b63:	74 09                	je     c0020b6e <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020b65:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b6c:	eb 06                	jmp    c0020b74 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020b6e:	40                   	inc    eax
c0020b6f:	83 f8 08             	cmp    eax,0x8
c0020b72:	75 e7                	jne    c0020b5b <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020b74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b78:	83 fd 09             	cmp    ebp,0x9
c0020b7b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020b7e:	89 2a                	mov    DWORD PTR [edx],ebp
c0020b80:	75 07                	jne    c0020b89 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020b82:	b8 55 09 02 c0       	mov    eax,0xc0020955
c0020b87:	eb 31                	jmp    c0020bba <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020b89:	83 f8 01             	cmp    eax,0x1
c0020b8c:	75 0c                	jne    c0020b9a <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020b8e:	f7 d7                	not    edi
c0020b90:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020b96:	31 c0                	xor    eax,eax
c0020b98:	eb 20                	jmp    c0020bba <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020b9a:	85 c0                	test   eax,eax
c0020b9c:	75 1c                	jne    c0020bba <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020b9e:	8b 04 ad 20 41 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbee0]
c0020ba5:	eb 13                	jmp    c0020bba <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ba7:	41                   	inc    ecx
c0020ba8:	46                   	inc    esi
c0020ba9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020baf:	83 f9 08             	cmp    ecx,0x8
c0020bb2:	0f 85 36 ff ff ff    	jne    c0020aee <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020bb8:	eb dc                	jmp    c0020b96 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bba:	5a                   	pop    edx
c0020bbb:	5b                   	pop    ebx
c0020bbc:	5e                   	pop    esi
c0020bbd:	5f                   	pop    edi
c0020bbe:	5d                   	pop    ebp
c0020bbf:	c3                   	ret    

c0020bc0 <KiCheckSignalZ>:
c0020bc0:	83 ec 10             	sub    esp,0x10
c0020bc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bc7:	50                   	push   eax
c0020bc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020bcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020bd0:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020bd6:	e8 ee fe ff ff       	call   c0020ac9 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020bdb:	5a                   	pop    edx
c0020bdc:	31 d2                	xor    edx,edx
c0020bde:	59                   	pop    ecx
c0020bdf:	85 c0                	test   eax,eax
c0020be1:	74 19                	je     c0020bfc <KiCheckSignalZ+0x3c>
c0020be3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020be9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020bec:	89 02                	mov    DWORD PTR [edx],eax
c0020bee:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020bf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bf9:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020bfc:	89 d0                	mov    eax,edx
c0020bfe:	83 c4 10             	add    esp,0x10
c0020c01:	c3                   	ret    

c0020c02 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020c02:	56                   	push   esi
c0020c03:	53                   	push   ebx
c0020c04:	bb 01 00 00 00       	mov    ebx,0x1
c0020c09:	52                   	push   edx
c0020c0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020c12:	d3 e3                	shl    ebx,cl
c0020c14:	83 f9 10             	cmp    ecx,0x10
c0020c17:	7f 08                	jg     c0020c21 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020c19:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020c1f:	75 10                	jne    c0020c31 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020c21:	83 ec 0c             	sub    esp,0xc
c0020c24:	68 f3 28 03 c0       	push   0xc00328f3
c0020c29:	e8 6c f5 ff ff       	call   c002019a <KePanic(char const*)>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	f7 d3                	not    ebx
c0020c33:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020c39:	58                   	pop    eax
c0020c3a:	5b                   	pop    ebx
c0020c3b:	5e                   	pop    esi
c0020c3c:	c3                   	ret    

c0020c3d <KiFinishSignalZ>:
c0020c3d:	53                   	push   ebx
c0020c3e:	83 ec 10             	sub    esp,0x10
c0020c41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c45:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020c48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c50:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020c56:	e8 a7 ff ff ff       	call   c0020c02 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020c5b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020c61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020c68:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020c6f:	83 c4 18             	add    esp,0x18
c0020c72:	5b                   	pop    ebx
c0020c73:	c3                   	ret    

c0020c74 <SysSeekDir(regs*)>:
c0020c74:	31 c0                	xor    eax,eax
c0020c76:	31 d2                	xor    edx,edx
c0020c78:	c3                   	ret    

c0020c79 <SysTellDir(regs*)>:
c0020c79:	31 c0                	xor    eax,eax
c0020c7b:	31 d2                	xor    edx,edx
c0020c7d:	c3                   	ret    

c0020c7e <SysVerify(regs*)>:
c0020c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c82:	31 d2                	xor    edx,edx
c0020c84:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020c87:	c3                   	ret    

c0020c88 <SysGetArgc(regs*)>:
c0020c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c90:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020c96:	89 c2                	mov    edx,eax
c0020c98:	c1 fa 1f             	sar    edx,0x1f
c0020c9b:	c3                   	ret    

c0020c9c <SysTTYName(regs*)>:
c0020c9c:	b8 01 00 00 00       	mov    eax,0x1
c0020ca1:	31 d2                	xor    edx,edx
c0020ca3:	c3                   	ret    

c0020ca4 <SysFormatDisk(regs*)>:
c0020ca4:	56                   	push   esi
c0020ca5:	53                   	push   ebx
c0020ca6:	83 ec 04             	sub    esp,0x4
c0020ca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cad:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020cb3:	eb 2a                	jmp    c0020cdf <SysFormatDisk(regs*)+0x3b>
c0020cb5:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020cb8:	83 ec 0c             	sub    esp,0xc
c0020cbb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020cbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020cc0:	51                   	push   ecx
c0020cc1:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020cc4:	51                   	push   ecx
c0020cc5:	50                   	push   eax
c0020cc6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020ccd:	50                   	push   eax
c0020cce:	53                   	push   ebx
c0020ccf:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020cd2:	83 c4 20             	add    esp,0x20
c0020cd5:	83 f8 08             	cmp    eax,0x8
c0020cd8:	89 c1                	mov    ecx,eax
c0020cda:	75 14                	jne    c0020cf0 <SysFormatDisk(regs*)+0x4c>
c0020cdc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020cdf:	85 db                	test   ebx,ebx
c0020ce1:	75 d2                	jne    c0020cb5 <SysFormatDisk(regs*)+0x11>
c0020ce3:	b8 03 00 00 00       	mov    eax,0x3
c0020ce8:	31 d2                	xor    edx,edx
c0020cea:	83 c4 04             	add    esp,0x4
c0020ced:	5b                   	pop    ebx
c0020cee:	5e                   	pop    esi
c0020cef:	c3                   	ret    
c0020cf0:	85 c0                	test   eax,eax
c0020cf2:	74 13                	je     c0020d07 <SysFormatDisk(regs*)+0x63>
c0020cf4:	31 d2                	xor    edx,edx
c0020cf6:	83 f9 09             	cmp    ecx,0x9
c0020cf9:	b8 01 00 00 00       	mov    eax,0x1
c0020cfe:	74 ea                	je     c0020cea <SysFormatDisk(regs*)+0x46>
c0020d00:	b8 02 00 00 00       	mov    eax,0x2
c0020d05:	eb e1                	jmp    c0020ce8 <SysFormatDisk(regs*)+0x44>
c0020d07:	31 c0                	xor    eax,eax
c0020d09:	eb dd                	jmp    c0020ce8 <SysFormatDisk(regs*)+0x44>

c0020d0b <SysSetDiskVolumeLabel(regs*)>:
c0020d0b:	56                   	push   esi
c0020d0c:	53                   	push   ebx
c0020d0d:	83 ec 04             	sub    esp,0x4
c0020d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d14:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020d17:	83 f8 19             	cmp    eax,0x19
c0020d1a:	77 33                	ja     c0020d4f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d1c:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020d23:	85 c9                	test   ecx,ecx
c0020d25:	74 28                	je     c0020d4f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d27:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020d2a:	85 db                	test   ebx,ebx
c0020d2c:	74 21                	je     c0020d4f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d2e:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020d34:	85 d2                	test   edx,edx
c0020d36:	74 17                	je     c0020d4f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d38:	8b 32                	mov    esi,DWORD PTR [edx]
c0020d3a:	53                   	push   ebx
c0020d3b:	50                   	push   eax
c0020d3c:	51                   	push   ecx
c0020d3d:	52                   	push   edx
c0020d3e:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	83 c4 04             	add    esp,0x4
c0020d47:	5b                   	pop    ebx
c0020d48:	5e                   	pop    esi
c0020d49:	89 c2                	mov    edx,eax
c0020d4b:	c1 fa 1f             	sar    edx,0x1f
c0020d4e:	c3                   	ret    
c0020d4f:	83 c4 04             	add    esp,0x4
c0020d52:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020d57:	5b                   	pop    ebx
c0020d58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020d5d:	5e                   	pop    esi
c0020d5e:	c3                   	ret    

c0020d5f <SysGetDiskVolumeLabel(regs*)>:
c0020d5f:	57                   	push   edi
c0020d60:	56                   	push   esi
c0020d61:	53                   	push   ebx
c0020d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d66:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020d69:	83 fa 19             	cmp    edx,0x19
c0020d6c:	77 3c                	ja     c0020daa <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d6e:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020d75:	85 c9                	test   ecx,ecx
c0020d77:	74 31                	je     c0020daa <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d79:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020d7c:	85 db                	test   ebx,ebx
c0020d7e:	74 2a                	je     c0020daa <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d80:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020d83:	85 f6                	test   esi,esi
c0020d85:	74 23                	je     c0020daa <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d87:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020d8d:	85 c0                	test   eax,eax
c0020d8f:	74 19                	je     c0020daa <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d91:	83 ec 0c             	sub    esp,0xc
c0020d94:	8b 38                	mov    edi,DWORD PTR [eax]
c0020d96:	56                   	push   esi
c0020d97:	53                   	push   ebx
c0020d98:	52                   	push   edx
c0020d99:	51                   	push   ecx
c0020d9a:	50                   	push   eax
c0020d9b:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020d9e:	83 c4 20             	add    esp,0x20
c0020da1:	5b                   	pop    ebx
c0020da2:	5e                   	pop    esi
c0020da3:	89 c2                	mov    edx,eax
c0020da5:	c1 fa 1f             	sar    edx,0x1f
c0020da8:	5f                   	pop    edi
c0020da9:	c3                   	ret    
c0020daa:	5b                   	pop    ebx
c0020dab:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020db0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020db5:	5e                   	pop    esi
c0020db6:	5f                   	pop    edi
c0020db7:	c3                   	ret    

c0020db8 <SysShutdown(regs*)>:
c0020db8:	57                   	push   edi
c0020db9:	56                   	push   esi
c0020dba:	83 ec 04             	sub    esp,0x4
c0020dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020dc4:	85 c0                	test   eax,eax
c0020dc6:	74 1e                	je     c0020de6 <SysShutdown(regs*)+0x2e>
c0020dc8:	83 f8 01             	cmp    eax,0x1
c0020dcb:	74 5f                	je     c0020e2c <SysShutdown(regs*)+0x74>
c0020dcd:	83 f8 02             	cmp    eax,0x2
c0020dd0:	be ff ff ff ff       	mov    esi,0xffffffff
c0020dd5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020dda:	74 32                	je     c0020e0e <SysShutdown(regs*)+0x56>
c0020ddc:	83 c4 04             	add    esp,0x4
c0020ddf:	89 f0                	mov    eax,esi
c0020de1:	5e                   	pop    esi
c0020de2:	89 fa                	mov    edx,edi
c0020de4:	5f                   	pop    edi
c0020de5:	c3                   	ret    
c0020de6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020deb:	be ff ff ff ff       	mov    esi,0xffffffff
c0020df0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020df5:	8b 10                	mov    edx,DWORD PTR [eax]
c0020df7:	6a 00                	push   0x0
c0020df9:	6a 00                	push   0x0
c0020dfb:	6a 00                	push   0x0
c0020dfd:	50                   	push   eax
c0020dfe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e01:	83 c4 10             	add    esp,0x10
c0020e04:	89 f0                	mov    eax,esi
c0020e06:	83 c4 04             	add    esp,0x4
c0020e09:	89 fa                	mov    edx,edi
c0020e0b:	5e                   	pop    esi
c0020e0c:	5f                   	pop    edi
c0020e0d:	c3                   	ret    
c0020e0e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e13:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e15:	6a 00                	push   0x0
c0020e17:	6a 00                	push   0x0
c0020e19:	6a 01                	push   0x1
c0020e1b:	50                   	push   eax
c0020e1c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e1f:	83 c4 10             	add    esp,0x10
c0020e22:	89 f0                	mov    eax,esi
c0020e24:	83 c4 04             	add    esp,0x4
c0020e27:	89 fa                	mov    edx,edi
c0020e29:	5e                   	pop    esi
c0020e2a:	5f                   	pop    edi
c0020e2b:	c3                   	ret    
c0020e2c:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020e31:	85 c0                	test   eax,eax
c0020e33:	74 02                	je     c0020e37 <SysShutdown(regs*)+0x7f>
c0020e35:	ff d0                	call   eax
c0020e37:	31 f6                	xor    esi,esi
c0020e39:	83 c4 04             	add    esp,0x4
c0020e3c:	89 f0                	mov    eax,esi
c0020e3e:	31 ff                	xor    edi,edi
c0020e40:	5e                   	pop    esi
c0020e41:	89 fa                	mov    edx,edi
c0020e43:	5f                   	pop    edi
c0020e44:	c3                   	ret    

c0020e45 <SysRealpath(regs*)>:
c0020e45:	53                   	push   ebx
c0020e46:	83 ec 08             	sub    esp,0x8
c0020e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e4d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0020e50:	85 c9                	test   ecx,ecx
c0020e52:	74 36                	je     c0020e8a <SysRealpath(regs*)+0x45>
c0020e54:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e57:	31 d2                	xor    edx,edx
c0020e59:	b8 01 00 00 00       	mov    eax,0x1
c0020e5e:	85 db                	test   ebx,ebx
c0020e60:	75 05                	jne    c0020e67 <SysRealpath(regs*)+0x22>
c0020e62:	83 c4 08             	add    esp,0x8
c0020e65:	5b                   	pop    ebx
c0020e66:	c3                   	ret    
c0020e67:	6a 00                	push   0x0
c0020e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e71:	05 0c 01 00 00       	add    eax,0x10c
c0020e76:	50                   	push   eax
c0020e77:	51                   	push   ecx
c0020e78:	53                   	push   ebx
c0020e79:	e8 a0 92 ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020e7e:	83 c4 10             	add    esp,0x10
c0020e81:	31 c0                	xor    eax,eax
c0020e83:	31 d2                	xor    edx,edx
c0020e85:	83 c4 08             	add    esp,0x8
c0020e88:	5b                   	pop    ebx
c0020e89:	c3                   	ret    
c0020e8a:	b8 01 00 00 00       	mov    eax,0x1
c0020e8f:	31 d2                	xor    edx,edx
c0020e91:	eb f2                	jmp    c0020e85 <SysRealpath(regs*)+0x40>

c0020e93 <SysReadDir(regs*)>:
c0020e93:	53                   	push   ebx
c0020e94:	83 ec 18             	sub    esp,0x18
c0020e97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e9b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020e9e:	83 f8 02             	cmp    eax,0x2
c0020ea1:	76 4f                	jbe    c0020ef2 <SysReadDir(regs*)+0x5f>
c0020ea3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020eaa:	77 52                	ja     c0020efe <SysReadDir(regs*)+0x6b>
c0020eac:	83 ec 0c             	sub    esp,0xc
c0020eaf:	50                   	push   eax
c0020eb0:	e8 ee 6e ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	85 c0                	test   eax,eax
c0020eba:	74 42                	je     c0020efe <SysReadDir(regs*)+0x6b>
c0020ebc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ec4:	83 ec 0c             	sub    esp,0xc
c0020ec7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020ecb:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ecd:	51                   	push   ecx
c0020ece:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020ed1:	51                   	push   ecx
c0020ed2:	6a 00                	push   0x0
c0020ed4:	68 10 01 00 00       	push   0x110
c0020ed9:	50                   	push   eax
c0020eda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020edd:	83 c4 20             	add    esp,0x20
c0020ee0:	85 c0                	test   eax,eax
c0020ee2:	89 c1                	mov    ecx,eax
c0020ee4:	74 27                	je     c0020f0d <SysReadDir(regs*)+0x7a>
c0020ee6:	31 d2                	xor    edx,edx
c0020ee8:	83 f9 07             	cmp    ecx,0x7
c0020eeb:	b8 02 00 00 00       	mov    eax,0x2
c0020ef0:	75 16                	jne    c0020f08 <SysReadDir(regs*)+0x75>
c0020ef2:	b8 01 00 00 00       	mov    eax,0x1
c0020ef7:	31 d2                	xor    edx,edx
c0020ef9:	83 c4 18             	add    esp,0x18
c0020efc:	5b                   	pop    ebx
c0020efd:	c3                   	ret    
c0020efe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f08:	83 c4 18             	add    esp,0x18
c0020f0b:	5b                   	pop    ebx
c0020f0c:	c3                   	ret    
c0020f0d:	31 c0                	xor    eax,eax
c0020f0f:	31 d2                	xor    edx,edx
c0020f11:	eb e6                	jmp    c0020ef9 <SysReadDir(regs*)+0x66>

c0020f13 <SysIsATTY(regs*)>:
c0020f13:	83 ec 0c             	sub    esp,0xc
c0020f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f1a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f1d:	83 f8 02             	cmp    eax,0x2
c0020f20:	76 07                	jbe    c0020f29 <SysIsATTY(regs*)+0x16>
c0020f22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020f27:	75 26                	jne    c0020f4f <SysIsATTY(regs*)+0x3c>
c0020f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020f37:	85 c0                	test   eax,eax
c0020f39:	74 24                	je     c0020f5f <SysIsATTY(regs*)+0x4c>
c0020f3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f3d:	83 ec 0c             	sub    esp,0xc
c0020f40:	50                   	push   eax
c0020f41:	ff 12                	call   DWORD PTR [edx]
c0020f43:	83 c4 10             	add    esp,0x10
c0020f46:	31 d2                	xor    edx,edx
c0020f48:	83 c4 0c             	add    esp,0xc
c0020f4b:	0f b6 c0             	movzx  eax,al
c0020f4e:	c3                   	ret    
c0020f4f:	83 ec 0c             	sub    esp,0xc
c0020f52:	50                   	push   eax
c0020f53:	e8 4b 6e ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c0020f58:	83 c4 10             	add    esp,0x10
c0020f5b:	85 c0                	test   eax,eax
c0020f5d:	75 dc                	jne    c0020f3b <SysIsATTY(regs*)+0x28>
c0020f5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f69:	83 c4 0c             	add    esp,0xc
c0020f6c:	c3                   	ret    

c0020f6d <SysSeek(regs*)>:
c0020f6d:	56                   	push   esi
c0020f6e:	53                   	push   ebx
c0020f6f:	83 ec 04             	sub    esp,0x4
c0020f72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f76:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0020f79:	8d 71 fd             	lea    esi,[ecx-0x3]
c0020f7c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0020f82:	77 33                	ja     c0020fb7 <SysSeek(regs*)+0x4a>
c0020f84:	83 ec 0c             	sub    esp,0xc
c0020f87:	51                   	push   ecx
c0020f88:	e8 16 6e ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c0020f8d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020f90:	83 c4 0c             	add    esp,0xc
c0020f93:	31 db                	xor    ebx,ebx
c0020f95:	53                   	push   ebx
c0020f96:	51                   	push   ecx
c0020f97:	50                   	push   eax
c0020f98:	e8 69 95 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	85 c0                	test   eax,eax
c0020fa2:	0f 95 c0             	setne  al
c0020fa5:	31 d2                	xor    edx,edx
c0020fa7:	0f b6 c0             	movzx  eax,al
c0020faa:	f7 d8                	neg    eax
c0020fac:	83 d2 00             	adc    edx,0x0
c0020faf:	83 c4 04             	add    esp,0x4
c0020fb2:	5b                   	pop    ebx
c0020fb3:	f7 da                	neg    edx
c0020fb5:	5e                   	pop    esi
c0020fb6:	c3                   	ret    
c0020fb7:	83 c4 04             	add    esp,0x4
c0020fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fbf:	5b                   	pop    ebx
c0020fc0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fc5:	5e                   	pop    esi
c0020fc6:	c3                   	ret    

c0020fc7 <SysTell(regs*)>:
c0020fc7:	53                   	push   ebx
c0020fc8:	83 ec 08             	sub    esp,0x8
c0020fcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fcf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020fd2:	83 f8 02             	cmp    eax,0x2
c0020fd5:	76 4e                	jbe    c0021025 <SysTell(regs*)+0x5e>
c0020fd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020fdc:	76 19                	jbe    c0020ff7 <SysTell(regs*)+0x30>
c0020fde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020fe1:	31 d2                	xor    edx,edx
c0020fe3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020fe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ff0:	83 c4 08             	add    esp,0x8
c0020ff3:	31 c0                	xor    eax,eax
c0020ff5:	5b                   	pop    ebx
c0020ff6:	c3                   	ret    
c0020ff7:	83 ec 0c             	sub    esp,0xc
c0020ffa:	50                   	push   eax
c0020ffb:	e8 a3 6d ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c0021000:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021003:	5a                   	pop    edx
c0021004:	59                   	pop    ecx
c0021005:	53                   	push   ebx
c0021006:	50                   	push   eax
c0021007:	e8 a6 95 ff ff       	call   c001a5b2 <File::tell(unsigned long long*)>
c002100c:	83 c4 10             	add    esp,0x10
c002100f:	85 c0                	test   eax,eax
c0021011:	0f 95 c0             	setne  al
c0021014:	31 d2                	xor    edx,edx
c0021016:	0f b6 c0             	movzx  eax,al
c0021019:	f7 d8                	neg    eax
c002101b:	83 d2 00             	adc    edx,0x0
c002101e:	83 c4 08             	add    esp,0x8
c0021021:	5b                   	pop    ebx
c0021022:	f7 da                	neg    edx
c0021024:	c3                   	ret    
c0021025:	83 c4 08             	add    esp,0x8
c0021028:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002102d:	5b                   	pop    ebx
c002102e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021033:	c3                   	ret    

c0021034 <SysSize(regs*)>:
c0021034:	53                   	push   ebx
c0021035:	83 ec 18             	sub    esp,0x18
c0021038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002103c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002103f:	83 f8 02             	cmp    eax,0x2
c0021042:	76 54                	jbe    c0021098 <SysSize(regs*)+0x64>
c0021044:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021049:	76 19                	jbe    c0021064 <SysSize(regs*)+0x30>
c002104b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002104e:	31 d2                	xor    edx,edx
c0021050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021056:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002105d:	83 c4 18             	add    esp,0x18
c0021060:	31 c0                	xor    eax,eax
c0021062:	5b                   	pop    ebx
c0021063:	c3                   	ret    
c0021064:	83 ec 0c             	sub    esp,0xc
c0021067:	50                   	push   eax
c0021068:	e8 36 6d ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c002106d:	83 c4 0c             	add    esp,0xc
c0021070:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021074:	52                   	push   edx
c0021075:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021078:	52                   	push   edx
c0021079:	50                   	push   eax
c002107a:	e8 cb 96 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c002107f:	83 c4 10             	add    esp,0x10
c0021082:	85 c0                	test   eax,eax
c0021084:	0f 95 c0             	setne  al
c0021087:	31 d2                	xor    edx,edx
c0021089:	0f b6 c0             	movzx  eax,al
c002108c:	f7 d8                	neg    eax
c002108e:	83 d2 00             	adc    edx,0x0
c0021091:	83 c4 18             	add    esp,0x18
c0021094:	5b                   	pop    ebx
c0021095:	f7 da                	neg    edx
c0021097:	c3                   	ret    
c0021098:	83 c4 18             	add    esp,0x18
c002109b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210a0:	5b                   	pop    ebx
c00210a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210a6:	c3                   	ret    

c00210a7 <SysSizeFromFilename(regs*)>:
c00210a7:	55                   	push   ebp
c00210a8:	57                   	push   edi
c00210a9:	56                   	push   esi
c00210aa:	53                   	push   ebx
c00210ab:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00210b1:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00210b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00210bb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00210be:	85 f6                	test   esi,esi
c00210c0:	89 f8                	mov    eax,edi
c00210c2:	74 09                	je     c00210cd <SysSizeFromFilename(regs*)+0x26>
c00210c4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00210ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210cd:	83 f8 02             	cmp    eax,0x2
c00210d0:	0f 86 ca 00 00 00    	jbe    c00211a0 <SysSizeFromFilename(regs*)+0xf9>
c00210d6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210db:	76 1f                	jbe    c00210fc <SysSizeFromFilename(regs*)+0x55>
c00210dd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210e0:	31 d2                	xor    edx,edx
c00210e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210ef:	31 c0                	xor    eax,eax
c00210f1:	81 c4 4c 02 00 00    	add    esp,0x24c
c00210f7:	5b                   	pop    ebx
c00210f8:	5e                   	pop    esi
c00210f9:	5f                   	pop    edi
c00210fa:	5d                   	pop    ebp
c00210fb:	c3                   	ret    
c00210fc:	83 ec 0c             	sub    esp,0xc
c00210ff:	68 14 01 00 00       	push   0x114
c0021104:	e8 d2 52 ff ff       	call   c00163db <malloc>
c0021109:	6a 01                	push   0x1
c002110b:	89 c5                	mov    ebp,eax
c002110d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021112:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021115:	51                   	push   ecx
c0021116:	57                   	push   edi
c0021117:	55                   	push   ebp
c0021118:	e8 2f 92 ff ff       	call   c001a34c <File::File(char const*, Process*, bool)>
c002111d:	83 c4 1c             	add    esp,0x1c
c0021120:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021124:	50                   	push   eax
c0021125:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021128:	53                   	push   ebx
c0021129:	55                   	push   ebp
c002112a:	e8 1b 96 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c002112f:	83 c4 10             	add    esp,0x10
c0021132:	85 ed                	test   ebp,ebp
c0021134:	89 c3                	mov    ebx,eax
c0021136:	74 0d                	je     c0021145 <SysSizeFromFilename(regs*)+0x9e>
c0021138:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	55                   	push   ebp
c002113f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021142:	83 c4 10             	add    esp,0x10
c0021145:	85 db                	test   ebx,ebx
c0021147:	75 57                	jne    c00211a0 <SysSizeFromFilename(regs*)+0xf9>
c0021149:	6a 00                	push   0x0
c002114b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021150:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021153:	05 0c 01 00 00       	add    eax,0x10c
c0021158:	50                   	push   eax
c0021159:	57                   	push   edi
c002115a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021161:	53                   	push   ebx
c0021162:	e8 b7 8f ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021167:	58                   	pop    eax
c0021168:	5a                   	pop    edx
c0021169:	8d 44 24 18          	lea    eax,[esp+0x18]
c002116d:	50                   	push   eax
c002116e:	53                   	push   ebx
c002116f:	e8 12 8a ff ff       	call   c0019b86 <KeDereferenceSymlink(char const*, char*)>
c0021174:	83 c4 10             	add    esp,0x10
c0021177:	ba 00 00 00 00       	mov    edx,0x0
c002117c:	83 f8 01             	cmp    eax,0x1
c002117f:	b8 00 00 00 00       	mov    eax,0x0
c0021184:	74 2f                	je     c00211b5 <SysSizeFromFilename(regs*)+0x10e>
c0021186:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002118b:	74 3b                	je     c00211c8 <SysSizeFromFilename(regs*)+0x121>
c002118d:	85 f6                	test   esi,esi
c002118f:	0f 84 5c ff ff ff    	je     c00210f1 <SysSizeFromFilename(regs*)+0x4a>
c0021195:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002119b:	e9 51 ff ff ff       	jmp    c00210f1 <SysSizeFromFilename(regs*)+0x4a>
c00211a0:	81 c4 4c 02 00 00    	add    esp,0x24c
c00211a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211ab:	5b                   	pop    ebx
c00211ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211b1:	5e                   	pop    esi
c00211b2:	5f                   	pop    edi
c00211b3:	5d                   	pop    ebp
c00211b4:	c3                   	ret    
c00211b5:	85 f6                	test   esi,esi
c00211b7:	0f 84 34 ff ff ff    	je     c00210f1 <SysSizeFromFilename(regs*)+0x4a>
c00211bd:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00211c3:	e9 29 ff ff ff       	jmp    c00210f1 <SysSizeFromFilename(regs*)+0x4a>
c00211c8:	85 f6                	test   esi,esi
c00211ca:	0f 84 21 ff ff ff    	je     c00210f1 <SysSizeFromFilename(regs*)+0x4a>
c00211d0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211d6:	e9 16 ff ff ff       	jmp    c00210f1 <SysSizeFromFilename(regs*)+0x4a>

c00211db <SysSizeFromFilenameNoSymlink(regs*)>:
c00211db:	55                   	push   ebp
c00211dc:	57                   	push   edi
c00211dd:	56                   	push   esi
c00211de:	53                   	push   ebx
c00211df:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00211e5:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00211ec:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00211ef:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00211f2:	85 f6                	test   esi,esi
c00211f4:	89 f8                	mov    eax,edi
c00211f6:	74 09                	je     c0021201 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00211f8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021201:	83 f8 02             	cmp    eax,0x2
c0021204:	0f 86 ca 00 00 00    	jbe    c00212d4 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c002120a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002120f:	76 1f                	jbe    c0021230 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0021211:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021214:	31 d2                	xor    edx,edx
c0021216:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002121c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021223:	31 c0                	xor    eax,eax
c0021225:	81 c4 4c 02 00 00    	add    esp,0x24c
c002122b:	5b                   	pop    ebx
c002122c:	5e                   	pop    esi
c002122d:	5f                   	pop    edi
c002122e:	5d                   	pop    ebp
c002122f:	c3                   	ret    
c0021230:	83 ec 0c             	sub    esp,0xc
c0021233:	68 14 01 00 00       	push   0x114
c0021238:	e8 9e 51 ff ff       	call   c00163db <malloc>
c002123d:	6a 00                	push   0x0
c002123f:	89 c5                	mov    ebp,eax
c0021241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021246:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021249:	51                   	push   ecx
c002124a:	57                   	push   edi
c002124b:	55                   	push   ebp
c002124c:	e8 fb 90 ff ff       	call   c001a34c <File::File(char const*, Process*, bool)>
c0021251:	83 c4 1c             	add    esp,0x1c
c0021254:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021258:	50                   	push   eax
c0021259:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002125c:	53                   	push   ebx
c002125d:	55                   	push   ebp
c002125e:	e8 e7 94 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0021263:	83 c4 10             	add    esp,0x10
c0021266:	85 ed                	test   ebp,ebp
c0021268:	89 c3                	mov    ebx,eax
c002126a:	74 0d                	je     c0021279 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c002126c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002126f:	83 ec 0c             	sub    esp,0xc
c0021272:	55                   	push   ebp
c0021273:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021276:	83 c4 10             	add    esp,0x10
c0021279:	85 db                	test   ebx,ebx
c002127b:	75 57                	jne    c00212d4 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c002127d:	6a 00                	push   0x0
c002127f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021284:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021287:	05 0c 01 00 00       	add    eax,0x10c
c002128c:	50                   	push   eax
c002128d:	57                   	push   edi
c002128e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021295:	53                   	push   ebx
c0021296:	e8 83 8e ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002129b:	58                   	pop    eax
c002129c:	5a                   	pop    edx
c002129d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a1:	50                   	push   eax
c00212a2:	53                   	push   ebx
c00212a3:	e8 de 88 ff ff       	call   c0019b86 <KeDereferenceSymlink(char const*, char*)>
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	ba 00 00 00 00       	mov    edx,0x0
c00212b0:	83 f8 01             	cmp    eax,0x1
c00212b3:	b8 00 00 00 00       	mov    eax,0x0
c00212b8:	74 2f                	je     c00212e9 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00212ba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00212bf:	74 3b                	je     c00212fc <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00212c1:	85 f6                	test   esi,esi
c00212c3:	0f 84 5c ff ff ff    	je     c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212c9:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00212cf:	e9 51 ff ff ff       	jmp    c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212d4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00212da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212df:	5b                   	pop    ebx
c00212e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212e5:	5e                   	pop    esi
c00212e6:	5f                   	pop    edi
c00212e7:	5d                   	pop    ebp
c00212e8:	c3                   	ret    
c00212e9:	85 f6                	test   esi,esi
c00212eb:	0f 84 34 ff ff ff    	je     c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212f1:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00212f7:	e9 29 ff ff ff       	jmp    c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212fc:	85 f6                	test   esi,esi
c00212fe:	0f 84 21 ff ff ff    	je     c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021304:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002130a:	e9 16 ff ff ff       	jmp    c0021225 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c002130f <SysClose(regs*)>:
c002130f:	53                   	push   ebx
c0021310:	83 ec 08             	sub    esp,0x8
c0021313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021317:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002131a:	83 f8 02             	cmp    eax,0x2
c002131d:	76 41                	jbe    c0021360 <SysClose(regs*)+0x51>
c002131f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0021325:	83 fa 01             	cmp    edx,0x1
c0021328:	76 2d                	jbe    c0021357 <SysClose(regs*)+0x48>
c002132a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002132f:	77 2f                	ja     c0021360 <SysClose(regs*)+0x51>
c0021331:	83 ec 0c             	sub    esp,0xc
c0021334:	50                   	push   eax
c0021335:	e8 69 6a ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c002133a:	89 04 24             	mov    DWORD PTR [esp],eax
c002133d:	89 c3                	mov    ebx,eax
c002133f:	e8 62 91 ff ff       	call   c001a4a6 <File::close()>
c0021344:	83 c4 10             	add    esp,0x10
c0021347:	85 db                	test   ebx,ebx
c0021349:	74 0c                	je     c0021357 <SysClose(regs*)+0x48>
c002134b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002134d:	83 ec 0c             	sub    esp,0xc
c0021350:	53                   	push   ebx
c0021351:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021354:	83 c4 10             	add    esp,0x10
c0021357:	83 c4 08             	add    esp,0x8
c002135a:	31 c0                	xor    eax,eax
c002135c:	5b                   	pop    ebx
c002135d:	31 d2                	xor    edx,edx
c002135f:	c3                   	ret    
c0021360:	83 c4 08             	add    esp,0x8
c0021363:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021368:	5b                   	pop    ebx
c0021369:	ba ff ff ff ff       	mov    edx,0xffffffff
c002136e:	c3                   	ret    

c002136f <SysOpenDir(regs*)>:
c002136f:	56                   	push   esi
c0021370:	53                   	push   ebx
c0021371:	83 ec 04             	sub    esp,0x4
c0021374:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021378:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002137b:	85 c9                	test   ecx,ecx
c002137d:	74 5d                	je     c00213dc <SysOpenDir(regs*)+0x6d>
c002137f:	83 ec 0c             	sub    esp,0xc
c0021382:	68 14 01 00 00       	push   0x114
c0021387:	e8 4f 50 ff ff       	call   c00163db <malloc>
c002138c:	83 c4 0c             	add    esp,0xc
c002138f:	89 c6                	mov    esi,eax
c0021391:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021396:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021399:	50                   	push   eax
c002139a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002139d:	52                   	push   edx
c002139e:	56                   	push   esi
c002139f:	e8 66 95 ff ff       	call   c001a90a <Directory::Directory(char const*, Process*)>
c00213a4:	83 c4 10             	add    esp,0x10
c00213a7:	85 f6                	test   esi,esi
c00213a9:	74 31                	je     c00213dc <SysOpenDir(regs*)+0x6d>
c00213ab:	83 ec 0c             	sub    esp,0xc
c00213ae:	56                   	push   esi
c00213af:	e8 1e 96 ff ff       	call   c001a9d2 <Directory::open()>
c00213b4:	83 c4 10             	add    esp,0x10
c00213b7:	85 c0                	test   eax,eax
c00213b9:	75 21                	jne    c00213dc <SysOpenDir(regs*)+0x6d>
c00213bb:	83 ec 0c             	sub    esp,0xc
c00213be:	56                   	push   esi
c00213bf:	e8 e2 66 ff ff       	call   c0017aa6 <UnixFile::getFileDescriptor()>
c00213c4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00213c7:	83 c4 10             	add    esp,0x10
c00213ca:	89 02                	mov    DWORD PTR [edx],eax
c00213cc:	c1 f8 1f             	sar    eax,0x1f
c00213cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00213d2:	83 c4 04             	add    esp,0x4
c00213d5:	31 c0                	xor    eax,eax
c00213d7:	5b                   	pop    ebx
c00213d8:	31 d2                	xor    edx,edx
c00213da:	5e                   	pop    esi
c00213db:	c3                   	ret    
c00213dc:	83 c4 04             	add    esp,0x4
c00213df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213e4:	5b                   	pop    ebx
c00213e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213ea:	5e                   	pop    esi
c00213eb:	c3                   	ret    

c00213ec <SysMakeDir(regs*)>:
c00213ec:	56                   	push   esi
c00213ed:	53                   	push   ebx
c00213ee:	83 ec 10             	sub    esp,0x10
c00213f1:	68 14 01 00 00       	push   0x114
c00213f6:	e8 e0 4f ff ff       	call   c00163db <malloc>
c00213fb:	83 c4 0c             	add    esp,0xc
c00213fe:	89 c3                	mov    ebx,eax
c0021400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021405:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021408:	50                   	push   eax
c0021409:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002140d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0021410:	52                   	push   edx
c0021411:	53                   	push   ebx
c0021412:	e8 f3 94 ff ff       	call   c001a90a <Directory::Directory(char const*, Process*)>
c0021417:	83 c4 10             	add    esp,0x10
c002141a:	85 db                	test   ebx,ebx
c002141c:	74 2c                	je     c002144a <SysMakeDir(regs*)+0x5e>
c002141e:	83 ec 0c             	sub    esp,0xc
c0021421:	53                   	push   ebx
c0021422:	e8 8b 97 ff ff       	call   c001abb2 <Directory::create()>
c0021427:	89 c6                	mov    esi,eax
c0021429:	8b 03                	mov    eax,DWORD PTR [ebx]
c002142b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002142e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	31 c0                	xor    eax,eax
c0021436:	85 f6                	test   esi,esi
c0021438:	0f 95 c0             	setne  al
c002143b:	31 d2                	xor    edx,edx
c002143d:	f7 d8                	neg    eax
c002143f:	83 d2 00             	adc    edx,0x0
c0021442:	83 c4 04             	add    esp,0x4
c0021445:	5b                   	pop    ebx
c0021446:	f7 da                	neg    edx
c0021448:	5e                   	pop    esi
c0021449:	c3                   	ret    
c002144a:	83 c4 04             	add    esp,0x4
c002144d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021452:	5b                   	pop    ebx
c0021453:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021458:	5e                   	pop    esi
c0021459:	c3                   	ret    

c002145a <SysCloseDir(regs*)>:
c002145a:	53                   	push   ebx
c002145b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021460:	83 ec 08             	sub    esp,0x8
c0021463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021467:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002146a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002146f:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0021472:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0021478:	77 2a                	ja     c00214a4 <SysCloseDir(regs*)+0x4a>
c002147a:	83 ec 0c             	sub    esp,0xc
c002147d:	51                   	push   ecx
c002147e:	e8 20 69 ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c0021483:	89 04 24             	mov    DWORD PTR [esp],eax
c0021486:	89 c3                	mov    ebx,eax
c0021488:	e8 a1 95 ff ff       	call   c001aa2e <Directory::close()>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	85 db                	test   ebx,ebx
c0021492:	74 0c                	je     c00214a0 <SysCloseDir(regs*)+0x46>
c0021494:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021496:	83 ec 0c             	sub    esp,0xc
c0021499:	53                   	push   ebx
c002149a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002149d:	83 c4 10             	add    esp,0x10
c00214a0:	31 c0                	xor    eax,eax
c00214a2:	31 d2                	xor    edx,edx
c00214a4:	83 c4 08             	add    esp,0x8
c00214a7:	5b                   	pop    ebx
c00214a8:	c3                   	ret    

c00214a9 <SysWait(regs*)>:
c00214a9:	83 ec 10             	sub    esp,0x10
c00214ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214b0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00214b3:	52                   	push   edx
c00214b4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00214b7:	51                   	push   ecx
c00214b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214bb:	50                   	push   eax
c00214bc:	e8 c7 3d 00 00       	call   c0025288 <waitTask(int, int*, int)>
c00214c1:	83 c4 1c             	add    esp,0x1c
c00214c4:	89 c2                	mov    edx,eax
c00214c6:	c1 fa 1f             	sar    edx,0x1f
c00214c9:	c3                   	ret    

c00214ca <SysNotImpl(regs*)>:
c00214ca:	83 ec 18             	sub    esp,0x18
c00214cd:	68 04 29 03 c0       	push   0xc0032904
c00214d2:	e8 c3 ec ff ff       	call   c002019a <KePanic(char const*)>
c00214d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214e1:	83 c4 1c             	add    esp,0x1c
c00214e4:	c3                   	ret    

c00214e5 <SysPanic(regs*)>:
c00214e5:	83 ec 18             	sub    esp,0x18
c00214e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00214ef:	50                   	push   eax
c00214f0:	e8 a5 ec ff ff       	call   c002019a <KePanic(char const*)>
c00214f5:	b8 01 00 00 00       	mov    eax,0x1
c00214fa:	31 d2                	xor    edx,edx
c00214fc:	83 c4 1c             	add    esp,0x1c
c00214ff:	c3                   	ret    

c0021500 <SysRmdir(regs*)>:
c0021500:	56                   	push   esi
c0021501:	53                   	push   ebx
c0021502:	83 ec 10             	sub    esp,0x10
c0021505:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021509:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002150c:	68 14 01 00 00       	push   0x114
c0021511:	e8 c5 4e ff ff       	call   c00163db <malloc>
c0021516:	6a 00                	push   0x0
c0021518:	89 c3                	mov    ebx,eax
c002151a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002151f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021522:	50                   	push   eax
c0021523:	56                   	push   esi
c0021524:	53                   	push   ebx
c0021525:	e8 22 8e ff ff       	call   c001a34c <File::File(char const*, Process*, bool)>
c002152a:	83 c4 14             	add    esp,0x14
c002152d:	53                   	push   ebx
c002152e:	e8 e3 90 ff ff       	call   c001a616 <File::unlink()>
c0021533:	83 c4 10             	add    esp,0x10
c0021536:	85 db                	test   ebx,ebx
c0021538:	89 c6                	mov    esi,eax
c002153a:	74 0c                	je     c0021548 <SysRmdir(regs*)+0x48>
c002153c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002153e:	83 ec 0c             	sub    esp,0xc
c0021541:	53                   	push   ebx
c0021542:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021545:	83 c4 10             	add    esp,0x10
c0021548:	31 c0                	xor    eax,eax
c002154a:	85 f6                	test   esi,esi
c002154c:	0f 95 c0             	setne  al
c002154f:	31 d2                	xor    edx,edx
c0021551:	f7 d8                	neg    eax
c0021553:	83 d2 00             	adc    edx,0x0
c0021556:	83 c4 04             	add    esp,0x4
c0021559:	5b                   	pop    ebx
c002155a:	f7 da                	neg    edx
c002155c:	5e                   	pop    esi
c002155d:	c3                   	ret    

c002155e <SysUnlink(regs*)>:
c002155e:	56                   	push   esi
c002155f:	53                   	push   ebx
c0021560:	83 ec 10             	sub    esp,0x10
c0021563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021567:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002156a:	68 14 01 00 00       	push   0x114
c002156f:	e8 67 4e ff ff       	call   c00163db <malloc>
c0021574:	6a 00                	push   0x0
c0021576:	89 c3                	mov    ebx,eax
c0021578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002157d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021580:	50                   	push   eax
c0021581:	56                   	push   esi
c0021582:	53                   	push   ebx
c0021583:	e8 c4 8d ff ff       	call   c001a34c <File::File(char const*, Process*, bool)>
c0021588:	83 c4 14             	add    esp,0x14
c002158b:	53                   	push   ebx
c002158c:	e8 85 90 ff ff       	call   c001a616 <File::unlink()>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	85 db                	test   ebx,ebx
c0021596:	89 c6                	mov    esi,eax
c0021598:	74 0c                	je     c00215a6 <SysUnlink(regs*)+0x48>
c002159a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002159c:	83 ec 0c             	sub    esp,0xc
c002159f:	53                   	push   ebx
c00215a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00215a3:	83 c4 10             	add    esp,0x10
c00215a6:	31 c0                	xor    eax,eax
c00215a8:	85 f6                	test   esi,esi
c00215aa:	0f 95 c0             	setne  al
c00215ad:	31 d2                	xor    edx,edx
c00215af:	f7 d8                	neg    eax
c00215b1:	83 d2 00             	adc    edx,0x0
c00215b4:	83 c4 04             	add    esp,0x4
c00215b7:	5b                   	pop    ebx
c00215b8:	f7 da                	neg    edx
c00215ba:	5e                   	pop    esi
c00215bb:	c3                   	ret    

c00215bc <SysGetArgv(regs*)>:
c00215bc:	83 ec 0c             	sub    esp,0xc
c00215bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00215c6:	85 c0                	test   eax,eax
c00215c8:	78 2c                	js     c00215f6 <SysGetArgv(regs*)+0x3a>
c00215ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00215d0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00215d3:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00215d9:	7d 1b                	jge    c00215f6 <SysGetArgv(regs*)+0x3a>
c00215db:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00215e2:	85 c0                	test   eax,eax
c00215e4:	74 18                	je     c00215fe <SysGetArgv(regs*)+0x42>
c00215e6:	83 ec 08             	sub    esp,0x8
c00215e9:	50                   	push   eax
c00215ea:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00215ed:	50                   	push   eax
c00215ee:	e8 5d f0 fd ff       	call   c0000650 <strcpy>
c00215f3:	83 c4 10             	add    esp,0x10
c00215f6:	31 c0                	xor    eax,eax
c00215f8:	31 d2                	xor    edx,edx
c00215fa:	83 c4 0c             	add    esp,0xc
c00215fd:	c3                   	ret    
c00215fe:	b8 01 00 00 00       	mov    eax,0x1
c0021603:	31 d2                	xor    edx,edx
c0021605:	83 c4 0c             	add    esp,0xc
c0021608:	c3                   	ret    

c0021609 <SysUSleep(regs*)>:
c0021609:	83 ec 1c             	sub    esp,0x1c
c002160c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021610:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021613:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021616:	6a 00                	push   0x0
c0021618:	6a 64                	push   0x64
c002161a:	52                   	push   edx
c002161b:	50                   	push   eax
c002161c:	e8 cf cf 00 00       	call   c002e5f0 <__udivdi3>
c0021621:	83 c4 14             	add    esp,0x14
c0021624:	50                   	push   eax
c0021625:	e8 42 3d 00 00       	call   c002536c <milliTenthSleep(unsigned int)>
c002162a:	31 c0                	xor    eax,eax
c002162c:	31 d2                	xor    edx,edx
c002162e:	83 c4 1c             	add    esp,0x1c
c0021631:	c3                   	ret    

c0021632 <SysSpawn(regs*)>:
c0021632:	56                   	push   esi
c0021633:	53                   	push   ebx
c0021634:	83 ec 04             	sub    esp,0x4
c0021637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002163b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002163e:	85 f6                	test   esi,esi
c0021640:	75 0a                	jne    c002164c <SysSpawn(regs*)+0x1a>
c0021642:	83 c4 04             	add    esp,0x4
c0021645:	31 c0                	xor    eax,eax
c0021647:	5b                   	pop    ebx
c0021648:	31 d2                	xor    edx,edx
c002164a:	5e                   	pop    esi
c002164b:	c3                   	ret    
c002164c:	83 ec 0c             	sub    esp,0xc
c002164f:	68 24 07 00 00       	push   0x724
c0021654:	e8 82 4d ff ff       	call   c00163db <malloc>
c0021659:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002165c:	83 c4 10             	add    esp,0x10
c002165f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021662:	89 c6                	mov    esi,eax
c0021664:	31 c0                	xor    eax,eax
c0021666:	85 c9                	test   ecx,ecx
c0021668:	75 08                	jne    c0021672 <SysSpawn(regs*)+0x40>
c002166a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002166f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021672:	52                   	push   edx
c0021673:	50                   	push   eax
c0021674:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021677:	50                   	push   eax
c0021678:	56                   	push   esi
c0021679:	e8 96 34 00 00       	call   c0024b14 <Process::Process(char const*, Process*, char**)>
c002167e:	83 c4 10             	add    esp,0x10
c0021681:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021688:	75 b8                	jne    c0021642 <SysSpawn(regs*)+0x10>
c002168a:	83 ec 0c             	sub    esp,0xc
c002168d:	56                   	push   esi
c002168e:	e8 bd 39 00 00       	call   c0025050 <Process::createUserThread()>
c0021693:	8b 06                	mov    eax,DWORD PTR [esi]
c0021695:	83 c4 10             	add    esp,0x10
c0021698:	83 c4 04             	add    esp,0x4
c002169b:	5b                   	pop    ebx
c002169c:	89 c2                	mov    edx,eax
c002169e:	c1 fa 1f             	sar    edx,0x1f
c00216a1:	5e                   	pop    esi
c00216a2:	c3                   	ret    

c00216a3 <SysGetEnv(regs*)>:
c00216a3:	57                   	push   edi
c00216a4:	56                   	push   esi
c00216a5:	53                   	push   ebx
c00216a6:	83 ec 1c             	sub    esp,0x1c
c00216a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00216b2:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216b5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00216b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216bb:	51                   	push   ecx
c00216bc:	e8 76 e9 ff ff       	call   c0020037 <KeGetProcessTotalEnvCount(Process*)>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	39 c7                	cmp    edi,eax
c00216c6:	7c 12                	jl     c00216da <SysGetEnv(regs*)+0x37>
c00216c8:	31 c0                	xor    eax,eax
c00216ca:	31 d2                	xor    edx,edx
c00216cc:	85 f6                	test   esi,esi
c00216ce:	74 03                	je     c00216d3 <SysGetEnv(regs*)+0x30>
c00216d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	5b                   	pop    ebx
c00216d7:	5e                   	pop    esi
c00216d8:	5f                   	pop    edi
c00216d9:	c3                   	ret    
c00216da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216de:	83 ec 04             	sub    esp,0x4
c00216e1:	57                   	push   edi
c00216e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00216e8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00216eb:	57                   	push   edi
c00216ec:	50                   	push   eax
c00216ed:	e8 65 e9 ff ff       	call   c0020057 <KeGetProcessEnvPair(Process*, int)>
c00216f2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00216f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00216fd:	83 c4 0c             	add    esp,0xc
c0021700:	85 d2                	test   edx,edx
c0021702:	75 23                	jne    c0021727 <SysGetEnv(regs*)+0x84>
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	50                   	push   eax
c0021708:	e8 73 ee fd ff       	call   c0000580 <strlen>
c002170d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021710:	89 c3                	mov    ebx,eax
c0021712:	e8 69 ee fd ff       	call   c0000580 <strlen>
c0021717:	83 c4 10             	add    esp,0x10
c002171a:	31 d2                	xor    edx,edx
c002171c:	83 c4 10             	add    esp,0x10
c002171f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021723:	5b                   	pop    ebx
c0021724:	5e                   	pop    esi
c0021725:	5f                   	pop    edi
c0021726:	c3                   	ret    
c0021727:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002172a:	83 ec 08             	sub    esp,0x8
c002172d:	50                   	push   eax
c002172e:	56                   	push   esi
c002172f:	e8 1c ef fd ff       	call   c0000650 <strcpy>
c0021734:	58                   	pop    eax
c0021735:	5a                   	pop    edx
c0021736:	68 1e 29 03 c0       	push   0xc003291e
c002173b:	56                   	push   esi
c002173c:	e8 2f f1 fd ff       	call   c0000870 <strcat>
c0021741:	59                   	pop    ecx
c0021742:	5b                   	pop    ebx
c0021743:	57                   	push   edi
c0021744:	56                   	push   esi
c0021745:	e8 26 f1 fd ff       	call   c0000870 <strcat>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	31 c0                	xor    eax,eax
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	31 d2                	xor    edx,edx
c0021754:	5b                   	pop    ebx
c0021755:	5e                   	pop    esi
c0021756:	5f                   	pop    edi
c0021757:	c3                   	ret    

c0021758 <SysSetFatAttrib(regs*)>:
c0021758:	57                   	push   edi
c0021759:	56                   	push   esi
c002175a:	53                   	push   ebx
c002175b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002175f:	83 ec 0c             	sub    esp,0xc
c0021762:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021765:	68 14 01 00 00       	push   0x114
c002176a:	e8 6c 4c ff ff       	call   c00163db <malloc>
c002176f:	83 c4 0c             	add    esp,0xc
c0021772:	89 c3                	mov    ebx,eax
c0021774:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021779:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002177c:	50                   	push   eax
c002177d:	57                   	push   edi
c002177e:	53                   	push   ebx
c002177f:	e8 a6 8c ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0021784:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021787:	83 c4 0c             	add    esp,0xc
c002178a:	0f b6 d4             	movzx  edx,ah
c002178d:	0f b6 c0             	movzx  eax,al
c0021790:	52                   	push   edx
c0021791:	50                   	push   eax
c0021792:	53                   	push   ebx
c0021793:	e8 18 8f ff ff       	call   c001a6b0 <File::chfatattr(unsigned char, unsigned char)>
c0021798:	83 c4 10             	add    esp,0x10
c002179b:	85 db                	test   ebx,ebx
c002179d:	89 c6                	mov    esi,eax
c002179f:	74 0c                	je     c00217ad <SysSetFatAttrib(regs*)+0x55>
c00217a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217a3:	83 ec 0c             	sub    esp,0xc
c00217a6:	53                   	push   ebx
c00217a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00217aa:	83 c4 10             	add    esp,0x10
c00217ad:	5b                   	pop    ebx
c00217ae:	31 c0                	xor    eax,eax
c00217b0:	85 f6                	test   esi,esi
c00217b2:	0f 95 c0             	setne  al
c00217b5:	31 d2                	xor    edx,edx
c00217b7:	5e                   	pop    esi
c00217b8:	f7 d8                	neg    eax
c00217ba:	83 d2 00             	adc    edx,0x0
c00217bd:	f7 da                	neg    edx
c00217bf:	5f                   	pop    edi
c00217c0:	c3                   	ret    

c00217c1 <SysPipe(regs*)>:
c00217c1:	57                   	push   edi
c00217c2:	56                   	push   esi
c00217c3:	53                   	push   ebx
c00217c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00217ce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00217d1:	6a 20                	push   0x20
c00217d3:	e8 03 4c ff ff       	call   c00163db <malloc>
c00217d8:	89 c3                	mov    ebx,eax
c00217da:	58                   	pop    eax
c00217db:	5a                   	pop    edx
c00217dc:	68 00 50 00 00       	push   0x5000
c00217e1:	53                   	push   ebx
c00217e2:	e8 5f 55 ff ff       	call   c0016d46 <Pipe::Pipe(int)>
c00217e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217ea:	e8 b7 62 ff ff       	call   c0017aa6 <UnixFile::getFileDescriptor()>
c00217ef:	89 07                	mov    DWORD PTR [edi],eax
c00217f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f4:	e8 ad 62 ff ff       	call   c0017aa6 <UnixFile::getFileDescriptor()>
c00217f9:	83 c4 10             	add    esp,0x10
c00217fc:	31 d2                	xor    edx,edx
c00217fe:	89 06                	mov    DWORD PTR [esi],eax
c0021800:	31 c0                	xor    eax,eax
c0021802:	5b                   	pop    ebx
c0021803:	5e                   	pop    esi
c0021804:	5f                   	pop    edi
c0021805:	c3                   	ret    

c0021806 <SysGetUnixTime(regs*)>:
c0021806:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002180b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021811:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021815:	e9 dc 95 ff ff       	jmp    c001adf6 <Clock::timeInSecondsLocal()>

c002181a <string_ends_with(char const*, char const*)>:
c002181a:	57                   	push   edi
c002181b:	56                   	push   esi
c002181c:	53                   	push   ebx
c002181d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021821:	83 ec 0c             	sub    esp,0xc
c0021824:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021828:	53                   	push   ebx
c0021829:	e8 52 ed fd ff       	call   c0000580 <strlen>
c002182e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021831:	89 c6                	mov    esi,eax
c0021833:	e8 48 ed fd ff       	call   c0000580 <strlen>
c0021838:	83 c4 10             	add    esp,0x10
c002183b:	31 d2                	xor    edx,edx
c002183d:	39 c6                	cmp    esi,eax
c002183f:	7d 06                	jge    c0021847 <string_ends_with(char const*, char const*)+0x2d>
c0021841:	5b                   	pop    ebx
c0021842:	89 d0                	mov    eax,edx
c0021844:	5e                   	pop    esi
c0021845:	5f                   	pop    edi
c0021846:	c3                   	ret    
c0021847:	83 ec 08             	sub    esp,0x8
c002184a:	29 c6                	sub    esi,eax
c002184c:	57                   	push   edi
c002184d:	01 f3                	add    ebx,esi
c002184f:	53                   	push   ebx
c0021850:	e8 2b ef fd ff       	call   c0000780 <strcmp>
c0021855:	83 c4 10             	add    esp,0x10
c0021858:	31 d2                	xor    edx,edx
c002185a:	5b                   	pop    ebx
c002185b:	5e                   	pop    esi
c002185c:	85 c0                	test   eax,eax
c002185e:	5f                   	pop    edi
c002185f:	0f 94 c2             	sete   dl
c0021862:	89 d0                	mov    eax,edx
c0021864:	c3                   	ret    

c0021865 <SysOpen(regs*)>:
c0021865:	56                   	push   esi
c0021866:	53                   	push   ebx
c0021867:	81 ec 04 01 00 00    	sub    esp,0x104
c002186d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021874:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021877:	85 c0                	test   eax,eax
c0021879:	0f 84 c4 01 00 00    	je     c0021a43 <SysOpen(regs*)+0x1de>
c002187f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021882:	85 c0                	test   eax,eax
c0021884:	0f 84 b9 01 00 00    	je     c0021a43 <SysOpen(regs*)+0x1de>
c002188a:	6a 00                	push   0x0
c002188c:	68 20 29 03 c0       	push   0xc0032920
c0021891:	50                   	push   eax
c0021892:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021896:	56                   	push   esi
c0021897:	e8 82 88 ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002189c:	89 34 24             	mov    DWORD PTR [esp],esi
c002189f:	e8 dc ec fd ff       	call   c0000580 <strlen>
c00218a4:	83 c4 10             	add    esp,0x10
c00218a7:	83 e8 01             	sub    eax,0x1
c00218aa:	74 29                	je     c00218d5 <SysOpen(regs*)+0x70>
c00218ac:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00218b0:	83 fa 2e             	cmp    edx,0x2e
c00218b3:	74 1c                	je     c00218d1 <SysOpen(regs*)+0x6c>
c00218b5:	83 fa 3a             	cmp    edx,0x3a
c00218b8:	74 17                	je     c00218d1 <SysOpen(regs*)+0x6c>
c00218ba:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00218be:	83 e8 01             	sub    eax,0x1
c00218c1:	74 12                	je     c00218d5 <SysOpen(regs*)+0x70>
c00218c3:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00218c7:	83 fa 3a             	cmp    edx,0x3a
c00218ca:	74 05                	je     c00218d1 <SysOpen(regs*)+0x6c>
c00218cc:	83 fa 2e             	cmp    edx,0x2e
c00218cf:	75 e9                	jne    c00218ba <SysOpen(regs*)+0x55>
c00218d1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00218d5:	83 ec 08             	sub    esp,0x8
c00218d8:	68 24 29 03 c0       	push   0xc0032924
c00218dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00218e0:	50                   	push   eax
c00218e1:	e8 34 ff ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c00218e6:	83 c4 10             	add    esp,0x10
c00218e9:	85 c0                	test   eax,eax
c00218eb:	74 1d                	je     c002190a <SysOpen(regs*)+0xa5>
c00218ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00218f0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00218f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218fd:	81 c4 04 01 00 00    	add    esp,0x104
c0021903:	31 c0                	xor    eax,eax
c0021905:	5b                   	pop    ebx
c0021906:	31 d2                	xor    edx,edx
c0021908:	5e                   	pop    esi
c0021909:	c3                   	ret    
c002190a:	83 ec 08             	sub    esp,0x8
c002190d:	68 29 29 03 c0       	push   0xc0032929
c0021912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021915:	50                   	push   eax
c0021916:	e8 ff fe ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c002191b:	83 c4 10             	add    esp,0x10
c002191e:	85 c0                	test   eax,eax
c0021920:	75 cb                	jne    c00218ed <SysOpen(regs*)+0x88>
c0021922:	83 ec 08             	sub    esp,0x8
c0021925:	68 25 29 03 c0       	push   0xc0032925
c002192a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002192d:	50                   	push   eax
c002192e:	e8 4d ee fd ff       	call   c0000780 <strcmp>
c0021933:	83 c4 10             	add    esp,0x10
c0021936:	85 c0                	test   eax,eax
c0021938:	74 b3                	je     c00218ed <SysOpen(regs*)+0x88>
c002193a:	83 ec 08             	sub    esp,0x8
c002193d:	68 24 29 03 c0       	push   0xc0032924
c0021942:	56                   	push   esi
c0021943:	e8 d2 fe ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c0021948:	83 c4 10             	add    esp,0x10
c002194b:	85 c0                	test   eax,eax
c002194d:	75 9e                	jne    c00218ed <SysOpen(regs*)+0x88>
c002194f:	83 ec 08             	sub    esp,0x8
c0021952:	68 2e 29 03 c0       	push   0xc003292e
c0021957:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002195a:	50                   	push   eax
c002195b:	e8 ba fe ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c0021960:	83 c4 10             	add    esp,0x10
c0021963:	85 c0                	test   eax,eax
c0021965:	0f 85 eb 00 00 00    	jne    c0021a56 <SysOpen(regs*)+0x1f1>
c002196b:	83 ec 08             	sub    esp,0x8
c002196e:	68 33 29 03 c0       	push   0xc0032933
c0021973:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021976:	50                   	push   eax
c0021977:	e8 9e fe ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c002197c:	83 c4 10             	add    esp,0x10
c002197f:	85 c0                	test   eax,eax
c0021981:	0f 85 cf 00 00 00    	jne    c0021a56 <SysOpen(regs*)+0x1f1>
c0021987:	83 ec 08             	sub    esp,0x8
c002198a:	68 2f 29 03 c0       	push   0xc003292f
c002198f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021992:	51                   	push   ecx
c0021993:	e8 e8 ed fd ff       	call   c0000780 <strcmp>
c0021998:	83 c4 10             	add    esp,0x10
c002199b:	85 c0                	test   eax,eax
c002199d:	0f 84 b3 00 00 00    	je     c0021a56 <SysOpen(regs*)+0x1f1>
c00219a3:	83 ec 08             	sub    esp,0x8
c00219a6:	68 2e 29 03 c0       	push   0xc003292e
c00219ab:	56                   	push   esi
c00219ac:	e8 69 fe ff ff       	call   c002181a <string_ends_with(char const*, char const*)>
c00219b1:	83 c4 10             	add    esp,0x10
c00219b4:	85 c0                	test   eax,eax
c00219b6:	0f 85 9a 00 00 00    	jne    c0021a56 <SysOpen(regs*)+0x1f1>
c00219bc:	83 ec 0c             	sub    esp,0xc
c00219bf:	68 14 01 00 00       	push   0x114
c00219c4:	e8 12 4a ff ff       	call   c00163db <malloc>
c00219c9:	83 c4 0c             	add    esp,0xc
c00219cc:	89 c6                	mov    esi,eax
c00219ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219d6:	50                   	push   eax
c00219d7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00219da:	52                   	push   edx
c00219db:	56                   	push   esi
c00219dc:	e8 49 8a ff ff       	call   c001a42a <File::File(char const*, Process*)>
c00219e1:	83 c4 10             	add    esp,0x10
c00219e4:	85 f6                	test   esi,esi
c00219e6:	74 5b                	je     c0021a43 <SysOpen(regs*)+0x1de>
c00219e8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219eb:	0f b6 c2             	movzx  eax,dl
c00219ee:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00219f1:	89 d0                	mov    eax,edx
c00219f3:	83 e0 01             	and    eax,0x1
c00219f6:	f6 c2 02             	test   dl,0x2
c00219f9:	74 03                	je     c00219fe <SysOpen(regs*)+0x199>
c00219fb:	83 c8 02             	or     eax,0x2
c00219fe:	f6 c2 04             	test   dl,0x4
c0021a01:	74 03                	je     c0021a06 <SysOpen(regs*)+0x1a1>
c0021a03:	83 c8 04             	or     eax,0x4
c0021a06:	f6 c2 08             	test   dl,0x8
c0021a09:	74 03                	je     c0021a0e <SysOpen(regs*)+0x1a9>
c0021a0b:	83 c8 0a             	or     eax,0xa
c0021a0e:	80 e2 10             	and    dl,0x10
c0021a11:	74 03                	je     c0021a16 <SysOpen(regs*)+0x1b1>
c0021a13:	83 c8 12             	or     eax,0x12
c0021a16:	83 ec 08             	sub    esp,0x8
c0021a19:	50                   	push   eax
c0021a1a:	56                   	push   esi
c0021a1b:	e8 28 8a ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0021a20:	83 c4 10             	add    esp,0x10
c0021a23:	85 c0                	test   eax,eax
c0021a25:	75 1c                	jne    c0021a43 <SysOpen(regs*)+0x1de>
c0021a27:	83 ec 0c             	sub    esp,0xc
c0021a2a:	56                   	push   esi
c0021a2b:	e8 76 60 ff ff       	call   c0017aa6 <UnixFile::getFileDescriptor()>
c0021a30:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021a33:	83 c4 10             	add    esp,0x10
c0021a36:	89 02                	mov    DWORD PTR [edx],eax
c0021a38:	c1 f8 1f             	sar    eax,0x1f
c0021a3b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021a3e:	e9 ba fe ff ff       	jmp    c00218fd <SysOpen(regs*)+0x98>
c0021a43:	81 c4 04 01 00 00    	add    esp,0x104
c0021a49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a4e:	5b                   	pop    ebx
c0021a4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a54:	5e                   	pop    esi
c0021a55:	c3                   	ret    
c0021a56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021a59:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021a5f:	e9 92 fe ff ff       	jmp    c00218f6 <SysOpen(regs*)+0x91>

c0021a64 <KeSystemCall(regs*, void*)>:
c0021a64:	53                   	push   ebx
c0021a65:	83 ec 08             	sub    esp,0x8
c0021a68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a6c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021a6f:	83 f8 3e             	cmp    eax,0x3e
c0021a72:	77 16                	ja     c0021a8a <KeSystemCall(regs*, void*)+0x26>
c0021a74:	8b 14 85 80 41 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbe80]
c0021a7b:	85 d2                	test   edx,edx
c0021a7d:	74 0b                	je     c0021a8a <KeSystemCall(regs*, void*)+0x26>
c0021a7f:	83 ec 0c             	sub    esp,0xc
c0021a82:	53                   	push   ebx
c0021a83:	ff d2                	call   edx
c0021a85:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021a88:	eb 0d                	jmp    c0021a97 <KeSystemCall(regs*, void*)+0x33>
c0021a8a:	52                   	push   edx
c0021a8b:	52                   	push   edx
c0021a8c:	50                   	push   eax
c0021a8d:	68 38 29 03 c0       	push   0xc0032938
c0021a92:	e8 7b 77 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0021a97:	83 c4 10             	add    esp,0x10
c0021a9a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021a9f:	83 c4 08             	add    esp,0x8
c0021aa2:	31 d2                	xor    edx,edx
c0021aa4:	5b                   	pop    ebx
c0021aa5:	c3                   	ret    
c0021aa6:	66 90                	xchg   ax,ax

c0021aa8 <KeSwitchEndian16(unsigned short)>:
c0021aa8:	83 ec 04             	sub    esp,0x4
c0021aab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021aaf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021ab3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ab7:	c1 f8 08             	sar    eax,0x8
c0021aba:	89 c2                	mov    edx,eax
c0021abc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ac0:	c1 e0 08             	shl    eax,0x8
c0021ac3:	09 d0                	or     eax,edx
c0021ac5:	83 c4 04             	add    esp,0x4
c0021ac8:	c3                   	ret    
c0021ac9:	8d 76 00             	lea    esi,[esi+0x0]

c0021acc <KeSwitchEndian32(unsigned int)>:
c0021acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad0:	c1 e8 18             	shr    eax,0x18
c0021ad3:	89 c2                	mov    edx,eax
c0021ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad9:	c1 e0 08             	shl    eax,0x8
c0021adc:	25 00 00 ff 00       	and    eax,0xff0000
c0021ae1:	09 c2                	or     edx,eax
c0021ae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae7:	c1 e8 08             	shr    eax,0x8
c0021aea:	25 00 ff 00 00       	and    eax,0xff00
c0021aef:	09 c2                	or     edx,eax
c0021af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021af5:	c1 e0 18             	shl    eax,0x18
c0021af8:	09 d0                	or     eax,edx
c0021afa:	c3                   	ret    
c0021afb:	90                   	nop

c0021afc <EthernetCRC32(unsigned char*, int)>:
c0021afc:	83 ec 10             	sub    esp,0x10
c0021aff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b04:	75 0a                	jne    c0021b10 <EthernetCRC32(unsigned char*, int)+0x14>
c0021b06:	b8 00 00 00 00       	mov    eax,0x0
c0021b0b:	e9 8c 00 00 00       	jmp    c0021b9c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021b15:	7f 09                	jg     c0021b20 <EthernetCRC32(unsigned char*, int)+0x24>
c0021b17:	b8 00 00 00 00       	mov    eax,0x0
c0021b1c:	eb 7e                	jmp    c0021b9c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b1e:	66 90                	xchg   ax,ax
c0021b20:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b34:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021b38:	7d 5a                	jge    c0021b94 <EthernetCRC32(unsigned char*, int)+0x98>
c0021b3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b42:	01 d0                	add    eax,edx
c0021b44:	8a 00                	mov    al,BYTE PTR [eax]
c0021b46:	0f b6 c0             	movzx  eax,al
c0021b49:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021b4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b55:	8d 76 00             	lea    esi,[esi+0x0]
c0021b58:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021b5d:	7f 2d                	jg     c0021b8c <EthernetCRC32(unsigned char*, int)+0x90>
c0021b5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b63:	83 e0 01             	and    eax,0x1
c0021b66:	74 10                	je     c0021b78 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b6c:	d1 e8                	shr    eax,1
c0021b6e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021b73:	eb 0b                	jmp    c0021b80 <EthernetCRC32(unsigned char*, int)+0x84>
c0021b75:	8d 76 00             	lea    esi,[esi+0x0]
c0021b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b7c:	d1 e8                	shr    eax,1
c0021b7e:	66 90                	xchg   ax,ax
c0021b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b84:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021b89:	eb cd                	jmp    c0021b58 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021b8b:	90                   	nop
c0021b8c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021b91:	eb 9d                	jmp    c0021b30 <EthernetCRC32(unsigned char*, int)+0x34>
c0021b93:	90                   	nop
c0021b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b98:	f7 d0                	not    eax
c0021b9a:	66 90                	xchg   ax,ax
c0021b9c:	83 c4 10             	add    esp,0x10
c0021b9f:	c3                   	ret    

c0021ba0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021ba0:	83 ec 2c             	sub    esp,0x2c
c0021ba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021ba7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021bb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bbb:	0f b7 c0             	movzx  eax,ax
c0021bbe:	3d 06 08 00 00       	cmp    eax,0x806
c0021bc3:	75 13                	jne    c0021bd8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021bc5:	83 ec 0c             	sub    esp,0xc
c0021bc8:	68 4c 29 03 c0       	push   0xc003294c
c0021bcd:	e8 40 76 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0021bd2:	83 c4 10             	add    esp,0x10
c0021bd5:	eb 25                	jmp    c0021bfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bd7:	90                   	nop
c0021bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bdf:	0f b7 c0             	movzx  eax,ax
c0021be2:	3d 00 08 00 00       	cmp    eax,0x800
c0021be7:	75 13                	jne    c0021bfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021be9:	83 ec 0c             	sub    esp,0xc
c0021bec:	68 62 29 03 c0       	push   0xc0032962
c0021bf1:	e8 1c 76 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0021bf6:	83 c4 10             	add    esp,0x10
c0021bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0021bfc:	90                   	nop
c0021bfd:	83 c4 2c             	add    esp,0x2c
c0021c00:	c3                   	ret    
c0021c01:	66 90                	xchg   ax,ax
c0021c03:	90                   	nop

c0021c04 <KeNetCreateSemaphore>:
c0021c04:	53                   	push   ebx
c0021c05:	83 ec 18             	sub    esp,0x18
c0021c08:	83 ec 0c             	sub    esp,0xc
c0021c0b:	6a 10                	push   0x10
c0021c0d:	e8 e5 e4 ff ff       	call   c00200f7 <operator new(unsigned long)>
c0021c12:	83 c4 10             	add    esp,0x10
c0021c15:	89 c3                	mov    ebx,eax
c0021c17:	83 ec 08             	sub    esp,0x8
c0021c1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021c1e:	53                   	push   ebx
c0021c1f:	e8 1c e9 ff ff       	call   c0020540 <Semaphore::Semaphore(int)>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c33:	89 10                	mov    DWORD PTR [eax],edx
c0021c35:	90                   	nop
c0021c36:	83 c4 18             	add    esp,0x18
c0021c39:	5b                   	pop    ebx
c0021c3a:	c3                   	ret    
c0021c3b:	90                   	nop

c0021c3c <KeNetFreeSemaphore>:
c0021c3c:	83 ec 0c             	sub    esp,0xc
c0021c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c45:	83 ec 08             	sub    esp,0x8
c0021c48:	6a 10                	push   0x10
c0021c4a:	50                   	push   eax
c0021c4b:	e8 c4 74 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c0021c50:	83 c4 10             	add    esp,0x10
c0021c53:	90                   	nop
c0021c54:	83 c4 0c             	add    esp,0xc
c0021c57:	c3                   	ret    

c0021c58 <KeNetSignalSemaphore>:
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c61:	83 ec 0c             	sub    esp,0xc
c0021c64:	50                   	push   eax
c0021c65:	e8 36 ec ff ff       	call   c00208a0 <Semaphore::release()>
c0021c6a:	83 c4 10             	add    esp,0x10
c0021c6d:	90                   	nop
c0021c6e:	83 c4 0c             	add    esp,0xc
c0021c71:	c3                   	ret    
c0021c72:	66 90                	xchg   ax,ax

c0021c74 <KeNetWaitSemaphore>:
c0021c74:	83 ec 0c             	sub    esp,0xc
c0021c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c7d:	83 ec 08             	sub    esp,0x8
c0021c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c84:	50                   	push   eax
c0021c85:	e8 52 ea ff ff       	call   c00206dc <Semaphore::acquire(int)>
c0021c8a:	83 c4 10             	add    esp,0x10
c0021c8d:	83 c4 0c             	add    esp,0xc
c0021c90:	c3                   	ret    

c0021c91 <CmOpen(char const*)>:
c0021c91:	57                   	push   edi
c0021c92:	56                   	push   esi
c0021c93:	53                   	push   ebx
c0021c94:	83 ec 1c             	sub    esp,0x1c
c0021c97:	6a 30                	push   0x30
c0021c99:	e8 3d 47 ff ff       	call   c00163db <malloc>
c0021c9e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021ca5:	89 c3                	mov    ebx,eax
c0021ca7:	e8 2f 47 ff ff       	call   c00163db <malloc>
c0021cac:	83 c4 0c             	add    esp,0xc
c0021caf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021cb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021cb9:	89 c6                	mov    esi,eax
c0021cbb:	50                   	push   eax
c0021cbc:	e8 69 87 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0021cc1:	83 c4 0c             	add    esp,0xc
c0021cc4:	89 33                	mov    DWORD PTR [ebx],esi
c0021cc6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021cca:	50                   	push   eax
c0021ccb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021ccf:	50                   	push   eax
c0021cd0:	56                   	push   esi
c0021cd1:	e8 74 8a ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0021cd6:	5a                   	pop    edx
c0021cd7:	59                   	pop    ecx
c0021cd8:	6a 01                	push   0x1
c0021cda:	ff 33                	push   DWORD PTR [ebx]
c0021cdc:	e8 67 87 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0021ce1:	5e                   	pop    esi
c0021ce2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ce6:	e8 f0 46 ff ff       	call   c00163db <malloc>
c0021ceb:	5a                   	pop    edx
c0021cec:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021cf0:	89 c7                	mov    edi,eax
c0021cf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021cf4:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cf6:	56                   	push   esi
c0021cf7:	57                   	push   edi
c0021cf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d00:	50                   	push   eax
c0021d01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d04:	83 c4 14             	add    esp,0x14
c0021d07:	ff 33                	push   DWORD PTR [ebx]
c0021d09:	e8 98 87 ff ff       	call   c001a4a6 <File::close()>
c0021d0e:	59                   	pop    ecx
c0021d0f:	58                   	pop    eax
c0021d10:	6a 13                	push   0x13
c0021d12:	ff 33                	push   DWORD PTR [ebx]
c0021d14:	e8 2f 87 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0021d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d20:	57                   	push   edi
c0021d21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d29:	50                   	push   eax
c0021d2a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021d2d:	83 c4 14             	add    esp,0x14
c0021d30:	57                   	push   edi
c0021d31:	e8 b5 46 ff ff       	call   c00163eb <free>
c0021d36:	83 c4 10             	add    esp,0x10
c0021d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021d3c:	75 10                	jne    c0021d4e <CmOpen(char const*)+0xbd>
c0021d3e:	83 ec 0c             	sub    esp,0xc
c0021d41:	68 77 29 03 c0       	push   0xc0032977
c0021d46:	e8 4f e4 ff ff       	call   c002019a <KePanic(char const*)>
c0021d4b:	83 c4 10             	add    esp,0x10
c0021d4e:	50                   	push   eax
c0021d4f:	6a 00                	push   0x0
c0021d51:	6a 00                	push   0x0
c0021d53:	ff 33                	push   DWORD PTR [ebx]
c0021d55:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021d58:	e8 a9 87 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0021d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d61:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d64:	57                   	push   edi
c0021d65:	6a 00                	push   0x0
c0021d67:	6a 2b                	push   0x2b
c0021d69:	50                   	push   eax
c0021d6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d6d:	83 c4 1c             	add    esp,0x1c
c0021d70:	6a 00                	push   0x0
c0021d72:	6a 00                	push   0x0
c0021d74:	ff 33                	push   DWORD PTR [ebx]
c0021d76:	e8 8b 87 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0021d7b:	83 c4 0c             	add    esp,0xc
c0021d7e:	6a 08                	push   0x8
c0021d80:	68 88 29 03 c0       	push   0xc0032988
c0021d85:	57                   	push   edi
c0021d86:	e8 f5 e5 fd ff       	call   c0000380 <memcmp>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	85 c0                	test   eax,eax
c0021d90:	74 10                	je     c0021da2 <CmOpen(char const*)+0x111>
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	68 91 29 03 c0       	push   0xc0032991
c0021d9a:	e8 fb e3 ff ff       	call   c002019a <KePanic(char const*)>
c0021d9f:	83 c4 10             	add    esp,0x10
c0021da2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021da6:	83 c4 10             	add    esp,0x10
c0021da9:	89 d8                	mov    eax,ebx
c0021dab:	5b                   	pop    ebx
c0021dac:	5e                   	pop    esi
c0021dad:	5f                   	pop    edi
c0021dae:	c3                   	ret    

c0021daf <CmClose(Reghive_Tag*)>:
c0021daf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021db3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021db7:	74 0b                	je     c0021dc4 <CmClose(Reghive_Tag*)+0x15>
c0021db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dbf:	e9 e2 86 ff ff       	jmp    c001a4a6 <File::close()>
c0021dc4:	c3                   	ret    

c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021dc5:	53                   	push   ebx
c0021dc6:	83 ec 18             	sub    esp,0x18
c0021dc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021dcd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021dd1:	74 29                	je     c0021dfc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021dd3:	50                   	push   eax
c0021dd4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021dd9:	99                   	cdq    
c0021dda:	52                   	push   edx
c0021ddb:	50                   	push   eax
c0021ddc:	ff 33                	push   DWORD PTR [ebx]
c0021dde:	e8 23 87 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0021de3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021de5:	5a                   	pop    edx
c0021de6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021dea:	8b 10                	mov    edx,DWORD PTR [eax]
c0021dec:	51                   	push   ecx
c0021ded:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021df1:	6a 00                	push   0x0
c0021df3:	6a 2b                	push   0x2b
c0021df5:	50                   	push   eax
c0021df6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021df9:	83 c4 20             	add    esp,0x20
c0021dfc:	83 c4 18             	add    esp,0x18
c0021dff:	5b                   	pop    ebx
c0021e00:	c3                   	ret    

c0021e01 <CmGetString(Reghive_Tag*, int, char*)>:
c0021e01:	55                   	push   ebp
c0021e02:	57                   	push   edi
c0021e03:	56                   	push   esi
c0021e04:	53                   	push   ebx
c0021e05:	31 db                	xor    ebx,ebx
c0021e07:	83 ec 70             	sub    esp,0x70
c0021e0a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021e0e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021e15:	50                   	push   eax
c0021e16:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e1d:	55                   	push   ebp
c0021e1e:	e8 a2 ff ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e23:	83 c4 10             	add    esp,0x10
c0021e26:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021e2b:	c1 e0 08             	shl    eax,0x8
c0021e2e:	89 c2                	mov    edx,eax
c0021e30:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021e35:	09 d0                	or     eax,edx
c0021e37:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021e3c:	c1 e0 08             	shl    eax,0x8
c0021e3f:	09 d0                	or     eax,edx
c0021e41:	74 25                	je     c0021e68 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021e43:	52                   	push   edx
c0021e44:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021e48:	52                   	push   edx
c0021e49:	6b fb 0d             	imul   edi,ebx,0xd
c0021e4c:	50                   	push   eax
c0021e4d:	55                   	push   ebp
c0021e4e:	e8 72 ff ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e53:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021e57:	b9 27 00 00 00       	mov    ecx,0x27
c0021e5c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e65:	83 c4 10             	add    esp,0x10
c0021e68:	83 c3 03             	add    ebx,0x3
c0021e6b:	83 fb 15             	cmp    ebx,0x15
c0021e6e:	75 b6                	jne    c0021e26 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021e70:	83 c4 6c             	add    esp,0x6c
c0021e73:	5b                   	pop    ebx
c0021e74:	5e                   	pop    esi
c0021e75:	5f                   	pop    edi
c0021e76:	5d                   	pop    ebp
c0021e77:	c3                   	ret    

c0021e78 <CmEnterDirectory(Reghive_Tag*, int)>:
c0021e78:	83 ec 40             	sub    esp,0x40
c0021e7b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021e7f:	50                   	push   eax
c0021e80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e88:	e8 38 ff ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e8d:	83 c4 10             	add    esp,0x10
c0021e90:	83 c8 ff             	or     eax,0xffffffff
c0021e93:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021e98:	75 19                	jne    c0021eb3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021e9a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021e9f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021ea4:	c1 e0 08             	shl    eax,0x8
c0021ea7:	09 c2                	or     edx,eax
c0021ea9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021eae:	c1 e0 10             	shl    eax,0x10
c0021eb1:	09 d0                	or     eax,edx
c0021eb3:	83 c4 3c             	add    esp,0x3c
c0021eb6:	c3                   	ret    

c0021eb7 <CmGetNext(Reghive_Tag*, int)>:
c0021eb7:	83 ec 40             	sub    esp,0x40
c0021eba:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021ebe:	50                   	push   eax
c0021ebf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ec7:	e8 f9 fe ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021ecc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021ed1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021ed6:	c1 e0 08             	shl    eax,0x8
c0021ed9:	09 c2                	or     edx,eax
c0021edb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021ee0:	83 c4 4c             	add    esp,0x4c
c0021ee3:	c1 e0 10             	shl    eax,0x10
c0021ee6:	09 d0                	or     eax,edx
c0021ee8:	c3                   	ret    

c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ee9:	53                   	push   ebx
c0021eea:	83 ec 18             	sub    esp,0x18
c0021eed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ef1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ef5:	74 29                	je     c0021f20 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ef7:	50                   	push   eax
c0021ef8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021efd:	99                   	cdq    
c0021efe:	52                   	push   edx
c0021eff:	50                   	push   eax
c0021f00:	ff 33                	push   DWORD PTR [ebx]
c0021f02:	e8 ff 85 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0021f07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f09:	5a                   	pop    edx
c0021f0a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f10:	51                   	push   ecx
c0021f11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f15:	6a 00                	push   0x0
c0021f17:	6a 2b                	push   0x2b
c0021f19:	50                   	push   eax
c0021f1a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021f1d:	83 c4 20             	add    esp,0x20
c0021f20:	83 c4 18             	add    esp,0x18
c0021f23:	5b                   	pop    ebx
c0021f24:	c3                   	ret    

c0021f25 <CmFreeExtent(Reghive_Tag*, int)>:
c0021f25:	53                   	push   ebx
c0021f26:	83 ec 3c             	sub    esp,0x3c
c0021f29:	6a 2b                	push   0x2b
c0021f2b:	6a 00                	push   0x0
c0021f2d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021f31:	53                   	push   ebx
c0021f32:	e8 b9 e5 fd ff       	call   c00004f0 <memset>
c0021f37:	83 c4 0c             	add    esp,0xc
c0021f3a:	53                   	push   ebx
c0021f3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f43:	e8 a1 ff ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f48:	83 c4 48             	add    esp,0x48
c0021f4b:	5b                   	pop    ebx
c0021f4c:	c3                   	ret    

c0021f4d <CmUpdateHeader(Reghive_Tag*)>:
c0021f4d:	83 ec 0c             	sub    esp,0xc
c0021f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f54:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021f58:	74 10                	je     c0021f6a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0021f5a:	52                   	push   edx
c0021f5b:	8d 50 05             	lea    edx,[eax+0x5]
c0021f5e:	52                   	push   edx
c0021f5f:	6a 00                	push   0x0
c0021f61:	50                   	push   eax
c0021f62:	e8 82 ff ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f67:	83 c4 10             	add    esp,0x10
c0021f6a:	83 c4 0c             	add    esp,0xc
c0021f6d:	c3                   	ret    

c0021f6e <CmExpand(Reghive_Tag*, int)>:
c0021f6e:	55                   	push   ebp
c0021f6f:	57                   	push   edi
c0021f70:	83 cf ff             	or     edi,0xffffffff
c0021f73:	56                   	push   esi
c0021f74:	53                   	push   ebx
c0021f75:	83 ec 3c             	sub    esp,0x3c
c0021f78:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0021f7c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021f80:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021f84:	74 59                	je     c0021fdf <CmExpand(Reghive_Tag*, int)+0x71>
c0021f86:	50                   	push   eax
c0021f87:	31 d2                	xor    edx,edx
c0021f89:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0021f8d:	31 ff                	xor    edi,edi
c0021f8f:	52                   	push   edx
c0021f90:	50                   	push   eax
c0021f91:	ff 33                	push   DWORD PTR [ebx]
c0021f93:	e8 6e 85 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0021f98:	83 c4 0c             	add    esp,0xc
c0021f9b:	6a 2b                	push   0x2b
c0021f9d:	6a 00                	push   0x0
c0021f9f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0021fa3:	55                   	push   ebp
c0021fa4:	e8 47 e5 fd ff       	call   c00004f0 <memset>
c0021fa9:	83 c4 10             	add    esp,0x10
c0021fac:	39 f7                	cmp    edi,esi
c0021fae:	7d 1b                	jge    c0021fcb <CmExpand(Reghive_Tag*, int)+0x5d>
c0021fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021fb2:	83 ec 0c             	sub    esp,0xc
c0021fb5:	47                   	inc    edi
c0021fb6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0021fba:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fbc:	51                   	push   ecx
c0021fbd:	55                   	push   ebp
c0021fbe:	6a 00                	push   0x0
c0021fc0:	6a 2b                	push   0x2b
c0021fc2:	50                   	push   eax
c0021fc3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021fc6:	83 c4 20             	add    esp,0x20
c0021fc9:	eb e1                	jmp    c0021fac <CmExpand(Reghive_Tag*, int)+0x3e>
c0021fcb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0021fce:	83 ec 0c             	sub    esp,0xc
c0021fd1:	01 fe                	add    esi,edi
c0021fd3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0021fd6:	53                   	push   ebx
c0021fd7:	e8 71 ff ff ff       	call   c0021f4d <CmUpdateHeader(Reghive_Tag*)>
c0021fdc:	83 c4 10             	add    esp,0x10
c0021fdf:	83 c4 3c             	add    esp,0x3c
c0021fe2:	89 f8                	mov    eax,edi
c0021fe4:	5b                   	pop    ebx
c0021fe5:	5e                   	pop    esi
c0021fe6:	5f                   	pop    edi
c0021fe7:	5d                   	pop    ebp
c0021fe8:	c3                   	ret    

c0021fe9 <CmFindUnusedExtent(Reghive_Tag*)>:
c0021fe9:	55                   	push   ebp
c0021fea:	57                   	push   edi
c0021feb:	56                   	push   esi
c0021fec:	53                   	push   ebx
c0021fed:	83 cb ff             	or     ebx,0xffffffff
c0021ff0:	83 ec 1c             	sub    esp,0x1c
c0021ff3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021ff7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0021ffb:	74 68                	je     c0022065 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0021ffd:	51                   	push   ecx
c0021ffe:	be 2b 00 00 00       	mov    esi,0x2b
c0022003:	6a 00                	push   0x0
c0022005:	31 ff                	xor    edi,edi
c0022007:	6a 00                	push   0x0
c0022009:	31 db                	xor    ebx,ebx
c002200b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002200e:	e8 f3 84 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0022013:	83 c4 10             	add    esp,0x10
c0022016:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022019:	76 3b                	jbe    c0022056 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002201b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002201e:	83 ec 0c             	sub    esp,0xc
c0022021:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022025:	8b 10                	mov    edx,DWORD PTR [eax]
c0022027:	51                   	push   ecx
c0022028:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002202c:	51                   	push   ecx
c002202d:	6a 00                	push   0x0
c002202f:	6a 01                	push   0x1
c0022031:	50                   	push   eax
c0022032:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022035:	83 c4 20             	add    esp,0x20
c0022038:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002203d:	74 26                	je     c0022065 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002203f:	52                   	push   edx
c0022040:	43                   	inc    ebx
c0022041:	57                   	push   edi
c0022042:	56                   	push   esi
c0022043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022046:	e8 bb 84 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c002204b:	83 c6 2b             	add    esi,0x2b
c002204e:	83 d7 00             	adc    edi,0x0
c0022051:	83 c4 10             	add    esp,0x10
c0022054:	eb c0                	jmp    c0022016 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022056:	50                   	push   eax
c0022057:	50                   	push   eax
c0022058:	6a 40                	push   0x40
c002205a:	55                   	push   ebp
c002205b:	e8 0e ff ff ff       	call   c0021f6e <CmExpand(Reghive_Tag*, int)>
c0022060:	83 c4 10             	add    esp,0x10
c0022063:	89 c3                	mov    ebx,eax
c0022065:	83 c4 1c             	add    esp,0x1c
c0022068:	89 d8                	mov    eax,ebx
c002206a:	5b                   	pop    ebx
c002206b:	5e                   	pop    esi
c002206c:	5f                   	pop    edi
c002206d:	5d                   	pop    ebp
c002206e:	c3                   	ret    

c002206f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002206f:	55                   	push   ebp
c0022070:	57                   	push   edi
c0022071:	56                   	push   esi
c0022072:	53                   	push   ebx
c0022073:	81 ec 88 00 00 00    	sub    esp,0x88
c0022079:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0022080:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022087:	e8 5d ff ff ff       	call   c0021fe9 <CmFindUnusedExtent(Reghive_Tag*)>
c002208c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022090:	83 c4 0c             	add    esp,0xc
c0022093:	6a 2b                	push   0x2b
c0022095:	6a 00                	push   0x0
c0022097:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c002209b:	55                   	push   ebp
c002209c:	e8 4f e4 fd ff       	call   c00004f0 <memset>
c00220a1:	83 c4 10             	add    esp,0x10
c00220a4:	85 db                	test   ebx,ebx
c00220a6:	74 12                	je     c00220ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00220a8:	51                   	push   ecx
c00220a9:	55                   	push   ebp
c00220aa:	53                   	push   ebx
c00220ab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00220b2:	e8 0e fd ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220b7:	83 c4 10             	add    esp,0x10
c00220ba:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00220be:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00220c5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00220ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220cc:	85 db                	test   ebx,ebx
c00220ce:	74 49                	je     c0022119 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00220d0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00220d5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00220da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220de:	c1 e0 08             	shl    eax,0x8
c00220e1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00220e7:	09 c8                	or     eax,ecx
c00220e9:	74 11                	je     c00220fc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00220eb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00220ef:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00220f3:	c1 e8 10             	shr    eax,0x10
c00220f6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00220fa:	eb 0f                	jmp    c002210b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00220fc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022101:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022106:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002210b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c002210f:	c1 ea 08             	shr    edx,0x8
c0022112:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022117:	eb 0f                	jmp    c0022128 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022119:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002211e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022123:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022128:	52                   	push   edx
c0022129:	8d 44 24 49          	lea    eax,[esp+0x49]
c002212d:	50                   	push   eax
c002212e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022132:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022139:	e8 ab fd ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002213e:	83 c4 10             	add    esp,0x10
c0022141:	85 db                	test   ebx,ebx
c0022143:	74 12                	je     c0022157 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022145:	50                   	push   eax
c0022146:	55                   	push   ebp
c0022147:	53                   	push   ebx
c0022148:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002214f:	e8 95 fd ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022154:	83 c4 10             	add    esp,0x10
c0022157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002215b:	83 c4 7c             	add    esp,0x7c
c002215e:	5b                   	pop    ebx
c002215f:	5e                   	pop    esi
c0022160:	5f                   	pop    edi
c0022161:	5d                   	pop    ebp
c0022162:	c3                   	ret    

c0022163 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022163:	55                   	push   ebp
c0022164:	57                   	push   edi
c0022165:	56                   	push   esi
c0022166:	53                   	push   ebx
c0022167:	bb 27 00 00 00       	mov    ebx,0x27
c002216c:	81 ec 88 00 00 00    	sub    esp,0x88
c0022172:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0022179:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0022180:	e8 fb e3 fd ff       	call   c0000580 <strlen>
c0022185:	8d 48 26             	lea    ecx,[eax+0x26]
c0022188:	89 c8                	mov    eax,ecx
c002218a:	99                   	cdq    
c002218b:	f7 fb                	idiv   ebx
c002218d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022191:	83 c4 10             	add    esp,0x10
c0022194:	81 f9 37 01 00 00    	cmp    ecx,0x137
c002219a:	7e 10                	jle    c00221ac <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c002219c:	83 ec 0c             	sub    esp,0xc
c002219f:	68 a2 29 03 c0       	push   0xc00329a2
c00221a4:	e8 f1 df ff ff       	call   c002019a <KePanic(char const*)>
c00221a9:	83 c4 10             	add    esp,0x10
c00221ac:	53                   	push   ebx
c00221ad:	31 ed                	xor    ebp,ebp
c00221af:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00221b3:	53                   	push   ebx
c00221b4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221bb:	57                   	push   edi
c00221bc:	e8 04 fc ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221c1:	83 c4 10             	add    esp,0x10
c00221c4:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00221c8:	89 f0                	mov    eax,esi
c00221ca:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00221ce:	c1 e0 08             	shl    eax,0x8
c00221d1:	09 c6                	or     esi,eax
c00221d3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00221d7:	c1 e6 08             	shl    esi,0x8
c00221da:	09 c6                	or     esi,eax
c00221dc:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00221e0:	7e 72                	jle    c0022254 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00221e2:	85 f6                	test   esi,esi
c00221e4:	75 25                	jne    c002220b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00221e6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00221eb:	8d 44 24 45          	lea    eax,[esp+0x45]
c00221ef:	50                   	push   eax
c00221f0:	6a 00                	push   0x0
c00221f2:	6a 00                	push   0x0
c00221f4:	57                   	push   edi
c00221f5:	e8 75 fe ff ff       	call   c002206f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022200:	89 c6                	mov    esi,eax
c0022202:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022205:	c1 f8 10             	sar    eax,0x10
c0022208:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002220b:	51                   	push   ecx
c002220c:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022210:	52                   	push   edx
c0022211:	56                   	push   esi
c0022212:	57                   	push   edi
c0022213:	e8 ad fb ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022218:	83 c4 0c             	add    esp,0xc
c002221b:	6a 27                	push   0x27
c002221d:	6a 00                	push   0x0
c002221f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022223:	51                   	push   ecx
c0022224:	e8 c7 e2 fd ff       	call   c00004f0 <memset>
c0022229:	6b c5 27             	imul   eax,ebp,0x27
c002222c:	83 c4 0c             	add    esp,0xc
c002222f:	6a 27                	push   0x27
c0022231:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022238:	50                   	push   eax
c0022239:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002223d:	51                   	push   ecx
c002223e:	e8 4d e4 fd ff       	call   c0000690 <strncpy>
c0022243:	83 c4 0c             	add    esp,0xc
c0022246:	8d 54 24 49          	lea    edx,[esp+0x49]
c002224a:	52                   	push   edx
c002224b:	56                   	push   esi
c002224c:	57                   	push   edi
c002224d:	e8 97 fc ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022252:	eb 19                	jmp    c002226d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0022254:	85 f6                	test   esi,esi
c0022256:	74 18                	je     c0022270 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0022258:	52                   	push   edx
c0022259:	52                   	push   edx
c002225a:	56                   	push   esi
c002225b:	57                   	push   edi
c002225c:	e8 c4 fc ff ff       	call   c0021f25 <CmFreeExtent(Reghive_Tag*, int)>
c0022261:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022265:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022269:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	45                   	inc    ebp
c0022271:	83 c3 03             	add    ebx,0x3
c0022274:	83 fd 07             	cmp    ebp,0x7
c0022277:	0f 85 47 ff ff ff    	jne    c00221c4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002227d:	50                   	push   eax
c002227e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022282:	50                   	push   eax
c0022283:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002228a:	57                   	push   edi
c002228b:	e8 59 fc ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022290:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022296:	5b                   	pop    ebx
c0022297:	5e                   	pop    esi
c0022298:	5f                   	pop    edi
c0022299:	5d                   	pop    ebp
c002229a:	c3                   	ret    

c002229b <CmGetMatch(char*, char*, bool, bool*)>:
c002229b:	56                   	push   esi
c002229c:	53                   	push   ebx
c002229d:	50                   	push   eax
c002229e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00222a3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00222a7:	74 25                	je     c00222ce <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00222a9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00222ac:	31 db                	xor    ebx,ebx
c00222ae:	50                   	push   eax
c00222af:	50                   	push   eax
c00222b0:	8d 04 9d 80 42 03 c0 	lea    eax,[ebx*4-0x3ffcbd80]
c00222b7:	50                   	push   eax
c00222b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222bc:	e8 bf e4 fd ff       	call   c0000780 <strcmp>
c00222c1:	83 c4 10             	add    esp,0x10
c00222c4:	85 c0                	test   eax,eax
c00222c6:	74 2e                	je     c00222f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222c8:	43                   	inc    ebx
c00222c9:	83 fb 3f             	cmp    ebx,0x3f
c00222cc:	75 e0                	jne    c00222ae <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00222ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222d1:	31 db                	xor    ebx,ebx
c00222d3:	51                   	push   ecx
c00222d4:	51                   	push   ecx
c00222d5:	8d 04 9d 80 42 03 c0 	lea    eax,[ebx*4-0x3ffcbd80]
c00222dc:	50                   	push   eax
c00222dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222e1:	e8 9a e4 fd ff       	call   c0000780 <strcmp>
c00222e6:	83 c4 10             	add    esp,0x10
c00222e9:	85 c0                	test   eax,eax
c00222eb:	74 09                	je     c00222f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222ed:	43                   	inc    ebx
c00222ee:	83 fb 3f             	cmp    ebx,0x3f
c00222f1:	75 e0                	jne    c00222d3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00222f3:	83 cb ff             	or     ebx,0xffffffff
c00222f6:	5a                   	pop    edx
c00222f7:	89 d8                	mov    eax,ebx
c00222f9:	5b                   	pop    ebx
c00222fa:	5e                   	pop    esi
c00222fb:	c3                   	ret    

c00222fc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00222fc:	55                   	push   ebp
c00222fd:	31 c0                	xor    eax,eax
c00222ff:	57                   	push   edi
c0022300:	56                   	push   esi
c0022301:	53                   	push   ebx
c0022302:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022306:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002230a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002230e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022312:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022314:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022317:	83 fd 1f             	cmp    ebp,0x1f
c002231a:	7f 0b                	jg     c0022327 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002231c:	0f b6 c2             	movzx  eax,dl
c002231f:	d3 e0                	shl    eax,cl
c0022321:	09 07                	or     DWORD PTR [edi],eax
c0022323:	b0 01                	mov    al,0x1
c0022325:	01 33                	add    DWORD PTR [ebx],esi
c0022327:	5b                   	pop    ebx
c0022328:	5e                   	pop    esi
c0022329:	5f                   	pop    edi
c002232a:	5d                   	pop    ebp
c002232b:	c3                   	ret    

c002232c <CmGetShift(unsigned int*, int*, int, bool*)>:
c002232c:	57                   	push   edi
c002232d:	56                   	push   esi
c002232e:	53                   	push   ebx
c002232f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022333:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022337:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002233b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002233f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022341:	7c 17                	jl     c002235a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022343:	8b 17                	mov    edx,DWORD PTR [edi]
c0022345:	b8 01 00 00 00       	mov    eax,0x1
c002234a:	d3 e0                	shl    eax,cl
c002234c:	48                   	dec    eax
c002234d:	21 d0                	and    eax,edx
c002234f:	d3 ea                	shr    edx,cl
c0022351:	89 17                	mov    DWORD PTR [edi],edx
c0022353:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022355:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022358:	eb 05                	jmp    c002235f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c002235a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002235d:	31 c0                	xor    eax,eax
c002235f:	5b                   	pop    ebx
c0022360:	5e                   	pop    esi
c0022361:	5f                   	pop    edi
c0022362:	c3                   	ret    

c0022363 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022363:	83 ec 40             	sub    esp,0x40
c0022366:	8d 44 24 09          	lea    eax,[esp+0x9]
c002236a:	50                   	push   eax
c002236b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002236f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022373:	e8 4d fa ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022378:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002237c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0022380:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022384:	89 10                	mov    DWORD PTR [eax],edx
c0022386:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022389:	83 c4 4c             	add    esp,0x4c
c002238c:	c3                   	ret    

c002238d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002238d:	55                   	push   ebp
c002238e:	57                   	push   edi
c002238f:	56                   	push   esi
c0022390:	53                   	push   ebx
c0022391:	83 ec 40             	sub    esp,0x40
c0022394:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022398:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c002239c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00223a0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00223a4:	53                   	push   ebx
c00223a5:	56                   	push   esi
c00223a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223aa:	e8 16 fa ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223af:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00223b3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00223b7:	83 c4 0c             	add    esp,0xc
c00223ba:	53                   	push   ebx
c00223bb:	56                   	push   esi
c00223bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223c0:	e8 24 fb ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223c5:	83 c4 4c             	add    esp,0x4c
c00223c8:	5b                   	pop    ebx
c00223c9:	5e                   	pop    esi
c00223ca:	5f                   	pop    edi
c00223cb:	5d                   	pop    ebp
c00223cc:	c3                   	ret    

c00223cd <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00223cd:	55                   	push   ebp
c00223ce:	57                   	push   edi
c00223cf:	56                   	push   esi
c00223d0:	31 f6                	xor    esi,esi
c00223d2:	53                   	push   ebx
c00223d3:	31 db                	xor    ebx,ebx
c00223d5:	83 ec 40             	sub    esp,0x40
c00223d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00223e0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00223e8:	6a 12                	push   0x12
c00223ea:	68 ee 00 00 00       	push   0xee
c00223ef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00223f3:	e8 f8 e0 fd ff       	call   c00004f0 <memset>
c00223f8:	83 c4 10             	add    esp,0x10
c00223fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00223ff:	6a 08                	push   0x8
c0022401:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022405:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022409:	50                   	push   eax
c002240a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002240e:	55                   	push   ebp
c002240f:	57                   	push   edi
c0022410:	e8 e7 fe ff ff       	call   c00222fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022415:	83 c4 10             	add    esp,0x10
c0022418:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002241c:	50                   	push   eax
c002241d:	6a 06                	push   0x6
c002241f:	55                   	push   ebp
c0022420:	57                   	push   edi
c0022421:	e8 06 ff ff ff       	call   c002232c <CmGetShift(unsigned int*, int*, int, bool*)>
c0022426:	83 c4 10             	add    esp,0x10
c0022429:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002242e:	74 07                	je     c0022437 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022430:	46                   	inc    esi
c0022431:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022435:	eb e1                	jmp    c0022418 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022437:	43                   	inc    ebx
c0022438:	83 fb 12             	cmp    ebx,0x12
c002243b:	75 c2                	jne    c00223ff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c002243d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022441:	31 f6                	xor    esi,esi
c0022443:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022446:	50                   	push   eax
c0022447:	50                   	push   eax
c0022448:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c002244d:	46                   	inc    esi
c002244e:	8d 04 85 80 42 03 c0 	lea    eax,[eax*4-0x3ffcbd80]
c0022455:	50                   	push   eax
c0022456:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002245a:	e8 11 e4 fd ff       	call   c0000870 <strcat>
c002245f:	83 c4 10             	add    esp,0x10
c0022462:	83 fe 18             	cmp    esi,0x18
c0022465:	75 df                	jne    c0022446 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022467:	83 c4 3c             	add    esp,0x3c
c002246a:	31 c0                	xor    eax,eax
c002246c:	5b                   	pop    ebx
c002246d:	5e                   	pop    esi
c002246e:	5f                   	pop    edi
c002246f:	5d                   	pop    ebp
c0022470:	c3                   	ret    

c0022471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022471:	83 ec 40             	sub    esp,0x40
c0022474:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022478:	50                   	push   eax
c0022479:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002247d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022481:	e8 3f f9 ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022486:	58                   	pop    eax
c0022487:	5a                   	pop    edx
c0022488:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002248c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022490:	50                   	push   eax
c0022491:	e8 37 ff ff ff       	call   c00223cd <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022496:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c002249b:	83 c4 4c             	add    esp,0x4c
c002249e:	c3                   	ret    

c002249f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c002249f:	55                   	push   ebp
c00224a0:	57                   	push   edi
c00224a1:	56                   	push   esi
c00224a2:	53                   	push   ebx
c00224a3:	31 db                	xor    ebx,ebx
c00224a5:	83 ec 70             	sub    esp,0x70
c00224a8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00224af:	6a 30                	push   0x30
c00224b1:	6a 00                	push   0x0
c00224b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00224b7:	56                   	push   esi
c00224b8:	e8 33 e0 fd ff       	call   c00004f0 <memset>
c00224bd:	83 c4 10             	add    esp,0x10
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	57                   	push   edi
c00224c4:	e8 b7 e0 fd ff       	call   c0000580 <strlen>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	39 d8                	cmp    eax,ebx
c00224ce:	76 16                	jbe    c00224e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00224d0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00224d4:	83 ec 0c             	sub    esp,0xc
c00224d7:	50                   	push   eax
c00224d8:	e8 83 e4 fd ff       	call   c0000960 <toupper>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00224e3:	43                   	inc    ebx
c00224e4:	eb da                	jmp    c00224c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00224e6:	52                   	push   edx
c00224e7:	31 db                	xor    ebx,ebx
c00224e9:	6a 18                	push   0x18
c00224eb:	31 ff                	xor    edi,edi
c00224ed:	6a 3f                	push   0x3f
c00224ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224f3:	50                   	push   eax
c00224f4:	e8 f7 df fd ff       	call   c00004f0 <memset>
c00224f9:	83 c4 10             	add    esp,0x10
c00224fc:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022500:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022504:	84 c0                	test   al,al
c0022506:	0f 84 af 00 00 00    	je     c00225bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c002250c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022510:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022513:	83 ec 0c             	sub    esp,0xc
c0022516:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c002251b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c002251f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022523:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0022528:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c002252c:	56                   	push   esi
c002252d:	e8 4e e0 fd ff       	call   c0000580 <strlen>
c0022532:	83 c4 10             	add    esp,0x10
c0022535:	85 c0                	test   eax,eax
c0022537:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002253b:	74 0b                	je     c0022548 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c002253d:	50                   	push   eax
c002253e:	6a 01                	push   0x1
c0022540:	56                   	push   esi
c0022541:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022545:	50                   	push   eax
c0022546:	eb 0a                	jmp    c0022552 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022548:	50                   	push   eax
c0022549:	6a 00                	push   0x0
c002254b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002254f:	50                   	push   eax
c0022550:	6a 00                	push   0x0
c0022552:	e8 44 fd ff ff       	call   c002229b <CmGetMatch(char*, char*, bool, bool*)>
c0022557:	83 c4 10             	add    esp,0x10
c002255a:	83 f8 ff             	cmp    eax,0xffffffff
c002255d:	75 1a                	jne    c0022579 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c002255f:	83 ec 0c             	sub    esp,0xc
c0022562:	68 b7 29 03 c0       	push   0xc00329b7
c0022567:	e8 2e dc ff ff       	call   c002019a <KePanic(char const*)>
c002256c:	83 c4 10             	add    esp,0x10
c002256f:	b8 02 00 00 00       	mov    eax,0x2
c0022574:	e9 bb 00 00 00       	jmp    c0022634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022579:	83 ff 18             	cmp    edi,0x18
c002257c:	75 1a                	jne    c0022598 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	68 cc 29 03 c0       	push   0xc00329cc
c0022586:	e8 0f dc ff ff       	call   c002019a <KePanic(char const*)>
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	b8 01 00 00 00       	mov    eax,0x1
c0022593:	e9 9c 00 00 00       	jmp    c0022634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022598:	47                   	inc    edi
c0022599:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002259e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00225a2:	0f 45 dd             	cmovne ebx,ebp
c00225a5:	83 ec 0c             	sub    esp,0xc
c00225a8:	56                   	push   esi
c00225a9:	e8 d2 df fd ff       	call   c0000580 <strlen>
c00225ae:	83 c4 10             	add    esp,0x10
c00225b1:	85 c0                	test   eax,eax
c00225b3:	74 06                	je     c00225bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00225b5:	43                   	inc    ebx
c00225b6:	e9 41 ff ff ff       	jmp    c00224fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00225bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225c3:	31 db                	xor    ebx,ebx
c00225c5:	31 ff                	xor    edi,edi
c00225c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00225cf:	50                   	push   eax
c00225d0:	6a 12                	push   0x12
c00225d2:	68 ee 00 00 00       	push   0xee
c00225d7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00225de:	e8 0d df fd ff       	call   c00004f0 <memset>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00225ea:	83 fb 17             	cmp    ebx,0x17
c00225ed:	7e 26                	jle    c0022615 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00225ef:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00225f3:	50                   	push   eax
c00225f4:	6a 08                	push   0x8
c00225f6:	55                   	push   ebp
c00225f7:	56                   	push   esi
c00225f8:	e8 2f fd ff ff       	call   c002232c <CmGetShift(unsigned int*, int*, int, bool*)>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022605:	74 26                	je     c002262d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0022607:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c002260e:	4b                   	dec    ebx
c002260f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022612:	47                   	inc    edi
c0022613:	eb 1c                	jmp    c0022631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022615:	6a 06                	push   0x6
c0022617:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c002261c:	50                   	push   eax
c002261d:	55                   	push   ebp
c002261e:	56                   	push   esi
c002261f:	e8 d8 fc ff ff       	call   c00222fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	84 c0                	test   al,al
c0022629:	75 06                	jne    c0022631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c002262b:	eb c2                	jmp    c00225ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c002262d:	31 c0                	xor    eax,eax
c002262f:	eb 03                	jmp    c0022634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022631:	43                   	inc    ebx
c0022632:	eb b2                	jmp    c00225e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0022634:	83 c4 6c             	add    esp,0x6c
c0022637:	5b                   	pop    ebx
c0022638:	5e                   	pop    esi
c0022639:	5f                   	pop    edi
c002263a:	5d                   	pop    ebp
c002263b:	c3                   	ret    

c002263c <CmCreateString(Reghive_Tag*, int, char const*)>:
c002263c:	53                   	push   ebx
c002263d:	83 ec 3c             	sub    esp,0x3c
c0022640:	6a 2b                	push   0x2b
c0022642:	6a 00                	push   0x0
c0022644:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022648:	53                   	push   ebx
c0022649:	e8 a2 de fd ff       	call   c00004f0 <memset>
c002264e:	58                   	pop    eax
c002264f:	5a                   	pop    edx
c0022650:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022654:	50                   	push   eax
c0022655:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022659:	e8 41 fe ff ff       	call   c002249f <CmConvertToInternalFilename(char const*, unsigned char*)>
c002265e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022663:	83 c4 0c             	add    esp,0xc
c0022666:	6a 15                	push   0x15
c0022668:	6a 00                	push   0x0
c002266a:	8d 44 24 27          	lea    eax,[esp+0x27]
c002266e:	50                   	push   eax
c002266f:	e8 7c de fd ff       	call   c00004f0 <memset>
c0022674:	53                   	push   ebx
c0022675:	6a 00                	push   0x0
c0022677:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002267b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002267f:	e8 eb f9 ff ff       	call   c002206f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022684:	83 c4 58             	add    esp,0x58
c0022687:	5b                   	pop    ebx
c0022688:	c3                   	ret    

c0022689 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022689:	56                   	push   esi
c002268a:	53                   	push   ebx
c002268b:	83 ec 48             	sub    esp,0x48
c002268e:	6a 12                	push   0x12
c0022690:	68 ff 00 00 00       	push   0xff
c0022695:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022699:	56                   	push   esi
c002269a:	e8 51 de fd ff       	call   c00004f0 <memset>
c002269f:	5a                   	pop    edx
c00226a0:	59                   	pop    ecx
c00226a1:	56                   	push   esi
c00226a2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00226a6:	e8 f4 fd ff ff       	call   c002249f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00226b2:	85 db                	test   ebx,ebx
c00226b4:	74 42                	je     c00226f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00226b6:	50                   	push   eax
c00226b7:	8d 44 24 19          	lea    eax,[esp+0x19]
c00226bb:	50                   	push   eax
c00226bc:	53                   	push   ebx
c00226bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226c1:	e8 ff f6 ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226c6:	83 c4 0c             	add    esp,0xc
c00226c9:	6a 12                	push   0x12
c00226cb:	8d 44 24 21          	lea    eax,[esp+0x21]
c00226cf:	50                   	push   eax
c00226d0:	56                   	push   esi
c00226d1:	e8 aa dc fd ff       	call   c0000380 <memcmp>
c00226d6:	83 c4 10             	add    esp,0x10
c00226d9:	85 c0                	test   eax,eax
c00226db:	74 1e                	je     c00226fb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00226dd:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00226e2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00226e7:	c1 e3 08             	shl    ebx,0x8
c00226ea:	09 d8                	or     eax,ebx
c00226ec:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00226f1:	c1 e3 10             	shl    ebx,0x10
c00226f4:	09 c3                	or     ebx,eax
c00226f6:	eb ba                	jmp    c00226b2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00226f8:	83 cb ff             	or     ebx,0xffffffff
c00226fb:	83 c4 44             	add    esp,0x44
c00226fe:	89 d8                	mov    eax,ebx
c0022700:	5b                   	pop    ebx
c0022701:	5e                   	pop    esi
c0022702:	c3                   	ret    

c0022703 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022703:	57                   	push   edi
c0022704:	56                   	push   esi
c0022705:	53                   	push   ebx
c0022706:	83 ec 34             	sub    esp,0x34
c0022709:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002270d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022711:	6a 2b                	push   0x2b
c0022713:	6a 00                	push   0x0
c0022715:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022719:	53                   	push   ebx
c002271a:	e8 d1 dd fd ff       	call   c00004f0 <memset>
c002271f:	58                   	pop    eax
c0022720:	5a                   	pop    edx
c0022721:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022725:	50                   	push   eax
c0022726:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002272a:	e8 70 fd ff ff       	call   c002249f <CmConvertToInternalFilename(char const*, unsigned char*)>
c002272f:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022733:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022737:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c002273b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c002273f:	53                   	push   ebx
c0022740:	6a 00                	push   0x0
c0022742:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022746:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002274a:	e8 20 f9 ff ff       	call   c002206f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002274f:	83 c4 50             	add    esp,0x50
c0022752:	5b                   	pop    ebx
c0022753:	5e                   	pop    esi
c0022754:	5f                   	pop    edi
c0022755:	c3                   	ret    

c0022756 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022756:	55                   	push   ebp
c0022757:	57                   	push   edi
c0022758:	56                   	push   esi
c0022759:	53                   	push   ebx
c002275a:	83 ec 40             	sub    esp,0x40
c002275d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022761:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022765:	6a 2b                	push   0x2b
c0022767:	6a 00                	push   0x0
c0022769:	8d 74 24 11          	lea    esi,[esp+0x11]
c002276d:	56                   	push   esi
c002276e:	e8 7d dd fd ff       	call   c00004f0 <memset>
c0022773:	5f                   	pop    edi
c0022774:	89 ef                	mov    edi,ebp
c0022776:	58                   	pop    eax
c0022777:	8d 44 24 11          	lea    eax,[esp+0x11]
c002277b:	50                   	push   eax
c002277c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022780:	e8 1a fd ff ff       	call   c002249f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022785:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c002278a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c002278f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022794:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	85 ed                	test   ebp,ebp
c002279e:	74 14                	je     c00227b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227a0:	51                   	push   ecx
c00227a1:	51                   	push   ecx
c00227a2:	57                   	push   edi
c00227a3:	53                   	push   ebx
c00227a4:	e8 0e f7 ff ff       	call   c0021eb7 <CmGetNext(Reghive_Tag*, int)>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	85 c0                	test   eax,eax
c00227ae:	74 04                	je     c00227b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227b0:	89 c7                	mov    edi,eax
c00227b2:	eb e8                	jmp    c002279c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00227b4:	56                   	push   esi
c00227b5:	6a 00                	push   0x0
c00227b7:	57                   	push   edi
c00227b8:	53                   	push   ebx
c00227b9:	e8 b1 f8 ff ff       	call   c002206f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227be:	83 c4 0c             	add    esp,0xc
c00227c1:	56                   	push   esi
c00227c2:	50                   	push   eax
c00227c3:	89 c7                	mov    edi,eax
c00227c5:	53                   	push   ebx
c00227c6:	e8 fa f5 ff ff       	call   c0021dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227cb:	58                   	pop    eax
c00227cc:	5a                   	pop    edx
c00227cd:	6a 6c                	push   0x6c
c00227cf:	6a 00                	push   0x0
c00227d1:	6a 00                	push   0x0
c00227d3:	68 dd 29 03 c0       	push   0xc00329dd
c00227d8:	57                   	push   edi
c00227d9:	53                   	push   ebx
c00227da:	e8 24 ff ff ff       	call   c0022703 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00227df:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00227e3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00227e7:	c1 e8 10             	shr    eax,0x10
c00227ea:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00227ee:	83 c4 1c             	add    esp,0x1c
c00227f1:	56                   	push   esi
c00227f2:	57                   	push   edi
c00227f3:	53                   	push   ebx
c00227f4:	e8 f0 f6 ff ff       	call   c0021ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00227f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227fe:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022803:	c1 e0 08             	shl    eax,0x8
c0022806:	09 c2                	or     edx,eax
c0022808:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002280d:	83 c4 4c             	add    esp,0x4c
c0022810:	5b                   	pop    ebx
c0022811:	5e                   	pop    esi
c0022812:	c1 e0 10             	shl    eax,0x10
c0022815:	09 d0                	or     eax,edx
c0022817:	5f                   	pop    edi
c0022818:	5d                   	pop    ebp
c0022819:	c3                   	ret    

c002281a <zStrtok(char*, char const*)>:
c002281a:	55                   	push   ebp
c002281b:	57                   	push   edi
c002281c:	56                   	push   esi
c002281d:	53                   	push   ebx
c002281e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022826:	85 db                	test   ebx,ebx
c0022828:	74 2f                	je     c0022859 <zStrtok(char*, char const*)+0x3f>
c002282a:	85 c0                	test   eax,eax
c002282c:	75 09                	jne    c0022837 <zStrtok(char*, char const*)+0x1d>
c002282e:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022833:	85 c0                	test   eax,eax
c0022835:	74 50                	je     c0022887 <zStrtok(char*, char const*)+0x6d>
c0022837:	31 c9                	xor    ecx,ecx
c0022839:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c002283d:	74 03                	je     c0022842 <zStrtok(char*, char const*)+0x28>
c002283f:	41                   	inc    ecx
c0022840:	eb f7                	jmp    c0022839 <zStrtok(char*, char const*)+0x1f>
c0022842:	31 d2                	xor    edx,edx
c0022844:	39 ca                	cmp    edx,ecx
c0022846:	74 15                	je     c002285d <zStrtok(char*, char const*)+0x43>
c0022848:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c002284c:	8d 3c 10             	lea    edi,[eax+edx*1]
c002284f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022852:	39 ee                	cmp    esi,ebp
c0022854:	74 13                	je     c0022869 <zStrtok(char*, char const*)+0x4f>
c0022856:	42                   	inc    edx
c0022857:	eb eb                	jmp    c0022844 <zStrtok(char*, char const*)+0x2a>
c0022859:	31 c0                	xor    eax,eax
c002285b:	eb 2a                	jmp    c0022887 <zStrtok(char*, char const*)+0x6d>
c002285d:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022867:	eb 1e                	jmp    c0022887 <zStrtok(char*, char const*)+0x6d>
c0022869:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c002286c:	39 ce                	cmp    esi,ecx
c002286e:	75 0a                	jne    c002287a <zStrtok(char*, char const*)+0x60>
c0022870:	40                   	inc    eax
c0022871:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022876:	89 d8                	mov    eax,ebx
c0022878:	eb 0d                	jmp    c0022887 <zStrtok(char*, char const*)+0x6d>
c002287a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002287d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022881:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022887:	5b                   	pop    ebx
c0022888:	5e                   	pop    esi
c0022889:	5f                   	pop    edi
c002288a:	5d                   	pop    ebp
c002288b:	c3                   	ret    

c002288c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c002288c:	57                   	push   edi
c002288d:	56                   	push   esi
c002288e:	53                   	push   ebx
c002288f:	81 ec 08 01 00 00    	sub    esp,0x108
c0022895:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c002289c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00228a3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00228a7:	53                   	push   ebx
c00228a8:	e8 a3 dd fd ff       	call   c0000650 <strcpy>
c00228ad:	59                   	pop    ecx
c00228ae:	5e                   	pop    esi
c00228af:	68 7f 2d 03 c0       	push   0xc0032d7f
c00228b4:	53                   	push   ebx
c00228b5:	bb 01 00 00 00       	mov    ebx,0x1
c00228ba:	e8 5b ff ff ff       	call   c002281a <zStrtok(char*, char const*)>
c00228bf:	83 c4 10             	add    esp,0x10
c00228c2:	85 c0                	test   eax,eax
c00228c4:	74 3b                	je     c0022901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228c6:	52                   	push   edx
c00228c7:	50                   	push   eax
c00228c8:	6a 01                	push   0x1
c00228ca:	57                   	push   edi
c00228cb:	e8 b9 fd ff ff       	call   c0022689 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00228d0:	59                   	pop    ecx
c00228d1:	5e                   	pop    esi
c00228d2:	89 c3                	mov    ebx,eax
c00228d4:	68 7f 2d 03 c0       	push   0xc0032d7f
c00228d9:	6a 00                	push   0x0
c00228db:	e8 3a ff ff ff       	call   c002281a <zStrtok(char*, char const*)>
c00228e0:	83 c4 10             	add    esp,0x10
c00228e3:	85 c0                	test   eax,eax
c00228e5:	89 c6                	mov    esi,eax
c00228e7:	74 18                	je     c0022901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228e9:	52                   	push   edx
c00228ea:	52                   	push   edx
c00228eb:	53                   	push   ebx
c00228ec:	57                   	push   edi
c00228ed:	e8 86 f5 ff ff       	call   c0021e78 <CmEnterDirectory(Reghive_Tag*, int)>
c00228f2:	83 c4 10             	add    esp,0x10
c00228f5:	83 f8 ff             	cmp    eax,0xffffffff
c00228f8:	89 c3                	mov    ebx,eax
c00228fa:	74 05                	je     c0022901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228fc:	50                   	push   eax
c00228fd:	56                   	push   esi
c00228fe:	53                   	push   ebx
c00228ff:	eb c9                	jmp    c00228ca <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022901:	81 c4 00 01 00 00    	add    esp,0x100
c0022907:	89 d8                	mov    eax,ebx
c0022909:	5b                   	pop    ebx
c002290a:	5e                   	pop    esi
c002290b:	5f                   	pop    edi
c002290c:	c3                   	ret    

c002290d <CmDisplayTree(Reghive_Tag*, int, int)>:
c002290d:	55                   	push   ebp
c002290e:	57                   	push   edi
c002290f:	56                   	push   esi
c0022910:	53                   	push   ebx
c0022911:	83 ec 5c             	sub    esp,0x5c
c0022914:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022918:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c002291c:	85 db                	test   ebx,ebx
c002291e:	0f 8e 84 00 00 00    	jle    c00229a8 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022924:	57                   	push   edi
c0022925:	31 ed                	xor    ebp,ebp
c0022927:	6a 32                	push   0x32
c0022929:	6a 00                	push   0x0
c002292b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c002292f:	57                   	push   edi
c0022930:	e8 bb db fd ff       	call   c00004f0 <memset>
c0022935:	83 c4 0c             	add    esp,0xc
c0022938:	57                   	push   edi
c0022939:	53                   	push   ebx
c002293a:	56                   	push   esi
c002293b:	e8 31 fb ff ff       	call   c0022471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022940:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022944:	83 c4 10             	add    esp,0x10
c0022947:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c002294b:	7d 13                	jge    c0022960 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c002294d:	83 ec 0c             	sub    esp,0xc
c0022950:	45                   	inc    ebp
c0022951:	68 03 31 03 c0       	push   0xc0033103
c0022956:	e8 b7 68 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002295b:	83 c4 10             	add    esp,0x10
c002295e:	eb e7                	jmp    c0022947 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022960:	51                   	push   ecx
c0022961:	57                   	push   edi
c0022962:	53                   	push   ebx
c0022963:	68 e3 29 03 c0       	push   0xc00329e3
c0022968:	e8 a5 68 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002296d:	83 c4 10             	add    esp,0x10
c0022970:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022975:	75 1e                	jne    c0022995 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022977:	52                   	push   edx
c0022978:	52                   	push   edx
c0022979:	53                   	push   ebx
c002297a:	56                   	push   esi
c002297b:	e8 f8 f4 ff ff       	call   c0021e78 <CmEnterDirectory(Reghive_Tag*, int)>
c0022980:	83 c4 0c             	add    esp,0xc
c0022983:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022987:	8d 51 04             	lea    edx,[ecx+0x4]
c002298a:	52                   	push   edx
c002298b:	50                   	push   eax
c002298c:	56                   	push   esi
c002298d:	e8 7b ff ff ff       	call   c002290d <CmDisplayTree(Reghive_Tag*, int, int)>
c0022992:	83 c4 10             	add    esp,0x10
c0022995:	50                   	push   eax
c0022996:	50                   	push   eax
c0022997:	53                   	push   ebx
c0022998:	56                   	push   esi
c0022999:	e8 19 f5 ff ff       	call   c0021eb7 <CmGetNext(Reghive_Tag*, int)>
c002299e:	83 c4 10             	add    esp,0x10
c00229a1:	89 c3                	mov    ebx,eax
c00229a3:	e9 74 ff ff ff       	jmp    c002291c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00229a8:	83 c4 5c             	add    esp,0x5c
c00229ab:	5b                   	pop    ebx
c00229ac:	5e                   	pop    esi
c00229ad:	5f                   	pop    edi
c00229ae:	5d                   	pop    ebp
c00229af:	c3                   	ret    

c00229b0 <CmSplitFinalSlashInPlace(char*)>:
c00229b0:	53                   	push   ebx
c00229b1:	83 ec 14             	sub    esp,0x14
c00229b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00229b8:	53                   	push   ebx
c00229b9:	e8 c2 db fd ff       	call   c0000580 <strlen>
c00229be:	83 c4 10             	add    esp,0x10
c00229c1:	48                   	dec    eax
c00229c2:	85 c0                	test   eax,eax
c00229c4:	74 15                	je     c00229db <CmSplitFinalSlashInPlace(char*)+0x2b>
c00229c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00229ca:	8d 14 03             	lea    edx,[ebx+eax*1]
c00229cd:	75 09                	jne    c00229d8 <CmSplitFinalSlashInPlace(char*)+0x28>
c00229cf:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00229d2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00229d6:	eb 05                	jmp    c00229dd <CmSplitFinalSlashInPlace(char*)+0x2d>
c00229d8:	48                   	dec    eax
c00229d9:	eb e7                	jmp    c00229c2 <CmSplitFinalSlashInPlace(char*)+0x12>
c00229db:	31 c0                	xor    eax,eax
c00229dd:	83 c4 08             	add    esp,0x8
c00229e0:	5b                   	pop    ebx
c00229e1:	c3                   	ret    

c00229e2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00229e2:	55                   	push   ebp
c00229e3:	57                   	push   edi
c00229e4:	56                   	push   esi
c00229e5:	53                   	push   ebx
c00229e6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00229ec:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00229f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00229f6:	8d 43 01             	lea    eax,[ebx+0x1]
c00229f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229fd:	89 f0                	mov    eax,esi
c00229ff:	3c 40                	cmp    al,0x40
c0022a01:	75 1b                	jne    c0022a1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022a03:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022a06:	85 c0                	test   eax,eax
c0022a08:	74 08                	je     c0022a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022a0a:	83 f8 3a             	cmp    eax,0x3a
c0022a0d:	74 03                	je     c0022a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022a0f:	43                   	inc    ebx
c0022a10:	eb f1                	jmp    c0022a03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022a12:	85 c0                	test   eax,eax
c0022a14:	0f 84 45 01 00 00    	je     c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a1a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022a1d:	43                   	inc    ebx
c0022a1e:	50                   	push   eax
c0022a1f:	6a 40                	push   0x40
c0022a21:	6a 00                	push   0x0
c0022a23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022a27:	50                   	push   eax
c0022a28:	e8 c3 da fd ff       	call   c00004f0 <memset>
c0022a2d:	89 f1                	mov    ecx,esi
c0022a2f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022a36:	31 c0                	xor    eax,eax
c0022a38:	83 c4 10             	add    esp,0x10
c0022a3b:	0f be f1             	movsx  esi,cl
c0022a3e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022a41:	85 d2                	test   edx,edx
c0022a43:	89 d1                	mov    ecx,edx
c0022a45:	0f 84 14 01 00 00    	je     c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a4b:	3d c7 00 00 00       	cmp    eax,0xc7
c0022a50:	0f 8f 09 01 00 00    	jg     c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a56:	83 fa 0a             	cmp    edx,0xa
c0022a59:	0f 85 f1 00 00 00    	jne    c0022b50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022a5f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022a64:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022a69:	89 c8                	mov    eax,ecx
c0022a6b:	a8 df                	test   al,0xdf
c0022a6d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022a72:	83 f9 23             	cmp    ecx,0x23
c0022a75:	0f 94 c2             	sete   dl
c0022a78:	89 d5                	mov    ebp,edx
c0022a7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022a7e:	09 ea                	or     edx,ebp
c0022a80:	80 e2 01             	and    dl,0x1
c0022a83:	75 47                	jne    c0022acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a85:	83 e8 09             	sub    eax,0x9
c0022a88:	3c 01                	cmp    al,0x1
c0022a8a:	76 40                	jbe    c0022acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a8c:	83 f9 5b             	cmp    ecx,0x5b
c0022a8f:	75 42                	jne    c0022ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022a91:	83 fe 40             	cmp    esi,0x40
c0022a94:	75 36                	jne    c0022acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a96:	83 ec 0c             	sub    esp,0xc
c0022a99:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022a9d:	55                   	push   ebp
c0022a9e:	e8 dd da fd ff       	call   c0000580 <strlen>
c0022aa3:	83 c4 10             	add    esp,0x10
c0022aa6:	83 f8 3f             	cmp    eax,0x3f
c0022aa9:	0f 87 b0 00 00 00    	ja     c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022aaf:	50                   	push   eax
c0022ab0:	50                   	push   eax
c0022ab1:	55                   	push   ebp
c0022ab2:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022ab6:	55                   	push   ebp
c0022ab7:	e8 94 db fd ff       	call   c0000650 <strcpy>
c0022abc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022abf:	e8 bc da fd ff       	call   c0000580 <strlen>
c0022ac4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022ac9:	83 c4 10             	add    esp,0x10
c0022acc:	31 d2                	xor    edx,edx
c0022ace:	e9 84 00 00 00       	jmp    c0022b57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022ad3:	83 fe 40             	cmp    esi,0x40
c0022ad6:	74 06                	je     c0022ade <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022ad8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022adc:	eb 19                	jmp    c0022af7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022ade:	51                   	push   ecx
c0022adf:	51                   	push   ecx
c0022ae0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022ae4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022ae8:	50                   	push   eax
c0022ae9:	e8 92 dc fd ff       	call   c0000780 <strcmp>
c0022aee:	83 c4 10             	add    esp,0x10
c0022af1:	85 c0                	test   eax,eax
c0022af3:	75 d7                	jne    c0022acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022af5:	eb e1                	jmp    c0022ad8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022af7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022afa:	85 c9                	test   ecx,ecx
c0022afc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022b01:	83 f9 3d             	cmp    ecx,0x3d
c0022b04:	0f 94 c0             	sete   al
c0022b07:	89 c5                	mov    ebp,eax
c0022b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b0d:	09 e8                	or     eax,ebp
c0022b0f:	a8 01                	test   al,0x1
c0022b11:	89 c5                	mov    ebp,eax
c0022b13:	75 03                	jne    c0022b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022b15:	42                   	inc    edx
c0022b16:	eb df                	jmp    c0022af7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022b18:	85 c9                	test   ecx,ecx
c0022b1a:	74 43                	je     c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b20:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022b23:	52                   	push   edx
c0022b24:	52                   	push   edx
c0022b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022b29:	50                   	push   eax
c0022b2a:	53                   	push   ebx
c0022b2b:	e8 50 dc fd ff       	call   c0000780 <strcmp>
c0022b30:	83 c4 10             	add    esp,0x10
c0022b33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b37:	85 c0                	test   eax,eax
c0022b39:	75 91                	jne    c0022acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022b3b:	50                   	push   eax
c0022b3c:	42                   	inc    edx
c0022b3d:	50                   	push   eax
c0022b3e:	52                   	push   edx
c0022b3f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022b46:	e8 05 db fd ff       	call   c0000650 <strcpy>
c0022b4b:	83 c4 10             	add    esp,0x10
c0022b4e:	eb 11                	jmp    c0022b61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022b50:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022b54:	8d 50 01             	lea    edx,[eax+0x1]
c0022b57:	47                   	inc    edi
c0022b58:	89 d0                	mov    eax,edx
c0022b5a:	e9 df fe ff ff       	jmp    c0022a3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022b5f:	31 ed                	xor    ebp,ebp
c0022b61:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b67:	89 e8                	mov    eax,ebp
c0022b69:	5b                   	pop    ebx
c0022b6a:	5e                   	pop    esi
c0022b6b:	5f                   	pop    edi
c0022b6c:	5d                   	pop    ebp
c0022b6d:	c3                   	ret    

c0022b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022b6e:	57                   	push   edi
c0022b6f:	56                   	push   esi
c0022b70:	53                   	push   ebx
c0022b71:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b77:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022b7e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022b85:	53                   	push   ebx
c0022b86:	e8 f5 d9 fd ff       	call   c0000580 <strlen>
c0022b8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0022b8e:	89 c7                	mov    edi,eax
c0022b90:	e8 eb d9 fd ff       	call   c0000580 <strlen>
c0022b95:	83 c4 10             	add    esp,0x10
c0022b98:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022b9c:	3d ff 00 00 00       	cmp    eax,0xff
c0022ba1:	0f 87 d3 00 00 00    	ja     c0022c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022ba7:	57                   	push   edi
c0022ba8:	57                   	push   edi
c0022ba9:	56                   	push   esi
c0022baa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022bae:	56                   	push   esi
c0022baf:	e8 9c da fd ff       	call   c0000650 <strcpy>
c0022bb4:	58                   	pop    eax
c0022bb5:	5a                   	pop    edx
c0022bb6:	68 7f 2d 03 c0       	push   0xc0032d7f
c0022bbb:	56                   	push   esi
c0022bbc:	e8 af dc fd ff       	call   c0000870 <strcat>
c0022bc1:	59                   	pop    ecx
c0022bc2:	5f                   	pop    edi
c0022bc3:	53                   	push   ebx
c0022bc4:	56                   	push   esi
c0022bc5:	e8 a6 dc fd ff       	call   c0000870 <strcat>
c0022bca:	58                   	pop    eax
c0022bcb:	5a                   	pop    edx
c0022bcc:	68 ed 29 03 c0       	push   0xc00329ed
c0022bd1:	56                   	push   esi
c0022bd2:	e8 99 dc fd ff       	call   c0000870 <strcat>
c0022bd7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022bde:	e8 f8 37 ff ff       	call   c00163db <malloc>
c0022be3:	83 c4 0c             	add    esp,0xc
c0022be6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022bec:	56                   	push   esi
c0022bed:	50                   	push   eax
c0022bee:	89 c3                	mov    ebx,eax
c0022bf0:	e8 35 78 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0022bf5:	83 c4 10             	add    esp,0x10
c0022bf8:	85 db                	test   ebx,ebx
c0022bfa:	74 7e                	je     c0022c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022bfc:	51                   	push   ecx
c0022bfd:	51                   	push   ecx
c0022bfe:	6a 01                	push   0x1
c0022c00:	53                   	push   ebx
c0022c01:	e8 42 78 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0022c06:	83 c4 10             	add    esp,0x10
c0022c09:	85 c0                	test   eax,eax
c0022c0b:	74 08                	je     c0022c15 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022c0d:	83 ec 0c             	sub    esp,0xc
c0022c10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c12:	53                   	push   ebx
c0022c13:	eb 5f                	jmp    c0022c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022c15:	52                   	push   edx
c0022c16:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022c1a:	50                   	push   eax
c0022c1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022c1f:	50                   	push   eax
c0022c20:	53                   	push   ebx
c0022c21:	e8 24 7b ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0022c26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022c2a:	83 c4 10             	add    esp,0x10
c0022c2d:	89 c1                	mov    ecx,eax
c0022c2f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022c33:	74 31                	je     c0022c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c35:	83 ec 0c             	sub    esp,0xc
c0022c38:	50                   	push   eax
c0022c39:	e8 9d 37 ff ff       	call   c00163db <malloc>
c0022c3e:	89 c6                	mov    esi,eax
c0022c40:	58                   	pop    eax
c0022c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c43:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022c47:	52                   	push   edx
c0022c48:	56                   	push   esi
c0022c49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c51:	53                   	push   ebx
c0022c52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022c55:	83 c4 20             	add    esp,0x20
c0022c58:	85 c0                	test   eax,eax
c0022c5a:	75 0a                	jne    c0022c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c60:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022c64:	74 18                	je     c0022c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022c66:	83 ec 0c             	sub    esp,0xc
c0022c69:	53                   	push   ebx
c0022c6a:	e8 37 78 ff ff       	call   c001a4a6 <File::close()>
c0022c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c77:	83 c4 10             	add    esp,0x10
c0022c7a:	31 c0                	xor    eax,eax
c0022c7c:	eb 3b                	jmp    c0022cb9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022c7e:	83 ec 0c             	sub    esp,0xc
c0022c81:	53                   	push   ebx
c0022c82:	e8 1f 78 ff ff       	call   c001a4a6 <File::close()>
c0022c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c8f:	83 c4 0c             	add    esp,0xc
c0022c92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022c99:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022ca0:	56                   	push   esi
c0022ca1:	e8 3c fd ff ff       	call   c00229e2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022ca6:	89 34 24             	mov    DWORD PTR [esp],esi
c0022ca9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022cad:	e8 39 37 ff ff       	call   c00163eb <free>
c0022cb2:	83 c4 10             	add    esp,0x10
c0022cb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022cb9:	81 c4 20 01 00 00    	add    esp,0x120
c0022cbf:	5b                   	pop    ebx
c0022cc0:	5e                   	pop    esi
c0022cc1:	5f                   	pop    edi
c0022cc2:	c3                   	ret    

c0022cc3 <Reg::getLine(char*, char*, char*)>:
c0022cc3:	57                   	push   edi
c0022cc4:	56                   	push   esi
c0022cc5:	53                   	push   ebx
c0022cc6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022cca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022cce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022cd2:	57                   	push   edi
c0022cd3:	56                   	push   esi
c0022cd4:	53                   	push   ebx
c0022cd5:	68 f2 29 03 c0       	push   0xc00329f2
c0022cda:	e8 8f fe ff ff       	call   c0022b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cdf:	83 c4 10             	add    esp,0x10
c0022ce2:	84 c0                	test   al,al
c0022ce4:	75 10                	jne    c0022cf6 <Reg::getLine(char*, char*, char*)+0x33>
c0022ce6:	57                   	push   edi
c0022ce7:	56                   	push   esi
c0022ce8:	53                   	push   ebx
c0022ce9:	68 17 2a 03 c0       	push   0xc0032a17
c0022cee:	e8 7b fe ff ff       	call   c0022b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cf3:	83 c4 10             	add    esp,0x10
c0022cf6:	5b                   	pop    ebx
c0022cf7:	5e                   	pop    esi
c0022cf8:	5f                   	pop    edi
c0022cf9:	c3                   	ret    

c0022cfa <Reg::readInt(char*, char*, int*)>:
c0022cfa:	55                   	push   ebp
c0022cfb:	57                   	push   edi
c0022cfc:	56                   	push   esi
c0022cfd:	53                   	push   ebx
c0022cfe:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022d04:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022d08:	55                   	push   ebp
c0022d09:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d10:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d17:	e8 a7 ff ff ff       	call   c0022cc3 <Reg::getLine(char*, char*, char*)>
c0022d1c:	83 c4 10             	add    esp,0x10
c0022d1f:	84 c0                	test   al,al
c0022d21:	0f 84 b6 00 00 00    	je     c0022ddd <Reg::readInt(char*, char*, int*)+0xe3>
c0022d27:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022d2c:	83 fa 2b             	cmp    edx,0x2b
c0022d2f:	74 0c                	je     c0022d3d <Reg::readInt(char*, char*, int*)+0x43>
c0022d31:	83 fa 2d             	cmp    edx,0x2d
c0022d34:	75 0e                	jne    c0022d44 <Reg::readInt(char*, char*, int*)+0x4a>
c0022d36:	ba 01 00 00 00       	mov    edx,0x1
c0022d3b:	eb 0b                	jmp    c0022d48 <Reg::readInt(char*, char*, int*)+0x4e>
c0022d3d:	ba 01 00 00 00       	mov    edx,0x1
c0022d42:	eb 02                	jmp    c0022d46 <Reg::readInt(char*, char*, int*)+0x4c>
c0022d44:	31 d2                	xor    edx,edx
c0022d46:	31 c0                	xor    eax,eax
c0022d48:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022d4d:	be 0a 00 00 00       	mov    esi,0xa
c0022d52:	75 21                	jne    c0022d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d54:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022d59:	83 f9 78             	cmp    ecx,0x78
c0022d5c:	75 0a                	jne    c0022d68 <Reg::readInt(char*, char*, int*)+0x6e>
c0022d5e:	83 c2 02             	add    edx,0x2
c0022d61:	be 10 00 00 00       	mov    esi,0x10
c0022d66:	eb 0d                	jmp    c0022d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d68:	83 f9 62             	cmp    ecx,0x62
c0022d6b:	75 08                	jne    c0022d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d6d:	83 c2 02             	add    edx,0x2
c0022d70:	be 02 00 00 00       	mov    esi,0x2
c0022d75:	01 d5                	add    ebp,edx
c0022d77:	31 d2                	xor    edx,edx
c0022d79:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022d7d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022d81:	85 c9                	test   ecx,ecx
c0022d83:	0f 94 c3             	sete   bl
c0022d86:	83 f9 0d             	cmp    ecx,0xd
c0022d89:	89 df                	mov    edi,ebx
c0022d8b:	0f 94 c3             	sete   bl
c0022d8e:	09 df                	or     edi,ebx
c0022d90:	89 fb                	mov    ebx,edi
c0022d92:	83 e7 01             	and    edi,0x1
c0022d95:	75 35                	jne    c0022dcc <Reg::readInt(char*, char*, int*)+0xd2>
c0022d97:	0f af d6             	imul   edx,esi
c0022d9a:	83 fe 10             	cmp    esi,0x10
c0022d9d:	75 26                	jne    c0022dc5 <Reg::readInt(char*, char*, int*)+0xcb>
c0022d9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022da3:	83 ef 41             	sub    edi,0x41
c0022da6:	89 fb                	mov    ebx,edi
c0022da8:	80 fb 05             	cmp    bl,0x5
c0022dab:	77 06                	ja     c0022db3 <Reg::readInt(char*, char*, int*)+0xb9>
c0022dad:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022db1:	eb 16                	jmp    c0022dc9 <Reg::readInt(char*, char*, int*)+0xcf>
c0022db3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022db7:	83 eb 61             	sub    ebx,0x61
c0022dba:	80 fb 05             	cmp    bl,0x5
c0022dbd:	77 06                	ja     c0022dc5 <Reg::readInt(char*, char*, int*)+0xcb>
c0022dbf:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022dc3:	eb 04                	jmp    c0022dc9 <Reg::readInt(char*, char*, int*)+0xcf>
c0022dc5:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022dc9:	45                   	inc    ebp
c0022dca:	eb ad                	jmp    c0022d79 <Reg::readInt(char*, char*, int*)+0x7f>
c0022dcc:	84 c0                	test   al,al
c0022dce:	74 02                	je     c0022dd2 <Reg::readInt(char*, char*, int*)+0xd8>
c0022dd0:	f7 da                	neg    edx
c0022dd2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022dd9:	89 10                	mov    DWORD PTR [eax],edx
c0022ddb:	88 d8                	mov    al,bl
c0022ddd:	81 c4 ec 00 00 00    	add    esp,0xec
c0022de3:	5b                   	pop    ebx
c0022de4:	5e                   	pop    esi
c0022de5:	5f                   	pop    edi
c0022de6:	5d                   	pop    ebp
c0022de7:	c3                   	ret    

c0022de8 <Reg::readString(char*, char*, char*, int)>:
c0022de8:	57                   	push   edi
c0022de9:	56                   	push   esi
c0022dea:	53                   	push   ebx
c0022deb:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022df1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022df5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022dfc:	57                   	push   edi
c0022dfd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e04:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e0b:	e8 b3 fe ff ff       	call   c0022cc3 <Reg::getLine(char*, char*, char*)>
c0022e10:	83 c4 10             	add    esp,0x10
c0022e13:	84 c0                	test   al,al
c0022e15:	89 c6                	mov    esi,eax
c0022e17:	74 44                	je     c0022e5d <Reg::readString(char*, char*, char*, int)+0x75>
c0022e19:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022e20:	31 c0                	xor    eax,eax
c0022e22:	4a                   	dec    edx
c0022e23:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022e26:	84 c9                	test   cl,cl
c0022e28:	74 0f                	je     c0022e39 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e2a:	39 c2                	cmp    edx,eax
c0022e2c:	7e 0b                	jle    c0022e39 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e2e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022e31:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022e36:	40                   	inc    eax
c0022e37:	eb ea                	jmp    c0022e23 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022e39:	83 ec 0c             	sub    esp,0xc
c0022e3c:	53                   	push   ebx
c0022e3d:	e8 3e d7 fd ff       	call   c0000580 <strlen>
c0022e42:	83 c4 10             	add    esp,0x10
c0022e45:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022e4a:	75 11                	jne    c0022e5d <Reg::readString(char*, char*, char*, int)+0x75>
c0022e4c:	83 ec 0c             	sub    esp,0xc
c0022e4f:	53                   	push   ebx
c0022e50:	e8 2b d7 fd ff       	call   c0000580 <strlen>
c0022e55:	83 c4 10             	add    esp,0x10
c0022e58:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022e5d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022e63:	89 f0                	mov    eax,esi
c0022e65:	5b                   	pop    ebx
c0022e66:	5e                   	pop    esi
c0022e67:	5f                   	pop    edi
c0022e68:	c3                   	ret    

c0022e69 <Reg::readBool(char*, char*, bool*)>:
c0022e69:	83 ec 20             	sub    esp,0x20
c0022e6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022e70:	50                   	push   eax
c0022e71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e79:	e8 7c fe ff ff       	call   c0022cfa <Reg::readInt(char*, char*, int*)>
c0022e7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022e82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022e87:	0f 95 02             	setne  BYTE PTR [edx]
c0022e8a:	83 c4 2c             	add    esp,0x2c
c0022e8d:	c3                   	ret    

c0022e8e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022e8e:	53                   	push   ebx
c0022e8f:	83 ec 1c             	sub    esp,0x1c
c0022e92:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022e96:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022e9a:	50                   	push   eax
c0022e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ea3:	e8 c1 ff ff ff       	call   c0022e69 <Reg::readBool(char*, char*, bool*)>
c0022ea8:	83 c4 10             	add    esp,0x10
c0022eab:	84 c0                	test   al,al
c0022ead:	74 04                	je     c0022eb3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022eaf:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022eb3:	83 c4 18             	add    esp,0x18
c0022eb6:	88 d8                	mov    al,bl
c0022eb8:	5b                   	pop    ebx
c0022eb9:	c3                   	ret    

c0022eba <Reg::readIntWithDefault(char*, char*, int)>:
c0022eba:	53                   	push   ebx
c0022ebb:	83 ec 1c             	sub    esp,0x1c
c0022ebe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022ec2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022ec6:	50                   	push   eax
c0022ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ecf:	e8 26 fe ff ff       	call   c0022cfa <Reg::readInt(char*, char*, int*)>
c0022ed4:	83 c4 10             	add    esp,0x10
c0022ed7:	84 c0                	test   al,al
c0022ed9:	74 04                	je     c0022edf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022edb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022edf:	83 c4 18             	add    esp,0x18
c0022ee2:	89 d8                	mov    eax,ebx
c0022ee4:	5b                   	pop    ebx
c0022ee5:	c3                   	ret    

c0022ee6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022ee6:	57                   	push   edi
c0022ee7:	56                   	push   esi
c0022ee8:	53                   	push   ebx
c0022ee9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022eed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ef1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022ef5:	56                   	push   esi
c0022ef6:	57                   	push   edi
c0022ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eff:	e8 e4 fe ff ff       	call   c0022de8 <Reg::readString(char*, char*, char*, int)>
c0022f04:	83 c4 10             	add    esp,0x10
c0022f07:	84 c0                	test   al,al
c0022f09:	75 16                	jne    c0022f21 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022f0b:	50                   	push   eax
c0022f0c:	56                   	push   esi
c0022f0d:	6a 00                	push   0x0
c0022f0f:	57                   	push   edi
c0022f10:	e8 db d5 fd ff       	call   c00004f0 <memset>
c0022f15:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022f18:	89 de                	mov    esi,ebx
c0022f1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022f1c:	83 c4 10             	add    esp,0x10
c0022f1f:	89 df                	mov    edi,ebx
c0022f21:	5b                   	pop    ebx
c0022f22:	89 f8                	mov    eax,edi
c0022f24:	5e                   	pop    esi
c0022f25:	5f                   	pop    edi
c0022f26:	c3                   	ret    

c0022f27 <SysEject(regs*)>:
c0022f27:	83 ec 0c             	sub    esp,0xc
c0022f2a:	83 ca ff             	or     edx,0xffffffff
c0022f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f31:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022f34:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0022f39:	83 e9 41             	sub    ecx,0x41
c0022f3c:	83 f9 19             	cmp    ecx,0x19
c0022f3f:	77 18                	ja     c0022f59 <SysEject(regs*)+0x32>
c0022f41:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0022f48:	85 c9                	test   ecx,ecx
c0022f4a:	74 0d                	je     c0022f59 <SysEject(regs*)+0x32>
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	51                   	push   ecx
c0022f50:	e8 df 96 ff ff       	call   c001c634 <LogicalDisk::eject()>
c0022f55:	83 c4 10             	add    esp,0x10
c0022f58:	99                   	cdq    
c0022f59:	83 c4 0c             	add    esp,0xc
c0022f5c:	c3                   	ret    

c0022f5d <SysExit(regs*)>:
c0022f5d:	83 ec 18             	sub    esp,0x18
c0022f60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f64:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f67:	e8 9c 29 00 00       	call   c0025908 <terminateTask(int)>
c0022f6c:	83 c8 ff             	or     eax,0xffffffff
c0022f6f:	83 c4 1c             	add    esp,0x1c
c0022f72:	89 c2                	mov    edx,eax
c0022f74:	c3                   	ret    

c0022f75 <SysGetCwd(regs*)>:
c0022f75:	83 ec 10             	sub    esp,0x10
c0022f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f7c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0022f7f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f87:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022f8a:	e8 3b 71 ff ff       	call   c001a0ca <Fs::getcwd(Process*, char*, int)>
c0022f8f:	83 c4 1c             	add    esp,0x1c
c0022f92:	99                   	cdq    
c0022f93:	c3                   	ret    

c0022f94 <SysGetPID(regs*)>:
c0022f94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f9e:	99                   	cdq    
c0022f9f:	c3                   	ret    

c0022fa0 <SysGetRAMData(regs*)>:
c0022fa0:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0022faa:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0022fb0:	99                   	cdq    
c0022fb1:	f7 f9                	idiv   ecx
c0022fb3:	c1 e0 18             	shl    eax,0x18
c0022fb6:	09 c8                	or     eax,ecx
c0022fb8:	99                   	cdq    
c0022fb9:	c3                   	ret    

c0022fba <SysGetVGAPtr(regs*)>:
c0022fba:	55                   	push   ebp
c0022fbb:	57                   	push   edi
c0022fbc:	56                   	push   esi
c0022fbd:	53                   	push   ebx
c0022fbe:	83 ec 18             	sub    esp,0x18
c0022fc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fc5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022fc8:	e8 07 24 00 00       	call   c00253d4 <Thr::processFromPID(int)>
c0022fcd:	83 c4 10             	add    esp,0x10
c0022fd0:	89 c1                	mov    ecx,eax
c0022fd2:	b8 01 00 00 00       	mov    eax,0x1
c0022fd7:	85 c9                	test   ecx,ecx
c0022fd9:	74 57                	je     c0023032 <SysGetVGAPtr(regs*)+0x78>
c0022fdb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0022fdf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0022fe5:	74 0c                	je     c0022ff3 <SysGetVGAPtr(regs*)+0x39>
c0022fe7:	83 ec 0c             	sub    esp,0xc
c0022fea:	55                   	push   ebp
c0022feb:	e8 87 40 ff ff       	call   c0017077 <setActiveTerminal(VgaText*)>
c0022ff0:	83 c4 10             	add    esp,0x10
c0022ff3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0022ff6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0022ffb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0022ffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023000:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0023003:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023006:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c002300c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002300f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023012:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023018:	50                   	push   eax
c0023019:	50                   	push   eax
c002301a:	68 32 2a 03 c0       	push   0xc0032a32
c002301f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023022:	05 a8 0f 00 00       	add    eax,0xfa8
c0023027:	50                   	push   eax
c0023028:	e8 23 d6 fd ff       	call   c0000650 <strcpy>
c002302d:	83 c4 10             	add    esp,0x10
c0023030:	31 c0                	xor    eax,eax
c0023032:	83 c4 0c             	add    esp,0xc
c0023035:	31 d2                	xor    edx,edx
c0023037:	5b                   	pop    ebx
c0023038:	5e                   	pop    esi
c0023039:	5f                   	pop    edi
c002303a:	5d                   	pop    ebp
c002303b:	c3                   	ret    

c002303c <SysKill(regs*)>:
c002303c:	53                   	push   ebx
c002303d:	83 ec 08             	sub    esp,0x8
c0023040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023044:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023048:	75 16                	jne    c0023060 <SysKill(regs*)+0x24>
c002304a:	83 ec 0c             	sub    esp,0xc
c002304d:	68 3c 2a 03 c0       	push   0xc0032a3c
c0023052:	e8 43 d1 ff ff       	call   c002019a <KePanic(char const*)>
c0023057:	83 c4 10             	add    esp,0x10
c002305a:	e9 89 00 00 00       	jmp    c00230e8 <SysKill(regs*)+0xac>
c002305f:	90                   	nop
c0023060:	83 ec 0c             	sub    esp,0xc
c0023063:	68 ec 01 04 c0       	push   0xc00401ec
c0023068:	e8 6f bb 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002306d:	8d 76 00             	lea    esi,[esi+0x0]
c0023070:	83 c4 10             	add    esp,0x10
c0023073:	85 c0                	test   eax,eax
c0023075:	74 19                	je     c0023090 <SysKill(regs*)+0x54>
c0023077:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002307a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002307d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002307f:	74 33                	je     c00230b4 <SysKill(regs*)+0x78>
c0023081:	52                   	push   edx
c0023082:	52                   	push   edx
c0023083:	50                   	push   eax
c0023084:	68 ec 01 04 c0       	push   0xc00401ec
c0023089:	e8 6e be 00 00       	call   c002eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002308e:	eb e0                	jmp    c0023070 <SysKill(regs*)+0x34>
c0023090:	83 ec 0c             	sub    esp,0xc
c0023093:	68 e0 01 04 c0       	push   0xc00401e0
c0023098:	e8 3f bb 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002309d:	8d 76 00             	lea    esi,[esi+0x0]
c00230a0:	83 c4 10             	add    esp,0x10
c00230a3:	85 c0                	test   eax,eax
c00230a5:	74 41                	je     c00230e8 <SysKill(regs*)+0xac>
c00230a7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00230aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00230ad:	39 0a                	cmp    DWORD PTR [edx],ecx
c00230af:	75 27                	jne    c00230d8 <SysKill(regs*)+0x9c>
c00230b1:	8d 76 00             	lea    esi,[esi+0x0]
c00230b4:	51                   	push   ecx
c00230b5:	51                   	push   ecx
c00230b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00230b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230c1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00230c7:	e8 80 d9 ff ff       	call   c0020a4c <KeRaiseSignal(SigHandlerBlock*, int)>
c00230cc:	83 c4 10             	add    esp,0x10
c00230cf:	31 c0                	xor    eax,eax
c00230d1:	31 d2                	xor    edx,edx
c00230d3:	eb 1b                	jmp    c00230f0 <SysKill(regs*)+0xb4>
c00230d5:	8d 76 00             	lea    esi,[esi+0x0]
c00230d8:	52                   	push   edx
c00230d9:	52                   	push   edx
c00230da:	50                   	push   eax
c00230db:	68 e0 01 04 c0       	push   0xc00401e0
c00230e0:	e8 17 be 00 00       	call   c002eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00230e5:	eb b9                	jmp    c00230a0 <SysKill(regs*)+0x64>
c00230e7:	90                   	nop
c00230e8:	83 c8 ff             	or     eax,0xffffffff
c00230eb:	89 c2                	mov    edx,eax
c00230ed:	8d 76 00             	lea    esi,[esi+0x0]
c00230f0:	83 c4 08             	add    esp,0x8
c00230f3:	5b                   	pop    ebx
c00230f4:	c3                   	ret    

c00230f5 <SysLoadDLL(regs*)>:
c00230f5:	56                   	push   esi
c00230f6:	31 d2                	xor    edx,edx
c00230f8:	53                   	push   ebx
c00230f9:	b8 01 00 00 00       	mov    eax,0x1
c00230fe:	51                   	push   ecx
c00230ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023103:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0023107:	0f 84 8c 00 00 00    	je     c0023199 <SysLoadDLL(regs*)+0xa4>
c002310d:	83 ec 0c             	sub    esp,0xc
c0023110:	68 14 01 00 00       	push   0x114
c0023115:	e8 c1 32 ff ff       	call   c00163db <malloc>
c002311a:	83 c4 0c             	add    esp,0xc
c002311d:	89 c3                	mov    ebx,eax
c002311f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023124:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023127:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002312a:	53                   	push   ebx
c002312b:	e8 fa 72 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0023130:	83 c4 10             	add    esp,0x10
c0023133:	31 d2                	xor    edx,edx
c0023135:	85 db                	test   ebx,ebx
c0023137:	b8 02 00 00 00       	mov    eax,0x2
c002313c:	74 5b                	je     c0023199 <SysLoadDLL(regs*)+0xa4>
c002313e:	83 ec 0c             	sub    esp,0xc
c0023141:	53                   	push   ebx
c0023142:	e8 c5 75 ff ff       	call   c001a70c <File::exists()>
c0023147:	83 c4 10             	add    esp,0x10
c002314a:	84 c0                	test   al,al
c002314c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002314e:	75 11                	jne    c0023161 <SysLoadDLL(regs*)+0x6c>
c0023150:	83 ec 0c             	sub    esp,0xc
c0023153:	53                   	push   ebx
c0023154:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023157:	83 c4 10             	add    esp,0x10
c002315a:	b8 03 00 00 00       	mov    eax,0x3
c002315f:	eb 36                	jmp    c0023197 <SysLoadDLL(regs*)+0xa2>
c0023161:	83 ec 0c             	sub    esp,0xc
c0023164:	53                   	push   ebx
c0023165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023168:	58                   	pop    eax
c0023169:	5a                   	pop    edx
c002316a:	6a 00                	push   0x0
c002316c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002316f:	e8 8f 15 00 00       	call   c0024703 <Thr::loadDLL(char const*, bool)>
c0023174:	83 c4 10             	add    esp,0x10
c0023177:	31 d2                	xor    edx,edx
c0023179:	89 c1                	mov    ecx,eax
c002317b:	b8 04 00 00 00       	mov    eax,0x4
c0023180:	85 c9                	test   ecx,ecx
c0023182:	74 15                	je     c0023199 <SysLoadDLL(regs*)+0xa4>
c0023184:	53                   	push   ebx
c0023185:	53                   	push   ebx
c0023186:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002318c:	51                   	push   ecx
c002318d:	e8 d2 17 00 00       	call   c0024964 <Thr::executeDLL(unsigned long, void*)>
c0023192:	83 c4 10             	add    esp,0x10
c0023195:	31 c0                	xor    eax,eax
c0023197:	31 d2                	xor    edx,edx
c0023199:	59                   	pop    ecx
c002319a:	5b                   	pop    ebx
c002319b:	5e                   	pop    esi
c002319c:	c3                   	ret    

c002319d <SysRead(regs*)>:
c002319d:	57                   	push   edi
c002319e:	56                   	push   esi
c002319f:	53                   	push   ebx
c00231a0:	83 ec 10             	sub    esp,0x10
c00231a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00231a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00231aa:	83 f8 02             	cmp    eax,0x2
c00231ad:	77 10                	ja     c00231bf <SysRead(regs*)+0x22>
c00231af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231b7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00231bd:	eb 0e                	jmp    c00231cd <SysRead(regs*)+0x30>
c00231bf:	83 ec 0c             	sub    esp,0xc
c00231c2:	50                   	push   eax
c00231c3:	e8 db 4b ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c00231c8:	83 c4 10             	add    esp,0x10
c00231cb:	89 c1                	mov    ecx,eax
c00231cd:	83 c8 ff             	or     eax,0xffffffff
c00231d0:	85 c9                	test   ecx,ecx
c00231d2:	89 c2                	mov    edx,eax
c00231d4:	74 28                	je     c00231fe <SysRead(regs*)+0x61>
c00231d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00231de:	83 ec 0c             	sub    esp,0xc
c00231e1:	31 ff                	xor    edi,edi
c00231e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00231e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00231e9:	52                   	push   edx
c00231ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00231ed:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00231f0:	57                   	push   edi
c00231f1:	56                   	push   esi
c00231f2:	51                   	push   ecx
c00231f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00231f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00231fa:	83 c4 20             	add    esp,0x20
c00231fd:	99                   	cdq    
c00231fe:	83 c4 10             	add    esp,0x10
c0023201:	5b                   	pop    ebx
c0023202:	5e                   	pop    esi
c0023203:	5f                   	pop    edi
c0023204:	c3                   	ret    

c0023205 <SysRegisterSignal(regs*)>:
c0023205:	83 ec 18             	sub    esp,0x18
c0023208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002320c:	6a 00                	push   0x0
c002320e:	6a 00                	push   0x0
c0023210:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023213:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002321b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002321e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023224:	e8 ed d7 ff ff       	call   c0020a16 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023229:	83 c4 2c             	add    esp,0x2c
c002322c:	99                   	cdq    
c002322d:	c3                   	ret    

c002322e <SysRegistryGetTypeFromPath(regs*)>:
c002322e:	57                   	push   edi
c002322f:	56                   	push   esi
c0023230:	53                   	push   ebx
c0023231:	81 ec 38 01 00 00    	sub    esp,0x138
c0023237:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002323e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023241:	68 5d 2a 03 c0       	push   0xc0032a5d
c0023246:	e8 c7 5f ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002324b:	5a                   	pop    edx
c002324c:	59                   	pop    ecx
c002324d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023250:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023253:	e8 34 f6 ff ff       	call   c002288c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023258:	5f                   	pop    edi
c0023259:	5a                   	pop    edx
c002325a:	89 c6                	mov    esi,eax
c002325c:	50                   	push   eax
c002325d:	68 7d 2a 03 c0       	push   0xc0032a7d
c0023262:	e8 ab 5f ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	85 f6                	test   esi,esi
c002326c:	74 28                	je     c0023296 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002326e:	50                   	push   eax
c002326f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023273:	57                   	push   edi
c0023274:	56                   	push   esi
c0023275:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023278:	e8 f4 f1 ff ff       	call   c0022471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002327d:	83 c4 0c             	add    esp,0xc
c0023280:	57                   	push   edi
c0023281:	50                   	push   eax
c0023282:	89 c3                	mov    ebx,eax
c0023284:	68 85 2a 03 c0       	push   0xc0032a85
c0023289:	e8 84 5f ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002328e:	89 d8                	mov    eax,ebx
c0023290:	83 c4 10             	add    esp,0x10
c0023293:	99                   	cdq    
c0023294:	eb 05                	jmp    c002329b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0023296:	83 c8 ff             	or     eax,0xffffffff
c0023299:	89 c2                	mov    edx,eax
c002329b:	81 c4 30 01 00 00    	add    esp,0x130
c00232a1:	5b                   	pop    ebx
c00232a2:	5e                   	pop    esi
c00232a3:	5f                   	pop    edi
c00232a4:	c3                   	ret    

c00232a5 <SysRegistryReadExtent(regs*)>:
c00232a5:	83 ec 1c             	sub    esp,0x1c
c00232a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00232ac:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00232af:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00232b2:	85 c0                	test   eax,eax
c00232b4:	79 1f                	jns    c00232d5 <SysRegistryReadExtent(regs*)+0x30>
c00232b6:	52                   	push   edx
c00232b7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00232bc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00232c0:	52                   	push   edx
c00232c1:	50                   	push   eax
c00232c2:	51                   	push   ecx
c00232c3:	e8 9b f0 ff ff       	call   c0022363 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00232c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232d0:	83 c4 10             	add    esp,0x10
c00232d3:	eb 14                	jmp    c00232e9 <SysRegistryReadExtent(regs*)+0x44>
c00232d5:	83 ec 04             	sub    esp,0x4
c00232d8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00232db:	50                   	push   eax
c00232dc:	51                   	push   ecx
c00232dd:	e8 1f eb ff ff       	call   c0021e01 <CmGetString(Reghive_Tag*, int, char*)>
c00232e2:	83 c4 10             	add    esp,0x10
c00232e5:	31 c0                	xor    eax,eax
c00232e7:	31 d2                	xor    edx,edx
c00232e9:	83 c4 1c             	add    esp,0x1c
c00232ec:	c3                   	ret    

c00232ed <SysRegistryPathToExtentLookup(regs*)>:
c00232ed:	53                   	push   ebx
c00232ee:	83 ec 10             	sub    esp,0x10
c00232f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232f8:	68 9b 2a 03 c0       	push   0xc0032a9b
c00232fd:	e8 10 5f ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023302:	58                   	pop    eax
c0023303:	5a                   	pop    edx
c0023304:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023307:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002330a:	e8 7d f5 ff ff       	call   c002288c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002330f:	83 c4 18             	add    esp,0x18
c0023312:	5b                   	pop    ebx
c0023313:	99                   	cdq    
c0023314:	c3                   	ret    

c0023315 <SysRegistryEnterDirectory(regs*)>:
c0023315:	53                   	push   ebx
c0023316:	83 ec 10             	sub    esp,0x10
c0023319:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002331d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023320:	68 be 2a 03 c0       	push   0xc0032abe
c0023325:	e8 e8 5e ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002332a:	58                   	pop    eax
c002332b:	5a                   	pop    edx
c002332c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002332f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023332:	e8 41 eb ff ff       	call   c0021e78 <CmEnterDirectory(Reghive_Tag*, int)>
c0023337:	83 c4 18             	add    esp,0x18
c002333a:	5b                   	pop    ebx
c002333b:	99                   	cdq    
c002333c:	c3                   	ret    

c002333d <SysRegistryGetNext(regs*)>:
c002333d:	53                   	push   ebx
c002333e:	83 ec 10             	sub    esp,0x10
c0023341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023345:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023348:	68 dc 2a 03 c0       	push   0xc0032adc
c002334d:	e8 c0 5e ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023352:	58                   	pop    eax
c0023353:	5a                   	pop    edx
c0023354:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023357:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002335a:	e8 58 eb ff ff       	call   c0021eb7 <CmGetNext(Reghive_Tag*, int)>
c002335f:	83 c4 18             	add    esp,0x18
c0023362:	5b                   	pop    ebx
c0023363:	99                   	cdq    
c0023364:	c3                   	ret    

c0023365 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023365:	57                   	push   edi
c0023366:	56                   	push   esi
c0023367:	53                   	push   ebx
c0023368:	81 ec 34 01 00 00    	sub    esp,0x134
c002336e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023375:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023379:	57                   	push   edi
c002337a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c002337d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023380:	e8 ec f0 ff ff       	call   c0022471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023385:	89 c3                	mov    ebx,eax
c0023387:	58                   	pop    eax
c0023388:	5a                   	pop    edx
c0023389:	57                   	push   edi
c002338a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c002338d:	e8 be d2 fd ff       	call   c0000650 <strcpy>
c0023392:	81 c4 40 01 00 00    	add    esp,0x140
c0023398:	89 d8                	mov    eax,ebx
c002339a:	5b                   	pop    ebx
c002339b:	99                   	cdq    
c002339c:	5e                   	pop    esi
c002339d:	5f                   	pop    edi
c002339e:	c3                   	ret    

c002339f <SysRegistryOpen(regs*)>:
c002339f:	83 ec 18             	sub    esp,0x18
c00233a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233a6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00233a9:	e8 e3 e8 ff ff       	call   c0021c91 <CmOpen(char const*)>
c00233ae:	83 c4 1c             	add    esp,0x1c
c00233b1:	99                   	cdq    
c00233b2:	c3                   	ret    

c00233b3 <SysRegistryClose(regs*)>:
c00233b3:	83 ec 18             	sub    esp,0x18
c00233b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233bd:	e8 ed e9 ff ff       	call   c0021daf <CmClose(Reghive_Tag*)>
c00233c2:	31 c0                	xor    eax,eax
c00233c4:	31 d2                	xor    edx,edx
c00233c6:	83 c4 1c             	add    esp,0x1c
c00233c9:	c3                   	ret    

c00233ca <SysSbrk(regs*)>:
c00233ca:	56                   	push   esi
c00233cb:	53                   	push   ebx
c00233cc:	50                   	push   eax
c00233cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233d9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00233dc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00233e2:	85 db                	test   ebx,ebx
c00233e4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00233e7:	74 02                	je     c00233eb <SysSbrk(regs*)+0x21>
c00233e9:	79 06                	jns    c00233f1 <SysSbrk(regs*)+0x27>
c00233eb:	89 f0                	mov    eax,esi
c00233ed:	31 d2                	xor    edx,edx
c00233ef:	eb 2a                	jmp    c002341b <SysSbrk(regs*)+0x51>
c00233f1:	83 c8 ff             	or     eax,0xffffffff
c00233f4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00233fa:	89 c2                	mov    edx,eax
c00233fc:	77 1d                	ja     c002341b <SysSbrk(regs*)+0x51>
c00233fe:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023404:	50                   	push   eax
c0023405:	68 07 0c 00 00       	push   0xc07
c002340a:	c1 ea 0c             	shr    edx,0xc
c002340d:	52                   	push   edx
c002340e:	51                   	push   ecx
c002340f:	e8 fa 52 ff ff       	call   c001870e <VAS::allocatePages(int, int)>
c0023414:	89 f0                	mov    eax,esi
c0023416:	31 d2                	xor    edx,edx
c0023418:	83 c4 10             	add    esp,0x10
c002341b:	59                   	pop    ecx
c002341c:	5b                   	pop    ebx
c002341d:	5e                   	pop    esi
c002341e:	c3                   	ret    

c002341f <SysSetCwd(regs*)>:
c002341f:	83 ec 14             	sub    esp,0x14
c0023422:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023426:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002342e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023431:	e8 75 73 ff ff       	call   c001a7ab <Fs::setcwd(Process*, char*)>
c0023436:	83 c4 1c             	add    esp,0x1c
c0023439:	99                   	cdq    
c002343a:	c3                   	ret    

c002343b <SysSetTime(regs*)>:
c002343b:	55                   	push   ebp
c002343c:	31 c9                	xor    ecx,ecx
c002343e:	57                   	push   edi
c002343f:	bd 0c 00 00 00       	mov    ebp,0xc
c0023444:	56                   	push   esi
c0023445:	53                   	push   ebx
c0023446:	31 db                	xor    ebx,ebx
c0023448:	83 ec 10             	sub    esp,0x10
c002344b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002344f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023452:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023455:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023458:	89 c2                	mov    edx,eax
c002345a:	c1 e8 05             	shr    eax,0x5
c002345d:	83 e2 1f             	and    edx,0x1f
c0023460:	42                   	inc    edx
c0023461:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023467:	c1 e7 10             	shl    edi,0x10
c002346a:	88 d1                	mov    cl,dl
c002346c:	31 d2                	xor    edx,edx
c002346e:	f7 f5                	div    ebp
c0023470:	89 dd                	mov    ebp,ebx
c0023472:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023478:	88 d5                	mov    ch,dl
c002347a:	31 d2                	xor    edx,edx
c002347c:	0f b7 c1             	movzx  eax,cx
c002347f:	09 f8                	or     eax,edi
c0023481:	bf 3c 00 00 00       	mov    edi,0x3c
c0023486:	89 c1                	mov    ecx,eax
c0023488:	89 f0                	mov    eax,esi
c002348a:	f7 f7                	div    edi
c002348c:	c1 e2 10             	shl    edx,0x10
c002348f:	09 d5                	or     ebp,edx
c0023491:	31 d2                	xor    edx,edx
c0023493:	f7 f7                	div    edi
c0023495:	89 eb                	mov    ebx,ebp
c0023497:	bf 10 0e 00 00       	mov    edi,0xe10
c002349c:	89 f0                	mov    eax,esi
c002349e:	88 d7                	mov    bh,dl
c00234a0:	31 d2                	xor    edx,edx
c00234a2:	f7 f7                	div    edi
c00234a4:	bf 18 00 00 00       	mov    edi,0x18
c00234a9:	31 d2                	xor    edx,edx
c00234ab:	f7 f7                	div    edi
c00234ad:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00234b2:	88 d3                	mov    bl,dl
c00234b4:	53                   	push   ebx
c00234b5:	51                   	push   ecx
c00234b6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00234bc:	e8 fb 7a ff ff       	call   c001afbc <Clock::setTimeInDatetimeLocal(datetime_t)>
c00234c1:	83 c4 1c             	add    esp,0x1c
c00234c4:	31 d2                	xor    edx,edx
c00234c6:	5b                   	pop    ebx
c00234c7:	5e                   	pop    esi
c00234c8:	83 f0 01             	xor    eax,0x1
c00234cb:	5f                   	pop    edi
c00234cc:	0f b6 c0             	movzx  eax,al
c00234cf:	5d                   	pop    ebp
c00234d0:	c3                   	ret    

c00234d1 <SysSymlink(regs*)>:
c00234d1:	56                   	push   esi
c00234d2:	83 c8 ff             	or     eax,0xffffffff
c00234d5:	53                   	push   ebx
c00234d6:	89 c2                	mov    edx,eax
c00234d8:	81 ec 34 02 00 00    	sub    esp,0x234
c00234de:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00234e5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00234e9:	74 50                	je     c002353b <SysSymlink(regs*)+0x6a>
c00234eb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00234ee:	85 c9                	test   ecx,ecx
c00234f0:	74 49                	je     c002353b <SysSymlink(regs*)+0x6a>
c00234f2:	6a 01                	push   0x1
c00234f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234fc:	05 0c 01 00 00       	add    eax,0x10c
c0023501:	50                   	push   eax
c0023502:	51                   	push   ecx
c0023503:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023507:	56                   	push   esi
c0023508:	e8 11 6c ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002350d:	6a 01                	push   0x1
c002350f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023514:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023517:	05 0c 01 00 00       	add    eax,0x10c
c002351c:	50                   	push   eax
c002351d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023520:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023527:	53                   	push   ebx
c0023528:	e8 f1 6b ff ff       	call   c001a11e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002352d:	83 c4 18             	add    esp,0x18
c0023530:	56                   	push   esi
c0023531:	53                   	push   ebx
c0023532:	e8 f6 67 ff ff       	call   c0019d2d <KeCreateSymlink(char const*, char const*)>
c0023537:	83 c4 10             	add    esp,0x10
c002353a:	99                   	cdq    
c002353b:	81 c4 34 02 00 00    	add    esp,0x234
c0023541:	5b                   	pop    ebx
c0023542:	5e                   	pop    esi
c0023543:	c3                   	ret    

c0023544 <SysTimezone(regs*)>:
c0023544:	53                   	push   ebx
c0023545:	83 ec 08             	sub    esp,0x8
c0023548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002354c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023550:	75 17                	jne    c0023569 <SysTimezone(regs*)+0x25>
c0023552:	83 ec 0c             	sub    esp,0xc
c0023555:	68 f3 2a 03 c0       	push   0xc0032af3
c002355a:	e8 b3 5c ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002355f:	83 c8 ff             	or     eax,0xffffffff
c0023562:	83 c4 10             	add    esp,0x10
c0023565:	89 c2                	mov    edx,eax
c0023567:	eb 20                	jmp    c0023589 <SysTimezone(regs*)+0x45>
c0023569:	83 ec 0c             	sub    esp,0xc
c002356c:	68 08 2b 03 c0       	push   0xc0032b08
c0023571:	e8 9c 5c ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023576:	58                   	pop    eax
c0023577:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002357a:	e8 a1 77 ff ff       	call   c001ad20 <User::loadClockSettings(int)>
c002357f:	83 c4 10             	add    esp,0x10
c0023582:	b8 01 00 00 00       	mov    eax,0x1
c0023587:	31 d2                	xor    edx,edx
c0023589:	83 c4 08             	add    esp,0x8
c002358c:	5b                   	pop    ebx
c002358d:	c3                   	ret    

c002358e <SysTruncate(regs*)>:
c002358e:	55                   	push   ebp
c002358f:	57                   	push   edi
c0023590:	31 ff                	xor    edi,edi
c0023592:	56                   	push   esi
c0023593:	53                   	push   ebx
c0023594:	83 ec 0c             	sub    esp,0xc
c0023597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002359b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002359e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00235a2:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00235a5:	89 ce                	mov    esi,ecx
c00235a7:	0f 84 9a 00 00 00    	je     c0023647 <SysTruncate(regs*)+0xb9>
c00235ad:	83 ec 0c             	sub    esp,0xc
c00235b0:	68 14 01 00 00       	push   0x114
c00235b5:	e8 21 2e ff ff       	call   c00163db <malloc>
c00235ba:	83 c4 0c             	add    esp,0xc
c00235bd:	89 c3                	mov    ebx,eax
c00235bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235c7:	55                   	push   ebp
c00235c8:	53                   	push   ebx
c00235c9:	e8 5c 6e ff ff       	call   c001a42a <File::File(char const*, Process*)>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	31 d2                	xor    edx,edx
c00235d3:	85 db                	test   ebx,ebx
c00235d5:	b8 03 00 00 00       	mov    eax,0x3
c00235da:	0f 84 a2 00 00 00    	je     c0023682 <SysTruncate(regs*)+0xf4>
c00235e0:	51                   	push   ecx
c00235e1:	51                   	push   ecx
c00235e2:	6a 02                	push   0x2
c00235e4:	53                   	push   ebx
c00235e5:	e8 5e 6e ff ff       	call   c001a448 <File::open(FileOpenMode)>
c00235ea:	83 c4 10             	add    esp,0x10
c00235ed:	85 c0                	test   eax,eax
c00235ef:	74 13                	je     c0023604 <SysTruncate(regs*)+0x76>
c00235f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235f3:	83 ec 0c             	sub    esp,0xc
c00235f6:	53                   	push   ebx
c00235f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235fa:	83 c4 10             	add    esp,0x10
c00235fd:	b8 04 00 00 00       	mov    eax,0x4
c0023602:	eb 7c                	jmp    c0023680 <SysTruncate(regs*)+0xf2>
c0023604:	52                   	push   edx
c0023605:	57                   	push   edi
c0023606:	56                   	push   esi
c0023607:	53                   	push   ebx
c0023608:	e8 4f 6f ff ff       	call   c001a55c <File::truncate(unsigned long long)>
c002360d:	83 c4 10             	add    esp,0x10
c0023610:	85 c0                	test   eax,eax
c0023612:	74 1b                	je     c002362f <SysTruncate(regs*)+0xa1>
c0023614:	83 ec 0c             	sub    esp,0xc
c0023617:	53                   	push   ebx
c0023618:	e8 89 6e ff ff       	call   c001a4a6 <File::close()>
c002361d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002361f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023622:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023625:	83 c4 10             	add    esp,0x10
c0023628:	b8 05 00 00 00       	mov    eax,0x5
c002362d:	eb 51                	jmp    c0023680 <SysTruncate(regs*)+0xf2>
c002362f:	83 ec 0c             	sub    esp,0xc
c0023632:	53                   	push   ebx
c0023633:	e8 6e 6e ff ff       	call   c001a4a6 <File::close()>
c0023638:	8b 03                	mov    eax,DWORD PTR [ebx]
c002363a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002363d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023640:	83 c4 10             	add    esp,0x10
c0023643:	31 c0                	xor    eax,eax
c0023645:	eb 39                	jmp    c0023680 <SysTruncate(regs*)+0xf2>
c0023647:	31 d2                	xor    edx,edx
c0023649:	83 fd 02             	cmp    ebp,0x2
c002364c:	b8 01 00 00 00       	mov    eax,0x1
c0023651:	7e 2f                	jle    c0023682 <SysTruncate(regs*)+0xf4>
c0023653:	83 ec 0c             	sub    esp,0xc
c0023656:	51                   	push   ecx
c0023657:	e8 47 47 ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c002365c:	83 c4 10             	add    esp,0x10
c002365f:	31 d2                	xor    edx,edx
c0023661:	89 c1                	mov    ecx,eax
c0023663:	b8 02 00 00 00       	mov    eax,0x2
c0023668:	85 c9                	test   ecx,ecx
c002366a:	74 16                	je     c0023682 <SysTruncate(regs*)+0xf4>
c002366c:	50                   	push   eax
c002366d:	57                   	push   edi
c002366e:	56                   	push   esi
c002366f:	51                   	push   ecx
c0023670:	e8 e7 6e ff ff       	call   c001a55c <File::truncate(unsigned long long)>
c0023675:	83 c4 10             	add    esp,0x10
c0023678:	85 c0                	test   eax,eax
c002367a:	0f 95 c0             	setne  al
c002367d:	0f b6 c0             	movzx  eax,al
c0023680:	31 d2                	xor    edx,edx
c0023682:	83 c4 0c             	add    esp,0xc
c0023685:	5b                   	pop    ebx
c0023686:	5e                   	pop    esi
c0023687:	5f                   	pop    edi
c0023688:	5d                   	pop    ebp
c0023689:	c3                   	ret    

c002368a <SysWrite(regs*)>:
c002368a:	57                   	push   edi
c002368b:	56                   	push   esi
c002368c:	53                   	push   ebx
c002368d:	83 ec 10             	sub    esp,0x10
c0023690:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023694:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023697:	83 f8 02             	cmp    eax,0x2
c002369a:	77 10                	ja     c00236ac <SysWrite(regs*)+0x22>
c002369c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236a4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00236aa:	eb 0e                	jmp    c00236ba <SysWrite(regs*)+0x30>
c00236ac:	83 ec 0c             	sub    esp,0xc
c00236af:	50                   	push   eax
c00236b0:	e8 ee 46 ff ff       	call   c0017da3 <KeGetFileFromDescriptor(int)>
c00236b5:	83 c4 10             	add    esp,0x10
c00236b8:	89 c1                	mov    ecx,eax
c00236ba:	83 c8 ff             	or     eax,0xffffffff
c00236bd:	85 c9                	test   ecx,ecx
c00236bf:	89 c2                	mov    edx,eax
c00236c1:	74 28                	je     c00236eb <SysWrite(regs*)+0x61>
c00236c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00236cb:	83 ec 0c             	sub    esp,0xc
c00236ce:	31 ff                	xor    edi,edi
c00236d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00236d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00236d6:	52                   	push   edx
c00236d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236da:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00236dd:	57                   	push   edi
c00236de:	56                   	push   esi
c00236df:	51                   	push   ecx
c00236e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00236e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00236e7:	83 c4 20             	add    esp,0x20
c00236ea:	99                   	cdq    
c00236eb:	83 c4 10             	add    esp,0x10
c00236ee:	5b                   	pop    ebx
c00236ef:	5e                   	pop    esi
c00236f0:	5f                   	pop    edi
c00236f1:	c3                   	ret    

c00236f2 <SysWsbe(regs*)>:
c00236f2:	57                   	push   edi
c00236f3:	b9 0b 00 00 00       	mov    ecx,0xb
c00236f8:	56                   	push   esi
c00236f9:	be 47 2b 03 c0       	mov    esi,0xc0032b47
c00236fe:	53                   	push   ebx
c00236ff:	83 ec 30             	sub    esp,0x30
c0023702:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023706:	fc                   	cld    
c0023707:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023709:	83 ec 0c             	sub    esp,0xc
c002370c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023715:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023718:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c002371e:	8b 06                	mov    eax,DWORD PTR [esi]
c0023720:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023723:	57                   	push   edi
c0023724:	e8 57 ce fd ff       	call   c0000580 <strlen>
c0023729:	5a                   	pop    edx
c002372a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c002372e:	52                   	push   edx
c002372f:	31 d2                	xor    edx,edx
c0023731:	57                   	push   edi
c0023732:	52                   	push   edx
c0023733:	50                   	push   eax
c0023734:	56                   	push   esi
c0023735:	ff d3                	call   ebx
c0023737:	83 c4 14             	add    esp,0x14
c002373a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002373e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023741:	e8 c2 21 00 00       	call   c0025908 <terminateTask(int)>
c0023746:	83 c4 40             	add    esp,0x40
c0023749:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002374e:	5b                   	pop    ebx
c002374f:	31 d2                	xor    edx,edx
c0023751:	5e                   	pop    esi
c0023752:	5f                   	pop    edi
c0023753:	c3                   	ret    

c0023754 <SysYield(regs*)>:
c0023754:	83 ec 0c             	sub    esp,0xc
c0023757:	fa                   	cli    
c0023758:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002375e:	e8 31 1a 00 00       	call   c0025194 <schedule()>
c0023763:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023768:	48                   	dec    eax
c0023769:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002376e:	75 01                	jne    c0023771 <SysYield(regs*)+0x1d>
c0023770:	fb                   	sti    
c0023771:	31 c0                	xor    eax,eax
c0023773:	31 d2                	xor    edx,edx
c0023775:	83 c4 0c             	add    esp,0xc
c0023778:	c3                   	ret    

c0023779 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023779:	55                   	push   ebp
c002377a:	57                   	push   edi
c002377b:	56                   	push   esi
c002377c:	53                   	push   ebx
c002377d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023783:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c002378e:	74 3b                	je     c00237cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023790:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023798:	74 31                	je     c00237cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c002379a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00237a2:	75 27                	jne    c00237cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00237a4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00237ab:	05 00 10 00 00       	add    eax,0x1000
c00237b0:	89 c2                	mov    edx,eax
c00237b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00237b7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00237be:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00237c4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00237cb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00237d2:	83 ec 0c             	sub    esp,0xc
c00237d5:	6a 01                	push   0x1
c00237d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00237dd:	e8 1b 47 ff ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c00237e2:	83 c4 10             	add    esp,0x10
c00237e5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00237eb:	89 c3                	mov    ebx,eax
c00237ed:	0f 86 26 01 00 00    	jbe    c0023919 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00237f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00237fb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023802:	c1 ee 0c             	shr    esi,0xc
c0023805:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023809:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023810:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023817:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002381b:	29 ef                	sub    edi,ebp
c002381d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023821:	0f 83 f9 00 00 00    	jae    c0023920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023827:	81 ff 00 10 00 00    	cmp    edi,0x1000
c002382d:	b8 00 10 00 00       	mov    eax,0x1000
c0023832:	0f 47 f8             	cmova  edi,eax
c0023835:	83 ec 0c             	sub    esp,0xc
c0023838:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002383f:	31 d2                	xor    edx,edx
c0023841:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023843:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023847:	50                   	push   eax
c0023848:	8d 74 24 30          	lea    esi,[esp+0x30]
c002384c:	56                   	push   esi
c002384d:	52                   	push   edx
c002384e:	57                   	push   edi
c002384f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023856:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023859:	83 c4 20             	add    esp,0x20
c002385c:	85 c0                	test   eax,eax
c002385e:	75 06                	jne    c0023866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023860:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023864:	74 13                	je     c0023879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0023866:	83 ec 0c             	sub    esp,0xc
c0023869:	53                   	push   ebx
c002386a:	e8 a2 49 ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c002386f:	83 c4 10             	add    esp,0x10
c0023872:	31 c0                	xor    eax,eax
c0023874:	e9 7c 01 00 00       	jmp    c00239f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023879:	fa                   	cli    
c002387a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023880:	e8 65 2e ff ff       	call   c00166ea <Phys::allocatePage()>
c0023885:	6a 07                	push   0x7
c0023887:	53                   	push   ebx
c0023888:	50                   	push   eax
c0023889:	89 c7                	mov    edi,eax
c002388b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023890:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023893:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023899:	e8 68 4d ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c002389e:	83 c4 0c             	add    esp,0xc
c00238a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00238a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238ae:	6a 00                	push   0x0
c00238b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238be:	e8 a9 4b ff ff       	call   c001846c <VAS::mapOtherVASIn(bool, VAS*)>
c00238c3:	58                   	pop    eax
c00238c4:	5a                   	pop    edx
c00238c5:	68 07 0c 00 00       	push   0xc07
c00238ca:	55                   	push   ebp
c00238cb:	57                   	push   edi
c00238cc:	89 df                	mov    edi,ebx
c00238ce:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00238d5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238db:	6a 00                	push   0x0
c00238dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238e5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238eb:	e8 7a 4f ff ff       	call   c001886a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00238f0:	b9 00 10 00 00       	mov    ecx,0x1000
c00238f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00238f7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00238fc:	83 c4 20             	add    esp,0x20
c00238ff:	48                   	dec    eax
c0023900:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023905:	85 c0                	test   eax,eax
c0023907:	75 01                	jne    c002390a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023909:	fb                   	sti    
c002390a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c002390e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023914:	e9 f0 fe ff ff       	jmp    c0023809 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023919:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023920:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023927:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c002392d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023933:	0f 86 ae 00 00 00    	jbe    c00239e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023939:	fa                   	cli    
c002393a:	51                   	push   ecx
c002393b:	31 ff                	xor    edi,edi
c002393d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023944:	c1 ee 0c             	shr    esi,0xc
c0023947:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002394d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023953:	6a 00                	push   0x0
c0023955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002395a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002395d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023963:	e8 04 4b ff ff       	call   c001846c <VAS::mapOtherVASIn(bool, VAS*)>
c0023968:	83 c4 10             	add    esp,0x10
c002396b:	e8 7a 2d ff ff       	call   c00166ea <Phys::allocatePage()>
c0023970:	47                   	inc    edi
c0023971:	6a 07                	push   0x7
c0023973:	53                   	push   ebx
c0023974:	50                   	push   eax
c0023975:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023979:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002397f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023982:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023988:	e8 79 4c ff ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c002398d:	58                   	pop    eax
c002398e:	5a                   	pop    edx
c002398f:	68 07 0c 00 00       	push   0xc07
c0023994:	55                   	push   ebp
c0023995:	81 c5 00 10 00 00    	add    ebp,0x1000
c002399b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002399f:	50                   	push   eax
c00239a0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239ad:	6a 00                	push   0x0
c00239af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239bd:	e8 a8 4e ff ff       	call   c001886a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239c2:	83 c4 1c             	add    esp,0x1c
c00239c5:	68 00 10 00 00       	push   0x1000
c00239ca:	6a 00                	push   0x0
c00239cc:	53                   	push   ebx
c00239cd:	e8 1e cb fd ff       	call   c00004f0 <memset>
c00239d2:	83 c4 10             	add    esp,0x10
c00239d5:	39 fe                	cmp    esi,edi
c00239d7:	77 92                	ja     c002396b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00239d9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239de:	48                   	dec    eax
c00239df:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239e4:	75 01                	jne    c00239e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00239e6:	fb                   	sti    
c00239e7:	83 ec 0c             	sub    esp,0xc
c00239ea:	53                   	push   ebx
c00239eb:	e8 21 48 ff ff       	call   c0018211 <Virt::freeKernelVirtualPages(unsigned long)>
c00239f0:	83 c4 10             	add    esp,0x10
c00239f3:	b0 01                	mov    al,0x1
c00239f5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00239fb:	5b                   	pop    ebx
c00239fc:	5e                   	pop    esi
c00239fd:	5f                   	pop    edi
c00239fe:	5d                   	pop    ebp
c00239ff:	c3                   	ret    

c0023a00 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023a00:	55                   	push   ebp
c0023a01:	57                   	push   edi
c0023a02:	56                   	push   esi
c0023a03:	53                   	push   ebx
c0023a04:	83 ec 48             	sub    esp,0x48
c0023a07:	68 14 01 00 00       	push   0x114
c0023a0c:	e8 ca 29 ff ff       	call   c00163db <malloc>
c0023a11:	83 c4 0c             	add    esp,0xc
c0023a14:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023a1c:	89 c7                	mov    edi,eax
c0023a1e:	50                   	push   eax
c0023a1f:	e8 06 6a ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0023a24:	58                   	pop    eax
c0023a25:	5a                   	pop    edx
c0023a26:	6a 01                	push   0x1
c0023a28:	57                   	push   edi
c0023a29:	e8 1a 6a ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	85 c0                	test   eax,eax
c0023a33:	0f 85 4c 01 00 00    	jne    c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a39:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023a41:	83 ec 0c             	sub    esp,0xc
c0023a44:	6a 34                	push   0x34
c0023a46:	e8 90 29 ff ff       	call   c00163db <malloc>
c0023a4b:	89 c3                	mov    ebx,eax
c0023a4d:	58                   	pop    eax
c0023a4e:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a50:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023a54:	56                   	push   esi
c0023a55:	53                   	push   ebx
c0023a56:	6a 00                	push   0x0
c0023a58:	6a 34                	push   0x34
c0023a5a:	57                   	push   edi
c0023a5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023a5e:	83 c4 20             	add    esp,0x20
c0023a61:	85 c0                	test   eax,eax
c0023a63:	0f 85 1c 01 00 00    	jne    c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a69:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023a6f:	0f 85 10 01 00 00    	jne    c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a78:	85 c0                	test   eax,eax
c0023a7a:	0f 84 05 01 00 00    	je     c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a80:	31 d2                	xor    edx,edx
c0023a82:	55                   	push   ebp
c0023a83:	52                   	push   edx
c0023a84:	50                   	push   eax
c0023a85:	57                   	push   edi
c0023a86:	e8 7b 6a ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023a8b:	83 c4 10             	add    esp,0x10
c0023a8e:	85 c0                	test   eax,eax
c0023a90:	0f 85 ef 00 00 00    	jne    c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a96:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023aa0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023aa4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023aa8:	0f af c2             	imul   eax,edx
c0023aab:	50                   	push   eax
c0023aac:	e8 2a 29 ff ff       	call   c00163db <malloc>
c0023ab1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023ab3:	89 34 24             	mov    DWORD PTR [esp],esi
c0023ab6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023aba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023abe:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ac2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023ac6:	0f af c2             	imul   eax,edx
c0023ac9:	99                   	cdq    
c0023aca:	52                   	push   edx
c0023acb:	50                   	push   eax
c0023acc:	57                   	push   edi
c0023acd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ad0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023ad3:	83 c4 20             	add    esp,0x20
c0023ad6:	85 c0                	test   eax,eax
c0023ad8:	0f 84 a7 00 00 00    	je     c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ade:	31 d2                	xor    edx,edx
c0023ae0:	51                   	push   ecx
c0023ae1:	52                   	push   edx
c0023ae2:	50                   	push   eax
c0023ae3:	57                   	push   edi
c0023ae4:	e8 1d 6a ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023ae9:	83 c4 10             	add    esp,0x10
c0023aec:	85 c0                	test   eax,eax
c0023aee:	0f 85 91 00 00 00    	jne    c0023b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023af4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023af8:	83 ec 0c             	sub    esp,0xc
c0023afb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023aff:	0f af c2             	imul   eax,edx
c0023b02:	50                   	push   eax
c0023b03:	e8 d3 28 ff ff       	call   c00163db <malloc>
c0023b08:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023b0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0023b0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b15:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b19:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b1d:	0f af c2             	imul   eax,edx
c0023b20:	99                   	cdq    
c0023b21:	52                   	push   edx
c0023b22:	50                   	push   eax
c0023b23:	57                   	push   edi
c0023b24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b27:	83 c4 20             	add    esp,0x20
c0023b2a:	31 c9                	xor    ecx,ecx
c0023b2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b34:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023b38:	0f b7 e9             	movzx  ebp,cx
c0023b3b:	0f 83 86 00 00 00    	jae    c0023bc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023b41:	c1 e5 05             	shl    ebp,0x5
c0023b44:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023b48:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023b4c:	75 73                	jne    c0023bc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023b4e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023b55:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b5c:	52                   	push   edx
c0023b5d:	31 d2                	xor    edx,edx
c0023b5f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023b62:	52                   	push   edx
c0023b63:	50                   	push   eax
c0023b64:	57                   	push   edi
c0023b65:	e8 9c 69 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023b6a:	83 c4 10             	add    esp,0x10
c0023b6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023b71:	85 c0                	test   eax,eax
c0023b73:	74 17                	je     c0023b8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023b75:	83 ec 0c             	sub    esp,0xc
c0023b78:	68 73 2b 03 c0       	push   0xc0032b73
c0023b7d:	e8 90 56 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023b82:	83 c4 10             	add    esp,0x10
c0023b85:	31 c0                	xor    eax,eax
c0023b87:	e9 8b 00 00 00       	jmp    c0023c17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023b90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023b99:	50                   	push   eax
c0023b9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023b9e:	56                   	push   esi
c0023b9f:	57                   	push   edi
c0023ba0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023ba4:	e8 d0 fb ff ff       	call   c0023779 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023ba9:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023bad:	83 c4 20             	add    esp,0x20
c0023bb0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0023bb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023bb8:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0023bbd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0023bc1:	41                   	inc    ecx
c0023bc2:	e9 6d ff ff ff       	jmp    c0023b34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023bc7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0023bcb:	83 ec 0c             	sub    esp,0xc
c0023bce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023bd6:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023bdc:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023be2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023be7:	05 00 10 00 00       	add    eax,0x1000
c0023bec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023bef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf3:	e8 f3 27 ff ff       	call   c00163eb <free>
c0023bf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023bfb:	e8 eb 27 ff ff       	call   c00163eb <free>
c0023c00:	58                   	pop    eax
c0023c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c05:	e8 e1 27 ff ff       	call   c00163eb <free>
c0023c0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023c0d:	e8 94 68 ff ff       	call   c001a4a6 <File::close()>
c0023c12:	83 c4 10             	add    esp,0x10
c0023c15:	b0 01                	mov    al,0x1
c0023c17:	83 c4 3c             	add    esp,0x3c
c0023c1a:	5b                   	pop    ebx
c0023c1b:	5e                   	pop    esi
c0023c1c:	5f                   	pop    edi
c0023c1d:	5d                   	pop    ebp
c0023c1e:	c3                   	ret    

c0023c1f <Thr::runtimeReferenceHelper()>:
c0023c1f:	83 ec 18             	sub    esp,0x18
c0023c22:	68 7b 2b 03 c0       	push   0xc0032b7b
c0023c27:	e8 e6 55 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0023c2c:	fa                   	cli    
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	eb fe                	jmp    c0023c30 <Thr::runtimeReferenceHelper()+0x11>

c0023c32 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023c32:	57                   	push   edi
c0023c33:	56                   	push   esi
c0023c34:	53                   	push   ebx
c0023c35:	31 db                	xor    ebx,ebx
c0023c37:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023c3d:	7e 3c                	jle    c0023c7b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023c3f:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023c46:	31 ff                	xor    edi,edi
c0023c48:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023c4f:	7e 27                	jle    c0023c78 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023c51:	50                   	push   eax
c0023c52:	50                   	push   eax
c0023c53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c57:	8b 06                	mov    eax,DWORD PTR [esi]
c0023c59:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023c60:	50                   	push   eax
c0023c61:	e8 1a cb fd ff       	call   c0000780 <strcmp>
c0023c66:	83 c4 10             	add    esp,0x10
c0023c69:	85 c0                	test   eax,eax
c0023c6b:	75 05                	jne    c0023c72 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023c6d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023c70:	eb 0b                	jmp    c0023c7d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023c72:	83 c6 10             	add    esi,0x10
c0023c75:	47                   	inc    edi
c0023c76:	eb d0                	jmp    c0023c48 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023c78:	43                   	inc    ebx
c0023c79:	eb bc                	jmp    c0023c37 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023c7b:	31 c0                	xor    eax,eax
c0023c7d:	5b                   	pop    ebx
c0023c7e:	5e                   	pop    esi
c0023c7f:	5f                   	pop    edi
c0023c80:	c3                   	ret    

c0023c81 <Thr::loadKernelSymbolTable(char const*)>:
c0023c81:	55                   	push   ebp
c0023c82:	57                   	push   edi
c0023c83:	56                   	push   esi
c0023c84:	53                   	push   ebx
c0023c85:	83 ec 68             	sub    esp,0x68
c0023c88:	68 14 01 00 00       	push   0x114
c0023c8d:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023c93:	e8 43 27 ff ff       	call   c00163db <malloc>
c0023c98:	83 c4 0c             	add    esp,0xc
c0023c9b:	56                   	push   esi
c0023c9c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023ca0:	89 c3                	mov    ebx,eax
c0023ca2:	50                   	push   eax
c0023ca3:	e8 82 67 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0023ca8:	5e                   	pop    esi
c0023ca9:	5f                   	pop    edi
c0023caa:	6a 01                	push   0x1
c0023cac:	53                   	push   ebx
c0023cad:	e8 96 67 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0023cb2:	83 c4 10             	add    esp,0x10
c0023cb5:	85 c0                	test   eax,eax
c0023cb7:	74 0a                	je     c0023cc3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023cb9:	83 ec 0c             	sub    esp,0xc
c0023cbc:	68 9d 2b 03 c0       	push   0xc0032b9d
c0023cc1:	eb 34                	jmp    c0023cf7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023cc3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023ccb:	83 ec 0c             	sub    esp,0xc
c0023cce:	6a 34                	push   0x34
c0023cd0:	e8 06 27 ff ff       	call   c00163db <malloc>
c0023cd5:	59                   	pop    ecx
c0023cd6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023cda:	89 c7                	mov    edi,eax
c0023cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023cde:	56                   	push   esi
c0023cdf:	57                   	push   edi
c0023ce0:	6a 00                	push   0x0
c0023ce2:	6a 34                	push   0x34
c0023ce4:	53                   	push   ebx
c0023ce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ce8:	83 c4 20             	add    esp,0x20
c0023ceb:	85 c0                	test   eax,eax
c0023ced:	74 17                	je     c0023d06 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023cef:	83 ec 0c             	sub    esp,0xc
c0023cf2:	68 b4 2b 03 c0       	push   0xc0032bb4
c0023cf7:	e8 9e c4 ff ff       	call   c002019a <KePanic(char const*)>
c0023cfc:	83 c4 10             	add    esp,0x10
c0023cff:	31 c0                	xor    eax,eax
c0023d01:	e9 31 02 00 00       	jmp    c0023f37 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023d06:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023d0c:	75 e1                	jne    c0023cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d0e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023d11:	85 c0                	test   eax,eax
c0023d13:	74 da                	je     c0023cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d15:	52                   	push   edx
c0023d16:	31 d2                	xor    edx,edx
c0023d18:	52                   	push   edx
c0023d19:	50                   	push   eax
c0023d1a:	53                   	push   ebx
c0023d1b:	e8 e6 67 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023d20:	83 c4 10             	add    esp,0x10
c0023d23:	85 c0                	test   eax,eax
c0023d25:	75 c8                	jne    c0023cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d27:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d2b:	83 ec 0c             	sub    esp,0xc
c0023d2e:	31 ed                	xor    ebp,ebp
c0023d30:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d34:	0f af c2             	imul   eax,edx
c0023d37:	50                   	push   eax
c0023d38:	e8 9e 26 ff ff       	call   c00163db <malloc>
c0023d3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d4a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d4e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d52:	0f af c2             	imul   eax,edx
c0023d55:	99                   	cdq    
c0023d56:	52                   	push   edx
c0023d57:	50                   	push   eax
c0023d58:	53                   	push   ebx
c0023d59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d5c:	83 c4 20             	add    esp,0x20
c0023d5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023d67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023d6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023d77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023d7f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023d83:	0f b7 f5             	movzx  esi,bp
c0023d86:	0f 83 a7 00 00 00    	jae    c0023e33 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023d8c:	6b f6 28             	imul   esi,esi,0x28
c0023d8f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023d93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023d96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d9a:	50                   	push   eax
c0023d9b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023d9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023da3:	8b 16                	mov    edx,DWORD PTR [esi]
c0023da5:	6b c0 28             	imul   eax,eax,0x28
c0023da8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023dac:	89 d0                	mov    eax,edx
c0023dae:	31 d2                	xor    edx,edx
c0023db0:	52                   	push   edx
c0023db1:	50                   	push   eax
c0023db2:	53                   	push   ebx
c0023db3:	e8 4e 67 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023db8:	83 c4 0c             	add    esp,0xc
c0023dbb:	6a 20                	push   0x20
c0023dbd:	6a 00                	push   0x0
c0023dbf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023dc3:	52                   	push   edx
c0023dc4:	e8 27 c7 fd ff       	call   c00004f0 <memset>
c0023dc9:	58                   	pop    eax
c0023dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dcc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023dd0:	51                   	push   ecx
c0023dd1:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023dd5:	52                   	push   edx
c0023dd6:	6a 00                	push   0x0
c0023dd8:	6a 1f                	push   0x1f
c0023dda:	53                   	push   ebx
c0023ddb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023dde:	83 c4 18             	add    esp,0x18
c0023de1:	68 cb 2b 03 c0       	push   0xc0032bcb
c0023de6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023dea:	52                   	push   edx
c0023deb:	e8 90 c9 fd ff       	call   c0000780 <strcmp>
c0023df0:	83 c4 10             	add    esp,0x10
c0023df3:	85 c0                	test   eax,eax
c0023df5:	75 0f                	jne    c0023e06 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023df7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023dfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e06:	50                   	push   eax
c0023e07:	50                   	push   eax
c0023e08:	68 d3 2b 03 c0       	push   0xc0032bd3
c0023e0d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023e11:	50                   	push   eax
c0023e12:	e8 69 c9 fd ff       	call   c0000780 <strcmp>
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	85 c0                	test   eax,eax
c0023e1c:	75 0f                	jne    c0023e2d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023e1e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023e21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023e2d:	45                   	inc    ebp
c0023e2e:	e9 4c ff ff ff       	jmp    c0023d7f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023e33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023e38:	75 10                	jne    c0023e4a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023e3a:	83 ec 0c             	sub    esp,0xc
c0023e3d:	68 db 2b 03 c0       	push   0xc0032bdb
c0023e42:	e8 53 c3 ff ff       	call   c002019a <KePanic(char const*)>
c0023e47:	83 c4 10             	add    esp,0x10
c0023e4a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023e4f:	75 10                	jne    c0023e61 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023e51:	83 ec 0c             	sub    esp,0xc
c0023e54:	68 db 2b 03 c0       	push   0xc0032bdb
c0023e59:	e8 3c c3 ff ff       	call   c002019a <KePanic(char const*)>
c0023e5e:	83 c4 10             	add    esp,0x10
c0023e61:	50                   	push   eax
c0023e62:	31 d2                	xor    edx,edx
c0023e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e68:	52                   	push   edx
c0023e69:	50                   	push   eax
c0023e6a:	53                   	push   ebx
c0023e6b:	e8 96 66 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023e70:	5a                   	pop    edx
c0023e71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023e75:	e8 61 25 ff ff       	call   c00163db <malloc>
c0023e7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023e7e:	31 c9                	xor    ecx,ecx
c0023e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e86:	5e                   	pop    esi
c0023e87:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023e8b:	55                   	push   ebp
c0023e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e90:	51                   	push   ecx
c0023e91:	52                   	push   edx
c0023e92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023e96:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023e9a:	53                   	push   ebx
c0023e9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023e9e:	83 c4 14             	add    esp,0x14
c0023ea1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ea5:	e8 31 25 ff ff       	call   c00163db <malloc>
c0023eaa:	89 c6                	mov    esi,eax
c0023eac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023eb1:	56                   	push   esi
c0023eb2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023eb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023eba:	51                   	push   ecx
c0023ebb:	52                   	push   edx
c0023ebc:	53                   	push   ebx
c0023ebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ec0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ec4:	83 c4 1c             	add    esp,0x1c
c0023ec7:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023ecd:	c1 e8 04             	shr    eax,0x4
c0023ed0:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023edb:	31 d2                	xor    edx,edx
c0023edd:	52                   	push   edx
c0023ede:	50                   	push   eax
c0023edf:	53                   	push   ebx
c0023ee0:	e8 21 66 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023ee5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023ee7:	31 d2                	xor    edx,edx
c0023ee9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023eec:	56                   	push   esi
c0023eed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ef1:	52                   	push   edx
c0023ef2:	50                   	push   eax
c0023ef3:	53                   	push   ebx
c0023ef4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ef7:	83 c4 14             	add    esp,0x14
c0023efa:	53                   	push   ebx
c0023efb:	e8 a6 65 ff ff       	call   c001a4a6 <File::close()>
c0023f00:	5d                   	pop    ebp
c0023f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f05:	e8 e1 24 ff ff       	call   c00163eb <free>
c0023f0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023f0d:	e8 d9 24 ff ff       	call   c00163eb <free>
c0023f12:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023f17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f1b:	83 c4 10             	add    esp,0x10
c0023f1e:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023f25:	8d 50 01             	lea    edx,[eax+0x1]
c0023f28:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023f2f:	b0 01                	mov    al,0x1
c0023f31:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0023f37:	83 c4 5c             	add    esp,0x5c
c0023f3a:	5b                   	pop    ebx
c0023f3b:	5e                   	pop    esi
c0023f3c:	5f                   	pop    edi
c0023f3d:	5d                   	pop    ebp
c0023f3e:	c3                   	ret    

c0023f3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023f3f:	55                   	push   ebp
c0023f40:	57                   	push   edi
c0023f41:	56                   	push   esi
c0023f42:	53                   	push   ebx
c0023f43:	81 ec 68 03 00 00    	sub    esp,0x368
c0023f49:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023f50:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023f56:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023f5a:	68 14 01 00 00       	push   0x114
c0023f5f:	e8 77 24 ff ff       	call   c00163db <malloc>
c0023f64:	83 c4 0c             	add    esp,0xc
c0023f67:	56                   	push   esi
c0023f68:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0023f6f:	50                   	push   eax
c0023f70:	89 c3                	mov    ebx,eax
c0023f72:	e8 b3 64 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0023f77:	5f                   	pop    edi
c0023f78:	5d                   	pop    ebp
c0023f79:	6a 01                	push   0x1
c0023f7b:	53                   	push   ebx
c0023f7c:	e8 c7 64 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0023f81:	83 c4 10             	add    esp,0x10
c0023f84:	85 c0                	test   eax,eax
c0023f86:	0f 85 b3 06 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023f8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0023f94:	83 ec 0c             	sub    esp,0xc
c0023f97:	6a 34                	push   0x34
c0023f99:	e8 3d 24 ff ff       	call   c00163db <malloc>
c0023f9e:	5e                   	pop    esi
c0023f9f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0023fa3:	89 c5                	mov    ebp,eax
c0023fa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fa7:	56                   	push   esi
c0023fa8:	55                   	push   ebp
c0023fa9:	6a 00                	push   0x0
c0023fab:	6a 34                	push   0x34
c0023fad:	53                   	push   ebx
c0023fae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fb1:	83 c4 20             	add    esp,0x20
c0023fb4:	85 c0                	test   eax,eax
c0023fb6:	0f 85 83 06 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fbc:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0023fc3:	0f 85 76 06 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fc9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0023fcc:	85 c0                	test   eax,eax
c0023fce:	0f 84 6b 06 00 00    	je     c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fd4:	31 d2                	xor    edx,edx
c0023fd6:	51                   	push   ecx
c0023fd7:	52                   	push   edx
c0023fd8:	50                   	push   eax
c0023fd9:	53                   	push   ebx
c0023fda:	e8 27 65 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c0023fdf:	83 c4 10             	add    esp,0x10
c0023fe2:	85 c0                	test   eax,eax
c0023fe4:	0f 85 55 06 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fea:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0023fed:	83 ec 0c             	sub    esp,0xc
c0023ff0:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0023ff4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023ff8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0023ffc:	0f af c2             	imul   eax,edx
c0023fff:	50                   	push   eax
c0024000:	e8 d6 23 ff ff       	call   c00163db <malloc>
c0024005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024007:	89 34 24             	mov    DWORD PTR [esp],esi
c002400a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002400e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024012:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0024016:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c002401a:	0f af c2             	imul   eax,edx
c002401d:	99                   	cdq    
c002401e:	52                   	push   edx
c002401f:	50                   	push   eax
c0024020:	53                   	push   ebx
c0024021:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024024:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0024027:	83 c4 20             	add    esp,0x20
c002402a:	85 c0                	test   eax,eax
c002402c:	0f 84 0d 06 00 00    	je     c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024032:	52                   	push   edx
c0024033:	31 d2                	xor    edx,edx
c0024035:	52                   	push   edx
c0024036:	50                   	push   eax
c0024037:	53                   	push   ebx
c0024038:	e8 c9 64 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c002403d:	83 c4 10             	add    esp,0x10
c0024040:	85 c0                	test   eax,eax
c0024042:	0f 85 f7 05 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024048:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c002404c:	83 ec 0c             	sub    esp,0xc
c002404f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024053:	0f af c2             	imul   eax,edx
c0024056:	50                   	push   eax
c0024057:	e8 7f 23 ff ff       	call   c00163db <malloc>
c002405c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002405e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024061:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024069:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c002406d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024071:	0f af c2             	imul   eax,edx
c0024074:	99                   	cdq    
c0024075:	52                   	push   edx
c0024076:	50                   	push   eax
c0024077:	53                   	push   ebx
c0024078:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002407b:	83 c4 20             	add    esp,0x20
c002407e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0024084:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024087:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c002408b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c002408f:	73 78                	jae    c0024109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0024091:	c1 e7 05             	shl    edi,0x5
c0024094:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0024098:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c002409b:	75 63                	jne    c0024100 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c002409d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00240a0:	31 d2                	xor    edx,edx
c00240a2:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00240a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240a9:	50                   	push   eax
c00240aa:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00240ad:	52                   	push   edx
c00240ae:	50                   	push   eax
c00240af:	53                   	push   ebx
c00240b0:	e8 51 64 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c00240b5:	83 c4 10             	add    esp,0x10
c00240b8:	85 c0                	test   eax,eax
c00240ba:	0f 85 7f 05 00 00    	jne    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240c0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00240c7:	83 ec 0c             	sub    esp,0xc
c00240ca:	31 d2                	xor    edx,edx
c00240cc:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00240d0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00240d2:	01 c6                	add    esi,eax
c00240d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00240db:	50                   	push   eax
c00240dc:	56                   	push   esi
c00240dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240e1:	52                   	push   edx
c00240e2:	50                   	push   eax
c00240e3:	53                   	push   ebx
c00240e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240e7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00240ea:	83 c4 1c             	add    esp,0x1c
c00240ed:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00240f0:	50                   	push   eax
c00240f1:	6a 00                	push   0x0
c00240f3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00240f7:	56                   	push   esi
c00240f8:	e8 f3 c3 fd ff       	call   c00004f0 <memset>
c00240fd:	83 c4 10             	add    esp,0x10
c0024100:	66 ff 04 24          	inc    WORD PTR [esp]
c0024104:	e9 7b ff ff ff       	jmp    c0024084 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0024109:	50                   	push   eax
c002410a:	68 00 01 00 00       	push   0x100
c002410f:	6a 00                	push   0x0
c0024111:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0024115:	50                   	push   eax
c0024116:	e8 d5 c3 fd ff       	call   c00004f0 <memset>
c002411b:	83 c4 0c             	add    esp,0xc
c002411e:	68 00 01 00 00       	push   0x100
c0024123:	6a 00                	push   0x0
c0024125:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c002412c:	50                   	push   eax
c002412d:	e8 be c3 fd ff       	call   c00004f0 <memset>
c0024132:	83 c4 10             	add    esp,0x10
c0024135:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c002413c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024143:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002414b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002415b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024167:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c002416b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0024170:	0f 83 16 01 00 00    	jae    c002428c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0024176:	6b ff 28             	imul   edi,edi,0x28
c0024179:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c002417d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0024180:	51                   	push   ecx
c0024181:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0024185:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024189:	8b 07                	mov    eax,DWORD PTR [edi]
c002418b:	6b d2 28             	imul   edx,edx,0x28
c002418e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024192:	31 d2                	xor    edx,edx
c0024194:	52                   	push   edx
c0024195:	50                   	push   eax
c0024196:	53                   	push   ebx
c0024197:	e8 6a 63 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c002419c:	83 c4 0c             	add    esp,0xc
c002419f:	6a 20                	push   0x20
c00241a1:	6a 00                	push   0x0
c00241a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241aa:	51                   	push   ecx
c00241ab:	e8 40 c3 fd ff       	call   c00004f0 <memset>
c00241b0:	58                   	pop    eax
c00241b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241b3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00241b7:	52                   	push   edx
c00241b8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00241bf:	51                   	push   ecx
c00241c0:	6a 00                	push   0x0
c00241c2:	6a 1f                	push   0x1f
c00241c4:	53                   	push   ebx
c00241c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241c8:	83 c4 1c             	add    esp,0x1c
c00241cb:	6a 09                	push   0x9
c00241cd:	68 f5 2b 03 c0       	push   0xc0032bf5
c00241d2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241d9:	51                   	push   ecx
c00241da:	e8 a1 c1 fd ff       	call   c0000380 <memcmp>
c00241df:	83 c4 10             	add    esp,0x10
c00241e2:	85 c0                	test   eax,eax
c00241e4:	75 1a                	jne    c0024200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00241e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00241e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00241ec:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00241f0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00241f3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00241fa:	89 d0                	mov    eax,edx
c00241fc:	40                   	inc    eax
c00241fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0024200:	52                   	push   edx
c0024201:	6a 09                	push   0x9
c0024203:	68 ff 2b 03 c0       	push   0xc0032bff
c0024208:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002420f:	50                   	push   eax
c0024210:	e8 6b c1 fd ff       	call   c0000380 <memcmp>
c0024215:	83 c4 10             	add    esp,0x10
c0024218:	85 c0                	test   eax,eax
c002421a:	75 1a                	jne    c0024236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c002421c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002421f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0024222:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0024226:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024229:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0024230:	89 c8                	mov    eax,ecx
c0024232:	40                   	inc    eax
c0024233:	89 04 24             	mov    DWORD PTR [esp],eax
c0024236:	50                   	push   eax
c0024237:	50                   	push   eax
c0024238:	68 cb 2b 03 c0       	push   0xc0032bcb
c002423d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024244:	50                   	push   eax
c0024245:	e8 36 c5 fd ff       	call   c0000780 <strcmp>
c002424a:	83 c4 10             	add    esp,0x10
c002424d:	85 c0                	test   eax,eax
c002424f:	75 0b                	jne    c002425c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0024251:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0024255:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002425c:	50                   	push   eax
c002425d:	50                   	push   eax
c002425e:	68 d3 2b 03 c0       	push   0xc0032bd3
c0024263:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002426a:	50                   	push   eax
c002426b:	e8 10 c5 fd ff       	call   c0000780 <strcmp>
c0024270:	83 c4 10             	add    esp,0x10
c0024273:	85 c0                	test   eax,eax
c0024275:	75 0b                	jne    c0024282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0024277:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c002427b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002427e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024282:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0024287:	e9 d7 fe ff ff       	jmp    c0024163 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c002428c:	50                   	push   eax
c002428d:	31 d2                	xor    edx,edx
c002428f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024293:	52                   	push   edx
c0024294:	50                   	push   eax
c0024295:	53                   	push   ebx
c0024296:	e8 6b 62 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c002429b:	58                   	pop    eax
c002429c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00242a0:	e8 36 21 ff ff       	call   c00163db <malloc>
c00242a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00242a7:	31 d2                	xor    edx,edx
c00242a9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00242ad:	58                   	pop    eax
c00242ae:	8d 74 24 54          	lea    esi,[esp+0x54]
c00242b2:	56                   	push   esi
c00242b3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00242b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242bb:	52                   	push   edx
c00242bc:	50                   	push   eax
c00242bd:	53                   	push   ebx
c00242be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242c1:	83 c4 14             	add    esp,0x14
c00242c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242c8:	e8 0e 21 ff ff       	call   c00163db <malloc>
c00242cd:	31 d2                	xor    edx,edx
c00242cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00242d3:	83 c4 0c             	add    esp,0xc
c00242d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242da:	52                   	push   edx
c00242db:	50                   	push   eax
c00242dc:	53                   	push   ebx
c00242dd:	e8 24 62 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c00242e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00242e4:	31 d2                	xor    edx,edx
c00242e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00242e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00242ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242f1:	52                   	push   edx
c00242f2:	50                   	push   eax
c00242f3:	53                   	push   ebx
c00242f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242f7:	83 c4 20             	add    esp,0x20
c00242fa:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00242ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024307:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002430b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002430f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0024312:	0f 84 2b 03 00 00    	je     c0024643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0024318:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c002431f:	31 d2                	xor    edx,edx
c0024321:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024325:	c1 e8 03             	shr    eax,0x3
c0024328:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c002432c:	51                   	push   ecx
c002432d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024331:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024335:	52                   	push   edx
c0024336:	50                   	push   eax
c0024337:	53                   	push   ebx
c0024338:	e8 c9 61 ff ff       	call   c001a506 <File::seek(unsigned long long)>
c002433d:	5e                   	pop    esi
c002433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024342:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024349:	e8 8d 20 ff ff       	call   c00163db <malloc>
c002434e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024350:	31 d2                	xor    edx,edx
c0024352:	89 c7                	mov    edi,eax
c0024354:	58                   	pop    eax
c0024355:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024359:	50                   	push   eax
c002435a:	57                   	push   edi
c002435b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002435f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024366:	52                   	push   edx
c0024367:	50                   	push   eax
c0024368:	53                   	push   ebx
c0024369:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002436c:	83 c4 20             	add    esp,0x20
c002436f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024377:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002437b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c002437f:	0f 8d a5 02 00 00    	jge    c002462a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0024385:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c002438a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002438e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0024391:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024395:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024399:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c002439d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00243a1:	c1 e8 08             	shr    eax,0x8
c00243a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00243a8:	89 c2                	mov    edx,eax
c00243aa:	c1 e2 04             	shl    edx,0x4
c00243ad:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00243b1:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00243b4:	85 f6                	test   esi,esi
c00243b6:	0f 85 cf 00 00 00    	jne    c002448b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00243bc:	83 ec 0c             	sub    esp,0xc
c00243bf:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00243c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243c7:	03 02                	add    eax,DWORD PTR [edx]
c00243c9:	50                   	push   eax
c00243ca:	e8 63 f8 ff ff       	call   c0023c32 <Thr::getAddressOfKernelSymbol(char const*)>
c00243cf:	83 c4 10             	add    esp,0x10
c00243d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00243d6:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00243db:	85 c0                	test   eax,eax
c00243dd:	89 c6                	mov    esi,eax
c00243df:	0f 85 a6 00 00 00    	jne    c002448b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00243e5:	83 ec 0c             	sub    esp,0xc
c00243e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00243ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243f0:	03 02                	add    eax,DWORD PTR [edx]
c00243f2:	50                   	push   eax
c00243f3:	e8 8c bf ff ff       	call   c0020384 <KeResolveCompatibilitySymbol(char*)>
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00243ff:	85 c0                	test   eax,eax
c0024401:	89 c6                	mov    esi,eax
c0024403:	0f 85 82 00 00 00    	jne    c002448b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024409:	50                   	push   eax
c002440a:	50                   	push   eax
c002440b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002440f:	03 02                	add    eax,DWORD PTR [edx]
c0024411:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024415:	50                   	push   eax
c0024416:	68 09 2c 03 c0       	push   0xc0032c09
c002441b:	e8 f2 4d ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0024420:	58                   	pop    eax
c0024421:	5a                   	pop    edx
c0024422:	68 23 2c 03 c0       	push   0xc0032c23
c0024427:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002442e:	51                   	push   ecx
c002442f:	e8 1c c2 fd ff       	call   c0000650 <strcpy>
c0024434:	59                   	pop    ecx
c0024435:	58                   	pop    eax
c0024436:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002443a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002443e:	03 02                	add    eax,DWORD PTR [edx]
c0024440:	50                   	push   eax
c0024441:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024448:	51                   	push   ecx
c0024449:	e8 22 c4 fd ff       	call   c0000870 <strcat>
c002444e:	58                   	pop    eax
c002444f:	5a                   	pop    edx
c0024450:	68 bd 2c 03 c0       	push   0xc0032cbd
c0024455:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002445c:	51                   	push   ecx
c002445d:	e8 0e c4 fd ff       	call   c0000870 <strcat>
c0024462:	83 c4 10             	add    esp,0x10
c0024465:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002446a:	0f 84 77 01 00 00    	je     c00245e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024470:	83 ec 0c             	sub    esp,0xc
c0024473:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002447a:	51                   	push   ecx
c002447b:	e8 1a bd ff ff       	call   c002019a <KePanic(char const*)>
c0024480:	83 c4 10             	add    esp,0x10
c0024483:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0024487:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002448b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0024490:	83 f8 01             	cmp    eax,0x1
c0024493:	0f 85 9b 00 00 00    	jne    c0024534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0024499:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002449d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00244a4:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00244a8:	01 d0                	add    eax,edx
c00244aa:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00244b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00244b6:	0f 94 c0             	sete   al
c00244b9:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00244c1:	0f 94 c1             	sete   cl
c00244c4:	09 c1                	or     ecx,eax
c00244c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244ca:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00244cf:	0f b6 c9             	movzx  ecx,cl
c00244d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00244d4:	74 41                	je     c0024517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00244d6:	8d 14 06             	lea    edx,[esi+eax*1]
c00244d9:	85 c9                	test   ecx,ecx
c00244db:	75 15                	jne    c00244f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00244dd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00244e1:	66 83 f8 0c          	cmp    ax,0xc
c00244e5:	76 05                	jbe    c00244ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00244e7:	b8 0c 00 00 00       	mov    eax,0xc
c00244ec:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00244f0:	76 37                	jbe    c0024529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00244f2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00244f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00244fb:	0f 84 e6 00 00 00    	je     c00245e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024501:	83 ec 0c             	sub    esp,0xc
c0024504:	68 3a 2c 03 c0       	push   0xc0032c3a
c0024509:	e8 8c bc ff ff       	call   c002019a <KePanic(char const*)>
c002450e:	83 c4 10             	add    esp,0x10
c0024511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024515:	eb 12                	jmp    c0024529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024517:	01 c2                	add    edx,eax
c0024519:	85 c9                	test   ecx,ecx
c002451b:	75 0c                	jne    c0024529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002451d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024521:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024525:	77 02                	ja     c0024529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024527:	01 f2                	add    edx,esi
c0024529:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002452d:	89 10                	mov    DWORD PTR [eax],edx
c002452f:	e9 ed 00 00 00       	jmp    c0024621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024534:	83 f8 02             	cmp    eax,0x2
c0024537:	0f 85 81 00 00 00    	jne    c00245be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c002453d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0024544:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0024548:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c002454c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0024554:	74 21                	je     c0024577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024556:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c002455e:	74 17                	je     c0024577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024560:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0024564:	ba 0a 00 00 00       	mov    edx,0xa
c0024569:	83 f9 0e             	cmp    ecx,0xe
c002456c:	77 03                	ja     c0024571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c002456e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0024571:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0024575:	76 1f                	jbe    c0024596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0024577:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002457c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024580:	74 65                	je     c00245e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024582:	83 ec 0c             	sub    esp,0xc
c0024585:	68 56 2c 03 c0       	push   0xc0032c56
c002458a:	e8 0b bc ff ff       	call   c002019a <KePanic(char const*)>
c002458f:	83 c4 10             	add    esp,0x10
c0024592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024596:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c002459b:	8b 10                	mov    edx,DWORD PTR [eax]
c002459d:	74 15                	je     c00245b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c002459f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00245a3:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00245aa:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00245ae:	01 d1                	add    ecx,edx
c00245b0:	01 ce                	add    esi,ecx
c00245b2:	eb 06                	jmp    c00245ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00245b4:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00245b8:	01 d6                	add    esi,edx
c00245ba:	89 30                	mov    DWORD PTR [eax],esi
c00245bc:	eb 63                	jmp    c0024621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00245be:	56                   	push   esi
c00245bf:	56                   	push   esi
c00245c0:	50                   	push   eax
c00245c1:	68 72 2c 03 c0       	push   0xc0032c72
c00245c6:	e8 47 4c ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00245cb:	83 c4 10             	add    esp,0x10
c00245ce:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00245d3:	74 12                	je     c00245e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00245d5:	83 ec 0c             	sub    esp,0xc
c00245d8:	68 7d 2c 03 c0       	push   0xc0032c7d
c00245dd:	e8 b8 bb ff ff       	call   c002019a <KePanic(char const*)>
c00245e2:	83 c4 10             	add    esp,0x10
c00245e5:	eb 3a                	jmp    c0024621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00245e7:	83 ec 0c             	sub    esp,0xc
c00245ea:	53                   	push   ebx
c00245eb:	e8 b6 5e ff ff       	call   c001a4a6 <File::close()>
c00245f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00245fb:	e8 eb 1d ff ff       	call   c00163eb <free>
c0024600:	59                   	pop    ecx
c0024601:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024605:	e8 e1 1d ff ff       	call   c00163eb <free>
c002460a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002460d:	e8 d9 1d ff ff       	call   c00163eb <free>
c0024612:	5b                   	pop    ebx
c0024613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024617:	e8 cf 1d ff ff       	call   c00163eb <free>
c002461c:	83 c4 10             	add    esp,0x10
c002461f:	eb 1e                	jmp    c002463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024621:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0024625:	e9 4d fd ff ff       	jmp    c0024377 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c002462a:	83 ec 0c             	sub    esp,0xc
c002462d:	57                   	push   edi
c002462e:	e8 b8 1d ff ff       	call   c00163eb <free>
c0024633:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0024637:	83 c4 10             	add    esp,0x10
c002463a:	e9 cc fc ff ff       	jmp    c002430b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c002463f:	31 c0                	xor    eax,eax
c0024641:	eb 32                	jmp    c0024675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0024643:	83 ec 0c             	sub    esp,0xc
c0024646:	53                   	push   ebx
c0024647:	e8 5a 5e ff ff       	call   c001a4a6 <File::close()>
c002464c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002464e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024654:	58                   	pop    eax
c0024655:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024659:	e8 8d 1d ff ff       	call   c00163eb <free>
c002465e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024661:	e8 85 1d ff ff       	call   c00163eb <free>
c0024666:	5a                   	pop    edx
c0024667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002466b:	e8 7b 1d ff ff       	call   c00163eb <free>
c0024670:	83 c4 10             	add    esp,0x10
c0024673:	b0 01                	mov    al,0x1
c0024675:	81 c4 5c 03 00 00    	add    esp,0x35c
c002467b:	5b                   	pop    ebx
c002467c:	5e                   	pop    esi
c002467d:	5f                   	pop    edi
c002467e:	5d                   	pop    ebp
c002467f:	c3                   	ret    

c0024680 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024680:	56                   	push   esi
c0024681:	31 d2                	xor    edx,edx
c0024683:	53                   	push   ebx
c0024684:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c002468a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002468e:	39 d3                	cmp    ebx,edx
c0024690:	7e 1b                	jle    c00246ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024692:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024699:	39 c8                	cmp    eax,ecx
c002469b:	77 0d                	ja     c00246aa <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c002469d:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00246a4:	01 c6                	add    esi,eax
c00246a6:	39 ce                	cmp    esi,ecx
c00246a8:	77 05                	ja     c00246af <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00246aa:	42                   	inc    edx
c00246ab:	eb e1                	jmp    c002468e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00246ad:	31 c0                	xor    eax,eax
c00246af:	5b                   	pop    ebx
c00246b0:	5e                   	pop    esi
c00246b1:	c3                   	ret    

c00246b2 <Thr::getDriverNameFromAddress(unsigned long)>:
c00246b2:	53                   	push   ebx
c00246b3:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00246b9:	31 c0                	xor    eax,eax
c00246bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246bf:	39 c3                	cmp    ebx,eax
c00246c1:	7e 22                	jle    c00246e5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00246c3:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00246ca:	39 ca                	cmp    edx,ecx
c00246cc:	77 14                	ja     c00246e2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246ce:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00246d5:	39 ca                	cmp    edx,ecx
c00246d7:	76 09                	jbe    c00246e2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246d9:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00246e0:	eb 05                	jmp    c00246e7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00246e2:	40                   	inc    eax
c00246e3:	eb da                	jmp    c00246bf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00246e5:	31 c0                	xor    eax,eax
c00246e7:	5b                   	pop    ebx
c00246e8:	c3                   	ret    

c00246e9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00246e9:	53                   	push   ebx
c00246ea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00246ee:	53                   	push   ebx
c00246ef:	e8 8c ff ff ff       	call   c0024680 <Thr::getDriverBaseFromAddress(unsigned long)>
c00246f4:	5a                   	pop    edx
c00246f5:	31 d2                	xor    edx,edx
c00246f7:	85 c0                	test   eax,eax
c00246f9:	74 04                	je     c00246ff <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00246fb:	89 da                	mov    edx,ebx
c00246fd:	29 c2                	sub    edx,eax
c00246ff:	5b                   	pop    ebx
c0024700:	89 d0                	mov    eax,edx
c0024702:	c3                   	ret    

c0024703 <Thr::loadDLL(char const*, bool)>:
c0024703:	55                   	push   ebp
c0024704:	57                   	push   edi
c0024705:	56                   	push   esi
c0024706:	53                   	push   ebx
c0024707:	81 ec 34 01 00 00    	sub    esp,0x134
c002470d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024714:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c002471b:	56                   	push   esi
c002471c:	68 95 2c 03 c0       	push   0xc0032c95
c0024721:	e8 ec 4a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0024726:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c002472d:	e8 a9 1c ff ff       	call   c00163db <malloc>
c0024732:	83 c4 0c             	add    esp,0xc
c0024735:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002473b:	56                   	push   esi
c002473c:	50                   	push   eax
c002473d:	89 c3                	mov    ebx,eax
c002473f:	e8 e6 5c ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0024744:	83 c4 10             	add    esp,0x10
c0024747:	85 db                	test   ebx,ebx
c0024749:	75 3c                	jne    c0024787 <Thr::loadDLL(char const*, bool)+0x84>
c002474b:	89 e8                	mov    eax,ebp
c002474d:	84 c0                	test   al,al
c002474f:	0f 84 02 02 00 00    	je     c0024957 <Thr::loadDLL(char const*, bool)+0x254>
c0024755:	50                   	push   eax
c0024756:	50                   	push   eax
c0024757:	68 a6 2c 03 c0       	push   0xc0032ca6
c002475c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024760:	57                   	push   edi
c0024761:	e8 ea be fd ff       	call   c0000650 <strcpy>
c0024766:	58                   	pop    eax
c0024767:	5a                   	pop    edx
c0024768:	56                   	push   esi
c0024769:	57                   	push   edi
c002476a:	e8 01 c1 fd ff       	call   c0000870 <strcat>
c002476f:	59                   	pop    ecx
c0024770:	58                   	pop    eax
c0024771:	68 bd 2c 03 c0       	push   0xc0032cbd
c0024776:	57                   	push   edi
c0024777:	e8 f4 c0 fd ff       	call   c0000870 <strcat>
c002477c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002477f:	e8 16 ba ff ff       	call   c002019a <KePanic(char const*)>
c0024784:	83 c4 10             	add    esp,0x10
c0024787:	50                   	push   eax
c0024788:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c002478c:	50                   	push   eax
c002478d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024791:	50                   	push   eax
c0024792:	53                   	push   ebx
c0024793:	e8 b2 5f ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0024798:	83 c4 10             	add    esp,0x10
c002479b:	85 db                	test   ebx,ebx
c002479d:	89 c7                	mov    edi,eax
c002479f:	74 0c                	je     c00247ad <Thr::loadDLL(char const*, bool)+0xaa>
c00247a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00247a3:	83 ec 0c             	sub    esp,0xc
c00247a6:	53                   	push   ebx
c00247a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247aa:	83 c4 10             	add    esp,0x10
c00247ad:	83 ec 0c             	sub    esp,0xc
c00247b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00247b5:	50                   	push   eax
c00247b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247be:	57                   	push   edi
c00247bf:	68 bf 2c 03 c0       	push   0xc0032cbf
c00247c4:	e8 49 4a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00247c9:	83 c4 20             	add    esp,0x20
c00247cc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00247d1:	75 0a                	jne    c00247dd <Thr::loadDLL(char const*, bool)+0xda>
c00247d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247d7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00247db:	75 3e                	jne    c002481b <Thr::loadDLL(char const*, bool)+0x118>
c00247dd:	89 e8                	mov    eax,ebp
c00247df:	31 db                	xor    ebx,ebx
c00247e1:	84 c0                	test   al,al
c00247e3:	0f 84 6e 01 00 00    	je     c0024957 <Thr::loadDLL(char const*, bool)+0x254>
c00247e9:	50                   	push   eax
c00247ea:	50                   	push   eax
c00247eb:	68 e0 2c 03 c0       	push   0xc0032ce0
c00247f0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00247f4:	53                   	push   ebx
c00247f5:	e8 56 be fd ff       	call   c0000650 <strcpy>
c00247fa:	58                   	pop    eax
c00247fb:	5a                   	pop    edx
c00247fc:	56                   	push   esi
c00247fd:	53                   	push   ebx
c00247fe:	e8 6d c0 fd ff       	call   c0000870 <strcat>
c0024803:	59                   	pop    ecx
c0024804:	5f                   	pop    edi
c0024805:	68 bd 2c 03 c0       	push   0xc0032cbd
c002480a:	53                   	push   ebx
c002480b:	e8 60 c0 fd ff       	call   c0000870 <strcat>
c0024810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024813:	e8 82 b9 ff ff       	call   c002019a <KePanic(char const*)>
c0024818:	83 c4 10             	add    esp,0x10
c002481b:	53                   	push   ebx
c002481c:	6a 03                	push   0x3
c002481e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024822:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024826:	05 ff 0f 00 00       	add    eax,0xfff
c002482b:	83 d2 00             	adc    edx,0x0
c002482e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024832:	50                   	push   eax
c0024833:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024839:	e8 d0 3e ff ff       	call   c001870e <VAS::allocatePages(int, int)>
c002483e:	89 c3                	mov    ebx,eax
c0024840:	58                   	pop    eax
c0024841:	5a                   	pop    edx
c0024842:	53                   	push   ebx
c0024843:	68 02 11 03 c0       	push   0xc0031102
c0024848:	e8 c5 49 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002484d:	89 34 24             	mov    DWORD PTR [esp],esi
c0024850:	e8 2b bd fd ff       	call   c0000580 <strlen>
c0024855:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c002485b:	40                   	inc    eax
c002485c:	89 04 24             	mov    DWORD PTR [esp],eax
c002485f:	e8 77 1b ff ff       	call   c00163db <malloc>
c0024864:	59                   	pop    ecx
c0024865:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c002486c:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024871:	5f                   	pop    edi
c0024872:	56                   	push   esi
c0024873:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c002487a:	e8 d1 bd fd ff       	call   c0000650 <strcpy>
c002487f:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024884:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c002488b:	8d 50 01             	lea    edx,[eax+0x1]
c002488e:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024894:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024898:	83 c4 0c             	add    esp,0xc
c002489b:	6a 01                	push   0x1
c002489d:	53                   	push   ebx
c002489e:	56                   	push   esi
c002489f:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00248a6:	e8 94 f6 ff ff       	call   c0023f3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00248ab:	83 c4 10             	add    esp,0x10
c00248ae:	89 c7                	mov    edi,eax
c00248b0:	89 f8                	mov    eax,edi
c00248b2:	83 f0 01             	xor    eax,0x1
c00248b5:	84 c0                	test   al,al
c00248b7:	74 18                	je     c00248d1 <Thr::loadDLL(char const*, bool)+0x1ce>
c00248b9:	89 e8                	mov    eax,ebp
c00248bb:	84 c0                	test   al,al
c00248bd:	74 12                	je     c00248d1 <Thr::loadDLL(char const*, bool)+0x1ce>
c00248bf:	83 ec 0c             	sub    esp,0xc
c00248c2:	68 f9 2c 03 c0       	push   0xc0032cf9
c00248c7:	e8 ce b8 ff ff       	call   c002019a <KePanic(char const*)>
c00248cc:	83 c4 10             	add    esp,0x10
c00248cf:	eb 06                	jmp    c00248d7 <Thr::loadDLL(char const*, bool)+0x1d4>
c00248d1:	89 f8                	mov    eax,edi
c00248d3:	84 c0                	test   al,al
c00248d5:	75 10                	jne    c00248e7 <Thr::loadDLL(char const*, bool)+0x1e4>
c00248d7:	83 ec 0c             	sub    esp,0xc
c00248da:	68 18 2d 03 c0       	push   0xc0032d18
c00248df:	e8 b6 b8 ff ff       	call   c002019a <KePanic(char const*)>
c00248e4:	83 c4 10             	add    esp,0x10
c00248e7:	31 f6                	xor    esi,esi
c00248e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248f1:	05 ff 0f 00 00       	add    eax,0xfff
c00248f6:	83 d2 00             	adc    edx,0x0
c00248f9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00248fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024901:	c1 ea 0c             	shr    edx,0xc
c0024904:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024908:	ba 00 00 00 00       	mov    edx,0x0
c002490d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024911:	89 d0                	mov    eax,edx
c0024913:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024917:	73 32                	jae    c002494b <Thr::loadDLL(char const*, bool)+0x248>
c0024919:	50                   	push   eax
c002491a:	50                   	push   eax
c002491b:	89 f0                	mov    eax,esi
c002491d:	c1 e0 0c             	shl    eax,0xc
c0024920:	01 d8                	add    eax,ebx
c0024922:	50                   	push   eax
c0024923:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024929:	e8 c4 38 ff ff       	call   c00181f2 <VAS::getPageTableEntry(unsigned long)>
c002492e:	83 c4 10             	add    esp,0x10
c0024931:	8b 00                	mov    eax,DWORD PTR [eax]
c0024933:	a8 60                	test   al,0x60
c0024935:	75 11                	jne    c0024948 <Thr::loadDLL(char const*, bool)+0x245>
c0024937:	83 ec 0c             	sub    esp,0xc
c002493a:	25 00 f0 ff ff       	and    eax,0xfffff000
c002493f:	50                   	push   eax
c0024940:	e8 3c 1d ff ff       	call   c0016681 <Phys::freePage(unsigned long)>
c0024945:	83 c4 10             	add    esp,0x10
c0024948:	46                   	inc    esi
c0024949:	eb 9e                	jmp    c00248e9 <Thr::loadDLL(char const*, bool)+0x1e6>
c002494b:	89 f8                	mov    eax,edi
c002494d:	84 c0                	test   al,al
c002494f:	b8 00 00 00 00       	mov    eax,0x0
c0024954:	0f 44 d8             	cmove  ebx,eax
c0024957:	81 c4 2c 01 00 00    	add    esp,0x12c
c002495d:	89 d8                	mov    eax,ebx
c002495f:	5b                   	pop    ebx
c0024960:	5e                   	pop    esi
c0024961:	5f                   	pop    edi
c0024962:	5d                   	pop    ebp
c0024963:	c3                   	ret    

c0024964 <Thr::executeDLL(unsigned long, void*)>:
c0024964:	56                   	push   esi
c0024965:	53                   	push   ebx
c0024966:	52                   	push   edx
c0024967:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002496b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002496f:	85 db                	test   ebx,ebx
c0024971:	75 10                	jne    c0024983 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024973:	83 ec 0c             	sub    esp,0xc
c0024976:	68 34 2d 03 c0       	push   0xc0032d34
c002497b:	e8 1a b8 ff ff       	call   c002019a <KePanic(char const*)>
c0024980:	83 c4 10             	add    esp,0x10
c0024983:	50                   	push   eax
c0024984:	50                   	push   eax
c0024985:	53                   	push   ebx
c0024986:	68 5e 2d 03 c0       	push   0xc0032d5e
c002498b:	e8 82 48 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0024990:	89 d8                	mov    eax,ebx
c0024992:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024996:	83 c4 14             	add    esp,0x14
c0024999:	5b                   	pop    ebx
c002499a:	5e                   	pop    esi
c002499b:	ff e0                	jmp    eax
c002499d:	66 90                	xchg   ax,ax
c002499f:	90                   	nop

c00249a0 <userModeEntryPoint(void*)>:
c00249a0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00249a5:	83 e8 01             	sub    eax,0x1
c00249a8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00249ad:	75 01                	jne    c00249b0 <userModeEntryPoint(void*)+0x10>
c00249af:	fb                   	sti    
c00249b0:	fb                   	sti    
c00249b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00249b9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00249bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00249c3:	e9 77 b8 fd ff       	jmp    c000023f <goToUsermode>

c00249c8 <changeTSS>:
c00249c8:	83 ec 14             	sub    esp,0x14
c00249cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249d0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00249d3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00249d8:	c1 e2 15             	shl    edx,0x15
c00249db:	29 d0                	sub    eax,edx
c00249dd:	50                   	push   eax
c00249de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00249e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249e9:	05 7c 11 00 00       	add    eax,0x117c
c00249ee:	50                   	push   eax
c00249ef:	e8 50 2e ff ff       	call   c0017844 <TSS::setESP(unsigned long)>
c00249f4:	83 c4 1c             	add    esp,0x1c
c00249f7:	c3                   	ret    

c00249f8 <switchToThread(ThreadControlBlock*)>:
c00249f8:	57                   	push   edi
c00249f9:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00249ff:	56                   	push   esi
c0024a00:	53                   	push   ebx
c0024a01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a05:	85 c9                	test   ecx,ecx
c0024a07:	0f 85 8b 00 00 00    	jne    c0024a98 <switchToThread(ThreadControlBlock*)+0xa0>
c0024a0d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024a11:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024a17:	74 7b                	je     c0024a94 <switchToThread(ThreadControlBlock*)+0x9c>
c0024a19:	b8 00 04 00 00       	mov    eax,0x400
c0024a1e:	29 d0                	sub    eax,edx
c0024a20:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024a23:	d1 f8                	sar    eax,1
c0024a25:	01 d0                	add    eax,edx
c0024a27:	90                   	nop
c0024a28:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024a2b:	e8 70 25 00 00       	call   c0026fa0 <HalQueryPerformanceCounter()>
c0024a30:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024a35:	89 c6                	mov    esi,eax
c0024a37:	89 d7                	mov    edi,edx
c0024a39:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024a3f:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024a44:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024a4a:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024a50:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024a56:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024a5c:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024a62:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024a68:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024a6b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024a6e:	01 c6                	add    esi,eax
c0024a70:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024a73:	11 d7                	adc    edi,edx
c0024a75:	83 ec 0c             	sub    esp,0xc
c0024a78:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024a7b:	53                   	push   ebx
c0024a7c:	e8 f6 b7 fd ff       	call   c0000277 <switchToThreadASM>
c0024a81:	0f 20 c0             	mov    eax,cr0
c0024a84:	83 c8 08             	or     eax,0x8
c0024a87:	0f 22 c0             	mov    cr0,eax
c0024a8a:	83 c4 10             	add    esp,0x10
c0024a8d:	5b                   	pop    ebx
c0024a8e:	5e                   	pop    esi
c0024a8f:	5f                   	pop    edi
c0024a90:	c3                   	ret    
c0024a91:	8d 76 00             	lea    esi,[esi+0x0]
c0024a94:	31 c0                	xor    eax,eax
c0024a96:	eb 90                	jmp    c0024a28 <switchToThread(ThreadControlBlock*)+0x30>
c0024a98:	5b                   	pop    ebx
c0024a99:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024aa3:	5e                   	pop    esi
c0024aa4:	5f                   	pop    edi
c0024aa5:	c3                   	ret    
c0024aa6:	66 90                	xchg   ax,ax

c0024aa8 <Process::addArgs(char**)>:
c0024aa8:	57                   	push   edi
c0024aa9:	56                   	push   esi
c0024aaa:	53                   	push   ebx
c0024aab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024aaf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024ab3:	85 f6                	test   esi,esi
c0024ab5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024abf:	74 4f                	je     c0024b10 <Process::addArgs(char**)+0x68>
c0024ac1:	8b 06                	mov    eax,DWORD PTR [esi]
c0024ac3:	85 c0                	test   eax,eax
c0024ac5:	74 49                	je     c0024b10 <Process::addArgs(char**)+0x68>
c0024ac7:	31 db                	xor    ebx,ebx
c0024ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0024acc:	83 ec 0c             	sub    esp,0xc
c0024acf:	50                   	push   eax
c0024ad0:	e8 ab ba fd ff       	call   c0000580 <strlen>
c0024ad5:	83 c0 01             	add    eax,0x1
c0024ad8:	89 04 24             	mov    DWORD PTR [esp],eax
c0024adb:	e8 fb 18 ff ff       	call   c00163db <malloc>
c0024ae0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024ae7:	5a                   	pop    edx
c0024ae8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024aeb:	83 c3 01             	add    ebx,0x1
c0024aee:	59                   	pop    ecx
c0024aef:	52                   	push   edx
c0024af0:	50                   	push   eax
c0024af1:	e8 5a bb fd ff       	call   c0000650 <strcpy>
c0024af6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024afc:	83 c4 10             	add    esp,0x10
c0024aff:	83 c1 01             	add    ecx,0x1
c0024b02:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024b08:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024b0b:	85 c0                	test   eax,eax
c0024b0d:	75 bd                	jne    c0024acc <Process::addArgs(char**)+0x24>
c0024b0f:	90                   	nop
c0024b10:	5b                   	pop    ebx
c0024b11:	5e                   	pop    esi
c0024b12:	5f                   	pop    edi
c0024b13:	c3                   	ret    

c0024b14 <Process::Process(char const*, Process*, char**)>:
c0024b14:	56                   	push   esi
c0024b15:	53                   	push   ebx
c0024b16:	83 ec 14             	sub    esp,0x14
c0024b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b1d:	05 0c 02 00 00       	add    eax,0x20c
c0024b22:	bb 07 00 00 00       	mov    ebx,0x7
c0024b27:	89 c6                	mov    esi,eax
c0024b29:	8d 76 00             	lea    esi,[esi+0x0]
c0024b2c:	85 db                	test   ebx,ebx
c0024b2e:	78 14                	js     c0024b44 <Process::Process(char const*, Process*, char**)+0x30>
c0024b30:	83 ec 0c             	sub    esp,0xc
c0024b33:	56                   	push   esi
c0024b34:	e8 cf a3 00 00       	call   c002ef08 <ThreadControlBlock::ThreadControlBlock()>
c0024b39:	83 c4 10             	add    esp,0x10
c0024b3c:	83 c6 5f             	add    esi,0x5f
c0024b3f:	83 eb 01             	sub    ebx,0x1
c0024b42:	eb e8                	jmp    c0024b2c <Process::Process(char const*, Process*, char**)+0x18>
c0024b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b48:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b53:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024b5a:	83 ec 0c             	sub    esp,0xc
c0024b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b61:	e8 0e b4 ff ff       	call   c001ff74 <KeNewProcessEnv(Process*)>
c0024b66:	83 c4 10             	add    esp,0x10
c0024b69:	89 c2                	mov    edx,eax
c0024b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b6f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b79:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024b82:	a1 80 43 03 c0       	mov    eax,ds:0xc0034380
c0024b87:	8d 50 01             	lea    edx,[eax+0x1]
c0024b8a:	89 15 80 43 03 c0    	mov    DWORD PTR ds:0xc0034380,edx
c0024b90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024b94:	89 02                	mov    DWORD PTR [edx],eax
c0024b96:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024b9e:	83 ec 0c             	sub    esp,0xc
c0024ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ba5:	e8 31 18 ff ff       	call   c00163db <malloc>
c0024baa:	83 c4 10             	add    esp,0x10
c0024bad:	89 c3                	mov    ebx,eax
c0024baf:	83 ec 08             	sub    esp,0x8
c0024bb2:	6a 00                	push   0x0
c0024bb4:	53                   	push   ebx
c0024bb5:	e8 a0 3d ff ff       	call   c001895a <VAS::VAS(bool)>
c0024bba:	83 c4 10             	add    esp,0x10
c0024bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bc1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bcb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024bdd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024be3:	e8 df bd ff ff       	call   c00209c7 <KeInitSignals()>
c0024be8:	89 c2                	mov    edx,eax
c0024bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bf8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bfe:	85 c0                	test   eax,eax
c0024c00:	74 42                	je     c0024c44 <Process::Process(char const*, Process*, char**)+0x130>
c0024c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c06:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c0c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c16:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c26:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c30:	05 0c 01 00 00       	add    eax,0x10c
c0024c35:	83 ec 08             	sub    esp,0x8
c0024c38:	52                   	push   edx
c0024c39:	50                   	push   eax
c0024c3a:	e8 11 ba fd ff       	call   c0000650 <strcpy>
c0024c3f:	83 c4 10             	add    esp,0x10
c0024c42:	eb 64                	jmp    c0024ca8 <Process::Process(char const*, Process*, char**)+0x194>
c0024c44:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024c4c:	83 ec 0c             	sub    esp,0xc
c0024c4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024c53:	e8 83 17 ff ff       	call   c00163db <malloc>
c0024c58:	83 c4 10             	add    esp,0x10
c0024c5b:	89 c3                	mov    ebx,eax
c0024c5d:	83 ec 08             	sub    esp,0x8
c0024c60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c64:	53                   	push   ebx
c0024c65:	e8 0a 29 ff ff       	call   c0017574 <VgaText::VgaText(char const*)>
c0024c6a:	83 c4 10             	add    esp,0x10
c0024c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c71:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024c81:	83 ec 0c             	sub    esp,0xc
c0024c84:	50                   	push   eax
c0024c85:	e8 98 21 ff ff       	call   c0016e22 <addToTerminalCycle(VgaText*)>
c0024c8a:	83 c4 10             	add    esp,0x10
c0024c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c91:	05 0c 01 00 00       	add    eax,0x10c
c0024c96:	83 ec 08             	sub    esp,0x8
c0024c99:	68 7d 2d 03 c0       	push   0xc0032d7d
c0024c9e:	50                   	push   eax
c0024c9f:	e8 ac b9 fd ff       	call   c0000650 <strcpy>
c0024ca4:	83 c4 10             	add    esp,0x10
c0024ca7:	90                   	nop
c0024ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cac:	83 c0 0c             	add    eax,0xc
c0024caf:	83 ec 08             	sub    esp,0x8
c0024cb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cb6:	50                   	push   eax
c0024cb7:	e8 94 b9 fd ff       	call   c0000650 <strcpy>
c0024cbc:	83 c4 10             	add    esp,0x10
c0024cbf:	83 ec 08             	sub    esp,0x8
c0024cc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cca:	e8 d9 fd ff ff       	call   c0024aa8 <Process::addArgs(char**)>
c0024ccf:	83 c4 10             	add    esp,0x10
c0024cd2:	83 ec 08             	sub    esp,0x8
c0024cd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cdd:	e8 1e ed ff ff       	call   c0023a00 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024ce2:	83 c4 10             	add    esp,0x10
c0024ce5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ce9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024ced:	83 f0 01             	xor    eax,0x1
c0024cf0:	88 c2                	mov    dl,al
c0024cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cf6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024cfc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024d01:	83 ec 04             	sub    esp,0x4
c0024d04:	50                   	push   eax
c0024d05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d09:	68 d4 2d 03 c0       	push   0xc0032dd4
c0024d0e:	e8 ff 44 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0024d13:	83 c4 10             	add    esp,0x10
c0024d16:	90                   	nop
c0024d17:	83 c4 14             	add    esp,0x14
c0024d1a:	5b                   	pop    ebx
c0024d1b:	5e                   	pop    esi
c0024d1c:	c3                   	ret    
c0024d1d:	90                   	nop
c0024d1e:	66 90                	xchg   ax,ax

c0024d20 <Process::Process(bool, char const*, Process*, char**)>:
c0024d20:	56                   	push   esi
c0024d21:	53                   	push   ebx
c0024d22:	83 ec 24             	sub    esp,0x24
c0024d25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024d29:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d31:	05 0c 02 00 00       	add    eax,0x20c
c0024d36:	bb 07 00 00 00       	mov    ebx,0x7
c0024d3b:	89 c6                	mov    esi,eax
c0024d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0024d40:	85 db                	test   ebx,ebx
c0024d42:	78 14                	js     c0024d58 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024d44:	83 ec 0c             	sub    esp,0xc
c0024d47:	56                   	push   esi
c0024d48:	e8 bb a1 00 00       	call   c002ef08 <ThreadControlBlock::ThreadControlBlock()>
c0024d4d:	83 c4 10             	add    esp,0x10
c0024d50:	83 c6 5f             	add    esi,0x5f
c0024d53:	83 eb 01             	sub    ebx,0x1
c0024d56:	eb e8                	jmp    c0024d40 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d5c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d67:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024d6e:	83 ec 0c             	sub    esp,0xc
c0024d71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d75:	e8 fa b1 ff ff       	call   c001ff74 <KeNewProcessEnv(Process*)>
c0024d7a:	83 c4 10             	add    esp,0x10
c0024d7d:	89 c2                	mov    edx,eax
c0024d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d83:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024d89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d8d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024d96:	a1 80 43 03 c0       	mov    eax,ds:0xc0034380
c0024d9b:	8d 50 01             	lea    edx,[eax+0x1]
c0024d9e:	89 15 80 43 03 c0    	mov    DWORD PTR ds:0xc0034380,edx
c0024da4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024da8:	89 02                	mov    DWORD PTR [edx],eax
c0024daa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024db2:	83 ec 0c             	sub    esp,0xc
c0024db5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024db9:	e8 1d 16 ff ff       	call   c00163db <malloc>
c0024dbe:	83 c4 10             	add    esp,0x10
c0024dc1:	89 c3                	mov    ebx,eax
c0024dc3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024dc8:	83 ec 08             	sub    esp,0x8
c0024dcb:	50                   	push   eax
c0024dcc:	53                   	push   ebx
c0024dcd:	e8 88 3b ff ff       	call   c001895a <VAS::VAS(bool)>
c0024dd2:	83 c4 10             	add    esp,0x10
c0024dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dd9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024de3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024df5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024dfb:	e8 c7 bb ff ff       	call   c00209c7 <KeInitSignals()>
c0024e00:	89 c2                	mov    edx,eax
c0024e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e06:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024e0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e16:	85 c0                	test   eax,eax
c0024e18:	74 42                	je     c0024e5c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e1e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e24:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e2e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024e34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024e44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e48:	05 0c 01 00 00       	add    eax,0x10c
c0024e4d:	83 ec 08             	sub    esp,0x8
c0024e50:	52                   	push   edx
c0024e51:	50                   	push   eax
c0024e52:	e8 f9 b7 fd ff       	call   c0000650 <strcpy>
c0024e57:	83 c4 10             	add    esp,0x10
c0024e5a:	eb 64                	jmp    c0024ec0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024e5c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024e64:	83 ec 0c             	sub    esp,0xc
c0024e67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024e6b:	e8 6b 15 ff ff       	call   c00163db <malloc>
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	89 c3                	mov    ebx,eax
c0024e75:	83 ec 08             	sub    esp,0x8
c0024e78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024e7c:	53                   	push   ebx
c0024e7d:	e8 f2 26 ff ff       	call   c0017574 <VgaText::VgaText(char const*)>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e89:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024e99:	83 ec 0c             	sub    esp,0xc
c0024e9c:	50                   	push   eax
c0024e9d:	e8 80 1f ff ff       	call   c0016e22 <addToTerminalCycle(VgaText*)>
c0024ea2:	83 c4 10             	add    esp,0x10
c0024ea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ea9:	05 0c 01 00 00       	add    eax,0x10c
c0024eae:	83 ec 08             	sub    esp,0x8
c0024eb1:	68 7d 2d 03 c0       	push   0xc0032d7d
c0024eb6:	50                   	push   eax
c0024eb7:	e8 94 b7 fd ff       	call   c0000650 <strcpy>
c0024ebc:	83 c4 10             	add    esp,0x10
c0024ebf:	90                   	nop
c0024ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ec4:	83 c0 0c             	add    eax,0xc
c0024ec7:	83 ec 08             	sub    esp,0x8
c0024eca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024ece:	50                   	push   eax
c0024ecf:	e8 7c b7 fd ff       	call   c0000650 <strcpy>
c0024ed4:	83 c4 10             	add    esp,0x10
c0024ed7:	83 ec 08             	sub    esp,0x8
c0024eda:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024ede:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ee2:	e8 c1 fb ff ff       	call   c0024aa8 <Process::addArgs(char**)>
c0024ee7:	83 c4 10             	add    esp,0x10
c0024eea:	90                   	nop
c0024eeb:	83 c4 24             	add    esp,0x24
c0024eee:	5b                   	pop    ebx
c0024eef:	5e                   	pop    esi
c0024ef0:	c3                   	ret    
c0024ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0024ef4 <taskStartupFunction>:
c0024ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ef9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024efc:	c3                   	ret    
c0024efd:	8d 76 00             	lea    esi,[esi+0x0]

c0024f00 <KeDisablePreemption()>:
c0024f00:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024f05:	85 c0                	test   eax,eax
c0024f07:	75 13                	jne    c0024f1c <KeDisablePreemption()+0x1c>
c0024f09:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024f0f:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024f16:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024f1c:	83 c0 01             	add    eax,0x1
c0024f1f:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f24:	c3                   	ret    
c0024f25:	8d 76 00             	lea    esi,[esi+0x0]

c0024f28 <KeRestorePreemption()>:
c0024f28:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024f2d:	83 e8 01             	sub    eax,0x1
c0024f30:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f35:	75 0d                	jne    c0024f44 <KeRestorePreemption()+0x1c>
c0024f37:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0024f3c:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0024f41:	8d 76 00             	lea    esi,[esi+0x0]
c0024f44:	c3                   	ret    
c0024f45:	90                   	nop
c0024f46:	66 90                	xchg   ax,ax

c0024f48 <Process::createThread(void (*)(void*), void*, int)>:
c0024f48:	57                   	push   edi
c0024f49:	31 c9                	xor    ecx,ecx
c0024f4b:	56                   	push   esi
c0024f4c:	53                   	push   ebx
c0024f4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f51:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0024f58:	89 f2                	mov    edx,esi
c0024f5a:	66 90                	xchg   ax,ax
c0024f5c:	0f b7 c2             	movzx  eax,dx
c0024f5f:	80 e2 01             	and    dl,0x1
c0024f62:	74 14                	je     c0024f78 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0024f64:	d1 f8                	sar    eax,1
c0024f66:	83 c1 01             	add    ecx,0x1
c0024f69:	83 f9 10             	cmp    ecx,0x10
c0024f6c:	89 c2                	mov    edx,eax
c0024f6e:	75 ec                	jne    c0024f5c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0024f70:	31 db                	xor    ebx,ebx
c0024f72:	89 d8                	mov    eax,ebx
c0024f74:	5b                   	pop    ebx
c0024f75:	5e                   	pop    esi
c0024f76:	5f                   	pop    edi
c0024f77:	c3                   	ret    
c0024f78:	b8 01 00 00 00       	mov    eax,0x1
c0024f7d:	d3 e0                	shl    eax,cl
c0024f7f:	09 c6                	or     esi,eax
c0024f81:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0024f88:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0024f8b:	c1 e0 05             	shl    eax,0x5
c0024f8e:	29 c8                	sub    eax,ecx
c0024f90:	01 d8                	add    eax,ebx
c0024f92:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0024f99:	75 0d                	jne    c0024fa8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0024f9b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0024fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0024fa8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024fae:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0024fb1:	83 ec 0c             	sub    esp,0xc
c0024fb4:	c1 e6 05             	shl    esi,0x5
c0024fb7:	29 ce                	sub    esi,ecx
c0024fb9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0024fbc:	8d 04 33             	lea    eax,[ebx+esi*1]
c0024fbf:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0024fc5:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0024fcb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0024fd1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0024fd8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0024fde:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024fe2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0024fe8:	89 ca                	mov    edx,ecx
c0024fea:	f7 da                	neg    edx
c0024fec:	c1 e2 15             	shl    edx,0x15
c0024fef:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0024ff5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0024ffb:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024fff:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025009:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c002500f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025013:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025019:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025023:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c002502d:	68 00 01 00 00       	push   0x100
c0025032:	e8 a4 13 ff ff       	call   c00163db <malloc>
c0025037:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c002503a:	58                   	pop    eax
c002503b:	5a                   	pop    edx
c002503c:	53                   	push   ebx
c002503d:	68 ec 01 04 c0       	push   0xc00401ec
c0025042:	e8 59 9c 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025047:	83 c4 10             	add    esp,0x10
c002504a:	89 d8                	mov    eax,ebx
c002504c:	5b                   	pop    ebx
c002504d:	5e                   	pop    esi
c002504e:	5f                   	pop    edi
c002504f:	c3                   	ret    

c0025050 <Process::createUserThread()>:
c0025050:	83 ec 0c             	sub    esp,0xc
c0025053:	68 80 00 00 00       	push   0x80
c0025058:	6a 00                	push   0x0
c002505a:	68 a0 49 02 c0       	push   0xc00249a0
c002505f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025063:	50                   	push   eax
c0025064:	e8 df fe ff ff       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c0025069:	83 c4 1c             	add    esp,0x1c
c002506c:	c3                   	ret    
c002506d:	8d 76 00             	lea    esi,[esi+0x0]

c0025070 <setupMultitasking(void (*)())>:
c0025070:	56                   	push   esi
c0025071:	53                   	push   ebx
c0025072:	83 ec 04             	sub    esp,0x4
c0025075:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025079:	eb 11                	jmp    c002508c <setupMultitasking(void (*)())+0x1c>
c002507b:	90                   	nop
c002507c:	83 ec 0c             	sub    esp,0xc
c002507f:	68 ec 01 04 c0       	push   0xc00401ec
c0025084:	e8 5b 9b 00 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025089:	83 c4 10             	add    esp,0x10
c002508c:	83 ec 0c             	sub    esp,0xc
c002508f:	68 ec 01 04 c0       	push   0xc00401ec
c0025094:	e8 27 9b 00 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025099:	83 c4 10             	add    esp,0x10
c002509c:	84 c0                	test   al,al
c002509e:	74 dc                	je     c002507c <setupMultitasking(void (*)())+0xc>
c00250a0:	83 ec 0c             	sub    esp,0xc
c00250a3:	68 24 07 00 00       	push   0x724
c00250a8:	e8 2e 13 ff ff       	call   c00163db <malloc>
c00250ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00250b4:	6a 00                	push   0x0
c00250b6:	68 81 2d 03 c0       	push   0xc0032d81
c00250bb:	6a 01                	push   0x1
c00250bd:	50                   	push   eax
c00250be:	89 c3                	mov    ebx,eax
c00250c0:	e8 5b fc ff ff       	call   c0024d20 <Process::Process(bool, char const*, Process*, char**)>
c00250c5:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00250cb:	83 c4 14             	add    esp,0x14
c00250ce:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00250d4:	50                   	push   eax
c00250d5:	e8 9d 1f ff ff       	call   c0017077 <setActiveTerminal(VgaText*)>
c00250da:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00250e1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00250eb:	83 c8 01             	or     eax,0x1
c00250ee:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00250f5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00250fe:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025108:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c002510e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025118:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c002511e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025128:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0025132:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025138:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c002513e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025148:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0025152:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025159:	e8 7d 12 ff ff       	call   c00163db <malloc>
c002515e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025164:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c002516a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025170:	5a                   	pop    edx
c0025171:	59                   	pop    ecx
c0025172:	68 7d 2d 03 c0       	push   0xc0032d7d
c0025177:	50                   	push   eax
c0025178:	e8 d3 b4 fd ff       	call   c0000650 <strcpy>
c002517d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025184:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025188:	83 c4 14             	add    esp,0x14
c002518b:	5b                   	pop    ebx
c002518c:	5e                   	pop    esi
c002518d:	e9 d7 b0 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0025192:	66 90                	xchg   ax,ax

c0025194 <schedule()>:
c0025194:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c002519a:	85 d2                	test   edx,edx
c002519c:	74 0e                	je     c00251ac <schedule()+0x18>
c002519e:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00251a8:	c3                   	ret    
c00251a9:	8d 76 00             	lea    esi,[esi+0x0]
c00251ac:	53                   	push   ebx
c00251ad:	83 ec 14             	sub    esp,0x14
c00251b0:	68 ec 01 04 c0       	push   0xc00401ec
c00251b5:	e8 06 9a 00 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	84 c0                	test   al,al
c00251bf:	75 3f                	jne    c0025200 <schedule()+0x6c>
c00251c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00251c9:	83 fa 01             	cmp    edx,0x1
c00251cc:	74 3a                	je     c0025208 <schedule()+0x74>
c00251ce:	66 90                	xchg   ax,ax
c00251d0:	83 ec 0c             	sub    esp,0xc
c00251d3:	68 ec 01 04 c0       	push   0xc00401ec
c00251d8:	e8 ff 99 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00251dd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00251e4:	89 c3                	mov    ebx,eax
c00251e6:	e8 f9 99 00 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00251eb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00251f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251f5:	e8 fe f7 ff ff       	call   c00249f8 <switchToThread(ThreadControlBlock*)>
c00251fa:	83 c4 10             	add    esp,0x10
c00251fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025200:	83 c4 08             	add    esp,0x8
c0025203:	5b                   	pop    ebx
c0025204:	c3                   	ret    
c0025205:	8d 76 00             	lea    esi,[esi+0x0]
c0025208:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002520f:	83 ec 08             	sub    esp,0x8
c0025212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025217:	50                   	push   eax
c0025218:	68 ec 01 04 c0       	push   0xc00401ec
c002521d:	e8 7e 9a 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025222:	83 c4 10             	add    esp,0x10
c0025225:	eb a9                	jmp    c00251d0 <schedule()+0x3c>
c0025227:	90                   	nop

c0025228 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025228:	83 ec 0c             	sub    esp,0xc
c002522b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025234:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025237:	e8 58 ff ff ff       	call   c0025194 <schedule()>
c002523c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025241:	83 e8 01             	sub    eax,0x1
c0025244:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025249:	75 01                	jne    c002524c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c002524b:	fb                   	sti    
c002524c:	83 c4 0c             	add    esp,0xc
c002524f:	c3                   	ret    

c0025250 <blockTask(TaskState)>:
c0025250:	83 ec 0c             	sub    esp,0xc
c0025253:	fa                   	cli    
c0025254:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025259:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002525d:	83 c0 01             	add    eax,0x1
c0025260:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002526a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002526d:	e8 22 ff ff ff       	call   c0025194 <schedule()>
c0025272:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025277:	83 e8 01             	sub    eax,0x1
c002527a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002527f:	75 03                	jne    c0025284 <blockTask(TaskState)+0x34>
c0025281:	fb                   	sti    
c0025282:	66 90                	xchg   ax,ax
c0025284:	83 c4 0c             	add    esp,0xc
c0025287:	c3                   	ret    

c0025288 <waitTask(int, int*, int)>:
c0025288:	83 ec 18             	sub    esp,0x18
c002528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025294:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0025297:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002529b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252a0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00252a3:	6a 07                	push   0x7
c00252a5:	e8 a6 ff ff ff       	call   c0025250 <blockTask(TaskState)>
c00252aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252af:	83 c4 10             	add    esp,0x10
c00252b2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00252b5:	85 d2                	test   edx,edx
c00252b7:	74 0b                	je     c00252c4 <waitTask(int, int*, int)+0x3c>
c00252b9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00252bc:	89 02                	mov    DWORD PTR [edx],eax
c00252be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252c3:	90                   	nop
c00252c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00252c7:	83 c4 0c             	add    esp,0xc
c00252ca:	c3                   	ret    
c00252cb:	90                   	nop

c00252cc <milliTenthSleepUntil(unsigned int)>:
c00252cc:	83 ec 0c             	sub    esp,0xc
c00252cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d3:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00252d9:	76 05                	jbe    c00252e0 <milliTenthSleepUntil(unsigned int)+0x14>
c00252db:	90                   	nop
c00252dc:	83 c4 0c             	add    esp,0xc
c00252df:	c3                   	ret    
c00252e0:	fa                   	cli    
c00252e1:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00252e7:	83 ec 08             	sub    esp,0x8
c00252ea:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00252f0:	83 c2 01             	add    edx,0x1
c00252f3:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00252f9:	83 c1 01             	add    ecx,0x1
c00252fc:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025302:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025308:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c002530b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025310:	50                   	push   eax
c0025311:	68 e0 01 04 c0       	push   0xc00401e0
c0025316:	e8 85 99 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002531b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0025322:	e8 29 ff ff ff       	call   c0025250 <blockTask(TaskState)>
c0025327:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	83 e8 01             	sub    eax,0x1
c0025332:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025337:	85 c0                	test   eax,eax
c0025339:	75 09                	jne    c0025344 <milliTenthSleepUntil(unsigned int)+0x78>
c002533b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025340:	85 c0                	test   eax,eax
c0025342:	75 14                	jne    c0025358 <milliTenthSleepUntil(unsigned int)+0x8c>
c0025344:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025349:	83 e8 01             	sub    eax,0x1
c002534c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025351:	75 89                	jne    c00252dc <milliTenthSleepUntil(unsigned int)+0x10>
c0025353:	fb                   	sti    
c0025354:	83 c4 0c             	add    esp,0xc
c0025357:	c3                   	ret    
c0025358:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025362:	e8 2d fe ff ff       	call   c0025194 <schedule()>
c0025367:	eb db                	jmp    c0025344 <milliTenthSleepUntil(unsigned int)+0x78>
c0025369:	8d 76 00             	lea    esi,[esi+0x0]

c002536c <milliTenthSleep(unsigned int)>:
c002536c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025370:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025375:	01 c2                	add    edx,eax
c0025377:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002537b:	e9 4c ff ff ff       	jmp    c00252cc <milliTenthSleepUntil(unsigned int)>

c0025380 <sleep(unsigned int)>:
c0025380:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0025388:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002538c:	eb de                	jmp    c002536c <milliTenthSleep(unsigned int)>
c002538e:	66 90                	xchg   ax,ax

c0025390 <taskReturned>:
c0025390:	83 ec 18             	sub    esp,0x18
c0025393:	68 00 2e 03 c0       	push   0xc0032e00
c0025398:	e8 fd ad ff ff       	call   c002019a <KePanic(char const*)>
c002539d:	83 c4 10             	add    esp,0x10
c00253a0:	83 ec 0c             	sub    esp,0xc
c00253a3:	6a 02                	push   0x2
c00253a5:	e8 a6 fe ff ff       	call   c0025250 <blockTask(TaskState)>
c00253aa:	fa                   	cli    
c00253ab:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253b0:	83 c0 01             	add    eax,0x1
c00253b3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253b8:	e8 d7 fd ff ff       	call   c0025194 <schedule()>
c00253bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253c2:	83 c4 10             	add    esp,0x10
c00253c5:	83 e8 01             	sub    eax,0x1
c00253c8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253cd:	85 c0                	test   eax,eax
c00253cf:	75 cf                	jne    c00253a0 <taskReturned+0x10>
c00253d1:	fb                   	sti    
c00253d2:	eb cc                	jmp    c00253a0 <taskReturned+0x10>

c00253d4 <Thr::processFromPID(int)>:
c00253d4:	57                   	push   edi
c00253d5:	56                   	push   esi
c00253d6:	53                   	push   ebx
c00253d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00253db:	fa                   	cli    
c00253dc:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00253e2:	83 ec 0c             	sub    esp,0xc
c00253e5:	68 ec 01 04 c0       	push   0xc00401ec
c00253ea:	83 c1 01             	add    ecx,0x1
c00253ed:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00253f3:	e8 e4 97 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253f8:	83 c4 10             	add    esp,0x10
c00253fb:	89 c7                	mov    edi,eax
c00253fd:	eb 15                	jmp    c0025414 <Thr::processFromPID(int)+0x40>
c00253ff:	90                   	nop
c0025400:	83 ec 0c             	sub    esp,0xc
c0025403:	68 ec 01 04 c0       	push   0xc00401ec
c0025408:	e8 cf 97 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002540d:	83 c4 10             	add    esp,0x10
c0025410:	39 f8                	cmp    eax,edi
c0025412:	74 50                	je     c0025464 <Thr::processFromPID(int)+0x90>
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	68 ec 01 04 c0       	push   0xc00401ec
c002541c:	e8 bb 97 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025421:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025428:	89 c3                	mov    ebx,eax
c002542a:	e8 b5 97 00 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002542f:	58                   	pop    eax
c0025430:	5a                   	pop    edx
c0025431:	53                   	push   ebx
c0025432:	68 ec 01 04 c0       	push   0xc00401ec
c0025437:	e8 64 98 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002543c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002543f:	83 c4 10             	add    esp,0x10
c0025442:	39 30                	cmp    DWORD PTR [eax],esi
c0025444:	75 ba                	jne    c0025400 <Thr::processFromPID(int)+0x2c>
c0025446:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002544b:	83 e8 01             	sub    eax,0x1
c002544e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025453:	74 0b                	je     c0025460 <Thr::processFromPID(int)+0x8c>
c0025455:	8d 76 00             	lea    esi,[esi+0x0]
c0025458:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002545b:	90                   	nop
c002545c:	5b                   	pop    ebx
c002545d:	5e                   	pop    esi
c002545e:	5f                   	pop    edi
c002545f:	c3                   	ret    
c0025460:	fb                   	sti    
c0025461:	eb f5                	jmp    c0025458 <Thr::processFromPID(int)+0x84>
c0025463:	90                   	nop
c0025464:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025469:	8d 50 ff             	lea    edx,[eax-0x1]
c002546c:	31 c0                	xor    eax,eax
c002546e:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025474:	85 d2                	test   edx,edx
c0025476:	75 e4                	jne    c002545c <Thr::processFromPID(int)+0x88>
c0025478:	fb                   	sti    
c0025479:	5b                   	pop    ebx
c002547a:	5e                   	pop    esi
c002547b:	5f                   	pop    edi
c002547c:	c3                   	ret    
c002547d:	8d 76 00             	lea    esi,[esi+0x0]

c0025480 <unblockTask(ThreadControlBlock*)>:
c0025480:	53                   	push   ebx
c0025481:	83 ec 08             	sub    esp,0x8
c0025484:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025488:	fa                   	cli    
c0025489:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002548e:	83 c0 01             	add    eax,0x1
c0025491:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025496:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025499:	85 c0                	test   eax,eax
c002549b:	74 67                	je     c0025504 <unblockTask(ThreadControlBlock*)+0x84>
c002549d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00254a0:	83 f8 01             	cmp    eax,0x1
c00254a3:	74 37                	je     c00254dc <unblockTask(ThreadControlBlock*)+0x5c>
c00254a5:	83 ec 0c             	sub    esp,0xc
c00254a8:	68 ec 01 04 c0       	push   0xc00401ec
c00254ad:	e8 2a 97 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254b2:	83 c4 10             	add    esp,0x10
c00254b5:	85 c0                	test   eax,eax
c00254b7:	75 1b                	jne    c00254d4 <unblockTask(ThreadControlBlock*)+0x54>
c00254b9:	eb 5d                	jmp    c0025518 <unblockTask(ThreadControlBlock*)+0x98>
c00254bb:	90                   	nop
c00254bc:	83 ec 08             	sub    esp,0x8
c00254bf:	50                   	push   eax
c00254c0:	68 ec 01 04 c0       	push   0xc00401ec
c00254c5:	e8 32 9a 00 00       	call   c002eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00254ca:	83 c4 10             	add    esp,0x10
c00254cd:	85 c0                	test   eax,eax
c00254cf:	74 47                	je     c0025518 <unblockTask(ThreadControlBlock*)+0x98>
c00254d1:	8d 76 00             	lea    esi,[esi+0x0]
c00254d4:	39 c3                	cmp    ebx,eax
c00254d6:	75 e4                	jne    c00254bc <unblockTask(ThreadControlBlock*)+0x3c>
c00254d8:	eb 12                	jmp    c00254ec <unblockTask(ThreadControlBlock*)+0x6c>
c00254da:	66 90                	xchg   ax,ax
c00254dc:	83 ec 0c             	sub    esp,0xc
c00254df:	68 9f 2d 03 c0       	push   0xc0032d9f
c00254e4:	e8 29 3d ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00254e9:	83 c4 10             	add    esp,0x10
c00254ec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254f1:	83 e8 01             	sub    eax,0x1
c00254f4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254f9:	75 01                	jne    c00254fc <unblockTask(ThreadControlBlock*)+0x7c>
c00254fb:	fb                   	sti    
c00254fc:	83 c4 08             	add    esp,0x8
c00254ff:	5b                   	pop    ebx
c0025500:	c3                   	ret    
c0025501:	8d 76 00             	lea    esi,[esi+0x0]
c0025504:	83 ec 0c             	sub    esp,0xc
c0025507:	68 88 2d 03 c0       	push   0xc0032d88
c002550c:	e8 01 3d ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0025511:	83 c4 10             	add    esp,0x10
c0025514:	eb d6                	jmp    c00254ec <unblockTask(ThreadControlBlock*)+0x6c>
c0025516:	66 90                	xchg   ax,ax
c0025518:	83 ec 08             	sub    esp,0x8
c002551b:	53                   	push   ebx
c002551c:	68 ec 01 04 c0       	push   0xc00401ec
c0025521:	e8 7a 97 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025526:	83 c4 10             	add    esp,0x10
c0025529:	eb c1                	jmp    c00254ec <unblockTask(ThreadControlBlock*)+0x6c>
c002552b:	90                   	nop

c002552c <cleanupTerminatedTask(ThreadControlBlock*)>:
c002552c:	55                   	push   ebp
c002552d:	57                   	push   edi
c002552e:	56                   	push   esi
c002552f:	53                   	push   ebx
c0025530:	83 ec 1c             	sub    esp,0x1c
c0025533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025537:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002553a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025540:	85 ed                	test   ebp,ebp
c0025542:	7e 28                	jle    c002556c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025544:	31 f6                	xor    esi,esi
c0025546:	66 90                	xchg   ax,ax
c0025548:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c002554f:	83 ec 0c             	sub    esp,0xc
c0025552:	83 c6 01             	add    esi,0x1
c0025555:	57                   	push   edi
c0025556:	e8 90 0e ff ff       	call   c00163eb <free>
c002555b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002555e:	83 c4 10             	add    esp,0x10
c0025561:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025567:	7f df                	jg     c0025548 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025569:	8d 76 00             	lea    esi,[esi+0x0]
c002556c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025576:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002557b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002557e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025581:	d3 c0                	rol    eax,cl
c0025583:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002558a:	21 c8                	and    eax,ecx
c002558c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025593:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025596:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c002559e:	89 f7                	mov    edi,esi
c00255a0:	0f 85 72 01 00 00    	jne    c0025718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00255a6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00255ac:	85 ed                	test   ebp,ebp
c00255ae:	74 1c                	je     c00255cc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	55                   	push   ebp
c00255b4:	e8 d7 a8 ff ff       	call   c001fe90 <EnvVarContainer::~EnvVarContainer()>
c00255b9:	59                   	pop    ecx
c00255ba:	5e                   	pop    esi
c00255bb:	6a 0c                	push   0xc
c00255bd:	55                   	push   ebp
c00255be:	e8 51 3b ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c00255c3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00255c6:	83 c4 10             	add    esp,0x10
c00255c9:	89 f7                	mov    edi,esi
c00255cb:	90                   	nop
c00255cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255d2:	85 c0                	test   eax,eax
c00255d4:	0f 84 b2 00 00 00    	je     c002568c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255da:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00255dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255e1:	31 c9                	xor    ecx,ecx
c00255e3:	eb 17                	jmp    c00255fc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00255e5:	8d 76 00             	lea    esi,[esi+0x0]
c00255e8:	83 c1 01             	add    ecx,0x1
c00255eb:	83 f9 10             	cmp    ecx,0x10
c00255ee:	0f 84 98 00 00 00    	je     c002568c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255fa:	66 90                	xchg   ax,ax
c00255fc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025603:	d3 fa                	sar    edx,cl
c0025605:	80 e2 01             	and    dl,0x1
c0025608:	74 de                	je     c00255e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002560a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c002560d:	c1 e2 05             	shl    edx,0x5
c0025610:	29 ca                	sub    edx,ecx
c0025612:	01 d0                	add    eax,edx
c0025614:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c002561a:	83 fd 07             	cmp    ebp,0x7
c002561d:	75 c9                	jne    c00255e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002561f:	05 40 02 00 00       	add    eax,0x240
c0025624:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025627:	83 fd ff             	cmp    ebp,0xffffffff
c002562a:	0f 8c f0 00 00 00    	jl     c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025630:	0f 84 ae 01 00 00    	je     c00257e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025636:	85 ed                	test   ebp,ebp
c0025638:	0f 84 92 01 00 00    	je     c00257d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c002563e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025640:	75 a6                	jne    c00255e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025642:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025646:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002564c:	01 d0                	add    eax,edx
c002564e:	66 90                	xchg   ax,ax
c0025650:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025654:	83 ec 0c             	sub    esp,0xc
c0025657:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c002565d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025660:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025666:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c002566d:	50                   	push   eax
c002566e:	e8 0d fe ff ff       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c0025673:	83 c4 10             	add    esp,0x10
c0025676:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025679:	89 f7                	mov    edi,esi
c002567b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002567f:	83 c1 01             	add    ecx,0x1
c0025682:	83 f9 10             	cmp    ecx,0x10
c0025685:	0f 85 69 ff ff ff    	jne    c00255f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002568b:	90                   	nop
c002568c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025692:	85 c0                	test   eax,eax
c0025694:	74 62                	je     c00256f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025696:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c002569c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00256a2:	74 54                	je     c00256f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	68 ec 01 04 c0       	push   0xc00401ec
c00256ac:	e8 2b 95 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00256b1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00256b8:	89 c7                	mov    edi,eax
c00256ba:	e8 01 95 00 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00256bf:	83 c4 10             	add    esp,0x10
c00256c2:	84 c0                	test   al,al
c00256c4:	0f 84 ce 00 00 00    	je     c0025798 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00256ca:	66 90                	xchg   ax,ax
c00256cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256cf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00256d5:	85 d2                	test   edx,edx
c00256d7:	74 0f                	je     c00256e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00256d9:	8b 02                	mov    eax,DWORD PTR [edx]
c00256db:	83 ec 0c             	sub    esp,0xc
c00256de:	52                   	push   edx
c00256df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00256e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256e5:	83 c4 10             	add    esp,0x10
c00256e8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00256f2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00256f5:	8d 76 00             	lea    esi,[esi+0x0]
c00256f8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00256fe:	85 db                	test   ebx,ebx
c0025700:	74 16                	je     c0025718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025702:	83 ec 0c             	sub    esp,0xc
c0025705:	53                   	push   ebx
c0025706:	e8 8d 2d ff ff       	call   c0018498 <VAS::~VAS()>
c002570b:	58                   	pop    eax
c002570c:	5a                   	pop    edx
c002570d:	6a 14                	push   0x14
c002570f:	53                   	push   ebx
c0025710:	e8 ff 39 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c0025715:	83 c4 10             	add    esp,0x10
c0025718:	83 c4 1c             	add    esp,0x1c
c002571b:	5b                   	pop    ebx
c002571c:	5e                   	pop    esi
c002571d:	5f                   	pop    edi
c002571e:	5d                   	pop    ebp
c002571f:	c3                   	ret    
c0025720:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	68 34 2e 03 c0       	push   0xc0032e34
c002572c:	e8 69 aa ff ff       	call   c002019a <KePanic(char const*)>
c0025731:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025734:	83 c4 10             	add    esp,0x10
c0025737:	89 f7                	mov    edi,esi
c0025739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002573d:	e9 a6 fe ff ff       	jmp    c00255e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025742:	66 90                	xchg   ax,ax
c0025744:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002574a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025750:	75 1e                	jne    c0025770 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	68 9c 2e 03 c0       	push   0xc0032e9c
c002575a:	e8 b3 3a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002575f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025766:	e8 e5 fa ff ff       	call   c0025250 <blockTask(TaskState)>
c002576b:	83 c4 10             	add    esp,0x10
c002576e:	66 90                	xchg   ax,ax
c0025770:	83 ec 08             	sub    esp,0x8
c0025773:	56                   	push   esi
c0025774:	68 ec 01 04 c0       	push   0xc00401ec
c0025779:	e8 22 95 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002577e:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025785:	e8 52 94 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002578a:	83 c4 10             	add    esp,0x10
c002578d:	39 f8                	cmp    eax,edi
c002578f:	0f 84 37 ff ff ff    	je     c00256cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025795:	8d 76 00             	lea    esi,[esi+0x0]
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	68 ec 01 04 c0       	push   0xc00401ec
c00257a0:	e8 37 94 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257a5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257ac:	89 c6                	mov    esi,eax
c00257ae:	e8 31 94 00 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257b3:	83 c4 10             	add    esp,0x10
c00257b6:	39 f3                	cmp    ebx,esi
c00257b8:	74 b6                	je     c0025770 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257ba:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00257bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257c0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00257c6:	75 a8                	jne    c0025770 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257c8:	e9 77 ff ff ff       	jmp    c0025744 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00257cd:	8d 76 00             	lea    esi,[esi+0x0]
c00257d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257d4:	83 ec 0c             	sub    esp,0xc
c00257d7:	68 68 2e 03 c0       	push   0xc0032e68
c00257dc:	e9 4b ff ff ff       	jmp    c002572c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00257e1:	8d 76 00             	lea    esi,[esi+0x0]
c00257e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00257ea:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00257ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257f0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00257f6:	01 d7                	add    edi,edx
c00257f8:	89 f8                	mov    eax,edi
c00257fa:	e9 51 fe ff ff       	jmp    c0025650 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00257ff:	90                   	nop

c0025800 <cleanerTaskFunction(void*)>:
c0025800:	53                   	push   ebx
c0025801:	83 ec 08             	sub    esp,0x8
c0025804:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025809:	83 e8 01             	sub    eax,0x1
c002580c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025811:	75 01                	jne    c0025814 <cleanerTaskFunction(void*)+0x14>
c0025813:	fb                   	sti    
c0025814:	fa                   	cli    
c0025815:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002581a:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025821:	8d 50 01             	lea    edx,[eax+0x1]
c0025824:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002582a:	0f 84 c4 00 00 00    	je     c00258f4 <cleanerTaskFunction(void*)+0xf4>
c0025830:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025835:	85 c0                	test   eax,eax
c0025837:	75 03                	jne    c002583c <cleanerTaskFunction(void*)+0x3c>
c0025839:	fb                   	sti    
c002583a:	66 90                	xchg   ax,ax
c002583c:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025843:	fa                   	cli    
c0025844:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002584a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025850:	83 c2 01             	add    edx,0x1
c0025853:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025859:	83 c1 01             	add    ecx,0x1
c002585c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025862:	fa                   	cli    
c0025863:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025869:	83 c3 01             	add    ebx,0x1
c002586c:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025872:	eb 28                	jmp    c002589c <cleanerTaskFunction(void*)+0x9c>
c0025874:	83 ec 0c             	sub    esp,0xc
c0025877:	68 d4 01 04 c0       	push   0xc00401d4
c002587c:	e8 5b 93 00 00       	call   c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025881:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025888:	89 c3                	mov    ebx,eax
c002588a:	e8 55 93 00 00       	call   c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002588f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025892:	e8 95 fc ff ff       	call   c002552c <cleanupTerminatedTask(ThreadControlBlock*)>
c0025897:	83 c4 10             	add    esp,0x10
c002589a:	66 90                	xchg   ax,ax
c002589c:	83 ec 0c             	sub    esp,0xc
c002589f:	68 d4 01 04 c0       	push   0xc00401d4
c00258a4:	e8 17 93 00 00       	call   c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00258a9:	83 c4 10             	add    esp,0x10
c00258ac:	84 c0                	test   al,al
c00258ae:	74 c4                	je     c0025874 <cleanerTaskFunction(void*)+0x74>
c00258b0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258b5:	83 e8 01             	sub    eax,0x1
c00258b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258bd:	75 01                	jne    c00258c0 <cleanerTaskFunction(void*)+0xc0>
c00258bf:	fb                   	sti    
c00258c0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00258c5:	83 e8 01             	sub    eax,0x1
c00258c8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00258cd:	0f 85 31 ff ff ff    	jne    c0025804 <cleanerTaskFunction(void*)+0x4>
c00258d3:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00258d8:	85 c0                	test   eax,eax
c00258da:	0f 84 24 ff ff ff    	je     c0025804 <cleanerTaskFunction(void*)+0x4>
c00258e0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00258ea:	e8 a5 f8 ff ff       	call   c0025194 <schedule()>
c00258ef:	e9 10 ff ff ff       	jmp    c0025804 <cleanerTaskFunction(void*)+0x4>
c00258f4:	83 ec 0c             	sub    esp,0xc
c00258f7:	6a 02                	push   0x2
c00258f9:	e8 2a f9 ff ff       	call   c0025228 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00258fe:	83 c4 10             	add    esp,0x10
c0025901:	e9 36 ff ff ff       	jmp    c002583c <cleanerTaskFunction(void*)+0x3c>
c0025906:	66 90                	xchg   ax,ax

c0025908 <terminateTask(int)>:
c0025908:	83 ec 14             	sub    esp,0x14
c002590b:	fa                   	cli    
c002590c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025912:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025918:	83 c2 01             	add    edx,0x1
c002591b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025921:	83 c1 01             	add    ecx,0x1
c0025924:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002592a:	fa                   	cli    
c002592b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025930:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025934:	83 c0 01             	add    eax,0x1
c0025937:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002593c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025941:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025949:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002594c:	50                   	push   eax
c002594d:	68 d4 01 04 c0       	push   0xc00401d4
c0025952:	e8 49 93 00 00       	call   c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002595c:	83 c4 10             	add    esp,0x10
c002595f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025966:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c002596b:	85 c0                	test   eax,eax
c002596d:	74 65                	je     c00259d4 <terminateTask(int)+0xcc>
c002596f:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025976:	83 ec 0c             	sub    esp,0xc
c0025979:	50                   	push   eax
c002597a:	e8 01 fb ff ff       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c002597f:	83 c4 10             	add    esp,0x10
c0025982:	66 90                	xchg   ax,ax
c0025984:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025989:	83 e8 01             	sub    eax,0x1
c002598c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025991:	75 01                	jne    c0025994 <terminateTask(int)+0x8c>
c0025993:	fb                   	sti    
c0025994:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025999:	83 e8 01             	sub    eax,0x1
c002599c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00259a1:	75 09                	jne    c00259ac <terminateTask(int)+0xa4>
c00259a3:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c00259aa:	75 3c                	jne    c00259e8 <terminateTask(int)+0xe0>
c00259ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259b1:	83 e8 01             	sub    eax,0x1
c00259b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259b9:	75 01                	jne    c00259bc <terminateTask(int)+0xb4>
c00259bb:	fb                   	sti    
c00259bc:	fa                   	cli    
c00259bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259c2:	83 c0 01             	add    eax,0x1
c00259c5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259ca:	66 90                	xchg   ax,ax
c00259cc:	e8 c3 f7 ff ff       	call   c0025194 <schedule()>
c00259d1:	eb d9                	jmp    c00259ac <terminateTask(int)+0xa4>
c00259d3:	90                   	nop
c00259d4:	83 ec 0c             	sub    esp,0xc
c00259d7:	68 b6 2d 03 c0       	push   0xc0032db6
c00259dc:	e8 31 38 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00259e1:	83 c4 10             	add    esp,0x10
c00259e4:	eb 9e                	jmp    c0025984 <terminateTask(int)+0x7c>
c00259e6:	66 90                	xchg   ax,ax
c00259e8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259f2:	eb d8                	jmp    c00259cc <terminateTask(int)+0xc4>

c00259f4 <Thr::terminateFromIRQ(int)>:
c00259f4:	83 ec 18             	sub    esp,0x18
c00259f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259fb:	50                   	push   eax
c00259fc:	e8 07 ff ff ff       	call   c0025908 <terminateTask(int)>
c0025a01:	8d 76 00             	lea    esi,[esi+0x0]

c0025a04 <__static_initialization_and_destruction_0(int, int)>:
c0025a04:	83 ec 0c             	sub    esp,0xc
c0025a07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025a0c:	0f 85 8e 00 00 00    	jne    c0025aa0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025a1a:	0f 85 80 00 00 00    	jne    c0025aa0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a20:	83 ec 0c             	sub    esp,0xc
c0025a23:	68 ec 01 04 c0       	push   0xc00401ec
c0025a28:	e8 27 95 00 00       	call   c002ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a2d:	83 c4 10             	add    esp,0x10
c0025a30:	83 ec 04             	sub    esp,0x4
c0025a33:	68 78 3a 03 c0       	push   0xc0033a78
c0025a38:	68 ec 01 04 c0       	push   0xc00401ec
c0025a3d:	68 04 ef 02 c0       	push   0xc002ef04
c0025a42:	e8 7d 36 ff ff       	call   c00190c4 <__cxa_atexit>
c0025a47:	83 c4 10             	add    esp,0x10
c0025a4a:	83 ec 0c             	sub    esp,0xc
c0025a4d:	68 e0 01 04 c0       	push   0xc00401e0
c0025a52:	e8 fd 94 00 00       	call   c002ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a57:	83 c4 10             	add    esp,0x10
c0025a5a:	83 ec 04             	sub    esp,0x4
c0025a5d:	68 78 3a 03 c0       	push   0xc0033a78
c0025a62:	68 e0 01 04 c0       	push   0xc00401e0
c0025a67:	68 04 ef 02 c0       	push   0xc002ef04
c0025a6c:	e8 53 36 ff ff       	call   c00190c4 <__cxa_atexit>
c0025a71:	83 c4 10             	add    esp,0x10
c0025a74:	83 ec 0c             	sub    esp,0xc
c0025a77:	68 d4 01 04 c0       	push   0xc00401d4
c0025a7c:	e8 d3 94 00 00       	call   c002ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a81:	83 c4 10             	add    esp,0x10
c0025a84:	83 ec 04             	sub    esp,0x4
c0025a87:	68 78 3a 03 c0       	push   0xc0033a78
c0025a8c:	68 d4 01 04 c0       	push   0xc00401d4
c0025a91:	68 04 ef 02 c0       	push   0xc002ef04
c0025a96:	e8 29 36 ff ff       	call   c00190c4 <__cxa_atexit>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	66 90                	xchg   ax,ax
c0025aa0:	90                   	nop
c0025aa1:	83 c4 0c             	add    esp,0xc
c0025aa4:	c3                   	ret    
c0025aa5:	8d 76 00             	lea    esi,[esi+0x0]

c0025aa8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025aa8:	83 ec 0c             	sub    esp,0xc
c0025aab:	83 ec 08             	sub    esp,0x8
c0025aae:	68 ff ff 00 00       	push   0xffff
c0025ab3:	6a 01                	push   0x1
c0025ab5:	e8 4a ff ff ff       	call   c0025a04 <__static_initialization_and_destruction_0(int, int)>
c0025aba:	83 c4 10             	add    esp,0x10
c0025abd:	83 c4 0c             	add    esp,0xc
c0025ac0:	c3                   	ret    

c0025ac1 <Vm::inbv(unsigned short)>:
c0025ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ac5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025aca:	75 06                	jne    c0025ad2 <Vm::inbv(unsigned short)+0x11>
c0025acc:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025ad1:	c3                   	ret    
c0025ad2:	ec                   	in     al,dx
c0025ad3:	c3                   	ret    

c0025ad4 <Vm::outbv(unsigned short, unsigned char)>:
c0025ad4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025adc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025ae1:	75 25                	jne    c0025b08 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025ae3:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025ae9:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0025af2:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025af8:	83 fa 20             	cmp    edx,0x20
c0025afb:	75 0c                	jne    c0025b09 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025afd:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025b07:	c3                   	ret    
c0025b08:	ee                   	out    dx,al
c0025b09:	c3                   	ret    

c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>:
c0025b0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025b0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025b14:	c1 e0 04             	shl    eax,0x4
c0025b17:	01 d0                	add    eax,edx
c0025b19:	c3                   	ret    

c0025b1a <Vm::getSegment(unsigned int)>:
c0025b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b1e:	c1 e8 10             	shr    eax,0x10
c0025b21:	c3                   	ret    

c0025b22 <Vm::getOffset(unsigned int)>:
c0025b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b26:	c3                   	ret    

c0025b27 <Vm::mainloop2()>:
c0025b27:	83 ec 18             	sub    esp,0x18
c0025b2a:	fa                   	cli    
c0025b2b:	6a 02                	push   0x2
c0025b2d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b33:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025b3a:	e8 e9 f6 ff ff       	call   c0025228 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025b44:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025b48:	52                   	push   edx
c0025b49:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025b4d:	52                   	push   edx
c0025b4e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025b52:	52                   	push   edx
c0025b53:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025b57:	50                   	push   eax
c0025b58:	e8 b2 a6 fd ff       	call   c000020f <goToVM86>
c0025b5d:	83 c4 2c             	add    esp,0x2c
c0025b60:	c3                   	ret    

c0025b61 <Vm::mainVm8086Loop(void*)>:
c0025b61:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b66:	48                   	dec    eax
c0025b67:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b6c:	75 01                	jne    c0025b6f <Vm::mainVm8086Loop(void*)+0xe>
c0025b6e:	fb                   	sti    
c0025b6f:	eb b6                	jmp    c0025b27 <Vm::mainloop2()>

c0025b71 <Vm::mainloop3(unsigned long)>:
c0025b71:	83 ec 18             	sub    esp,0x18
c0025b74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b78:	fa                   	cli    
c0025b79:	6a 02                	push   0x2
c0025b7b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b81:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025b88:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025b8d:	e8 96 f6 ff ff       	call   c0025228 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b92:	83 c4 1c             	add    esp,0x1c
c0025b95:	eb 90                	jmp    c0025b27 <Vm::mainloop2()>

c0025b97 <Vm::initialise8086()>:
c0025b97:	83 ec 0c             	sub    esp,0xc
c0025b9a:	68 80 00 00 00       	push   0x80
c0025b9f:	6a 00                	push   0x0
c0025ba1:	68 61 5b 02 c0       	push   0xc0025b61
c0025ba6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025bac:	e8 97 f3 ff ff       	call   c0024f48 <Process::createThread(void (*)(void*), void*, int)>
c0025bb1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025bb8:	68 00 01 00 00       	push   0x100
c0025bbd:	6a 00                	push   0x0
c0025bbf:	6a 00                	push   0x0
c0025bc1:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025bc6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025bcb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025bd1:	e8 3a 2c ff ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025bd6:	83 c4 2c             	add    esp,0x2c
c0025bd9:	c3                   	ret    

c0025bda <Vm::finish8086()>:
c0025bda:	53                   	push   ebx
c0025bdb:	83 ec 08             	sub    esp,0x8
c0025bde:	fa                   	cli    
c0025bdf:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025be5:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025bec:	75 15                	jne    c0025c03 <Vm::finish8086()+0x29>
c0025bee:	e8 a1 f5 ff ff       	call   c0025194 <schedule()>
c0025bf3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025bf8:	48                   	dec    eax
c0025bf9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bfe:	75 de                	jne    c0025bde <Vm::finish8086()+0x4>
c0025c00:	fb                   	sti    
c0025c01:	eb db                	jmp    c0025bde <Vm::finish8086()+0x4>
c0025c03:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025c0a:	83 ec 0c             	sub    esp,0xc
c0025c0d:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025c13:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025c19:	e8 62 f8 ff ff       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c0025c1e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c23:	83 c4 10             	add    esp,0x10
c0025c26:	8d 50 ff             	lea    edx,[eax-0x1]
c0025c29:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c2f:	85 d2                	test   edx,edx
c0025c31:	75 01                	jne    c0025c34 <Vm::finish8086()+0x5a>
c0025c33:	fb                   	sti    
c0025c34:	83 c4 08             	add    esp,0x8
c0025c37:	89 d8                	mov    eax,ebx
c0025c39:	5b                   	pop    ebx
c0025c3a:	c3                   	ret    

c0025c3b <Vm::getOutput8086(unsigned char*)>:
c0025c3b:	57                   	push   edi
c0025c3c:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025c42:	56                   	push   esi
c0025c43:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025c48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025c4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c4e:	5e                   	pop    esi
c0025c4f:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025c54:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025c5e:	5f                   	pop    edi
c0025c5f:	c3                   	ret    

c0025c60 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025c60:	55                   	push   ebp
c0025c61:	57                   	push   edi
c0025c62:	56                   	push   esi
c0025c63:	53                   	push   ebx
c0025c64:	83 ec 0c             	sub    esp,0xc
c0025c67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025c6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c77:	fa                   	cli    
c0025c78:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c7e:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025c85:	75 15                	jne    c0025c9c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025c87:	e8 08 f5 ff ff       	call   c0025194 <schedule()>
c0025c8c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c91:	48                   	dec    eax
c0025c92:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c97:	75 de                	jne    c0025c77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c99:	fb                   	sti    
c0025c9a:	eb db                	jmp    c0025c77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c9c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025ca6:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025cab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025caf:	0f b7 ff             	movzx  edi,di
c0025cb2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025cb6:	0f b7 f6             	movzx  esi,si
c0025cb9:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025cbd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025cc1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025cc5:	50                   	push   eax
c0025cc6:	6a 20                	push   0x20
c0025cc8:	6a 00                	push   0x0
c0025cca:	68 40 02 04 c0       	push   0xc0040240
c0025ccf:	e8 1c a8 fd ff       	call   c00004f0 <memset>
c0025cd4:	5a                   	pop    edx
c0025cd5:	59                   	pop    ecx
c0025cd6:	57                   	push   edi
c0025cd7:	56                   	push   esi
c0025cd8:	e8 2d fe ff ff       	call   c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>
c0025cdd:	83 c4 10             	add    esp,0x10
c0025ce0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025ce4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025ce8:	89 c7                	mov    edi,eax
c0025cea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025cec:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025cf3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cf8:	48                   	dec    eax
c0025cf9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cfe:	75 01                	jne    c0025d01 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025d00:	fb                   	sti    
c0025d01:	83 ec 0c             	sub    esp,0xc
c0025d04:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d0a:	e8 71 f7 ff ff       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c0025d0f:	83 c4 1c             	add    esp,0x1c
c0025d12:	b0 01                	mov    al,0x1
c0025d14:	5b                   	pop    ebx
c0025d15:	5e                   	pop    esi
c0025d16:	5f                   	pop    edi
c0025d17:	5d                   	pop    ebp
c0025d18:	c3                   	ret    

c0025d19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d19:	55                   	push   ebp
c0025d1a:	57                   	push   edi
c0025d1b:	56                   	push   esi
c0025d1c:	53                   	push   ebx
c0025d1d:	83 ec 34             	sub    esp,0x34
c0025d20:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025d24:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025d28:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025d2c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025d30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d38:	68 c4 2e 03 c0       	push   0xc0032ec4
c0025d3d:	e8 d0 34 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0025d42:	83 c4 10             	add    esp,0x10
c0025d45:	fa                   	cli    
c0025d46:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025d4c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d52:	84 db                	test   bl,bl
c0025d54:	75 15                	jne    c0025d6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025d56:	e8 39 f4 ff ff       	call   c0025194 <schedule()>
c0025d5b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d60:	48                   	dec    eax
c0025d61:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d66:	75 dd                	jne    c0025d45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d68:	fb                   	sti    
c0025d69:	eb da                	jmp    c0025d45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d6b:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025d79:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d7e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025d82:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d86:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d8a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d8e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d92:	50                   	push   eax
c0025d93:	6a 20                	push   0x20
c0025d95:	6a 00                	push   0x0
c0025d97:	68 40 02 04 c0       	push   0xc0040240
c0025d9c:	e8 4f a7 fd ff       	call   c00004f0 <memset>
c0025da1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025da8:	e8 2e 06 ff ff       	call   c00163db <malloc>
c0025dad:	83 c4 0c             	add    esp,0xc
c0025db0:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025db6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025dba:	89 c5                	mov    ebp,eax
c0025dbc:	50                   	push   eax
c0025dbd:	e8 68 46 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c0025dc2:	83 c4 10             	add    esp,0x10
c0025dc5:	85 ed                	test   ebp,ebp
c0025dc7:	75 0a                	jne    c0025dd3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025dc9:	83 ec 0c             	sub    esp,0xc
c0025dcc:	68 e6 2e 03 c0       	push   0xc0032ee6
c0025dd1:	eb 2b                	jmp    c0025dfe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025dd3:	50                   	push   eax
c0025dd4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025dd8:	50                   	push   eax
c0025dd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025ddd:	50                   	push   eax
c0025dde:	55                   	push   ebp
c0025ddf:	e8 66 49 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c0025de4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025de8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025dec:	83 c4 10             	add    esp,0x10
c0025def:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025df4:	74 27                	je     c0025e1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025df6:	83 ec 0c             	sub    esp,0xc
c0025df9:	68 fa 2e 03 c0       	push   0xc0032efa
c0025dfe:	e8 97 a3 ff ff       	call   c002019a <KePanic(char const*)>
c0025e03:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e08:	83 c4 10             	add    esp,0x10
c0025e0b:	48                   	dec    eax
c0025e0c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e11:	85 c0                	test   eax,eax
c0025e13:	75 01                	jne    c0025e16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e15:	fb                   	sti    
c0025e16:	31 db                	xor    ebx,ebx
c0025e18:	e9 90 00 00 00       	jmp    c0025ead <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e1d:	51                   	push   ecx
c0025e1e:	51                   	push   ecx
c0025e1f:	6a 01                	push   0x1
c0025e21:	55                   	push   ebp
c0025e22:	e8 21 46 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c0025e27:	83 c4 10             	add    esp,0x10
c0025e2a:	85 c0                	test   eax,eax
c0025e2c:	74 26                	je     c0025e54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025e2e:	83 ec 0c             	sub    esp,0xc
c0025e31:	68 13 2f 03 c0       	push   0xc0032f13
c0025e36:	e8 5f a3 ff ff       	call   c002019a <KePanic(char const*)>
c0025e3b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e40:	83 c4 10             	add    esp,0x10
c0025e43:	48                   	dec    eax
c0025e44:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e49:	85 c0                	test   eax,eax
c0025e4b:	75 c9                	jne    c0025e16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e4d:	fb                   	sti    
c0025e4e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025e52:	eb 59                	jmp    c0025ead <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e54:	50                   	push   eax
c0025e55:	0f b7 ff             	movzx  edi,di
c0025e58:	50                   	push   eax
c0025e59:	0f b7 f6             	movzx  esi,si
c0025e5c:	57                   	push   edi
c0025e5d:	56                   	push   esi
c0025e5e:	e8 a7 fc ff ff       	call   c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>
c0025e63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0025e66:	5a                   	pop    edx
c0025e67:	8d 74 24 20          	lea    esi,[esp+0x20]
c0025e6b:	56                   	push   esi
c0025e6c:	50                   	push   eax
c0025e6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e75:	55                   	push   ebp
c0025e76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0025e79:	83 c4 14             	add    esp,0x14
c0025e7c:	55                   	push   ebp
c0025e7d:	e8 24 46 ff ff       	call   c001a4a6 <File::close()>
c0025e82:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e87:	83 c4 10             	add    esp,0x10
c0025e8a:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025e91:	48                   	dec    eax
c0025e92:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e97:	85 c0                	test   eax,eax
c0025e99:	75 01                	jne    c0025e9c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025e9b:	fb                   	sti    
c0025e9c:	83 ec 0c             	sub    esp,0xc
c0025e9f:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ea5:	e8 d6 f5 ff ff       	call   c0025480 <unblockTask(ThreadControlBlock*)>
c0025eaa:	83 c4 10             	add    esp,0x10
c0025ead:	83 c4 2c             	add    esp,0x2c
c0025eb0:	88 d8                	mov    al,bl
c0025eb2:	5b                   	pop    ebx
c0025eb3:	5e                   	pop    esi
c0025eb4:	5f                   	pop    edi
c0025eb5:	5d                   	pop    ebp
c0025eb6:	c3                   	ret    

c0025eb7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025eb7:	57                   	push   edi
c0025eb8:	56                   	push   esi
c0025eb9:	53                   	push   ebx
c0025eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ebe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025ec2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025ec6:	83 e8 06             	sub    eax,0x6
c0025ec9:	0f b7 c0             	movzx  eax,ax
c0025ecc:	50                   	push   eax
c0025ecd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025ed2:	50                   	push   eax
c0025ed3:	e8 32 fc ff ff       	call   c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>
c0025ed8:	5a                   	pop    edx
c0025ed9:	59                   	pop    ecx
c0025eda:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025edd:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025ee0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025ee3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ee9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025eec:	8d 51 02             	lea    edx,[ecx+0x2]
c0025eef:	66 89 10             	mov    WORD PTR [eax],dx
c0025ef2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025ef6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025efa:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025efe:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0025f01:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f05:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025f0b:	89 f1                	mov    ecx,esi
c0025f0d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025f11:	89 f2                	mov    edx,esi
c0025f13:	0f b6 d6             	movzx  edx,dh
c0025f16:	0f b6 f1             	movzx  esi,cl
c0025f19:	74 0a                	je     c0025f25 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0025f1b:	c1 e2 08             	shl    edx,0x8
c0025f1e:	09 f2                	or     edx,esi
c0025f20:	80 ce 02             	or     dh,0x2
c0025f23:	eb 08                	jmp    c0025f2d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0025f25:	c1 e2 08             	shl    edx,0x8
c0025f28:	09 f2                	or     edx,esi
c0025f2a:	80 e6 fd             	and    dh,0xfd
c0025f2d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f36:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025f3a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025f42:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025f45:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025f4d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025f50:	5b                   	pop    ebx
c0025f51:	5e                   	pop    esi
c0025f52:	5f                   	pop    edi
c0025f53:	c3                   	ret    

c0025f54 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025f54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f5e:	c1 e0 04             	shl    eax,0x4
c0025f61:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025f64:	c3                   	ret    

c0025f65 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025f65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f6f:	c1 e0 04             	shl    eax,0x4
c0025f72:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025f76:	c3                   	ret    

c0025f77 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025f77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f7c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f81:	c1 e0 04             	shl    eax,0x4
c0025f84:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025f87:	c3                   	ret    

c0025f88 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025f88:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f8d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f92:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025f96:	c1 e0 04             	shl    eax,0x4
c0025f99:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025f9c:	c3                   	ret    

c0025f9d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025f9d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025fa2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025fa7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fab:	c1 e0 04             	shl    eax,0x4
c0025fae:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025fb2:	c3                   	ret    

c0025fb3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025fb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025fb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025fbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fc1:	c1 e0 04             	shl    eax,0x4
c0025fc4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025fc7:	c3                   	ret    

c0025fc8 <Vm::faultHandler(regs*)>:
c0025fc8:	55                   	push   ebp
c0025fc9:	57                   	push   edi
c0025fca:	56                   	push   esi
c0025fcb:	53                   	push   ebx
c0025fcc:	83 ec 2c             	sub    esp,0x2c
c0025fcf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025fd3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025fd6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025fda:	0f b7 f8             	movzx  edi,ax
c0025fdd:	0f b7 c0             	movzx  eax,ax
c0025fe0:	52                   	push   edx
c0025fe1:	50                   	push   eax
c0025fe2:	e8 23 fb ff ff       	call   c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>
c0025fe7:	5a                   	pop    edx
c0025fe8:	59                   	pop    ecx
c0025fe9:	89 c1                	mov    ecx,eax
c0025feb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025fee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ff2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025ff7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025ffb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0025ffe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0026002:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0026007:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002600b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002600f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0026013:	e8 f2 fa ff ff       	call   c0025b0a <Vm::realToLinear(unsigned short, unsigned short)>
c0026018:	5e                   	pop    esi
c0026019:	be 06 00 00 00       	mov    esi,0x6
c002601e:	5d                   	pop    ebp
c002601f:	31 ed                	xor    ebp,ebp
c0026021:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026026:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026029:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c002602f:	0f 84 74 02 00 00    	je     c00262a9 <Vm::faultHandler(regs*)+0x2e1>
c0026035:	0f 87 94 00 00 00    	ja     c00260cf <Vm::faultHandler(regs*)+0x107>
c002603b:	83 fa 66             	cmp    edx,0x66
c002603e:	0f 84 e2 01 00 00    	je     c0026226 <Vm::faultHandler(regs*)+0x25e>
c0026044:	77 47                	ja     c002608d <Vm::faultHandler(regs*)+0xc5>
c0026046:	83 fa 36             	cmp    edx,0x36
c0026049:	0f 84 ca 01 00 00    	je     c0026219 <Vm::faultHandler(regs*)+0x251>
c002604f:	77 1a                	ja     c002606b <Vm::faultHandler(regs*)+0xa3>
c0026051:	83 fa 26             	cmp    edx,0x26
c0026054:	0f 84 98 01 00 00    	je     c00261f2 <Vm::faultHandler(regs*)+0x22a>
c002605a:	83 fa 2e             	cmp    edx,0x2e
c002605d:	0f 85 27 06 00 00    	jne    c002668a <Vm::faultHandler(regs*)+0x6c2>
c0026063:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026066:	31 f6                	xor    esi,esi
c0026068:	41                   	inc    ecx
c0026069:	eb bb                	jmp    c0026026 <Vm::faultHandler(regs*)+0x5e>
c002606b:	83 fa 64             	cmp    edx,0x64
c002606e:	0f 84 8b 01 00 00    	je     c00261ff <Vm::faultHandler(regs*)+0x237>
c0026074:	0f 87 92 01 00 00    	ja     c002620c <Vm::faultHandler(regs*)+0x244>
c002607a:	83 fa 3e             	cmp    edx,0x3e
c002607d:	0f 85 07 06 00 00    	jne    c002668a <Vm::faultHandler(regs*)+0x6c2>
c0026083:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026086:	be 01 00 00 00       	mov    esi,0x1
c002608b:	eb db                	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c002608d:	83 fa 6d             	cmp    edx,0x6d
c0026090:	0f 84 34 03 00 00    	je     c00263ca <Vm::faultHandler(regs*)+0x402>
c0026096:	77 17                	ja     c00260af <Vm::faultHandler(regs*)+0xe7>
c0026098:	83 fa 67             	cmp    edx,0x67
c002609b:	0f 84 92 01 00 00    	je     c0026233 <Vm::faultHandler(regs*)+0x26b>
c00260a1:	83 fa 6c             	cmp    edx,0x6c
c00260a4:	0f 84 b1 02 00 00    	je     c002635b <Vm::faultHandler(regs*)+0x393>
c00260aa:	e9 db 05 00 00       	jmp    c002668a <Vm::faultHandler(regs*)+0x6c2>
c00260af:	83 fa 6f             	cmp    edx,0x6f
c00260b2:	0f 84 40 04 00 00    	je     c00264f8 <Vm::faultHandler(regs*)+0x530>
c00260b8:	0f 82 a2 03 00 00    	jb     c0026460 <Vm::faultHandler(regs*)+0x498>
c00260be:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00260c4:	0f 84 76 01 00 00    	je     c0026240 <Vm::faultHandler(regs*)+0x278>
c00260ca:	e9 bb 05 00 00       	jmp    c002668a <Vm::faultHandler(regs*)+0x6c2>
c00260cf:	81 fa ec 00 00 00    	cmp    edx,0xec
c00260d5:	0f 84 57 05 00 00    	je     c0026632 <Vm::faultHandler(regs*)+0x66a>
c00260db:	0f 87 a9 00 00 00    	ja     c002618a <Vm::faultHandler(regs*)+0x1c2>
c00260e1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00260e7:	0f 84 d6 04 00 00    	je     c00265c3 <Vm::faultHandler(regs*)+0x5fb>
c00260ed:	77 78                	ja     c0026167 <Vm::faultHandler(regs*)+0x19f>
c00260ef:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00260f5:	0f 84 0e 02 00 00    	je     c0026309 <Vm::faultHandler(regs*)+0x341>
c00260fb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026101:	0f 85 83 05 00 00    	jne    c002668a <Vm::faultHandler(regs*)+0x6c2>
c0026107:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c002610b:	89 d1                	mov    ecx,edx
c002610d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026110:	c1 e1 08             	shl    ecx,0x8
c0026113:	09 ca                	or     edx,ecx
c0026115:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026118:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c002611c:	89 d1                	mov    ecx,edx
c002611e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0026122:	c1 e1 08             	shl    ecx,0x8
c0026125:	09 ca                	or     edx,ecx
c0026127:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c002612a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c002612e:	89 d1                	mov    ecx,edx
c0026130:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026134:	c1 e1 08             	shl    ecx,0x8
c0026137:	09 ca                	or     edx,ecx
c0026139:	81 ca 00 02 02 00    	or     edx,0x20200
c002613f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026142:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026146:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002614c:	d1 e8                	shr    eax,1
c002614e:	83 e0 01             	and    eax,0x1
c0026151:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026154:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026157:	83 c0 06             	add    eax,0x6
c002615a:	25 ff ff 00 00       	and    eax,0xffff
c002615f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026162:	e9 1f 05 00 00       	jmp    c0026686 <Vm::faultHandler(regs*)+0x6be>
c0026167:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002616d:	0f 84 95 04 00 00    	je     c0026608 <Vm::faultHandler(regs*)+0x640>
c0026173:	0f 82 66 04 00 00    	jb     c00265df <Vm::faultHandler(regs*)+0x617>
c0026179:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002617f:	0f 84 9a 04 00 00    	je     c002661f <Vm::faultHandler(regs*)+0x657>
c0026185:	e9 00 05 00 00       	jmp    c002668a <Vm::faultHandler(regs*)+0x6c2>
c002618a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026190:	0f 84 dd 04 00 00    	je     c0026673 <Vm::faultHandler(regs*)+0x6ab>
c0026196:	77 2e                	ja     c00261c6 <Vm::faultHandler(regs*)+0x1fe>
c0026198:	81 fa ed 00 00 00    	cmp    edx,0xed
c002619e:	0f 84 aa 04 00 00    	je     c002664e <Vm::faultHandler(regs*)+0x686>
c00261a4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00261aa:	0f 85 da 04 00 00    	jne    c002668a <Vm::faultHandler(regs*)+0x6c2>
c00261b0:	50                   	push   eax
c00261b1:	50                   	push   eax
c00261b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00261b6:	50                   	push   eax
c00261b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00261bb:	50                   	push   eax
c00261bc:	e8 13 f9 ff ff       	call   c0025ad4 <Vm::outbv(unsigned short, unsigned char)>
c00261c1:	e9 a5 04 00 00       	jmp    c002666b <Vm::faultHandler(regs*)+0x6a3>
c00261c6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00261cc:	0f 84 6d 01 00 00    	je     c002633f <Vm::faultHandler(regs*)+0x377>
c00261d2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00261d8:	0f 84 6f 01 00 00    	je     c002634d <Vm::faultHandler(regs*)+0x385>
c00261de:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00261e4:	0f 85 a0 04 00 00    	jne    c002668a <Vm::faultHandler(regs*)+0x6c2>
c00261ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261ed:	e9 76 fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c00261f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261f5:	be 02 00 00 00       	mov    esi,0x2
c00261fa:	e9 69 fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c00261ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026202:	be 03 00 00 00       	mov    esi,0x3
c0026207:	e9 5c fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c002620c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002620f:	be 04 00 00 00       	mov    esi,0x4
c0026214:	e9 4f fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c0026219:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002621c:	be 05 00 00 00       	mov    esi,0x5
c0026221:	e9 42 fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c0026226:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026229:	bd 01 00 00 00       	mov    ebp,0x1
c002622e:	e9 35 fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c0026233:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026236:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002623b:	e9 28 fe ff ff       	jmp    c0026068 <Vm::faultHandler(regs*)+0xa0>
c0026240:	83 e5 01             	and    ebp,0x1
c0026243:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026246:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002624a:	74 30                	je     c002627c <Vm::faultHandler(regs*)+0x2b4>
c002624c:	83 e9 04             	sub    ecx,0x4
c002624f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026255:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002625b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002625e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026261:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026267:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002626b:	0f 84 12 04 00 00    	je     c0026683 <Vm::faultHandler(regs*)+0x6bb>
c0026271:	80 ce 02             	or     dh,0x2
c0026274:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026277:	e9 07 04 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c002627c:	83 e9 02             	sub    ecx,0x2
c002627f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026285:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026288:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002628c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026292:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026296:	74 05                	je     c002629d <Vm::faultHandler(regs*)+0x2d5>
c0026298:	80 ce 02             	or     dh,0x2
c002629b:	eb 03                	jmp    c00262a0 <Vm::faultHandler(regs*)+0x2d8>
c002629d:	80 e6 fd             	and    dh,0xfd
c00262a0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00262a4:	e9 da 03 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c00262a9:	83 e5 01             	and    ebp,0x1
c00262ac:	74 2a                	je     c00262d8 <Vm::faultHandler(regs*)+0x310>
c00262ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00262b0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00262b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00262bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262c7:	c1 e8 09             	shr    eax,0x9
c00262ca:	83 e0 01             	and    eax,0x1
c00262cd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262d3:	83 c0 04             	add    eax,0x4
c00262d6:	eb 24                	jmp    c00262fc <Vm::faultHandler(regs*)+0x334>
c00262d8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00262db:	81 ca 00 02 02 00    	or     edx,0x20200
c00262e1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262e4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00262e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262ed:	c1 e8 09             	shr    eax,0x9
c00262f0:	83 e0 01             	and    eax,0x1
c00262f3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262f6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262f9:	83 c0 02             	add    eax,0x2
c00262fc:	25 ff ff 00 00       	and    eax,0xffff
c0026301:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026304:	e9 7a 03 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c0026309:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002630d:	3d ee 00 00 00       	cmp    eax,0xee
c0026312:	75 10                	jne    c0026324 <Vm::faultHandler(regs*)+0x35c>
c0026314:	83 ec 0c             	sub    esp,0xc
c0026317:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c002631a:	e8 52 f8 ff ff       	call   c0025b71 <Vm::mainloop3(unsigned long)>
c002631f:	e9 4a 03 00 00       	jmp    c002666e <Vm::faultHandler(regs*)+0x6a6>
c0026324:	83 ec 0c             	sub    esp,0xc
c0026327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002632b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002632f:	51                   	push   ecx
c0026330:	50                   	push   eax
c0026331:	53                   	push   ebx
c0026332:	e8 80 fb ff ff       	call   c0025eb7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026337:	83 c4 20             	add    esp,0x20
c002633a:	e9 47 03 00 00       	jmp    c0026686 <Vm::faultHandler(regs*)+0x6be>
c002633f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026344:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026348:	e9 36 03 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c002634d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026352:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026356:	e9 28 03 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c002635b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026360:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026363:	74 2b                	je     c0026390 <Vm::faultHandler(regs*)+0x3c8>
c0026365:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002636c:	76 22                	jbe    c0026390 <Vm::faultHandler(regs*)+0x3c8>
c002636e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026372:	50                   	push   eax
c0026373:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026377:	50                   	push   eax
c0026378:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002637c:	50                   	push   eax
c002637d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026381:	50                   	push   eax
c0026382:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026386:	50                   	push   eax
c0026387:	6a 6c                	push   0x6c
c0026389:	6a 6c                	push   0x6c
c002638b:	e9 c0 01 00 00       	jmp    c0026550 <Vm::faultHandler(regs*)+0x588>
c0026390:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026394:	83 ec 0c             	sub    esp,0xc
c0026397:	0f b7 f6             	movzx  esi,si
c002639a:	50                   	push   eax
c002639b:	e8 21 f7 ff ff       	call   c0025ac1 <Vm::inbv(unsigned short)>
c00263a0:	83 c4 0c             	add    esp,0xc
c00263a3:	0f b6 c0             	movzx  eax,al
c00263a6:	50                   	push   eax
c00263a7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00263ab:	50                   	push   eax
c00263ac:	56                   	push   esi
c00263ad:	e8 d6 fb ff ff       	call   c0025f88 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00263b2:	83 c4 10             	add    esp,0x10
c00263b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263b8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00263bc:	74 03                	je     c00263c1 <Vm::faultHandler(regs*)+0x3f9>
c00263be:	48                   	dec    eax
c00263bf:	eb 01                	jmp    c00263c2 <Vm::faultHandler(regs*)+0x3fa>
c00263c1:	40                   	inc    eax
c00263c2:	0f b7 c0             	movzx  eax,ax
c00263c5:	e9 8e 00 00 00       	jmp    c0026458 <Vm::faultHandler(regs*)+0x490>
c00263ca:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00263cf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00263d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263d5:	74 29                	je     c0026400 <Vm::faultHandler(regs*)+0x438>
c00263d7:	3d ff ff 00 00       	cmp    eax,0xffff
c00263dc:	76 22                	jbe    c0026400 <Vm::faultHandler(regs*)+0x438>
c00263de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00263e2:	50                   	push   eax
c00263e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00263e7:	50                   	push   eax
c00263e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00263ec:	50                   	push   eax
c00263ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00263f1:	50                   	push   eax
c00263f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263f6:	50                   	push   eax
c00263f7:	6a 6d                	push   0x6d
c00263f9:	6a 6d                	push   0x6d
c00263fb:	e9 50 01 00 00       	jmp    c0026550 <Vm::faultHandler(regs*)+0x588>
c0026400:	83 e5 01             	and    ebp,0x1
c0026403:	0f b7 c8             	movzx  ecx,ax
c0026406:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026409:	0f b7 f6             	movzx  esi,si
c002640c:	74 1e                	je     c002642c <Vm::faultHandler(regs*)+0x464>
c002640e:	ed                   	in     eax,dx
c002640f:	55                   	push   ebp
c0026410:	50                   	push   eax
c0026411:	51                   	push   ecx
c0026412:	56                   	push   esi
c0026413:	e8 9b fb ff ff       	call   c0025fb3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026418:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002641b:	83 c4 10             	add    esp,0x10
c002641e:	8d 50 04             	lea    edx,[eax+0x4]
c0026421:	83 e8 04             	sub    eax,0x4
c0026424:	81 e2 ff ff 00 00    	and    edx,0xffff
c002642a:	eb 20                	jmp    c002644c <Vm::faultHandler(regs*)+0x484>
c002642c:	66 ed                	in     ax,dx
c002642e:	57                   	push   edi
c002642f:	0f b7 c0             	movzx  eax,ax
c0026432:	50                   	push   eax
c0026433:	51                   	push   ecx
c0026434:	56                   	push   esi
c0026435:	e8 63 fb ff ff       	call   c0025f9d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c002643a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002643d:	83 c4 10             	add    esp,0x10
c0026440:	8d 50 02             	lea    edx,[eax+0x2]
c0026443:	83 e8 02             	sub    eax,0x2
c0026446:	81 e2 ff ff 00 00    	and    edx,0xffff
c002644c:	25 ff ff 00 00       	and    eax,0xffff
c0026451:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026455:	0f 44 c2             	cmove  eax,edx
c0026458:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c002645b:	e9 23 02 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c0026460:	8d 46 ff             	lea    eax,[esi-0x1]
c0026463:	0f b6 f0             	movzx  esi,al
c0026466:	83 fe 05             	cmp    esi,0x5
c0026469:	77 23                	ja     c002648e <Vm::faultHandler(regs*)+0x4c6>
c002646b:	ff 24 b5 88 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd078]
c0026472:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026477:	eb 15                	jmp    c002648e <Vm::faultHandler(regs*)+0x4c6>
c0026479:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002647d:	eb 0f                	jmp    c002648e <Vm::faultHandler(regs*)+0x4c6>
c002647f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026483:	eb 09                	jmp    c002648e <Vm::faultHandler(regs*)+0x4c6>
c0026485:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026489:	eb 03                	jmp    c002648e <Vm::faultHandler(regs*)+0x4c6>
c002648b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002648e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026493:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026496:	74 29                	je     c00264c1 <Vm::faultHandler(regs*)+0x4f9>
c0026498:	3d ff ff 00 00       	cmp    eax,0xffff
c002649d:	76 22                	jbe    c00264c1 <Vm::faultHandler(regs*)+0x4f9>
c002649f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264a3:	50                   	push   eax
c00264a4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264a8:	50                   	push   eax
c00264a9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264ad:	50                   	push   eax
c00264ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264b2:	50                   	push   eax
c00264b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264b7:	50                   	push   eax
c00264b8:	6a 6e                	push   0x6e
c00264ba:	6a 6e                	push   0x6e
c00264bc:	e9 8f 00 00 00       	jmp    c0026550 <Vm::faultHandler(regs*)+0x588>
c00264c1:	52                   	push   edx
c00264c2:	0f b7 c0             	movzx  eax,ax
c00264c5:	52                   	push   edx
c00264c6:	50                   	push   eax
c00264c7:	57                   	push   edi
c00264c8:	e8 87 fa ff ff       	call   c0025f54 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00264cd:	59                   	pop    ecx
c00264ce:	5e                   	pop    esi
c00264cf:	0f b6 c0             	movzx  eax,al
c00264d2:	50                   	push   eax
c00264d3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264d7:	50                   	push   eax
c00264d8:	e8 f7 f5 ff ff       	call   c0025ad4 <Vm::outbv(unsigned short, unsigned char)>
c00264dd:	83 c4 10             	add    esp,0x10
c00264e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00264e3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264e7:	74 03                	je     c00264ec <Vm::faultHandler(regs*)+0x524>
c00264e9:	48                   	dec    eax
c00264ea:	eb 01                	jmp    c00264ed <Vm::faultHandler(regs*)+0x525>
c00264ec:	40                   	inc    eax
c00264ed:	0f b7 c0             	movzx  eax,ax
c00264f0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00264f3:	e9 8b 01 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c00264f8:	8d 46 ff             	lea    eax,[esi-0x1]
c00264fb:	0f b6 f0             	movzx  esi,al
c00264fe:	83 fe 05             	cmp    esi,0x5
c0026501:	77 1e                	ja     c0026521 <Vm::faultHandler(regs*)+0x559>
c0026503:	ff 24 b5 a0 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd060]
c002650a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002650e:	eb 11                	jmp    c0026521 <Vm::faultHandler(regs*)+0x559>
c0026510:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026513:	eb 0c                	jmp    c0026521 <Vm::faultHandler(regs*)+0x559>
c0026515:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026518:	eb 07                	jmp    c0026521 <Vm::faultHandler(regs*)+0x559>
c002651a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c002651d:	eb 02                	jmp    c0026521 <Vm::faultHandler(regs*)+0x559>
c002651f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026521:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026526:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026529:	74 37                	je     c0026562 <Vm::faultHandler(regs*)+0x59a>
c002652b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026531:	76 2f                	jbe    c0026562 <Vm::faultHandler(regs*)+0x59a>
c0026533:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026537:	50                   	push   eax
c0026538:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002653c:	50                   	push   eax
c002653d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026541:	50                   	push   eax
c0026542:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026546:	50                   	push   eax
c0026547:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002654b:	50                   	push   eax
c002654c:	6a 6f                	push   0x6f
c002654e:	6a 6f                	push   0x6f
c0026550:	68 2c 2f 03 c0       	push   0xc0032f2c
c0026555:	e8 b8 2c ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002655a:	83 c4 20             	add    esp,0x20
c002655d:	e9 86 01 00 00       	jmp    c00266e8 <Vm::faultHandler(regs*)+0x720>
c0026562:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026565:	0f b7 d7             	movzx  edx,di
c0026568:	0f b7 c6             	movzx  eax,si
c002656b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c002656e:	81 e1 00 04 00 00    	and    ecx,0x400
c0026574:	83 e5 01             	and    ebp,0x1
c0026577:	74 1c                	je     c0026595 <Vm::faultHandler(regs*)+0x5cd>
c0026579:	55                   	push   ebp
c002657a:	55                   	push   ebp
c002657b:	50                   	push   eax
c002657c:	52                   	push   edx
c002657d:	e8 f5 f9 ff ff       	call   c0025f77 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026582:	83 c4 10             	add    esp,0x10
c0026585:	89 fa                	mov    edx,edi
c0026587:	ef                   	out    dx,eax
c0026588:	8d 46 04             	lea    eax,[esi+0x4]
c002658b:	83 ee 04             	sub    esi,0x4
c002658e:	25 ff ff 00 00       	and    eax,0xffff
c0026593:	eb 1b                	jmp    c00265b0 <Vm::faultHandler(regs*)+0x5e8>
c0026595:	55                   	push   ebp
c0026596:	55                   	push   ebp
c0026597:	50                   	push   eax
c0026598:	52                   	push   edx
c0026599:	e8 c7 f9 ff ff       	call   c0025f65 <Vm::readWordFromReal(unsigned short, unsigned short)>
c002659e:	83 c4 10             	add    esp,0x10
c00265a1:	89 fa                	mov    edx,edi
c00265a3:	66 ef                	out    dx,ax
c00265a5:	8d 46 02             	lea    eax,[esi+0x2]
c00265a8:	83 ee 02             	sub    esi,0x2
c00265ab:	25 ff ff 00 00       	and    eax,0xffff
c00265b0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00265b6:	85 c9                	test   ecx,ecx
c00265b8:	0f 44 f0             	cmove  esi,eax
c00265bb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00265be:	e9 c0 00 00 00       	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c00265c3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00265ca:	83 ec 0c             	sub    esp,0xc
c00265cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265d1:	50                   	push   eax
c00265d2:	e8 ea f4 ff ff       	call   c0025ac1 <Vm::inbv(unsigned short)>
c00265d7:	0f b6 c0             	movzx  eax,al
c00265da:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00265dd:	eb 3a                	jmp    c0026619 <Vm::faultHandler(regs*)+0x651>
c00265df:	83 e5 01             	and    ebp,0x1
c00265e2:	74 07                	je     c00265eb <Vm::faultHandler(regs*)+0x623>
c00265e4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265e8:	ed                   	in     eax,dx
c00265e9:	eb 14                	jmp    c00265ff <Vm::faultHandler(regs*)+0x637>
c00265eb:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00265ee:	66 31 f6             	xor    si,si
c00265f1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00265f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265f8:	66 ed                	in     ax,dx
c00265fa:	0f b7 c0             	movzx  eax,ax
c00265fd:	09 f0                	or     eax,esi
c00265ff:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026602:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026606:	eb 7e                	jmp    c0026686 <Vm::faultHandler(regs*)+0x6be>
c0026608:	52                   	push   edx
c0026609:	52                   	push   edx
c002660a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002660e:	50                   	push   eax
c002660f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026613:	50                   	push   eax
c0026614:	e8 bb f4 ff ff       	call   c0025ad4 <Vm::outbv(unsigned short, unsigned char)>
c0026619:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002661d:	eb 4f                	jmp    c002666e <Vm::faultHandler(regs*)+0x6a6>
c002661f:	83 e5 01             	and    ebp,0x1
c0026622:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026625:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026629:	74 03                	je     c002662e <Vm::faultHandler(regs*)+0x666>
c002662b:	ef                   	out    dx,eax
c002662c:	eb d4                	jmp    c0026602 <Vm::faultHandler(regs*)+0x63a>
c002662e:	66 ef                	out    dx,ax
c0026630:	eb d0                	jmp    c0026602 <Vm::faultHandler(regs*)+0x63a>
c0026632:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026636:	83 ec 0c             	sub    esp,0xc
c0026639:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026640:	50                   	push   eax
c0026641:	e8 7b f4 ff ff       	call   c0025ac1 <Vm::inbv(unsigned short)>
c0026646:	0f b6 c0             	movzx  eax,al
c0026649:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002664c:	eb 1d                	jmp    c002666b <Vm::faultHandler(regs*)+0x6a3>
c002664e:	83 e5 01             	and    ebp,0x1
c0026651:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026654:	74 03                	je     c0026659 <Vm::faultHandler(regs*)+0x691>
c0026656:	ed                   	in     eax,dx
c0026657:	eb 0d                	jmp    c0026666 <Vm::faultHandler(regs*)+0x69e>
c0026659:	66 ed                	in     ax,dx
c002665b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c002665e:	0f b7 c0             	movzx  eax,ax
c0026661:	66 31 d2             	xor    dx,dx
c0026664:	09 d0                	or     eax,edx
c0026666:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026669:	eb 18                	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c002666b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002666e:	83 c4 10             	add    esp,0x10
c0026671:	eb 13                	jmp    c0026686 <Vm::faultHandler(regs*)+0x6be>
c0026673:	83 e5 01             	and    ebp,0x1
c0026676:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026679:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002667c:	74 03                	je     c0026681 <Vm::faultHandler(regs*)+0x6b9>
c002667e:	ef                   	out    dx,eax
c002667f:	eb 02                	jmp    c0026683 <Vm::faultHandler(regs*)+0x6bb>
c0026681:	66 ef                	out    dx,ax
c0026683:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026686:	b0 01                	mov    al,0x1
c0026688:	eb 60                	jmp    c00266ea <Vm::faultHandler(regs*)+0x722>
c002668a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002668e:	50                   	push   eax
c002668f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026693:	50                   	push   eax
c0026694:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026698:	50                   	push   eax
c0026699:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002669d:	50                   	push   eax
c002669e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266a2:	50                   	push   eax
c00266a3:	52                   	push   edx
c00266a4:	52                   	push   edx
c00266a5:	68 59 2f 03 c0       	push   0xc0032f59
c00266aa:	e8 63 2b ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00266af:	83 c4 20             	add    esp,0x20
c00266b2:	83 ec 0c             	sub    esp,0xc
c00266b5:	6a 60                	push   0x60
c00266b7:	e8 05 f4 ff ff       	call   c0025ac1 <Vm::inbv(unsigned short)>
c00266bc:	83 c4 10             	add    esp,0x10
c00266bf:	0f b6 d0             	movzx  edx,al
c00266c2:	83 fa 1c             	cmp    edx,0x1c
c00266c5:	74 05                	je     c00266cc <Vm::faultHandler(regs*)+0x704>
c00266c7:	83 fa 5a             	cmp    edx,0x5a
c00266ca:	75 e6                	jne    c00266b2 <Vm::faultHandler(regs*)+0x6ea>
c00266cc:	0f b6 c0             	movzx  eax,al
c00266cf:	83 f8 1c             	cmp    eax,0x1c
c00266d2:	74 05                	je     c00266d9 <Vm::faultHandler(regs*)+0x711>
c00266d4:	83 f8 5a             	cmp    eax,0x5a
c00266d7:	75 0f                	jne    c00266e8 <Vm::faultHandler(regs*)+0x720>
c00266d9:	83 ec 0c             	sub    esp,0xc
c00266dc:	6a 60                	push   0x60
c00266de:	e8 de f3 ff ff       	call   c0025ac1 <Vm::inbv(unsigned short)>
c00266e3:	83 c4 10             	add    esp,0x10
c00266e6:	eb e4                	jmp    c00266cc <Vm::faultHandler(regs*)+0x704>
c00266e8:	31 c0                	xor    eax,eax
c00266ea:	83 c4 2c             	add    esp,0x2c
c00266ed:	5b                   	pop    ebx
c00266ee:	5e                   	pop    esi
c00266ef:	5f                   	pop    edi
c00266f0:	5d                   	pop    ebp
c00266f1:	c3                   	ret    

c00266f2 <noCopro(unsigned long)>:
c00266f2:	c3                   	ret    

c00266f3 <nmiHandler(regs*, void*)>:
c00266f3:	83 ec 0c             	sub    esp,0xc
c00266f6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00266fb:	83 ec 0c             	sub    esp,0xc
c00266fe:	50                   	push   eax
c00266ff:	e8 dc f4 fe ff       	call   c0015be0 <Computer::handleNMI()>
c0026704:	83 c4 10             	add    esp,0x10
c0026707:	90                   	nop
c0026708:	83 c4 0c             	add    esp,0xc
c002670b:	c3                   	ret    

c002670c <doubleFault(regs*, void*)>:
c002670c:	55                   	push   ebp
c002670d:	89 e5                	mov    ebp,esp
c002670f:	83 ec 08             	sub    esp,0x8
c0026712:	83 ec 0c             	sub    esp,0xc
c0026715:	68 b8 2f 03 c0       	push   0xc0032fb8
c002671a:	e8 7b 9a ff ff       	call   c002019a <KePanic(char const*)>
c002671f:	83 c4 10             	add    esp,0x10
c0026722:	90                   	nop
c0026723:	c9                   	leave  
c0026724:	c3                   	ret    

c0026725 <displayDebugInfo(regs*)>:
c0026725:	83 ec 1c             	sub    esp,0x1c
c0026728:	0f 20 c0             	mov    eax,cr0
c002672b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002672f:	0f 20 d0             	mov    eax,cr2
c0026732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026736:	0f 20 d8             	mov    eax,cr3
c0026739:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002673d:	0f 20 e0             	mov    eax,cr4
c0026740:	89 04 24             	mov    DWORD PTR [esp],eax
c0026743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026747:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002674a:	83 ec 08             	sub    esp,0x8
c002674d:	50                   	push   eax
c002674e:	68 d4 2f 03 c0       	push   0xc0032fd4
c0026753:	e8 ba 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026758:	83 c4 10             	add    esp,0x10
c002675b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002675f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026762:	83 ec 08             	sub    esp,0x8
c0026765:	50                   	push   eax
c0026766:	68 c5 2f 03 c0       	push   0xc0032fc5
c002676b:	e8 a2 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026770:	83 c4 10             	add    esp,0x10
c0026773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026777:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c002677a:	83 ec 08             	sub    esp,0x8
c002677d:	50                   	push   eax
c002677e:	68 d0 2f 03 c0       	push   0xc0032fd0
c0026783:	e8 8a 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026788:	83 c4 10             	add    esp,0x10
c002678b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002678f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026792:	83 ec 08             	sub    esp,0x8
c0026795:	50                   	push   eax
c0026796:	68 df 2f 03 c0       	push   0xc0032fdf
c002679b:	e8 72 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00267a0:	83 c4 10             	add    esp,0x10
c00267a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267a7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00267aa:	83 ec 08             	sub    esp,0x8
c00267ad:	50                   	push   eax
c00267ae:	68 ea 2f 03 c0       	push   0xc0032fea
c00267b3:	e8 5a 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00267b8:	83 c4 10             	add    esp,0x10
c00267bb:	83 ec 08             	sub    esp,0x8
c00267be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00267c2:	68 f5 2f 03 c0       	push   0xc0032ff5
c00267c7:	e8 46 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00267cc:	83 c4 10             	add    esp,0x10
c00267cf:	83 ec 08             	sub    esp,0x8
c00267d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00267d6:	68 00 30 03 c0       	push   0xc0033000
c00267db:	e8 32 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00267e0:	83 c4 10             	add    esp,0x10
c00267e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267e7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267ea:	c1 e0 05             	shl    eax,0x5
c00267ed:	8d 90 a0 43 03 c0    	lea    edx,[eax-0x3ffcbc60]
c00267f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267f7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267fa:	83 ec 04             	sub    esp,0x4
c00267fd:	52                   	push   edx
c00267fe:	50                   	push   eax
c00267ff:	68 0b 30 03 c0       	push   0xc003300b
c0026804:	e8 09 2a ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026809:	83 c4 10             	add    esp,0x10
c002680c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026811:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026817:	83 ec 0c             	sub    esp,0xc
c002681a:	50                   	push   eax
c002681b:	e8 57 08 ff ff       	call   c0017077 <setActiveTerminal(VgaText*)>
c0026820:	83 c4 10             	add    esp,0x10
c0026823:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026828:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002682e:	83 ec 08             	sub    esp,0x8
c0026831:	68 1a 30 03 c0       	push   0xc003301a
c0026836:	50                   	push   eax
c0026837:	e8 78 0b ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c002683c:	83 c4 10             	add    esp,0x10
c002683f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026844:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002684a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002684e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026851:	83 ec 08             	sub    esp,0x8
c0026854:	52                   	push   edx
c0026855:	50                   	push   eax
c0026856:	e8 13 0b ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c002685b:	83 c4 10             	add    esp,0x10
c002685e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026863:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026869:	83 ec 08             	sub    esp,0x8
c002686c:	68 28 30 03 c0       	push   0xc0033028
c0026871:	50                   	push   eax
c0026872:	e8 3d 0b ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026877:	83 c4 10             	add    esp,0x10
c002687a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002687f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026885:	ba 00 20 00 c2       	mov    edx,0xc2002000
c002688a:	8b 12                	mov    edx,DWORD PTR [edx]
c002688c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002688f:	83 c2 0c             	add    edx,0xc
c0026892:	83 ec 08             	sub    esp,0x8
c0026895:	52                   	push   edx
c0026896:	50                   	push   eax
c0026897:	e8 18 0b ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c002689c:	83 c4 10             	add    esp,0x10
c002689f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268aa:	83 ec 08             	sub    esp,0x8
c00268ad:	68 31 30 03 c0       	push   0xc0033031
c00268b2:	50                   	push   eax
c00268b3:	e8 fc 0a ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c00268b8:	83 c4 10             	add    esp,0x10
c00268bb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00268ca:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00268cd:	83 ec 08             	sub    esp,0x8
c00268d0:	52                   	push   edx
c00268d1:	50                   	push   eax
c00268d2:	e8 97 0a ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c00268d7:	83 c4 10             	add    esp,0x10
c00268da:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268e5:	83 ec 08             	sub    esp,0x8
c00268e8:	68 39 30 03 c0       	push   0xc0033039
c00268ed:	50                   	push   eax
c00268ee:	e8 c1 0a ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c00268f3:	83 c4 10             	add    esp,0x10
c00268f6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026901:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026905:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026908:	83 ec 08             	sub    esp,0x8
c002690b:	52                   	push   edx
c002690c:	50                   	push   eax
c002690d:	e8 5c 0a ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c0026912:	83 c4 10             	add    esp,0x10
c0026915:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002691a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026920:	83 ec 08             	sub    esp,0x8
c0026923:	68 41 30 03 c0       	push   0xc0033041
c0026928:	50                   	push   eax
c0026929:	e8 86 0a ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c002692e:	83 c4 10             	add    esp,0x10
c0026931:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026936:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002693c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026940:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026943:	83 ec 08             	sub    esp,0x8
c0026946:	52                   	push   edx
c0026947:	50                   	push   eax
c0026948:	e8 21 0a ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c002694d:	83 c4 10             	add    esp,0x10
c0026950:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026955:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002695b:	83 ec 08             	sub    esp,0x8
c002695e:	68 49 30 03 c0       	push   0xc0033049
c0026963:	50                   	push   eax
c0026964:	e8 4b 0a ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026969:	83 c4 10             	add    esp,0x10
c002696c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026971:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026977:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002697b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002697e:	83 ec 08             	sub    esp,0x8
c0026981:	52                   	push   edx
c0026982:	50                   	push   eax
c0026983:	e8 e6 09 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c0026988:	83 c4 10             	add    esp,0x10
c002698b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026990:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026996:	83 ec 08             	sub    esp,0x8
c0026999:	68 51 30 03 c0       	push   0xc0033051
c002699e:	50                   	push   eax
c002699f:	e8 10 0a ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c00269a4:	83 c4 10             	add    esp,0x10
c00269a7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269b6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00269b9:	83 ec 08             	sub    esp,0x8
c00269bc:	52                   	push   edx
c00269bd:	50                   	push   eax
c00269be:	e8 ab 09 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c00269c3:	83 c4 10             	add    esp,0x10
c00269c6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269d1:	83 ec 08             	sub    esp,0x8
c00269d4:	68 59 30 03 c0       	push   0xc0033059
c00269d9:	50                   	push   eax
c00269da:	e8 d5 09 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c00269df:	83 c4 10             	add    esp,0x10
c00269e2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269f1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00269f4:	83 ec 08             	sub    esp,0x8
c00269f7:	52                   	push   edx
c00269f8:	50                   	push   eax
c00269f9:	e8 70 09 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c00269fe:	83 c4 10             	add    esp,0x10
c0026a01:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a0c:	83 ec 08             	sub    esp,0x8
c0026a0f:	68 61 30 03 c0       	push   0xc0033061
c0026a14:	50                   	push   eax
c0026a15:	e8 9a 09 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026a1a:	83 c4 10             	add    esp,0x10
c0026a1d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a28:	83 ec 08             	sub    esp,0x8
c0026a2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026a2f:	50                   	push   eax
c0026a30:	e8 39 09 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c0026a35:	83 c4 10             	add    esp,0x10
c0026a38:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a43:	83 ec 08             	sub    esp,0x8
c0026a46:	68 6a 30 03 c0       	push   0xc003306a
c0026a4b:	50                   	push   eax
c0026a4c:	e8 63 09 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026a51:	83 c4 10             	add    esp,0x10
c0026a54:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a5f:	83 ec 08             	sub    esp,0x8
c0026a62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026a66:	50                   	push   eax
c0026a67:	e8 02 09 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c0026a6c:	83 c4 10             	add    esp,0x10
c0026a6f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a7a:	83 ec 08             	sub    esp,0x8
c0026a7d:	68 72 30 03 c0       	push   0xc0033072
c0026a82:	50                   	push   eax
c0026a83:	e8 2c 09 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026a88:	83 c4 10             	add    esp,0x10
c0026a8b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a96:	83 ec 08             	sub    esp,0x8
c0026a99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026a9d:	50                   	push   eax
c0026a9e:	e8 cb 08 ff ff       	call   c001736e <VgaText::putx(unsigned int)>
c0026aa3:	83 c4 10             	add    esp,0x10
c0026aa6:	fa                   	cli    
c0026aa7:	f4                   	hlt    
c0026aa8:	eb fe                	jmp    c0026aa8 <displayDebugInfo(regs*)+0x383>

c0026aaa <HalSystemIdle()>:
c0026aaa:	56                   	push   esi
c0026aab:	53                   	push   ebx
c0026aac:	83 ec 14             	sub    esp,0x14
c0026aaf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026ab4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026aba:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026ac0:	83 e0 04             	and    eax,0x4
c0026ac3:	0f b6 c0             	movzx  eax,al
c0026ac6:	85 c0                	test   eax,eax
c0026ac8:	0f 95 c0             	setne  al
c0026acb:	0f b6 c0             	movzx  eax,al
c0026ace:	85 c0                	test   eax,eax
c0026ad0:	74 4c                	je     c0026b1e <HalSystemIdle()+0x74>
c0026ad2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026ad7:	83 ec 08             	sub    esp,0x8
c0026ada:	68 e1 00 00 00       	push   0xe1
c0026adf:	50                   	push   eax
c0026ae0:	e8 07 ef fe ff       	call   c00159ec <Computer::rdmsr(unsigned int)>
c0026ae5:	83 c4 10             	add    esp,0x10
c0026ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026aec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026af0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026af5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026af9:	83 e2 02             	and    edx,0x2
c0026afc:	89 d3                	mov    ebx,edx
c0026afe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026b02:	83 e2 00             	and    edx,0x0
c0026b05:	89 d6                	mov    esi,edx
c0026b07:	56                   	push   esi
c0026b08:	53                   	push   ebx
c0026b09:	68 e1 00 00 00       	push   0xe1
c0026b0e:	50                   	push   eax
c0026b0f:	e8 04 ef fe ff       	call   c0015a18 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026b14:	83 c4 10             	add    esp,0x10
c0026b17:	e8 78 96 fd ff       	call   c0000194 <doTPAUSE>
c0026b1c:	eb 01                	jmp    c0026b1f <HalSystemIdle()+0x75>
c0026b1e:	f4                   	hlt    
c0026b1f:	90                   	nop
c0026b20:	83 c4 14             	add    esp,0x14
c0026b23:	5b                   	pop    ebx
c0026b24:	5e                   	pop    esi
c0026b25:	c3                   	ret    

c0026b26 <displayProgramFault(char const*)>:
c0026b26:	83 ec 0c             	sub    esp,0xc
c0026b29:	83 ec 0c             	sub    esp,0xc
c0026b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b30:	e8 dd 26 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026b35:	83 c4 10             	add    esp,0x10
c0026b38:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b48:	85 c0                	test   eax,eax
c0026b4a:	74 21                	je     c0026b6d <displayProgramFault(char const*)+0x47>
c0026b4c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b5c:	6a 04                	push   0x4
c0026b5e:	6a 0f                	push   0xf
c0026b60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026b64:	50                   	push   eax
c0026b65:	e8 bc 08 ff ff       	call   c0017426 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026b6a:	83 c4 10             	add    esp,0x10
c0026b6d:	90                   	nop
c0026b6e:	83 c4 0c             	add    esp,0xc
c0026b71:	c3                   	ret    

c0026b72 <gpFault(regs*, void*)>:
c0026b72:	83 ec 1c             	sub    esp,0x1c
c0026b75:	c7 05 74 02 04 c0 c8 5f 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025fc8
c0026b7f:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b84:	85 c0                	test   eax,eax
c0026b86:	74 1e                	je     c0026ba6 <gpFault(regs*, void*)+0x34>
c0026b88:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b8d:	83 ec 0c             	sub    esp,0xc
c0026b90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026b94:	ff d0                	call   eax
c0026b96:	83 c4 10             	add    esp,0x10
c0026b99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026b9d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026ba2:	85 c0                	test   eax,eax
c0026ba4:	75 2e                	jne    c0026bd4 <gpFault(regs*, void*)+0x62>
c0026ba6:	83 ec 0c             	sub    esp,0xc
c0026ba9:	68 7a 30 03 c0       	push   0xc003307a
c0026bae:	e8 73 ff ff ff       	call   c0026b26 <displayProgramFault(char const*)>
c0026bb3:	83 c4 10             	add    esp,0x10
c0026bb6:	83 ec 0c             	sub    esp,0xc
c0026bb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026bbd:	e8 63 fb ff ff       	call   c0026725 <displayDebugInfo(regs*)>
c0026bc2:	83 c4 10             	add    esp,0x10
c0026bc5:	83 ec 0c             	sub    esp,0xc
c0026bc8:	6a 00                	push   0x0
c0026bca:	e8 25 ee ff ff       	call   c00259f4 <Thr::terminateFromIRQ(int)>
c0026bcf:	83 c4 10             	add    esp,0x10
c0026bd2:	eb 01                	jmp    c0026bd5 <gpFault(regs*, void*)+0x63>
c0026bd4:	90                   	nop
c0026bd5:	83 c4 1c             	add    esp,0x1c
c0026bd8:	c3                   	ret    

c0026bd9 <pgFault(regs*, void*)>:
c0026bd9:	83 ec 1c             	sub    esp,0x1c
c0026bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026be0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026be3:	0f 20 d0             	mov    eax,cr2
c0026be6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026bee:	83 ec 04             	sub    esp,0x4
c0026bf1:	52                   	push   edx
c0026bf2:	50                   	push   eax
c0026bf3:	68 58 31 03 c0       	push   0xc0033158
c0026bf8:	e8 15 26 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026bfd:	83 c4 10             	add    esp,0x10
c0026c00:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026c10:	0f 20 d2             	mov    edx,cr2
c0026c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c1b:	83 ec 08             	sub    esp,0x8
c0026c1e:	52                   	push   edx
c0026c1f:	50                   	push   eax
c0026c20:	e8 5d 20 ff ff       	call   c0018c82 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026c25:	83 c4 10             	add    esp,0x10
c0026c28:	0f b6 c0             	movzx  eax,al
c0026c2b:	85 c0                	test   eax,eax
c0026c2d:	75 2e                	jne    c0026c5d <pgFault(regs*, void*)+0x84>
c0026c2f:	83 ec 0c             	sub    esp,0xc
c0026c32:	68 93 30 03 c0       	push   0xc0033093
c0026c37:	e8 ea fe ff ff       	call   c0026b26 <displayProgramFault(char const*)>
c0026c3c:	83 c4 10             	add    esp,0x10
c0026c3f:	83 ec 0c             	sub    esp,0xc
c0026c42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c46:	e8 da fa ff ff       	call   c0026725 <displayDebugInfo(regs*)>
c0026c4b:	83 c4 10             	add    esp,0x10
c0026c4e:	83 ec 0c             	sub    esp,0xc
c0026c51:	6a 00                	push   0x0
c0026c53:	e8 9c ed ff ff       	call   c00259f4 <Thr::terminateFromIRQ(int)>
c0026c58:	83 c4 10             	add    esp,0x10
c0026c5b:	eb 01                	jmp    c0026c5e <pgFault(regs*, void*)+0x85>
c0026c5d:	90                   	nop
c0026c5e:	83 c4 1c             	add    esp,0x1c
c0026c61:	c3                   	ret    

c0026c62 <otherISRHandler(regs*, void*)>:
c0026c62:	83 ec 0c             	sub    esp,0xc
c0026c65:	83 ec 0c             	sub    esp,0xc
c0026c68:	68 80 31 03 c0       	push   0xc0033180
c0026c6d:	e8 b4 fe ff ff       	call   c0026b26 <displayProgramFault(char const*)>
c0026c72:	83 c4 10             	add    esp,0x10
c0026c75:	83 ec 0c             	sub    esp,0xc
c0026c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c7c:	e8 a4 fa ff ff       	call   c0026725 <displayDebugInfo(regs*)>
c0026c81:	83 c4 10             	add    esp,0x10
c0026c84:	83 ec 0c             	sub    esp,0xc
c0026c87:	6a 00                	push   0x0
c0026c89:	e8 66 ed ff ff       	call   c00259f4 <Thr::terminateFromIRQ(int)>
c0026c8e:	83 c4 10             	add    esp,0x10
c0026c91:	90                   	nop
c0026c92:	83 c4 0c             	add    esp,0xc
c0026c95:	c3                   	ret    

c0026c96 <opcodeFault(regs*, void*)>:
c0026c96:	55                   	push   ebp
c0026c97:	89 e5                	mov    ebp,esp
c0026c99:	83 ec 08             	sub    esp,0x8
c0026c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026ca2:	83 ec 08             	sub    esp,0x8
c0026ca5:	50                   	push   eax
c0026ca6:	68 9e 30 03 c0       	push   0xc003309e
c0026cab:	e8 62 25 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026cb0:	83 c4 10             	add    esp,0x10
c0026cb3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026cb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026cbe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026cc4:	0f b6 c0             	movzx  eax,al
c0026cc7:	85 c0                	test   eax,eax
c0026cc9:	74 21                	je     c0026cec <opcodeFault(regs*, void*)+0x56>
c0026ccb:	83 ec 0c             	sub    esp,0xc
c0026cce:	68 a8 31 03 c0       	push   0xc00331a8
c0026cd3:	e8 3a 25 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026cd8:	83 c4 10             	add    esp,0x10
c0026cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026ce1:	8d 50 19             	lea    edx,[eax+0x19]
c0026ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ce7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026cea:	eb 2b                	jmp    c0026d17 <opcodeFault(regs*, void*)+0x81>
c0026cec:	83 ec 0c             	sub    esp,0xc
c0026cef:	68 ac 30 03 c0       	push   0xc00330ac
c0026cf4:	e8 2d fe ff ff       	call   c0026b26 <displayProgramFault(char const*)>
c0026cf9:	83 c4 10             	add    esp,0x10
c0026cfc:	83 ec 0c             	sub    esp,0xc
c0026cff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d02:	e8 1e fa ff ff       	call   c0026725 <displayDebugInfo(regs*)>
c0026d07:	83 c4 10             	add    esp,0x10
c0026d0a:	83 ec 0c             	sub    esp,0xc
c0026d0d:	6a 00                	push   0x0
c0026d0f:	e8 e0 ec ff ff       	call   c00259f4 <Thr::terminateFromIRQ(int)>
c0026d14:	83 c4 10             	add    esp,0x10
c0026d17:	c9                   	leave  
c0026d18:	c3                   	ret    

c0026d19 <i386SaveCoprocessor(void*)>:
c0026d19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d1d:	83 c0 3f             	add    eax,0x3f
c0026d20:	83 e0 c0             	and    eax,0xffffffc0
c0026d23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d27:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026d2d <i386LoadCoprocessor(void*)>:
c0026d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d31:	83 c0 3f             	add    eax,0x3f
c0026d34:	83 e0 c0             	and    eax,0xffffffc0
c0026d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d3b:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026d41 <x87EmulHandler(regs*, void*)>:
c0026d41:	53                   	push   ebx
c0026d42:	83 ec 08             	sub    esp,0x8
c0026d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026d4a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026d4e:	74 10                	je     c0026d60 <x87EmulHandler(regs*, void*)+0x1f>
c0026d50:	83 ec 0c             	sub    esp,0xc
c0026d53:	68 b9 30 03 c0       	push   0xc00330b9
c0026d58:	e8 3d 94 ff ff       	call   c002019a <KePanic(char const*)>
c0026d5d:	83 c4 10             	add    esp,0x10
c0026d60:	0f 20 c0             	mov    eax,cr0
c0026d63:	a8 08                	test   al,0x8
c0026d65:	74 59                	je     c0026dc0 <x87EmulHandler(regs*, void*)+0x7f>
c0026d67:	0f 06                	clts   
c0026d69:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d6e:	85 c0                	test   eax,eax
c0026d70:	74 0e                	je     c0026d80 <x87EmulHandler(regs*, void*)+0x3f>
c0026d72:	83 ec 0c             	sub    esp,0xc
c0026d75:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d78:	e8 9c ff ff ff       	call   c0026d19 <i386SaveCoprocessor(void*)>
c0026d7d:	83 c4 10             	add    esp,0x10
c0026d80:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026d86:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026d8a:	75 12                	jne    c0026d9e <x87EmulHandler(regs*, void*)+0x5d>
c0026d8c:	83 ec 0c             	sub    esp,0xc
c0026d8f:	68 40 02 00 00       	push   0x240
c0026d94:	e8 42 f6 fe ff       	call   c00163db <malloc>
c0026d99:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026d9c:	eb 10                	jmp    c0026dae <x87EmulHandler(regs*, void*)+0x6d>
c0026d9e:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026da3:	83 ec 0c             	sub    esp,0xc
c0026da6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026da9:	e8 7f ff ff ff       	call   c0026d2d <i386LoadCoprocessor(void*)>
c0026dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026db3:	83 c4 10             	add    esp,0x10
c0026db6:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026dbb:	83 c4 08             	add    esp,0x8
c0026dbe:	5b                   	pop    ebx
c0026dbf:	c3                   	ret    
c0026dc0:	83 ec 0c             	sub    esp,0xc
c0026dc3:	68 cd 30 03 c0       	push   0xc00330cd
c0026dc8:	e8 45 24 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026dcd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026dd5:	83 c4 18             	add    esp,0x18
c0026dd8:	5b                   	pop    ebx
c0026dd9:	e9 16 ec ff ff       	jmp    c00259f4 <Thr::terminateFromIRQ(int)>

c0026dde <HalInitialiseCoprocessor()>:
c0026dde:	83 ec 10             	sub    esp,0x10
c0026de1:	6a 00                	push   0x0
c0026de3:	68 41 6d 02 c0       	push   0xc0026d41
c0026de8:	6a 07                	push   0x7
c0026dea:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026df4:	e8 f9 49 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026df9:	e8 02 71 00 00       	call   c002df00 <avxDetect>
c0026dfe:	83 c4 10             	add    esp,0x10
c0026e01:	85 c0                	test   eax,eax
c0026e03:	74 1c                	je     c0026e21 <HalInitialiseCoprocessor()+0x43>
c0026e05:	c7 05 70 02 04 c0 2a df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df2a
c0026e0f:	c7 05 6c 02 04 c0 3b df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002df3b
c0026e19:	83 c4 0c             	add    esp,0xc
c0026e1c:	e9 2b 71 00 00       	jmp    c002df4c <avxInit>
c0026e21:	e8 4a 74 00 00       	call   c002e270 <sseDetect>
c0026e26:	85 c0                	test   eax,eax
c0026e28:	74 1c                	je     c0026e46 <HalInitialiseCoprocessor()+0x68>
c0026e2a:	c7 05 70 02 04 c0 88 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e288
c0026e34:	c7 05 6c 02 04 c0 90 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e290
c0026e3e:	83 c4 0c             	add    esp,0xc
c0026e41:	e9 52 74 00 00       	jmp    c002e298 <sseInit>
c0026e46:	e8 6b 74 00 00       	call   c002e2b6 <x87Detect>
c0026e4b:	85 c0                	test   eax,eax
c0026e4d:	74 1c                	je     c0026e6b <HalInitialiseCoprocessor()+0x8d>
c0026e4f:	c7 05 70 02 04 c0 d1 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e2d1
c0026e59:	c7 05 6c 02 04 c0 d8 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e2d8
c0026e63:	83 c4 0c             	add    esp,0xc
c0026e66:	e9 74 74 00 00       	jmp    c002e2df <x87Init>
c0026e6b:	c7 05 70 02 04 c0 f2 66 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00266f2
c0026e75:	c7 05 6c 02 04 c0 f2 66 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00266f2
c0026e7f:	0f 20 c0             	mov    eax,cr0
c0026e82:	83 c8 04             	or     eax,0x4
c0026e85:	0f 22 c0             	mov    cr0,eax
c0026e88:	83 c4 0c             	add    esp,0xc
c0026e8b:	c3                   	ret    

c0026e8c <HalPanic(char const*)>:
c0026e8c:	53                   	push   ebx
c0026e8d:	83 ec 10             	sub    esp,0x10
c0026e90:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026e94:	fa                   	cli    
c0026e95:	53                   	push   ebx
c0026e96:	68 e3 30 03 c0       	push   0xc00330e3
c0026e9b:	e8 72 23 ff ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0026ea0:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026ea5:	83 c4 10             	add    esp,0x10
c0026ea8:	85 c0                	test   eax,eax
c0026eaa:	74 09                	je     c0026eb5 <HalPanic(char const*)+0x29>
c0026eac:	83 ec 0c             	sub    esp,0xc
c0026eaf:	53                   	push   ebx
c0026eb0:	ff d0                	call   eax
c0026eb2:	83 c4 10             	add    esp,0x10
c0026eb5:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026eba:	85 c0                	test   eax,eax
c0026ebc:	0f 84 dc 00 00 00    	je     c0026f9e <HalPanic(char const*)+0x112>
c0026ec2:	52                   	push   edx
c0026ec3:	6a 01                	push   0x1
c0026ec5:	6a 0f                	push   0xf
c0026ec7:	50                   	push   eax
c0026ec8:	e8 05 00 ff ff       	call   c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026ecd:	59                   	pop    ecx
c0026ece:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ed4:	e8 e9 01 ff ff       	call   c00170c2 <VgaText::clearScreen()>
c0026ed9:	58                   	pop    eax
c0026eda:	5a                   	pop    edx
c0026edb:	68 b4 11 03 c0       	push   0xc00311b4
c0026ee0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ee6:	e8 1f 00 ff ff       	call   c0016f0a <VgaText::setTitle(char*)>
c0026eeb:	83 c4 0c             	add    esp,0xc
c0026eee:	6a 01                	push   0x1
c0026ef0:	6a 0f                	push   0xf
c0026ef2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ef8:	e8 d5 ff fe ff       	call   c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026efd:	59                   	pop    ecx
c0026efe:	58                   	pop    eax
c0026eff:	68 fc 30 03 c0       	push   0xc00330fc
c0026f04:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f0a:	e8 a5 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f0f:	83 c4 0c             	add    esp,0xc
c0026f12:	6a 0f                	push   0xf
c0026f14:	6a 01                	push   0x1
c0026f16:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f1c:	e8 b1 ff fe ff       	call   c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f21:	58                   	pop    eax
c0026f22:	5a                   	pop    edx
c0026f23:	68 05 31 03 c0       	push   0xc0033105
c0026f28:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f2e:	e8 81 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f33:	83 c4 0c             	add    esp,0xc
c0026f36:	6a 01                	push   0x1
c0026f38:	6a 0f                	push   0xf
c0026f3a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f40:	e8 8d ff fe ff       	call   c0016ed2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f45:	59                   	pop    ecx
c0026f46:	58                   	pop    eax
c0026f47:	68 49 31 03 c0       	push   0xc0033149
c0026f4c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f52:	e8 5d 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f57:	58                   	pop    eax
c0026f58:	5a                   	pop    edx
c0026f59:	68 12 31 03 c0       	push   0xc0033112
c0026f5e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f64:	e8 4b 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f69:	59                   	pop    ecx
c0026f6a:	58                   	pop    eax
c0026f6b:	68 4c 31 03 c0       	push   0xc003314c
c0026f70:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f76:	e8 39 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f7b:	58                   	pop    eax
c0026f7c:	5a                   	pop    edx
c0026f7d:	53                   	push   ebx
c0026f7e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f84:	e8 2b 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f89:	59                   	pop    ecx
c0026f8a:	5b                   	pop    ebx
c0026f8b:	68 49 31 03 c0       	push   0xc0033149
c0026f90:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f96:	e8 19 04 ff ff       	call   c00173b4 <VgaText::puts(char const*)>
c0026f9b:	83 c4 10             	add    esp,0x10
c0026f9e:	eb fe                	jmp    c0026f9e <HalPanic(char const*)+0x112>

c0026fa0 <HalQueryPerformanceCounter()>:
c0026fa0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fa5:	31 d2                	xor    edx,edx
c0026fa7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026fad:	31 c0                	xor    eax,eax
c0026faf:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026fb6:	74 02                	je     c0026fba <HalQueryPerformanceCounter()+0x1a>
c0026fb8:	0f 31                	rdtsc  
c0026fba:	c3                   	ret    

c0026fbb <HalInitialise()>:
c0026fbb:	53                   	push   ebx
c0026fbc:	83 ec 08             	sub    esp,0x8
c0026fbf:	e8 65 4a ff ff       	call   c001ba29 <setupINTS()>
c0026fc4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fc9:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026fd0:	75 0f                	jne    c0026fe1 <HalInitialise()+0x26>
c0026fd2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fd8:	83 e2 fe             	and    edx,0xfffffffe
c0026fdb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fe1:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026fe8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fee:	83 e2 fe             	and    edx,0xfffffffe
c0026ff1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026ff7:	e8 a0 02 00 00       	call   c002729c <picOpen()>
c0026ffc:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027003:	74 0a                	je     c002700f <HalInitialise()+0x54>
c0027005:	e8 e2 01 00 00       	call   c00271ec <picDisable()>
c002700a:	e8 63 68 00 00       	call   c002d872 <apicOpen()>
c002700f:	50                   	push   eax
c0027010:	bb 0f 00 00 00       	mov    ebx,0xf
c0027015:	6a 00                	push   0x0
c0027017:	68 62 6c 02 c0       	push   0xc0026c62
c002701c:	6a 00                	push   0x0
c002701e:	e8 cf 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027023:	83 c4 0c             	add    esp,0xc
c0027026:	6a 00                	push   0x0
c0027028:	68 62 6c 02 c0       	push   0xc0026c62
c002702d:	6a 01                	push   0x1
c002702f:	e8 be 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027034:	83 c4 0c             	add    esp,0xc
c0027037:	6a 00                	push   0x0
c0027039:	68 f3 66 02 c0       	push   0xc00266f3
c002703e:	6a 02                	push   0x2
c0027040:	e8 ad 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027045:	83 c4 0c             	add    esp,0xc
c0027048:	6a 00                	push   0x0
c002704a:	68 62 6c 02 c0       	push   0xc0026c62
c002704f:	6a 03                	push   0x3
c0027051:	e8 9c 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027056:	83 c4 0c             	add    esp,0xc
c0027059:	6a 00                	push   0x0
c002705b:	68 62 6c 02 c0       	push   0xc0026c62
c0027060:	6a 04                	push   0x4
c0027062:	e8 8b 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027067:	83 c4 0c             	add    esp,0xc
c002706a:	6a 00                	push   0x0
c002706c:	68 62 6c 02 c0       	push   0xc0026c62
c0027071:	6a 05                	push   0x5
c0027073:	e8 7a 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027078:	83 c4 0c             	add    esp,0xc
c002707b:	6a 00                	push   0x0
c002707d:	68 96 6c 02 c0       	push   0xc0026c96
c0027082:	6a 06                	push   0x6
c0027084:	e8 69 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027089:	83 c4 0c             	add    esp,0xc
c002708c:	6a 00                	push   0x0
c002708e:	68 0c 67 02 c0       	push   0xc002670c
c0027093:	6a 08                	push   0x8
c0027095:	e8 58 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002709a:	83 c4 0c             	add    esp,0xc
c002709d:	6a 00                	push   0x0
c002709f:	68 62 6c 02 c0       	push   0xc0026c62
c00270a4:	6a 09                	push   0x9
c00270a6:	e8 47 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270ab:	83 c4 0c             	add    esp,0xc
c00270ae:	6a 00                	push   0x0
c00270b0:	68 62 6c 02 c0       	push   0xc0026c62
c00270b5:	6a 0a                	push   0xa
c00270b7:	e8 36 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270bc:	83 c4 0c             	add    esp,0xc
c00270bf:	6a 00                	push   0x0
c00270c1:	68 62 6c 02 c0       	push   0xc0026c62
c00270c6:	6a 0b                	push   0xb
c00270c8:	e8 25 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270cd:	83 c4 0c             	add    esp,0xc
c00270d0:	6a 00                	push   0x0
c00270d2:	68 72 6b 02 c0       	push   0xc0026b72
c00270d7:	6a 0d                	push   0xd
c00270d9:	e8 14 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270de:	83 c4 0c             	add    esp,0xc
c00270e1:	6a 00                	push   0x0
c00270e3:	68 d9 6b 02 c0       	push   0xc0026bd9
c00270e8:	6a 0e                	push   0xe
c00270ea:	e8 03 47 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270ef:	83 c4 10             	add    esp,0x10
c00270f2:	50                   	push   eax
c00270f3:	6a 00                	push   0x0
c00270f5:	68 62 6c 02 c0       	push   0xc0026c62
c00270fa:	53                   	push   ebx
c00270fb:	43                   	inc    ebx
c00270fc:	e8 f1 46 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027101:	83 c4 10             	add    esp,0x10
c0027104:	83 fb 1e             	cmp    ebx,0x1e
c0027107:	75 e9                	jne    c00270f2 <HalInitialise()+0x137>
c0027109:	50                   	push   eax
c002710a:	6a 00                	push   0x0
c002710c:	68 64 1a 02 c0       	push   0xc0021a64
c0027111:	6a 60                	push   0x60
c0027113:	e8 da 46 ff ff       	call   c001b7f2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027118:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002711d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027127:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c002712e:	e8 a8 f2 fe ff       	call   c00163db <malloc>
c0027133:	89 04 24             	mov    DWORD PTR [esp],eax
c0027136:	89 c3                	mov    ebx,eax
c0027138:	e8 37 09 00 00       	call   c0027a74 <RTC::RTC()>
c002713d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027147:	5a                   	pop    edx
c0027148:	59                   	pop    ecx
c0027149:	53                   	push   ebx
c002714a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027150:	e8 53 41 ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c0027155:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027157:	6a 00                	push   0x0
c0027159:	6a 00                	push   0x0
c002715b:	6a 00                	push   0x0
c002715d:	53                   	push   ebx
c002715e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027161:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027166:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002716c:	83 c4 28             	add    esp,0x28
c002716f:	5b                   	pop    ebx
c0027170:	c3                   	ret    

c0027171 <HalMakeBeep(int)>:
c0027171:	53                   	push   ebx
c0027172:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027176:	85 db                	test   ebx,ebx
c0027178:	75 07                	jne    c0027181 <HalMakeBeep(int)+0x10>
c002717a:	e4 61                	in     al,0x61
c002717c:	83 e0 fc             	and    eax,0xfffffffc
c002717f:	eb 26                	jmp    c00271a7 <HalMakeBeep(int)+0x36>
c0027181:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027186:	99                   	cdq    
c0027187:	f7 fb                	idiv   ebx
c0027189:	89 c1                	mov    ecx,eax
c002718b:	b0 b6                	mov    al,0xb6
c002718d:	e6 43                	out    0x43,al
c002718f:	88 c8                	mov    al,cl
c0027191:	e6 42                	out    0x42,al
c0027193:	89 c8                	mov    eax,ecx
c0027195:	c1 e8 08             	shr    eax,0x8
c0027198:	e6 42                	out    0x42,al
c002719a:	e4 61                	in     al,0x61
c002719c:	89 c2                	mov    edx,eax
c002719e:	83 ca 03             	or     edx,0x3
c00271a1:	38 d0                	cmp    al,dl
c00271a3:	74 04                	je     c00271a9 <HalMakeBeep(int)+0x38>
c00271a5:	88 d0                	mov    al,dl
c00271a7:	e6 61                	out    0x61,al
c00271a9:	5b                   	pop    ebx
c00271aa:	c3                   	ret    

c00271ab <HalGetRand()>:
c00271ab:	31 c0                	xor    eax,eax
c00271ad:	c3                   	ret    

c00271ae <HalEndOfInterrupt(int)>:
c00271ae:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00271b5:	74 23                	je     c00271da <HalEndOfInterrupt(int)+0x2c>
c00271b7:	83 ec 14             	sub    esp,0x14
c00271ba:	6a 1b                	push   0x1b
c00271bc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00271c2:	e8 25 e8 fe ff       	call   c00159ec <Computer::rdmsr(unsigned int)>
c00271c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00271cc:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00271d6:	83 c4 1c             	add    esp,0x1c
c00271d9:	c3                   	ret    
c00271da:	e9 41 02 00 00       	jmp    c0027420 <picEOI(int)>

c00271df <HalRestart()>:
c00271df:	c3                   	ret    

c00271e0 <HalShutdown()>:
c00271e0:	c3                   	ret    

c00271e1 <HalSleep()>:
c00271e1:	c3                   	ret    
c00271e2:	66 90                	xchg   ax,ax

c00271e4 <picIoWait()>:
c00271e4:	eb 00                	jmp    c00271e6 <picIoWait()+0x2>
c00271e6:	eb 00                	jmp    c00271e8 <picIoWait()+0x4>
c00271e8:	90                   	nop
c00271e9:	c3                   	ret    
c00271ea:	66 90                	xchg   ax,ax

c00271ec <picDisable()>:
c00271ec:	83 ec 10             	sub    esp,0x10
c00271ef:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00271f6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00271fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00271ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027204:	ee                   	out    dx,al
c0027205:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c002720c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027211:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027215:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c002721a:	ee                   	out    dx,al
c002721b:	90                   	nop
c002721c:	83 c4 10             	add    esp,0x10
c002721f:	c3                   	ret    

c0027220 <picGetIRQReg(int)>:
c0027220:	83 ec 10             	sub    esp,0x10
c0027223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027227:	0f b6 c0             	movzx  eax,al
c002722a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027231:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027235:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027239:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002723e:	ee                   	out    dx,al
c002723f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027243:	0f b6 c0             	movzx  eax,al
c0027246:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002724d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027251:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027255:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002725a:	ee                   	out    dx,al
c002725b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027262:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027267:	89 c2                	mov    edx,eax
c0027269:	ec                   	in     al,dx
c002726a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002726e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027272:	0f b6 c0             	movzx  eax,al
c0027275:	c1 e0 08             	shl    eax,0x8
c0027278:	89 c1                	mov    ecx,eax
c002727a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027281:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0027286:	89 c2                	mov    edx,eax
c0027288:	ec                   	in     al,dx
c0027289:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002728d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027291:	0f b6 c0             	movzx  eax,al
c0027294:	09 c8                	or     eax,ecx
c0027296:	83 c4 10             	add    esp,0x10
c0027299:	c3                   	ret    
c002729a:	66 90                	xchg   ax,ax

c002729c <picOpen()>:
c002729c:	83 ec 50             	sub    esp,0x50
c002729f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00272a6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00272ab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00272af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00272b3:	ee                   	out    dx,al
c00272b4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00272bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00272c0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00272c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272c8:	ee                   	out    dx,al
c00272c9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00272d1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00272d9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00272e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00272e4:	89 c2                	mov    edx,eax
c00272e6:	ec                   	in     al,dx
c00272e7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00272eb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00272ef:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00272f3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00272fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00272fe:	89 c2                	mov    edx,eax
c0027300:	ec                   	in     al,dx
c0027301:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027305:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027309:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002730d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027314:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027319:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c002731d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027321:	ee                   	out    dx,al
c0027322:	e8 bd fe ff ff       	call   c00271e4 <picIoWait()>
c0027327:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002732e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027333:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027337:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002733b:	ee                   	out    dx,al
c002733c:	e8 a3 fe ff ff       	call   c00271e4 <picIoWait()>
c0027341:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027345:	0f b6 c0             	movzx  eax,al
c0027348:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002734f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027353:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027357:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002735b:	ee                   	out    dx,al
c002735c:	e8 83 fe ff ff       	call   c00271e4 <picIoWait()>
c0027361:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027365:	0f b6 c0             	movzx  eax,al
c0027368:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002736f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027373:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027377:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002737b:	ee                   	out    dx,al
c002737c:	e8 63 fe ff ff       	call   c00271e4 <picIoWait()>
c0027381:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027388:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c002738d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027391:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027395:	ee                   	out    dx,al
c0027396:	e8 49 fe ff ff       	call   c00271e4 <picIoWait()>
c002739b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00273a2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00273a7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00273ab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00273af:	ee                   	out    dx,al
c00273b0:	e8 2f fe ff ff       	call   c00271e4 <picIoWait()>
c00273b5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00273bc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00273c1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00273c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00273c9:	ee                   	out    dx,al
c00273ca:	e8 15 fe ff ff       	call   c00271e4 <picIoWait()>
c00273cf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00273d6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00273db:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00273df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00273e3:	ee                   	out    dx,al
c00273e4:	e8 fb fd ff ff       	call   c00271e4 <picIoWait()>
c00273e9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00273ee:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00273f5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00273f9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00273fd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027401:	ee                   	out    dx,al
c0027402:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027407:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c002740e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027412:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027416:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002741a:	ee                   	out    dx,al
c002741b:	90                   	nop
c002741c:	83 c4 50             	add    esp,0x50
c002741f:	c3                   	ret    

c0027420 <picEOI(int)>:
c0027420:	83 ec 10             	sub    esp,0x10
c0027423:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027428:	75 1e                	jne    c0027448 <picEOI(int)+0x28>
c002742a:	6a 0b                	push   0xb
c002742c:	e8 ef fd ff ff       	call   c0027220 <picGetIRQReg(int)>
c0027431:	83 c4 04             	add    esp,0x4
c0027434:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002743e:	25 80 00 00 00       	and    eax,0x80
c0027443:	74 73                	je     c00274b8 <picEOI(int)+0x98>
c0027445:	8d 76 00             	lea    esi,[esi+0x0]
c0027448:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c002744d:	75 31                	jne    c0027480 <picEOI(int)+0x60>
c002744f:	6a 0b                	push   0xb
c0027451:	e8 ca fd ff ff       	call   c0027220 <picGetIRQReg(int)>
c0027456:	83 c4 04             	add    esp,0x4
c0027459:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002745e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027462:	98                   	cwde   
c0027463:	85 c0                	test   eax,eax
c0027465:	78 19                	js     c0027480 <picEOI(int)+0x60>
c0027467:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002746e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027473:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027477:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002747c:	ee                   	out    dx,al
c002747d:	eb 3d                	jmp    c00274bc <picEOI(int)+0x9c>
c002747f:	90                   	nop
c0027480:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027485:	7e 19                	jle    c00274a0 <picEOI(int)+0x80>
c0027487:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002748e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027493:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027497:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002749c:	ee                   	out    dx,al
c002749d:	8d 76 00             	lea    esi,[esi+0x0]
c00274a0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00274a7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00274ac:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00274b0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00274b5:	ee                   	out    dx,al
c00274b6:	eb 04                	jmp    c00274bc <picEOI(int)+0x9c>
c00274b8:	90                   	nop
c00274b9:	8d 76 00             	lea    esi,[esi+0x0]
c00274bc:	83 c4 10             	add    esp,0x10
c00274bf:	c3                   	ret    

c00274c0 <RTC::open(int, int, void*)>:
c00274c0:	31 c0                	xor    eax,eax
c00274c2:	c3                   	ret    
c00274c3:	90                   	nop

c00274c4 <RTC::close(int, int, void*)>:
c00274c4:	31 c0                	xor    eax,eax
c00274c6:	c3                   	ret    
c00274c7:	90                   	nop

c00274c8 <RTC::timeInSecondsUTC()>:
c00274c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274cc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00274d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00274d8:	c3                   	ret    
c00274d9:	90                   	nop

c00274da <RTC::timeInDatetimeUTC()>:
c00274da:	53                   	push   ebx
c00274db:	83 ec 14             	sub    esp,0x14
c00274de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00274e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00274e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00274e8:	50                   	push   eax
c00274e9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00274ec:	83 c4 0c             	add    esp,0xc
c00274ef:	52                   	push   edx
c00274f0:	50                   	push   eax
c00274f1:	53                   	push   ebx
c00274f2:	e8 25 3b ff ff       	call   c001b01c <secondsToDatetime(unsigned long long)>
c00274f7:	89 d8                	mov    eax,ebx
c00274f9:	83 c4 14             	add    esp,0x14
c00274fc:	5b                   	pop    ebx
c00274fd:	c2 04 00             	ret    0x4

c0027500 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027500:	56                   	push   esi
c0027501:	53                   	push   ebx
c0027502:	83 ec 14             	sub    esp,0x14
c0027505:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027509:	8b 03                	mov    eax,DWORD PTR [ebx]
c002750b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c002750e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027512:	52                   	push   edx
c0027513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002751b:	50                   	push   eax
c002751c:	e8 fb 3a ff ff       	call   c001b01c <secondsToDatetime(unsigned long long)>
c0027521:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027525:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027529:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002752d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027531:	89 f0                	mov    eax,esi
c0027533:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027537:	83 c4 20             	add    esp,0x20
c002753a:	5b                   	pop    ebx
c002753b:	5e                   	pop    esi
c002753c:	ff e0                	jmp    eax

c002753e <RTC::~RTC()>:
c002753e:	83 ec 0c             	sub    esp,0xc
c0027541:	ba e8 31 03 c0       	mov    edx,0xc00331e8
c0027546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754a:	89 10                	mov    DWORD PTR [eax],edx
c002754c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027550:	83 ec 0c             	sub    esp,0xc
c0027553:	50                   	push   eax
c0027554:	e8 4f 38 ff ff       	call   c001ada8 <Clock::~Clock()>
c0027559:	83 c4 10             	add    esp,0x10
c002755c:	90                   	nop
c002755d:	83 c4 0c             	add    esp,0xc
c0027560:	c3                   	ret    
c0027561:	90                   	nop

c0027562 <RTC::~RTC()>:
c0027562:	83 ec 0c             	sub    esp,0xc
c0027565:	83 ec 0c             	sub    esp,0xc
c0027568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002756c:	e8 cd ff ff ff       	call   c002753e <RTC::~RTC()>
c0027571:	83 c4 10             	add    esp,0x10
c0027574:	83 ec 08             	sub    esp,0x8
c0027577:	68 60 01 00 00       	push   0x160
c002757c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027580:	e8 8f 1b ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c0027585:	83 c4 10             	add    esp,0x10
c0027588:	83 c4 0c             	add    esp,0xc
c002758b:	c3                   	ret    

c002758c <RTC::get_update_in_progress_flag()>:
c002758c:	83 ec 14             	sub    esp,0x14
c002758f:	6a 0a                	push   0xa
c0027591:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027597:	e8 08 e5 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c002759c:	83 c4 1c             	add    esp,0x1c
c002759f:	0f b6 c0             	movzx  eax,al
c00275a2:	c1 e8 07             	shr    eax,0x7
c00275a5:	c3                   	ret    

c00275a6 <RTC::completeRTCRefresh()>:
c00275a6:	55                   	push   ebp
c00275a7:	57                   	push   edi
c00275a8:	56                   	push   esi
c00275a9:	53                   	push   ebx
c00275aa:	83 ec 3c             	sub    esp,0x3c
c00275ad:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00275b3:	83 ec 0c             	sub    esp,0xc
c00275b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00275ba:	e8 cd ff ff ff       	call   c002758c <RTC::get_update_in_progress_flag()>
c00275bf:	83 c4 10             	add    esp,0x10
c00275c2:	84 c0                	test   al,al
c00275c4:	74 0e                	je     c00275d4 <RTC::completeRTCRefresh()+0x2e>
c00275c6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00275cc:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00275d2:	73 df                	jae    c00275b3 <RTC::completeRTCRefresh()+0xd>
c00275d4:	50                   	push   eax
c00275d5:	50                   	push   eax
c00275d6:	6a 00                	push   0x0
c00275d8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275de:	e8 c1 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00275e3:	89 c7                	mov    edi,eax
c00275e5:	58                   	pop    eax
c00275e6:	5a                   	pop    edx
c00275e7:	6a 02                	push   0x2
c00275e9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275ef:	e8 b0 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00275f4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00275f8:	59                   	pop    ecx
c00275f9:	5b                   	pop    ebx
c00275fa:	6a 04                	push   0x4
c00275fc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027602:	e8 9d e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027607:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c002760b:	5e                   	pop    esi
c002760c:	5d                   	pop    ebp
c002760d:	6a 07                	push   0x7
c002760f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027615:	e8 8a e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c002761a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002761e:	58                   	pop    eax
c002761f:	5a                   	pop    edx
c0027620:	6a 08                	push   0x8
c0027622:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027628:	e8 77 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c002762d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027631:	59                   	pop    ecx
c0027632:	5b                   	pop    ebx
c0027633:	6a 09                	push   0x9
c0027635:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002763b:	e8 64 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027640:	0f b6 c0             	movzx  eax,al
c0027643:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027647:	83 c4 10             	add    esp,0x10
c002764a:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027650:	83 ec 0c             	sub    esp,0xc
c0027653:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027657:	e8 30 ff ff ff       	call   c002758c <RTC::get_update_in_progress_flag()>
c002765c:	83 c4 10             	add    esp,0x10
c002765f:	84 c0                	test   al,al
c0027661:	74 0e                	je     c0027671 <RTC::completeRTCRefresh()+0xcb>
c0027663:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027669:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002766f:	73 df                	jae    c0027650 <RTC::completeRTCRefresh()+0xaa>
c0027671:	51                   	push   ecx
c0027672:	51                   	push   ecx
c0027673:	6a 00                	push   0x0
c0027675:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002767b:	e8 24 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027680:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027684:	5b                   	pop    ebx
c0027685:	5e                   	pop    esi
c0027686:	6a 02                	push   0x2
c0027688:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002768e:	e8 11 e4 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027693:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027697:	5d                   	pop    ebp
c0027698:	58                   	pop    eax
c0027699:	6a 04                	push   0x4
c002769b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276a1:	e8 fe e3 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00276a6:	88 c3                	mov    bl,al
c00276a8:	58                   	pop    eax
c00276a9:	5a                   	pop    edx
c00276aa:	6a 07                	push   0x7
c00276ac:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276b2:	e8 ed e3 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00276b7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00276bb:	59                   	pop    ecx
c00276bc:	5e                   	pop    esi
c00276bd:	6a 08                	push   0x8
c00276bf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276c5:	e8 da e3 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00276ca:	5d                   	pop    ebp
c00276cb:	89 c6                	mov    esi,eax
c00276cd:	58                   	pop    eax
c00276ce:	6a 09                	push   0x9
c00276d0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276d6:	e8 c9 e3 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c00276db:	89 f9                	mov    ecx,edi
c00276dd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00276e1:	83 c4 10             	add    esp,0x10
c00276e4:	0f b6 e8             	movzx  ebp,al
c00276e7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00276ec:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00276f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00276f4:	74 27                	je     c002771d <RTC::completeRTCRefresh()+0x177>
c00276f6:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00276fa:	89 f0                	mov    eax,esi
c00276fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027700:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027704:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027708:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002770c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027710:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027714:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027718:	e9 2d ff ff ff       	jmp    c002764a <RTC::completeRTCRefresh()+0xa4>
c002771d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027726:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002772a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c002772e:	75 c6                	jne    c00276f6 <RTC::completeRTCRefresh()+0x150>
c0027730:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0027735:	89 f1                	mov    ecx,esi
c0027737:	0f b6 fb             	movzx  edi,bl
c002773a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c002773e:	0f b6 c9             	movzx  ecx,cl
c0027741:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027745:	89 f1                	mov    ecx,esi
c0027747:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002774b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002774f:	0f 94 c2             	sete   dl
c0027752:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027756:	0f 94 c0             	sete   al
c0027759:	21 d0                	and    eax,edx
c002775b:	31 d2                	xor    edx,edx
c002775d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027761:	0f 94 c2             	sete   dl
c0027764:	85 c2                	test   edx,eax
c0027766:	74 8e                	je     c00276f6 <RTC::completeRTCRefresh()+0x150>
c0027768:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c002776c:	75 88                	jne    c00276f6 <RTC::completeRTCRefresh()+0x150>
c002776e:	52                   	push   edx
c002776f:	52                   	push   edx
c0027770:	6a 0b                	push   0xb
c0027772:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027778:	e8 27 e3 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c002777d:	83 c4 10             	add    esp,0x10
c0027780:	a8 04                	test   al,0x4
c0027782:	75 7a                	jne    c00277fe <RTC::completeRTCRefresh()+0x258>
c0027784:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027788:	c1 ef 04             	shr    edi,0x4
c002778b:	83 e6 0f             	and    esi,0xf
c002778e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027792:	c1 ed 04             	shr    ebp,0x4
c0027795:	6b ed 0a             	imul   ebp,ebp,0xa
c0027798:	c1 ea 04             	shr    edx,0x4
c002779b:	6b d2 0a             	imul   edx,edx,0xa
c002779e:	83 e1 0f             	and    ecx,0xf
c00277a1:	01 d1                	add    ecx,edx
c00277a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00277a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00277ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00277af:	c1 ea 04             	shr    edx,0x4
c00277b2:	6b d2 0a             	imul   edx,edx,0xa
c00277b5:	83 e1 0f             	and    ecx,0xf
c00277b8:	01 d1                	add    ecx,edx
c00277ba:	89 fa                	mov    edx,edi
c00277bc:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00277c0:	83 e2 07             	and    edx,0x7
c00277c3:	89 d9                	mov    ecx,ebx
c00277c5:	6b d2 0a             	imul   edx,edx,0xa
c00277c8:	83 e1 0f             	and    ecx,0xf
c00277cb:	83 e3 80             	and    ebx,0xffffff80
c00277ce:	01 d1                	add    ecx,edx
c00277d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00277d4:	09 cb                	or     ebx,ecx
c00277d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00277da:	c1 ea 04             	shr    edx,0x4
c00277dd:	6b d2 0a             	imul   edx,edx,0xa
c00277e0:	83 e1 0f             	and    ecx,0xf
c00277e3:	01 d1                	add    ecx,edx
c00277e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00277e9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00277ed:	c1 ea 04             	shr    edx,0x4
c00277f0:	6b d2 0a             	imul   edx,edx,0xa
c00277f3:	01 d6                	add    esi,edx
c00277f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277f9:	83 e2 0f             	and    edx,0xf
c00277fc:	01 d5                	add    ebp,edx
c00277fe:	a8 02                	test   al,0x2
c0027800:	75 15                	jne    c0027817 <RTC::completeRTCRefresh()+0x271>
c0027802:	f6 c3 80             	test   bl,0x80
c0027805:	74 10                	je     c0027817 <RTC::completeRTCRefresh()+0x271>
c0027807:	83 e3 7f             	and    ebx,0x7f
c002780a:	b9 18 00 00 00       	mov    ecx,0x18
c002780f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027812:	99                   	cdq    
c0027813:	f7 f9                	idiv   ecx
c0027815:	88 d3                	mov    bl,dl
c0027817:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c002781d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027823:	77 06                	ja     c002782b <RTC::completeRTCRefresh()+0x285>
c0027825:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c002782b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027830:	31 c9                	xor    ecx,ecx
c0027832:	31 d2                	xor    edx,edx
c0027834:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027838:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c002783c:	89 cd                	mov    ebp,ecx
c002783e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0027842:	c1 e7 10             	shl    edi,0x10
c0027845:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002784b:	c1 e0 10             	shl    eax,0x10
c002784e:	09 c5                	or     ebp,eax
c0027850:	89 e9                	mov    ecx,ebp
c0027852:	0f b7 c2             	movzx  eax,dx
c0027855:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027859:	09 f8                	or     eax,edi
c002785b:	89 c2                	mov    edx,eax
c002785d:	50                   	push   eax
c002785e:	50                   	push   eax
c002785f:	88 d9                	mov    cl,bl
c0027861:	51                   	push   ecx
c0027862:	52                   	push   edx
c0027863:	e8 2f 36 ff ff       	call   c001ae97 <datetimeToSeconds(datetime_t)>
c0027868:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c002786c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027872:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027878:	83 c4 4c             	add    esp,0x4c
c002787b:	5b                   	pop    ebx
c002787c:	5e                   	pop    esi
c002787d:	5f                   	pop    edi
c002787e:	5d                   	pop    ebp
c002787f:	c3                   	ret    

c0027880 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027880:	55                   	push   ebp
c0027881:	57                   	push   edi
c0027882:	56                   	push   esi
c0027883:	53                   	push   ebx
c0027884:	83 ec 30             	sub    esp,0x30
c0027887:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c002788b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002788f:	6a 00                	push   0x0
c0027891:	6a 00                	push   0x0
c0027893:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027899:	e8 1e e3 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c002789e:	83 c4 0c             	add    esp,0xc
c00278a1:	6a 00                	push   0x0
c00278a3:	6a 02                	push   0x2
c00278a5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278ab:	e8 0c e3 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00278b0:	89 f8                	mov    eax,edi
c00278b2:	89 f9                	mov    ecx,edi
c00278b4:	0f b6 c4             	movzx  eax,ah
c00278b7:	31 d2                	xor    edx,edx
c00278b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00278bd:	c1 e9 10             	shr    ecx,0x10
c00278c0:	89 f0                	mov    eax,esi
c00278c2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00278c6:	89 f0                	mov    eax,esi
c00278c8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00278cc:	0f b6 c4             	movzx  eax,ah
c00278cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00278d3:	89 f0                	mov    eax,esi
c00278d5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00278d9:	c1 e8 10             	shr    eax,0x10
c00278dc:	b9 64 00 00 00       	mov    ecx,0x64
c00278e1:	f7 f1                	div    ecx
c00278e3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00278e7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00278eb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00278ef:	59                   	pop    ecx
c00278f0:	5b                   	pop    ebx
c00278f1:	89 fb                	mov    ebx,edi
c00278f3:	6a 0b                	push   0xb
c00278f5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278fb:	e8 a4 e1 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027900:	83 c4 10             	add    esp,0x10
c0027903:	a8 04                	test   al,0x4
c0027905:	89 c5                	mov    ebp,eax
c0027907:	75 6e                	jne    c0027977 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027909:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002790d:	31 d2                	xor    edx,edx
c002790f:	0f b6 c1             	movzx  eax,cl
c0027912:	b9 0a 00 00 00       	mov    ecx,0xa
c0027917:	f7 f1                	div    ecx
c0027919:	c1 e0 04             	shl    eax,0x4
c002791c:	09 d0                	or     eax,edx
c002791e:	31 d2                	xor    edx,edx
c0027920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027924:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027929:	f7 f1                	div    ecx
c002792b:	c1 e0 04             	shl    eax,0x4
c002792e:	09 d0                	or     eax,edx
c0027930:	31 d2                	xor    edx,edx
c0027932:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027936:	0f b6 c3             	movzx  eax,bl
c0027939:	f7 f1                	div    ecx
c002793b:	c1 e0 04             	shl    eax,0x4
c002793e:	09 d0                	or     eax,edx
c0027940:	31 d2                	xor    edx,edx
c0027942:	89 c3                	mov    ebx,eax
c0027944:	89 f0                	mov    eax,esi
c0027946:	0f b6 c0             	movzx  eax,al
c0027949:	f7 f1                	div    ecx
c002794b:	c1 e0 04             	shl    eax,0x4
c002794e:	09 d0                	or     eax,edx
c0027950:	31 d2                	xor    edx,edx
c0027952:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027956:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002795b:	f7 f1                	div    ecx
c002795d:	c1 e0 04             	shl    eax,0x4
c0027960:	09 d0                	or     eax,edx
c0027962:	31 d2                	xor    edx,edx
c0027964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027968:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002796c:	f7 f1                	div    ecx
c002796e:	c1 e0 04             	shl    eax,0x4
c0027971:	09 d0                	or     eax,edx
c0027973:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027977:	83 e5 02             	and    ebp,0x2
c002797a:	75 1e                	jne    c002799a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002797c:	0f b6 c3             	movzx  eax,bl
c002797f:	83 f8 0b             	cmp    eax,0xb
c0027982:	76 10                	jbe    c0027994 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027984:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027987:	84 d2                	test   dl,dl
c0027989:	88 d3                	mov    bl,dl
c002798b:	75 02                	jne    c002798f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c002798d:	b3 0c                	mov    bl,0xc
c002798f:	83 cb 80             	or     ebx,0xffffff80
c0027992:	eb 06                	jmp    c002799a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027994:	85 c0                	test   eax,eax
c0027996:	75 02                	jne    c002799a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027998:	b3 0c                	mov    bl,0xc
c002799a:	50                   	push   eax
c002799b:	0f b6 db             	movzx  ebx,bl
c002799e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00279a3:	52                   	push   edx
c00279a4:	6a 00                	push   0x0
c00279a6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279ac:	e8 0b e2 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00279b1:	83 c4 0c             	add    esp,0xc
c00279b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00279b9:	50                   	push   eax
c00279ba:	6a 02                	push   0x2
c00279bc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c2:	e8 f5 e1 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00279c7:	83 c4 0c             	add    esp,0xc
c00279ca:	53                   	push   ebx
c00279cb:	6a 04                	push   0x4
c00279cd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279d3:	e8 e4 e1 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00279d8:	83 c4 0c             	add    esp,0xc
c00279db:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00279e0:	52                   	push   edx
c00279e1:	6a 07                	push   0x7
c00279e3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279e9:	e8 ce e1 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00279ee:	83 c4 0c             	add    esp,0xc
c00279f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00279f6:	50                   	push   eax
c00279f7:	6a 08                	push   0x8
c00279f9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279ff:	e8 b8 e1 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a04:	83 c4 0c             	add    esp,0xc
c0027a07:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027a0c:	55                   	push   ebp
c0027a0d:	6a 09                	push   0x9
c0027a0f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a15:	e8 a2 e1 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a1a:	5a                   	pop    edx
c0027a1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027a1f:	e8 82 fb ff ff       	call   c00275a6 <RTC::completeRTCRefresh()>
c0027a24:	83 c4 3c             	add    esp,0x3c
c0027a27:	b0 01                	mov    al,0x1
c0027a29:	5b                   	pop    ebx
c0027a2a:	5e                   	pop    esi
c0027a2b:	5f                   	pop    edi
c0027a2c:	5d                   	pop    ebp
c0027a2d:	c3                   	ret    

c0027a2e <rtcIRQHandler(regs*, void*)>:
c0027a2e:	53                   	push   ebx
c0027a2f:	83 ec 10             	sub    esp,0x10
c0027a32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a36:	6a 0c                	push   0xc
c0027a38:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a3e:	e8 61 e0 fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027a43:	83 c4 10             	add    esp,0x10
c0027a46:	a8 80                	test   al,0x80
c0027a48:	74 24                	je     c0027a6e <rtcIRQHandler(regs*, void*)+0x40>
c0027a4a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027a51:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027a58:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027a5f:	75 0d                	jne    c0027a6e <rtcIRQHandler(regs*, void*)+0x40>
c0027a61:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027a65:	83 c4 08             	add    esp,0x8
c0027a68:	5b                   	pop    ebx
c0027a69:	e9 38 fb ff ff       	jmp    c00275a6 <RTC::completeRTCRefresh()>
c0027a6e:	83 c4 08             	add    esp,0x8
c0027a71:	5b                   	pop    ebx
c0027a72:	c3                   	ret    
c0027a73:	90                   	nop

c0027a74 <RTC::RTC()>:
c0027a74:	83 ec 1c             	sub    esp,0x1c
c0027a77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a7b:	83 ec 08             	sub    esp,0x8
c0027a7e:	68 cb 31 03 c0       	push   0xc00331cb
c0027a83:	50                   	push   eax
c0027a84:	e8 e9 32 ff ff       	call   c001ad72 <Clock::Clock(char const*)>
c0027a89:	83 c4 10             	add    esp,0x10
c0027a8c:	ba e8 31 03 c0       	mov    edx,0xc00331e8
c0027a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a95:	89 10                	mov    DWORD PTR [eax],edx
c0027a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a9b:	83 ec 0c             	sub    esp,0xc
c0027a9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027aa2:	6a 01                	push   0x1
c0027aa4:	68 2e 7a 02 c0       	push   0xc0027a2e
c0027aa9:	6a 08                	push   0x8
c0027aab:	50                   	push   eax
c0027aac:	e8 a3 37 ff ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027ab1:	83 c4 20             	add    esp,0x20
c0027ab4:	89 c2                	mov    edx,eax
c0027ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027aba:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027ac0:	fa                   	cli    
c0027ac1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027ac6:	83 c0 01             	add    eax,0x1
c0027ac9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027ace:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027ad3:	83 ec 08             	sub    esp,0x8
c0027ad6:	6a 0b                	push   0xb
c0027ad8:	50                   	push   eax
c0027ad9:	e8 c6 df fe ff       	call   c0015aa4 <Computer::readCMOS(unsigned char)>
c0027ade:	83 c4 10             	add    esp,0x10
c0027ae1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027ae5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027aea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027aee:	83 ca 10             	or     edx,0x10
c0027af1:	0f b6 d2             	movzx  edx,dl
c0027af4:	83 ec 04             	sub    esp,0x4
c0027af7:	52                   	push   edx
c0027af8:	6a 0b                	push   0xb
c0027afa:	50                   	push   eax
c0027afb:	e8 bc e0 fe ff       	call   c0015bbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b00:	83 c4 10             	add    esp,0x10
c0027b03:	83 ec 0c             	sub    esp,0xc
c0027b06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027b0a:	e8 97 fa ff ff       	call   c00275a6 <RTC::completeRTCRefresh()>
c0027b0f:	83 c4 10             	add    esp,0x10
c0027b12:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b17:	83 e8 01             	sub    eax,0x1
c0027b1a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027b1f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b24:	85 c0                	test   eax,eax
c0027b26:	75 01                	jne    c0027b29 <RTC::RTC()+0xb5>
c0027b28:	fb                   	sti    
c0027b29:	90                   	nop
c0027b2a:	83 c4 1c             	add    esp,0x1c
c0027b2d:	c3                   	ret    
c0027b2e:	66 90                	xchg   ax,ax

c0027b30 <HalConsoleScroll(int, int)>:
c0027b30:	83 ec 10             	sub    esp,0x10
c0027b33:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027b3b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027b43:	90                   	nop
c0027b44:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027b49:	0f 8f e1 00 00 00    	jg     c0027c30 <HalConsoleScroll(int, int)+0x100>
c0027b4f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027b57:	90                   	nop
c0027b58:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027b60:	0f 8f be 00 00 00    	jg     c0027c24 <HalConsoleScroll(int, int)+0xf4>
c0027b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b6a:	89 d0                	mov    eax,edx
c0027b6c:	c1 e0 02             	shl    eax,0x2
c0027b6f:	01 d0                	add    eax,edx
c0027b71:	c1 e0 05             	shl    eax,0x5
c0027b74:	89 c2                	mov    edx,eax
c0027b76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b7a:	01 d0                	add    eax,edx
c0027b7c:	89 c2                	mov    edx,eax
c0027b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b89:	89 d0                	mov    eax,edx
c0027b8b:	c1 e0 02             	shl    eax,0x2
c0027b8e:	01 d0                	add    eax,edx
c0027b90:	c1 e0 05             	shl    eax,0x5
c0027b93:	89 c2                	mov    edx,eax
c0027b95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b99:	01 d0                	add    eax,edx
c0027b9b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ba5:	01 d0                	add    eax,edx
c0027ba7:	8a 11                	mov    dl,BYTE PTR [ecx]
c0027ba9:	88 10                	mov    BYTE PTR [eax],dl
c0027bab:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027bb0:	75 66                	jne    c0027c18 <HalConsoleScroll(int, int)+0xe8>
c0027bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bb6:	83 e0 01             	and    eax,0x1
c0027bb9:	74 39                	je     c0027bf4 <HalConsoleScroll(int, int)+0xc4>
c0027bbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027bbf:	83 e0 0f             	and    eax,0xf
c0027bc2:	88 c2                	mov    dl,al
c0027bc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027bc8:	c1 e0 04             	shl    eax,0x4
c0027bcb:	09 d0                	or     eax,edx
c0027bcd:	88 c1                	mov    cl,al
c0027bcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bd3:	89 d0                	mov    eax,edx
c0027bd5:	c1 e0 02             	shl    eax,0x2
c0027bd8:	01 d0                	add    eax,edx
c0027bda:	c1 e0 05             	shl    eax,0x5
c0027bdd:	89 c2                	mov    edx,eax
c0027bdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027be3:	01 d0                	add    eax,edx
c0027be5:	89 c2                	mov    edx,eax
c0027be7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027beb:	01 d0                	add    eax,edx
c0027bed:	88 ca                	mov    dl,cl
c0027bef:	88 10                	mov    BYTE PTR [eax],dl
c0027bf1:	eb 25                	jmp    c0027c18 <HalConsoleScroll(int, int)+0xe8>
c0027bf3:	90                   	nop
c0027bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bf8:	89 d0                	mov    eax,edx
c0027bfa:	c1 e0 02             	shl    eax,0x2
c0027bfd:	01 d0                	add    eax,edx
c0027bff:	c1 e0 05             	shl    eax,0x5
c0027c02:	89 c2                	mov    edx,eax
c0027c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c08:	01 d0                	add    eax,edx
c0027c0a:	89 c2                	mov    edx,eax
c0027c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c10:	01 d0                	add    eax,edx
c0027c12:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027c15:	8d 76 00             	lea    esi,[esi+0x0]
c0027c18:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027c1d:	e9 36 ff ff ff       	jmp    c0027b58 <HalConsoleScroll(int, int)+0x28>
c0027c22:	66 90                	xchg   ax,ax
c0027c24:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027c29:	e9 16 ff ff ff       	jmp    c0027b44 <HalConsoleScroll(int, int)+0x14>
c0027c2e:	66 90                	xchg   ax,ax
c0027c30:	90                   	nop
c0027c31:	83 c4 10             	add    esp,0x10
c0027c34:	c3                   	ret    
c0027c35:	8d 76 00             	lea    esi,[esi+0x0]

c0027c38 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027c38:	83 ec 14             	sub    esp,0x14
c0027c3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c3f:	88 04 24             	mov    BYTE PTR [esp],al
c0027c42:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027c45:	0f b6 c0             	movzx  eax,al
c0027c48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027c4c:	89 d1                	mov    ecx,edx
c0027c4e:	83 e1 0f             	and    ecx,0xf
c0027c51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027c55:	c1 e2 04             	shl    edx,0x4
c0027c58:	0f b6 d2             	movzx  edx,dl
c0027c5b:	09 ca                	or     edx,ecx
c0027c5d:	c1 e2 08             	shl    edx,0x8
c0027c60:	09 d0                	or     eax,edx
c0027c62:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027c67:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027c6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027c73:	89 d0                	mov    eax,edx
c0027c75:	c1 e0 02             	shl    eax,0x2
c0027c78:	01 d0                	add    eax,edx
c0027c7a:	c1 e0 04             	shl    eax,0x4
c0027c7d:	89 c2                	mov    edx,eax
c0027c7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c83:	01 d0                	add    eax,edx
c0027c85:	d1 e0                	shl    eax,1
c0027c87:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027c8f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0027c94:	66 89 10             	mov    WORD PTR [eax],dx
c0027c97:	90                   	nop
c0027c98:	83 c4 14             	add    esp,0x14
c0027c9b:	c3                   	ret    

c0027c9c <HalConsoleCursorUpdate(int, int)>:
c0027c9c:	83 ec 20             	sub    esp,0x20
c0027c9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ca3:	89 c2                	mov    edx,eax
c0027ca5:	c1 e2 02             	shl    edx,0x2
c0027ca8:	01 d0                	add    eax,edx
c0027caa:	c1 e0 04             	shl    eax,0x4
c0027cad:	89 c2                	mov    edx,eax
c0027caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027cb3:	01 d0                	add    eax,edx
c0027cb5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027cba:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027cc1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027cc6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027cca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027cce:	ee                   	out    dx,al
c0027ccf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027cd4:	0f b6 c0             	movzx  eax,al
c0027cd7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027cde:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027ce2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027ce6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cea:	ee                   	out    dx,al
c0027ceb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027cf2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027cf7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027cfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027cff:	ee                   	out    dx,al
c0027d00:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027d05:	c1 e8 08             	shr    eax,0x8
c0027d08:	0f b6 c0             	movzx  eax,al
c0027d0b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027d12:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027d16:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027d1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d1e:	ee                   	out    dx,al
c0027d1f:	90                   	nop
c0027d20:	83 c4 20             	add    esp,0x20
c0027d23:	c3                   	ret    

c0027d24 <FAT::getName()>:
c0027d24:	b8 1c 32 03 c0       	mov    eax,0xc003321c
c0027d29:	c3                   	ret    
c0027d2a:	66 90                	xchg   ax,ax

c0027d2c <FAT::tell(void*, unsigned long long*)>:
c0027d2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d31:	75 09                	jne    c0027d3c <FAT::tell(void*, unsigned long long*)+0x10>
c0027d33:	b8 04 00 00 00       	mov    eax,0x4
c0027d38:	c3                   	ret    
c0027d39:	8d 76 00             	lea    esi,[esi+0x0]
c0027d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d41:	75 09                	jne    c0027d4c <FAT::tell(void*, unsigned long long*)+0x20>
c0027d43:	b8 04 00 00 00       	mov    eax,0x4
c0027d48:	c3                   	ret    
c0027d49:	8d 76 00             	lea    esi,[esi+0x0]
c0027d4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d50:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027d53:	ba 00 00 00 00       	mov    edx,0x0
c0027d58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d5c:	89 01                	mov    DWORD PTR [ecx],eax
c0027d5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d61:	b8 00 00 00 00       	mov    eax,0x0
c0027d66:	c3                   	ret    
c0027d67:	90                   	nop

c0027d68 <FAT::stat(void*, unsigned long long*)>:
c0027d68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d6d:	75 09                	jne    c0027d78 <FAT::stat(void*, unsigned long long*)+0x10>
c0027d6f:	b8 04 00 00 00       	mov    eax,0x4
c0027d74:	c3                   	ret    
c0027d75:	8d 76 00             	lea    esi,[esi+0x0]
c0027d78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d7d:	75 09                	jne    c0027d88 <FAT::stat(void*, unsigned long long*)+0x20>
c0027d7f:	b8 04 00 00 00       	mov    eax,0x4
c0027d84:	c3                   	ret    
c0027d85:	8d 76 00             	lea    esi,[esi+0x0]
c0027d88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027d8f:	ba 00 00 00 00       	mov    edx,0x0
c0027d94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d98:	89 01                	mov    DWORD PTR [ecx],eax
c0027d9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d9d:	b8 00 00 00 00       	mov    eax,0x0
c0027da2:	c3                   	ret    
c0027da3:	90                   	nop

c0027da4 <FAT::~FAT()>:
c0027da4:	83 ec 0c             	sub    esp,0xc
c0027da7:	ba 68 32 03 c0       	mov    edx,0xc0033268
c0027dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db0:	89 10                	mov    DWORD PTR [eax],edx
c0027db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db6:	83 ec 0c             	sub    esp,0xc
c0027db9:	50                   	push   eax
c0027dba:	e8 d9 22 ff ff       	call   c001a098 <Filesystem::~Filesystem()>
c0027dbf:	83 c4 10             	add    esp,0x10
c0027dc2:	90                   	nop
c0027dc3:	83 c4 0c             	add    esp,0xc
c0027dc6:	c3                   	ret    
c0027dc7:	90                   	nop

c0027dc8 <FAT::~FAT()>:
c0027dc8:	83 ec 0c             	sub    esp,0xc
c0027dcb:	83 ec 0c             	sub    esp,0xc
c0027dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dd2:	e8 cd ff ff ff       	call   c0027da4 <FAT::~FAT()>
c0027dd7:	83 c4 10             	add    esp,0x10
c0027dda:	83 ec 08             	sub    esp,0x8
c0027ddd:	6a 08                	push   0x8
c0027ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027de3:	e8 2c 13 ff ff       	call   c0019114 <operator delete(void*, unsigned long)>
c0027de8:	83 c4 10             	add    esp,0x10
c0027deb:	83 c4 0c             	add    esp,0xc
c0027dee:	c3                   	ret    
c0027def:	90                   	nop

c0027df0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027df0:	83 ec 1c             	sub    esp,0x1c
c0027df3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027dfa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027dff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e03:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e0a:	83 f8 ff             	cmp    eax,0xffffffff
c0027e0d:	75 35                	jne    c0027e44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027e0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e13:	88 c2                	mov    dl,al
c0027e15:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e1a:	01 d0                	add    eax,edx
c0027e1c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e20:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027e26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e2a:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027e31:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e3a:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027e41:	eb 19                	jmp    c0027e5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027e43:	90                   	nop
c0027e44:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e48:	88 c2                	mov    dl,al
c0027e4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e4e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e55:	01 d0                	add    eax,edx
c0027e57:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e5b:	90                   	nop
c0027e5c:	83 ec 04             	sub    esp,0x4
c0027e5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e67:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027e6b:	50                   	push   eax
c0027e6c:	e8 7e d2 fd ff       	call   c00050ef <f_getlabel>
c0027e71:	83 c4 10             	add    esp,0x10
c0027e74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027e78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e7d:	75 09                	jne    c0027e88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027e7f:	b8 00 00 00 00       	mov    eax,0x0
c0027e84:	eb 0a                	jmp    c0027e90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027e86:	66 90                	xchg   ax,ax
c0027e88:	b8 01 00 00 00       	mov    eax,0x1
c0027e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0027e90:	83 c4 1c             	add    esp,0x1c
c0027e93:	c3                   	ret    

c0027e94 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027e94:	53                   	push   ebx
c0027e95:	83 ec 58             	sub    esp,0x58
c0027e98:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027ea0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027ea4:	b9 00 00 00 00       	mov    ecx,0x0
c0027ea9:	b8 3c 00 00 00       	mov    eax,0x3c
c0027eae:	83 e0 f8             	and    eax,0xfffffff8
c0027eb1:	89 c3                	mov    ebx,eax
c0027eb3:	b8 00 00 00 00       	mov    eax,0x0
c0027eb8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0027ebc:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0027ec0:	83 c0 08             	add    eax,0x8
c0027ec3:	39 d8                	cmp    eax,ebx
c0027ec5:	72 f1                	jb     c0027eb8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0027ec7:	01 c2                	add    edx,eax
c0027ec9:	89 0a                	mov    DWORD PTR [edx],ecx
c0027ecb:	83 c2 04             	add    edx,0x4
c0027ece:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ed2:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ed9:	83 f8 ff             	cmp    eax,0xffffffff
c0027edc:	75 36                	jne    c0027f14 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0027ede:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ee2:	88 c2                	mov    dl,al
c0027ee4:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ee9:	01 d0                	add    eax,edx
c0027eeb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027eef:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ef5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ef9:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f00:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f05:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027f09:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f10:	eb 1a                	jmp    c0027f2c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0027f12:	66 90                	xchg   ax,ax
c0027f14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027f18:	88 c2                	mov    dl,al
c0027f1a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027f1e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f25:	01 d0                	add    eax,edx
c0027f27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027f2b:	90                   	nop
c0027f2c:	83 ec 08             	sub    esp,0x8
c0027f2f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027f33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f37:	50                   	push   eax
c0027f38:	e8 33 89 fd ff       	call   c0000870 <strcat>
c0027f3d:	83 c4 10             	add    esp,0x10
c0027f40:	83 ec 0c             	sub    esp,0xc
c0027f43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f47:	50                   	push   eax
c0027f48:	e8 f6 d2 fd ff       	call   c0005243 <f_setlabel>
c0027f4d:	83 c4 10             	add    esp,0x10
c0027f50:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027f54:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027f59:	75 09                	jne    c0027f64 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0027f5b:	b8 00 00 00 00       	mov    eax,0x0
c0027f60:	eb 0a                	jmp    c0027f6c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0027f62:	66 90                	xchg   ax,ax
c0027f64:	b8 01 00 00 00       	mov    eax,0x1
c0027f69:	8d 76 00             	lea    esi,[esi+0x0]
c0027f6c:	83 c4 58             	add    esp,0x58
c0027f6f:	5b                   	pop    ebx
c0027f70:	c3                   	ret    
c0027f71:	90                   	nop
c0027f72:	66 90                	xchg   ax,ax

c0027f74 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027f74:	83 ec 2c             	sub    esp,0x2c
c0027f77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027f7f:	83 ec 08             	sub    esp,0x8
c0027f82:	68 40 32 03 c0       	push   0xc0033240
c0027f87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f8b:	e8 f0 87 fd ff       	call   c0000780 <strcmp>
c0027f90:	83 c4 10             	add    esp,0x10
c0027f93:	85 c0                	test   eax,eax
c0027f95:	0f 94 c0             	sete   al
c0027f98:	0f b6 c0             	movzx  eax,al
c0027f9b:	85 c0                	test   eax,eax
c0027f9d:	74 0d                	je     c0027fac <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027f9f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fa7:	e9 c0 00 00 00       	jmp    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fac:	83 ec 08             	sub    esp,0x8
c0027faf:	68 32 32 03 c0       	push   0xc0033232
c0027fb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fb8:	e8 c3 87 fd ff       	call   c0000780 <strcmp>
c0027fbd:	83 c4 10             	add    esp,0x10
c0027fc0:	85 c0                	test   eax,eax
c0027fc2:	0f 94 c0             	sete   al
c0027fc5:	0f b6 c0             	movzx  eax,al
c0027fc8:	85 c0                	test   eax,eax
c0027fca:	74 10                	je     c0027fdc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027fcc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fd4:	e9 93 00 00 00       	jmp    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0027fdc:	83 ec 08             	sub    esp,0x8
c0027fdf:	68 38 32 03 c0       	push   0xc0033238
c0027fe4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fe8:	e8 93 87 fd ff       	call   c0000780 <strcmp>
c0027fed:	83 c4 10             	add    esp,0x10
c0027ff0:	85 c0                	test   eax,eax
c0027ff2:	0f 94 c0             	sete   al
c0027ff5:	0f b6 c0             	movzx  eax,al
c0027ff8:	85 c0                	test   eax,eax
c0027ffa:	74 0c                	je     c0028008 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0027ffc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028004:	eb 66                	jmp    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028006:	66 90                	xchg   ax,ax
c0028008:	83 ec 08             	sub    esp,0x8
c002800b:	68 dc f3 02 c0       	push   0xc002f3dc
c0028010:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028014:	e8 67 87 fd ff       	call   c0000780 <strcmp>
c0028019:	83 c4 10             	add    esp,0x10
c002801c:	85 c0                	test   eax,eax
c002801e:	0f 94 c0             	sete   al
c0028021:	0f b6 c0             	movzx  eax,al
c0028024:	85 c0                	test   eax,eax
c0028026:	74 0c                	je     c0028034 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028028:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028030:	eb 3a                	jmp    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028032:	66 90                	xchg   ax,ax
c0028034:	83 ec 08             	sub    esp,0x8
c0028037:	68 3e 32 03 c0       	push   0xc003323e
c002803c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028040:	e8 3b 87 fd ff       	call   c0000780 <strcmp>
c0028045:	83 c4 10             	add    esp,0x10
c0028048:	85 c0                	test   eax,eax
c002804a:	0f 94 c0             	sete   al
c002804d:	0f b6 c0             	movzx  eax,al
c0028050:	85 c0                	test   eax,eax
c0028052:	74 0c                	je     c0028060 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028054:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002805c:	eb 0e                	jmp    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002805e:	66 90                	xchg   ax,ax
c0028060:	b8 08 00 00 00       	mov    eax,0x8
c0028065:	e9 ea 00 00 00       	jmp    c0028154 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002806a:	66 90                	xchg   ax,ax
c002806c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028078:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002807c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028083:	83 f8 ff             	cmp    eax,0xffffffff
c0028086:	75 34                	jne    c00280bc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028088:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002808c:	88 c2                	mov    dl,al
c002808e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028093:	01 d0                	add    eax,edx
c0028095:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028099:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002809f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00280a3:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00280aa:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00280af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00280b3:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00280ba:	eb 18                	jmp    c00280d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00280bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00280c0:	88 c2                	mov    dl,al
c00280c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00280c6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00280cd:	01 d0                	add    eax,edx
c00280cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00280d3:	90                   	nop
c00280d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00280d8:	88 04 24             	mov    BYTE PTR [esp],al
c00280db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00280df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00280e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00280eb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00280f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00280f8:	83 ec 0c             	sub    esp,0xc
c00280fb:	68 00 20 00 00       	push   0x2000
c0028100:	e8 d6 e2 fe ff       	call   c00163db <malloc>
c0028105:	83 c4 10             	add    esp,0x10
c0028108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002810c:	68 00 20 00 00       	push   0x2000
c0028111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028115:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028119:	50                   	push   eax
c002811a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002811e:	50                   	push   eax
c002811f:	e8 1c d4 fd ff       	call   c0005540 <f_mkfs>
c0028124:	83 c4 10             	add    esp,0x10
c0028127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002812b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028130:	75 0a                	jne    c002813c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0028132:	b8 00 00 00 00       	mov    eax,0x0
c0028137:	eb 1b                	jmp    c0028154 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028139:	8d 76 00             	lea    esi,[esi+0x0]
c002813c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028141:	75 09                	jne    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0028143:	b8 09 00 00 00       	mov    eax,0x9
c0028148:	eb 0a                	jmp    c0028154 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002814a:	66 90                	xchg   ax,ax
c002814c:	b8 01 00 00 00       	mov    eax,0x1
c0028151:	8d 76 00             	lea    esi,[esi+0x0]
c0028154:	83 c4 2c             	add    esp,0x2c
c0028157:	c3                   	ret    

c0028158 <FAT::tryMount(LogicalDisk*, int)>:
c0028158:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002815e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028163:	83 f8 14             	cmp    eax,0x14
c0028166:	75 18                	jne    c0028180 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028168:	83 ec 0c             	sub    esp,0xc
c002816b:	68 44 32 03 c0       	push   0xc0033244
c0028170:	e8 25 80 ff ff       	call   c002019a <KePanic(char const*)>
c0028175:	83 c4 10             	add    esp,0x10
c0028178:	b0 00                	mov    al,0x0
c002817a:	e9 ed 01 00 00       	jmp    c002836c <FAT::tryMount(LogicalDisk*, int)+0x214>
c002817f:	90                   	nop
c0028180:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028187:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002818d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028193:	3d 00 02 00 00       	cmp    eax,0x200
c0028198:	74 0a                	je     c00281a4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002819a:	b0 00                	mov    al,0x0
c002819c:	e9 cb 01 00 00       	jmp    c002836c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00281a1:	8d 76 00             	lea    esi,[esi+0x0]
c00281a4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00281ac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00281b3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281ba:	83 f8 ff             	cmp    eax,0xffffffff
c00281bd:	74 09                	je     c00281c8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00281bf:	b0 01                	mov    al,0x1
c00281c1:	e9 a6 01 00 00       	jmp    c002836c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00281c6:	66 90                	xchg   ax,ax
c00281c8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00281d2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00281da:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00281e1:	88 c2                	mov    dl,al
c00281e3:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281e8:	01 d0                	add    eax,edx
c00281ea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00281f1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281f7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00281fe:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028205:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002820a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028211:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028218:	83 ec 0c             	sub    esp,0xc
c002821b:	68 34 02 00 00       	push   0x234
c0028220:	e8 b6 e1 fe ff       	call   c00163db <malloc>
c0028225:	83 c4 10             	add    esp,0x10
c0028228:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c002822f:	83 ec 04             	sub    esp,0x4
c0028232:	6a 00                	push   0x0
c0028234:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002823b:	50                   	push   eax
c002823c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028243:	e8 f2 ba fd ff       	call   c0003d3a <f_mount>
c0028248:	83 c4 10             	add    esp,0x10
c002824b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028252:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002825a:	74 1c                	je     c0028278 <FAT::tryMount(LogicalDisk*, int)+0x120>
c002825c:	83 ec 0c             	sub    esp,0xc
c002825f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028266:	e8 90 e1 fe ff       	call   c00163fb <rfree>
c002826b:	83 c4 10             	add    esp,0x10
c002826e:	b0 00                	mov    al,0x0
c0028270:	e9 f7 00 00 00       	jmp    c002836c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028275:	8d 76 00             	lea    esi,[esi+0x0]
c0028278:	83 ec 04             	sub    esp,0x4
c002827b:	68 00 01 00 00       	push   0x100
c0028280:	6a 00                	push   0x0
c0028282:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028289:	50                   	push   eax
c002828a:	e8 61 82 fd ff       	call   c00004f0 <memset>
c002828f:	83 c4 10             	add    esp,0x10
c0028292:	83 ec 08             	sub    esp,0x8
c0028295:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002829c:	50                   	push   eax
c002829d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00282a4:	50                   	push   eax
c00282a5:	e8 c6 85 fd ff       	call   c0000870 <strcat>
c00282aa:	83 c4 10             	add    esp,0x10
c00282ad:	83 ec 08             	sub    esp,0x8
c00282b0:	68 52 32 03 c0       	push   0xc0033252
c00282b5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00282bc:	50                   	push   eax
c00282bd:	e8 ae 85 fd ff       	call   c0000870 <strcat>
c00282c2:	83 c4 10             	add    esp,0x10
c00282c5:	83 ec 04             	sub    esp,0x4
c00282c8:	6a 01                	push   0x1
c00282ca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00282d1:	50                   	push   eax
c00282d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282d6:	50                   	push   eax
c00282d7:	e8 c0 ba fd ff       	call   c0003d9c <f_open>
c00282dc:	83 c4 10             	add    esp,0x10
c00282df:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00282e6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00282ed:	85 c0                	test   eax,eax
c00282ef:	74 0b                	je     c00282fc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00282f1:	78 31                	js     c0028324 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282f3:	83 e8 04             	sub    eax,0x4
c00282f6:	83 f8 01             	cmp    eax,0x1
c00282f9:	77 29                	ja     c0028324 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282fb:	90                   	nop
c00282fc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0028304:	83 ec 0c             	sub    esp,0xc
c0028307:	8d 44 24 14          	lea    eax,[esp+0x14]
c002830b:	50                   	push   eax
c002830c:	e8 3b c2 fd ff       	call   c000454c <f_close>
c0028311:	83 c4 10             	add    esp,0x10
c0028314:	90                   	nop
c0028315:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c002831d:	85 c0                	test   eax,eax
c002831f:	74 43                	je     c0028364 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028321:	eb 31                	jmp    c0028354 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0028323:	90                   	nop
c0028324:	83 ec 0c             	sub    esp,0xc
c0028327:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002832e:	e8 c8 e0 fe ff       	call   c00163fb <rfree>
c0028333:	83 c4 10             	add    esp,0x10
c0028336:	83 ec 04             	sub    esp,0x4
c0028339:	6a 00                	push   0x0
c002833b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028342:	50                   	push   eax
c0028343:	6a 00                	push   0x0
c0028345:	e8 f0 b9 fd ff       	call   c0003d3a <f_mount>
c002834a:	83 c4 10             	add    esp,0x10
c002834d:	b0 00                	mov    al,0x0
c002834f:	eb 1b                	jmp    c002836c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028351:	8d 76 00             	lea    esi,[esi+0x0]
c0028354:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028359:	83 c0 01             	add    eax,0x1
c002835c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028361:	8d 76 00             	lea    esi,[esi+0x0]
c0028364:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002836b:	90                   	nop
c002836c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028372:	c3                   	ret    
c0028373:	90                   	nop

c0028374 <FAT::allocateSwapfile(char const*, int)>:
c0028374:	55                   	push   ebp
c0028375:	57                   	push   edi
c0028376:	56                   	push   esi
c0028377:	53                   	push   ebx
c0028378:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002837e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028389:	83 ec 0c             	sub    esp,0xc
c002838c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028393:	e8 43 e0 fe ff       	call   c00163db <malloc>
c0028398:	83 c4 10             	add    esp,0x10
c002839b:	89 c7                	mov    edi,eax
c002839d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00283a2:	83 ec 04             	sub    esp,0x4
c00283a5:	50                   	push   eax
c00283a6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00283ad:	57                   	push   edi
c00283ae:	e8 77 20 ff ff       	call   c001a42a <File::File(char const*, Process*)>
c00283b3:	83 c4 10             	add    esp,0x10
c00283b6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00283bd:	83 ec 04             	sub    esp,0x4
c00283c0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00283c4:	50                   	push   eax
c00283c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00283c9:	50                   	push   eax
c00283ca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283d1:	e8 74 23 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c00283d6:	83 c4 10             	add    esp,0x10
c00283d9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00283e0:	c1 e0 14             	shl    eax,0x14
c00283e3:	89 c7                	mov    edi,eax
c00283e5:	89 c5                	mov    ebp,eax
c00283e7:	c1 fd 1f             	sar    ebp,0x1f
c00283ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283f2:	89 f9                	mov    ecx,edi
c00283f4:	31 c1                	xor    ecx,eax
c00283f6:	89 cb                	mov    ebx,ecx
c00283f8:	89 e9                	mov    ecx,ebp
c00283fa:	31 d1                	xor    ecx,edx
c00283fc:	89 ce                	mov    esi,ecx
c00283fe:	89 f0                	mov    eax,esi
c0028400:	09 d8                	or     eax,ebx
c0028402:	0f 84 9c 00 00 00    	je     c00284a4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0028408:	83 ec 0c             	sub    esp,0xc
c002840b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028412:	e8 ff 21 ff ff       	call   c001a616 <File::unlink()>
c0028417:	83 c4 10             	add    esp,0x10
c002841a:	83 ec 08             	sub    esp,0x8
c002841d:	6a 12                	push   0x12
c002841f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028426:	e8 1d 20 ff ff       	call   c001a448 <File::open(FileOpenMode)>
c002842b:	83 c4 10             	add    esp,0x10
c002842e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028435:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002843b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028442:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028449:	c1 e0 14             	shl    eax,0x14
c002844c:	83 ec 04             	sub    esp,0x4
c002844f:	6a 01                	push   0x1
c0028451:	50                   	push   eax
c0028452:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028459:	e8 75 cf fd ff       	call   c00053d3 <f_expand>
c002845e:	83 c4 10             	add    esp,0x10
c0028461:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028468:	8b 00                	mov    eax,DWORD PTR [eax]
c002846a:	83 c0 10             	add    eax,0x10
c002846d:	8b 00                	mov    eax,DWORD PTR [eax]
c002846f:	83 ec 0c             	sub    esp,0xc
c0028472:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028476:	52                   	push   edx
c0028477:	8d 54 24 30          	lea    edx,[esp+0x30]
c002847b:	52                   	push   edx
c002847c:	6a 00                	push   0x0
c002847e:	68 00 04 00 00       	push   0x400
c0028483:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002848a:	ff d0                	call   eax
c002848c:	83 c4 20             	add    esp,0x20
c002848f:	83 ec 0c             	sub    esp,0xc
c0028492:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028499:	e8 08 20 ff ff       	call   c001a4a6 <File::close()>
c002849e:	83 c4 10             	add    esp,0x10
c00284a1:	8d 76 00             	lea    esi,[esi+0x0]
c00284a4:	83 ec 08             	sub    esp,0x8
c00284a7:	6a 01                	push   0x1
c00284a9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284b0:	e8 93 1f ff ff       	call   c001a448 <File::open(FileOpenMode)>
c00284b5:	83 c4 10             	add    esp,0x10
c00284b8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c1:	83 c0 0c             	add    eax,0xc
c00284c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c6:	83 ec 0c             	sub    esp,0xc
c00284c9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00284cd:	52                   	push   edx
c00284ce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00284d2:	52                   	push   edx
c00284d3:	6a 00                	push   0x0
c00284d5:	6a 04                	push   0x4
c00284d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00284de:	ff d0                	call   eax
c00284e0:	83 c4 20             	add    esp,0x20
c00284e3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284ea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284f0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284f7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00284fe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028501:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028508:	83 ec 0c             	sub    esp,0xc
c002850b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028512:	e8 8f 1f ff ff       	call   c001a4a6 <File::close()>
c0028517:	83 c4 10             	add    esp,0x10
c002851a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028521:	ba 00 00 00 00       	mov    edx,0x0
c0028526:	81 c4 3c 04 00 00    	add    esp,0x43c
c002852c:	5b                   	pop    ebx
c002852d:	5e                   	pop    esi
c002852e:	5f                   	pop    edi
c002852f:	5d                   	pop    ebp
c0028530:	c3                   	ret    
c0028531:	90                   	nop
c0028532:	66 90                	xchg   ax,ax

c0028534 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028534:	57                   	push   edi
c0028535:	56                   	push   esi
c0028536:	53                   	push   ebx
c0028537:	81 ec 50 02 00 00    	sub    esp,0x250
c002853d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028545:	74 0d                	je     c0028554 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028547:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002854f:	75 0f                	jne    c0028560 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028551:	8d 76 00             	lea    esi,[esi+0x0]
c0028554:	b8 04 00 00 00       	mov    eax,0x4
c0028559:	e9 3a 01 00 00       	jmp    c0028698 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002855e:	66 90                	xchg   ax,ax
c0028560:	83 ec 08             	sub    esp,0x8
c0028563:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002856a:	50                   	push   eax
c002856b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028572:	e8 a1 c2 fd ff       	call   c0004818 <f_readdir>
c0028577:	83 c4 10             	add    esp,0x10
c002857a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028581:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028588:	83 ec 0c             	sub    esp,0xc
c002858b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028592:	83 c0 16             	add    eax,0x16
c0028595:	50                   	push   eax
c0028596:	e8 e5 7f fd ff       	call   c0000580 <strlen>
c002859b:	83 c4 10             	add    esp,0x10
c002859e:	ba 00 00 00 00       	mov    edx,0x0
c00285a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00285a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00285ab:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00285b2:	0f b6 c0             	movzx  eax,al
c00285b5:	83 e0 10             	and    eax,0x10
c00285b8:	74 0a                	je     c00285c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00285ba:	b8 02 00 00 00       	mov    eax,0x2
c00285bf:	eb 0b                	jmp    c00285cc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00285c1:	8d 76 00             	lea    esi,[esi+0x0]
c00285c4:	b8 01 00 00 00       	mov    eax,0x1
c00285c9:	8d 76 00             	lea    esi,[esi+0x0]
c00285cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00285d0:	83 ec 08             	sub    esp,0x8
c00285d3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00285da:	83 c0 16             	add    eax,0x16
c00285dd:	50                   	push   eax
c00285de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285e2:	83 c0 10             	add    eax,0x10
c00285e5:	50                   	push   eax
c00285e6:	e8 65 80 fd ff       	call   c0000650 <strcpy>
c00285eb:	83 c4 10             	add    esp,0x10
c00285ee:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00285f5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00285fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028600:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028607:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002860e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028615:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002861c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028623:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002862a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028631:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028638:	89 c6                	mov    esi,eax
c002863a:	89 d7                	mov    edi,edx
c002863c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002863e:	89 c8                	mov    eax,ecx
c0028640:	89 fa                	mov    edx,edi
c0028642:	89 f3                	mov    ebx,esi
c0028644:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002864b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028652:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028659:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028660:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028666:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002866d:	0f be c0             	movsx  eax,al
c0028670:	85 c0                	test   eax,eax
c0028672:	75 08                	jne    c002867c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028674:	b8 07 00 00 00       	mov    eax,0x7
c0028679:	eb 1d                	jmp    c0028698 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002867b:	90                   	nop
c002867c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028683:	85 c0                	test   eax,eax
c0028685:	75 09                	jne    c0028690 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028687:	b8 00 00 00 00       	mov    eax,0x0
c002868c:	eb 0a                	jmp    c0028698 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002868e:	66 90                	xchg   ax,ax
c0028690:	b8 01 00 00 00       	mov    eax,0x1
c0028695:	8d 76 00             	lea    esi,[esi+0x0]
c0028698:	81 c4 50 02 00 00    	add    esp,0x250
c002869e:	5b                   	pop    ebx
c002869f:	5e                   	pop    esi
c00286a0:	5f                   	pop    edi
c00286a1:	c3                   	ret    
c00286a2:	66 90                	xchg   ax,ax

c00286a4 <FAT::read(void*, unsigned long, void*, int*)>:
c00286a4:	83 ec 1c             	sub    esp,0x1c
c00286a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00286ac:	74 0a                	je     c00286b8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00286ae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00286b3:	75 0b                	jne    c00286c0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00286b5:	8d 76 00             	lea    esi,[esi+0x0]
c00286b8:	b8 04 00 00 00       	mov    eax,0x4
c00286bd:	eb 41                	jmp    c0028700 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00286bf:	90                   	nop
c00286c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286c4:	50                   	push   eax
c00286c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00286c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00286cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00286d1:	e8 89 b9 fd ff       	call   c000405f <f_read>
c00286d6:	83 c4 10             	add    esp,0x10
c00286d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286e1:	89 c2                	mov    edx,eax
c00286e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00286e7:	89 10                	mov    DWORD PTR [eax],edx
c00286e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00286ed:	85 c0                	test   eax,eax
c00286ef:	75 07                	jne    c00286f8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00286f1:	b8 00 00 00 00       	mov    eax,0x0
c00286f6:	eb 08                	jmp    c0028700 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00286f8:	b8 01 00 00 00       	mov    eax,0x1
c00286fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028700:	83 c4 1c             	add    esp,0x1c
c0028703:	c3                   	ret    

c0028704 <FAT::write(void*, unsigned long, void*, int*)>:
c0028704:	83 ec 1c             	sub    esp,0x1c
c0028707:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002870c:	74 0a                	je     c0028718 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c002870e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028713:	75 0b                	jne    c0028720 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028715:	8d 76 00             	lea    esi,[esi+0x0]
c0028718:	b8 04 00 00 00       	mov    eax,0x4
c002871d:	eb 41                	jmp    c0028760 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c002871f:	90                   	nop
c0028720:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028724:	50                   	push   eax
c0028725:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028729:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002872d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028731:	e8 0a bb fd ff       	call   c0004240 <f_write>
c0028736:	83 c4 10             	add    esp,0x10
c0028739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002873d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028741:	89 c2                	mov    edx,eax
c0028743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028747:	89 10                	mov    DWORD PTR [eax],edx
c0028749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002874d:	85 c0                	test   eax,eax
c002874f:	75 07                	jne    c0028758 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028751:	b8 00 00 00 00       	mov    eax,0x0
c0028756:	eb 08                	jmp    c0028760 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028758:	b8 01 00 00 00       	mov    eax,0x1
c002875d:	8d 76 00             	lea    esi,[esi+0x0]
c0028760:	83 c4 1c             	add    esp,0x1c
c0028763:	c3                   	ret    

c0028764 <FAT::close(void*)>:
c0028764:	83 ec 1c             	sub    esp,0x1c
c0028767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002876c:	75 0a                	jne    c0028778 <FAT::close(void*)+0x14>
c002876e:	b8 04 00 00 00       	mov    eax,0x4
c0028773:	eb 3f                	jmp    c00287b4 <FAT::close(void*)+0x50>
c0028775:	8d 76 00             	lea    esi,[esi+0x0]
c0028778:	83 ec 0c             	sub    esp,0xc
c002877b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002877f:	e8 c8 bd fd ff       	call   c000454c <f_close>
c0028784:	83 c4 10             	add    esp,0x10
c0028787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028792:	e8 54 dc fe ff       	call   c00163eb <free>
c0028797:	83 c4 10             	add    esp,0x10
c002879a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002879e:	85 c0                	test   eax,eax
c00287a0:	75 0a                	jne    c00287ac <FAT::close(void*)+0x48>
c00287a2:	b8 00 00 00 00       	mov    eax,0x0
c00287a7:	eb 0b                	jmp    c00287b4 <FAT::close(void*)+0x50>
c00287a9:	8d 76 00             	lea    esi,[esi+0x0]
c00287ac:	b8 01 00 00 00       	mov    eax,0x1
c00287b1:	8d 76 00             	lea    esi,[esi+0x0]
c00287b4:	83 c4 1c             	add    esp,0x1c
c00287b7:	c3                   	ret    

c00287b8 <FAT::closeDir(void*)>:
c00287b8:	83 ec 1c             	sub    esp,0x1c
c00287bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287c0:	75 0a                	jne    c00287cc <FAT::closeDir(void*)+0x14>
c00287c2:	b8 04 00 00 00       	mov    eax,0x4
c00287c7:	eb 3f                	jmp    c0028808 <FAT::closeDir(void*)+0x50>
c00287c9:	8d 76 00             	lea    esi,[esi+0x0]
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287d3:	e8 1e c0 fd ff       	call   c00047f6 <f_closedir>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287df:	83 ec 0c             	sub    esp,0xc
c00287e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287e6:	e8 00 dc fe ff       	call   c00163eb <free>
c00287eb:	83 c4 10             	add    esp,0x10
c00287ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287f2:	85 c0                	test   eax,eax
c00287f4:	75 0a                	jne    c0028800 <FAT::closeDir(void*)+0x48>
c00287f6:	b8 00 00 00 00       	mov    eax,0x0
c00287fb:	eb 0b                	jmp    c0028808 <FAT::closeDir(void*)+0x50>
c00287fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028800:	b8 01 00 00 00       	mov    eax,0x1
c0028805:	8d 76 00             	lea    esi,[esi+0x0]
c0028808:	83 c4 1c             	add    esp,0x1c
c002880b:	c3                   	ret    

c002880c <FAT::truncate(void*, unsigned long long)>:
c002880c:	83 ec 2c             	sub    esp,0x2c
c002880f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028817:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002881b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002881f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028824:	75 0a                	jne    c0028830 <FAT::truncate(void*, unsigned long long)+0x24>
c0028826:	b8 04 00 00 00       	mov    eax,0x4
c002882b:	eb 47                	jmp    c0028874 <FAT::truncate(void*, unsigned long long)+0x68>
c002882d:	8d 76 00             	lea    esi,[esi+0x0]
c0028830:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028834:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028837:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002883b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028847:	83 ec 08             	sub    esp,0x8
c002884a:	50                   	push   eax
c002884b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002884f:	e8 27 bd fd ff       	call   c000457b <f_lseek>
c0028854:	83 c4 10             	add    esp,0x10
c0028857:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002885b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002885f:	85 c0                	test   eax,eax
c0028861:	75 09                	jne    c002886c <FAT::truncate(void*, unsigned long long)+0x60>
c0028863:	b8 00 00 00 00       	mov    eax,0x0
c0028868:	eb 0a                	jmp    c0028874 <FAT::truncate(void*, unsigned long long)+0x68>
c002886a:	66 90                	xchg   ax,ax
c002886c:	b8 01 00 00 00       	mov    eax,0x1
c0028871:	8d 76 00             	lea    esi,[esi+0x0]
c0028874:	83 c4 2c             	add    esp,0x2c
c0028877:	c3                   	ret    

c0028878 <FAT::seek(void*, unsigned long long)>:
c0028878:	83 ec 2c             	sub    esp,0x2c
c002887b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002887f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028883:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002888b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028890:	75 0a                	jne    c002889c <FAT::seek(void*, unsigned long long)+0x24>
c0028892:	b8 04 00 00 00       	mov    eax,0x4
c0028897:	eb 33                	jmp    c00288cc <FAT::seek(void*, unsigned long long)+0x54>
c0028899:	8d 76 00             	lea    esi,[esi+0x0]
c002889c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288a0:	83 ec 08             	sub    esp,0x8
c00288a3:	50                   	push   eax
c00288a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00288a8:	e8 ce bc fd ff       	call   c000457b <f_lseek>
c00288ad:	83 c4 10             	add    esp,0x10
c00288b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00288b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00288b8:	85 c0                	test   eax,eax
c00288ba:	75 08                	jne    c00288c4 <FAT::seek(void*, unsigned long long)+0x4c>
c00288bc:	b8 00 00 00 00       	mov    eax,0x0
c00288c1:	eb 09                	jmp    c00288cc <FAT::seek(void*, unsigned long long)+0x54>
c00288c3:	90                   	nop
c00288c4:	b8 01 00 00 00       	mov    eax,0x1
c00288c9:	8d 76 00             	lea    esi,[esi+0x0]
c00288cc:	83 c4 2c             	add    esp,0x2c
c00288cf:	c3                   	ret    

c00288d0 <fatWrapperReadDisk>:
c00288d0:	53                   	push   ebx
c00288d1:	83 ec 18             	sub    esp,0x18
c00288d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00288dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00288e1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00288e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00288ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00288f0:	ba 00 00 00 00       	mov    edx,0x0
c00288f5:	83 ec 0c             	sub    esp,0xc
c00288f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288fc:	53                   	push   ebx
c00288fd:	52                   	push   edx
c00288fe:	50                   	push   eax
c00288ff:	51                   	push   ecx
c0028900:	e8 99 3d ff ff       	call   c001c69e <LogicalDisk::read(unsigned long long, int, void*)>
c0028905:	83 c4 20             	add    esp,0x20
c0028908:	83 c4 18             	add    esp,0x18
c002890b:	5b                   	pop    ebx
c002890c:	c3                   	ret    
c002890d:	8d 76 00             	lea    esi,[esi+0x0]

c0028910 <fatWrapperWriteDisk>:
c0028910:	53                   	push   ebx
c0028911:	83 ec 18             	sub    esp,0x18
c0028914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028918:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002891c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028921:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028928:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002892c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028930:	ba 00 00 00 00       	mov    edx,0x0
c0028935:	83 ec 0c             	sub    esp,0xc
c0028938:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002893c:	53                   	push   ebx
c002893d:	52                   	push   edx
c002893e:	50                   	push   eax
c002893f:	51                   	push   ecx
c0028940:	e8 c5 3d ff ff       	call   c001c70a <LogicalDisk::write(unsigned long long, int, void*)>
c0028945:	83 c4 20             	add    esp,0x20
c0028948:	83 c4 18             	add    esp,0x18
c002894b:	5b                   	pop    ebx
c002894c:	c3                   	ret    
c002894d:	8d 76 00             	lea    esi,[esi+0x0]

c0028950 <fatWrapperIoctl>:
c0028950:	53                   	push   ebx
c0028951:	83 ec 28             	sub    esp,0x28
c0028954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028958:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002895c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028960:	88 d0                	mov    al,dl
c0028962:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028966:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002896b:	83 f8 02             	cmp    eax,0x2
c002896e:	75 34                	jne    c00289a4 <fatWrapperIoctl+0x54>
c0028970:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028974:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028978:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002897d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002898a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028990:	89 c2                	mov    edx,eax
c0028992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028996:	66 89 10             	mov    WORD PTR [eax],dx
c0028999:	b8 00 00 00 00       	mov    eax,0x0
c002899e:	e9 c5 00 00 00       	jmp    c0028a68 <fatWrapperIoctl+0x118>
c00289a3:	90                   	nop
c00289a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289a9:	83 f8 01             	cmp    eax,0x1
c00289ac:	75 6a                	jne    c0028a18 <fatWrapperIoctl+0xc8>
c00289ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00289b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00289b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289bb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c00289c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00289c8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00289ce:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00289d4:	89 c8                	mov    eax,ecx
c00289d6:	89 da                	mov    edx,ebx
c00289d8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00289dc:	c1 e0 0a             	shl    eax,0xa
c00289df:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00289e4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00289eb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00289f1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00289f7:	89 cb                	mov    ebx,ecx
c00289f9:	c1 fb 1f             	sar    ebx,0x1f
c00289fc:	53                   	push   ebx
c00289fd:	51                   	push   ecx
c00289fe:	52                   	push   edx
c00289ff:	50                   	push   eax
c0028a00:	e8 eb 5b 00 00       	call   c002e5f0 <__udivdi3>
c0028a05:	83 c4 10             	add    esp,0x10
c0028a08:	89 c2                	mov    edx,eax
c0028a0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028a0e:	89 10                	mov    DWORD PTR [eax],edx
c0028a10:	b8 00 00 00 00       	mov    eax,0x0
c0028a15:	eb 51                	jmp    c0028a68 <fatWrapperIoctl+0x118>
c0028a17:	90                   	nop
c0028a18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a1d:	85 c0                	test   eax,eax
c0028a1f:	75 07                	jne    c0028a28 <fatWrapperIoctl+0xd8>
c0028a21:	b8 00 00 00 00       	mov    eax,0x0
c0028a26:	eb 40                	jmp    c0028a68 <fatWrapperIoctl+0x118>
c0028a28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a2d:	83 f8 03             	cmp    eax,0x3
c0028a30:	75 1a                	jne    c0028a4c <fatWrapperIoctl+0xfc>
c0028a32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028a3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a3e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028a44:	b8 00 00 00 00       	mov    eax,0x0
c0028a49:	eb 1d                	jmp    c0028a68 <fatWrapperIoctl+0x118>
c0028a4b:	90                   	nop
c0028a4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a51:	83 f8 04             	cmp    eax,0x4
c0028a54:	75 0a                	jne    c0028a60 <fatWrapperIoctl+0x110>
c0028a56:	b8 00 00 00 00       	mov    eax,0x0
c0028a5b:	eb 0b                	jmp    c0028a68 <fatWrapperIoctl+0x118>
c0028a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a60:	b8 04 00 00 00       	mov    eax,0x4
c0028a65:	8d 76 00             	lea    esi,[esi+0x0]
c0028a68:	83 c4 28             	add    esp,0x28
c0028a6b:	5b                   	pop    ebx
c0028a6c:	c3                   	ret    
c0028a6d:	90                   	nop
c0028a6e:	66 90                	xchg   ax,ax

c0028a70 <FAT::FAT()>:
c0028a70:	83 ec 1c             	sub    esp,0x1c
c0028a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a77:	83 ec 0c             	sub    esp,0xc
c0028a7a:	50                   	push   eax
c0028a7b:	e8 f4 15 ff ff       	call   c001a074 <Filesystem::Filesystem()>
c0028a80:	83 c4 10             	add    esp,0x10
c0028a83:	ba 68 32 03 c0       	mov    edx,0xc0033268
c0028a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a8c:	89 10                	mov    DWORD PTR [eax],edx
c0028a8e:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028a98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028aa0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028aa5:	7f 19                	jg     c0028ac0 <FAT::FAT()+0x50>
c0028aa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028aab:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028ab6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028abb:	eb e3                	jmp    c0028aa0 <FAT::FAT()+0x30>
c0028abd:	8d 76 00             	lea    esi,[esi+0x0]
c0028ac0:	90                   	nop
c0028ac1:	83 c4 1c             	add    esp,0x1c
c0028ac4:	c3                   	ret    
c0028ac5:	90                   	nop
c0028ac6:	66 90                	xchg   ax,ax

c0028ac8 <FAT::fixFilepath(char*)>:
c0028ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028acc:	8a 00                	mov    al,BYTE PTR [eax]
c0028ace:	0f be c0             	movsx  eax,al
c0028ad1:	83 f8 40             	cmp    eax,0x40
c0028ad4:	7e 2e                	jle    c0028b04 <FAT::fixFilepath(char*)+0x3c>
c0028ad6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ada:	8a 00                	mov    al,BYTE PTR [eax]
c0028adc:	83 e8 41             	sub    eax,0x41
c0028adf:	88 c2                	mov    dl,al
c0028ae1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ae5:	88 10                	mov    BYTE PTR [eax],dl
c0028ae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aeb:	8a 00                	mov    al,BYTE PTR [eax]
c0028aed:	0f be c0             	movsx  eax,al
c0028af0:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028af7:	83 c0 30             	add    eax,0x30
c0028afa:	88 c2                	mov    dl,al
c0028afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b00:	88 10                	mov    BYTE PTR [eax],dl
c0028b02:	66 90                	xchg   ax,ax
c0028b04:	90                   	nop
c0028b05:	c3                   	ret    
c0028b06:	66 90                	xchg   ax,ax

c0028b08 <FAT::open(char const*, void**, FileOpenMode)>:
c0028b08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028b0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028b16:	74 0c                	je     c0028b24 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028b18:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028b20:	75 0e                	jne    c0028b30 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028b22:	66 90                	xchg   ax,ax
c0028b24:	b8 04 00 00 00       	mov    eax,0x4
c0028b29:	e9 46 01 00 00       	jmp    c0028c74 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028b2e:	66 90                	xchg   ax,ax
c0028b30:	83 ec 08             	sub    esp,0x8
c0028b33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b3e:	50                   	push   eax
c0028b3f:	e8 0c 7b fd ff       	call   c0000650 <strcpy>
c0028b44:	83 c4 10             	add    esp,0x10
c0028b47:	83 ec 08             	sub    esp,0x8
c0028b4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028b4e:	50                   	push   eax
c0028b4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b56:	e8 6d ff ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028b66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b6d:	83 e0 01             	and    eax,0x1
c0028b70:	74 12                	je     c0028b84 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028b72:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b79:	83 c8 01             	or     eax,0x1
c0028b7c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b83:	90                   	nop
c0028b84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b8b:	83 e0 04             	and    eax,0x4
c0028b8e:	74 24                	je     c0028bb4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028b90:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b97:	83 c8 30             	or     eax,0x30
c0028b9a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ba1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ba8:	83 c8 02             	or     eax,0x2
c0028bab:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bb2:	66 90                	xchg   ax,ax
c0028bb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028bbb:	83 e0 02             	and    eax,0x2
c0028bbe:	74 14                	je     c0028bd4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028bc0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bc7:	83 c8 02             	or     eax,0x2
c0028bca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0028bd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028bdb:	83 e0 08             	and    eax,0x8
c0028bde:	74 14                	je     c0028bf4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028be0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028be7:	83 c8 04             	or     eax,0x4
c0028bea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0028bf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028bfb:	83 e0 10             	and    eax,0x10
c0028bfe:	74 14                	je     c0028c14 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028c00:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c07:	83 c8 08             	or     eax,0x8
c0028c0a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c11:	8d 76 00             	lea    esi,[esi+0x0]
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	68 28 02 00 00       	push   0x228
c0028c1c:	e8 ba d7 fe ff       	call   c00163db <malloc>
c0028c21:	83 c4 10             	add    esp,0x10
c0028c24:	89 c2                	mov    edx,eax
c0028c26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c2d:	89 10                	mov    DWORD PTR [eax],edx
c0028c2f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028c37:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c40:	83 ec 04             	sub    esp,0x4
c0028c43:	52                   	push   edx
c0028c44:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028c48:	52                   	push   edx
c0028c49:	50                   	push   eax
c0028c4a:	e8 4d b1 fd ff       	call   c0003d9c <f_open>
c0028c4f:	83 c4 10             	add    esp,0x10
c0028c52:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028c59:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028c61:	74 09                	je     c0028c6c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028c63:	b8 01 00 00 00       	mov    eax,0x1
c0028c68:	eb 0a                	jmp    c0028c74 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c6a:	66 90                	xchg   ax,ax
c0028c6c:	b8 00 00 00 00       	mov    eax,0x0
c0028c71:	8d 76 00             	lea    esi,[esi+0x0]
c0028c74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028c7a:	c3                   	ret    
c0028c7b:	90                   	nop

c0028c7c <FAT::openDir(char const*, void**)>:
c0028c7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c8a:	74 0c                	je     c0028c98 <FAT::openDir(char const*, void**)+0x1c>
c0028c8c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c94:	75 0e                	jne    c0028ca4 <FAT::openDir(char const*, void**)+0x28>
c0028c96:	66 90                	xchg   ax,ax
c0028c98:	b8 04 00 00 00       	mov    eax,0x4
c0028c9d:	e9 82 00 00 00       	jmp    c0028d24 <FAT::openDir(char const*, void**)+0xa8>
c0028ca2:	66 90                	xchg   ax,ax
c0028ca4:	83 ec 08             	sub    esp,0x8
c0028ca7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028cae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028cb2:	50                   	push   eax
c0028cb3:	e8 98 79 fd ff       	call   c0000650 <strcpy>
c0028cb8:	83 c4 10             	add    esp,0x10
c0028cbb:	83 ec 08             	sub    esp,0x8
c0028cbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028cc2:	50                   	push   eax
c0028cc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028cca:	e8 f9 fd ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	6a 30                	push   0x30
c0028cd7:	e8 ff d6 fe ff       	call   c00163db <malloc>
c0028cdc:	83 c4 10             	add    esp,0x10
c0028cdf:	89 c2                	mov    edx,eax
c0028ce1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028ce8:	89 10                	mov    DWORD PTR [eax],edx
c0028cea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cf3:	83 ec 08             	sub    esp,0x8
c0028cf6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028cfa:	52                   	push   edx
c0028cfb:	50                   	push   eax
c0028cfc:	e8 2a ba fd ff       	call   c000472b <f_opendir>
c0028d01:	83 c4 10             	add    esp,0x10
c0028d04:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028d0b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028d13:	74 07                	je     c0028d1c <FAT::openDir(char const*, void**)+0xa0>
c0028d15:	b8 01 00 00 00       	mov    eax,0x1
c0028d1a:	eb 08                	jmp    c0028d24 <FAT::openDir(char const*, void**)+0xa8>
c0028d1c:	b8 00 00 00 00       	mov    eax,0x0
c0028d21:	8d 76 00             	lea    esi,[esi+0x0]
c0028d24:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d2a:	c3                   	ret    
c0028d2b:	90                   	nop

c0028d2c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028d2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028d32:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028d3a:	75 0c                	jne    c0028d48 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028d3c:	b8 04 00 00 00       	mov    eax,0x4
c0028d41:	e9 d6 00 00 00       	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d46:	66 90                	xchg   ax,ax
c0028d48:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028d50:	75 0a                	jne    c0028d5c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028d52:	b8 04 00 00 00       	mov    eax,0x4
c0028d57:	e9 c0 00 00 00       	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d5c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028d64:	75 0a                	jne    c0028d70 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028d66:	b8 04 00 00 00       	mov    eax,0x4
c0028d6b:	e9 ac 00 00 00       	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d70:	83 ec 08             	sub    esp,0x8
c0028d73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d81:	50                   	push   eax
c0028d82:	e8 c9 78 fd ff       	call   c0000650 <strcpy>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	83 ec 08             	sub    esp,0x8
c0028d8d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028d94:	50                   	push   eax
c0028d95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d9c:	e8 27 fd ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 ec 08             	sub    esp,0x8
c0028da7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028dab:	50                   	push   eax
c0028dac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028db3:	50                   	push   eax
c0028db4:	e8 f1 ba fd ff       	call   c00048aa <f_stat>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028dc3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028dca:	85 c0                	test   eax,eax
c0028dcc:	74 0a                	je     c0028dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028dce:	83 f8 04             	cmp    eax,0x4
c0028dd1:	74 39                	je     c0028e0c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028dd3:	eb 3f                	jmp    c0028e14 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0028dd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028ddc:	0f b6 c0             	movzx  eax,al
c0028ddf:	83 e0 10             	and    eax,0x10
c0028de2:	0f 95 c2             	setne  dl
c0028de5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028dec:	88 10                	mov    BYTE PTR [eax],dl
c0028dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df2:	ba 00 00 00 00       	mov    edx,0x0
c0028df7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028dfe:	89 01                	mov    DWORD PTR [ecx],eax
c0028e00:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028e03:	b8 00 00 00 00       	mov    eax,0x0
c0028e08:	eb 12                	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e0a:	66 90                	xchg   ax,ax
c0028e0c:	b8 02 00 00 00       	mov    eax,0x2
c0028e11:	eb 09                	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e13:	90                   	nop
c0028e14:	b8 01 00 00 00       	mov    eax,0x1
c0028e19:	8d 76 00             	lea    esi,[esi+0x0]
c0028e1c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028e22:	c3                   	ret    
c0028e23:	90                   	nop

c0028e24 <FAT::unlink(char const*)>:
c0028e24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028e2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e32:	75 08                	jne    c0028e3c <FAT::unlink(char const*)+0x18>
c0028e34:	b8 04 00 00 00       	mov    eax,0x4
c0028e39:	eb 61                	jmp    c0028e9c <FAT::unlink(char const*)+0x78>
c0028e3b:	90                   	nop
c0028e3c:	83 ec 08             	sub    esp,0x8
c0028e3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e4a:	50                   	push   eax
c0028e4b:	e8 00 78 fd ff       	call   c0000650 <strcpy>
c0028e50:	83 c4 10             	add    esp,0x10
c0028e53:	83 ec 08             	sub    esp,0x8
c0028e56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e5a:	50                   	push   eax
c0028e5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e62:	e8 61 fc ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e71:	50                   	push   eax
c0028e72:	e8 a5 bc fd ff       	call   c0004b1c <f_unlink>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e81:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e88:	85 c0                	test   eax,eax
c0028e8a:	75 08                	jne    c0028e94 <FAT::unlink(char const*)+0x70>
c0028e8c:	b8 00 00 00 00       	mov    eax,0x0
c0028e91:	eb 09                	jmp    c0028e9c <FAT::unlink(char const*)+0x78>
c0028e93:	90                   	nop
c0028e94:	b8 01 00 00 00       	mov    eax,0x1
c0028e99:	8d 76 00             	lea    esi,[esi+0x0]
c0028e9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028ea2:	c3                   	ret    
c0028ea3:	90                   	nop

c0028ea4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028ea4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028eaa:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0028eb1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0028eb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028ebc:	88 d0                	mov    al,dl
c0028ebe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028ec2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028eca:	75 0c                	jne    c0028ed8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0028ecc:	b8 04 00 00 00       	mov    eax,0x4
c0028ed1:	e9 7e 01 00 00       	jmp    c0029054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0028ed6:	66 90                	xchg   ax,ax
c0028ed8:	83 ec 08             	sub    esp,0x8
c0028edb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028ee2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028ee6:	50                   	push   eax
c0028ee7:	e8 64 77 fd ff       	call   c0000650 <strcpy>
c0028eec:	83 c4 10             	add    esp,0x10
c0028eef:	83 ec 08             	sub    esp,0x8
c0028ef2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028ef6:	50                   	push   eax
c0028ef7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028efe:	e8 c5 fb ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028f0e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028f16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f1b:	83 e0 01             	and    eax,0x1
c0028f1e:	74 14                	je     c0028f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0028f20:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f27:	83 c8 01             	or     eax,0x1
c0028f2a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f31:	8d 76 00             	lea    esi,[esi+0x0]
c0028f34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f39:	83 e0 02             	and    eax,0x2
c0028f3c:	74 12                	je     c0028f50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0028f3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f45:	83 c8 20             	or     eax,0x20
c0028f48:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f4f:	90                   	nop
c0028f50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f55:	83 e0 04             	and    eax,0x4
c0028f58:	74 12                	je     c0028f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0028f5a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f61:	83 c8 04             	or     eax,0x4
c0028f64:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f6b:	90                   	nop
c0028f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f71:	83 e0 08             	and    eax,0x8
c0028f74:	74 12                	je     c0028f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0028f76:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f7d:	83 c8 02             	or     eax,0x2
c0028f80:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f87:	90                   	nop
c0028f88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f8d:	83 e0 01             	and    eax,0x1
c0028f90:	74 12                	je     c0028fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0028f92:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f99:	83 c8 01             	or     eax,0x1
c0028f9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fa3:	90                   	nop
c0028fa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fa9:	83 e0 02             	and    eax,0x2
c0028fac:	74 12                	je     c0028fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0028fae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fb5:	83 c8 20             	or     eax,0x20
c0028fb8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fbf:	90                   	nop
c0028fc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fc5:	83 e0 04             	and    eax,0x4
c0028fc8:	74 12                	je     c0028fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0028fca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fd1:	83 c8 04             	or     eax,0x4
c0028fd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fdb:	90                   	nop
c0028fdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fe1:	83 e0 08             	and    eax,0x8
c0028fe4:	74 12                	je     c0028ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0028fe6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fed:	83 c8 02             	or     eax,0x2
c0028ff0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028ff7:	90                   	nop
c0028ff8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0028fff:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029006:	09 d0                	or     eax,edx
c0029008:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002900f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0029017:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002901f:	83 ec 04             	sub    esp,0x4
c0029022:	52                   	push   edx
c0029023:	50                   	push   eax
c0029024:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029028:	50                   	push   eax
c0029029:	e8 61 bf fd ff       	call   c0004f8f <f_chmod>
c002902e:	83 c4 10             	add    esp,0x10
c0029031:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029038:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002903f:	85 c0                	test   eax,eax
c0029041:	75 09                	jne    c002904c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0029043:	b8 00 00 00 00       	mov    eax,0x0
c0029048:	eb 0a                	jmp    c0029054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c002904a:	66 90                	xchg   ax,ax
c002904c:	b8 01 00 00 00       	mov    eax,0x1
c0029051:	8d 76 00             	lea    esi,[esi+0x0]
c0029054:	81 c4 2c 01 00 00    	add    esp,0x12c
c002905a:	c3                   	ret    
c002905b:	90                   	nop

c002905c <FAT::rename(char const*, char const*)>:
c002905c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029062:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002906a:	74 0c                	je     c0029078 <FAT::rename(char const*, char const*)+0x1c>
c002906c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029074:	75 0e                	jne    c0029084 <FAT::rename(char const*, char const*)+0x28>
c0029076:	66 90                	xchg   ax,ax
c0029078:	b8 04 00 00 00       	mov    eax,0x4
c002907d:	e9 9e 00 00 00       	jmp    c0029120 <FAT::rename(char const*, char const*)+0xc4>
c0029082:	66 90                	xchg   ax,ax
c0029084:	83 ec 08             	sub    esp,0x8
c0029087:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002908e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029095:	50                   	push   eax
c0029096:	e8 b5 75 fd ff       	call   c0000650 <strcpy>
c002909b:	83 c4 10             	add    esp,0x10
c002909e:	83 ec 08             	sub    esp,0x8
c00290a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00290a8:	50                   	push   eax
c00290a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00290b0:	e8 13 fa ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	83 ec 08             	sub    esp,0x8
c00290bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00290c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00290c6:	50                   	push   eax
c00290c7:	e8 84 75 fd ff       	call   c0000650 <strcpy>
c00290cc:	83 c4 10             	add    esp,0x10
c00290cf:	83 ec 08             	sub    esp,0x8
c00290d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290d6:	50                   	push   eax
c00290d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00290de:	e8 e5 f9 ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c00290e3:	83 c4 10             	add    esp,0x10
c00290e6:	83 ec 08             	sub    esp,0x8
c00290e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290ed:	50                   	push   eax
c00290ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00290f5:	50                   	push   eax
c00290f6:	e8 dc bc fd ff       	call   c0004dd7 <f_rename>
c00290fb:	83 c4 10             	add    esp,0x10
c00290fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0029105:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002910c:	85 c0                	test   eax,eax
c002910e:	75 08                	jne    c0029118 <FAT::rename(char const*, char const*)+0xbc>
c0029110:	b8 00 00 00 00       	mov    eax,0x0
c0029115:	eb 09                	jmp    c0029120 <FAT::rename(char const*, char const*)+0xc4>
c0029117:	90                   	nop
c0029118:	b8 01 00 00 00       	mov    eax,0x1
c002911d:	8d 76 00             	lea    esi,[esi+0x0]
c0029120:	81 c4 1c 02 00 00    	add    esp,0x21c
c0029126:	c3                   	ret    
c0029127:	90                   	nop

c0029128 <FAT::mkdir(char const*)>:
c0029128:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002912e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029136:	75 08                	jne    c0029140 <FAT::mkdir(char const*)+0x18>
c0029138:	b8 04 00 00 00       	mov    eax,0x4
c002913d:	eb 61                	jmp    c00291a0 <FAT::mkdir(char const*)+0x78>
c002913f:	90                   	nop
c0029140:	83 ec 08             	sub    esp,0x8
c0029143:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002914a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002914e:	50                   	push   eax
c002914f:	e8 fc 74 fd ff       	call   c0000650 <strcpy>
c0029154:	83 c4 10             	add    esp,0x10
c0029157:	83 ec 08             	sub    esp,0x8
c002915a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002915e:	50                   	push   eax
c002915f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029166:	e8 5d f9 ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 ec 0c             	sub    esp,0xc
c0029171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029175:	50                   	push   eax
c0029176:	e8 c1 ba fd ff       	call   c0004c3c <f_mkdir>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029185:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002918c:	85 c0                	test   eax,eax
c002918e:	75 08                	jne    c0029198 <FAT::mkdir(char const*)+0x70>
c0029190:	b8 00 00 00 00       	mov    eax,0x0
c0029195:	eb 09                	jmp    c00291a0 <FAT::mkdir(char const*)+0x78>
c0029197:	90                   	nop
c0029198:	b8 01 00 00 00       	mov    eax,0x1
c002919d:	8d 76 00             	lea    esi,[esi+0x0]
c00291a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00291a6:	c3                   	ret    
c00291a7:	90                   	nop

c00291a8 <FAT::exists(char const*)>:
c00291a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00291ae:	83 ec 08             	sub    esp,0x8
c00291b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00291b8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00291bc:	50                   	push   eax
c00291bd:	e8 8e 74 fd ff       	call   c0000650 <strcpy>
c00291c2:	83 c4 10             	add    esp,0x10
c00291c5:	83 ec 08             	sub    esp,0x8
c00291c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00291cc:	50                   	push   eax
c00291cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00291d4:	e8 ef f8 ff ff       	call   c0028ac8 <FAT::fixFilepath(char*)>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 ec 08             	sub    esp,0x8
c00291df:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00291e6:	50                   	push   eax
c00291e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00291eb:	50                   	push   eax
c00291ec:	e8 b9 b6 fd ff       	call   c00048aa <f_stat>
c00291f1:	83 c4 10             	add    esp,0x10
c00291f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00291fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029202:	85 c0                	test   eax,eax
c0029204:	75 06                	jne    c002920c <FAT::exists(char const*)+0x64>
c0029206:	b0 01                	mov    al,0x1
c0029208:	eb 06                	jmp    c0029210 <FAT::exists(char const*)+0x68>
c002920a:	66 90                	xchg   ax,ax
c002920c:	b0 00                	mov    al,0x0
c002920e:	66 90                	xchg   ax,ax
c0029210:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029216:	c3                   	ret    
c0029217:	90                   	nop

c0029218 <isoReadDiscSectorHelper>:
c0029218:	83 ec 2c             	sub    esp,0x2c
c002921b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002921f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0029223:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029228:	83 e8 41             	sub    eax,0x41
c002922b:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0029232:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029236:	ba 00 00 00 00       	mov    edx,0x0
c002923b:	83 ec 0c             	sub    esp,0xc
c002923e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029242:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029246:	52                   	push   edx
c0029247:	50                   	push   eax
c0029248:	51                   	push   ecx
c0029249:	e8 50 34 ff ff       	call   c001c69e <LogicalDisk::read(unsigned long long, int, void*)>
c002924e:	83 c4 20             	add    esp,0x20
c0029251:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029255:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002925a:	74 0c                	je     c0029268 <isoReadDiscSectorHelper+0x50>
c002925c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029260:	c1 e0 0b             	shl    eax,0xb
c0029263:	eb 0b                	jmp    c0029270 <isoReadDiscSectorHelper+0x58>
c0029265:	8d 76 00             	lea    esi,[esi+0x0]
c0029268:	b8 00 00 00 00       	mov    eax,0x0
c002926d:	8d 76 00             	lea    esi,[esi+0x0]
c0029270:	83 c4 2c             	add    esp,0x2c
c0029273:	c3                   	ret    

c0029274 <iso_kprintf>:
c0029274:	83 ec 0c             	sub    esp,0xc
c0029277:	83 ec 08             	sub    esp,0x8
c002927a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002927e:	68 16 30 03 c0       	push   0xc0033016
c0029283:	e8 8a ff fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0029288:	83 c4 10             	add    esp,0x10
c002928b:	90                   	nop
c002928c:	83 c4 0c             	add    esp,0xc
c002928f:	c3                   	ret    

c0029290 <iso_kprintfd>:
c0029290:	83 ec 0c             	sub    esp,0xc
c0029293:	83 ec 08             	sub    esp,0x8
c0029296:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002929a:	68 4a 16 03 c0       	push   0xc003164a
c002929f:	e8 6e ff fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00292a4:	83 c4 10             	add    esp,0x10
c00292a7:	90                   	nop
c00292a8:	83 c4 0c             	add    esp,0xc
c00292ab:	c3                   	ret    

c00292ac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00292ac:	b8 08 00 00 00       	mov    eax,0x8
c00292b1:	c3                   	ret    

c00292b2 <ISO9660::truncate(void*, unsigned long long)>:
c00292b2:	b8 01 00 00 00       	mov    eax,0x1
c00292b7:	c3                   	ret    

c00292b8 <ISO9660::getName()>:
c00292b8:	b8 cc 32 03 c0       	mov    eax,0xc00332cc
c00292bd:	c3                   	ret    

c00292be <ISO9660::closeDir(void*)>:
c00292be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00292c4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00292c7:	90                   	nop

c00292c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00292c8:	b8 01 00 00 00       	mov    eax,0x1
c00292cd:	c3                   	ret    

c00292ce <ISO9660::unlink(char const*)>:
c00292ce:	b8 01 00 00 00       	mov    eax,0x1
c00292d3:	c3                   	ret    

c00292d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00292d4:	b8 03 00 00 00       	mov    eax,0x3
c00292d9:	c3                   	ret    

c00292da <ISO9660::rename(char const*, char const*)>:
c00292da:	b8 01 00 00 00       	mov    eax,0x1
c00292df:	c3                   	ret    

c00292e0 <ISO9660::mkdir(char const*)>:
c00292e0:	b8 01 00 00 00       	mov    eax,0x1
c00292e5:	c3                   	ret    

c00292e6 <ISO9660::~ISO9660()>:
c00292e6:	83 ec 0c             	sub    esp,0xc
c00292e9:	ba 0c 34 03 c0       	mov    edx,0xc003340c
c00292ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f2:	89 10                	mov    DWORD PTR [eax],edx
c00292f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f8:	83 ec 0c             	sub    esp,0xc
c00292fb:	50                   	push   eax
c00292fc:	e8 97 0d ff ff       	call   c001a098 <Filesystem::~Filesystem()>
c0029301:	83 c4 10             	add    esp,0x10
c0029304:	90                   	nop
c0029305:	83 c4 0c             	add    esp,0xc
c0029308:	c3                   	ret    
c0029309:	90                   	nop

c002930a <ISO9660::~ISO9660()>:
c002930a:	83 ec 0c             	sub    esp,0xc
c002930d:	83 ec 0c             	sub    esp,0xc
c0029310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029314:	e8 cd ff ff ff       	call   c00292e6 <ISO9660::~ISO9660()>
c0029319:	83 c4 10             	add    esp,0x10
c002931c:	83 ec 08             	sub    esp,0x8
c002931f:	6a 08                	push   0x8
c0029321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029325:	e8 ea fd fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002932a:	83 c4 10             	add    esp,0x10
c002932d:	83 c4 0c             	add    esp,0xc
c0029330:	c3                   	ret    
c0029331:	90                   	nop

c0029332 <ISO9660::exists(char const*)>:
c0029332:	83 ec 18             	sub    esp,0x18
c0029335:	68 e7 32 03 c0       	push   0xc00332e7
c002933a:	e8 5b 6e ff ff       	call   c002019a <KePanic(char const*)>
c002933f:	31 c0                	xor    eax,eax
c0029341:	83 c4 1c             	add    esp,0x1c
c0029344:	c3                   	ret    
c0029345:	90                   	nop

c0029346 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029346:	56                   	push   esi
c0029347:	53                   	push   ebx
c0029348:	53                   	push   ebx
c0029349:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002934d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029351:	85 db                	test   ebx,ebx
c0029353:	0f 84 ca 00 00 00    	je     c0029423 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029359:	85 f6                	test   esi,esi
c002935b:	0f 84 c2 00 00 00    	je     c0029423 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029361:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029366:	b8 03 00 00 00       	mov    eax,0x3
c002936b:	0f 85 b7 00 00 00    	jne    c0029428 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029371:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029373:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029379:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029380:	74 1b                	je     c002939d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029382:	85 c0                	test   eax,eax
c0029384:	74 10                	je     c0029396 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	68 05 33 03 c0       	push   0xc0033305
c002938e:	e8 07 6e ff ff       	call   c002019a <KePanic(char const*)>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	8a 03                	mov    al,BYTE PTR [ebx]
c0029398:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002939d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00293a0:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00293a7:	85 c0                	test   eax,eax
c00293a9:	74 09                	je     c00293b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00293ab:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00293b2:	74 48                	je     c00293fc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00293b4:	83 ec 0c             	sub    esp,0xc
c00293b7:	68 15 33 03 c0       	push   0xc0033315
c00293bc:	e8 51 fe fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00293c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00293c4:	83 c4 10             	add    esp,0x10
c00293c7:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00293ce:	85 c0                	test   eax,eax
c00293d0:	74 17                	je     c00293e9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00293d2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00293d9:	83 ec 0c             	sub    esp,0xc
c00293dc:	68 35 33 03 c0       	push   0xc0033335
c00293e1:	e8 2c fe fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00293e6:	83 c4 10             	add    esp,0x10
c00293e9:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00293f0:	83 ec 0c             	sub    esp,0xc
c00293f3:	50                   	push   eax
c00293f4:	e8 6a d7 fd ff       	call   c0006b63 <init_percd>
c00293f9:	83 c4 10             	add    esp,0x10
c00293fc:	51                   	push   ecx
c00293fd:	83 c3 03             	add    ebx,0x3
c0029400:	51                   	push   ecx
c0029401:	6a 00                	push   0x0
c0029403:	53                   	push   ebx
c0029404:	e8 1d d2 fd ff       	call   c0006626 <iso_open>
c0029409:	83 c4 10             	add    esp,0x10
c002940c:	89 c2                	mov    edx,eax
c002940e:	b8 01 00 00 00       	mov    eax,0x1
c0029413:	83 fa ff             	cmp    edx,0xffffffff
c0029416:	74 10                	je     c0029428 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029418:	83 c2 32             	add    edx,0x32
c002941b:	31 c0                	xor    eax,eax
c002941d:	01 d2                	add    edx,edx
c002941f:	89 16                	mov    DWORD PTR [esi],edx
c0029421:	eb 05                	jmp    c0029428 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029423:	b8 04 00 00 00       	mov    eax,0x4
c0029428:	5a                   	pop    edx
c0029429:	5b                   	pop    ebx
c002942a:	5e                   	pop    esi
c002942b:	c3                   	ret    

c002942c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002942c:	53                   	push   ebx
c002942d:	83 ec 08             	sub    esp,0x8
c0029430:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029434:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029438:	85 c0                	test   eax,eax
c002943a:	74 2d                	je     c0029469 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002943c:	85 db                	test   ebx,ebx
c002943e:	74 29                	je     c0029469 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029440:	52                   	push   edx
c0029441:	b9 02 00 00 00       	mov    ecx,0x2
c0029446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944a:	99                   	cdq    
c002944b:	f7 f9                	idiv   ecx
c002944d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029451:	83 e8 32             	sub    eax,0x32
c0029454:	50                   	push   eax
c0029455:	e8 74 d2 fd ff       	call   c00066ce <iso_read>
c002945a:	83 c4 10             	add    esp,0x10
c002945d:	89 03                	mov    DWORD PTR [ebx],eax
c002945f:	09 d0                	or     eax,edx
c0029461:	0f 94 c0             	sete   al
c0029464:	0f b6 c0             	movzx  eax,al
c0029467:	eb 05                	jmp    c002946e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029469:	b8 04 00 00 00       	mov    eax,0x4
c002946e:	83 c4 08             	add    esp,0x8
c0029471:	5b                   	pop    ebx
c0029472:	c3                   	ret    
c0029473:	90                   	nop

c0029474 <ISO9660::seek(void*, unsigned long long)>:
c0029474:	57                   	push   edi
c0029475:	b8 04 00 00 00       	mov    eax,0x4
c002947a:	56                   	push   esi
c002947b:	51                   	push   ecx
c002947c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029480:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029484:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029488:	85 d2                	test   edx,edx
c002948a:	74 26                	je     c00294b2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002948c:	89 d0                	mov    eax,edx
c002948e:	b9 02 00 00 00       	mov    ecx,0x2
c0029493:	6a 00                	push   0x0
c0029495:	99                   	cdq    
c0029496:	f7 f9                	idiv   ecx
c0029498:	57                   	push   edi
c0029499:	56                   	push   esi
c002949a:	83 e8 32             	sub    eax,0x32
c002949d:	50                   	push   eax
c002949e:	e8 41 d3 fd ff       	call   c00067e4 <iso_seek>
c00294a3:	83 c4 10             	add    esp,0x10
c00294a6:	31 f0                	xor    eax,esi
c00294a8:	31 fa                	xor    edx,edi
c00294aa:	09 d0                	or     eax,edx
c00294ac:	0f 95 c0             	setne  al
c00294af:	0f b6 c0             	movzx  eax,al
c00294b2:	5a                   	pop    edx
c00294b3:	5e                   	pop    esi
c00294b4:	5f                   	pop    edi
c00294b5:	c3                   	ret    

c00294b6 <ISO9660::tell(void*, unsigned long long*)>:
c00294b6:	53                   	push   ebx
c00294b7:	83 ec 08             	sub    esp,0x8
c00294ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00294be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00294c2:	85 c0                	test   eax,eax
c00294c4:	74 24                	je     c00294ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c00294c6:	85 db                	test   ebx,ebx
c00294c8:	74 20                	je     c00294ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c00294ca:	b9 02 00 00 00       	mov    ecx,0x2
c00294cf:	99                   	cdq    
c00294d0:	f7 f9                	idiv   ecx
c00294d2:	83 ec 0c             	sub    esp,0xc
c00294d5:	83 e8 32             	sub    eax,0x32
c00294d8:	50                   	push   eax
c00294d9:	e8 8a d3 fd ff       	call   c0006868 <iso_tell>
c00294de:	83 c4 10             	add    esp,0x10
c00294e1:	89 03                	mov    DWORD PTR [ebx],eax
c00294e3:	31 c0                	xor    eax,eax
c00294e5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00294e8:	eb 05                	jmp    c00294ef <ISO9660::tell(void*, unsigned long long*)+0x39>
c00294ea:	b8 04 00 00 00       	mov    eax,0x4
c00294ef:	83 c4 08             	add    esp,0x8
c00294f2:	5b                   	pop    ebx
c00294f3:	c3                   	ret    

c00294f4 <ISO9660::stat(void*, unsigned long long*)>:
c00294f4:	56                   	push   esi
c00294f5:	53                   	push   ebx
c00294f6:	83 ec 10             	sub    esp,0x10
c00294f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00294fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029501:	68 59 33 03 c0       	push   0xc0033359
c0029506:	e8 07 fd fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002950b:	83 c4 10             	add    esp,0x10
c002950e:	85 db                	test   ebx,ebx
c0029510:	74 2a                	je     c002953c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029512:	85 f6                	test   esi,esi
c0029514:	74 26                	je     c002953c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029516:	89 d8                	mov    eax,ebx
c0029518:	b9 02 00 00 00       	mov    ecx,0x2
c002951d:	99                   	cdq    
c002951e:	83 ec 0c             	sub    esp,0xc
c0029521:	f7 f9                	idiv   ecx
c0029523:	83 e8 32             	sub    eax,0x32
c0029526:	50                   	push   eax
c0029527:	e8 6d d3 fd ff       	call   c0006899 <iso_total>
c002952c:	83 c4 10             	add    esp,0x10
c002952f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0029536:	89 06                	mov    DWORD PTR [esi],eax
c0029538:	31 c0                	xor    eax,eax
c002953a:	eb 05                	jmp    c0029541 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c002953c:	b8 04 00 00 00       	mov    eax,0x4
c0029541:	5a                   	pop    edx
c0029542:	5b                   	pop    ebx
c0029543:	5e                   	pop    esi
c0029544:	c3                   	ret    
c0029545:	90                   	nop

c0029546 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029546:	55                   	push   ebp
c0029547:	57                   	push   edi
c0029548:	56                   	push   esi
c0029549:	53                   	push   ebx
c002954a:	83 ec 18             	sub    esp,0x18
c002954d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029551:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029555:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029559:	68 61 33 03 c0       	push   0xc0033361
c002955e:	e8 af fc fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c0029563:	83 c4 10             	add    esp,0x10
c0029566:	85 ff                	test   edi,edi
c0029568:	0f 94 c0             	sete   al
c002956b:	85 f6                	test   esi,esi
c002956d:	0f 94 c2             	sete   dl
c0029570:	09 d0                	or     eax,edx
c0029572:	a8 01                	test   al,0x1
c0029574:	0f 85 dd 00 00 00    	jne    c0029657 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002957a:	85 db                	test   ebx,ebx
c002957c:	0f 84 d5 00 00 00    	je     c0029657 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029582:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029585:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002958b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029592:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029599:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002959b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00295a1:	74 1b                	je     c00295be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00295a3:	85 c0                	test   eax,eax
c00295a5:	74 10                	je     c00295b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00295a7:	83 ec 0c             	sub    esp,0xc
c00295aa:	68 05 33 03 c0       	push   0xc0033305
c00295af:	e8 e6 6b ff ff       	call   c002019a <KePanic(char const*)>
c00295b4:	83 c4 10             	add    esp,0x10
c00295b7:	8a 03                	mov    al,BYTE PTR [ebx]
c00295b9:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00295be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295c1:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00295c8:	85 c0                	test   eax,eax
c00295ca:	74 09                	je     c00295d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00295cc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00295d3:	74 51                	je     c0029626 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00295d5:	83 ec 0c             	sub    esp,0xc
c00295d8:	68 69 33 03 c0       	push   0xc0033369
c00295dd:	e8 30 fc fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00295e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295e5:	83 c4 10             	add    esp,0x10
c00295e8:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00295f0:	74 21                	je     c0029613 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00295f2:	83 ec 0c             	sub    esp,0xc
c00295f5:	68 89 33 03 c0       	push   0xc0033389
c00295fa:	e8 13 fc fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00295ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029602:	83 c4 10             	add    esp,0x10
c0029605:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002960c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029613:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002961a:	83 ec 0c             	sub    esp,0xc
c002961d:	50                   	push   eax
c002961e:	e8 40 d5 fd ff       	call   c0006b63 <init_percd>
c0029623:	83 c4 10             	add    esp,0x10
c0029626:	52                   	push   edx
c0029627:	83 c3 03             	add    ebx,0x3
c002962a:	52                   	push   edx
c002962b:	6a 00                	push   0x0
c002962d:	53                   	push   ebx
c002962e:	e8 f3 cf fd ff       	call   c0006626 <iso_open>
c0029633:	83 c4 10             	add    esp,0x10
c0029636:	83 f8 ff             	cmp    eax,0xffffffff
c0029639:	89 c5                	mov    ebp,eax
c002963b:	75 21                	jne    c002965e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c002963d:	50                   	push   eax
c002963e:	50                   	push   eax
c002963f:	6a 01                	push   0x1
c0029641:	53                   	push   ebx
c0029642:	e8 df cf fd ff       	call   c0006626 <iso_open>
c0029647:	83 c4 10             	add    esp,0x10
c002964a:	ba 02 00 00 00       	mov    edx,0x2
c002964f:	40                   	inc    eax
c0029650:	74 2b                	je     c002967d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029652:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029655:	eb 24                	jmp    c002967b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029657:	ba 04 00 00 00       	mov    edx,0x4
c002965c:	eb 1f                	jmp    c002967d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002965e:	83 ec 0c             	sub    esp,0xc
c0029661:	50                   	push   eax
c0029662:	e8 32 d2 fd ff       	call   c0006899 <iso_total>
c0029667:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002966e:	89 07                	mov    DWORD PTR [edi],eax
c0029670:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029673:	e8 38 d0 fd ff       	call   c00066b0 <iso_close>
c0029678:	83 c4 10             	add    esp,0x10
c002967b:	31 d2                	xor    edx,edx
c002967d:	83 c4 0c             	add    esp,0xc
c0029680:	89 d0                	mov    eax,edx
c0029682:	5b                   	pop    ebx
c0029683:	5e                   	pop    esi
c0029684:	5f                   	pop    edi
c0029685:	5d                   	pop    ebp
c0029686:	c3                   	ret    
c0029687:	90                   	nop

c0029688 <ISO9660::close(void*)>:
c0029688:	83 ec 0c             	sub    esp,0xc
c002968b:	b8 04 00 00 00       	mov    eax,0x4
c0029690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029694:	85 d2                	test   edx,edx
c0029696:	74 1b                	je     c00296b3 <ISO9660::close(void*)+0x2b>
c0029698:	89 d0                	mov    eax,edx
c002969a:	b9 02 00 00 00       	mov    ecx,0x2
c002969f:	99                   	cdq    
c00296a0:	83 ec 0c             	sub    esp,0xc
c00296a3:	f7 f9                	idiv   ecx
c00296a5:	83 e8 32             	sub    eax,0x32
c00296a8:	50                   	push   eax
c00296a9:	e8 02 d0 fd ff       	call   c00066b0 <iso_close>
c00296ae:	83 c4 10             	add    esp,0x10
c00296b1:	31 c0                	xor    eax,eax
c00296b3:	83 c4 0c             	add    esp,0xc
c00296b6:	c3                   	ret    
c00296b7:	90                   	nop

c00296b8 <ISO9660::openDir(char const*, void**)>:
c00296b8:	56                   	push   esi
c00296b9:	53                   	push   ebx
c00296ba:	50                   	push   eax
c00296bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00296bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00296c3:	85 db                	test   ebx,ebx
c00296c5:	0f 84 bd 00 00 00    	je     c0029788 <ISO9660::openDir(char const*, void**)+0xd0>
c00296cb:	85 f6                	test   esi,esi
c00296cd:	0f 84 b5 00 00 00    	je     c0029788 <ISO9660::openDir(char const*, void**)+0xd0>
c00296d3:	8a 13                	mov    dl,BYTE PTR [ebx]
c00296d5:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00296db:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296e2:	74 1b                	je     c00296ff <ISO9660::openDir(char const*, void**)+0x47>
c00296e4:	85 c0                	test   eax,eax
c00296e6:	74 10                	je     c00296f8 <ISO9660::openDir(char const*, void**)+0x40>
c00296e8:	83 ec 0c             	sub    esp,0xc
c00296eb:	68 05 33 03 c0       	push   0xc0033305
c00296f0:	e8 a5 6a ff ff       	call   c002019a <KePanic(char const*)>
c00296f5:	83 c4 10             	add    esp,0x10
c00296f8:	8a 03                	mov    al,BYTE PTR [ebx]
c00296fa:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029702:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029709:	85 c0                	test   eax,eax
c002970b:	74 10                	je     c002971d <ISO9660::openDir(char const*, void**)+0x65>
c002970d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029714:	74 1a                	je     c0029730 <ISO9660::openDir(char const*, void**)+0x78>
c0029716:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002971d:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029724:	83 ec 0c             	sub    esp,0xc
c0029727:	50                   	push   eax
c0029728:	e8 36 d4 fd ff       	call   c0006b63 <init_percd>
c002972d:	83 c4 10             	add    esp,0x10
c0029730:	50                   	push   eax
c0029731:	83 c3 03             	add    ebx,0x3
c0029734:	50                   	push   eax
c0029735:	6a 01                	push   0x1
c0029737:	53                   	push   ebx
c0029738:	e8 e9 ce fd ff       	call   c0006626 <iso_open>
c002973d:	83 c4 10             	add    esp,0x10
c0029740:	83 f8 ff             	cmp    eax,0xffffffff
c0029743:	89 c3                	mov    ebx,eax
c0029745:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002974a:	75 1c                	jne    c0029768 <ISO9660::openDir(char const*, void**)+0xb0>
c002974c:	53                   	push   ebx
c002974d:	53                   	push   ebx
c002974e:	68 ad 33 03 c0       	push   0xc00333ad
c0029753:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029759:	e8 56 dc fe ff       	call   c00173b4 <VgaText::puts(char const*)>
c002975e:	83 c4 10             	add    esp,0x10
c0029761:	b8 01 00 00 00       	mov    eax,0x1
c0029766:	eb 25                	jmp    c002978d <ISO9660::openDir(char const*, void**)+0xd5>
c0029768:	51                   	push   ecx
c0029769:	01 db                	add    ebx,ebx
c002976b:	51                   	push   ecx
c002976c:	83 c3 65             	add    ebx,0x65
c002976f:	68 c0 33 03 c0       	push   0xc00333c0
c0029774:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002977a:	e8 35 dc fe ff       	call   c00173b4 <VgaText::puts(char const*)>
c002977f:	83 c4 10             	add    esp,0x10
c0029782:	31 c0                	xor    eax,eax
c0029784:	89 1e                	mov    DWORD PTR [esi],ebx
c0029786:	eb 05                	jmp    c002978d <ISO9660::openDir(char const*, void**)+0xd5>
c0029788:	b8 04 00 00 00       	mov    eax,0x4
c002978d:	5a                   	pop    edx
c002978e:	5b                   	pop    ebx
c002978f:	5e                   	pop    esi
c0029790:	c3                   	ret    
c0029791:	90                   	nop

c0029792 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029792:	55                   	push   ebp
c0029793:	57                   	push   edi
c0029794:	56                   	push   esi
c0029795:	53                   	push   ebx
c0029796:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002979c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00297a3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00297aa:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00297b1:	85 db                	test   ebx,ebx
c00297b3:	0f 84 e4 00 00 00    	je     c002989d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00297b9:	85 ed                	test   ebp,ebp
c00297bb:	0f 84 dc 00 00 00    	je     c002989d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00297c1:	83 ec 0c             	sub    esp,0xc
c00297c4:	68 d3 33 03 c0       	push   0xc00333d3
c00297c9:	e8 44 fa fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c00297ce:	89 d8                	mov    eax,ebx
c00297d0:	b9 02 00 00 00       	mov    ecx,0x2
c00297d5:	99                   	cdq    
c00297d6:	f7 f9                	idiv   ecx
c00297d8:	83 e8 32             	sub    eax,0x32
c00297db:	89 04 24             	mov    DWORD PTR [esp],eax
c00297de:	e8 08 d1 fd ff       	call   c00068eb <iso_readdir>
c00297e3:	83 c4 10             	add    esp,0x10
c00297e6:	85 c0                	test   eax,eax
c00297e8:	89 c3                	mov    ebx,eax
c00297ea:	75 38                	jne    c0029824 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00297ec:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00297f1:	53                   	push   ebx
c00297f2:	53                   	push   ebx
c00297f3:	68 de 33 03 c0       	push   0xc00333de
c00297f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00297fe:	e8 b1 db fe ff       	call   c00173b4 <VgaText::puts(char const*)>
c0029803:	83 c4 0c             	add    esp,0xc
c0029806:	68 10 01 00 00       	push   0x110
c002980b:	6a 00                	push   0x0
c002980d:	57                   	push   edi
c002980e:	e8 dd 6c fd ff       	call   c00004f0 <memset>
c0029813:	83 c4 10             	add    esp,0x10
c0029816:	b8 01 00 00 00       	mov    eax,0x1
c002981b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0029822:	eb 7e                	jmp    c00298a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029824:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002982a:	8d 70 08             	lea    esi,[eax+0x8]
c002982d:	83 ec 0c             	sub    esp,0xc
c0029830:	56                   	push   esi
c0029831:	e8 4a 6d fd ff       	call   c0000580 <strlen>
c0029836:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002983e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029842:	83 c4 10             	add    esp,0x10
c0029845:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029849:	75 0a                	jne    c0029855 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c002984b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c002984e:	b8 02 00 00 00       	mov    eax,0x2
c0029853:	74 05                	je     c002985a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0029855:	b8 01 00 00 00       	mov    eax,0x1
c002985a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002985e:	50                   	push   eax
c002985f:	50                   	push   eax
c0029860:	56                   	push   esi
c0029861:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029865:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029869:	50                   	push   eax
c002986a:	e8 e1 6d fd ff       	call   c0000650 <strcpy>
c002986f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029876:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029878:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c002987f:	5a                   	pop    edx
c0029880:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029885:	59                   	pop    ecx
c0029886:	68 f1 33 03 c0       	push   0xc00333f1
c002988b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029891:	e8 1e db fe ff       	call   c00173b4 <VgaText::puts(char const*)>
c0029896:	83 c4 10             	add    esp,0x10
c0029899:	31 c0                	xor    eax,eax
c002989b:	eb 05                	jmp    c00298a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c002989d:	b8 04 00 00 00       	mov    eax,0x4
c00298a2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00298a8:	5b                   	pop    ebx
c00298a9:	5e                   	pop    esi
c00298aa:	5f                   	pop    edi
c00298ab:	5d                   	pop    ebp
c00298ac:	c3                   	ret    

c00298ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00298ad:	57                   	push   edi
c00298ae:	56                   	push   esi
c00298af:	53                   	push   ebx
c00298b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00298b4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00298b8:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c00298be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00298c2:	0f be cb             	movsx  ecx,bl
c00298c5:	75 0b                	jne    c00298d2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00298c7:	0f be 05 40 46 03 c0 	movsx  eax,BYTE PTR ds:0xc0034640
c00298ce:	39 c8                	cmp    eax,ecx
c00298d0:	74 47                	je     c0029919 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00298d2:	83 ec 0c             	sub    esp,0xc
c00298d5:	31 d2                	xor    edx,edx
c00298d7:	68 a0 03 04 c0       	push   0xc00403a0
c00298dc:	6a 01                	push   0x1
c00298de:	52                   	push   edx
c00298df:	56                   	push   esi
c00298e0:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00298e7:	e8 b2 2d ff ff       	call   c001c69e <LogicalDisk::read(unsigned long long, int, void*)>
c00298ec:	83 c4 20             	add    esp,0x20
c00298ef:	85 c0                	test   eax,eax
c00298f1:	75 0e                	jne    c0029901 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00298f3:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c00298f9:	88 1d 40 46 03 c0    	mov    BYTE PTR ds:0xc0034640,bl
c00298ff:	eb 18                	jmp    c0029919 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029901:	50                   	push   eax
c0029902:	68 00 08 00 00       	push   0x800
c0029907:	6a 00                	push   0x0
c0029909:	57                   	push   edi
c002990a:	e8 e1 6b fd ff       	call   c00004f0 <memset>
c002990f:	83 c4 10             	add    esp,0x10
c0029912:	b8 01 00 00 00       	mov    eax,0x1
c0029917:	eb 0e                	jmp    c0029927 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029919:	be a0 03 04 c0       	mov    esi,0xc00403a0
c002991e:	b9 00 08 00 00       	mov    ecx,0x800
c0029923:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029925:	31 c0                	xor    eax,eax
c0029927:	5b                   	pop    ebx
c0029928:	5e                   	pop    esi
c0029929:	5f                   	pop    edi
c002992a:	c3                   	ret    
c002992b:	90                   	nop

c002992c <ISO9660::tryMount(LogicalDisk*, int)>:
c002992c:	53                   	push   ebx
c002992d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029933:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c002993d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029944:	8d 58 41             	lea    ebx,[eax+0x41]
c0029947:	0f be db             	movsx  ebx,bl
c002994a:	53                   	push   ebx
c002994b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002994f:	50                   	push   eax
c0029950:	6a 10                	push   0x10
c0029952:	e8 56 ff ff ff       	call   c00298ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029957:	83 c4 10             	add    esp,0x10
c002995a:	31 d2                	xor    edx,edx
c002995c:	85 c0                	test   eax,eax
c002995e:	75 33                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029960:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029965:	75 2c                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029967:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002996c:	75 25                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002996e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029973:	75 1e                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029975:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002997a:	75 17                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002997c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029981:	75 10                	jne    c0029993 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029983:	83 ec 0c             	sub    esp,0xc
c0029986:	53                   	push   ebx
c0029987:	e8 d7 d1 fd ff       	call   c0006b63 <init_percd>
c002998c:	83 c4 10             	add    esp,0x10
c002998f:	40                   	inc    eax
c0029990:	0f 95 c2             	setne  dl
c0029993:	81 c4 08 08 00 00    	add    esp,0x808
c0029999:	88 d0                	mov    al,dl
c002999b:	5b                   	pop    ebx
c002999c:	c3                   	ret    
c002999d:	90                   	nop

c002999e <ISO9660::ISO9660()>:
c002999e:	83 ec 0c             	sub    esp,0xc
c00299a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a5:	83 ec 0c             	sub    esp,0xc
c00299a8:	50                   	push   eax
c00299a9:	e8 c6 06 ff ff       	call   c001a074 <Filesystem::Filesystem()>
c00299ae:	83 c4 10             	add    esp,0x10
c00299b1:	ba 0c 34 03 c0       	mov    edx,0xc003340c
c00299b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ba:	89 10                	mov    DWORD PTR [eax],edx
c00299bc:	e8 b4 d2 fd ff       	call   c0006c75 <fs_iso9660_init>
c00299c1:	90                   	nop
c00299c2:	83 c4 0c             	add    esp,0xc
c00299c5:	c3                   	ret    

c00299c6 <SoundCard::beginPlayback()>:
c00299c6:	c7 44 24 04 70 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033470
c00299ce:	e9 c7 67 ff ff       	jmp    c002019a <KePanic(char const*)>
c00299d3:	90                   	nop

c00299d4 <SoundCard::stopPlayback()>:
c00299d4:	c7 44 24 04 70 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033470
c00299dc:	e9 b9 67 ff ff       	jmp    c002019a <KePanic(char const*)>
c00299e1:	90                   	nop

c00299e2 <SoundCard::SoundCard(char const*)>:
c00299e2:	83 ec 1c             	sub    esp,0x1c
c00299e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299e9:	83 ec 08             	sub    esp,0x8
c00299ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00299f0:	50                   	push   eax
c00299f1:	e8 14 1a ff ff       	call   c001b40a <Device::Device(char const*)>
c00299f6:	83 c4 10             	add    esp,0x10
c00299f9:	ba bc 34 03 c0       	mov    edx,0xc00334bc
c00299fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a02:	89 10                	mov    DWORD PTR [eax],edx
c0029a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a08:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a13:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a21:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a2f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a3d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029a47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029a4f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029a54:	7f 1a                	jg     c0029a70 <SoundCard::SoundCard(char const*)+0x8e>
c0029a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029a5e:	83 c2 54             	add    edx,0x54
c0029a61:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029a69:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029a6e:	eb df                	jmp    c0029a4f <SoundCard::SoundCard(char const*)+0x6d>
c0029a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a74:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a7b:	90                   	nop
c0029a7c:	83 c4 1c             	add    esp,0x1c
c0029a7f:	c3                   	ret    

c0029a80 <SoundCard::~SoundCard()>:
c0029a80:	83 ec 0c             	sub    esp,0xc
c0029a83:	ba bc 34 03 c0       	mov    edx,0xc00334bc
c0029a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a8c:	89 10                	mov    DWORD PTR [eax],edx
c0029a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a92:	83 ec 0c             	sub    esp,0xc
c0029a95:	50                   	push   eax
c0029a96:	e8 0f 17 ff ff       	call   c001b1aa <Device::~Device()>
c0029a9b:	83 c4 10             	add    esp,0x10
c0029a9e:	90                   	nop
c0029a9f:	83 c4 0c             	add    esp,0xc
c0029aa2:	c3                   	ret    
c0029aa3:	90                   	nop

c0029aa4 <SoundCard::~SoundCard()>:
c0029aa4:	83 ec 0c             	sub    esp,0xc
c0029aa7:	83 ec 0c             	sub    esp,0xc
c0029aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aae:	e8 cd ff ff ff       	call   c0029a80 <SoundCard::~SoundCard()>
c0029ab3:	83 c4 10             	add    esp,0x10
c0029ab6:	83 ec 08             	sub    esp,0x8
c0029ab9:	68 e8 01 00 00       	push   0x1e8
c0029abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac2:	e8 4d f6 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	83 c4 0c             	add    esp,0xc
c0029acd:	c3                   	ret    

c0029ace <SoundCard::configureRates(int, int, int)>:
c0029ace:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029ad2:	31 c0                	xor    eax,eax
c0029ad4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029adb:	75 20                	jne    c0029afd <SoundCard::configureRates(int, int, int)+0x2f>
c0029add:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029ae1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029aeb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029afb:	b0 01                	mov    al,0x1
c0029afd:	c3                   	ret    

c0029afe <SoundCard::getSamples16(int, short*)>:
c0029afe:	55                   	push   ebp
c0029aff:	57                   	push   edi
c0029b00:	31 ff                	xor    edi,edi
c0029b02:	56                   	push   esi
c0029b03:	53                   	push   ebx
c0029b04:	31 db                	xor    ebx,ebx
c0029b06:	83 ec 10             	sub    esp,0x10
c0029b09:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029b0d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b11:	8d 04 36             	lea    eax,[esi+esi*1]
c0029b14:	50                   	push   eax
c0029b15:	6a 00                	push   0x0
c0029b17:	55                   	push   ebp
c0029b18:	e8 d3 69 fd ff       	call   c00004f0 <memset>
c0029b1d:	83 c4 10             	add    esp,0x10
c0029b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b24:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0029b2b:	85 c0                	test   eax,eax
c0029b2d:	74 1a                	je     c0029b49 <SoundCard::getSamples16(int, short*)+0x4b>
c0029b2f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b33:	75 14                	jne    c0029b49 <SoundCard::getSamples16(int, short*)+0x4b>
c0029b35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029b39:	55                   	push   ebp
c0029b3a:	56                   	push   esi
c0029b3b:	50                   	push   eax
c0029b3c:	e8 f3 02 00 00       	call   c0029e34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029b41:	83 c4 10             	add    esp,0x10
c0029b44:	39 c3                	cmp    ebx,eax
c0029b46:	0f 4c d8             	cmovl  ebx,eax
c0029b49:	47                   	inc    edi
c0029b4a:	83 ff 20             	cmp    edi,0x20
c0029b4d:	75 d1                	jne    c0029b20 <SoundCard::getSamples16(int, short*)+0x22>
c0029b4f:	83 c4 0c             	add    esp,0xc
c0029b52:	89 d8                	mov    eax,ebx
c0029b54:	5b                   	pop    ebx
c0029b55:	5e                   	pop    esi
c0029b56:	5f                   	pop    edi
c0029b57:	5d                   	pop    ebp
c0029b58:	c3                   	ret    
c0029b59:	90                   	nop

c0029b5a <SoundCard::getSamples32(int, int*)>:
c0029b5a:	55                   	push   ebp
c0029b5b:	57                   	push   edi
c0029b5c:	31 ff                	xor    edi,edi
c0029b5e:	56                   	push   esi
c0029b5f:	31 f6                	xor    esi,esi
c0029b61:	53                   	push   ebx
c0029b62:	83 ec 10             	sub    esp,0x10
c0029b65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029b69:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b6d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029b71:	c1 e0 02             	shl    eax,0x2
c0029b74:	50                   	push   eax
c0029b75:	6a 00                	push   0x0
c0029b77:	55                   	push   ebp
c0029b78:	e8 73 69 fd ff       	call   c00004f0 <memset>
c0029b7d:	83 c4 10             	add    esp,0x10
c0029b80:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029b87:	85 c0                	test   eax,eax
c0029b89:	74 1a                	je     c0029ba5 <SoundCard::getSamples32(int, int*)+0x4b>
c0029b8b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b8f:	75 14                	jne    c0029ba5 <SoundCard::getSamples32(int, int*)+0x4b>
c0029b91:	53                   	push   ebx
c0029b92:	55                   	push   ebp
c0029b93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029b97:	50                   	push   eax
c0029b98:	e8 67 03 00 00       	call   c0029f04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029b9d:	83 c4 10             	add    esp,0x10
c0029ba0:	39 c6                	cmp    esi,eax
c0029ba2:	0f 4c f0             	cmovl  esi,eax
c0029ba5:	47                   	inc    edi
c0029ba6:	83 ff 20             	cmp    edi,0x20
c0029ba9:	75 d5                	jne    c0029b80 <SoundCard::getSamples32(int, int*)+0x26>
c0029bab:	85 f6                	test   esi,esi
c0029bad:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029bb4:	75 0f                	jne    c0029bc5 <SoundCard::getSamples32(int, int*)+0x6b>
c0029bb6:	85 c0                	test   eax,eax
c0029bb8:	74 1b                	je     c0029bd5 <SoundCard::getSamples32(int, int*)+0x7b>
c0029bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029bbc:	83 ec 0c             	sub    esp,0xc
c0029bbf:	53                   	push   ebx
c0029bc0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029bc3:	eb 0d                	jmp    c0029bd2 <SoundCard::getSamples32(int, int*)+0x78>
c0029bc5:	85 c0                	test   eax,eax
c0029bc7:	75 0c                	jne    c0029bd5 <SoundCard::getSamples32(int, int*)+0x7b>
c0029bc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029bcb:	83 ec 0c             	sub    esp,0xc
c0029bce:	53                   	push   ebx
c0029bcf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029bd2:	83 c4 10             	add    esp,0x10
c0029bd5:	83 c4 0c             	add    esp,0xc
c0029bd8:	89 f0                	mov    eax,esi
c0029bda:	5b                   	pop    ebx
c0029bdb:	5e                   	pop    esi
c0029bdc:	5f                   	pop    edi
c0029bdd:	5d                   	pop    ebp
c0029bde:	c3                   	ret    
c0029bdf:	90                   	nop

c0029be0 <SoundCard::addChannel(SoundPort*)>:
c0029be0:	83 ec 0c             	sub    esp,0xc
c0029be3:	31 c0                	xor    eax,eax
c0029be5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029be9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029bf1:	74 1b                	je     c0029c0e <SoundCard::addChannel(SoundPort*)+0x2e>
c0029bf3:	40                   	inc    eax
c0029bf4:	83 f8 20             	cmp    eax,0x20
c0029bf7:	75 f0                	jne    c0029be9 <SoundCard::addChannel(SoundPort*)+0x9>
c0029bf9:	83 ec 0c             	sub    esp,0xc
c0029bfc:	68 95 34 03 c0       	push   0xc0033495
c0029c01:	e8 94 65 ff ff       	call   c002019a <KePanic(char const*)>
c0029c06:	83 c4 10             	add    esp,0x10
c0029c09:	83 c8 ff             	or     eax,0xffffffff
c0029c0c:	eb 0b                	jmp    c0029c19 <SoundCard::addChannel(SoundPort*)+0x39>
c0029c0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029c12:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029c19:	83 c4 0c             	add    esp,0xc
c0029c1c:	c3                   	ret    
c0029c1d:	90                   	nop

c0029c1e <SoundCard::removeChannel(int)>:
c0029c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029c26:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029c31:	c3                   	ret    
c0029c32:	66 90                	xchg   ax,ax

c0029c34 <SoundPort::SoundPort(int, int, int, int)>:
c0029c34:	83 ec 0c             	sub    esp,0xc
c0029c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c3b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c46:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c52:	89 10                	mov    DWORD PTR [eax],edx
c0029c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029c5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029c67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c6a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029c6f:	75 13                	jne    c0029c84 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c77:	05 a0 0f 00 00       	add    eax,0xfa0
c0029c7c:	d1 e0                	shl    eax,1
c0029c7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029c82:	66 90                	xchg   ax,ax
c0029c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029c8c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c93:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029ca1:	c1 e0 02             	shl    eax,0x2
c0029ca4:	83 ec 0c             	sub    esp,0xc
c0029ca7:	50                   	push   eax
c0029ca8:	e8 2e c7 fe ff       	call   c00163db <malloc>
c0029cad:	83 c4 10             	add    esp,0x10
c0029cb0:	89 c2                	mov    edx,eax
c0029cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029cb9:	90                   	nop
c0029cba:	83 c4 0c             	add    esp,0xc
c0029cbd:	c3                   	ret    
c0029cbe:	66 90                	xchg   ax,ax

c0029cc0 <SoundPort::~SoundPort()>:
c0029cc0:	83 ec 0c             	sub    esp,0xc
c0029cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cc7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029cca:	85 c0                	test   eax,eax
c0029ccc:	74 1e                	je     c0029cec <SoundPort::~SoundPort()+0x2c>
c0029cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029cd5:	83 ec 0c             	sub    esp,0xc
c0029cd8:	50                   	push   eax
c0029cd9:	e8 0d c7 fe ff       	call   c00163eb <free>
c0029cde:	83 c4 10             	add    esp,0x10
c0029ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029cec:	90                   	nop
c0029ced:	83 c4 0c             	add    esp,0xc
c0029cf0:	c3                   	ret    
c0029cf1:	90                   	nop
c0029cf2:	66 90                	xchg   ax,ax

c0029cf4 <SoundPort::unpause()>:
c0029cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cf8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029cfc:	c3                   	ret    
c0029cfd:	90                   	nop
c0029cfe:	66 90                	xchg   ax,ax

c0029d00 <SoundPort::pause()>:
c0029d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d04:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029d08:	c3                   	ret    
c0029d09:	90                   	nop
c0029d0a:	66 90                	xchg   ax,ax

c0029d0c <SoundPort::getBufferUsed()>:
c0029d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d10:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029d13:	c3                   	ret    

c0029d14 <SoundPort::getBufferSize()>:
c0029d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029d1b:	c3                   	ret    

c0029d1c <SoundPort::buffer16(short*, int)>:
c0029d1c:	55                   	push   ebp
c0029d1d:	57                   	push   edi
c0029d1e:	56                   	push   esi
c0029d1f:	53                   	push   ebx
c0029d20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d24:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029d28:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029d2b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029d2e:	74 68                	je     c0029d98 <SoundPort::buffer16(short*, int)+0x7c>
c0029d30:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029d34:	85 c9                	test   ecx,ecx
c0029d36:	7e 60                	jle    c0029d98 <SoundPort::buffer16(short*, int)+0x7c>
c0029d38:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029d3c:	8d 70 01             	lea    esi,[eax+0x1]
c0029d3f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029d42:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029d45:	c1 e1 0f             	shl    ecx,0xf
c0029d48:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029d4b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d4e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d51:	74 4d                	je     c0029da0 <SoundPort::buffer16(short*, int)+0x84>
c0029d53:	31 f6                	xor    esi,esi
c0029d55:	eb 21                	jmp    c0029d78 <SoundPort::buffer16(short*, int)+0x5c>
c0029d57:	90                   	nop
c0029d58:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029d5d:	8d 79 01             	lea    edi,[ecx+0x1]
c0029d60:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029d63:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029d66:	c1 e3 0f             	shl    ebx,0xf
c0029d69:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029d6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d6f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d72:	74 1c                	je     c0029d90 <SoundPort::buffer16(short*, int)+0x74>
c0029d74:	89 c6                	mov    esi,eax
c0029d76:	66 90                	xchg   ax,ax
c0029d78:	8d 46 01             	lea    eax,[esi+0x1]
c0029d7b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029d7f:	75 d7                	jne    c0029d58 <SoundPort::buffer16(short*, int)+0x3c>
c0029d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029d85:	8d 76 00             	lea    esi,[esi+0x0]
c0029d88:	5b                   	pop    ebx
c0029d89:	5e                   	pop    esi
c0029d8a:	5f                   	pop    edi
c0029d8b:	5d                   	pop    ebp
c0029d8c:	c3                   	ret    
c0029d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0029d90:	5b                   	pop    ebx
c0029d91:	8d 46 02             	lea    eax,[esi+0x2]
c0029d94:	5e                   	pop    esi
c0029d95:	5f                   	pop    edi
c0029d96:	5d                   	pop    ebp
c0029d97:	c3                   	ret    
c0029d98:	5b                   	pop    ebx
c0029d99:	31 c0                	xor    eax,eax
c0029d9b:	5e                   	pop    esi
c0029d9c:	5f                   	pop    edi
c0029d9d:	5d                   	pop    ebp
c0029d9e:	c3                   	ret    
c0029d9f:	90                   	nop
c0029da0:	b8 01 00 00 00       	mov    eax,0x1
c0029da5:	eb e1                	jmp    c0029d88 <SoundPort::buffer16(short*, int)+0x6c>
c0029da7:	90                   	nop

c0029da8 <SoundPort::buffer32(int*, int)>:
c0029da8:	55                   	push   ebp
c0029da9:	57                   	push   edi
c0029daa:	56                   	push   esi
c0029dab:	53                   	push   ebx
c0029dac:	83 ec 04             	sub    esp,0x4
c0029daf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029db7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029dbb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029dbe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0029dc4:	74 5a                	je     c0029e20 <SoundPort::buffer32(int*, int)+0x78>
c0029dc6:	85 c0                	test   eax,eax
c0029dc8:	7e 56                	jle    c0029e20 <SoundPort::buffer32(int*, int)+0x78>
c0029dca:	8d 71 01             	lea    esi,[ecx+0x1]
c0029dcd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029dd0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029dd3:	8b 37                	mov    esi,DWORD PTR [edi]
c0029dd5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029dd8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ddb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dde:	74 4c                	je     c0029e2c <SoundPort::buffer32(int*, int)+0x84>
c0029de0:	31 f6                	xor    esi,esi
c0029de2:	eb 1c                	jmp    c0029e00 <SoundPort::buffer32(int*, int)+0x58>
c0029de4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029de7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029dea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029ded:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029df0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029df4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029df7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dfa:	74 18                	je     c0029e14 <SoundPort::buffer32(int*, int)+0x6c>
c0029dfc:	89 de                	mov    esi,ebx
c0029dfe:	66 90                	xchg   ax,ax
c0029e00:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029e03:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029e06:	75 dc                	jne    c0029de4 <SoundPort::buffer32(int*, int)+0x3c>
c0029e08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029e0b:	90                   	nop
c0029e0c:	83 c4 04             	add    esp,0x4
c0029e0f:	5b                   	pop    ebx
c0029e10:	5e                   	pop    esi
c0029e11:	5f                   	pop    edi
c0029e12:	5d                   	pop    ebp
c0029e13:	c3                   	ret    
c0029e14:	8d 46 02             	lea    eax,[esi+0x2]
c0029e17:	83 c4 04             	add    esp,0x4
c0029e1a:	5b                   	pop    ebx
c0029e1b:	5e                   	pop    esi
c0029e1c:	5f                   	pop    edi
c0029e1d:	5d                   	pop    ebp
c0029e1e:	c3                   	ret    
c0029e1f:	90                   	nop
c0029e20:	83 c4 04             	add    esp,0x4
c0029e23:	31 c0                	xor    eax,eax
c0029e25:	5b                   	pop    ebx
c0029e26:	5e                   	pop    esi
c0029e27:	5f                   	pop    edi
c0029e28:	5d                   	pop    ebp
c0029e29:	c3                   	ret    
c0029e2a:	66 90                	xchg   ax,ax
c0029e2c:	b8 01 00 00 00       	mov    eax,0x1
c0029e31:	eb d9                	jmp    c0029e0c <SoundPort::buffer32(int*, int)+0x64>
c0029e33:	90                   	nop

c0029e34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029e34:	55                   	push   ebp
c0029e35:	57                   	push   edi
c0029e36:	56                   	push   esi
c0029e37:	53                   	push   ebx
c0029e38:	83 ec 0c             	sub    esp,0xc
c0029e3b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029e43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029e47:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0029e4b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029e51:	39 03                	cmp    DWORD PTR [ebx],eax
c0029e53:	74 13                	je     c0029e68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0029e55:	83 ec 0c             	sub    esp,0xc
c0029e58:	68 e8 34 03 c0       	push   0xc00334e8
c0029e5d:	e8 38 63 ff ff       	call   c002019a <KePanic(char const*)>
c0029e62:	83 c4 10             	add    esp,0x10
c0029e65:	8d 76 00             	lea    esi,[esi+0x0]
c0029e68:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029e6e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029e71:	74 11                	je     c0029e84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0029e73:	83 ec 0c             	sub    esp,0xc
c0029e76:	68 27 35 03 c0       	push   0xc0033527
c0029e7b:	e8 1a 63 ff ff       	call   c002019a <KePanic(char const*)>
c0029e80:	83 c4 10             	add    esp,0x10
c0029e83:	90                   	nop
c0029e84:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029e8a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029e8d:	74 11                	je     c0029ea0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0029e8f:	83 ec 0c             	sub    esp,0xc
c0029e92:	68 27 35 03 c0       	push   0xc0033527
c0029e97:	e8 fe 62 ff ff       	call   c002019a <KePanic(char const*)>
c0029e9c:	83 c4 10             	add    esp,0x10
c0029e9f:	90                   	nop
c0029ea0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0029ea3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0029ea7:	85 f6                	test   esi,esi
c0029ea9:	7e 2d                	jle    c0029ed8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0029eab:	31 c0                	xor    eax,eax
c0029ead:	8d 76 00             	lea    esi,[esi+0x0]
c0029eb0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029eb3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0029eb6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0029ebc:	85 c9                	test   ecx,ecx
c0029ebe:	0f 49 d1             	cmovns edx,ecx
c0029ec1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0029ec5:	c1 fa 0f             	sar    edx,0xf
c0029ec8:	01 d1                	add    ecx,edx
c0029eca:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0029ece:	83 c0 01             	add    eax,0x1
c0029ed1:	39 f0                	cmp    eax,esi
c0029ed3:	75 db                	jne    c0029eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0029ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0029ed8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029edb:	83 ec 04             	sub    esp,0x4
c0029ede:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029ee1:	29 f0                	sub    eax,esi
c0029ee3:	c1 e0 02             	shl    eax,0x2
c0029ee6:	50                   	push   eax
c0029ee7:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029eea:	50                   	push   eax
c0029eeb:	52                   	push   edx
c0029eec:	e8 df 64 fd ff       	call   c00003d0 <memmove>
c0029ef1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029ef4:	29 f0                	sub    eax,esi
c0029ef6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029ef9:	83 c4 1c             	add    esp,0x1c
c0029efc:	89 f0                	mov    eax,esi
c0029efe:	5b                   	pop    ebx
c0029eff:	5e                   	pop    esi
c0029f00:	5f                   	pop    edi
c0029f01:	5d                   	pop    ebp
c0029f02:	c3                   	ret    
c0029f03:	90                   	nop

c0029f04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029f04:	55                   	push   ebp
c0029f05:	57                   	push   edi
c0029f06:	56                   	push   esi
c0029f07:	53                   	push   ebx
c0029f08:	83 ec 0c             	sub    esp,0xc
c0029f0b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029f0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029f13:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0029f17:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029f1b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029f21:	39 03                	cmp    DWORD PTR [ebx],eax
c0029f23:	74 13                	je     c0029f38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0029f25:	83 ec 0c             	sub    esp,0xc
c0029f28:	68 08 35 03 c0       	push   0xc0033508
c0029f2d:	e8 68 62 ff ff       	call   c002019a <KePanic(char const*)>
c0029f32:	83 c4 10             	add    esp,0x10
c0029f35:	8d 76 00             	lea    esi,[esi+0x0]
c0029f38:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029f3e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f41:	74 11                	je     c0029f54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0029f43:	83 ec 0c             	sub    esp,0xc
c0029f46:	68 43 35 03 c0       	push   0xc0033543
c0029f4b:	e8 4a 62 ff ff       	call   c002019a <KePanic(char const*)>
c0029f50:	83 c4 10             	add    esp,0x10
c0029f53:	90                   	nop
c0029f54:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029f5a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f5d:	74 11                	je     c0029f70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0029f5f:	83 ec 0c             	sub    esp,0xc
c0029f62:	68 43 35 03 c0       	push   0xc0033543
c0029f67:	e8 2e 62 ff ff       	call   c002019a <KePanic(char const*)>
c0029f6c:	83 c4 10             	add    esp,0x10
c0029f6f:	90                   	nop
c0029f70:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0029f73:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0029f77:	85 ff                	test   edi,edi
c0029f79:	7e 21                	jle    c0029f9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0029f7b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029f82:	31 c0                	xor    eax,eax
c0029f84:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029f87:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0029f8a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029f8d:	01 d5                	add    ebp,edx
c0029f8f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0029f92:	83 c0 04             	add    eax,0x4
c0029f95:	39 c1                	cmp    ecx,eax
c0029f97:	75 eb                	jne    c0029f84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0029f99:	8d 76 00             	lea    esi,[esi+0x0]
c0029f9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029f9f:	83 ec 04             	sub    esp,0x4
c0029fa2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029fa5:	29 f8                	sub    eax,edi
c0029fa7:	c1 e0 02             	shl    eax,0x2
c0029faa:	50                   	push   eax
c0029fab:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029fae:	50                   	push   eax
c0029faf:	52                   	push   edx
c0029fb0:	e8 1b 64 fd ff       	call   c00003d0 <memmove>
c0029fb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029fb8:	29 f8                	sub    eax,edi
c0029fba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029fbd:	83 c4 1c             	add    esp,0x1c
c0029fc0:	89 f8                	mov    eax,edi
c0029fc2:	5b                   	pop    ebx
c0029fc3:	5e                   	pop    esi
c0029fc4:	5f                   	pop    edi
c0029fc5:	5d                   	pop    ebp
c0029fc6:	c3                   	ret    
c0029fc7:	90                   	nop

c0029fc8 <PCI::open(int, int, void*)>:
c0029fc8:	83 ec 18             	sub    esp,0x18
c0029fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029fd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029fd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0029fdb:	50                   	push   eax
c0029fdc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029fdf:	31 c0                	xor    eax,eax
c0029fe1:	83 c4 1c             	add    esp,0x1c
c0029fe4:	c3                   	ret    
c0029fe5:	90                   	nop

c0029fe6 <PCI::close(int, int, void*)>:
c0029fe6:	31 c0                	xor    eax,eax
c0029fe8:	c3                   	ret    
c0029fe9:	90                   	nop

c0029fea <PCI::PCI()>:
c0029fea:	83 ec 0c             	sub    esp,0xc
c0029fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff1:	83 ec 08             	sub    esp,0x8
c0029ff4:	68 5f 35 03 c0       	push   0xc003355f
c0029ff9:	50                   	push   eax
c0029ffa:	e8 05 0c ff ff       	call   c001ac04 <Bus::Bus(char const*)>
c0029fff:	83 c4 10             	add    esp,0x10
c002a002:	ba 08 36 03 c0       	mov    edx,0xc0033608
c002a007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a00b:	89 10                	mov    DWORD PTR [eax],edx
c002a00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a011:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a01f:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a028:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a02e:	0f b6 d0             	movzx  edx,al
c002a031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a035:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a040:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a046:	0f b6 d0             	movzx  edx,al
c002a049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a04d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a056:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a05c:	8d 50 01             	lea    edx,[eax+0x1]
c002a05f:	88 d1                	mov    cl,dl
c002a061:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a065:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a06b:	0f b6 d0             	movzx  edx,al
c002a06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a072:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a076:	83 c9 c0             	or     ecx,0xffffffc0
c002a079:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a07d:	90                   	nop
c002a07e:	83 c4 0c             	add    esp,0xc
c002a081:	c3                   	ret    

c002a082 <PCI::readBAR8(unsigned int, int)>:
c002a082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a08a:	f6 c2 01             	test   dl,0x1
c002a08d:	74 07                	je     c002a096 <PCI::readBAR8(unsigned int, int)+0x14>
c002a08f:	83 e2 fc             	and    edx,0xfffffffc
c002a092:	01 c2                	add    edx,eax
c002a094:	ec                   	in     al,dx
c002a095:	c3                   	ret    
c002a096:	83 e2 f0             	and    edx,0xfffffff0
c002a099:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a09c:	c3                   	ret    
c002a09d:	90                   	nop

c002a09e <PCI::readBAR16(unsigned int, int)>:
c002a09e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0a6:	f6 c2 01             	test   dl,0x1
c002a0a9:	74 08                	je     c002a0b3 <PCI::readBAR16(unsigned int, int)+0x15>
c002a0ab:	83 e2 fc             	and    edx,0xfffffffc
c002a0ae:	01 c2                	add    edx,eax
c002a0b0:	66 ed                	in     ax,dx
c002a0b2:	c3                   	ret    
c002a0b3:	83 e2 f0             	and    edx,0xfffffff0
c002a0b6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a0ba:	c3                   	ret    
c002a0bb:	90                   	nop

c002a0bc <PCI::readBAR32(unsigned int, int)>:
c002a0bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0c4:	f6 c2 01             	test   dl,0x1
c002a0c7:	74 07                	je     c002a0d0 <PCI::readBAR32(unsigned int, int)+0x14>
c002a0c9:	83 e2 fc             	and    edx,0xfffffffc
c002a0cc:	01 c2                	add    edx,eax
c002a0ce:	ed                   	in     eax,dx
c002a0cf:	c3                   	ret    
c002a0d0:	83 e2 f0             	and    edx,0xfffffff0
c002a0d3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a0d6:	c3                   	ret    
c002a0d7:	90                   	nop

c002a0d8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a0d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0e4:	f6 c2 01             	test   dl,0x1
c002a0e7:	74 07                	je     c002a0f0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a0e9:	83 e2 fc             	and    edx,0xfffffffc
c002a0ec:	01 ca                	add    edx,ecx
c002a0ee:	ee                   	out    dx,al
c002a0ef:	c3                   	ret    
c002a0f0:	83 e2 f0             	and    edx,0xfffffff0
c002a0f3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a0f6:	c3                   	ret    
c002a0f7:	90                   	nop

c002a0f8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a0f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a100:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a104:	f6 c2 01             	test   dl,0x1
c002a107:	74 08                	je     c002a111 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a109:	83 e2 fc             	and    edx,0xfffffffc
c002a10c:	01 ca                	add    edx,ecx
c002a10e:	66 ef                	out    dx,ax
c002a110:	c3                   	ret    
c002a111:	83 e2 f0             	and    edx,0xfffffff0
c002a114:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a118:	c3                   	ret    
c002a119:	90                   	nop

c002a11a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a11a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a122:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a126:	f6 c2 01             	test   dl,0x1
c002a129:	74 07                	je     c002a132 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a12b:	83 e2 fc             	and    edx,0xfffffffc
c002a12e:	01 ca                	add    edx,ecx
c002a130:	ef                   	out    dx,eax
c002a131:	c3                   	ret    
c002a132:	83 e2 f0             	and    edx,0xfffffff0
c002a135:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a138:	c3                   	ret    
c002a139:	90                   	nop

c002a13a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a13a:	55                   	push   ebp
c002a13b:	57                   	push   edi
c002a13c:	56                   	push   esi
c002a13d:	53                   	push   ebx
c002a13e:	83 ec 0c             	sub    esp,0xc
c002a141:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a146:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a14a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a14e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a152:	83 fe 07             	cmp    esi,0x7
c002a155:	76 10                	jbe    c002a167 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a157:	83 ec 0c             	sub    esp,0xc
c002a15a:	68 67 35 03 c0       	push   0xc0033567
c002a15f:	e8 36 60 ff ff       	call   c002019a <KePanic(char const*)>
c002a164:	83 c4 10             	add    esp,0x10
c002a167:	0f b6 db             	movzx  ebx,bl
c002a16a:	83 fb 0f             	cmp    ebx,0xf
c002a16d:	76 10                	jbe    c002a17f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a16f:	83 ec 0c             	sub    esp,0xc
c002a172:	68 97 35 03 c0       	push   0xc0033597
c002a177:	e8 1e 60 ff ff       	call   c002019a <KePanic(char const*)>
c002a17c:	83 c4 10             	add    esp,0x10
c002a17f:	8d 04 36             	lea    eax,[esi+esi*1]
c002a182:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a187:	83 c8 f0             	or     eax,0xfffffff0
c002a18a:	ee                   	out    dx,al
c002a18b:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a190:	89 e8                	mov    eax,ebp
c002a192:	ee                   	out    dx,al
c002a193:	89 f9                	mov    ecx,edi
c002a195:	89 d8                	mov    eax,ebx
c002a197:	0f b6 d9             	movzx  ebx,cl
c002a19a:	83 c4 0c             	add    esp,0xc
c002a19d:	c1 e0 08             	shl    eax,0x8
c002a1a0:	83 e3 fc             	and    ebx,0xfffffffc
c002a1a3:	09 d8                	or     eax,ebx
c002a1a5:	5b                   	pop    ebx
c002a1a6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a1ab:	5e                   	pop    esi
c002a1ac:	5f                   	pop    edi
c002a1ad:	5d                   	pop    ebp
c002a1ae:	c3                   	ret    
c002a1af:	90                   	nop

c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a1b0:	57                   	push   edi
c002a1b1:	56                   	push   esi
c002a1b2:	53                   	push   ebx
c002a1b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a1b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a1bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a1bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a1c3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a1c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a1cd:	83 ff 01             	cmp    edi,0x1
c002a1d0:	75 3f                	jne    c002a211 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a1d2:	89 de                	mov    esi,ebx
c002a1d4:	0f b6 c0             	movzx  eax,al
c002a1d7:	c1 e0 10             	shl    eax,0x10
c002a1da:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a1e0:	0f b6 c9             	movzx  ecx,cl
c002a1e3:	09 f0                	or     eax,esi
c002a1e5:	c1 e1 08             	shl    ecx,0x8
c002a1e8:	0f b6 d2             	movzx  edx,dl
c002a1eb:	c1 e2 0b             	shl    edx,0xb
c002a1ee:	09 c8                	or     eax,ecx
c002a1f0:	09 d0                	or     eax,edx
c002a1f2:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a1f7:	0d 00 00 00 80       	or     eax,0x80000000
c002a1fc:	ef                   	out    dx,eax
c002a1fd:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a202:	ed                   	in     eax,dx
c002a203:	83 e3 02             	and    ebx,0x2
c002a206:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a20d:	d3 e8                	shr    eax,cl
c002a20f:	eb 44                	jmp    c002a255 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a211:	83 ff 02             	cmp    edi,0x2
c002a214:	75 2d                	jne    c002a243 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a216:	83 ec 0c             	sub    esp,0xc
c002a219:	0f b6 fb             	movzx  edi,bl
c002a21c:	57                   	push   edi
c002a21d:	0f b6 c9             	movzx  ecx,cl
c002a220:	51                   	push   ecx
c002a221:	0f b6 d2             	movzx  edx,dl
c002a224:	52                   	push   edx
c002a225:	0f b6 c0             	movzx  eax,al
c002a228:	50                   	push   eax
c002a229:	56                   	push   esi
c002a22a:	e8 0b ff ff ff       	call   c002a13a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a22f:	89 c2                	mov    edx,eax
c002a231:	ed                   	in     eax,dx
c002a232:	83 e3 02             	and    ebx,0x2
c002a235:	83 c4 20             	add    esp,0x20
c002a238:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a23f:	d3 e8                	shr    eax,cl
c002a241:	eb 12                	jmp    c002a255 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a243:	83 ec 0c             	sub    esp,0xc
c002a246:	68 c7 35 03 c0       	push   0xc00335c7
c002a24b:	e8 4a 5f ff ff       	call   c002019a <KePanic(char const*)>
c002a250:	83 c4 10             	add    esp,0x10
c002a253:	31 c0                	xor    eax,eax
c002a255:	5b                   	pop    ebx
c002a256:	5e                   	pop    esi
c002a257:	5f                   	pop    edi
c002a258:	c3                   	ret    
c002a259:	90                   	nop

c002a25a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a25a:	83 ec 18             	sub    esp,0x18
c002a25d:	6a 00                	push   0x0
c002a25f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a264:	50                   	push   eax
c002a265:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a26a:	50                   	push   eax
c002a26b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a270:	50                   	push   eax
c002a271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a275:	e8 36 ff ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a27a:	83 c4 2c             	add    esp,0x2c
c002a27d:	c3                   	ret    

c002a27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a27e:	83 ec 18             	sub    esp,0x18
c002a281:	6a 0e                	push   0xe
c002a283:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a288:	50                   	push   eax
c002a289:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a28e:	50                   	push   eax
c002a28f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a294:	50                   	push   eax
c002a295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a299:	e8 12 ff ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a29e:	83 c4 2c             	add    esp,0x2c
c002a2a1:	0f b6 c0             	movzx  eax,al
c002a2a4:	c3                   	ret    
c002a2a5:	90                   	nop

c002a2a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a2a6:	55                   	push   ebp
c002a2a7:	57                   	push   edi
c002a2a8:	56                   	push   esi
c002a2a9:	53                   	push   ebx
c002a2aa:	83 ec 18             	sub    esp,0x18
c002a2ad:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a2b2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a2b7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a2bc:	6a 0a                	push   0xa
c002a2be:	56                   	push   esi
c002a2bf:	55                   	push   ebp
c002a2c0:	57                   	push   edi
c002a2c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a2c5:	e8 e6 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2ca:	83 c4 14             	add    esp,0x14
c002a2cd:	6a 0a                	push   0xa
c002a2cf:	56                   	push   esi
c002a2d0:	55                   	push   ebp
c002a2d1:	57                   	push   edi
c002a2d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a2d6:	89 c3                	mov    ebx,eax
c002a2d8:	0f b6 db             	movzx  ebx,bl
c002a2db:	e8 d0 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2e0:	83 c4 2c             	add    esp,0x2c
c002a2e3:	25 00 ff 00 00       	and    eax,0xff00
c002a2e8:	09 d8                	or     eax,ebx
c002a2ea:	5b                   	pop    ebx
c002a2eb:	5e                   	pop    esi
c002a2ec:	5f                   	pop    edi
c002a2ed:	5d                   	pop    ebp
c002a2ee:	c3                   	ret    
c002a2ef:	90                   	nop

c002a2f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a2f0:	83 ec 18             	sub    esp,0x18
c002a2f3:	6a 08                	push   0x8
c002a2f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2fa:	50                   	push   eax
c002a2fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a300:	50                   	push   eax
c002a301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a306:	50                   	push   eax
c002a307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a30b:	e8 a0 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a310:	83 c4 2c             	add    esp,0x2c
c002a313:	0f b6 c4             	movzx  eax,ah
c002a316:	c3                   	ret    
c002a317:	90                   	nop

c002a318 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a318:	83 ec 18             	sub    esp,0x18
c002a31b:	6a 08                	push   0x8
c002a31d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a322:	50                   	push   eax
c002a323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a328:	50                   	push   eax
c002a329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a32e:	50                   	push   eax
c002a32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a333:	e8 78 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a338:	83 c4 2c             	add    esp,0x2c
c002a33b:	c3                   	ret    

c002a33c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a33c:	83 ec 18             	sub    esp,0x18
c002a33f:	6a 3c                	push   0x3c
c002a341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a346:	50                   	push   eax
c002a347:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a34c:	50                   	push   eax
c002a34d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a352:	50                   	push   eax
c002a353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a357:	e8 54 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a35c:	83 c4 2c             	add    esp,0x2c
c002a35f:	c3                   	ret    

c002a360 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a360:	83 ec 18             	sub    esp,0x18
c002a363:	6a 18                	push   0x18
c002a365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a36a:	50                   	push   eax
c002a36b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a370:	50                   	push   eax
c002a371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a376:	50                   	push   eax
c002a377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a37b:	e8 30 fe ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a380:	83 c4 2c             	add    esp,0x2c
c002a383:	0f b6 c4             	movzx  eax,ah
c002a386:	c3                   	ret    
c002a387:	90                   	nop

c002a388 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a388:	55                   	push   ebp
c002a389:	57                   	push   edi
c002a38a:	56                   	push   esi
c002a38b:	53                   	push   ebx
c002a38c:	83 ec 28             	sub    esp,0x28
c002a38f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a393:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a398:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a39d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a3a2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a3a9:	8d 43 12             	lea    eax,[ebx+0x12]
c002a3ac:	83 c3 10             	add    ebx,0x10
c002a3af:	0f b6 c0             	movzx  eax,al
c002a3b2:	0f b6 db             	movzx  ebx,bl
c002a3b5:	50                   	push   eax
c002a3b6:	51                   	push   ecx
c002a3b7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a3bb:	57                   	push   edi
c002a3bc:	55                   	push   ebp
c002a3bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a3c1:	e8 ea fd ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3c6:	83 c4 14             	add    esp,0x14
c002a3c9:	53                   	push   ebx
c002a3ca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a3ce:	51                   	push   ecx
c002a3cf:	89 c6                	mov    esi,eax
c002a3d1:	57                   	push   edi
c002a3d2:	55                   	push   ebp
c002a3d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a3d7:	c1 e6 10             	shl    esi,0x10
c002a3da:	e8 d1 fd ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3df:	83 c4 3c             	add    esp,0x3c
c002a3e2:	5b                   	pop    ebx
c002a3e3:	0f b7 c0             	movzx  eax,ax
c002a3e6:	09 f0                	or     eax,esi
c002a3e8:	5e                   	pop    esi
c002a3e9:	5f                   	pop    edi
c002a3ea:	5d                   	pop    ebp
c002a3eb:	c3                   	ret    

c002a3ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a3ec:	55                   	push   ebp
c002a3ed:	57                   	push   edi
c002a3ee:	56                   	push   esi
c002a3ef:	53                   	push   ebx
c002a3f0:	83 ec 0c             	sub    esp,0xc
c002a3f3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a3f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a3fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a3ff:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a403:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a409:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a40d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a411:	83 f9 01             	cmp    ecx,0x1
c002a414:	75 5d                	jne    c002a473 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a416:	0f b6 c8             	movzx  ecx,al
c002a419:	89 f0                	mov    eax,esi
c002a41b:	25 fc 00 00 00       	and    eax,0xfc
c002a420:	0f b6 d2             	movzx  edx,dl
c002a423:	c1 e1 10             	shl    ecx,0x10
c002a426:	c1 e2 0b             	shl    edx,0xb
c002a429:	09 c1                	or     ecx,eax
c002a42b:	89 f8                	mov    eax,edi
c002a42d:	0f b6 f8             	movzx  edi,al
c002a430:	c1 e7 08             	shl    edi,0x8
c002a433:	09 f9                	or     ecx,edi
c002a435:	09 d1                	or     ecx,edx
c002a437:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a43c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a442:	89 c8                	mov    eax,ecx
c002a444:	ef                   	out    dx,eax
c002a445:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a44a:	ed                   	in     eax,dx
c002a44b:	83 e6 02             	and    esi,0x2
c002a44e:	0f b7 db             	movzx  ebx,bx
c002a451:	74 0a                	je     c002a45d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a453:	c1 e3 10             	shl    ebx,0x10
c002a456:	0f b7 d0             	movzx  edx,ax
c002a459:	09 d3                	or     ebx,edx
c002a45b:	eb 05                	jmp    c002a462 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a45d:	66 31 c0             	xor    ax,ax
c002a460:	09 c3                	or     ebx,eax
c002a462:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a467:	89 c8                	mov    eax,ecx
c002a469:	ef                   	out    dx,eax
c002a46a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a46f:	89 d8                	mov    eax,ebx
c002a471:	eb 41                	jmp    c002a4b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a473:	83 f9 02             	cmp    ecx,0x2
c002a476:	75 45                	jne    c002a4bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a478:	89 f1                	mov    ecx,esi
c002a47a:	83 ec 0c             	sub    esp,0xc
c002a47d:	0f b6 f1             	movzx  esi,cl
c002a480:	89 f9                	mov    ecx,edi
c002a482:	56                   	push   esi
c002a483:	0f b6 f9             	movzx  edi,cl
c002a486:	57                   	push   edi
c002a487:	0f b6 d2             	movzx  edx,dl
c002a48a:	52                   	push   edx
c002a48b:	0f b6 c0             	movzx  eax,al
c002a48e:	50                   	push   eax
c002a48f:	55                   	push   ebp
c002a490:	e8 a5 fc ff ff       	call   c002a13a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a495:	89 c2                	mov    edx,eax
c002a497:	ed                   	in     eax,dx
c002a498:	83 c4 20             	add    esp,0x20
c002a49b:	f6 c2 02             	test   dl,0x2
c002a49e:	0f b7 db             	movzx  ebx,bx
c002a4a1:	74 0c                	je     c002a4af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a4a3:	0f b7 c8             	movzx  ecx,ax
c002a4a6:	89 d8                	mov    eax,ebx
c002a4a8:	c1 e0 10             	shl    eax,0x10
c002a4ab:	09 c8                	or     eax,ecx
c002a4ad:	eb 05                	jmp    c002a4b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a4af:	66 31 c0             	xor    ax,ax
c002a4b2:	09 d8                	or     eax,ebx
c002a4b4:	ef                   	out    dx,eax
c002a4b5:	83 c4 0c             	add    esp,0xc
c002a4b8:	5b                   	pop    ebx
c002a4b9:	5e                   	pop    esi
c002a4ba:	5f                   	pop    edi
c002a4bb:	5d                   	pop    ebp
c002a4bc:	c3                   	ret    
c002a4bd:	c7 44 24 20 c7 35 03 c0 	mov    DWORD PTR [esp+0x20],0xc00335c7
c002a4c5:	83 c4 0c             	add    esp,0xc
c002a4c8:	5b                   	pop    ebx
c002a4c9:	5e                   	pop    esi
c002a4ca:	5f                   	pop    edi
c002a4cb:	5d                   	pop    ebp
c002a4cc:	e9 c9 5c ff ff       	jmp    c002019a <KePanic(char const*)>
c002a4d1:	90                   	nop

c002a4d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a4d2:	55                   	push   ebp
c002a4d3:	57                   	push   edi
c002a4d4:	56                   	push   esi
c002a4d5:	53                   	push   ebx
c002a4d6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a4dc:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a4e3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a4ea:	0f 85 bd 00 00 00    	jne    c002a5ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a4f0:	83 ec 0c             	sub    esp,0xc
c002a4f3:	68 14 01 00 00       	push   0x114
c002a4f8:	e8 de be fe ff       	call   c00163db <malloc>
c002a4fd:	83 c4 0c             	add    esp,0xc
c002a500:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a506:	68 cd 35 03 c0       	push   0xc00335cd
c002a50b:	50                   	push   eax
c002a50c:	89 c3                	mov    ebx,eax
c002a50e:	e8 17 ff fe ff       	call   c001a42a <File::File(char const*, Process*)>
c002a513:	83 c4 10             	add    esp,0x10
c002a516:	85 db                	test   ebx,ebx
c002a518:	0f 84 6b 02 00 00    	je     c002a789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a51e:	57                   	push   edi
c002a51f:	57                   	push   edi
c002a520:	6a 01                	push   0x1
c002a522:	53                   	push   ebx
c002a523:	e8 20 ff fe ff       	call   c001a448 <File::open(FileOpenMode)>
c002a528:	83 c4 10             	add    esp,0x10
c002a52b:	85 c0                	test   eax,eax
c002a52d:	0f 85 56 02 00 00    	jne    c002a789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a533:	52                   	push   edx
c002a534:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a538:	50                   	push   eax
c002a539:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a53d:	50                   	push   eax
c002a53e:	53                   	push   ebx
c002a53f:	e8 06 02 ff ff       	call   c001a74a <File::stat(unsigned long long*, bool*)>
c002a544:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a548:	40                   	inc    eax
c002a549:	89 04 24             	mov    DWORD PTR [esp],eax
c002a54c:	e8 8a be fe ff       	call   c00163db <malloc>
c002a551:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a555:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a559:	59                   	pop    ecx
c002a55a:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a55f:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a561:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a565:	51                   	push   ecx
c002a566:	50                   	push   eax
c002a567:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a56b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a56f:	53                   	push   ebx
c002a570:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a573:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a577:	83 c4 20             	add    esp,0x20
c002a57a:	89 c8                	mov    eax,ecx
c002a57c:	99                   	cdq    
c002a57d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a581:	0f 85 02 02 00 00    	jne    c002a789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a587:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a58b:	0f 85 f8 01 00 00    	jne    c002a789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a591:	83 ec 0c             	sub    esp,0xc
c002a594:	53                   	push   ebx
c002a595:	e8 0c ff fe ff       	call   c001a4a6 <File::close()>
c002a59a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a59e:	83 c4 10             	add    esp,0x10
c002a5a1:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a5a8:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a5ad:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a5b5:	31 c9                	xor    ecx,ecx
c002a5b7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a5be:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a5c4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a5cb:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a5d1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a5d6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a5de:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a5e3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a5eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a5ef:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a5f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a5fb:	39 cd                	cmp    ebp,ecx
c002a5fd:	0f 8e 86 01 00 00    	jle    c002a789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a603:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a606:	d4 40                	aam    0x40
c002a608:	d5 39                	aad    0x39
c002a60a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a60e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a612:	d4 40                	aam    0x40
c002a614:	d5 39                	aad    0x39
c002a616:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a61a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a61e:	d4 40                	aam    0x40
c002a620:	d5 39                	aad    0x39
c002a622:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a626:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a62a:	d4 40                	aam    0x40
c002a62c:	d5 39                	aad    0x39
c002a62e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a632:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a636:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a63a:	3c 56                	cmp    al,0x56
c002a63c:	74 47                	je     c002a685 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a63e:	d4 40                	aam    0x40
c002a640:	d5 39                	aad    0x39
c002a642:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a645:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a649:	0f b6 db             	movzx  ebx,bl
c002a64c:	c1 e3 04             	shl    ebx,0x4
c002a64f:	d4 40                	aam    0x40
c002a651:	d5 39                	aad    0x39
c002a653:	83 e8 30             	sub    eax,0x30
c002a656:	0f b6 c0             	movzx  eax,al
c002a659:	09 c3                	or     ebx,eax
c002a65b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a65f:	c1 e3 04             	shl    ebx,0x4
c002a662:	d4 40                	aam    0x40
c002a664:	d5 39                	aad    0x39
c002a666:	83 e8 30             	sub    eax,0x30
c002a669:	0f b6 c0             	movzx  eax,al
c002a66c:	09 c3                	or     ebx,eax
c002a66e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002a672:	c1 e3 04             	shl    ebx,0x4
c002a675:	d4 40                	aam    0x40
c002a677:	d5 39                	aad    0x39
c002a679:	83 e8 30             	sub    eax,0x30
c002a67c:	0f b6 c0             	movzx  eax,al
c002a67f:	09 c3                	or     ebx,eax
c002a681:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002a685:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002a689:	80 fb 58             	cmp    bl,0x58
c002a68c:	74 49                	je     c002a6d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002a68e:	88 d8                	mov    al,bl
c002a690:	d4 40                	aam    0x40
c002a692:	d5 39                	aad    0x39
c002a694:	83 e8 30             	sub    eax,0x30
c002a697:	0f b6 f8             	movzx  edi,al
c002a69a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002a69e:	c1 e7 04             	shl    edi,0x4
c002a6a1:	d4 40                	aam    0x40
c002a6a3:	d5 39                	aad    0x39
c002a6a5:	83 e8 30             	sub    eax,0x30
c002a6a8:	0f b6 c0             	movzx  eax,al
c002a6ab:	09 c7                	or     edi,eax
c002a6ad:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002a6b1:	c1 e7 04             	shl    edi,0x4
c002a6b4:	d4 40                	aam    0x40
c002a6b6:	d5 39                	aad    0x39
c002a6b8:	83 e8 30             	sub    eax,0x30
c002a6bb:	0f b6 c0             	movzx  eax,al
c002a6be:	09 c7                	or     edi,eax
c002a6c0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002a6c4:	c1 e7 04             	shl    edi,0x4
c002a6c7:	d4 40                	aam    0x40
c002a6c9:	d5 39                	aad    0x39
c002a6cb:	83 e8 30             	sub    eax,0x30
c002a6ce:	0f b6 c0             	movzx  eax,al
c002a6d1:	09 c7                	or     edi,eax
c002a6d3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002a6d7:	8d 41 10             	lea    eax,[ecx+0x10]
c002a6da:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a6de:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002a6e2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a6e6:	83 f9 0a             	cmp    ecx,0xa
c002a6e9:	74 07                	je     c002a6f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002a6eb:	47                   	inc    edi
c002a6ec:	39 c5                	cmp    ebp,eax
c002a6ee:	75 16                	jne    c002a706 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002a6f0:	89 e8                	mov    eax,ebp
c002a6f2:	83 f9 0a             	cmp    ecx,0xa
c002a6f5:	0f 94 c1             	sete   cl
c002a6f8:	0f b6 c9             	movzx  ecx,cl
c002a6fb:	01 c1                	add    ecx,eax
c002a6fd:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a702:	75 0f                	jne    c002a713 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002a704:	eb 1c                	jmp    c002a722 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002a706:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a709:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002a70d:	40                   	inc    eax
c002a70e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002a711:	eb cb                	jmp    c002a6de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002a713:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a717:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a71c:	0f 85 d9 fe ff ff    	jne    c002a5fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a722:	80 fb 58             	cmp    bl,0x58
c002a725:	74 10                	je     c002a737 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002a727:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a72c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002a731:	0f 85 c4 fe ff ff    	jne    c002a5fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a737:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a73b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002a73f:	83 e8 30             	sub    eax,0x30
c002a742:	c1 e0 04             	shl    eax,0x4
c002a745:	83 eb 30             	sub    ebx,0x30
c002a748:	09 d8                	or     eax,ebx
c002a74a:	0f b6 c0             	movzx  eax,al
c002a74d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a751:	0f 85 a4 fe ff ff    	jne    c002a5fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a75b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a75f:	83 e8 30             	sub    eax,0x30
c002a762:	c1 e0 04             	shl    eax,0x4
c002a765:	83 eb 30             	sub    ebx,0x30
c002a768:	09 d8                	or     eax,ebx
c002a76a:	0f b6 c0             	movzx  eax,al
c002a76d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a771:	0f 85 84 fe ff ff    	jne    c002a5fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a777:	50                   	push   eax
c002a778:	50                   	push   eax
c002a779:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a77d:	50                   	push   eax
c002a77e:	56                   	push   esi
c002a77f:	e8 cc 5e fd ff       	call   c0000650 <strcpy>
c002a784:	83 c4 10             	add    esp,0x10
c002a787:	eb 05                	jmp    c002a78e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002a789:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002a78c:	31 f6                	xor    esi,esi
c002a78e:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a794:	89 f0                	mov    eax,esi
c002a796:	5b                   	pop    ebx
c002a797:	5e                   	pop    esi
c002a798:	5f                   	pop    edi
c002a799:	5d                   	pop    ebp
c002a79a:	c3                   	ret    
c002a79b:	90                   	nop

c002a79c <PCI::checkBus(unsigned char)>:
c002a79c:	56                   	push   esi
c002a79d:	53                   	push   ebx
c002a79e:	31 db                	xor    ebx,ebx
c002a7a0:	51                   	push   ecx
c002a7a1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a7a6:	52                   	push   edx
c002a7a7:	53                   	push   ebx
c002a7a8:	43                   	inc    ebx
c002a7a9:	56                   	push   esi
c002a7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a7ae:	e8 0f 03 00 00       	call   c002aac2 <PCI::checkDevice(unsigned char, unsigned char)>
c002a7b3:	83 c4 10             	add    esp,0x10
c002a7b6:	83 fb 20             	cmp    ebx,0x20
c002a7b9:	75 eb                	jne    c002a7a6 <PCI::checkBus(unsigned char)+0xa>
c002a7bb:	58                   	pop    eax
c002a7bc:	5b                   	pop    ebx
c002a7bd:	5e                   	pop    esi
c002a7be:	c3                   	ret    
c002a7bf:	90                   	nop

c002a7c0 <PCI::foundDevice(PCIDeviceInfo)>:
c002a7c0:	55                   	push   ebp
c002a7c1:	57                   	push   edi
c002a7c2:	56                   	push   esi
c002a7c3:	53                   	push   ebx
c002a7c4:	83 ec 1c             	sub    esp,0x1c
c002a7c7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a7cc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a7d0:	3d ff ff 00 00       	cmp    eax,0xffff
c002a7d5:	0f 84 63 01 00 00    	je     c002a93e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a7db:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a7e0:	66 3d 06 04          	cmp    ax,0x406
c002a7e4:	75 2c                	jne    c002a812 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a7e6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a7eb:	50                   	push   eax
c002a7ec:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a7f1:	50                   	push   eax
c002a7f2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a7f7:	50                   	push   eax
c002a7f8:	53                   	push   ebx
c002a7f9:	e8 62 fb ff ff       	call   c002a360 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a7fe:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a802:	0f b6 c0             	movzx  eax,al
c002a805:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a809:	83 c4 2c             	add    esp,0x2c
c002a80c:	5b                   	pop    ebx
c002a80d:	5e                   	pop    esi
c002a80e:	5f                   	pop    edi
c002a80f:	5d                   	pop    ebp
c002a810:	eb 8a                	jmp    c002a79c <PCI::checkBus(unsigned char)>
c002a812:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002a817:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a81d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002a821:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a825:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002a829:	85 d2                	test   edx,edx
c002a82b:	74 34                	je     c002a861 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002a82d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a830:	85 c9                	test   ecx,ecx
c002a832:	74 29                	je     c002a85d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a834:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002a83a:	31 f5                	xor    ebp,esi
c002a83c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002a842:	75 19                	jne    c002a85d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a844:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002a84a:	75 11                	jne    c002a85d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a84c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a853:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002a857:	0f 84 e1 00 00 00    	je     c002a93e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a85d:	8b 12                	mov    edx,DWORD PTR [edx]
c002a85f:	eb c8                	jmp    c002a829 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a861:	3d 01 06 00 00       	cmp    eax,0x601
c002a866:	75 19                	jne    c002a881 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002a868:	83 ec 0c             	sub    esp,0xc
c002a86b:	68 64 01 00 00       	push   0x164
c002a870:	e8 66 bb fe ff       	call   c00163db <malloc>
c002a875:	89 04 24             	mov    DWORD PTR [esp],eax
c002a878:	89 c5                	mov    ebp,eax
c002a87a:	e8 ab 0e 00 00       	call   c002b72a <SATABus::SATABus()>
c002a87f:	eb 1e                	jmp    c002a89f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002a881:	3d 01 01 00 00       	cmp    eax,0x101
c002a886:	75 62                	jne    c002a8ea <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002a888:	83 ec 0c             	sub    esp,0xc
c002a88b:	68 70 02 00 00       	push   0x270
c002a890:	e8 46 bb fe ff       	call   c00163db <malloc>
c002a895:	89 04 24             	mov    DWORD PTR [esp],eax
c002a898:	89 c5                	mov    ebp,eax
c002a89a:	e8 f3 02 00 00       	call   c002ab92 <IDE::IDE()>
c002a89f:	58                   	pop    eax
c002a8a0:	5a                   	pop    edx
c002a8a1:	55                   	push   ebp
c002a8a2:	53                   	push   ebx
c002a8a3:	e8 00 0a ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c002a8a8:	83 ec 1c             	sub    esp,0x1c
c002a8ab:	b9 09 00 00 00       	mov    ecx,0x9
c002a8b0:	fc                   	cld    
c002a8b1:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a8b5:	89 e7                	mov    edi,esp
c002a8b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a8b9:	55                   	push   ebp
c002a8ba:	e8 2f 09 ff ff       	call   c001b1ee <Device::preOpenPCI(PCIDeviceInfo)>
c002a8bf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a8c2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a8c6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a8ce:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a8d6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a8de:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a8e1:	83 c4 4c             	add    esp,0x4c
c002a8e4:	5b                   	pop    ebx
c002a8e5:	5e                   	pop    esi
c002a8e6:	5f                   	pop    edi
c002a8e7:	5d                   	pop    ebp
c002a8e8:	ff e0                	jmp    eax
c002a8ea:	83 ec 0c             	sub    esp,0xc
c002a8ed:	68 58 01 00 00       	push   0x158
c002a8f2:	e8 e4 ba fe ff       	call   c00163db <malloc>
c002a8f7:	5a                   	pop    edx
c002a8f8:	59                   	pop    ecx
c002a8f9:	68 e6 35 03 c0       	push   0xc00335e6
c002a8fe:	50                   	push   eax
c002a8ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002a903:	e8 54 0c ff ff       	call   c001b55c <DriverlessDevice::DriverlessDevice(char const*)>
c002a908:	5e                   	pop    esi
c002a909:	5f                   	pop    edi
c002a90a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a90e:	50                   	push   eax
c002a90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002a913:	53                   	push   ebx
c002a914:	e8 8f 09 ff ff       	call   c001b2a8 <Device::addChild(Device*)>
c002a919:	83 c4 10             	add    esp,0x10
c002a91c:	b9 09 00 00 00       	mov    ecx,0x9
c002a921:	fc                   	cld    
c002a922:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a926:	89 fe                	mov    esi,edi
c002a928:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a92e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a932:	83 c4 1c             	add    esp,0x1c
c002a935:	5b                   	pop    ebx
c002a936:	5e                   	pop    esi
c002a937:	5f                   	pop    edi
c002a938:	5d                   	pop    ebp
c002a939:	e9 b0 08 ff ff       	jmp    c001b1ee <Device::preOpenPCI(PCIDeviceInfo)>
c002a93e:	83 c4 1c             	add    esp,0x1c
c002a941:	5b                   	pop    ebx
c002a942:	5e                   	pop    esi
c002a943:	5f                   	pop    edi
c002a944:	5d                   	pop    ebp
c002a945:	c3                   	ret    

c002a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a946:	55                   	push   ebp
c002a947:	57                   	push   edi
c002a948:	56                   	push   esi
c002a949:	53                   	push   ebx
c002a94a:	83 ec 68             	sub    esp,0x68
c002a94d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a954:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a958:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a95c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a963:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a968:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a96c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a973:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a978:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a97c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a981:	6a 0c                	push   0xc
c002a983:	57                   	push   edi
c002a984:	53                   	push   ebx
c002a985:	56                   	push   esi
c002a986:	55                   	push   ebp
c002a987:	e8 24 f8 ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a98c:	83 c4 20             	add    esp,0x20
c002a98f:	57                   	push   edi
c002a990:	53                   	push   ebx
c002a991:	56                   	push   esi
c002a992:	55                   	push   ebp
c002a993:	e8 0e f9 ff ff       	call   c002a2a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a998:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a99d:	57                   	push   edi
c002a99e:	53                   	push   ebx
c002a99f:	56                   	push   esi
c002a9a0:	55                   	push   ebp
c002a9a1:	e8 96 f9 ff ff       	call   c002a33c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a9a6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a9aa:	83 c4 14             	add    esp,0x14
c002a9ad:	6a 3c                	push   0x3c
c002a9af:	57                   	push   edi
c002a9b0:	53                   	push   ebx
c002a9b1:	56                   	push   esi
c002a9b2:	55                   	push   ebp
c002a9b3:	e8 f8 f7 ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9b8:	0f b6 c4             	movzx  eax,ah
c002a9bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a9bf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a9c3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a9c7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a9cc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a9d2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a9d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a9dc:	83 c4 20             	add    esp,0x20
c002a9df:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a9e4:	74 30                	je     c002aa16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a9e6:	31 c0                	xor    eax,eax
c002a9e8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a9ec:	7e 28                	jle    c002aa16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a9ee:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a9f6:	39 cb                	cmp    ebx,ecx
c002a9f8:	75 19                	jne    c002aa13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a9fa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aa02:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002aa06:	75 0b                	jne    c002aa13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa08:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002aa0f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aa13:	40                   	inc    eax
c002aa14:	eb d2                	jmp    c002a9e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002aa16:	31 d2                	xor    edx,edx
c002aa18:	83 ec 0c             	sub    esp,0xc
c002aa1b:	57                   	push   edi
c002aa1c:	53                   	push   ebx
c002aa1d:	56                   	push   esi
c002aa1e:	52                   	push   edx
c002aa1f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002aa23:	55                   	push   ebp
c002aa24:	e8 5f f9 ff ff       	call   c002a388 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002aa2d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002aa31:	42                   	inc    edx
c002aa32:	83 c4 20             	add    esp,0x20
c002aa35:	83 fa 06             	cmp    edx,0x6
c002aa38:	75 de                	jne    c002aa18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002aa3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002aa3e:	83 ec 0c             	sub    esp,0xc
c002aa41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa45:	c1 e2 08             	shl    edx,0x8
c002aa48:	0f b6 c4             	movzx  eax,ah
c002aa4b:	09 d0                	or     eax,edx
c002aa4d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002aa52:	6a 02                	push   0x2
c002aa54:	57                   	push   edi
c002aa55:	53                   	push   ebx
c002aa56:	56                   	push   esi
c002aa57:	55                   	push   ebp
c002aa58:	e8 53 f7 ff ff       	call   c002a1b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa5d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aa62:	83 c4 20             	add    esp,0x20
c002aa65:	57                   	push   edi
c002aa66:	53                   	push   ebx
c002aa67:	56                   	push   esi
c002aa68:	55                   	push   ebp
c002aa69:	e8 82 f8 ff ff       	call   c002a2f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aa6e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002aa72:	57                   	push   edi
c002aa73:	53                   	push   ebx
c002aa74:	56                   	push   esi
c002aa75:	55                   	push   ebp
c002aa76:	e8 df f7 ff ff       	call   c002a25a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa7b:	b9 09 00 00 00       	mov    ecx,0x9
c002aa80:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002aa85:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002aa89:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002aa8d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002aa91:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002aa95:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002aa99:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002aa9d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002aaa1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002aaa5:	83 ec 0c             	sub    esp,0xc
c002aaa8:	fc                   	cld    
c002aaa9:	8d 74 24 58          	lea    esi,[esp+0x58]
c002aaad:	89 e7                	mov    edi,esp
c002aaaf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aab1:	55                   	push   ebp
c002aab2:	e8 09 fd ff ff       	call   c002a7c0 <PCI::foundDevice(PCIDeviceInfo)>
c002aab7:	81 c4 8c 00 00 00    	add    esp,0x8c
c002aabd:	5b                   	pop    ebx
c002aabe:	5e                   	pop    esi
c002aabf:	5f                   	pop    edi
c002aac0:	5d                   	pop    ebp
c002aac1:	c3                   	ret    

c002aac2 <PCI::checkDevice(unsigned char, unsigned char)>:
c002aac2:	55                   	push   ebp
c002aac3:	57                   	push   edi
c002aac4:	56                   	push   esi
c002aac5:	53                   	push   ebx
c002aac6:	83 ec 0c             	sub    esp,0xc
c002aac9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002aace:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002aad3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002aad7:	6a 00                	push   0x0
c002aad9:	56                   	push   esi
c002aada:	57                   	push   edi
c002aadb:	55                   	push   ebp
c002aadc:	e8 79 f7 ff ff       	call   c002a25a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aae1:	6a 00                	push   0x0
c002aae3:	56                   	push   esi
c002aae4:	57                   	push   edi
c002aae5:	55                   	push   ebp
c002aae6:	e8 5b fe ff ff       	call   c002a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aaeb:	83 c4 20             	add    esp,0x20
c002aaee:	6a 00                	push   0x0
c002aaf0:	56                   	push   esi
c002aaf1:	57                   	push   edi
c002aaf2:	55                   	push   ebp
c002aaf3:	e8 86 f7 ff ff       	call   c002a27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aaf8:	83 c4 10             	add    esp,0x10
c002aafb:	a8 80                	test   al,0x80
c002aafd:	74 2d                	je     c002ab2c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002aaff:	bb 01 00 00 00       	mov    ebx,0x1
c002ab04:	53                   	push   ebx
c002ab05:	56                   	push   esi
c002ab06:	57                   	push   edi
c002ab07:	55                   	push   ebp
c002ab08:	e8 4d f7 ff ff       	call   c002a25a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab0d:	83 c4 10             	add    esp,0x10
c002ab10:	0f b7 c0             	movzx  eax,ax
c002ab13:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab18:	74 0c                	je     c002ab26 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ab1a:	53                   	push   ebx
c002ab1b:	56                   	push   esi
c002ab1c:	57                   	push   edi
c002ab1d:	55                   	push   ebp
c002ab1e:	e8 23 fe ff ff       	call   c002a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ab23:	83 c4 10             	add    esp,0x10
c002ab26:	43                   	inc    ebx
c002ab27:	83 fb 08             	cmp    ebx,0x8
c002ab2a:	75 d8                	jne    c002ab04 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ab2c:	83 c4 0c             	add    esp,0xc
c002ab2f:	5b                   	pop    ebx
c002ab30:	5e                   	pop    esi
c002ab31:	5f                   	pop    edi
c002ab32:	5d                   	pop    ebp
c002ab33:	c3                   	ret    

c002ab34 <PCI::detect()>:
c002ab34:	56                   	push   esi
c002ab35:	53                   	push   ebx
c002ab36:	53                   	push   ebx
c002ab37:	31 db                	xor    ebx,ebx
c002ab39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ab3d:	6a 00                	push   0x0
c002ab3f:	6a 00                	push   0x0
c002ab41:	6a 00                	push   0x0
c002ab43:	56                   	push   esi
c002ab44:	e8 35 f7 ff ff       	call   c002a27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab49:	83 c4 10             	add    esp,0x10
c002ab4c:	a8 80                	test   al,0x80
c002ab4e:	75 21                	jne    c002ab71 <PCI::detect()+0x3d>
c002ab50:	51                   	push   ecx
c002ab51:	51                   	push   ecx
c002ab52:	6a 00                	push   0x0
c002ab54:	56                   	push   esi
c002ab55:	e8 42 fc ff ff       	call   c002a79c <PCI::checkBus(unsigned char)>
c002ab5a:	83 c4 10             	add    esp,0x10
c002ab5d:	eb 2a                	jmp    c002ab89 <PCI::detect()+0x55>
c002ab5f:	52                   	push   edx
c002ab60:	52                   	push   edx
c002ab61:	53                   	push   ebx
c002ab62:	43                   	inc    ebx
c002ab63:	56                   	push   esi
c002ab64:	e8 33 fc ff ff       	call   c002a79c <PCI::checkBus(unsigned char)>
c002ab69:	83 c4 10             	add    esp,0x10
c002ab6c:	83 fb 08             	cmp    ebx,0x8
c002ab6f:	74 18                	je     c002ab89 <PCI::detect()+0x55>
c002ab71:	53                   	push   ebx
c002ab72:	6a 00                	push   0x0
c002ab74:	6a 00                	push   0x0
c002ab76:	56                   	push   esi
c002ab77:	e8 de f6 ff ff       	call   c002a25a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab7c:	83 c4 10             	add    esp,0x10
c002ab7f:	0f b7 c0             	movzx  eax,ax
c002ab82:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab87:	74 d6                	je     c002ab5f <PCI::detect()+0x2b>
c002ab89:	58                   	pop    eax
c002ab8a:	5b                   	pop    ebx
c002ab8b:	5e                   	pop    esi
c002ab8c:	c3                   	ret    
c002ab8d:	90                   	nop

c002ab8e <IDE::close(int, int, void*)>:
c002ab8e:	83 c8 ff             	or     eax,0xffffffff
c002ab91:	c3                   	ret    

c002ab92 <IDE::IDE()>:
c002ab92:	83 ec 0c             	sub    esp,0xc
c002ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab99:	83 ec 08             	sub    esp,0x8
c002ab9c:	68 2c 36 03 c0       	push   0xc003362c
c002aba1:	50                   	push   eax
c002aba2:	e8 59 0a ff ff       	call   c001b600 <HardDiskController::HardDiskController(char const*)>
c002aba7:	83 c4 10             	add    esp,0x10
c002abaa:	ba bc 36 03 c0       	mov    edx,0xc00336bc
c002abaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002abb3:	89 10                	mov    DWORD PTR [eax],edx
c002abb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002abb9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002abc0:	90                   	nop
c002abc1:	83 c4 0c             	add    esp,0xc
c002abc4:	c3                   	ret    
c002abc5:	90                   	nop

c002abc6 <IDE::prepareInterrupt(unsigned char)>:
c002abc6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002abcb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002abcf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002abd7:	c3                   	ret    

c002abd8 <selectDrive(unsigned char, unsigned char)>:
c002abd8:	c3                   	ret    
c002abd9:	90                   	nop

c002abda <IDE::getBase(unsigned char)>:
c002abda:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002abdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002abe3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002abeb:	c3                   	ret    

c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002abec:	55                   	push   ebp
c002abed:	57                   	push   edi
c002abee:	56                   	push   esi
c002abef:	53                   	push   ebx
c002abf0:	83 ec 1c             	sub    esp,0x1c
c002abf3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002abf7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002abfb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002abff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ac03:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ac06:	80 f9 03             	cmp    cl,0x3
c002ac09:	77 4f                	ja     c002ac5a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ac0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ac0f:	0f b6 f2             	movzx  esi,dl
c002ac12:	0f b6 db             	movzx  ebx,bl
c002ac15:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002ac18:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002ac1d:	80 ca 80             	or     dl,0x80
c002ac20:	52                   	push   edx
c002ac21:	6a 0c                	push   0xc
c002ac23:	56                   	push   esi
c002ac24:	57                   	push   edi
c002ac25:	e8 c2 ff ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac2a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002ac2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002ac33:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002ac37:	ee                   	out    dx,al
c002ac38:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002ac3d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002ac41:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002ac45:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ac4d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ac51:	83 c4 2c             	add    esp,0x2c
c002ac54:	5b                   	pop    ebx
c002ac55:	5e                   	pop    esi
c002ac56:	5f                   	pop    edi
c002ac57:	5d                   	pop    ebp
c002ac58:	eb 92                	jmp    c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac5a:	0f b6 cb             	movzx  ecx,bl
c002ac5d:	83 f9 07             	cmp    ecx,0x7
c002ac60:	77 12                	ja     c002ac74 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ac62:	0f b6 d2             	movzx  edx,dl
c002ac65:	0f b6 db             	movzx  ebx,bl
c002ac68:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002ac70:	01 da                	add    edx,ebx
c002ac72:	eb 2f                	jmp    c002aca3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac74:	83 f9 0d             	cmp    ecx,0xd
c002ac77:	77 13                	ja     c002ac8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ac79:	0f b6 d2             	movzx  edx,dl
c002ac7c:	0f b6 db             	movzx  ebx,bl
c002ac7f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002ac86:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ac8a:	eb 17                	jmp    c002aca3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac8c:	83 f9 15             	cmp    ecx,0x15
c002ac8f:	77 13                	ja     c002aca4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ac91:	0f b6 d2             	movzx  edx,dl
c002ac94:	0f b6 db             	movzx  ebx,bl
c002ac97:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002ac9f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002aca3:	ee                   	out    dx,al
c002aca4:	83 c4 1c             	add    esp,0x1c
c002aca7:	5b                   	pop    ebx
c002aca8:	5e                   	pop    esi
c002aca9:	5f                   	pop    edi
c002acaa:	5d                   	pop    ebp
c002acab:	c3                   	ret    

c002acac <IDE::read(unsigned char, unsigned char)>:
c002acac:	57                   	push   edi
c002acad:	56                   	push   esi
c002acae:	53                   	push   ebx
c002acaf:	83 ec 10             	sub    esp,0x10
c002acb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002acb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002acba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002acbe:	8d 42 f8             	lea    eax,[edx-0x8]
c002acc1:	3c 03                	cmp    al,0x3
c002acc3:	77 48                	ja     c002ad0d <IDE::read(unsigned char, unsigned char)+0x61>
c002acc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002acc9:	0f b6 f1             	movzx  esi,cl
c002accc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002accf:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002acd4:	0c 80                	or     al,0x80
c002acd6:	50                   	push   eax
c002acd7:	6a 0c                	push   0xc
c002acd9:	56                   	push   esi
c002acda:	53                   	push   ebx
c002acdb:	e8 0c ff ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ace0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ace4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002ace9:	0f b6 d2             	movzx  edx,dl
c002acec:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002acf0:	ec                   	in     al,dx
c002acf1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002acf5:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002acfa:	52                   	push   edx
c002acfb:	6a 0c                	push   0xc
c002acfd:	56                   	push   esi
c002acfe:	53                   	push   ebx
c002acff:	e8 e8 fe ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad04:	83 c4 20             	add    esp,0x20
c002ad07:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002ad0b:	eb 4c                	jmp    c002ad59 <IDE::read(unsigned char, unsigned char)+0xad>
c002ad0d:	0f b6 f2             	movzx  esi,dl
c002ad10:	83 fe 07             	cmp    esi,0x7
c002ad13:	77 12                	ja     c002ad27 <IDE::read(unsigned char, unsigned char)+0x7b>
c002ad15:	0f b6 c9             	movzx  ecx,cl
c002ad18:	0f b6 d2             	movzx  edx,dl
c002ad1b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002ad23:	01 c2                	add    edx,eax
c002ad25:	eb 31                	jmp    c002ad58 <IDE::read(unsigned char, unsigned char)+0xac>
c002ad27:	83 fe 0d             	cmp    esi,0xd
c002ad2a:	77 13                	ja     c002ad3f <IDE::read(unsigned char, unsigned char)+0x93>
c002ad2c:	0f b6 c9             	movzx  ecx,cl
c002ad2f:	0f b6 d2             	movzx  edx,dl
c002ad32:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002ad39:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ad3d:	eb 19                	jmp    c002ad58 <IDE::read(unsigned char, unsigned char)+0xac>
c002ad3f:	31 c0                	xor    eax,eax
c002ad41:	83 fe 15             	cmp    esi,0x15
c002ad44:	77 13                	ja     c002ad59 <IDE::read(unsigned char, unsigned char)+0xad>
c002ad46:	0f b6 c9             	movzx  ecx,cl
c002ad49:	0f b6 d2             	movzx  edx,dl
c002ad4c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002ad54:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ad58:	ec                   	in     al,dx
c002ad59:	83 c4 10             	add    esp,0x10
c002ad5c:	5b                   	pop    ebx
c002ad5d:	5e                   	pop    esi
c002ad5e:	5f                   	pop    edi
c002ad5f:	c3                   	ret    

c002ad60 <IDE::waitInterrupt(unsigned char)>:
c002ad60:	55                   	push   ebp
c002ad61:	57                   	push   edi
c002ad62:	56                   	push   esi
c002ad63:	53                   	push   ebx
c002ad64:	31 db                	xor    ebx,ebx
c002ad66:	83 ec 0c             	sub    esp,0xc
c002ad69:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002ad6d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002ad72:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ad7a:	89 e8                	mov    eax,ebp
c002ad7c:	84 c0                	test   al,al
c002ad7e:	75 30                	jne    c002adb0 <IDE::waitInterrupt(unsigned char)+0x50>
c002ad80:	50                   	push   eax
c002ad81:	6a 0c                	push   0xc
c002ad83:	56                   	push   esi
c002ad84:	57                   	push   edi
c002ad85:	e8 22 ff ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002ad8a:	83 c4 10             	add    esp,0x10
c002ad8d:	a8 01                	test   al,0x1
c002ad8f:	75 27                	jne    c002adb8 <IDE::waitInterrupt(unsigned char)+0x58>
c002ad91:	f6 c3 04             	test   bl,0x4
c002ad94:	75 12                	jne    c002ada8 <IDE::waitInterrupt(unsigned char)+0x48>
c002ad96:	83 fb 32             	cmp    ebx,0x32
c002ad99:	7e 0d                	jle    c002ada8 <IDE::waitInterrupt(unsigned char)+0x48>
c002ad9b:	83 ec 0c             	sub    esp,0xc
c002ad9e:	6a 64                	push   0x64
c002ada0:	e8 c7 a5 ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002ada5:	83 c4 10             	add    esp,0x10
c002ada8:	83 fb 3c             	cmp    ebx,0x3c
c002adab:	74 0b                	je     c002adb8 <IDE::waitInterrupt(unsigned char)+0x58>
c002adad:	43                   	inc    ebx
c002adae:	eb c2                	jmp    c002ad72 <IDE::waitInterrupt(unsigned char)+0x12>
c002adb0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002adb8:	83 c4 0c             	add    esp,0xc
c002adbb:	89 e8                	mov    eax,ebp
c002adbd:	5b                   	pop    ebx
c002adbe:	5e                   	pop    esi
c002adbf:	5f                   	pop    edi
c002adc0:	5d                   	pop    ebp
c002adc1:	c3                   	ret    

c002adc2 <ideChannel0IRQHandler(regs*, void*)>:
c002adc2:	83 ec 10             	sub    esp,0x10
c002adc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002adc9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002add0:	6a 07                	push   0x7
c002add2:	6a 00                	push   0x0
c002add4:	50                   	push   eax
c002add5:	e8 d2 fe ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002adda:	83 c4 1c             	add    esp,0x1c
c002addd:	c3                   	ret    

c002adde <ideChannel1IRQHandler(regs*, void*)>:
c002adde:	83 ec 10             	sub    esp,0x10
c002ade1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ade5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002adec:	6a 07                	push   0x7
c002adee:	6a 01                	push   0x1
c002adf0:	50                   	push   eax
c002adf1:	e8 b6 fe ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002adf6:	83 c4 1c             	add    esp,0x1c
c002adf9:	c3                   	ret    

c002adfa <IDE::enableIRQs(unsigned char, bool)>:
c002adfa:	57                   	push   edi
c002adfb:	b8 02 00 00 00       	mov    eax,0x2
c002ae00:	56                   	push   esi
c002ae01:	53                   	push   ebx
c002ae02:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ae07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae0b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ae0f:	74 02                	je     c002ae13 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ae11:	31 c0                	xor    eax,eax
c002ae13:	0f b6 db             	movzx  ebx,bl
c002ae16:	bf 04 00 00 00       	mov    edi,0x4
c002ae1b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002ae22:	50                   	push   eax
c002ae23:	6a 0c                	push   0xc
c002ae25:	53                   	push   ebx
c002ae26:	56                   	push   esi
c002ae27:	e8 c0 fd ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ae2c:	83 c4 10             	add    esp,0x10
c002ae2f:	50                   	push   eax
c002ae30:	6a 0c                	push   0xc
c002ae32:	53                   	push   ebx
c002ae33:	56                   	push   esi
c002ae34:	e8 73 fe ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002ae39:	83 c4 10             	add    esp,0x10
c002ae3c:	4f                   	dec    edi
c002ae3d:	75 f0                	jne    c002ae2f <IDE::enableIRQs(unsigned char, bool)+0x35>
c002ae3f:	5b                   	pop    ebx
c002ae40:	5e                   	pop    esi
c002ae41:	5f                   	pop    edi
c002ae42:	c3                   	ret    
c002ae43:	90                   	nop

c002ae44 <IDE::open(int, int, void*)>:
c002ae44:	55                   	push   ebp
c002ae45:	57                   	push   edi
c002ae46:	56                   	push   esi
c002ae47:	53                   	push   ebx
c002ae48:	83 ec 1c             	sub    esp,0x1c
c002ae4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ae4f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002ae56:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002ae5f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002ae68:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002ae6f:	0f 85 da 02 00 00    	jne    c002b14f <IDE::open(int, int, void*)+0x30b>
c002ae75:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002ae7b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002ae7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ae83:	83 e0 7f             	and    eax,0x7f
c002ae86:	83 f8 05             	cmp    eax,0x5
c002ae89:	74 05                	je     c002ae90 <IDE::open(int, int, void*)+0x4c>
c002ae8b:	83 f8 0f             	cmp    eax,0xf
c002ae8e:	75 32                	jne    c002aec2 <IDE::open(int, int, void*)+0x7e>
c002ae90:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002ae96:	83 e0 fc             	and    eax,0xfffffffc
c002ae99:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002aea0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002aea6:	83 e0 fc             	and    eax,0xfffffffc
c002aea9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002aeb0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002aeb6:	83 e0 fc             	and    eax,0xfffffffc
c002aeb9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002aec0:	eb 14                	jmp    c002aed6 <IDE::open(int, int, void*)+0x92>
c002aec2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002aecc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002aed6:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002aedd:	bf f8 0c 00 00       	mov    edi,0xcf8
c002aee2:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002aee9:	89 fa                	mov    edx,edi
c002aeeb:	89 f1                	mov    ecx,esi
c002aeed:	c1 e1 10             	shl    ecx,0x10
c002aef0:	89 e8                	mov    eax,ebp
c002aef2:	c1 e0 0b             	shl    eax,0xb
c002aef5:	09 c1                	or     ecx,eax
c002aef7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002aefe:	c1 e0 08             	shl    eax,0x8
c002af01:	09 c1                	or     ecx,eax
c002af03:	89 c8                	mov    eax,ecx
c002af05:	0d 08 00 00 80       	or     eax,0x80000008
c002af0a:	ef                   	out    dx,eax
c002af0b:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af10:	ed                   	in     eax,dx
c002af11:	c1 e8 10             	shr    eax,0x10
c002af14:	3d ff ff 00 00       	cmp    eax,0xffff
c002af19:	0f 84 f9 00 00 00    	je     c002b018 <IDE::open(int, int, void*)+0x1d4>
c002af1f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002af25:	89 fa                	mov    edx,edi
c002af27:	89 c8                	mov    eax,ecx
c002af29:	ef                   	out    dx,eax
c002af2a:	b0 fe                	mov    al,0xfe
c002af2c:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af31:	ee                   	out    dx,al
c002af32:	89 c8                	mov    eax,ecx
c002af34:	89 fa                	mov    edx,edi
c002af36:	ef                   	out    dx,eax
c002af37:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af3c:	ed                   	in     eax,dx
c002af3d:	3c fe                	cmp    al,0xfe
c002af3f:	0f 85 a4 00 00 00    	jne    c002afe9 <IDE::open(int, int, void*)+0x1a5>
c002af45:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002af4b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002af52:	74 30                	je     c002af84 <IDE::open(int, int, void*)+0x140>
c002af54:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002af5a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002af5e:	83 ec 0c             	sub    esp,0xc
c002af61:	40                   	inc    eax
c002af62:	0f b6 c0             	movzx  eax,al
c002af65:	50                   	push   eax
c002af66:	55                   	push   ebp
c002af67:	56                   	push   esi
c002af68:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002af6e:	51                   	push   ecx
c002af6f:	e8 98 35 ff ff       	call   c001e50c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002af74:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002af79:	83 c4 1c             	add    esp,0x1c
c002af7c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002af82:	eb 0a                	jmp    c002af8e <IDE::open(int, int, void*)+0x14a>
c002af84:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002af8e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002af95:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002af9a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002afa1:	89 ea                	mov    edx,ebp
c002afa3:	c1 e1 10             	shl    ecx,0x10
c002afa6:	c1 e0 08             	shl    eax,0x8
c002afa9:	09 c1                	or     ecx,eax
c002afab:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002afb2:	c1 e0 0b             	shl    eax,0xb
c002afb5:	09 c1                	or     ecx,eax
c002afb7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002afbd:	89 c8                	mov    eax,ecx
c002afbf:	ef                   	out    dx,eax
c002afc0:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002afc6:	be fc 0c 00 00       	mov    esi,0xcfc
c002afcb:	89 f2                	mov    edx,esi
c002afcd:	89 f8                	mov    eax,edi
c002afcf:	ee                   	out    dx,al
c002afd0:	89 c8                	mov    eax,ecx
c002afd2:	89 ea                	mov    edx,ebp
c002afd4:	ef                   	out    dx,eax
c002afd5:	89 f2                	mov    edx,esi
c002afd7:	ed                   	in     eax,dx
c002afd8:	0f b6 c0             	movzx  eax,al
c002afdb:	39 f8                	cmp    eax,edi
c002afdd:	74 49                	je     c002b028 <IDE::open(int, int, void*)+0x1e4>
c002afdf:	83 ec 0c             	sub    esp,0xc
c002afe2:	68 44 36 03 c0       	push   0xc0033644
c002afe7:	eb 37                	jmp    c002b020 <IDE::open(int, int, void*)+0x1dc>
c002afe9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002aff2:	75 1a                	jne    c002b00e <IDE::open(int, int, void*)+0x1ca>
c002aff4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002aff9:	3d 8a 00 00 00       	cmp    eax,0x8a
c002affe:	74 05                	je     c002b005 <IDE::open(int, int, void*)+0x1c1>
c002b000:	83 c0 80             	add    eax,0xffffff80
c002b003:	75 09                	jne    c002b00e <IDE::open(int, int, void*)+0x1ca>
c002b005:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b00c:	eb 1a                	jmp    c002b028 <IDE::open(int, int, void*)+0x1e4>
c002b00e:	83 ec 0c             	sub    esp,0xc
c002b011:	68 4c 36 03 c0       	push   0xc003364c
c002b016:	eb 08                	jmp    c002b020 <IDE::open(int, int, void*)+0x1dc>
c002b018:	83 ec 0c             	sub    esp,0xc
c002b01b:	68 7d 36 03 c0       	push   0xc003367d
c002b020:	e8 75 51 ff ff       	call   c002019a <KePanic(char const*)>
c002b025:	83 c4 10             	add    esp,0x10
c002b028:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b02f:	74 1a                	je     c002b04b <IDE::open(int, int, void*)+0x207>
c002b031:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b037:	83 e0 fc             	and    eax,0xfffffffc
c002b03a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b041:	83 c0 08             	add    eax,0x8
c002b044:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b04b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b051:	89 c2                	mov    edx,eax
c002b053:	83 e2 0f             	and    edx,0xf
c002b056:	83 fa 08             	cmp    edx,0x8
c002b059:	75 0a                	jne    c002b065 <IDE::open(int, int, void*)+0x221>
c002b05b:	83 e8 02             	sub    eax,0x2
c002b05e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b065:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b06b:	89 c2                	mov    edx,eax
c002b06d:	83 e2 0f             	and    edx,0xf
c002b070:	83 fa 08             	cmp    edx,0x8
c002b073:	75 0a                	jne    c002b07f <IDE::open(int, int, void*)+0x23b>
c002b075:	83 e8 02             	sub    eax,0x2
c002b078:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b07f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b086:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b08d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b090:	89 d0                	mov    eax,edx
c002b092:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b096:	8d 7a 01             	lea    edi,[edx+0x1]
c002b099:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b09d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b0a1:	83 e1 3f             	and    ecx,0x3f
c002b0a4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b0a8:	89 f9                	mov    ecx,edi
c002b0aa:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b0b1:	8d 78 02             	lea    edi,[eax+0x2]
c002b0b4:	0f b6 c9             	movzx  ecx,cl
c002b0b7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b0ba:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b0be:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b0c2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b0c6:	83 e2 3f             	and    edx,0x3f
c002b0c9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b0cd:	89 f9                	mov    ecx,edi
c002b0cf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b0d5:	8d 78 03             	lea    edi,[eax+0x3]
c002b0d8:	0f b6 d1             	movzx  edx,cl
c002b0db:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b0de:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b0e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b0e6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b0ea:	83 e1 3f             	and    ecx,0x3f
c002b0ed:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b0f1:	89 f9                	mov    ecx,edi
c002b0f3:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b0f9:	8d 78 04             	lea    edi,[eax+0x4]
c002b0fc:	0f b6 c9             	movzx  ecx,cl
c002b0ff:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b102:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b106:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b10a:	89 fa                	mov    edx,edi
c002b10c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b112:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b116:	83 e2 3f             	and    edx,0x3f
c002b119:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b11d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b124:	66 85 f6             	test   si,si
c002b127:	74 65                	je     c002b18e <IDE::open(int, int, void*)+0x34a>
c002b129:	89 f9                	mov    ecx,edi
c002b12b:	83 c0 05             	add    eax,0x5
c002b12e:	0f b6 d1             	movzx  edx,cl
c002b131:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b134:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b138:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b13c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b142:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b146:	83 e0 3f             	and    eax,0x3f
c002b149:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b14d:	eb 3f                	jmp    c002b18e <IDE::open(int, int, void*)+0x34a>
c002b14f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b156:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b15c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b163:	05 06 02 00 00       	add    eax,0x206
c002b168:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b16f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b176:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b17d:	05 06 02 00 00       	add    eax,0x206
c002b182:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b189:	e9 bd fe ff ff       	jmp    c002b04b <IDE::open(int, int, void*)+0x207>
c002b18e:	50                   	push   eax
c002b18f:	50                   	push   eax
c002b190:	6a 00                	push   0x0
c002b192:	53                   	push   ebx
c002b193:	e8 2e fa ff ff       	call   c002abc6 <IDE::prepareInterrupt(unsigned char)>
c002b198:	5a                   	pop    edx
c002b199:	59                   	pop    ecx
c002b19a:	6a 01                	push   0x1
c002b19c:	53                   	push   ebx
c002b19d:	e8 24 fa ff ff       	call   c002abc6 <IDE::prepareInterrupt(unsigned char)>
c002b1a2:	83 c4 0c             	add    esp,0xc
c002b1a5:	6a 00                	push   0x0
c002b1a7:	6a 00                	push   0x0
c002b1a9:	53                   	push   ebx
c002b1aa:	e8 4b fc ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002b1af:	83 c4 0c             	add    esp,0xc
c002b1b2:	6a 00                	push   0x0
c002b1b4:	6a 01                	push   0x1
c002b1b6:	53                   	push   ebx
c002b1b7:	e8 3e fc ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002b1bc:	83 c4 10             	add    esp,0x10
c002b1bf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b1c6:	74 34                	je     c002b1fc <IDE::open(int, int, void*)+0x3b8>
c002b1c8:	83 ec 0c             	sub    esp,0xc
c002b1cb:	53                   	push   ebx
c002b1cc:	6a 01                	push   0x1
c002b1ce:	68 c2 ad 02 c0       	push   0xc002adc2
c002b1d3:	6a 0e                	push   0xe
c002b1d5:	53                   	push   ebx
c002b1d6:	e8 79 00 ff ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1db:	83 c4 14             	add    esp,0x14
c002b1de:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b1e4:	53                   	push   ebx
c002b1e5:	6a 01                	push   0x1
c002b1e7:	68 de ad 02 c0       	push   0xc002adde
c002b1ec:	6a 0f                	push   0xf
c002b1ee:	53                   	push   ebx
c002b1ef:	e8 60 00 ff ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1f4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b1fa:	eb 38                	jmp    c002b234 <IDE::open(int, int, void*)+0x3f0>
c002b1fc:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b206:	83 ec 0c             	sub    esp,0xc
c002b209:	53                   	push   ebx
c002b20a:	6a 00                	push   0x0
c002b20c:	68 c2 ad 02 c0       	push   0xc002adc2
c002b211:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b217:	53                   	push   ebx
c002b218:	e8 37 00 ff ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b21d:	83 c4 14             	add    esp,0x14
c002b220:	53                   	push   ebx
c002b221:	6a 00                	push   0x0
c002b223:	68 de ad 02 c0       	push   0xc002adde
c002b228:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b22e:	53                   	push   ebx
c002b22f:	e8 20 00 ff ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b234:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b236:	83 c4 20             	add    esp,0x20
c002b239:	83 ec 0c             	sub    esp,0xc
c002b23c:	53                   	push   ebx
c002b23d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b240:	83 c4 0c             	add    esp,0xc
c002b243:	6a 07                	push   0x7
c002b245:	6a 00                	push   0x0
c002b247:	53                   	push   ebx
c002b248:	e8 5f fa ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b24d:	83 c4 0c             	add    esp,0xc
c002b250:	6a 07                	push   0x7
c002b252:	6a 01                	push   0x1
c002b254:	53                   	push   ebx
c002b255:	e8 52 fa ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b25a:	83 c4 0c             	add    esp,0xc
c002b25d:	6a 01                	push   0x1
c002b25f:	6a 00                	push   0x0
c002b261:	53                   	push   ebx
c002b262:	e8 93 fb ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002b267:	83 c4 0c             	add    esp,0xc
c002b26a:	6a 01                	push   0x1
c002b26c:	6a 01                	push   0x1
c002b26e:	53                   	push   ebx
c002b26f:	e8 86 fb ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002b274:	83 c4 2c             	add    esp,0x2c
c002b277:	31 c0                	xor    eax,eax
c002b279:	5b                   	pop    ebx
c002b27a:	5e                   	pop    esi
c002b27b:	5f                   	pop    edi
c002b27c:	5d                   	pop    ebp
c002b27d:	c3                   	ret    

c002b27e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b27e:	55                   	push   ebp
c002b27f:	57                   	push   edi
c002b280:	56                   	push   esi
c002b281:	53                   	push   ebx
c002b282:	83 ec 1c             	sub    esp,0x1c
c002b285:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b289:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b28d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b291:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b295:	8d 42 f8             	lea    eax,[edx-0x8]
c002b298:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b29c:	3c 03                	cmp    al,0x3
c002b29e:	77 5a                	ja     c002b2fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b2a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b2a4:	0f b6 db             	movzx  ebx,bl
c002b2a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b2ab:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b2ae:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b2b3:	0c 80                	or     al,0x80
c002b2b5:	50                   	push   eax
c002b2b6:	6a 0c                	push   0xc
c002b2b8:	53                   	push   ebx
c002b2b9:	56                   	push   esi
c002b2ba:	e8 2d f9 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b2c3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b2c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b2cc:	0f b6 d2             	movzx  edx,dl
c002b2cf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b2d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b2d5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b2da:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b2de:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b2e2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b2ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b2ee:	83 c4 2c             	add    esp,0x2c
c002b2f1:	5b                   	pop    ebx
c002b2f2:	5e                   	pop    esi
c002b2f3:	5f                   	pop    edi
c002b2f4:	5d                   	pop    ebp
c002b2f5:	e9 f2 f8 ff ff       	jmp    c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2fa:	0f b6 c2             	movzx  eax,dl
c002b2fd:	83 f8 07             	cmp    eax,0x7
c002b300:	77 12                	ja     c002b314 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b302:	0f b6 db             	movzx  ebx,bl
c002b305:	0f b6 c2             	movzx  eax,dl
c002b308:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b310:	01 c2                	add    edx,eax
c002b312:	eb 2f                	jmp    c002b343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b314:	83 f8 0d             	cmp    eax,0xd
c002b317:	77 13                	ja     c002b32c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b319:	0f b6 db             	movzx  ebx,bl
c002b31c:	0f b6 d2             	movzx  edx,dl
c002b31f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b326:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b32a:	eb 17                	jmp    c002b343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b32c:	83 f8 15             	cmp    eax,0x15
c002b32f:	77 14                	ja     c002b345 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b331:	0f b6 db             	movzx  ebx,bl
c002b334:	0f b6 d2             	movzx  edx,dl
c002b337:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b33f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b343:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b345:	83 c4 1c             	add    esp,0x1c
c002b348:	5b                   	pop    ebx
c002b349:	5e                   	pop    esi
c002b34a:	5f                   	pop    edi
c002b34b:	5d                   	pop    ebp
c002b34c:	c3                   	ret    
c002b34d:	90                   	nop

c002b34e <IDE::detect()>:
c002b34e:	55                   	push   ebp
c002b34f:	57                   	push   edi
c002b350:	56                   	push   esi
c002b351:	53                   	push   ebx
c002b352:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b358:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b35f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b366:	0f 85 9e 02 00 00    	jne    c002b60a <IDE::detect()+0x2bc>
c002b36c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b373:	31 f6                	xor    esi,esi
c002b375:	31 ff                	xor    edi,edi
c002b377:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b37f:	89 f8                	mov    eax,edi
c002b381:	c1 e0 06             	shl    eax,0x6
c002b384:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b38c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b390:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b398:	c1 e0 04             	shl    eax,0x4
c002b39b:	83 c8 a0             	or     eax,0xffffffa0
c002b39e:	0f b6 c0             	movzx  eax,al
c002b3a1:	50                   	push   eax
c002b3a2:	6a 06                	push   0x6
c002b3a4:	56                   	push   esi
c002b3a5:	53                   	push   ebx
c002b3a6:	e8 41 f8 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3ab:	83 c4 0c             	add    esp,0xc
c002b3ae:	6a 0c                	push   0xc
c002b3b0:	56                   	push   esi
c002b3b1:	53                   	push   ebx
c002b3b2:	e8 f5 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b3b7:	83 c4 0c             	add    esp,0xc
c002b3ba:	6a 0c                	push   0xc
c002b3bc:	56                   	push   esi
c002b3bd:	53                   	push   ebx
c002b3be:	e8 e9 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b3c3:	83 c4 0c             	add    esp,0xc
c002b3c6:	6a 0c                	push   0xc
c002b3c8:	56                   	push   esi
c002b3c9:	53                   	push   ebx
c002b3ca:	e8 dd f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b3cf:	83 c4 0c             	add    esp,0xc
c002b3d2:	6a 0c                	push   0xc
c002b3d4:	56                   	push   esi
c002b3d5:	53                   	push   ebx
c002b3d6:	e8 d1 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b3db:	68 ec 00 00 00       	push   0xec
c002b3e0:	6a 07                	push   0x7
c002b3e2:	56                   	push   esi
c002b3e3:	53                   	push   ebx
c002b3e4:	e8 03 f8 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3e9:	83 c4 1c             	add    esp,0x1c
c002b3ec:	6a 0c                	push   0xc
c002b3ee:	56                   	push   esi
c002b3ef:	53                   	push   ebx
c002b3f0:	e8 b7 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b3f5:	83 c4 0c             	add    esp,0xc
c002b3f8:	6a 0c                	push   0xc
c002b3fa:	56                   	push   esi
c002b3fb:	53                   	push   ebx
c002b3fc:	e8 ab f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b401:	83 c4 0c             	add    esp,0xc
c002b404:	6a 0c                	push   0xc
c002b406:	56                   	push   esi
c002b407:	53                   	push   ebx
c002b408:	e8 9f f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b40d:	83 c4 0c             	add    esp,0xc
c002b410:	6a 0c                	push   0xc
c002b412:	56                   	push   esi
c002b413:	53                   	push   ebx
c002b414:	e8 93 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b419:	83 c4 0c             	add    esp,0xc
c002b41c:	6a 0c                	push   0xc
c002b41e:	56                   	push   esi
c002b41f:	53                   	push   ebx
c002b420:	e8 87 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b425:	83 c4 10             	add    esp,0x10
c002b428:	84 c0                	test   al,al
c002b42a:	0f 84 61 01 00 00    	je     c002b591 <IDE::detect()+0x243>
c002b430:	31 ed                	xor    ebp,ebp
c002b432:	50                   	push   eax
c002b433:	6a 0c                	push   0xc
c002b435:	56                   	push   esi
c002b436:	53                   	push   ebx
c002b437:	e8 70 f8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b43c:	83 c4 10             	add    esp,0x10
c002b43f:	a8 01                	test   al,0x1
c002b441:	0f 85 6b 01 00 00    	jne    c002b5b2 <IDE::detect()+0x264>
c002b447:	a8 80                	test   al,0x80
c002b449:	75 04                	jne    c002b44f <IDE::detect()+0x101>
c002b44b:	a8 08                	test   al,0x8
c002b44d:	75 23                	jne    c002b472 <IDE::detect()+0x124>
c002b44f:	45                   	inc    ebp
c002b450:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b456:	7e da                	jle    c002b432 <IDE::detect()+0xe4>
c002b458:	83 ec 0c             	sub    esp,0xc
c002b45b:	6a 32                	push   0x32
c002b45d:	e8 0a 9f ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002b462:	83 c4 10             	add    esp,0x10
c002b465:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b46b:	75 c5                	jne    c002b432 <IDE::detect()+0xe4>
c002b46d:	e9 40 01 00 00       	jmp    c002b5b2 <IDE::detect()+0x264>
c002b472:	31 c9                	xor    ecx,ecx
c002b474:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b478:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b47c:	83 ec 0c             	sub    esp,0xc
c002b47f:	68 80 00 00 00       	push   0x80
c002b484:	55                   	push   ebp
c002b485:	6a 00                	push   0x0
c002b487:	56                   	push   esi
c002b488:	53                   	push   ebx
c002b489:	e8 f0 fd ff ff       	call   c002b27e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b48e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b493:	89 f8                	mov    eax,edi
c002b495:	c1 e0 06             	shl    eax,0x6
c002b498:	01 d8                	add    eax,ebx
c002b49a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b4a1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b4a8:	89 d1                	mov    ecx,edx
c002b4aa:	89 f2                	mov    edx,esi
c002b4ac:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b4b2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b4b6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b4bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b4c0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b4c7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b4cf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b4d6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b4de:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b4e4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b4eb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b4f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b4f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b4f9:	83 c4 20             	add    esp,0x20
c002b4fc:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b4ff:	83 c5 02             	add    ebp,0x2
c002b502:	83 c0 02             	add    eax,0x2
c002b505:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b50b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b50e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b514:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b518:	75 e2                	jne    c002b4fc <IDE::detect()+0x1ae>
c002b51a:	89 f8                	mov    eax,edi
c002b51c:	c1 e0 06             	shl    eax,0x6
c002b51f:	01 d8                	add    eax,ebx
c002b521:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b528:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b52f:	c1 ea 09             	shr    edx,0x9
c002b532:	83 e2 01             	and    edx,0x1
c002b535:	80 e1 01             	and    cl,0x1
c002b538:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b53e:	75 22                	jne    c002b562 <IDE::detect()+0x214>
c002b540:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b547:	74 47                	je     c002b590 <IDE::detect()+0x242>
c002b549:	83 ec 0c             	sub    esp,0xc
c002b54c:	68 7c 01 00 00       	push   0x17c
c002b551:	e8 85 ae fe ff       	call   c00163db <malloc>
c002b556:	89 04 24             	mov    DWORD PTR [esp],eax
c002b559:	89 c5                	mov    ebp,eax
c002b55b:	e8 2a 05 00 00       	call   c002ba8a <ATA::ATA()>
c002b560:	eb 17                	jmp    c002b579 <IDE::detect()+0x22b>
c002b562:	83 ec 0c             	sub    esp,0xc
c002b565:	68 84 01 00 00       	push   0x184
c002b56a:	e8 6c ae fe ff       	call   c00163db <malloc>
c002b56f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b572:	89 c5                	mov    ebp,eax
c002b574:	e8 83 0e 00 00       	call   c002c3fc <ATAPI::ATAPI()>
c002b579:	5a                   	pop    edx
c002b57a:	59                   	pop    ecx
c002b57b:	55                   	push   ebp
c002b57c:	53                   	push   ebx
c002b57d:	e8 26 fd fe ff       	call   c001b2a8 <Device::addChild(Device*)>
c002b582:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b585:	53                   	push   ebx
c002b586:	57                   	push   edi
c002b587:	6a 00                	push   0x0
c002b589:	55                   	push   ebp
c002b58a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b58d:	83 c4 20             	add    esp,0x20
c002b590:	47                   	inc    edi
c002b591:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b596:	74 0d                	je     c002b5a5 <IDE::detect()+0x257>
c002b598:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b5a0:	e9 da fd ff ff       	jmp    c002b37f <IDE::detect()+0x31>
c002b5a5:	4e                   	dec    esi
c002b5a6:	74 62                	je     c002b60a <IDE::detect()+0x2bc>
c002b5a8:	be 01 00 00 00       	mov    esi,0x1
c002b5ad:	e9 c5 fd ff ff       	jmp    c002b377 <IDE::detect()+0x29>
c002b5b2:	50                   	push   eax
c002b5b3:	6a 04                	push   0x4
c002b5b5:	56                   	push   esi
c002b5b6:	53                   	push   ebx
c002b5b7:	e8 f0 f6 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b5bc:	83 c4 0c             	add    esp,0xc
c002b5bf:	6a 05                	push   0x5
c002b5c1:	56                   	push   esi
c002b5c2:	53                   	push   ebx
c002b5c3:	89 c5                	mov    ebp,eax
c002b5c5:	e8 e2 f6 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b5ca:	89 e9                	mov    ecx,ebp
c002b5cc:	83 c4 10             	add    esp,0x10
c002b5cf:	0f b6 e9             	movzx  ebp,cl
c002b5d2:	83 fd 14             	cmp    ebp,0x14
c002b5d5:	74 2d                	je     c002b604 <IDE::detect()+0x2b6>
c002b5d7:	83 fd 69             	cmp    ebp,0x69
c002b5da:	75 b5                	jne    c002b591 <IDE::detect()+0x243>
c002b5dc:	3c 96                	cmp    al,0x96
c002b5de:	75 b1                	jne    c002b591 <IDE::detect()+0x243>
c002b5e0:	68 a1 00 00 00       	push   0xa1
c002b5e5:	6a 07                	push   0x7
c002b5e7:	56                   	push   esi
c002b5e8:	53                   	push   ebx
c002b5e9:	e8 fe f5 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5ee:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b5f5:	e8 72 9d ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002b5fa:	83 c4 10             	add    esp,0x10
c002b5fd:	b1 01                	mov    cl,0x1
c002b5ff:	e9 70 fe ff ff       	jmp    c002b474 <IDE::detect()+0x126>
c002b604:	3c eb                	cmp    al,0xeb
c002b606:	75 cf                	jne    c002b5d7 <IDE::detect()+0x289>
c002b608:	eb d6                	jmp    c002b5e0 <IDE::detect()+0x292>
c002b60a:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b610:	5b                   	pop    ebx
c002b611:	5e                   	pop    esi
c002b612:	5f                   	pop    edi
c002b613:	5d                   	pop    ebp
c002b614:	c3                   	ret    
c002b615:	90                   	nop

c002b616 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b616:	55                   	push   ebp
c002b617:	57                   	push   edi
c002b618:	56                   	push   esi
c002b619:	53                   	push   ebx
c002b61a:	83 ec 1c             	sub    esp,0x1c
c002b61d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b621:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b625:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b62d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b631:	88 c3                	mov    bl,al
c002b633:	25 ff 00 00 00       	and    eax,0xff
c002b638:	0f 84 88 00 00 00    	je     c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b63e:	83 ec 0c             	sub    esp,0xc
c002b641:	89 c7                	mov    edi,eax
c002b643:	68 a7 36 03 c0       	push   0xc00336a7
c002b648:	e8 c5 db fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002b64d:	83 c4 10             	add    esp,0x10
c002b650:	83 ff 01             	cmp    edi,0x1
c002b653:	74 6b                	je     c002b6c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b655:	83 ff 02             	cmp    edi,0x2
c002b658:	75 58                	jne    c002b6b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b65a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b65f:	50                   	push   eax
c002b660:	6a 01                	push   0x1
c002b662:	01 ff                	add    edi,edi
c002b664:	09 fe                	or     esi,edi
c002b666:	89 f0                	mov    eax,esi
c002b668:	0f b6 f0             	movzx  esi,al
c002b66b:	c1 e6 06             	shl    esi,0x6
c002b66e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b676:	50                   	push   eax
c002b677:	55                   	push   ebp
c002b678:	e8 2f f6 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b67d:	83 c4 10             	add    esp,0x10
c002b680:	a8 01                	test   al,0x1
c002b682:	74 02                	je     c002b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b684:	b3 07                	mov    bl,0x7
c002b686:	a8 02                	test   al,0x2
c002b688:	74 02                	je     c002b68c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b68a:	b3 03                	mov    bl,0x3
c002b68c:	a8 04                	test   al,0x4
c002b68e:	74 02                	je     c002b692 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b690:	b3 14                	mov    bl,0x14
c002b692:	a8 08                	test   al,0x8
c002b694:	74 02                	je     c002b698 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b696:	b3 03                	mov    bl,0x3
c002b698:	a8 10                	test   al,0x10
c002b69a:	74 02                	je     c002b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b69c:	b3 15                	mov    bl,0x15
c002b69e:	a8 20                	test   al,0x20
c002b6a0:	74 02                	je     c002b6a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b6a2:	b3 03                	mov    bl,0x3
c002b6a4:	a8 40                	test   al,0x40
c002b6a6:	74 02                	je     c002b6aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b6a8:	b3 16                	mov    bl,0x16
c002b6aa:	a8 80                	test   al,0x80
c002b6ac:	74 18                	je     c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6ae:	b3 0d                	mov    bl,0xd
c002b6b0:	eb 14                	jmp    c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6b2:	83 ff 03             	cmp    edi,0x3
c002b6b5:	74 0d                	je     c002b6c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b6b7:	83 ff 04             	cmp    edi,0x4
c002b6ba:	75 0a                	jne    c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6bc:	b3 08                	mov    bl,0x8
c002b6be:	eb 06                	jmp    c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6c0:	b3 13                	mov    bl,0x13
c002b6c2:	eb 02                	jmp    c002b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6c4:	b3 17                	mov    bl,0x17
c002b6c6:	83 c4 1c             	add    esp,0x1c
c002b6c9:	88 d8                	mov    al,bl
c002b6cb:	5b                   	pop    ebx
c002b6cc:	5e                   	pop    esi
c002b6cd:	5f                   	pop    edi
c002b6ce:	5d                   	pop    ebp
c002b6cf:	c3                   	ret    

c002b6d0 <IDE::polling(unsigned char, unsigned int)>:
c002b6d0:	57                   	push   edi
c002b6d1:	56                   	push   esi
c002b6d2:	53                   	push   ebx
c002b6d3:	bb 04 00 00 00       	mov    ebx,0x4
c002b6d8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b6dc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b6e1:	52                   	push   edx
c002b6e2:	6a 0c                	push   0xc
c002b6e4:	56                   	push   esi
c002b6e5:	57                   	push   edi
c002b6e6:	e8 c1 f5 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b6eb:	83 c4 10             	add    esp,0x10
c002b6ee:	4b                   	dec    ebx
c002b6ef:	75 f0                	jne    c002b6e1 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b6f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b6f6:	50                   	push   eax
c002b6f7:	6a 0c                	push   0xc
c002b6f9:	56                   	push   esi
c002b6fa:	57                   	push   edi
c002b6fb:	e8 ac f5 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002b700:	83 c4 10             	add    esp,0x10
c002b703:	a8 01                	test   al,0x1
c002b705:	75 17                	jne    c002b71e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b707:	a8 20                	test   al,0x20
c002b709:	75 0f                	jne    c002b71a <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b70b:	4b                   	dec    ebx
c002b70c:	74 10                	je     c002b71e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b70e:	a8 80                	test   al,0x80
c002b710:	75 e4                	jne    c002b6f6 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b712:	a8 08                	test   al,0x8
c002b714:	74 e0                	je     c002b6f6 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b716:	31 c0                	xor    eax,eax
c002b718:	eb 06                	jmp    c002b720 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b71a:	b0 01                	mov    al,0x1
c002b71c:	eb 02                	jmp    c002b720 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b71e:	b0 02                	mov    al,0x2
c002b720:	5b                   	pop    ebx
c002b721:	5e                   	pop    esi
c002b722:	5f                   	pop    edi
c002b723:	c3                   	ret    

c002b724 <SATABus::close(int, int, void*)>:
c002b724:	31 c0                	xor    eax,eax
c002b726:	c3                   	ret    
c002b727:	90                   	nop

c002b728 <SATABus::detect()>:
c002b728:	c3                   	ret    
c002b729:	90                   	nop

c002b72a <SATABus::SATABus()>:
c002b72a:	83 ec 0c             	sub    esp,0xc
c002b72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b731:	83 ec 08             	sub    esp,0x8
c002b734:	68 e0 36 03 c0       	push   0xc00336e0
c002b739:	50                   	push   eax
c002b73a:	e8 c1 fe fe ff       	call   c001b600 <HardDiskController::HardDiskController(char const*)>
c002b73f:	83 c4 10             	add    esp,0x10
c002b742:	ba 0c 37 03 c0       	mov    edx,0xc003370c
c002b747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b74b:	89 10                	mov    DWORD PTR [eax],edx
c002b74d:	83 ec 0c             	sub    esp,0xc
c002b750:	6a 50                	push   0x50
c002b752:	e8 62 b0 fe ff       	call   c00167b9 <Phys::allocateContiguousPages(int)>
c002b757:	83 c4 10             	add    esp,0x10
c002b75a:	89 c2                	mov    edx,eax
c002b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b760:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b766:	83 ec 0c             	sub    esp,0xc
c002b769:	6a 50                	push   0x50
c002b76b:	e8 8d c7 fe ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c002b770:	83 c4 10             	add    esp,0x10
c002b773:	89 c2                	mov    edx,eax
c002b775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b779:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b77f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b784:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b788:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b78e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b792:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b798:	83 ec 0c             	sub    esp,0xc
c002b79b:	6a 03                	push   0x3
c002b79d:	6a 50                	push   0x50
c002b79f:	51                   	push   ecx
c002b7a0:	52                   	push   edx
c002b7a1:	50                   	push   eax
c002b7a2:	e8 69 d0 fe ff       	call   c0018810 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b7a7:	83 c4 20             	add    esp,0x20
c002b7aa:	90                   	nop
c002b7ab:	83 c4 0c             	add    esp,0xc
c002b7ae:	c3                   	ret    
c002b7af:	90                   	nop

c002b7b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b7b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b7b4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b7b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b7ba:	09 c2                	or     edx,eax
c002b7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b7c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b7c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b7c8:	31 c0                	xor    eax,eax
c002b7ca:	c1 e9 08             	shr    ecx,0x8
c002b7cd:	83 e1 0f             	and    ecx,0xf
c002b7d0:	39 c8                	cmp    eax,ecx
c002b7d2:	74 0a                	je     c002b7de <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b7d4:	f6 c2 01             	test   dl,0x1
c002b7d7:	74 08                	je     c002b7e1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b7d9:	d1 ea                	shr    edx,1
c002b7db:	40                   	inc    eax
c002b7dc:	eb f2                	jmp    c002b7d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b7de:	83 c8 ff             	or     eax,0xffffffff
c002b7e1:	c3                   	ret    

c002b7e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b7e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b7e6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b7e9:	89 c2                	mov    edx,eax
c002b7eb:	c1 ea 08             	shr    edx,0x8
c002b7ee:	83 e2 0f             	and    edx,0xf
c002b7f1:	4a                   	dec    edx
c002b7f2:	75 32                	jne    c002b826 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b7f4:	83 e0 0f             	and    eax,0xf
c002b7f7:	83 f8 03             	cmp    eax,0x3
c002b7fa:	75 2a                	jne    c002b826 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b7fc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b7ff:	b8 02 00 00 00       	mov    eax,0x2
c002b804:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b80a:	74 1c                	je     c002b828 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b80c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b812:	b8 04 00 00 00       	mov    eax,0x4
c002b817:	74 0f                	je     c002b828 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b819:	31 c0                	xor    eax,eax
c002b81b:	83 fa 03             	cmp    edx,0x3
c002b81e:	0f 94 c0             	sete   al
c002b821:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b825:	c3                   	ret    
c002b826:	31 c0                	xor    eax,eax
c002b828:	c3                   	ret    
c002b829:	90                   	nop

c002b82a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b82a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b82e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b831:	0f ba e2 0f          	bt     edx,0xf
c002b835:	72 f7                	jb     c002b82e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b837:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b83a:	83 ca 10             	or     edx,0x10
c002b83d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b840:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b843:	83 ca 01             	or     edx,0x1
c002b846:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b849:	c3                   	ret    

c002b84a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b84a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b84e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b851:	83 e2 fe             	and    edx,0xfffffffe
c002b854:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b857:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b85a:	83 e2 ef             	and    edx,0xffffffef
c002b85d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b860:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b863:	0f ba e2 0e          	bt     edx,0xe
c002b867:	72 f7                	jb     c002b860 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b869:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b86c:	0f ba e2 0f          	bt     edx,0xf
c002b870:	72 ee                	jb     c002b860 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b872:	c3                   	ret    
c002b873:	90                   	nop

c002b874 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b874:	55                   	push   ebp
c002b875:	57                   	push   edi
c002b876:	56                   	push   esi
c002b877:	53                   	push   ebx
c002b878:	83 ec 1c             	sub    esp,0x1c
c002b87b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b87f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b883:	53                   	push   ebx
c002b884:	57                   	push   edi
c002b885:	e8 c0 ff ff ff       	call   c002b84a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b88a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b88e:	83 ec 0c             	sub    esp,0xc
c002b891:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b897:	c1 e5 0a             	shl    ebp,0xa
c002b89a:	01 e8                	add    eax,ebp
c002b89c:	89 03                	mov    DWORD PTR [ebx],eax
c002b89e:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b8a0:	68 00 04 00 00       	push   0x400
c002b8a5:	6a 00                	push   0x0
c002b8a7:	50                   	push   eax
c002b8a8:	e8 43 4c fd ff       	call   c00004f0 <memset>
c002b8ad:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b8b3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002b8b7:	83 c4 1c             	add    esp,0x1c
c002b8ba:	01 e8                	add    eax,ebp
c002b8bc:	89 03                	mov    DWORD PTR [ebx],eax
c002b8be:	c1 e6 08             	shl    esi,0x8
c002b8c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b8c8:	81 c6 00 80 00 00    	add    esi,0x8000
c002b8ce:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b8d4:	01 f0                	add    eax,esi
c002b8d6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b8d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b8dc:	68 00 01 00 00       	push   0x100
c002b8e1:	6a 00                	push   0x0
c002b8e3:	50                   	push   eax
c002b8e4:	e8 07 4c fd ff       	call   c00004f0 <memset>
c002b8e9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b8ef:	31 d2                	xor    edx,edx
c002b8f1:	01 f0                	add    eax,esi
c002b8f3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b8f6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b8fd:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002b903:	01 ee                	add    esi,ebp
c002b905:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002b909:	83 c4 10             	add    esp,0x10
c002b90c:	c1 e5 0d             	shl    ebp,0xd
c002b90f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002b915:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002b91b:	83 c6 20             	add    esi,0x20
c002b91e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b922:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b928:	01 e8                	add    eax,ebp
c002b92a:	01 d0                	add    eax,edx
c002b92c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b92f:	52                   	push   edx
c002b930:	68 00 01 00 00       	push   0x100
c002b935:	6a 00                	push   0x0
c002b937:	50                   	push   eax
c002b938:	e8 b3 4b fd ff       	call   c00004f0 <memset>
c002b93d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b943:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002b94a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b94e:	83 c4 10             	add    esp,0x10
c002b951:	01 e8                	add    eax,ebp
c002b953:	01 d0                	add    eax,edx
c002b955:	81 c2 00 01 00 00    	add    edx,0x100
c002b95b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b95e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002b964:	75 af                	jne    c002b915 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002b966:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b96d:	50                   	push   eax
c002b96e:	50                   	push   eax
c002b96f:	53                   	push   ebx
c002b970:	57                   	push   edi
c002b971:	e8 b4 fe ff ff       	call   c002b82a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b976:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b97d:	83 c4 2c             	add    esp,0x2c
c002b980:	5b                   	pop    ebx
c002b981:	5e                   	pop    esi
c002b982:	5f                   	pop    edi
c002b983:	5d                   	pop    ebp
c002b984:	c3                   	ret    
c002b985:	90                   	nop

c002b986 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b986:	55                   	push   ebp
c002b987:	57                   	push   edi
c002b988:	56                   	push   esi
c002b989:	53                   	push   ebx
c002b98a:	31 db                	xor    ebx,ebx
c002b98c:	83 ec 0c             	sub    esp,0xc
c002b98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b993:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b997:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b99a:	f7 c7 01 00 00 00    	test   edi,0x1
c002b9a0:	74 7a                	je     c002ba1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b9a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b9a6:	89 d8                	mov    eax,ebx
c002b9a8:	c1 e0 07             	shl    eax,0x7
c002b9ab:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b9b2:	55                   	push   ebp
c002b9b3:	56                   	push   esi
c002b9b4:	e8 29 fe ff ff       	call   c002b7e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b9b9:	5a                   	pop    edx
c002b9ba:	59                   	pop    ecx
c002b9bb:	83 f8 01             	cmp    eax,0x1
c002b9be:	75 21                	jne    c002b9e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b9c0:	50                   	push   eax
c002b9c1:	53                   	push   ebx
c002b9c2:	55                   	push   ebp
c002b9c3:	56                   	push   esi
c002b9c4:	e8 ab fe ff ff       	call   c002b874 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b9c9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b9d0:	e8 06 aa fe ff       	call   c00163db <malloc>
c002b9d5:	89 04 24             	mov    DWORD PTR [esp],eax
c002b9d8:	89 c5                	mov    ebp,eax
c002b9da:	e8 e3 10 00 00       	call   c002cac2 <SATA::SATA()>
c002b9df:	eb 24                	jmp    c002ba05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b9e1:	83 f8 04             	cmp    eax,0x4
c002b9e4:	75 36                	jne    c002ba1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b9e6:	51                   	push   ecx
c002b9e7:	53                   	push   ebx
c002b9e8:	55                   	push   ebp
c002b9e9:	56                   	push   esi
c002b9ea:	e8 85 fe ff ff       	call   c002b874 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b9ef:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b9f6:	e8 e0 a9 fe ff       	call   c00163db <malloc>
c002b9fb:	89 04 24             	mov    DWORD PTR [esp],eax
c002b9fe:	89 c5                	mov    ebp,eax
c002ba00:	e8 4b 18 00 00       	call   c002d250 <SATAPI::SATAPI()>
c002ba05:	58                   	pop    eax
c002ba06:	5a                   	pop    edx
c002ba07:	55                   	push   ebp
c002ba08:	56                   	push   esi
c002ba09:	e8 9a f8 fe ff       	call   c001b2a8 <Device::addChild(Device*)>
c002ba0e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ba11:	56                   	push   esi
c002ba12:	6a 00                	push   0x0
c002ba14:	53                   	push   ebx
c002ba15:	55                   	push   ebp
c002ba16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002ba19:	83 c4 20             	add    esp,0x20
c002ba1c:	d1 ef                	shr    edi,1
c002ba1e:	43                   	inc    ebx
c002ba1f:	83 fb 20             	cmp    ebx,0x20
c002ba22:	0f 85 72 ff ff ff    	jne    c002b99a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002ba28:	83 c4 0c             	add    esp,0xc
c002ba2b:	5b                   	pop    ebx
c002ba2c:	5e                   	pop    esi
c002ba2d:	5f                   	pop    edi
c002ba2e:	5d                   	pop    ebp
c002ba2f:	c3                   	ret    

c002ba30 <SATABus::open(int, int, void*)>:
c002ba30:	53                   	push   ebx
c002ba31:	83 ec 08             	sub    esp,0x8
c002ba34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ba38:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002ba3e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002ba44:	e8 b7 94 ff ff       	call   c0024f00 <KeDisablePreemption()>
c002ba49:	52                   	push   edx
c002ba4a:	52                   	push   edx
c002ba4b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002ba51:	53                   	push   ebx
c002ba52:	e8 2f ff ff ff       	call   c002b986 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002ba57:	e8 cc 94 ff ff       	call   c0024f28 <KeRestorePreemption()>
c002ba5c:	83 c4 18             	add    esp,0x18
c002ba5f:	31 c0                	xor    eax,eax
c002ba61:	5b                   	pop    ebx
c002ba62:	c3                   	ret    
c002ba63:	90                   	nop

c002ba64 <ATA::close(int, int, void*)>:
c002ba64:	83 ec 0c             	sub    esp,0xc
c002ba67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ba71:	85 c0                	test   eax,eax
c002ba73:	74 0c                	je     c002ba81 <ATA::close(int, int, void*)+0x1d>
c002ba75:	8b 10                	mov    edx,DWORD PTR [eax]
c002ba77:	83 ec 0c             	sub    esp,0xc
c002ba7a:	50                   	push   eax
c002ba7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ba7e:	83 c4 10             	add    esp,0x10
c002ba81:	31 c0                	xor    eax,eax
c002ba83:	83 c4 0c             	add    esp,0xc
c002ba86:	c3                   	ret    
c002ba87:	90                   	nop

c002ba88 <ATA::powerSaving(PowerSavingLevel)>:
c002ba88:	c3                   	ret    
c002ba89:	90                   	nop

c002ba8a <ATA::ATA()>:
c002ba8a:	83 ec 0c             	sub    esp,0xc
c002ba8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba91:	83 ec 04             	sub    esp,0x4
c002ba94:	68 00 02 00 00       	push   0x200
c002ba99:	68 e5 37 03 c0       	push   0xc00337e5
c002ba9e:	50                   	push   eax
c002ba9f:	e8 e6 fb fe ff       	call   c001b68a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002baa4:	83 c4 10             	add    esp,0x10
c002baa7:	ba 4c 37 03 c0       	mov    edx,0xc003374c
c002baac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bab0:	89 10                	mov    DWORD PTR [eax],edx
c002bab2:	90                   	nop
c002bab3:	83 c4 0c             	add    esp,0xc
c002bab6:	c3                   	ret    
c002bab7:	90                   	nop

c002bab8 <ATA::flush(bool)>:
c002bab8:	53                   	push   ebx
c002bab9:	83 ec 08             	sub    esp,0x8
c002babc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bac5:	83 f8 01             	cmp    eax,0x1
c002bac8:	19 c0                	sbb    eax,eax
c002baca:	83 e0 fd             	and    eax,0xfffffffd
c002bacd:	05 ea 00 00 00       	add    eax,0xea
c002bad2:	50                   	push   eax
c002bad3:	6a 07                	push   0x7
c002bad5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002badc:	50                   	push   eax
c002badd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bae3:	e8 04 f1 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bae8:	83 c4 0c             	add    esp,0xc
c002baeb:	6a 00                	push   0x0
c002baed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002baf4:	50                   	push   eax
c002baf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bafb:	e8 d0 fb ff ff       	call   c002b6d0 <IDE::polling(unsigned char, unsigned int)>
c002bb00:	83 c4 18             	add    esp,0x18
c002bb03:	5b                   	pop    ebx
c002bb04:	c3                   	ret    
c002bb05:	90                   	nop

c002bb06 <ATA::readyForCommand()>:
c002bb06:	56                   	push   esi
c002bb07:	53                   	push   ebx
c002bb08:	53                   	push   ebx
c002bb09:	31 db                	xor    ebx,ebx
c002bb0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bb0f:	51                   	push   ecx
c002bb10:	6a 0c                	push   0xc
c002bb12:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bb19:	50                   	push   eax
c002bb1a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bb20:	e8 87 f1 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002bb25:	83 c4 10             	add    esp,0x10
c002bb28:	a8 88                	test   al,0x88
c002bb2a:	74 1f                	je     c002bb4b <ATA::readyForCommand()+0x45>
c002bb2c:	43                   	inc    ebx
c002bb2d:	83 fb 63             	cmp    ebx,0x63
c002bb30:	7e dd                	jle    c002bb0f <ATA::readyForCommand()+0x9>
c002bb32:	83 ec 0c             	sub    esp,0xc
c002bb35:	6a 0a                	push   0xa
c002bb37:	e8 30 98 ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002bb3c:	83 c4 10             	add    esp,0x10
c002bb3f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bb45:	75 c8                	jne    c002bb0f <ATA::readyForCommand()+0x9>
c002bb47:	31 c0                	xor    eax,eax
c002bb49:	eb 02                	jmp    c002bb4d <ATA::readyForCommand()+0x47>
c002bb4b:	b0 01                	mov    al,0x1
c002bb4d:	5a                   	pop    edx
c002bb4e:	5b                   	pop    ebx
c002bb4f:	5e                   	pop    esi
c002bb50:	c3                   	ret    
c002bb51:	90                   	nop

c002bb52 <ATA::access(unsigned long long, int, void*, bool)>:
c002bb52:	55                   	push   ebp
c002bb53:	57                   	push   edi
c002bb54:	56                   	push   esi
c002bb55:	53                   	push   ebx
c002bb56:	83 ec 2c             	sub    esp,0x2c
c002bb59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bb5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bb61:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bb65:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bb69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bb6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bb71:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002bb75:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bb7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bb7f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bb85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb89:	c1 e0 06             	shl    eax,0x6
c002bb8c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bb94:	74 5b                	je     c002bbf1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002bb96:	89 fa                	mov    edx,edi
c002bb98:	89 f0                	mov    eax,esi
c002bb9a:	c1 ea 1c             	shr    edx,0x1c
c002bb9d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002bba1:	89 d1                	mov    ecx,edx
c002bba3:	09 c1                	or     ecx,eax
c002bba5:	74 25                	je     c002bbcc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bba7:	31 ed                	xor    ebp,ebp
c002bba9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bbb0:	89 fa                	mov    edx,edi
c002bbb2:	89 f0                	mov    eax,esi
c002bbb4:	0f ad d0             	shrd   eax,edx,cl
c002bbb7:	d3 ea                	shr    edx,cl
c002bbb9:	f6 c1 20             	test   cl,0x20
c002bbbc:	74 02                	je     c002bbc0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bbbe:	89 d0                	mov    eax,edx
c002bbc0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bbc4:	45                   	inc    ebp
c002bbc5:	83 fd 06             	cmp    ebp,0x6
c002bbc8:	75 df                	jne    c002bba9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bbca:	eb 71                	jmp    c002bc3d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002bbcc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bbd1:	89 f0                	mov    eax,esi
c002bbd3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bbda:	0f ac f8 10          	shrd   eax,edi,0x10
c002bbde:	bf 01 00 00 00       	mov    edi,0x1
c002bbe3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bbe7:	c1 ee 18             	shr    esi,0x18
c002bbea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bbef:	eb 53                	jmp    c002bc44 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bbf1:	6a 00                	push   0x0
c002bbf3:	6a 3f                	push   0x3f
c002bbf5:	57                   	push   edi
c002bbf6:	56                   	push   esi
c002bbf7:	e8 f4 2a 00 00       	call   c002e6f0 <__umoddi3>
c002bbfc:	83 c4 10             	add    esp,0x10
c002bbff:	40                   	inc    eax
c002bc00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bc04:	6a 00                	push   0x0
c002bc06:	68 f0 03 00 00       	push   0x3f0
c002bc0b:	57                   	push   edi
c002bc0c:	56                   	push   esi
c002bc0d:	e8 de 29 00 00       	call   c002e5f0 <__udivdi3>
c002bc12:	83 c4 10             	add    esp,0x10
c002bc15:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bc1a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bc21:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bc26:	6a 00                	push   0x0
c002bc28:	6a 3f                	push   0x3f
c002bc2a:	57                   	push   edi
c002bc2b:	31 ff                	xor    edi,edi
c002bc2d:	56                   	push   esi
c002bc2e:	e8 bd 29 00 00       	call   c002e5f0 <__udivdi3>
c002bc33:	83 c4 10             	add    esp,0x10
c002bc36:	83 e0 0f             	and    eax,0xf
c002bc39:	89 c6                	mov    esi,eax
c002bc3b:	eb 07                	jmp    c002bc44 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bc3d:	31 f6                	xor    esi,esi
c002bc3f:	bf 02 00 00 00       	mov    edi,0x2
c002bc44:	50                   	push   eax
c002bc45:	6a 00                	push   0x0
c002bc47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc4e:	50                   	push   eax
c002bc4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bc53:	e8 a2 f1 ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002bc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bc5b:	e8 a6 fe ff ff       	call   c002bb06 <ATA::readyForCommand()>
c002bc60:	83 c4 10             	add    esp,0x10
c002bc63:	84 c0                	test   al,al
c002bc65:	75 0a                	jne    c002bc71 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002bc67:	be 01 00 00 00       	mov    esi,0x1
c002bc6c:	e9 9b 02 00 00       	jmp    c002bf0c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bc71:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bc77:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bc7d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bc84:	c1 e0 04             	shl    eax,0x4
c002bc87:	09 c6                	or     esi,eax
c002bc89:	f7 c7 03 00 00 00    	test   edi,0x3
c002bc8f:	75 05                	jne    c002bc96 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002bc91:	83 ce a0             	or     esi,0xffffffa0
c002bc94:	eb 03                	jmp    c002bc99 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bc96:	83 ce e0             	or     esi,0xffffffe0
c002bc99:	89 f0                	mov    eax,esi
c002bc9b:	0f b6 f0             	movzx  esi,al
c002bc9e:	56                   	push   esi
c002bc9f:	6a 06                	push   0x6
c002bca1:	51                   	push   ecx
c002bca2:	52                   	push   edx
c002bca3:	e8 44 ef ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bca8:	83 c4 10             	add    esp,0x10
c002bcab:	6a 00                	push   0x0
c002bcad:	6a 01                	push   0x1
c002bcaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcb6:	50                   	push   eax
c002bcb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcbd:	e8 2a ef ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcc2:	89 f8                	mov    eax,edi
c002bcc4:	83 c4 10             	add    esp,0x10
c002bcc7:	0f b6 f0             	movzx  esi,al
c002bcca:	83 fe 02             	cmp    esi,0x2
c002bccd:	75 6e                	jne    c002bd3d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002bccf:	6a 00                	push   0x0
c002bcd1:	6a 08                	push   0x8
c002bcd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcda:	50                   	push   eax
c002bcdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bce1:	e8 06 ef ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bce6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bceb:	50                   	push   eax
c002bcec:	6a 09                	push   0x9
c002bcee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcf5:	50                   	push   eax
c002bcf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcfc:	e8 eb ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd01:	83 c4 20             	add    esp,0x20
c002bd04:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bd09:	50                   	push   eax
c002bd0a:	6a 0a                	push   0xa
c002bd0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd13:	50                   	push   eax
c002bd14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd1a:	e8 cd ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd1f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bd24:	50                   	push   eax
c002bd25:	6a 0b                	push   0xb
c002bd27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd2e:	50                   	push   eax
c002bd2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd35:	e8 b2 ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd3a:	83 c4 20             	add    esp,0x20
c002bd3d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bd42:	50                   	push   eax
c002bd43:	6a 02                	push   0x2
c002bd45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd4c:	50                   	push   eax
c002bd4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd53:	e8 94 ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd58:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bd5d:	50                   	push   eax
c002bd5e:	6a 03                	push   0x3
c002bd60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd67:	50                   	push   eax
c002bd68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd6e:	e8 79 ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd73:	83 c4 20             	add    esp,0x20
c002bd76:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002bd7b:	50                   	push   eax
c002bd7c:	6a 04                	push   0x4
c002bd7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd85:	50                   	push   eax
c002bd86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd8c:	e8 5b ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002bd96:	50                   	push   eax
c002bd97:	6a 05                	push   0x5
c002bd99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda0:	50                   	push   eax
c002bda1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bda7:	e8 40 ee ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdac:	83 c4 20             	add    esp,0x20
c002bdaf:	83 fe 02             	cmp    esi,0x2
c002bdb2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002bdb7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002bdbc:	85 c9                	test   ecx,ecx
c002bdbe:	74 07                	je     c002bdc7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002bdc0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bdc5:	75 47                	jne    c002be0e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002bdc7:	89 f8                	mov    eax,edi
c002bdc9:	0f b6 f8             	movzx  edi,al
c002bdcc:	31 c0                	xor    eax,eax
c002bdce:	83 ff 02             	cmp    edi,0x2
c002bdd1:	0f 95 c0             	setne  al
c002bdd4:	89 c6                	mov    esi,eax
c002bdd6:	74 0c                	je     c002bde4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002bdd8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bddd:	b8 30 00 00 00       	mov    eax,0x30
c002bde2:	75 2f                	jne    c002be13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bde4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bde8:	83 f2 01             	xor    edx,0x1
c002bdeb:	85 c9                	test   ecx,ecx
c002bded:	74 09                	je     c002bdf8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002bdef:	84 d2                	test   dl,dl
c002bdf1:	b8 24 00 00 00       	mov    eax,0x24
c002bdf6:	75 1b                	jne    c002be13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bdf8:	85 f6                	test   esi,esi
c002bdfa:	0f 84 67 fe ff ff    	je     c002bc67 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002be00:	84 d2                	test   dl,dl
c002be02:	b8 20 00 00 00       	mov    eax,0x20
c002be07:	75 0a                	jne    c002be13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002be09:	e9 59 fe ff ff       	jmp    c002bc67 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002be0e:	b8 34 00 00 00       	mov    eax,0x34
c002be13:	50                   	push   eax
c002be14:	6a 07                	push   0x7
c002be16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be1d:	50                   	push   eax
c002be1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be24:	e8 c3 ed ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be29:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002be2d:	83 c4 10             	add    esp,0x10
c002be30:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002be35:	85 f6                	test   esi,esi
c002be37:	0f 84 b5 00 00 00    	je     c002bef2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002be3d:	50                   	push   eax
c002be3e:	6a 01                	push   0x1
c002be40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be47:	50                   	push   eax
c002be48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be4e:	e8 7d f8 ff ff       	call   c002b6d0 <IDE::polling(unsigned char, unsigned int)>
c002be53:	83 c4 10             	add    esp,0x10
c002be56:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002be5c:	0f b6 c0             	movzx  eax,al
c002be5f:	85 c0                	test   eax,eax
c002be61:	74 1f                	je     c002be82 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002be63:	50                   	push   eax
c002be64:	89 c6                	mov    esi,eax
c002be66:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002be6d:	0f b6 d2             	movzx  edx,dl
c002be70:	50                   	push   eax
c002be71:	52                   	push   edx
c002be72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be78:	e8 99 f7 ff ff       	call   c002b616 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002be7d:	e9 87 00 00 00       	jmp    c002bf09 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002be82:	85 ed                	test   ebp,ebp
c002be84:	74 3b                	je     c002bec1 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002be86:	31 ff                	xor    edi,edi
c002be88:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002be8c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002be90:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002be95:	50                   	push   eax
c002be96:	50                   	push   eax
c002be97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be9e:	50                   	push   eax
c002be9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bea5:	e8 30 ed ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002beaa:	89 c2                	mov    edx,eax
c002beac:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002beb1:	66 ef                	out    dx,ax
c002beb3:	47                   	inc    edi
c002beb4:	83 c4 10             	add    esp,0x10
c002beb7:	81 ff 00 01 00 00    	cmp    edi,0x100
c002bebd:	75 c9                	jne    c002be88 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002bebf:	eb 23                	jmp    c002bee4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002bec1:	51                   	push   ecx
c002bec2:	0f b6 d2             	movzx  edx,dl
c002bec5:	51                   	push   ecx
c002bec6:	52                   	push   edx
c002bec7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002becd:	e8 08 ed ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002bed2:	b9 00 01 00 00       	mov    ecx,0x100
c002bed7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bedb:	89 c2                	mov    edx,eax
c002bedd:	fc                   	cld    
c002bede:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bee1:	83 c4 10             	add    esp,0x10
c002bee4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002beec:	4e                   	dec    esi
c002beed:	e9 43 ff ff ff       	jmp    c002be35 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002bef2:	31 f6                	xor    esi,esi
c002bef4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bef9:	74 11                	je     c002bf0c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002befb:	50                   	push   eax
c002befc:	50                   	push   eax
c002befd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002bf02:	50                   	push   eax
c002bf03:	53                   	push   ebx
c002bf04:	e8 af fb ff ff       	call   c002bab8 <ATA::flush(bool)>
c002bf09:	83 c4 10             	add    esp,0x10
c002bf0c:	83 c4 2c             	add    esp,0x2c
c002bf0f:	89 f0                	mov    eax,esi
c002bf11:	5b                   	pop    ebx
c002bf12:	5e                   	pop    esi
c002bf13:	5f                   	pop    edi
c002bf14:	5d                   	pop    ebp
c002bf15:	c3                   	ret    

c002bf16 <ATA::detectCHS()>:
c002bf16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bf1a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bf20:	c1 e0 06             	shl    eax,0x6
c002bf23:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bf29:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bf33:	c7 44 24 04 30 37 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033730
c002bf3b:	e9 5a 42 ff ff       	jmp    c002019a <KePanic(char const*)>

c002bf40 <ATA::open(int, int, void*)>:
c002bf40:	53                   	push   ebx
c002bf41:	83 ec 08             	sub    esp,0x8
c002bf44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bf48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bf4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bf50:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bf56:	c1 e0 06             	shl    eax,0x6
c002bf59:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bf5f:	01 d0                	add    eax,edx
c002bf61:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bf68:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bf6e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bf75:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bf7f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bf86:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bf8c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bf93:	75 0c                	jne    c002bfa1 <ATA::open(int, int, void*)+0x61>
c002bf95:	83 ec 0c             	sub    esp,0xc
c002bf98:	53                   	push   ebx
c002bf99:	e8 78 ff ff ff       	call   c002bf16 <ATA::detectCHS()>
c002bf9e:	83 c4 10             	add    esp,0x10
c002bfa1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bfa7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bfad:	c1 e0 06             	shl    eax,0x6
c002bfb0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bfb7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bfc1:	d1 e8                	shr    eax,1
c002bfc3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bfc9:	6a 04                	push   0x4
c002bfcb:	6a 0c                	push   0xc
c002bfcd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfd4:	50                   	push   eax
c002bfd5:	52                   	push   edx
c002bfd6:	e8 11 ec ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfdb:	90                   	nop
c002bfdc:	90                   	nop
c002bfdd:	6a 00                	push   0x0
c002bfdf:	6a 0c                	push   0xc
c002bfe1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfe8:	50                   	push   eax
c002bfe9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfef:	e8 f8 eb ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bff4:	83 c4 14             	add    esp,0x14
c002bff7:	53                   	push   ebx
c002bff8:	e8 f5 f6 fe ff       	call   c001b6f2 <PhysicalDisk::startCache()>
c002bffd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c000:	e8 31 09 ff ff       	call   c001c936 <createPartitionsForDisk(PhysicalDisk*)>
c002c005:	83 c4 18             	add    esp,0x18
c002c008:	31 c0                	xor    eax,eax
c002c00a:	5b                   	pop    ebx
c002c00b:	c3                   	ret    

c002c00c <combineCharAndColour(char, unsigned char)>:
c002c00c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c011:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c017:	c1 e0 08             	shl    eax,0x8
c002c01a:	09 d0                	or     eax,edx
c002c01c:	c3                   	ret    

c002c01d <combineColours(unsigned char, unsigned char)>:
c002c01d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c022:	c1 e0 04             	shl    eax,0x4
c002c025:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c029:	c3                   	ret    

c002c02a <ATA::read(unsigned long long, int, void*)>:
c002c02a:	55                   	push   ebp
c002c02b:	57                   	push   edi
c002c02c:	56                   	push   esi
c002c02d:	be 04 00 00 00       	mov    esi,0x4
c002c032:	53                   	push   ebx
c002c033:	83 ec 0c             	sub    esp,0xc
c002c036:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c03a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c03e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c042:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c046:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c049:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c04f:	0f 87 a1 01 00 00    	ja     c002c1f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c055:	85 c9                	test   ecx,ecx
c002c057:	be 06 00 00 00       	mov    esi,0x6
c002c05c:	0f 84 94 01 00 00    	je     c002c1f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c062:	55                   	push   ebp
c002c063:	55                   	push   ebp
c002c064:	6a 00                	push   0x0
c002c066:	51                   	push   ecx
c002c067:	53                   	push   ebx
c002c068:	52                   	push   edx
c002c069:	50                   	push   eax
c002c06a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c06e:	e8 df fa ff ff       	call   c002bb52 <ATA::access(unsigned long long, int, void*, bool)>
c002c073:	83 c4 20             	add    esp,0x20
c002c076:	85 c0                	test   eax,eax
c002c078:	89 c6                	mov    esi,eax
c002c07a:	0f 85 71 01 00 00    	jne    c002c1f1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c080:	50                   	push   eax
c002c081:	bd 10 27 00 00       	mov    ebp,0x2710
c002c086:	50                   	push   eax
c002c087:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c08d:	6a 0f                	push   0xf
c002c08f:	6a 00                	push   0x0
c002c091:	89 da                	mov    edx,ebx
c002c093:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c099:	e8 7f ff ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002c09e:	59                   	pop    ecx
c002c09f:	b9 0a 00 00 00       	mov    ecx,0xa
c002c0a4:	5b                   	pop    ebx
c002c0a5:	0f b6 d8             	movzx  ebx,al
c002c0a8:	89 d0                	mov    eax,edx
c002c0aa:	53                   	push   ebx
c002c0ab:	99                   	cdq    
c002c0ac:	f7 fd                	idiv   ebp
c002c0ae:	99                   	cdq    
c002c0af:	f7 f9                	idiv   ecx
c002c0b1:	83 c2 30             	add    edx,0x30
c002c0b4:	0f b6 d2             	movzx  edx,dl
c002c0b7:	52                   	push   edx
c002c0b8:	e8 4f ff ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c0bd:	5f                   	pop    edi
c002c0be:	bf e8 03 00 00       	mov    edi,0x3e8
c002c0c3:	5a                   	pop    edx
c002c0c4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c0ca:	53                   	push   ebx
c002c0cb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0d0:	99                   	cdq    
c002c0d1:	f7 ff                	idiv   edi
c002c0d3:	99                   	cdq    
c002c0d4:	f7 f9                	idiv   ecx
c002c0d6:	8d 42 30             	lea    eax,[edx+0x30]
c002c0d9:	0f b6 c0             	movzx  eax,al
c002c0dc:	50                   	push   eax
c002c0dd:	e8 2a ff ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c0e2:	5f                   	pop    edi
c002c0e3:	bf 64 00 00 00       	mov    edi,0x64
c002c0e8:	5a                   	pop    edx
c002c0e9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c0ef:	53                   	push   ebx
c002c0f0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0f5:	99                   	cdq    
c002c0f6:	f7 ff                	idiv   edi
c002c0f8:	99                   	cdq    
c002c0f9:	f7 f9                	idiv   ecx
c002c0fb:	8d 42 30             	lea    eax,[edx+0x30]
c002c0fe:	0f b6 c0             	movzx  eax,al
c002c101:	50                   	push   eax
c002c102:	e8 05 ff ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c107:	5a                   	pop    edx
c002c108:	5a                   	pop    edx
c002c109:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c10f:	53                   	push   ebx
c002c110:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c115:	99                   	cdq    
c002c116:	f7 f9                	idiv   ecx
c002c118:	99                   	cdq    
c002c119:	f7 f9                	idiv   ecx
c002c11b:	8d 42 30             	lea    eax,[edx+0x30]
c002c11e:	0f b6 c0             	movzx  eax,al
c002c121:	50                   	push   eax
c002c122:	e8 e5 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c127:	5a                   	pop    edx
c002c128:	5a                   	pop    edx
c002c129:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c12f:	53                   	push   ebx
c002c130:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c135:	99                   	cdq    
c002c136:	f7 f9                	idiv   ecx
c002c138:	83 c2 30             	add    edx,0x30
c002c13b:	0f b6 d2             	movzx  edx,dl
c002c13e:	52                   	push   edx
c002c13f:	e8 c8 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c144:	5a                   	pop    edx
c002c145:	5a                   	pop    edx
c002c146:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c14c:	53                   	push   ebx
c002c14d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c152:	99                   	cdq    
c002c153:	f7 fd                	idiv   ebp
c002c155:	99                   	cdq    
c002c156:	f7 f9                	idiv   ecx
c002c158:	8d 42 30             	lea    eax,[edx+0x30]
c002c15b:	0f b6 c0             	movzx  eax,al
c002c15e:	50                   	push   eax
c002c15f:	e8 a8 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c164:	5d                   	pop    ebp
c002c165:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c16a:	5a                   	pop    edx
c002c16b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c171:	53                   	push   ebx
c002c172:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c177:	99                   	cdq    
c002c178:	f7 fd                	idiv   ebp
c002c17a:	99                   	cdq    
c002c17b:	f7 f9                	idiv   ecx
c002c17d:	8d 42 30             	lea    eax,[edx+0x30]
c002c180:	0f b6 c0             	movzx  eax,al
c002c183:	50                   	push   eax
c002c184:	e8 83 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c189:	5d                   	pop    ebp
c002c18a:	5a                   	pop    edx
c002c18b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c191:	53                   	push   ebx
c002c192:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c197:	99                   	cdq    
c002c198:	f7 ff                	idiv   edi
c002c19a:	99                   	cdq    
c002c19b:	f7 f9                	idiv   ecx
c002c19d:	8d 42 30             	lea    eax,[edx+0x30]
c002c1a0:	0f b6 c0             	movzx  eax,al
c002c1a3:	50                   	push   eax
c002c1a4:	e8 63 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c1a9:	5f                   	pop    edi
c002c1aa:	5d                   	pop    ebp
c002c1ab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c1b1:	53                   	push   ebx
c002c1b2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1b7:	99                   	cdq    
c002c1b8:	f7 f9                	idiv   ecx
c002c1ba:	99                   	cdq    
c002c1bb:	f7 f9                	idiv   ecx
c002c1bd:	8d 42 30             	lea    eax,[edx+0x30]
c002c1c0:	0f b6 c0             	movzx  eax,al
c002c1c3:	50                   	push   eax
c002c1c4:	e8 43 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c1c9:	5a                   	pop    edx
c002c1ca:	5f                   	pop    edi
c002c1cb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c1d1:	53                   	push   ebx
c002c1d2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1d7:	99                   	cdq    
c002c1d8:	f7 f9                	idiv   ecx
c002c1da:	83 c2 30             	add    edx,0x30
c002c1dd:	0f b6 d2             	movzx  edx,dl
c002c1e0:	52                   	push   edx
c002c1e1:	e8 26 fe ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c1e6:	83 c4 10             	add    esp,0x10
c002c1e9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c1ef:	eb 05                	jmp    c002c1f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c1f1:	be 01 00 00 00       	mov    esi,0x1
c002c1f6:	83 c4 0c             	add    esp,0xc
c002c1f9:	89 f0                	mov    eax,esi
c002c1fb:	5b                   	pop    ebx
c002c1fc:	5e                   	pop    esi
c002c1fd:	5f                   	pop    edi
c002c1fe:	5d                   	pop    ebp
c002c1ff:	c3                   	ret    

c002c200 <ATA::write(unsigned long long, int, void*)>:
c002c200:	55                   	push   ebp
c002c201:	57                   	push   edi
c002c202:	56                   	push   esi
c002c203:	be 04 00 00 00       	mov    esi,0x4
c002c208:	53                   	push   ebx
c002c209:	83 ec 0c             	sub    esp,0xc
c002c20c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c214:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c218:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c21c:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c21f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c225:	0f 87 9c 01 00 00    	ja     c002c3c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c22b:	85 c9                	test   ecx,ecx
c002c22d:	be 06 00 00 00       	mov    esi,0x6
c002c232:	0f 84 8f 01 00 00    	je     c002c3c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c238:	55                   	push   ebp
c002c239:	55                   	push   ebp
c002c23a:	6a 01                	push   0x1
c002c23c:	51                   	push   ecx
c002c23d:	53                   	push   ebx
c002c23e:	52                   	push   edx
c002c23f:	50                   	push   eax
c002c240:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c244:	e8 09 f9 ff ff       	call   c002bb52 <ATA::access(unsigned long long, int, void*, bool)>
c002c249:	83 c4 20             	add    esp,0x20
c002c24c:	85 c0                	test   eax,eax
c002c24e:	89 c6                	mov    esi,eax
c002c250:	0f 85 6c 01 00 00    	jne    c002c3c2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c256:	50                   	push   eax
c002c257:	bd 10 27 00 00       	mov    ebp,0x2710
c002c25c:	50                   	push   eax
c002c25d:	6a 0f                	push   0xf
c002c25f:	6a 00                	push   0x0
c002c261:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c267:	e8 b1 fd ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002c26c:	5a                   	pop    edx
c002c26d:	59                   	pop    ecx
c002c26e:	b9 0a 00 00 00       	mov    ecx,0xa
c002c273:	0f b6 d8             	movzx  ebx,al
c002c276:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c27b:	53                   	push   ebx
c002c27c:	99                   	cdq    
c002c27d:	f7 fd                	idiv   ebp
c002c27f:	99                   	cdq    
c002c280:	f7 f9                	idiv   ecx
c002c282:	8d 42 30             	lea    eax,[edx+0x30]
c002c285:	0f b6 c0             	movzx  eax,al
c002c288:	50                   	push   eax
c002c289:	e8 7e fd ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c28e:	5f                   	pop    edi
c002c28f:	bf e8 03 00 00       	mov    edi,0x3e8
c002c294:	5a                   	pop    edx
c002c295:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c29b:	53                   	push   ebx
c002c29c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2a1:	99                   	cdq    
c002c2a2:	f7 ff                	idiv   edi
c002c2a4:	99                   	cdq    
c002c2a5:	f7 f9                	idiv   ecx
c002c2a7:	8d 42 30             	lea    eax,[edx+0x30]
c002c2aa:	0f b6 c0             	movzx  eax,al
c002c2ad:	50                   	push   eax
c002c2ae:	e8 59 fd ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c2b3:	5f                   	pop    edi
c002c2b4:	bf 64 00 00 00       	mov    edi,0x64
c002c2b9:	5a                   	pop    edx
c002c2ba:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c2c0:	53                   	push   ebx
c002c2c1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2c6:	99                   	cdq    
c002c2c7:	f7 ff                	idiv   edi
c002c2c9:	99                   	cdq    
c002c2ca:	f7 f9                	idiv   ecx
c002c2cc:	8d 42 30             	lea    eax,[edx+0x30]
c002c2cf:	0f b6 c0             	movzx  eax,al
c002c2d2:	50                   	push   eax
c002c2d3:	e8 34 fd ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c2d8:	5a                   	pop    edx
c002c2d9:	5a                   	pop    edx
c002c2da:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c2e0:	53                   	push   ebx
c002c2e1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2e6:	99                   	cdq    
c002c2e7:	f7 f9                	idiv   ecx
c002c2e9:	99                   	cdq    
c002c2ea:	f7 f9                	idiv   ecx
c002c2ec:	8d 42 30             	lea    eax,[edx+0x30]
c002c2ef:	0f b6 c0             	movzx  eax,al
c002c2f2:	50                   	push   eax
c002c2f3:	e8 14 fd ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c2f8:	5a                   	pop    edx
c002c2f9:	5a                   	pop    edx
c002c2fa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c300:	53                   	push   ebx
c002c301:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c306:	99                   	cdq    
c002c307:	f7 f9                	idiv   ecx
c002c309:	83 c2 30             	add    edx,0x30
c002c30c:	0f b6 d2             	movzx  edx,dl
c002c30f:	52                   	push   edx
c002c310:	e8 f7 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c315:	5a                   	pop    edx
c002c316:	5a                   	pop    edx
c002c317:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c31d:	53                   	push   ebx
c002c31e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c323:	99                   	cdq    
c002c324:	f7 fd                	idiv   ebp
c002c326:	99                   	cdq    
c002c327:	f7 f9                	idiv   ecx
c002c329:	8d 42 30             	lea    eax,[edx+0x30]
c002c32c:	0f b6 c0             	movzx  eax,al
c002c32f:	50                   	push   eax
c002c330:	e8 d7 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c335:	5d                   	pop    ebp
c002c336:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c33b:	5a                   	pop    edx
c002c33c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c342:	53                   	push   ebx
c002c343:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c348:	99                   	cdq    
c002c349:	f7 fd                	idiv   ebp
c002c34b:	99                   	cdq    
c002c34c:	f7 f9                	idiv   ecx
c002c34e:	8d 42 30             	lea    eax,[edx+0x30]
c002c351:	0f b6 c0             	movzx  eax,al
c002c354:	50                   	push   eax
c002c355:	e8 b2 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c35a:	5d                   	pop    ebp
c002c35b:	5a                   	pop    edx
c002c35c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c362:	53                   	push   ebx
c002c363:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c368:	99                   	cdq    
c002c369:	f7 ff                	idiv   edi
c002c36b:	99                   	cdq    
c002c36c:	f7 f9                	idiv   ecx
c002c36e:	8d 42 30             	lea    eax,[edx+0x30]
c002c371:	0f b6 c0             	movzx  eax,al
c002c374:	50                   	push   eax
c002c375:	e8 92 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c37a:	5f                   	pop    edi
c002c37b:	5d                   	pop    ebp
c002c37c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c382:	53                   	push   ebx
c002c383:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c388:	99                   	cdq    
c002c389:	f7 f9                	idiv   ecx
c002c38b:	99                   	cdq    
c002c38c:	f7 f9                	idiv   ecx
c002c38e:	8d 42 30             	lea    eax,[edx+0x30]
c002c391:	0f b6 c0             	movzx  eax,al
c002c394:	50                   	push   eax
c002c395:	e8 72 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c39a:	5a                   	pop    edx
c002c39b:	5f                   	pop    edi
c002c39c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c3a2:	53                   	push   ebx
c002c3a3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3a8:	99                   	cdq    
c002c3a9:	f7 f9                	idiv   ecx
c002c3ab:	83 c2 30             	add    edx,0x30
c002c3ae:	0f b6 d2             	movzx  edx,dl
c002c3b1:	52                   	push   edx
c002c3b2:	e8 55 fc ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002c3b7:	83 c4 10             	add    esp,0x10
c002c3ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c3c0:	eb 05                	jmp    c002c3c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c3c2:	be 01 00 00 00       	mov    esi,0x1
c002c3c7:	83 c4 0c             	add    esp,0xc
c002c3ca:	89 f0                	mov    eax,esi
c002c3cc:	5b                   	pop    ebx
c002c3cd:	5e                   	pop    esi
c002c3ce:	5f                   	pop    edi
c002c3cf:	5d                   	pop    ebp
c002c3d0:	c3                   	ret    
c002c3d1:	90                   	nop

c002c3d2 <ATAPI::write(unsigned long long, int, void*)>:
c002c3d2:	b8 03 00 00 00       	mov    eax,0x3
c002c3d7:	c3                   	ret    

c002c3d8 <ATAPI::close(int, int, void*)>:
c002c3d8:	83 ec 0c             	sub    esp,0xc
c002c3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c3df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c3e5:	85 c0                	test   eax,eax
c002c3e7:	74 0c                	je     c002c3f5 <ATAPI::close(int, int, void*)+0x1d>
c002c3e9:	8b 10                	mov    edx,DWORD PTR [eax]
c002c3eb:	83 ec 0c             	sub    esp,0xc
c002c3ee:	50                   	push   eax
c002c3ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c3f2:	83 c4 10             	add    esp,0x10
c002c3f5:	31 c0                	xor    eax,eax
c002c3f7:	83 c4 0c             	add    esp,0xc
c002c3fa:	c3                   	ret    
c002c3fb:	90                   	nop

c002c3fc <ATAPI::ATAPI()>:
c002c3fc:	83 ec 0c             	sub    esp,0xc
c002c3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c403:	83 ec 04             	sub    esp,0x4
c002c406:	68 00 08 00 00       	push   0x800
c002c40b:	68 85 38 03 c0       	push   0xc0033885
c002c410:	50                   	push   eax
c002c411:	e8 74 f2 fe ff       	call   c001b68a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c416:	83 c4 10             	add    esp,0x10
c002c419:	ba 94 37 03 c0       	mov    edx,0xc0033794
c002c41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c422:	89 10                	mov    DWORD PTR [eax],edx
c002c424:	90                   	nop
c002c425:	83 c4 0c             	add    esp,0xc
c002c428:	c3                   	ret    
c002c429:	90                   	nop

c002c42a <ATAPI::readyForCommand()>:
c002c42a:	56                   	push   esi
c002c42b:	53                   	push   ebx
c002c42c:	53                   	push   ebx
c002c42d:	31 db                	xor    ebx,ebx
c002c42f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c433:	51                   	push   ecx
c002c434:	6a 0c                	push   0xc
c002c436:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c43d:	50                   	push   eax
c002c43e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c444:	e8 63 e8 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002c449:	83 c4 10             	add    esp,0x10
c002c44c:	a8 88                	test   al,0x88
c002c44e:	74 25                	je     c002c475 <ATAPI::readyForCommand()+0x4b>
c002c450:	43                   	inc    ebx
c002c451:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c457:	7e da                	jle    c002c433 <ATAPI::readyForCommand()+0x9>
c002c459:	83 ec 0c             	sub    esp,0xc
c002c45c:	68 5e 01 00 00       	push   0x15e
c002c461:	e8 06 8f ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002c466:	83 c4 10             	add    esp,0x10
c002c469:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c46f:	75 c2                	jne    c002c433 <ATAPI::readyForCommand()+0x9>
c002c471:	31 c0                	xor    eax,eax
c002c473:	eb 02                	jmp    c002c477 <ATAPI::readyForCommand()+0x4d>
c002c475:	b0 01                	mov    al,0x1
c002c477:	5a                   	pop    edx
c002c478:	5b                   	pop    ebx
c002c479:	5e                   	pop    esi
c002c47a:	c3                   	ret    
c002c47b:	90                   	nop

c002c47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c47c:	55                   	push   ebp
c002c47d:	57                   	push   edi
c002c47e:	56                   	push   esi
c002c47f:	53                   	push   ebx
c002c480:	83 ec 20             	sub    esp,0x20
c002c483:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c487:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c48b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c48f:	6a 01                	push   0x1
c002c491:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c498:	50                   	push   eax
c002c499:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c49f:	e8 56 e9 ff ff       	call   c002adfa <IDE::enableIRQs(unsigned char, bool)>
c002c4a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4ab:	59                   	pop    ecx
c002c4ac:	5e                   	pop    esi
c002c4ad:	50                   	push   eax
c002c4ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4b4:	e8 0d e7 ff ff       	call   c002abc6 <IDE::prepareInterrupt(unsigned char)>
c002c4b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c4bc:	e8 69 ff ff ff       	call   c002c42a <ATAPI::readyForCommand()>
c002c4c1:	83 c4 10             	add    esp,0x10
c002c4c4:	84 c0                	test   al,al
c002c4c6:	75 0a                	jne    c002c4d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c4c8:	bb 01 00 00 00       	mov    ebx,0x1
c002c4cd:	e9 5f 02 00 00       	jmp    c002c731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c4d2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c4d8:	c1 e0 04             	shl    eax,0x4
c002c4db:	0f b6 c0             	movzx  eax,al
c002c4de:	50                   	push   eax
c002c4df:	6a 06                	push   0x6
c002c4e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4e8:	50                   	push   eax
c002c4e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4ef:	e8 f8 e6 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4f4:	6a 00                	push   0x0
c002c4f6:	6a 01                	push   0x1
c002c4f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4ff:	50                   	push   eax
c002c500:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c506:	e8 e1 e6 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c50b:	83 c4 20             	add    esp,0x20
c002c50e:	0f b6 c3             	movzx  eax,bl
c002c511:	50                   	push   eax
c002c512:	0f b6 df             	movzx  ebx,bh
c002c515:	6a 04                	push   0x4
c002c517:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c51e:	50                   	push   eax
c002c51f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c525:	e8 c2 e6 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c52a:	53                   	push   ebx
c002c52b:	6a 05                	push   0x5
c002c52d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c534:	50                   	push   eax
c002c535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c53b:	e8 ac e6 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c540:	83 c4 20             	add    esp,0x20
c002c543:	68 a0 00 00 00       	push   0xa0
c002c548:	6a 07                	push   0x7
c002c54a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c551:	50                   	push   eax
c002c552:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c558:	e8 8f e6 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c55d:	83 c4 0c             	add    esp,0xc
c002c560:	6a 01                	push   0x1
c002c562:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c569:	50                   	push   eax
c002c56a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c570:	e8 5b f1 ff ff       	call   c002b6d0 <IDE::polling(unsigned char, unsigned int)>
c002c575:	83 c4 10             	add    esp,0x10
c002c578:	0f b6 d8             	movzx  ebx,al
c002c57b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c581:	85 db                	test   ebx,ebx
c002c583:	74 20                	je     c002c5a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c585:	53                   	push   ebx
c002c586:	0f b6 c0             	movzx  eax,al
c002c589:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c590:	52                   	push   edx
c002c591:	50                   	push   eax
c002c592:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c598:	e8 79 f0 ff ff       	call   c002b616 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c59d:	83 c4 10             	add    esp,0x10
c002c5a0:	e9 8c 01 00 00       	jmp    c002c731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c5a5:	52                   	push   edx
c002c5a6:	0f b6 c0             	movzx  eax,al
c002c5a9:	52                   	push   edx
c002c5aa:	50                   	push   eax
c002c5ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5b1:	e8 24 e6 ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002c5b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c5ba:	b9 06 00 00 00       	mov    ecx,0x6
c002c5bf:	89 c2                	mov    edx,eax
c002c5c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c5c4:	89 e8                	mov    eax,ebp
c002c5c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c5ca:	83 c4 10             	add    esp,0x10
c002c5cd:	0f b6 c0             	movzx  eax,al
c002c5d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c5d4:	85 db                	test   ebx,ebx
c002c5d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c5dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c5e3:	0f 84 eb 00 00 00    	je     c002c6d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c5e9:	55                   	push   ebp
c002c5ea:	55                   	push   ebp
c002c5eb:	52                   	push   edx
c002c5ec:	50                   	push   eax
c002c5ed:	e8 6e e7 ff ff       	call   c002ad60 <IDE::waitInterrupt(unsigned char)>
c002c5f2:	83 c4 10             	add    esp,0x10
c002c5f5:	84 c0                	test   al,al
c002c5f7:	0f 84 cb fe ff ff    	je     c002c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c5fd:	56                   	push   esi
c002c5fe:	56                   	push   esi
c002c5ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c606:	50                   	push   eax
c002c607:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c60d:	e8 b4 e5 ff ff       	call   c002abc6 <IDE::prepareInterrupt(unsigned char)>
c002c612:	83 c4 0c             	add    esp,0xc
c002c615:	6a 04                	push   0x4
c002c617:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c61e:	50                   	push   eax
c002c61f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c625:	e8 82 e6 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002c62a:	83 c4 0c             	add    esp,0xc
c002c62d:	6a 05                	push   0x5
c002c62f:	89 c6                	mov    esi,eax
c002c631:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c638:	50                   	push   eax
c002c639:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c63f:	e8 68 e6 ff ff       	call   c002acac <IDE::read(unsigned char, unsigned char)>
c002c644:	83 c4 10             	add    esp,0x10
c002c647:	0f b6 e8             	movzx  ebp,al
c002c64a:	89 f0                	mov    eax,esi
c002c64c:	c1 e5 08             	shl    ebp,0x8
c002c64f:	0f b6 f0             	movzx  esi,al
c002c652:	09 f5                	or     ebp,esi
c002c654:	31 f6                	xor    esi,esi
c002c656:	d1 fd                	sar    ebp,1
c002c658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c65d:	74 5c                	je     c002c6bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c65f:	39 ee                	cmp    esi,ebp
c002c661:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c667:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c66e:	75 0d                	jne    c002c67d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002c670:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002c673:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002c677:	4b                   	dec    ebx
c002c678:	e9 57 ff ff ff       	jmp    c002c5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002c67d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002c681:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002c685:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002c68a:	51                   	push   ecx
c002c68b:	51                   	push   ecx
c002c68c:	52                   	push   edx
c002c68d:	50                   	push   eax
c002c68e:	e8 47 e5 ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002c693:	89 c2                	mov    edx,eax
c002c695:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002c69a:	66 ef                	out    dx,ax
c002c69c:	46                   	inc    esi
c002c69d:	83 c4 10             	add    esp,0x10
c002c6a0:	eb bd                	jmp    c002c65f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002c6a2:	51                   	push   ecx
c002c6a3:	51                   	push   ecx
c002c6a4:	52                   	push   edx
c002c6a5:	50                   	push   eax
c002c6a6:	e8 2f e5 ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002c6ab:	89 c2                	mov    edx,eax
c002c6ad:	66 ed                	in     ax,dx
c002c6af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002c6b3:	83 c4 10             	add    esp,0x10
c002c6b6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002c6ba:	46                   	inc    esi
c002c6bb:	39 ee                	cmp    esi,ebp
c002c6bd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c6c3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c6ca:	75 d6                	jne    c002c6a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002c6cc:	01 f6                	add    esi,esi
c002c6ce:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002c6d2:	eb a3                	jmp    c002c677 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002c6d4:	51                   	push   ecx
c002c6d5:	51                   	push   ecx
c002c6d6:	52                   	push   edx
c002c6d7:	50                   	push   eax
c002c6d8:	e8 83 e6 ff ff       	call   c002ad60 <IDE::waitInterrupt(unsigned char)>
c002c6dd:	83 c4 10             	add    esp,0x10
c002c6e0:	84 c0                	test   al,al
c002c6e2:	0f 84 e0 fd ff ff    	je     c002c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c6e8:	52                   	push   edx
c002c6e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c6ee:	52                   	push   edx
c002c6ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6f6:	50                   	push   eax
c002c6f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6fd:	e8 c4 e4 ff ff       	call   c002abc6 <IDE::prepareInterrupt(unsigned char)>
c002c702:	83 c4 10             	add    esp,0x10
c002c705:	50                   	push   eax
c002c706:	50                   	push   eax
c002c707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c70e:	50                   	push   eax
c002c70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c715:	e8 c0 e4 ff ff       	call   c002abda <IDE::getBase(unsigned char)>
c002c71a:	8d 50 07             	lea    edx,[eax+0x7]
c002c71d:	ec                   	in     al,dx
c002c71e:	83 c4 10             	add    esp,0x10
c002c721:	a8 88                	test   al,0x88
c002c723:	74 0a                	je     c002c72f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002c725:	4b                   	dec    ebx
c002c726:	75 dd                	jne    c002c705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002c728:	bb 02 00 00 00       	mov    ebx,0x2
c002c72d:	eb 02                	jmp    c002c731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c72f:	31 db                	xor    ebx,ebx
c002c731:	83 c4 1c             	add    esp,0x1c
c002c734:	89 d8                	mov    eax,ebx
c002c736:	5b                   	pop    ebx
c002c737:	5e                   	pop    esi
c002c738:	5f                   	pop    edi
c002c739:	5d                   	pop    ebp
c002c73a:	c3                   	ret    
c002c73b:	90                   	nop

c002c73c <ATAPI::diskRemoved()>:
c002c73c:	53                   	push   ebx
c002c73d:	83 ec 14             	sub    esp,0x14
c002c740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c744:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c74b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c751:	e8 ce fe fe ff       	call   c001c624 <LogicalDisk::unmount()>
c002c756:	58                   	pop    eax
c002c757:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c75d:	e8 a2 08 ff ff       	call   c001d004 <VCache::writeWriteBuffer()>
c002c762:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c76c:	83 c4 18             	add    esp,0x18
c002c76f:	5b                   	pop    ebx
c002c770:	e9 7f 08 ff ff       	jmp    c001cff4 <VCache::invalidateReadBuffer()>
c002c775:	90                   	nop

c002c776 <ATAPI::eject()>:
c002c776:	57                   	push   edi
c002c777:	b9 03 00 00 00       	mov    ecx,0x3
c002c77c:	53                   	push   ebx
c002c77d:	83 ec 14             	sub    esp,0x14
c002c780:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c784:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c788:	fc                   	cld    
c002c789:	31 c0                	xor    eax,eax
c002c78b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c78d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c792:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c797:	50                   	push   eax
c002c798:	50                   	push   eax
c002c799:	6a 00                	push   0x0
c002c79b:	6a 00                	push   0x0
c002c79d:	6a 00                	push   0x0
c002c79f:	6a 02                	push   0x2
c002c7a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c7a5:	50                   	push   eax
c002c7a6:	53                   	push   ebx
c002c7a7:	e8 d0 fc ff ff       	call   c002c47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c7ac:	83 c4 14             	add    esp,0x14
c002c7af:	53                   	push   ebx
c002c7b0:	e8 87 ff ff ff       	call   c002c73c <ATAPI::diskRemoved()>
c002c7b5:	83 c4 24             	add    esp,0x24
c002c7b8:	31 c0                	xor    eax,eax
c002c7ba:	5b                   	pop    ebx
c002c7bb:	5f                   	pop    edi
c002c7bc:	c3                   	ret    
c002c7bd:	90                   	nop

c002c7be <ATAPI::diskInserted()>:
c002c7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c7c2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c7c9:	c3                   	ret    

c002c7ca <ATAPI::detectMedia()>:
c002c7ca:	56                   	push   esi
c002c7cb:	53                   	push   ebx
c002c7cc:	83 ec 28             	sub    esp,0x28
c002c7cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c7d3:	6a 0c                	push   0xc
c002c7d5:	6a 00                	push   0x0
c002c7d7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c7db:	56                   	push   esi
c002c7dc:	e8 0f 3d fd ff       	call   c00004f0 <memset>
c002c7e1:	58                   	pop    eax
c002c7e2:	5a                   	pop    edx
c002c7e3:	6a 00                	push   0x0
c002c7e5:	6a 00                	push   0x0
c002c7e7:	6a 00                	push   0x0
c002c7e9:	6a 00                	push   0x0
c002c7eb:	56                   	push   esi
c002c7ec:	53                   	push   ebx
c002c7ed:	e8 8a fc ff ff       	call   c002c47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c7f2:	83 c4 1c             	add    esp,0x1c
c002c7f5:	6a 0c                	push   0xc
c002c7f7:	6a 00                	push   0x0
c002c7f9:	56                   	push   esi
c002c7fa:	e8 f1 3c fd ff       	call   c00004f0 <memset>
c002c7ff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c804:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c809:	59                   	pop    ecx
c002c80a:	58                   	pop    eax
c002c80b:	6a 01                	push   0x1
c002c80d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c811:	50                   	push   eax
c002c812:	6a 00                	push   0x0
c002c814:	6a 12                	push   0x12
c002c816:	56                   	push   esi
c002c817:	53                   	push   ebx
c002c818:	e8 5f fc ff ff       	call   c002c47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c81d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c821:	83 c4 20             	add    esp,0x20
c002c824:	83 e0 7f             	and    eax,0x7f
c002c827:	83 f8 70             	cmp    eax,0x70
c002c82a:	74 15                	je     c002c841 <ATAPI::detectMedia()+0x77>
c002c82c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c833:	75 0c                	jne    c002c841 <ATAPI::detectMedia()+0x77>
c002c835:	83 ec 0c             	sub    esp,0xc
c002c838:	53                   	push   ebx
c002c839:	e8 80 ff ff ff       	call   c002c7be <ATAPI::diskInserted()>
c002c83e:	83 c4 10             	add    esp,0x10
c002c841:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c845:	83 e0 0f             	and    eax,0xf
c002c848:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c84d:	0f b6 c0             	movzx  eax,al
c002c850:	75 19                	jne    c002c86b <ATAPI::detectMedia()+0xa1>
c002c852:	83 f8 02             	cmp    eax,0x2
c002c855:	75 14                	jne    c002c86b <ATAPI::detectMedia()+0xa1>
c002c857:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c85e:	74 24                	je     c002c884 <ATAPI::detectMedia()+0xba>
c002c860:	83 ec 0c             	sub    esp,0xc
c002c863:	53                   	push   ebx
c002c864:	e8 d3 fe ff ff       	call   c002c73c <ATAPI::diskRemoved()>
c002c869:	eb 16                	jmp    c002c881 <ATAPI::detectMedia()+0xb7>
c002c86b:	85 c0                	test   eax,eax
c002c86d:	75 15                	jne    c002c884 <ATAPI::detectMedia()+0xba>
c002c86f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c876:	75 0c                	jne    c002c884 <ATAPI::detectMedia()+0xba>
c002c878:	83 ec 0c             	sub    esp,0xc
c002c87b:	53                   	push   ebx
c002c87c:	e8 3d ff ff ff       	call   c002c7be <ATAPI::diskInserted()>
c002c881:	83 c4 10             	add    esp,0x10
c002c884:	83 c4 24             	add    esp,0x24
c002c887:	5b                   	pop    ebx
c002c888:	5e                   	pop    esi
c002c889:	c3                   	ret    

c002c88a <ATAPI::open(int, int, void*)>:
c002c88a:	56                   	push   esi
c002c88b:	53                   	push   ebx
c002c88c:	50                   	push   eax
c002c88d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c891:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c895:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c899:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c89f:	c1 e0 06             	shl    eax,0x6
c002c8a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c8a8:	01 d0                	add    eax,edx
c002c8aa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c8b1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c8b7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c8be:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c8c8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c8cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c8d5:	6a 04                	push   0x4
c002c8d7:	6a 0c                	push   0xc
c002c8d9:	51                   	push   ecx
c002c8da:	52                   	push   edx
c002c8db:	e8 0c e3 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8e0:	90                   	nop
c002c8e1:	90                   	nop
c002c8e2:	6a 00                	push   0x0
c002c8e4:	6a 0c                	push   0xc
c002c8e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c8ed:	50                   	push   eax
c002c8ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c8f4:	e8 f3 e2 ff ff       	call   c002abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8f9:	83 c4 14             	add    esp,0x14
c002c8fc:	68 78 01 00 00       	push   0x178
c002c901:	e8 d5 9a fe ff       	call   c00163db <malloc>
c002c906:	83 c4 0c             	add    esp,0xc
c002c909:	6a 00                	push   0x0
c002c90b:	68 ff ff ff 7f       	push   0x7fffffff
c002c910:	6a 00                	push   0x0
c002c912:	6a 00                	push   0x0
c002c914:	53                   	push   ebx
c002c915:	68 37 39 03 c0       	push   0xc0033937
c002c91a:	89 c6                	mov    esi,eax
c002c91c:	50                   	push   eax
c002c91d:	e8 40 fb fe ff       	call   c001c462 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c922:	83 c4 14             	add    esp,0x14
c002c925:	56                   	push   esi
c002c926:	e8 f7 fb fe ff       	call   c001c522 <LogicalDisk::assignDriveLetter()>
c002c92b:	5a                   	pop    edx
c002c92c:	59                   	pop    ecx
c002c92d:	0f be c0             	movsx  eax,al
c002c930:	50                   	push   eax
c002c931:	68 7c 37 03 c0       	push   0xc003377c
c002c936:	e8 d7 c8 fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002c93b:	58                   	pop    eax
c002c93c:	5a                   	pop    edx
c002c93d:	56                   	push   esi
c002c93e:	53                   	push   ebx
c002c93f:	e8 64 e9 fe ff       	call   c001b2a8 <Device::addChild(Device*)>
c002c944:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c94a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c94d:	e8 a0 ed fe ff       	call   c001b6f2 <PhysicalDisk::startCache()>
c002c952:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c959:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c95c:	e8 69 fe ff ff       	call   c002c7ca <ATAPI::detectMedia()>
c002c961:	83 c4 14             	add    esp,0x14
c002c964:	31 c0                	xor    eax,eax
c002c966:	5b                   	pop    ebx
c002c967:	5e                   	pop    esi
c002c968:	c3                   	ret    
c002c969:	90                   	nop

c002c96a <ATAPI::read(unsigned long long, int, void*)>:
c002c96a:	55                   	push   ebp
c002c96b:	57                   	push   edi
c002c96c:	56                   	push   esi
c002c96d:	53                   	push   ebx
c002c96e:	83 ec 1c             	sub    esp,0x1c
c002c971:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c975:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c979:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c97d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c984:	74 3c                	je     c002c9c2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c986:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c98a:	b9 03 00 00 00       	mov    ecx,0x3
c002c98f:	fc                   	cld    
c002c990:	31 c0                	xor    eax,eax
c002c992:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c994:	89 e8                	mov    eax,ebp
c002c996:	0f ce                	bswap  esi
c002c998:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c99c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c9a1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c9a5:	50                   	push   eax
c002c9a6:	50                   	push   eax
c002c9a7:	55                   	push   ebp
c002c9a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c9ac:	c1 e5 0b             	shl    ebp,0xb
c002c9af:	6a 00                	push   0x0
c002c9b1:	55                   	push   ebp
c002c9b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c9b6:	50                   	push   eax
c002c9b7:	53                   	push   ebx
c002c9b8:	e8 bf fa ff ff       	call   c002c47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c9bd:	83 c4 20             	add    esp,0x20
c002c9c0:	eb 1a                	jmp    c002c9dc <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c9c2:	83 ec 0c             	sub    esp,0xc
c002c9c5:	53                   	push   ebx
c002c9c6:	e8 ff fd ff ff       	call   c002c7ca <ATAPI::detectMedia()>
c002c9cb:	83 c4 10             	add    esp,0x10
c002c9ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c9d5:	75 af                	jne    c002c986 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c9d7:	b8 02 00 00 00       	mov    eax,0x2
c002c9dc:	83 c4 1c             	add    esp,0x1c
c002c9df:	5b                   	pop    ebx
c002c9e0:	5e                   	pop    esi
c002c9e1:	5f                   	pop    edi
c002c9e2:	5d                   	pop    ebp
c002c9e3:	c3                   	ret    

c002c9e4 <SATA::close(int, int, void*)>:
c002c9e4:	83 ec 0c             	sub    esp,0xc
c002c9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c9eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c9f1:	85 c0                	test   eax,eax
c002c9f3:	74 0c                	je     c002ca01 <SATA::close(int, int, void*)+0x1d>
c002c9f5:	8b 10                	mov    edx,DWORD PTR [eax]
c002c9f7:	83 ec 0c             	sub    esp,0xc
c002c9fa:	50                   	push   eax
c002c9fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c9fe:	83 c4 10             	add    esp,0x10
c002ca01:	31 c0                	xor    eax,eax
c002ca03:	83 c4 0c             	add    esp,0xc
c002ca06:	c3                   	ret    
c002ca07:	90                   	nop

c002ca08 <SATA::powerSaving(PowerSavingLevel)>:
c002ca08:	c3                   	ret    
c002ca09:	90                   	nop

c002ca0a <SATA::open(int, int, void*)>:
c002ca0a:	56                   	push   esi
c002ca0b:	53                   	push   ebx
c002ca0c:	83 ec 10             	sub    esp,0x10
c002ca0f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca13:	68 c4 37 03 c0       	push   0xc00337c4
c002ca18:	e8 f5 c7 fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002ca1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002ca21:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002ca2b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002ca35:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ca3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ca3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002ca49:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002ca50:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002ca56:	e8 8f 9c fe ff       	call   c00166ea <Phys::allocatePage()>
c002ca5b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002ca61:	89 c6                	mov    esi,eax
c002ca63:	e8 82 9c fe ff       	call   c00166ea <Phys::allocatePage()>
c002ca68:	81 c6 00 10 00 00    	add    esi,0x1000
c002ca6e:	83 c4 10             	add    esp,0x10
c002ca71:	39 c6                	cmp    esi,eax
c002ca73:	74 10                	je     c002ca85 <SATA::open(int, int, void*)+0x7b>
c002ca75:	83 ec 0c             	sub    esp,0xc
c002ca78:	68 d0 37 03 c0       	push   0xc00337d0
c002ca7d:	e8 18 37 ff ff       	call   c002019a <KePanic(char const*)>
c002ca82:	83 c4 10             	add    esp,0x10
c002ca85:	83 ec 0c             	sub    esp,0xc
c002ca88:	6a 02                	push   0x2
c002ca8a:	e8 6e b4 fe ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c002ca8f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002ca95:	6a 03                	push   0x3
c002ca97:	50                   	push   eax
c002ca98:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002ca9e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002caa4:	e8 5d bb fe ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c002caa9:	83 c4 14             	add    esp,0x14
c002caac:	53                   	push   ebx
c002caad:	e8 40 ec fe ff       	call   c001b6f2 <PhysicalDisk::startCache()>
c002cab2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cab5:	e8 7c fe fe ff       	call   c001c936 <createPartitionsForDisk(PhysicalDisk*)>
c002caba:	83 c4 14             	add    esp,0x14
c002cabd:	31 c0                	xor    eax,eax
c002cabf:	5b                   	pop    ebx
c002cac0:	5e                   	pop    esi
c002cac1:	c3                   	ret    

c002cac2 <SATA::SATA()>:
c002cac2:	83 ec 0c             	sub    esp,0xc
c002cac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cac9:	83 ec 04             	sub    esp,0x4
c002cacc:	68 00 02 00 00       	push   0x200
c002cad1:	68 e4 37 03 c0       	push   0xc00337e4
c002cad6:	50                   	push   eax
c002cad7:	e8 ae eb fe ff       	call   c001b68a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cadc:	83 c4 10             	add    esp,0x10
c002cadf:	ba 54 38 03 c0       	mov    edx,0xc0033854
c002cae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cae8:	89 10                	mov    DWORD PTR [eax],edx
c002caea:	90                   	nop
c002caeb:	83 c4 0c             	add    esp,0xc
c002caee:	c3                   	ret    
c002caef:	90                   	nop

c002caf0 <SATA::access(unsigned long long, int, void*, bool)>:
c002caf0:	55                   	push   ebp
c002caf1:	57                   	push   edi
c002caf2:	56                   	push   esi
c002caf3:	53                   	push   ebx
c002caf4:	83 ec 2c             	sub    esp,0x2c
c002caf7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002cafb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002caff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cb03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cb07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cb0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cb0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cb13:	fa                   	cli    
c002cb14:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cb1a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cb1f:	7e 10                	jle    c002cb31 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002cb21:	83 ec 0c             	sub    esp,0xc
c002cb24:	68 f4 37 03 c0       	push   0xc00337f4
c002cb29:	e8 6c 36 ff ff       	call   c002019a <KePanic(char const*)>
c002cb2e:	83 c4 10             	add    esp,0x10
c002cb31:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cb37:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002cb3d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002cb43:	89 e8                	mov    eax,ebp
c002cb45:	c1 e0 07             	shl    eax,0x7
c002cb48:	01 d0                	add    eax,edx
c002cb4a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cb54:	8d 45 02             	lea    eax,[ebp+0x2]
c002cb57:	51                   	push   ecx
c002cb58:	c1 e0 07             	shl    eax,0x7
c002cb5b:	51                   	push   ecx
c002cb5c:	01 d0                	add    eax,edx
c002cb5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002cb62:	50                   	push   eax
c002cb63:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cb69:	e8 42 ec ff ff       	call   c002b7b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cb6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cb72:	83 c4 10             	add    esp,0x10
c002cb75:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002cb7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002cb7e:	0f 84 ac 01 00 00    	je     c002cd30 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002cb84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cb88:	c1 e0 09             	shl    eax,0x9
c002cb8b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cb90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cb94:	74 0e                	je     c002cba4 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002cb96:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cb9c:	89 c1                	mov    ecx,eax
c002cb9e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cba2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cba4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cba8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cbae:	8d 45 02             	lea    eax,[ebp+0x2]
c002cbb1:	c1 e0 07             	shl    eax,0x7
c002cbb4:	01 d0                	add    eax,edx
c002cbb6:	8b 00                	mov    eax,DWORD PTR [eax]
c002cbb8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cbbe:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cbc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cbc8:	c1 e1 05             	shl    ecx,0x5
c002cbcb:	01 c8                	add    eax,ecx
c002cbcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002cbd1:	83 e1 01             	and    ecx,0x1
c002cbd4:	89 ce                	mov    esi,ecx
c002cbd6:	8a 08                	mov    cl,BYTE PTR [eax]
c002cbd8:	c1 e6 06             	shl    esi,0x6
c002cbdb:	83 e1 bf             	and    ecx,0xffffffbf
c002cbde:	09 f1                	or     ecx,esi
c002cbe0:	88 08                	mov    BYTE PTR [eax],cl
c002cbe2:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cbe4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cbea:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cbf0:	89 08                	mov    DWORD PTR [eax],ecx
c002cbf2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cbf8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cbfe:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cc04:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cc07:	50                   	push   eax
c002cc08:	68 90 00 00 00       	push   0x90
c002cc0d:	6a 00                	push   0x0
c002cc0f:	56                   	push   esi
c002cc10:	e8 db 38 fd ff       	call   c00004f0 <memset>
c002cc15:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cc1b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cc21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cc25:	83 c4 10             	add    esp,0x10
c002cc28:	48                   	dec    eax
c002cc29:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cc2e:	89 c1                	mov    ecx,eax
c002cc30:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cc36:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cc3b:	09 c8                	or     eax,ecx
c002cc3d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cc43:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cc49:	83 c8 80             	or     eax,0xffffff80
c002cc4c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cc52:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cc55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cc59:	25 00 7f 00 00       	and    eax,0x7f00
c002cc5e:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cc63:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cc68:	66 89 06             	mov    WORD PTR [esi],ax
c002cc6b:	b0 35                	mov    al,0x35
c002cc6d:	75 02                	jne    c002cc71 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002cc6f:	b0 25                	mov    al,0x25
c002cc71:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cc74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc78:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cc7c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002cc80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc84:	c1 e8 10             	shr    eax,0x10
c002cc87:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cc8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc8e:	c1 e8 18             	shr    eax,0x18
c002cc91:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cc94:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cc98:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cc9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cc9f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cca2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cca6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002ccaa:	89 ee                	mov    esi,ebp
c002ccac:	31 c0                	xor    eax,eax
c002ccae:	c1 e6 07             	shl    esi,0x7
c002ccb1:	01 d6                	add    esi,edx
c002ccb3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002ccb9:	80 e1 88             	and    cl,0x88
c002ccbc:	74 0a                	je     c002ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002ccbe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002ccc3:	74 0a                	je     c002cccf <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002ccc5:	40                   	inc    eax
c002ccc6:	eb eb                	jmp    c002ccb3 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002ccc8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cccd:	75 0a                	jne    c002ccd9 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cccf:	83 ec 0c             	sub    esp,0xc
c002ccd2:	68 2d 38 03 c0       	push   0xc003382d
c002ccd7:	eb 34                	jmp    c002cd0d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002ccd9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002ccdd:	c1 e5 07             	shl    ebp,0x7
c002cce0:	b8 01 00 00 00       	mov    eax,0x1
c002cce5:	01 ea                	add    edx,ebp
c002cce7:	d3 e0                	shl    eax,cl
c002cce9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002ccef:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002ccf5:	85 c8                	test   eax,ecx
c002ccf7:	74 2b                	je     c002cd24 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002ccf9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002ccff:	0f ba e1 1e          	bt     ecx,0x1e
c002cd03:	73 ea                	jae    c002ccef <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002cd05:	83 ec 0c             	sub    esp,0xc
c002cd08:	68 3b 38 03 c0       	push   0xc003383b
c002cd0d:	e8 00 c5 fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002cd12:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd17:	83 c4 10             	add    esp,0x10
c002cd1a:	48                   	dec    eax
c002cd1b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd20:	85 c0                	test   eax,eax
c002cd22:	eb 17                	jmp    c002cd3b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002cd24:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cd2a:	0f ba e0 1e          	bt     eax,0x1e
c002cd2e:	73 15                	jae    c002cd45 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002cd30:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd35:	48                   	dec    eax
c002cd36:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd3b:	75 01                	jne    c002cd3e <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002cd3d:	fb                   	sti    
c002cd3e:	b8 01 00 00 00       	mov    eax,0x1
c002cd43:	eb 29                	jmp    c002cd6e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cd45:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cd4a:	75 10                	jne    c002cd5c <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002cd4c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cd52:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cd56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cd5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cd5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd61:	48                   	dec    eax
c002cd62:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd67:	75 03                	jne    c002cd6c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002cd69:	fb                   	sti    
c002cd6a:	eb 02                	jmp    c002cd6e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cd6c:	31 c0                	xor    eax,eax
c002cd6e:	83 c4 2c             	add    esp,0x2c
c002cd71:	5b                   	pop    ebx
c002cd72:	5e                   	pop    esi
c002cd73:	5f                   	pop    edi
c002cd74:	5d                   	pop    ebp
c002cd75:	c3                   	ret    

c002cd76 <SATA::read(unsigned long long, int, void*)>:
c002cd76:	55                   	push   ebp
c002cd77:	57                   	push   edi
c002cd78:	56                   	push   esi
c002cd79:	be 04 00 00 00       	mov    esi,0x4
c002cd7e:	53                   	push   ebx
c002cd7f:	83 ec 0c             	sub    esp,0xc
c002cd82:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cd86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cd8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cd8e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cd92:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cd95:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cd9b:	0f 87 1a 02 00 00    	ja     c002cfbb <SATA::read(unsigned long long, int, void*)+0x245>
c002cda1:	85 c9                	test   ecx,ecx
c002cda3:	be 06 00 00 00       	mov    esi,0x6
c002cda8:	0f 84 0d 02 00 00    	je     c002cfbb <SATA::read(unsigned long long, int, void*)+0x245>
c002cdae:	56                   	push   esi
c002cdaf:	56                   	push   esi
c002cdb0:	6a 00                	push   0x0
c002cdb2:	51                   	push   ecx
c002cdb3:	53                   	push   ebx
c002cdb4:	52                   	push   edx
c002cdb5:	50                   	push   eax
c002cdb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cdba:	e8 31 fd ff ff       	call   c002caf0 <SATA::access(unsigned long long, int, void*, bool)>
c002cdbf:	83 c4 20             	add    esp,0x20
c002cdc2:	85 c0                	test   eax,eax
c002cdc4:	89 c6                	mov    esi,eax
c002cdc6:	0f 85 ea 01 00 00    	jne    c002cfb6 <SATA::read(unsigned long long, int, void*)+0x240>
c002cdcc:	50                   	push   eax
c002cdcd:	50                   	push   eax
c002cdce:	6a 0f                	push   0xf
c002cdd0:	6a 00                	push   0x0
c002cdd2:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cdd8:	bb 0a 00 00 00       	mov    ebx,0xa
c002cddd:	e8 3b f2 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cde2:	5a                   	pop    edx
c002cde3:	59                   	pop    ecx
c002cde4:	b9 10 27 00 00       	mov    ecx,0x2710
c002cde9:	0f b6 c0             	movzx  eax,al
c002cdec:	50                   	push   eax
c002cded:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdf2:	99                   	cdq    
c002cdf3:	f7 f9                	idiv   ecx
c002cdf5:	99                   	cdq    
c002cdf6:	f7 fb                	idiv   ebx
c002cdf8:	8d 42 30             	lea    eax,[edx+0x30]
c002cdfb:	0f b6 c0             	movzx  eax,al
c002cdfe:	50                   	push   eax
c002cdff:	e8 08 f2 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002ce04:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ce0a:	5f                   	pop    edi
c002ce0b:	5d                   	pop    ebp
c002ce0c:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ce11:	6a 0f                	push   0xf
c002ce13:	6a 00                	push   0x0
c002ce15:	e8 03 f2 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002ce1a:	5a                   	pop    edx
c002ce1b:	59                   	pop    ecx
c002ce1c:	0f b6 c0             	movzx  eax,al
c002ce1f:	50                   	push   eax
c002ce20:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce25:	99                   	cdq    
c002ce26:	f7 fd                	idiv   ebp
c002ce28:	99                   	cdq    
c002ce29:	f7 fb                	idiv   ebx
c002ce2b:	8d 42 30             	lea    eax,[edx+0x30]
c002ce2e:	0f b6 c0             	movzx  eax,al
c002ce31:	50                   	push   eax
c002ce32:	e8 d5 f1 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002ce37:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002ce3d:	5f                   	pop    edi
c002ce3e:	bf 64 00 00 00       	mov    edi,0x64
c002ce43:	58                   	pop    eax
c002ce44:	6a 0f                	push   0xf
c002ce46:	6a 00                	push   0x0
c002ce48:	e8 d0 f1 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002ce4d:	5a                   	pop    edx
c002ce4e:	59                   	pop    ecx
c002ce4f:	0f b6 c0             	movzx  eax,al
c002ce52:	50                   	push   eax
c002ce53:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce58:	99                   	cdq    
c002ce59:	f7 ff                	idiv   edi
c002ce5b:	99                   	cdq    
c002ce5c:	f7 fb                	idiv   ebx
c002ce5e:	8d 42 30             	lea    eax,[edx+0x30]
c002ce61:	0f b6 c0             	movzx  eax,al
c002ce64:	50                   	push   eax
c002ce65:	e8 a2 f1 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002ce6a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002ce70:	58                   	pop    eax
c002ce71:	5a                   	pop    edx
c002ce72:	6a 0f                	push   0xf
c002ce74:	6a 00                	push   0x0
c002ce76:	e8 a2 f1 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002ce7b:	59                   	pop    ecx
c002ce7c:	5a                   	pop    edx
c002ce7d:	0f b6 c0             	movzx  eax,al
c002ce80:	50                   	push   eax
c002ce81:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce86:	99                   	cdq    
c002ce87:	f7 fb                	idiv   ebx
c002ce89:	99                   	cdq    
c002ce8a:	f7 fb                	idiv   ebx
c002ce8c:	8d 42 30             	lea    eax,[edx+0x30]
c002ce8f:	0f b6 c0             	movzx  eax,al
c002ce92:	50                   	push   eax
c002ce93:	e8 74 f1 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002ce98:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002ce9e:	59                   	pop    ecx
c002ce9f:	58                   	pop    eax
c002cea0:	6a 0f                	push   0xf
c002cea2:	6a 00                	push   0x0
c002cea4:	e8 74 f1 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cea9:	5a                   	pop    edx
c002ceaa:	59                   	pop    ecx
c002ceab:	0f b6 c0             	movzx  eax,al
c002ceae:	50                   	push   eax
c002ceaf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ceb4:	99                   	cdq    
c002ceb5:	f7 fb                	idiv   ebx
c002ceb7:	83 c2 30             	add    edx,0x30
c002ceba:	0f b6 d2             	movzx  edx,dl
c002cebd:	52                   	push   edx
c002cebe:	e8 49 f1 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cec3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cec9:	58                   	pop    eax
c002ceca:	5a                   	pop    edx
c002cecb:	6a 0f                	push   0xf
c002cecd:	6a 00                	push   0x0
c002cecf:	e8 49 f1 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002ced4:	59                   	pop    ecx
c002ced5:	b9 10 27 00 00       	mov    ecx,0x2710
c002ceda:	5a                   	pop    edx
c002cedb:	0f b6 c0             	movzx  eax,al
c002cede:	50                   	push   eax
c002cedf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cee4:	99                   	cdq    
c002cee5:	f7 f9                	idiv   ecx
c002cee7:	99                   	cdq    
c002cee8:	f7 fb                	idiv   ebx
c002ceea:	8d 42 30             	lea    eax,[edx+0x30]
c002ceed:	0f b6 c0             	movzx  eax,al
c002cef0:	50                   	push   eax
c002cef1:	e8 16 f1 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cef6:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cefc:	59                   	pop    ecx
c002cefd:	58                   	pop    eax
c002cefe:	6a 0f                	push   0xf
c002cf00:	6a 00                	push   0x0
c002cf02:	e8 16 f1 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cf07:	5a                   	pop    edx
c002cf08:	59                   	pop    ecx
c002cf09:	0f b6 c0             	movzx  eax,al
c002cf0c:	50                   	push   eax
c002cf0d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf12:	99                   	cdq    
c002cf13:	f7 fd                	idiv   ebp
c002cf15:	99                   	cdq    
c002cf16:	f7 fb                	idiv   ebx
c002cf18:	8d 42 30             	lea    eax,[edx+0x30]
c002cf1b:	0f b6 c0             	movzx  eax,al
c002cf1e:	50                   	push   eax
c002cf1f:	e8 e8 f0 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cf24:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cf2a:	5d                   	pop    ebp
c002cf2b:	58                   	pop    eax
c002cf2c:	6a 0f                	push   0xf
c002cf2e:	6a 00                	push   0x0
c002cf30:	e8 e8 f0 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cf35:	5a                   	pop    edx
c002cf36:	59                   	pop    ecx
c002cf37:	0f b6 c0             	movzx  eax,al
c002cf3a:	50                   	push   eax
c002cf3b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf40:	99                   	cdq    
c002cf41:	f7 ff                	idiv   edi
c002cf43:	99                   	cdq    
c002cf44:	f7 fb                	idiv   ebx
c002cf46:	8d 42 30             	lea    eax,[edx+0x30]
c002cf49:	0f b6 c0             	movzx  eax,al
c002cf4c:	50                   	push   eax
c002cf4d:	e8 ba f0 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cf52:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cf58:	5f                   	pop    edi
c002cf59:	5d                   	pop    ebp
c002cf5a:	6a 0f                	push   0xf
c002cf5c:	6a 00                	push   0x0
c002cf5e:	e8 ba f0 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cf63:	5a                   	pop    edx
c002cf64:	59                   	pop    ecx
c002cf65:	0f b6 c0             	movzx  eax,al
c002cf68:	50                   	push   eax
c002cf69:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf6e:	99                   	cdq    
c002cf6f:	f7 fb                	idiv   ebx
c002cf71:	99                   	cdq    
c002cf72:	f7 fb                	idiv   ebx
c002cf74:	8d 42 30             	lea    eax,[edx+0x30]
c002cf77:	0f b6 c0             	movzx  eax,al
c002cf7a:	50                   	push   eax
c002cf7b:	e8 8c f0 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cf80:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cf86:	5f                   	pop    edi
c002cf87:	5d                   	pop    ebp
c002cf88:	6a 0f                	push   0xf
c002cf8a:	6a 00                	push   0x0
c002cf8c:	e8 8c f0 ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002cf91:	5a                   	pop    edx
c002cf92:	59                   	pop    ecx
c002cf93:	0f b6 c0             	movzx  eax,al
c002cf96:	50                   	push   eax
c002cf97:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf9c:	99                   	cdq    
c002cf9d:	f7 fb                	idiv   ebx
c002cf9f:	83 c2 30             	add    edx,0x30
c002cfa2:	0f b6 d2             	movzx  edx,dl
c002cfa5:	52                   	push   edx
c002cfa6:	e8 61 f0 ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002cfab:	83 c4 10             	add    esp,0x10
c002cfae:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cfb4:	eb 05                	jmp    c002cfbb <SATA::read(unsigned long long, int, void*)+0x245>
c002cfb6:	be 01 00 00 00       	mov    esi,0x1
c002cfbb:	83 c4 0c             	add    esp,0xc
c002cfbe:	89 f0                	mov    eax,esi
c002cfc0:	5b                   	pop    ebx
c002cfc1:	5e                   	pop    esi
c002cfc2:	5f                   	pop    edi
c002cfc3:	5d                   	pop    ebp
c002cfc4:	c3                   	ret    
c002cfc5:	90                   	nop

c002cfc6 <SATA::write(unsigned long long, int, void*)>:
c002cfc6:	55                   	push   ebp
c002cfc7:	57                   	push   edi
c002cfc8:	56                   	push   esi
c002cfc9:	53                   	push   ebx
c002cfca:	83 ec 0c             	sub    esp,0xc
c002cfcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cfd1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002cfd5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cfd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cfdd:	8d 70 ff             	lea    esi,[eax-0x1]
c002cfe0:	b8 04 00 00 00       	mov    eax,0x4
c002cfe5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002cfeb:	0f 87 2c 02 00 00    	ja     c002d21d <SATA::write(unsigned long long, int, void*)+0x257>
c002cff1:	85 db                	test   ebx,ebx
c002cff3:	b8 06 00 00 00       	mov    eax,0x6
c002cff8:	0f 84 1f 02 00 00    	je     c002d21d <SATA::write(unsigned long long, int, void*)+0x257>
c002cffe:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d002:	c1 e6 09             	shl    esi,0x9
c002d005:	01 de                	add    esi,ebx
c002d007:	50                   	push   eax
c002d008:	89 d7                	mov    edi,edx
c002d00a:	50                   	push   eax
c002d00b:	83 c7 01             	add    edi,0x1
c002d00e:	6a 01                	push   0x1
c002d010:	89 cd                	mov    ebp,ecx
c002d012:	53                   	push   ebx
c002d013:	83 d5 00             	adc    ebp,0x0
c002d016:	6a 01                	push   0x1
c002d018:	81 c3 00 02 00 00    	add    ebx,0x200
c002d01e:	51                   	push   ecx
c002d01f:	52                   	push   edx
c002d020:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d024:	e8 c7 fa ff ff       	call   c002caf0 <SATA::access(unsigned long long, int, void*, bool)>
c002d029:	83 c4 20             	add    esp,0x20
c002d02c:	39 f3                	cmp    ebx,esi
c002d02e:	89 fa                	mov    edx,edi
c002d030:	89 e9                	mov    ecx,ebp
c002d032:	75 d3                	jne    c002d007 <SATA::write(unsigned long long, int, void*)+0x41>
c002d034:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d038:	bd 10 27 00 00       	mov    ebp,0x2710
c002d03d:	bb 0a 00 00 00       	mov    ebx,0xa
c002d042:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d048:	50                   	push   eax
c002d049:	50                   	push   eax
c002d04a:	6a 0f                	push   0xf
c002d04c:	6a 00                	push   0x0
c002d04e:	e8 ca ef ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d053:	5a                   	pop    edx
c002d054:	59                   	pop    ecx
c002d055:	0f b6 c0             	movzx  eax,al
c002d058:	50                   	push   eax
c002d059:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d05e:	99                   	cdq    
c002d05f:	f7 fd                	idiv   ebp
c002d061:	99                   	cdq    
c002d062:	f7 fb                	idiv   ebx
c002d064:	8d 42 30             	lea    eax,[edx+0x30]
c002d067:	0f b6 c0             	movzx  eax,al
c002d06a:	50                   	push   eax
c002d06b:	e8 9c ef ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d070:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d076:	5e                   	pop    esi
c002d077:	5f                   	pop    edi
c002d078:	bf e8 03 00 00       	mov    edi,0x3e8
c002d07d:	6a 0f                	push   0xf
c002d07f:	6a 00                	push   0x0
c002d081:	e8 97 ef ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d086:	5a                   	pop    edx
c002d087:	59                   	pop    ecx
c002d088:	0f b6 c0             	movzx  eax,al
c002d08b:	50                   	push   eax
c002d08c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d091:	99                   	cdq    
c002d092:	f7 ff                	idiv   edi
c002d094:	99                   	cdq    
c002d095:	f7 fb                	idiv   ebx
c002d097:	8d 42 30             	lea    eax,[edx+0x30]
c002d09a:	0f b6 c0             	movzx  eax,al
c002d09d:	50                   	push   eax
c002d09e:	e8 69 ef ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d0a3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d0a9:	5e                   	pop    esi
c002d0aa:	be 64 00 00 00       	mov    esi,0x64
c002d0af:	58                   	pop    eax
c002d0b0:	6a 0f                	push   0xf
c002d0b2:	6a 00                	push   0x0
c002d0b4:	e8 64 ef ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d0b9:	5a                   	pop    edx
c002d0ba:	59                   	pop    ecx
c002d0bb:	0f b6 c0             	movzx  eax,al
c002d0be:	50                   	push   eax
c002d0bf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0c4:	99                   	cdq    
c002d0c5:	f7 fe                	idiv   esi
c002d0c7:	99                   	cdq    
c002d0c8:	f7 fb                	idiv   ebx
c002d0ca:	8d 42 30             	lea    eax,[edx+0x30]
c002d0cd:	0f b6 c0             	movzx  eax,al
c002d0d0:	50                   	push   eax
c002d0d1:	e8 36 ef ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d0d6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d0dc:	58                   	pop    eax
c002d0dd:	5a                   	pop    edx
c002d0de:	6a 0f                	push   0xf
c002d0e0:	6a 00                	push   0x0
c002d0e2:	e8 36 ef ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d0e7:	59                   	pop    ecx
c002d0e8:	5a                   	pop    edx
c002d0e9:	0f b6 c0             	movzx  eax,al
c002d0ec:	50                   	push   eax
c002d0ed:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0f2:	99                   	cdq    
c002d0f3:	f7 fb                	idiv   ebx
c002d0f5:	99                   	cdq    
c002d0f6:	f7 fb                	idiv   ebx
c002d0f8:	8d 42 30             	lea    eax,[edx+0x30]
c002d0fb:	0f b6 c0             	movzx  eax,al
c002d0fe:	50                   	push   eax
c002d0ff:	e8 08 ef ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d104:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d10a:	59                   	pop    ecx
c002d10b:	58                   	pop    eax
c002d10c:	6a 0f                	push   0xf
c002d10e:	6a 00                	push   0x0
c002d110:	e8 08 ef ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d115:	5a                   	pop    edx
c002d116:	59                   	pop    ecx
c002d117:	0f b6 c0             	movzx  eax,al
c002d11a:	50                   	push   eax
c002d11b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d120:	99                   	cdq    
c002d121:	f7 fb                	idiv   ebx
c002d123:	83 c2 30             	add    edx,0x30
c002d126:	0f b6 d2             	movzx  edx,dl
c002d129:	52                   	push   edx
c002d12a:	e8 dd ee ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d12f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d135:	58                   	pop    eax
c002d136:	5a                   	pop    edx
c002d137:	6a 0f                	push   0xf
c002d139:	6a 00                	push   0x0
c002d13b:	e8 dd ee ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d140:	59                   	pop    ecx
c002d141:	5a                   	pop    edx
c002d142:	0f b6 c0             	movzx  eax,al
c002d145:	50                   	push   eax
c002d146:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d14b:	99                   	cdq    
c002d14c:	f7 fd                	idiv   ebp
c002d14e:	99                   	cdq    
c002d14f:	f7 fb                	idiv   ebx
c002d151:	8d 42 30             	lea    eax,[edx+0x30]
c002d154:	0f b6 c0             	movzx  eax,al
c002d157:	50                   	push   eax
c002d158:	e8 af ee ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d15d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d163:	59                   	pop    ecx
c002d164:	5d                   	pop    ebp
c002d165:	6a 0f                	push   0xf
c002d167:	6a 00                	push   0x0
c002d169:	e8 af ee ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d16e:	5a                   	pop    edx
c002d16f:	59                   	pop    ecx
c002d170:	0f b6 c0             	movzx  eax,al
c002d173:	50                   	push   eax
c002d174:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d179:	99                   	cdq    
c002d17a:	f7 ff                	idiv   edi
c002d17c:	99                   	cdq    
c002d17d:	f7 fb                	idiv   ebx
c002d17f:	8d 42 30             	lea    eax,[edx+0x30]
c002d182:	0f b6 c0             	movzx  eax,al
c002d185:	50                   	push   eax
c002d186:	e8 81 ee ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d18b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d191:	5f                   	pop    edi
c002d192:	5d                   	pop    ebp
c002d193:	6a 0f                	push   0xf
c002d195:	6a 00                	push   0x0
c002d197:	e8 81 ee ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d19c:	5a                   	pop    edx
c002d19d:	59                   	pop    ecx
c002d19e:	0f b6 c0             	movzx  eax,al
c002d1a1:	50                   	push   eax
c002d1a2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1a7:	99                   	cdq    
c002d1a8:	f7 fe                	idiv   esi
c002d1aa:	99                   	cdq    
c002d1ab:	f7 fb                	idiv   ebx
c002d1ad:	8d 42 30             	lea    eax,[edx+0x30]
c002d1b0:	0f b6 c0             	movzx  eax,al
c002d1b3:	50                   	push   eax
c002d1b4:	e8 53 ee ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d1b9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d1bf:	5e                   	pop    esi
c002d1c0:	5f                   	pop    edi
c002d1c1:	6a 0f                	push   0xf
c002d1c3:	6a 00                	push   0x0
c002d1c5:	e8 53 ee ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d1ca:	5d                   	pop    ebp
c002d1cb:	5a                   	pop    edx
c002d1cc:	0f b6 c0             	movzx  eax,al
c002d1cf:	50                   	push   eax
c002d1d0:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1d5:	99                   	cdq    
c002d1d6:	f7 fb                	idiv   ebx
c002d1d8:	99                   	cdq    
c002d1d9:	f7 fb                	idiv   ebx
c002d1db:	8d 42 30             	lea    eax,[edx+0x30]
c002d1de:	0f b6 c0             	movzx  eax,al
c002d1e1:	50                   	push   eax
c002d1e2:	e8 25 ee ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d1e7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d1ed:	59                   	pop    ecx
c002d1ee:	5e                   	pop    esi
c002d1ef:	6a 0f                	push   0xf
c002d1f1:	6a 00                	push   0x0
c002d1f3:	e8 25 ee ff ff       	call   c002c01d <combineColours(unsigned char, unsigned char)>
c002d1f8:	5f                   	pop    edi
c002d1f9:	5d                   	pop    ebp
c002d1fa:	0f b6 c0             	movzx  eax,al
c002d1fd:	50                   	push   eax
c002d1fe:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d203:	99                   	cdq    
c002d204:	f7 fb                	idiv   ebx
c002d206:	83 c2 30             	add    edx,0x30
c002d209:	0f b6 d2             	movzx  edx,dl
c002d20c:	52                   	push   edx
c002d20d:	e8 fa ed ff ff       	call   c002c00c <combineCharAndColour(char, unsigned char)>
c002d212:	83 c4 10             	add    esp,0x10
c002d215:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d21b:	31 c0                	xor    eax,eax
c002d21d:	83 c4 0c             	add    esp,0xc
c002d220:	5b                   	pop    ebx
c002d221:	5e                   	pop    esi
c002d222:	5f                   	pop    edi
c002d223:	5d                   	pop    ebp
c002d224:	c3                   	ret    
c002d225:	90                   	nop

c002d226 <SATAPI::write(unsigned long long, int, void*)>:
c002d226:	b8 03 00 00 00       	mov    eax,0x3
c002d22b:	c3                   	ret    

c002d22c <SATAPI::close(int, int, void*)>:
c002d22c:	83 ec 0c             	sub    esp,0xc
c002d22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d233:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d239:	85 c0                	test   eax,eax
c002d23b:	74 0c                	je     c002d249 <SATAPI::close(int, int, void*)+0x1d>
c002d23d:	8b 10                	mov    edx,DWORD PTR [eax]
c002d23f:	83 ec 0c             	sub    esp,0xc
c002d242:	50                   	push   eax
c002d243:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d246:	83 c4 10             	add    esp,0x10
c002d249:	31 c0                	xor    eax,eax
c002d24b:	83 c4 0c             	add    esp,0xc
c002d24e:	c3                   	ret    
c002d24f:	90                   	nop

c002d250 <SATAPI::SATAPI()>:
c002d250:	83 ec 0c             	sub    esp,0xc
c002d253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d257:	83 ec 04             	sub    esp,0x4
c002d25a:	68 00 08 00 00       	push   0x800
c002d25f:	68 84 38 03 c0       	push   0xc0033884
c002d264:	50                   	push   eax
c002d265:	e8 20 e4 fe ff       	call   c001b68a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d26a:	83 c4 10             	add    esp,0x10
c002d26d:	ba 78 39 03 c0       	mov    edx,0xc0033978
c002d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d276:	89 10                	mov    DWORD PTR [eax],edx
c002d278:	90                   	nop
c002d279:	83 c4 0c             	add    esp,0xc
c002d27c:	c3                   	ret    
c002d27d:	90                   	nop

c002d27e <SATAPI::diskRemoved()>:
c002d27e:	c3                   	ret    
c002d27f:	90                   	nop

c002d280 <SATAPI::diskInserted()>:
c002d280:	83 ec 18             	sub    esp,0x18
c002d283:	68 90 38 03 c0       	push   0xc0033890
c002d288:	e8 85 bf fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002d28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d291:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d298:	83 c4 1c             	add    esp,0x1c
c002d29b:	c3                   	ret    

c002d29c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d29c:	55                   	push   ebp
c002d29d:	57                   	push   edi
c002d29e:	56                   	push   esi
c002d29f:	53                   	push   ebx
c002d2a0:	83 ec 34             	sub    esp,0x34
c002d2a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d2a7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d2ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d2af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d2b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d2b7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d2bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d2c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d2c7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d2cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d2d1:	83 c0 02             	add    eax,0x2
c002d2d4:	c1 e0 07             	shl    eax,0x7
c002d2d7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d2db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d2df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d2e3:	c1 e0 07             	shl    eax,0x7
c002d2e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d2ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d2ee:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d2f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d2fc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d302:	e8 a9 e4 ff ff       	call   c002b7b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d307:	83 c4 10             	add    esp,0x10
c002d30a:	89 c2                	mov    edx,eax
c002d30c:	b8 01 00 00 00       	mov    eax,0x1
c002d311:	83 fa ff             	cmp    edx,0xffffffff
c002d314:	0f 84 5f 02 00 00    	je     c002d579 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d31a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d322:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d328:	8b 00                	mov    eax,DWORD PTR [eax]
c002d32a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d330:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d336:	89 d1                	mov    ecx,edx
c002d338:	c1 e1 05             	shl    ecx,0x5
c002d33b:	01 c8                	add    eax,ecx
c002d33d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d33f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d345:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d34b:	89 08                	mov    DWORD PTR [eax],ecx
c002d34d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d353:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d359:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d35f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d362:	50                   	push   eax
c002d363:	68 90 00 00 00       	push   0x90
c002d368:	6a 00                	push   0x0
c002d36a:	53                   	push   ebx
c002d36b:	e8 80 31 fd ff       	call   c00004f0 <memset>
c002d370:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d373:	b9 0c 00 00 00       	mov    ecx,0xc
c002d378:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d37c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d37e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d384:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d388:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d38c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d392:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d396:	48                   	dec    eax
c002d397:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d39c:	89 c1                	mov    ecx,eax
c002d39e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d3a4:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d3a9:	09 c8                	or     eax,ecx
c002d3ab:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d3b1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d3b7:	83 c8 80             	or     eax,0xffffff80
c002d3ba:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d3c0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d3c3:	25 00 7f 00 00       	and    eax,0x7f00
c002d3c8:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d3cd:	66 89 03             	mov    WORD PTR [ebx],ax
c002d3d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3dc:	c1 e8 10             	shr    eax,0x10
c002d3df:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3e6:	c1 e8 18             	shr    eax,0x18
c002d3e9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d3ec:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d3f0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d3f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d3f7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d3fa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d3fe:	83 c4 10             	add    esp,0x10
c002d401:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d405:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d409:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d40d:	31 c0                	xor    eax,eax
c002d40f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d415:	80 e1 88             	and    cl,0x88
c002d418:	74 0a                	je     c002d424 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d41a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d41f:	74 0a                	je     c002d42b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d421:	40                   	inc    eax
c002d422:	eb eb                	jmp    c002d40f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d424:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d429:	75 43                	jne    c002d46e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d42b:	83 ec 0c             	sub    esp,0xc
c002d42e:	68 a8 38 03 c0       	push   0xc00338a8
c002d433:	e8 da bd fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002d438:	58                   	pop    eax
c002d439:	5a                   	pop    edx
c002d43a:	68 bd 38 03 c0       	push   0xc00338bd
c002d43f:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d445:	e8 6a 9f fe ff       	call   c00173b4 <VgaText::puts(char const*)>
c002d44a:	59                   	pop    ecx
c002d44b:	5b                   	pop    ebx
c002d44c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d450:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d456:	e8 ef e3 ff ff       	call   c002b84a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d45b:	5e                   	pop    esi
c002d45c:	5f                   	pop    edi
c002d45d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d461:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d467:	e8 be e3 ff ff       	call   c002b82a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d46c:	eb 48                	jmp    c002d4b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d46e:	b8 01 00 00 00       	mov    eax,0x1
c002d473:	88 d1                	mov    cl,dl
c002d475:	d3 e0                	shl    eax,cl
c002d477:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d47c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d482:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d486:	89 c7                	mov    edi,eax
c002d488:	c1 e3 07             	shl    ebx,0x7
c002d48b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d48f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d495:	85 c7                	test   edi,eax
c002d497:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d49d:	0f 84 a3 00 00 00    	je     c002d546 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d4a3:	0f ba e0 1e          	bt     eax,0x1e
c002d4a7:	73 1a                	jae    c002d4c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d4a9:	83 ec 0c             	sub    esp,0xc
c002d4ac:	68 cf 38 03 c0       	push   0xc00338cf
c002d4b1:	e8 5c bd fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002d4b6:	83 c4 10             	add    esp,0x10
c002d4b9:	b8 01 00 00 00       	mov    eax,0x1
c002d4be:	e9 b6 00 00 00       	jmp    c002d579 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d4c3:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d4c9:	83 f8 0d             	cmp    eax,0xd
c002d4cc:	77 0a                	ja     c002d4d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d4ce:	83 ec 0c             	sub    esp,0xc
c002d4d1:	68 c8 00 00 00       	push   0xc8
c002d4d6:	eb 28                	jmp    c002d500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d4d8:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d4de:	83 f8 0d             	cmp    eax,0xd
c002d4e1:	77 0a                	ja     c002d4ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d4e3:	83 ec 0c             	sub    esp,0xc
c002d4e6:	68 58 02 00 00       	push   0x258
c002d4eb:	eb 13                	jmp    c002d500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d4ed:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d4f3:	83 f8 06             	cmp    eax,0x6
c002d4f6:	77 10                	ja     c002d508 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d4f8:	83 ec 0c             	sub    esp,0xc
c002d4fb:	68 dc 05 00 00       	push   0x5dc
c002d500:	e8 67 7e ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002d505:	83 c4 10             	add    esp,0x10
c002d508:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d50c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d50f:	75 06                	jne    c002d517 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d511:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d515:	74 15                	je     c002d52c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d517:	83 fe 06             	cmp    esi,0x6
c002d51a:	77 10                	ja     c002d52c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d51c:	83 ec 0c             	sub    esp,0xc
c002d51f:	68 c4 09 00 00       	push   0x9c4
c002d524:	e8 43 7e ff ff       	call   c002536c <milliTenthSleep(unsigned int)>
c002d529:	83 c4 10             	add    esp,0x10
c002d52c:	46                   	inc    esi
c002d52d:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d533:	0f 85 56 ff ff ff    	jne    c002d48f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d539:	83 ec 0c             	sub    esp,0xc
c002d53c:	68 e2 38 03 c0       	push   0xc00338e2
c002d541:	e9 6b ff ff ff       	jmp    c002d4b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d546:	0f ba e0 1e          	bt     eax,0x1e
c002d54a:	73 0d                	jae    c002d559 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d54c:	83 ec 0c             	sub    esp,0xc
c002d54f:	68 f6 38 03 c0       	push   0xc00338f6
c002d554:	e9 58 ff ff ff       	jmp    c002d4b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d559:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d55e:	74 17                	je     c002d577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d560:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d565:	74 10                	je     c002d577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d567:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d56d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d571:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d575:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d577:	31 c0                	xor    eax,eax
c002d579:	83 c4 2c             	add    esp,0x2c
c002d57c:	5b                   	pop    ebx
c002d57d:	5e                   	pop    esi
c002d57e:	5f                   	pop    edi
c002d57f:	5d                   	pop    ebp
c002d580:	c3                   	ret    
c002d581:	90                   	nop

c002d582 <SATAPI::eject()>:
c002d582:	57                   	push   edi
c002d583:	b9 03 00 00 00       	mov    ecx,0x3
c002d588:	83 ec 18             	sub    esp,0x18
c002d58b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d58f:	fc                   	cld    
c002d590:	31 c0                	xor    eax,eax
c002d592:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d594:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d599:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d59e:	50                   	push   eax
c002d59f:	6a 00                	push   0x0
c002d5a1:	6a 00                	push   0x0
c002d5a3:	6a 00                	push   0x0
c002d5a5:	6a 00                	push   0x0
c002d5a7:	6a 02                	push   0x2
c002d5a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d5ad:	50                   	push   eax
c002d5ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d5b2:	e8 e5 fc ff ff       	call   c002d29c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d5b7:	83 c4 38             	add    esp,0x38
c002d5ba:	31 c0                	xor    eax,eax
c002d5bc:	5f                   	pop    edi
c002d5bd:	c3                   	ret    

c002d5be <SATAPI::detectMedia()>:
c002d5be:	53                   	push   ebx
c002d5bf:	83 ec 14             	sub    esp,0x14
c002d5c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d5c6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d5cc:	e8 33 fa fe ff       	call   c001d004 <VCache::writeWriteBuffer()>
c002d5d1:	59                   	pop    ecx
c002d5d2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d5d8:	e8 17 fa fe ff       	call   c001cff4 <VCache::invalidateReadBuffer()>
c002d5dd:	c7 04 24 0b 39 03 c0 	mov    DWORD PTR [esp],0xc003390b
c002d5e4:	e8 29 bc fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002d5e9:	83 c4 10             	add    esp,0x10
c002d5ec:	31 c0                	xor    eax,eax
c002d5ee:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d5f5:	85 d2                	test   edx,edx
c002d5f7:	74 0f                	je     c002d608 <SATAPI::detectMedia()+0x4a>
c002d5f9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d5ff:	75 07                	jne    c002d608 <SATAPI::detectMedia()+0x4a>
c002d601:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d608:	40                   	inc    eax
c002d609:	83 f8 1a             	cmp    eax,0x1a
c002d60c:	75 e0                	jne    c002d5ee <SATAPI::detectMedia()+0x30>
c002d60e:	83 c4 08             	add    esp,0x8
c002d611:	5b                   	pop    ebx
c002d612:	c3                   	ret    
c002d613:	90                   	nop

c002d614 <SATAPI::open(int, int, void*)>:
c002d614:	56                   	push   esi
c002d615:	53                   	push   ebx
c002d616:	51                   	push   ecx
c002d617:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d61b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d61f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d629:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d62f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d633:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d63d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d647:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d64e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d654:	e8 91 90 fe ff       	call   c00166ea <Phys::allocatePage()>
c002d659:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d65f:	89 c6                	mov    esi,eax
c002d661:	e8 84 90 fe ff       	call   c00166ea <Phys::allocatePage()>
c002d666:	81 c6 00 10 00 00    	add    esi,0x1000
c002d66c:	39 c6                	cmp    esi,eax
c002d66e:	74 10                	je     c002d680 <SATAPI::open(int, int, void*)+0x6c>
c002d670:	83 ec 0c             	sub    esp,0xc
c002d673:	68 20 39 03 c0       	push   0xc0033920
c002d678:	e8 1d 2b ff ff       	call   c002019a <KePanic(char const*)>
c002d67d:	83 c4 10             	add    esp,0x10
c002d680:	83 ec 0c             	sub    esp,0xc
c002d683:	6a 02                	push   0x2
c002d685:	e8 73 a8 fe ff       	call   c0017efd <Virt::allocateKernelVirtualPages(int)>
c002d68a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d690:	6a 03                	push   0x3
c002d692:	50                   	push   eax
c002d693:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d699:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d69f:	e8 62 af fe ff       	call   c0018606 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d6a4:	83 c4 14             	add    esp,0x14
c002d6a7:	68 78 01 00 00       	push   0x178
c002d6ac:	e8 2a 8d fe ff       	call   c00163db <malloc>
c002d6b1:	83 c4 0c             	add    esp,0xc
c002d6b4:	6a 00                	push   0x0
c002d6b6:	68 ff ff ff 7f       	push   0x7fffffff
c002d6bb:	6a 00                	push   0x0
c002d6bd:	6a 00                	push   0x0
c002d6bf:	53                   	push   ebx
c002d6c0:	68 36 39 03 c0       	push   0xc0033936
c002d6c5:	89 c6                	mov    esi,eax
c002d6c7:	50                   	push   eax
c002d6c8:	e8 95 ed fe ff       	call   c001c462 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d6cd:	83 c4 14             	add    esp,0x14
c002d6d0:	56                   	push   esi
c002d6d1:	e8 4c ee fe ff       	call   c001c522 <LogicalDisk::assignDriveLetter()>
c002d6d6:	5a                   	pop    edx
c002d6d7:	59                   	pop    ecx
c002d6d8:	0f be c0             	movsx  eax,al
c002d6db:	50                   	push   eax
c002d6dc:	68 7c 37 03 c0       	push   0xc003377c
c002d6e1:	e8 2c bb fe ff       	call   c0019212 <Dbg::kprintf(char const*, ...)>
c002d6e6:	58                   	pop    eax
c002d6e7:	5a                   	pop    edx
c002d6e8:	56                   	push   esi
c002d6e9:	53                   	push   ebx
c002d6ea:	e8 b9 db fe ff       	call   c001b2a8 <Device::addChild(Device*)>
c002d6ef:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d6f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d6f8:	e8 f5 df fe ff       	call   c001b6f2 <PhysicalDisk::startCache()>
c002d6fd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d704:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d707:	e8 b2 fe ff ff       	call   c002d5be <SATAPI::detectMedia()>
c002d70c:	83 c4 14             	add    esp,0x14
c002d70f:	31 c0                	xor    eax,eax
c002d711:	5b                   	pop    ebx
c002d712:	5e                   	pop    esi
c002d713:	c3                   	ret    

c002d714 <SATAPI::read(unsigned long long, int, void*)>:
c002d714:	55                   	push   ebp
c002d715:	57                   	push   edi
c002d716:	56                   	push   esi
c002d717:	53                   	push   ebx
c002d718:	83 ec 3c             	sub    esp,0x3c
c002d71b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002d71f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d723:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002d727:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002d72b:	83 fd 04             	cmp    ebp,0x4
c002d72e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d732:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d736:	7e 10                	jle    c002d748 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002d738:	83 ec 0c             	sub    esp,0xc
c002d73b:	68 44 39 03 c0       	push   0xc0033944
c002d740:	e8 55 2a ff ff       	call   c002019a <KePanic(char const*)>
c002d745:	83 c4 10             	add    esp,0x10
c002d748:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d74e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d754:	51                   	push   ecx
c002d755:	50                   	push   eax
c002d756:	83 c0 02             	add    eax,0x2
c002d759:	c1 e0 07             	shl    eax,0x7
c002d75c:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d762:	50                   	push   eax
c002d763:	52                   	push   edx
c002d764:	e8 0b e1 ff ff       	call   c002b874 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d769:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d76d:	b9 03 00 00 00       	mov    ecx,0x3
c002d772:	fc                   	cld    
c002d773:	31 c0                	xor    eax,eax
c002d775:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d777:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d77c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d781:	83 c4 0c             	add    esp,0xc
c002d784:	6a 00                	push   0x0
c002d786:	6a 00                	push   0x0
c002d788:	6a 00                	push   0x0
c002d78a:	6a 00                	push   0x0
c002d78c:	6a 02                	push   0x2
c002d78e:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d792:	50                   	push   eax
c002d793:	53                   	push   ebx
c002d794:	e8 03 fb ff ff       	call   c002d29c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d799:	83 c4 20             	add    esp,0x20
c002d79c:	85 c0                	test   eax,eax
c002d79e:	89 c6                	mov    esi,eax
c002d7a0:	75 46                	jne    c002d7e8 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002d7a2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d7a6:	b9 03 00 00 00       	mov    ecx,0x3
c002d7ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d7ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d7b1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d7b6:	0f c8                	bswap  eax
c002d7b8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d7bc:	89 e8                	mov    eax,ebp
c002d7be:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d7c2:	50                   	push   eax
c002d7c3:	55                   	push   ebp
c002d7c4:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002d7c8:	c1 e5 0b             	shl    ebp,0xb
c002d7cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d7cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d7d3:	55                   	push   ebp
c002d7d4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d7d8:	50                   	push   eax
c002d7d9:	53                   	push   ebx
c002d7da:	e8 bd fa ff ff       	call   c002d29c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d7df:	83 c4 20             	add    esp,0x20
c002d7e2:	85 c0                	test   eax,eax
c002d7e4:	89 c6                	mov    esi,eax
c002d7e6:	74 0c                	je     c002d7f4 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002d7e8:	83 ec 0c             	sub    esp,0xc
c002d7eb:	53                   	push   ebx
c002d7ec:	e8 cd fd ff ff       	call   c002d5be <SATAPI::detectMedia()>
c002d7f1:	83 c4 10             	add    esp,0x10
c002d7f4:	83 c4 3c             	add    esp,0x3c
c002d7f7:	89 f0                	mov    eax,esi
c002d7f9:	5b                   	pop    ebx
c002d7fa:	5e                   	pop    esi
c002d7fb:	5f                   	pop    edi
c002d7fc:	5d                   	pop    ebp
c002d7fd:	c3                   	ret    

c002d7fe <IOAPIC::close(int, int, void*)>:
c002d7fe:	b8 00 00 00 00       	mov    eax,0x0
c002d803:	c3                   	ret    

c002d804 <apicGetBase()>:
c002d804:	55                   	push   ebp
c002d805:	89 e5                	mov    ebp,esp
c002d807:	83 ec 18             	sub    esp,0x18
c002d80a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d80f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d815:	83 e0 08             	and    eax,0x8
c002d818:	0f b6 c0             	movzx  eax,al
c002d81b:	85 c0                	test   eax,eax
c002d81d:	75 07                	jne    c002d826 <apicGetBase()+0x22>
c002d81f:	b8 00 00 00 00       	mov    eax,0x0
c002d824:	eb 21                	jmp    c002d847 <apicGetBase()+0x43>
c002d826:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d82b:	83 ec 08             	sub    esp,0x8
c002d82e:	6a 1b                	push   0x1b
c002d830:	50                   	push   eax
c002d831:	e8 b6 81 fe ff       	call   c00159ec <Computer::rdmsr(unsigned int)>
c002d836:	83 c4 10             	add    esp,0x10
c002d839:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d83c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d83f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d842:	25 00 00 ff ff       	and    eax,0xffff0000
c002d847:	c9                   	leave  
c002d848:	c3                   	ret    
c002d849:	90                   	nop

c002d84a <IOAPIC::IOAPIC()>:
c002d84a:	83 ec 0c             	sub    esp,0xc
c002d84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d851:	83 ec 08             	sub    esp,0x8
c002d854:	68 a8 39 03 c0       	push   0xc00339a8
c002d859:	50                   	push   eax
c002d85a:	e8 ab db fe ff       	call   c001b40a <Device::Device(char const*)>
c002d85f:	83 c4 10             	add    esp,0x10
c002d862:	ba b8 39 03 c0       	mov    edx,0xc00339b8
c002d867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d86b:	89 10                	mov    DWORD PTR [eax],edx
c002d86d:	90                   	nop
c002d86e:	83 c4 0c             	add    esp,0xc
c002d871:	c3                   	ret    

c002d872 <apicOpen()>:
c002d872:	55                   	push   ebp
c002d873:	89 e5                	mov    ebp,esp
c002d875:	53                   	push   ebx
c002d876:	83 ec 34             	sub    esp,0x34
c002d879:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d87e:	83 f0 01             	xor    eax,0x1
c002d881:	0f b6 c0             	movzx  eax,al
c002d884:	85 c0                	test   eax,eax
c002d886:	0f 84 a3 00 00 00    	je     c002d92f <apicOpen()+0xbd>
c002d88c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d890:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d895:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d899:	0f b6 c0             	movzx  eax,al
c002d89c:	39 c2                	cmp    edx,eax
c002d89e:	0f 83 84 00 00 00    	jae    c002d928 <apicOpen()+0xb6>
c002d8a4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d8ab:	83 ec 0c             	sub    esp,0xc
c002d8ae:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d8b1:	e8 25 8b fe ff       	call   c00163db <malloc>
c002d8b6:	83 c4 10             	add    esp,0x10
c002d8b9:	89 c3                	mov    ebx,eax
c002d8bb:	83 ec 0c             	sub    esp,0xc
c002d8be:	53                   	push   ebx
c002d8bf:	e8 86 ff ff ff       	call   c002d84a <IOAPIC::IOAPIC()>
c002d8c4:	83 c4 10             	add    esp,0x10
c002d8c7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d8ca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d8ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d8d1:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d8d8:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d8dd:	83 c0 01             	add    eax,0x1
c002d8e0:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d8e5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d8ea:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d8f0:	83 ec 08             	sub    esp,0x8
c002d8f3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d8f6:	50                   	push   eax
c002d8f7:	e8 ac d9 fe ff       	call   c001b2a8 <Device::addChild(Device*)>
c002d8fc:	83 c4 10             	add    esp,0x10
c002d8ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d902:	8b 00                	mov    eax,DWORD PTR [eax]
c002d904:	83 c0 08             	add    eax,0x8
c002d907:	8b 00                	mov    eax,DWORD PTR [eax]
c002d909:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d90d:	6a 00                	push   0x0
c002d90f:	6a 00                	push   0x0
c002d911:	52                   	push   edx
c002d912:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d915:	ff d0                	call   eax
c002d917:	83 c4 10             	add    esp,0x10
c002d91a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d91d:	83 c0 01             	add    eax,0x1
c002d920:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d923:	e9 68 ff ff ff       	jmp    c002d890 <apicOpen()+0x1e>
c002d928:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d92f:	e8 d0 fe ff ff       	call   c002d804 <apicGetBase()>
c002d934:	05 f0 00 00 00       	add    eax,0xf0
c002d939:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d93c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d93f:	8b 00                	mov    eax,DWORD PTR [eax]
c002d941:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d944:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d94b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d952:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d955:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d958:	89 10                	mov    DWORD PTR [eax],edx
c002d95a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d961:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d966:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d969:	7d 7c                	jge    c002d9e7 <apicOpen()+0x175>
c002d96b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d96e:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d975:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d978:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d97b:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d982:	c1 e8 08             	shr    eax,0x8
c002d985:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d989:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d98c:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d993:	c1 e8 18             	shr    eax,0x18
c002d996:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d999:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d99d:	3d ff 00 00 00       	cmp    eax,0xff
c002d9a2:	75 3a                	jne    c002d9de <apicOpen()+0x16c>
c002d9a4:	e8 5b fe ff ff       	call   c002d804 <apicGetBase()>
c002d9a9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d9ad:	83 fa 01             	cmp    edx,0x1
c002d9b0:	75 07                	jne    c002d9b9 <apicOpen()+0x147>
c002d9b2:	ba 60 03 00 00       	mov    edx,0x360
c002d9b7:	eb 05                	jmp    c002d9be <apicOpen()+0x14c>
c002d9b9:	ba 50 03 00 00       	mov    edx,0x350
c002d9be:	01 d0                	add    eax,edx
c002d9c0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d9c3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9c8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d9cb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d9d2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d9d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d9d9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d9dc:	89 10                	mov    DWORD PTR [eax],edx
c002d9de:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d9e2:	e9 7a ff ff ff       	jmp    c002d961 <apicOpen()+0xef>
c002d9e7:	90                   	nop
c002d9e8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d9eb:	c9                   	leave  
c002d9ec:	c3                   	ret    
c002d9ed:	90                   	nop

c002d9ee <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d9ee:	55                   	push   ebp
c002d9ef:	89 e5                	mov    ebp,esp
c002d9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d9fa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d9fd:	72 1d                	jb     c002da1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d9ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da02:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002da08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da0b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002da11:	01 d0                	add    eax,edx
c002da13:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da16:	73 04                	jae    c002da1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da18:	b0 01                	mov    al,0x1
c002da1a:	eb 02                	jmp    c002da1e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002da1c:	b0 00                	mov    al,0x0
c002da1e:	5d                   	pop    ebp
c002da1f:	c3                   	ret    

c002da20 <IOAPIC::read(int)>:
c002da20:	55                   	push   ebp
c002da21:	89 e5                	mov    ebp,esp
c002da23:	83 ec 10             	sub    esp,0x10
c002da26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002da2f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002da32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002da35:	0f b6 d0             	movzx  edx,al
c002da38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002da3b:	89 10                	mov    DWORD PTR [eax],edx
c002da3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002da40:	83 c0 10             	add    eax,0x10
c002da43:	8b 00                	mov    eax,DWORD PTR [eax]
c002da45:	c9                   	leave  
c002da46:	c3                   	ret    
c002da47:	90                   	nop

c002da48 <IOAPIC::open(int, int, void*)>:
c002da48:	55                   	push   ebp
c002da49:	89 e5                	mov    ebp,esp
c002da4b:	57                   	push   edi
c002da4c:	56                   	push   esi
c002da4d:	53                   	push   ebx
c002da4e:	83 ec 04             	sub    esp,0x4
c002da51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002da57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002da5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002da66:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002da6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002da76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002da7f:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002da86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da89:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002da8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da92:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002da98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da9b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002daa1:	0f b6 f0             	movzx  esi,al
c002daa4:	89 d0                	mov    eax,edx
c002daa6:	ba 00 00 00 00       	mov    edx,0x0
c002daab:	89 c7                	mov    edi,eax
c002daad:	83 e7 ff             	and    edi,0xffffffff
c002dab0:	89 f9                	mov    ecx,edi
c002dab2:	0f b6 da             	movzx  ebx,dl
c002dab5:	89 c8                	mov    eax,ecx
c002dab7:	89 da                	mov    edx,ebx
c002dab9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dabc:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dabf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dac3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dac7:	83 e0 00             	and    eax,0x0
c002daca:	09 d0                	or     eax,edx
c002dacc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dad3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dad9:	8d 50 01             	lea    edx,[eax+0x1]
c002dadc:	88 d1                	mov    cl,dl
c002dade:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dae1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002dae7:	0f b6 d0             	movzx  edx,al
c002daea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daed:	83 c2 08             	add    edx,0x8
c002daf0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002daf4:	0f b6 c9             	movzx  ecx,cl
c002daf7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002dafd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002db01:	6a 01                	push   0x1
c002db03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db06:	e8 15 ff ff ff       	call   c002da20 <IOAPIC::read(int)>
c002db0b:	83 c4 08             	add    esp,0x8
c002db0e:	c1 f8 10             	sar    eax,0x10
c002db11:	0f b6 c0             	movzx  eax,al
c002db14:	8d 50 01             	lea    edx,[eax+0x1]
c002db17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db1a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002db20:	b8 00 00 00 00       	mov    eax,0x0
c002db25:	8d 65 f4             	lea    esp,[ebp-0xc]
c002db28:	5b                   	pop    ebx
c002db29:	5e                   	pop    esi
c002db2a:	5f                   	pop    edi
c002db2b:	5d                   	pop    ebp
c002db2c:	c3                   	ret    
c002db2d:	90                   	nop

c002db2e <IOAPIC::write(int, int)>:
c002db2e:	55                   	push   ebp
c002db2f:	89 e5                	mov    ebp,esp
c002db31:	83 ec 10             	sub    esp,0x10
c002db34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002db3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002db40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db43:	0f b6 d0             	movzx  edx,al
c002db46:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db49:	89 10                	mov    DWORD PTR [eax],edx
c002db4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db4e:	8d 50 10             	lea    edx,[eax+0x10]
c002db51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002db54:	89 02                	mov    DWORD PTR [edx],eax
c002db56:	90                   	nop
c002db57:	c9                   	leave  
c002db58:	c3                   	ret    
c002db59:	90                   	nop

c002db5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002db5a:	55                   	push   ebp
c002db5b:	89 e5                	mov    ebp,esp
c002db5d:	53                   	push   ebx
c002db5e:	83 ec 2c             	sub    esp,0x2c
c002db61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db64:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002db67:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002db6a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002db6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002db70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002db73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002db76:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002db79:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002db7c:	88 d8                	mov    al,bl
c002db7e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002db81:	88 c8                	mov    al,cl
c002db83:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002db86:	88 d0                	mov    al,dl
c002db88:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002db8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db8f:	83 c0 08             	add    eax,0x8
c002db92:	d1 e0                	shl    eax,1
c002db94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002db97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db9b:	83 c0 08             	add    eax,0x8
c002db9e:	d1 e0                	shl    eax,1
c002dba0:	83 c0 01             	add    eax,0x1
c002dba3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dba6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dba9:	50                   	push   eax
c002dbaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbad:	e8 6e fe ff ff       	call   c002da20 <IOAPIC::read(int)>
c002dbb2:	83 c4 08             	add    esp,0x8
c002dbb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dbb8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dbbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dbc2:	c1 e0 18             	shl    eax,0x18
c002dbc5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dbc8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dbcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dbce:	52                   	push   edx
c002dbcf:	50                   	push   eax
c002dbd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbd3:	e8 56 ff ff ff       	call   c002db2e <IOAPIC::write(int, int)>
c002dbd8:	83 c4 0c             	add    esp,0xc
c002dbdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbde:	50                   	push   eax
c002dbdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbe2:	e8 39 fe ff ff       	call   c002da20 <IOAPIC::read(int)>
c002dbe7:	83 c4 08             	add    esp,0x8
c002dbea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dbed:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dbf4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dbfb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dc02:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dc06:	85 c0                	test   eax,eax
c002dc08:	74 09                	je     c002dc13 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dc0a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dc11:	eb 07                	jmp    c002dc1a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dc13:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dc1a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dc1e:	85 c0                	test   eax,eax
c002dc20:	74 09                	je     c002dc2b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dc22:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dc29:	eb 07                	jmp    c002dc32 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dc2b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dc32:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dc39:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dc3d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dc40:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dc43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc46:	52                   	push   edx
c002dc47:	50                   	push   eax
c002dc48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc4b:	e8 de fe ff ff       	call   c002db2e <IOAPIC::write(int, int)>
c002dc50:	83 c4 0c             	add    esp,0xc
c002dc53:	90                   	nop
c002dc54:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dc57:	c9                   	leave  
c002dc58:	c3                   	ret    
c002dc59:	66 90                	xchg   ax,ax
c002dc5b:	90                   	nop

c002dc5c <APICTimer::close(int, int, void*)>:
c002dc5c:	b8 00 00 00 00       	mov    eax,0x0
c002dc61:	c3                   	ret    
c002dc62:	66 90                	xchg   ax,ax

c002dc64 <apicTimerHandler(regs*, void*)>:
c002dc64:	83 ec 0c             	sub    esp,0xc
c002dc67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dc6b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dc6d:	b8 10 27 00 00       	mov    eax,0x2710
c002dc72:	ba 00 00 00 00       	mov    edx,0x0
c002dc77:	f7 f1                	div    ecx
c002dc79:	83 ec 0c             	sub    esp,0xc
c002dc7c:	50                   	push   eax
c002dc7d:	e8 9e f0 fe ff       	call   c001cd20 <timerHandler(unsigned int)>
c002dc82:	83 c4 10             	add    esp,0x10
c002dc85:	90                   	nop
c002dc86:	83 c4 0c             	add    esp,0xc
c002dc89:	c3                   	ret    
c002dc8a:	66 90                	xchg   ax,ax

c002dc8c <APICTimer::open(int, int, void*)>:
c002dc8c:	83 ec 0c             	sub    esp,0xc
c002dc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc93:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc95:	83 c0 24             	add    eax,0x24
c002dc98:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc9a:	83 ec 08             	sub    esp,0x8
c002dc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dca5:	ff d0                	call   eax
c002dca7:	83 c4 10             	add    esp,0x10
c002dcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dcb2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dcc0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dcc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dcca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dcd0:	83 ec 0c             	sub    esp,0xc
c002dcd3:	51                   	push   ecx
c002dcd4:	6a 01                	push   0x1
c002dcd6:	68 64 dc 02 c0       	push   0xc002dc64
c002dcdb:	52                   	push   edx
c002dcdc:	50                   	push   eax
c002dcdd:	e8 72 d5 fe ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dce2:	83 c4 20             	add    esp,0x20
c002dce5:	89 c2                	mov    edx,eax
c002dce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dceb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dcf1:	b8 00 00 00 00       	mov    eax,0x0
c002dcf6:	83 c4 0c             	add    esp,0xc
c002dcf9:	c3                   	ret    
c002dcfa:	66 90                	xchg   ax,ax

c002dcfc <APICTimer::write(int)>:
c002dcfc:	83 ec 0c             	sub    esp,0xc
c002dcff:	83 ec 0c             	sub    esp,0xc
c002dd02:	68 dc 39 03 c0       	push   0xc00339dc
c002dd07:	e8 8e 24 ff ff       	call   c002019a <KePanic(char const*)>
c002dd0c:	83 c4 10             	add    esp,0x10
c002dd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dd17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd1d:	90                   	nop
c002dd1e:	83 c4 0c             	add    esp,0xc
c002dd21:	c3                   	ret    
c002dd22:	66 90                	xchg   ax,ax

c002dd24 <APICTimer::APICTimer()>:
c002dd24:	83 ec 0c             	sub    esp,0xc
c002dd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd2b:	83 ec 08             	sub    esp,0x8
c002dd2e:	68 ec 39 03 c0       	push   0xc00339ec
c002dd33:	50                   	push   eax
c002dd34:	e8 1b ef fe ff       	call   c001cc54 <Timer::Timer(char const*)>
c002dd39:	83 c4 10             	add    esp,0x10
c002dd3c:	ba 00 3a 03 c0       	mov    edx,0xc0033a00
c002dd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd45:	89 10                	mov    DWORD PTR [eax],edx
c002dd47:	90                   	nop
c002dd48:	83 c4 0c             	add    esp,0xc
c002dd4b:	c3                   	ret    

c002dd4c <PIT::write(int)>:
c002dd4c:	83 ec 10             	sub    esp,0x10
c002dd4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dd57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002dd61:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002dd66:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dd6b:	89 c2                	mov    edx,eax
c002dd6d:	c1 fa 1f             	sar    edx,0x1f
c002dd70:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dd74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dd78:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dd7f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002dd84:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002dd88:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002dd8d:	ee                   	out    dx,al
c002dd8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dd92:	0f b6 c0             	movzx  eax,al
c002dd95:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002dd9c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dda0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002dda4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002dda9:	ee                   	out    dx,al
c002ddaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ddae:	c1 f8 08             	sar    eax,0x8
c002ddb1:	0f b6 c0             	movzx  eax,al
c002ddb4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002ddbb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002ddbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002ddc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002ddc8:	ee                   	out    dx,al
c002ddc9:	90                   	nop
c002ddca:	83 c4 10             	add    esp,0x10
c002ddcd:	c3                   	ret    
c002ddce:	66 90                	xchg   ax,ax

c002ddd0 <pitHandler(regs*, void*)>:
c002ddd0:	83 ec 0c             	sub    esp,0xc
c002ddd3:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002ddd9:	b8 10 27 00 00       	mov    eax,0x2710
c002ddde:	89 c2                	mov    edx,eax
c002dde0:	c1 fa 1f             	sar    edx,0x1f
c002dde3:	f7 f9                	idiv   ecx
c002dde5:	83 ec 0c             	sub    esp,0xc
c002dde8:	50                   	push   eax
c002dde9:	e8 32 ef fe ff       	call   c001cd20 <timerHandler(unsigned int)>
c002ddee:	83 c4 10             	add    esp,0x10
c002ddf1:	90                   	nop
c002ddf2:	83 c4 0c             	add    esp,0xc
c002ddf5:	c3                   	ret    
c002ddf6:	66 90                	xchg   ax,ax

c002ddf8 <PIT::open(int, int, void*)>:
c002ddf8:	83 ec 0c             	sub    esp,0xc
c002ddfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddff:	8b 00                	mov    eax,DWORD PTR [eax]
c002de01:	83 c0 24             	add    eax,0x24
c002de04:	8b 00                	mov    eax,DWORD PTR [eax]
c002de06:	83 ec 08             	sub    esp,0x8
c002de09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de11:	ff d0                	call   eax
c002de13:	83 c4 10             	add    esp,0x10
c002de16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de1a:	83 ec 0c             	sub    esp,0xc
c002de1d:	6a 00                	push   0x0
c002de1f:	6a 01                	push   0x1
c002de21:	68 d0 dd 02 c0       	push   0xc002ddd0
c002de26:	6a 00                	push   0x0
c002de28:	50                   	push   eax
c002de29:	e8 26 d4 fe ff       	call   c001b254 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002de2e:	83 c4 20             	add    esp,0x20
c002de31:	89 c2                	mov    edx,eax
c002de33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de37:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002de3d:	b8 00 00 00 00       	mov    eax,0x0
c002de42:	83 c4 0c             	add    esp,0xc
c002de45:	c3                   	ret    
c002de46:	66 90                	xchg   ax,ax

c002de48 <PIT::close(int, int, void*)>:
c002de48:	83 ec 0c             	sub    esp,0xc
c002de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de4f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002de59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de5d:	6a 01                	push   0x1
c002de5f:	68 d0 dd 02 c0       	push   0xc002ddd0
c002de64:	6a 00                	push   0x0
c002de66:	50                   	push   eax
c002de67:	e8 1e d4 fe ff       	call   c001b28a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002de6c:	83 c4 10             	add    esp,0x10
c002de6f:	b8 00 00 00 00       	mov    eax,0x0
c002de74:	83 c4 0c             	add    esp,0xc
c002de77:	c3                   	ret    

c002de78 <PIT::PIT()>:
c002de78:	83 ec 0c             	sub    esp,0xc
c002de7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de7f:	83 ec 08             	sub    esp,0x8
c002de82:	68 28 3a 03 c0       	push   0xc0033a28
c002de87:	50                   	push   eax
c002de88:	e8 c7 ed fe ff       	call   c001cc54 <Timer::Timer(char const*)>
c002de8d:	83 c4 10             	add    esp,0x10
c002de90:	ba 50 3a 03 c0       	mov    edx,0xc0033a50
c002de95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de99:	89 10                	mov    DWORD PTR [eax],edx
c002de9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dea5:	0f b6 d0             	movzx  edx,al
c002dea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deac:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002deb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002debd:	0f b6 d0             	movzx  edx,al
c002dec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dec4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002dec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002decd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002ded3:	8d 50 01             	lea    edx,[eax+0x1]
c002ded6:	88 d1                	mov    cl,dl
c002ded8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dedc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002dee2:	0f b6 d0             	movzx  edx,al
c002dee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dee9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002deed:	83 e1 3f             	and    ecx,0x3f
c002def0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002def4:	90                   	nop
c002def5:	83 c4 0c             	add    esp,0xc
c002def8:	c3                   	ret    
c002def9:	66 90                	xchg   ax,ax
c002defb:	66 90                	xchg   ax,ax
c002defd:	66 90                	xchg   ax,ax
c002deff:	90                   	nop

c002df00 <avxDetect>:
c002df00:	b8 01 00 00 00       	mov    eax,0x1
c002df05:	0f a2                	cpuid  
c002df07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002df0d:	74 15                	je     c002df24 <avxDetect.noAVX>
c002df0f:	b8 01 00 00 00       	mov    eax,0x1
c002df14:	0f a2                	cpuid  
c002df16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002df1c:	74 06                	je     c002df24 <avxDetect.noAVX>
c002df1e:	b8 01 00 00 00       	mov    eax,0x1
c002df23:	c3                   	ret    

c002df24 <avxDetect.noAVX>:
c002df24:	b8 00 00 00 00       	mov    eax,0x0
c002df29:	c3                   	ret    

c002df2a <avxSave>:
c002df2a:	53                   	push   ebx
c002df2b:	52                   	push   edx
c002df2c:	31 c0                	xor    eax,eax
c002df2e:	48                   	dec    eax
c002df2f:	89 c2                	mov    edx,eax
c002df31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df35:	0f ae 23             	xsave  [ebx]
c002df38:	5a                   	pop    edx
c002df39:	5b                   	pop    ebx
c002df3a:	c3                   	ret    

c002df3b <avxLoad>:
c002df3b:	53                   	push   ebx
c002df3c:	52                   	push   edx
c002df3d:	31 c0                	xor    eax,eax
c002df3f:	48                   	dec    eax
c002df40:	89 c2                	mov    edx,eax
c002df42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df46:	0f ae 2b             	xrstor [ebx]
c002df49:	5a                   	pop    edx
c002df4a:	5b                   	pop    ebx
c002df4b:	c3                   	ret    

c002df4c <avxInit>:
c002df4c:	e8 47 03 00 00       	call   c002e298 <sseInit>
c002df51:	50                   	push   eax
c002df52:	51                   	push   ecx
c002df53:	0f 20 e0             	mov    eax,cr4
c002df56:	0d 00 00 04 00       	or     eax,0x40000
c002df5b:	0f 22 e0             	mov    cr4,eax
c002df5e:	31 c9                	xor    ecx,ecx
c002df60:	0f 01 d0             	xgetbv 
c002df63:	0d 07 00 00 00       	or     eax,0x7
c002df68:	0f 01 d1             	xsetbv 
c002df6b:	59                   	pop    ecx
c002df6c:	58                   	pop    eax
c002df6d:	c3                   	ret    

c002df6e <avxClose>:
c002df6e:	c3                   	ret    
c002df6f:	90                   	nop

c002df70 <isr0>:
c002df70:	fa                   	cli    
c002df71:	68 00 00 00 00       	push   0x0
c002df76:	68 00 00 00 00       	push   0x0
c002df7b:	e9 56 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002df80 <isr1>:
c002df80:	fa                   	cli    
c002df81:	6a 00                	push   0x0
c002df83:	6a 01                	push   0x1
c002df85:	e9 4c 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002df8a <isr2>:
c002df8a:	fa                   	cli    
c002df8b:	6a 00                	push   0x0
c002df8d:	6a 02                	push   0x2
c002df8f:	e9 42 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002df94 <isr3>:
c002df94:	fa                   	cli    
c002df95:	6a 00                	push   0x0
c002df97:	6a 03                	push   0x3
c002df99:	e9 38 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002df9e <isr4>:
c002df9e:	fa                   	cli    
c002df9f:	6a 00                	push   0x0
c002dfa1:	6a 04                	push   0x4
c002dfa3:	e9 2e 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfa8 <isr5>:
c002dfa8:	fa                   	cli    
c002dfa9:	6a 00                	push   0x0
c002dfab:	6a 05                	push   0x5
c002dfad:	e9 24 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfb2 <isr6>:
c002dfb2:	fa                   	cli    
c002dfb3:	6a 00                	push   0x0
c002dfb5:	6a 06                	push   0x6
c002dfb7:	e9 1a 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfbc <isr7>:
c002dfbc:	fa                   	cli    
c002dfbd:	6a 00                	push   0x0
c002dfbf:	6a 07                	push   0x7
c002dfc1:	e9 10 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfc6 <isr8>:
c002dfc6:	fa                   	cli    
c002dfc7:	6a 08                	push   0x8
c002dfc9:	e9 08 01 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfce <isr9>:
c002dfce:	fa                   	cli    
c002dfcf:	6a 00                	push   0x0
c002dfd1:	6a 09                	push   0x9
c002dfd3:	e9 fe 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfd8 <isr10>:
c002dfd8:	fa                   	cli    
c002dfd9:	6a 0a                	push   0xa
c002dfdb:	e9 f6 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfe0 <isr11>:
c002dfe0:	fa                   	cli    
c002dfe1:	6a 0b                	push   0xb
c002dfe3:	e9 ee 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002dfe8 <isr12>:
c002dfe8:	fa                   	cli    
c002dfe9:	6a 0c                	push   0xc
c002dfeb:	e9 e6 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002dff0 <isr13>:
c002dff0:	fa                   	cli    
c002dff1:	6a 0d                	push   0xd
c002dff3:	53                   	push   ebx
c002dff4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dff8:	81 fb c6 e1 02 c0    	cmp    ebx,0xc002e1c6
c002dffe:	5b                   	pop    ebx
c002dfff:	0f 84 c3 01 00 00    	je     c002e1c8 <finishSignal2>
c002e005:	e9 cc 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e00a <isr14>:
c002e00a:	fa                   	cli    
c002e00b:	6a 0e                	push   0xe
c002e00d:	e9 c4 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e012 <isr15>:
c002e012:	fa                   	cli    
c002e013:	6a 00                	push   0x0
c002e015:	6a 0f                	push   0xf
c002e017:	e9 ba 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e01c <isr16>:
c002e01c:	fa                   	cli    
c002e01d:	6a 00                	push   0x0
c002e01f:	6a 10                	push   0x10
c002e021:	e9 b0 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e026 <isr17>:
c002e026:	fa                   	cli    
c002e027:	6a 00                	push   0x0
c002e029:	6a 11                	push   0x11
c002e02b:	e9 a6 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e030 <isr18>:
c002e030:	fa                   	cli    
c002e031:	6a 00                	push   0x0
c002e033:	6a 12                	push   0x12
c002e035:	e9 9c 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e03a <irq3>:
c002e03a:	fa                   	cli    
c002e03b:	6a 00                	push   0x0
c002e03d:	6a 23                	push   0x23
c002e03f:	e9 92 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e044 <irq4>:
c002e044:	fa                   	cli    
c002e045:	6a 00                	push   0x0
c002e047:	6a 24                	push   0x24
c002e049:	e9 88 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e04e <irq5>:
c002e04e:	fa                   	cli    
c002e04f:	6a 00                	push   0x0
c002e051:	6a 25                	push   0x25
c002e053:	e9 7e 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e058 <irq6>:
c002e058:	fa                   	cli    
c002e059:	6a 00                	push   0x0
c002e05b:	6a 26                	push   0x26
c002e05d:	e9 74 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e062 <irq7>:
c002e062:	fa                   	cli    
c002e063:	6a 00                	push   0x0
c002e065:	6a 27                	push   0x27
c002e067:	e9 6a 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e06c <irq8>:
c002e06c:	fa                   	cli    
c002e06d:	6a 00                	push   0x0
c002e06f:	6a 28                	push   0x28
c002e071:	e9 60 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e076 <irq9>:
c002e076:	fa                   	cli    
c002e077:	6a 00                	push   0x0
c002e079:	6a 29                	push   0x29
c002e07b:	e9 56 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e080 <irq10>:
c002e080:	fa                   	cli    
c002e081:	6a 00                	push   0x0
c002e083:	6a 2a                	push   0x2a
c002e085:	e9 4c 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e08a <irq11>:
c002e08a:	fa                   	cli    
c002e08b:	6a 00                	push   0x0
c002e08d:	6a 2b                	push   0x2b
c002e08f:	e9 42 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e094 <irq12>:
c002e094:	fa                   	cli    
c002e095:	6a 00                	push   0x0
c002e097:	6a 2c                	push   0x2c
c002e099:	e9 38 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e09e <irq13>:
c002e09e:	fa                   	cli    
c002e09f:	6a 00                	push   0x0
c002e0a1:	6a 2d                	push   0x2d
c002e0a3:	e9 2e 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e0a8 <irq14>:
c002e0a8:	fa                   	cli    
c002e0a9:	6a 00                	push   0x0
c002e0ab:	6a 2e                	push   0x2e
c002e0ad:	e9 24 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e0b2 <irq15>:
c002e0b2:	fa                   	cli    
c002e0b3:	6a 00                	push   0x0
c002e0b5:	6a 2f                	push   0x2f
c002e0b7:	e9 1a 00 00 00       	jmp    c002e0d6 <int_common_stub>

c002e0bc <irq1>:
c002e0bc:	fa                   	cli    
c002e0bd:	6a 00                	push   0x0
c002e0bf:	6a 21                	push   0x21
c002e0c1:	eb 13                	jmp    c002e0d6 <int_common_stub>

c002e0c3 <irq2>:
c002e0c3:	fa                   	cli    
c002e0c4:	6a 00                	push   0x0
c002e0c6:	6a 22                	push   0x22
c002e0c8:	eb 0c                	jmp    c002e0d6 <int_common_stub>

c002e0ca <isr96>:
c002e0ca:	6a 00                	push   0x0
c002e0cc:	6a 60                	push   0x60
c002e0ce:	fb                   	sti    
c002e0cf:	eb 37                	jmp    c002e108 <syscall_common_stub>

c002e0d1 <irq0>:
c002e0d1:	fa                   	cli    
c002e0d2:	6a 00                	push   0x0
c002e0d4:	6a 20                	push   0x20

c002e0d6 <int_common_stub>:
c002e0d6:	60                   	pusha  
c002e0d7:	1e                   	push   ds
c002e0d8:	06                   	push   es
c002e0d9:	0f a0                	push   fs
c002e0db:	0f a8                	push   gs
c002e0dd:	66 b8 10 00          	mov    ax,0x10
c002e0e1:	66 8e d8             	mov    ds,ax
c002e0e4:	66 8e c0             	mov    es,ax
c002e0e7:	66 8e e0             	mov    fs,ax
c002e0ea:	66 8e e8             	mov    gs,ax
c002e0ed:	54                   	push   esp
c002e0ee:	fc                   	cld    
c002e0ef:	e8 74 d6 fe ff       	call   c001b768 <int_handler>
c002e0f4:	81 c4 04 00 00 00    	add    esp,0x4
c002e0fa:	0f a9                	pop    gs
c002e0fc:	0f a1                	pop    fs
c002e0fe:	07                   	pop    es
c002e0ff:	1f                   	pop    ds
c002e100:	61                   	popa   
c002e101:	81 c4 08 00 00 00    	add    esp,0x8
c002e107:	cf                   	iret   

c002e108 <syscall_common_stub>:
c002e108:	60                   	pusha  
c002e109:	1e                   	push   ds
c002e10a:	06                   	push   es
c002e10b:	0f a0                	push   fs
c002e10d:	0f a8                	push   gs
c002e10f:	66 b8 10 00          	mov    ax,0x10
c002e113:	66 8e d8             	mov    ds,ax
c002e116:	66 8e c0             	mov    es,ax
c002e119:	66 8e e0             	mov    fs,ax
c002e11c:	66 8e e8             	mov    gs,ax
c002e11f:	54                   	push   esp
c002e120:	fc                   	cld    
c002e121:	e8 42 d6 fe ff       	call   c001b768 <int_handler>
c002e126:	81 c4 04 00 00 00    	add    esp,0x4
c002e12c:	0f a9                	pop    gs
c002e12e:	0f a1                	pop    fs
c002e130:	07                   	pop    es
c002e131:	1f                   	pop    ds
c002e132:	e8 89 2a ff ff       	call   c0020bc0 <KiCheckSignalZ>
c002e137:	3d 00 00 00 00       	cmp    eax,0x0
c002e13c:	0f 84 c0 00 00 00    	je     c002e202 <skipSignals>
c002e142:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e147:	61                   	popa   
c002e148:	53                   	push   ebx
c002e149:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e14f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e152:	5b                   	pop    ebx
c002e153:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e158:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e15b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e15e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e161:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e164:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e167:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e16a:	81 c4 08 00 00 00    	add    esp,0x8
c002e170:	5e                   	pop    esi
c002e171:	5b                   	pop    ebx
c002e172:	59                   	pop    ecx
c002e173:	5a                   	pop    edx
c002e174:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e177:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e17a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e17d:	52                   	push   edx
c002e17e:	51                   	push   ecx
c002e17f:	53                   	push   ebx
c002e180:	56                   	push   esi
c002e181:	81 ec 08 00 00 00    	sub    esp,0x8
c002e187:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e18a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e18d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e190:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e193:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e196:	60                   	pusha  
c002e197:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e19d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e1a0:	89 e3                	mov    ebx,esp
c002e1a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e1a5:	52                   	push   edx
c002e1a6:	68 c6 e1 02 c0       	push   0xc002e1c6
c002e1ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e1ae:	89 dc                	mov    esp,ebx
c002e1b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e1b3:	68 23 00 00 00       	push   0x23
c002e1b8:	51                   	push   ecx
c002e1b9:	68 02 02 00 00       	push   0x202
c002e1be:	68 1b 00 00 00       	push   0x1b
c002e1c3:	ff 36                	push   DWORD PTR [esi]
c002e1c5:	cf                   	iret   

c002e1c6 <finishSignal>:
c002e1c6:	cd 0f                	int    0xf

c002e1c8 <finishSignal2>:
c002e1c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e1ce:	e8 6a 2a ff ff       	call   c0020c3d <KiFinishSignalZ>
c002e1d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e1d9:	68 23 00 00 00       	push   0x23
c002e1de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e1e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e1e4:	68 1b 00 00 00       	push   0x1b
c002e1e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e1ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e1ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e1f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e1f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e1f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e1fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e1fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e201:	cf                   	iret   

c002e202 <skipSignals>:
c002e202:	61                   	popa   
c002e203:	81 c4 08 00 00 00    	add    esp,0x8
c002e209:	cf                   	iret   
c002e20a:	90                   	nop
c002e20b:	90                   	nop

c002e20c <irq16>:
c002e20c:	fa                   	cli    
c002e20d:	6a 00                	push   0x0
c002e20f:	6a 30                	push   0x30
c002e211:	e9 c0 fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e216 <irq17>:
c002e216:	fa                   	cli    
c002e217:	6a 00                	push   0x0
c002e219:	6a 31                	push   0x31
c002e21b:	e9 b6 fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e220 <irq18>:
c002e220:	fa                   	cli    
c002e221:	6a 00                	push   0x0
c002e223:	6a 32                	push   0x32
c002e225:	e9 ac fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e22a <irq19>:
c002e22a:	fa                   	cli    
c002e22b:	6a 00                	push   0x0
c002e22d:	6a 33                	push   0x33
c002e22f:	e9 a2 fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e234 <irq20>:
c002e234:	fa                   	cli    
c002e235:	6a 00                	push   0x0
c002e237:	6a 34                	push   0x34
c002e239:	e9 98 fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e23e <irq21>:
c002e23e:	fa                   	cli    
c002e23f:	6a 00                	push   0x0
c002e241:	6a 35                	push   0x35
c002e243:	e9 8e fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e248 <irq22>:
c002e248:	fa                   	cli    
c002e249:	6a 00                	push   0x0
c002e24b:	6a 36                	push   0x36
c002e24d:	e9 84 fe ff ff       	jmp    c002e0d6 <int_common_stub>

c002e252 <irq23>:
c002e252:	fa                   	cli    
c002e253:	6a 00                	push   0x0
c002e255:	6a 37                	push   0x37
c002e257:	e9 7a fe ff ff       	jmp    c002e0d6 <int_common_stub>
c002e25c:	66 90                	xchg   ax,ax
c002e25e:	66 90                	xchg   ax,ax

c002e260 <i386GetRDRAND>:
c002e260:	b9 64 00 00 00       	mov    ecx,0x64

c002e265 <retry>:
c002e265:	0f c7 f0             	rdrand eax
c002e268:	72 05                	jb     c002e26f <retry.done>
c002e26a:	e2 f9                	loop   c002e265 <retry>

c002e26c <retry.fail>:
c002e26c:	31 c0                	xor    eax,eax
c002e26e:	c3                   	ret    

c002e26f <retry.done>:
c002e26f:	c3                   	ret    

c002e270 <sseDetect>:
c002e270:	b8 01 00 00 00       	mov    eax,0x1
c002e275:	0f a2                	cpuid  
c002e277:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e27d:	74 06                	je     c002e285 <sseDetect.noSSE>
c002e27f:	b8 01 00 00 00       	mov    eax,0x1
c002e284:	c3                   	ret    

c002e285 <sseDetect.noSSE>:
c002e285:	31 c0                	xor    eax,eax
c002e287:	c3                   	ret    

c002e288 <sseSave>:
c002e288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e28c:	0f ae 00             	fxsave [eax]
c002e28f:	c3                   	ret    

c002e290 <sseLoad>:
c002e290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e294:	0f ae 08             	fxrstor [eax]
c002e297:	c3                   	ret    

c002e298 <sseInit>:
c002e298:	e8 42 00 00 00       	call   c002e2df <x87Init>
c002e29d:	0f 20 e0             	mov    eax,cr4
c002e2a0:	66 0d 00 06          	or     ax,0x600
c002e2a4:	0f 22 e0             	mov    cr4,eax
c002e2a7:	c3                   	ret    

c002e2a8 <sseClose>:
c002e2a8:	c3                   	ret    
c002e2a9:	66 90                	xchg   ax,ax
c002e2ab:	66 90                	xchg   ax,ax
c002e2ad:	66 90                	xchg   ax,ax
c002e2af:	90                   	nop

c002e2b0 <value_37F>:
c002e2b0:	7f 03                	jg     c002e2b5 <value_37A+0x1>

c002e2b2 <value_37E>:
c002e2b2:	7e 03                	jle    c002e2b7 <x87Detect+0x1>

c002e2b4 <value_37A>:
c002e2b4:	7a 03                	jp     c002e2b9 <x87Detect+0x3>

c002e2b6 <x87Detect>:
c002e2b6:	b8 01 00 00 00       	mov    eax,0x1
c002e2bb:	0f a2                	cpuid  
c002e2bd:	f7 c2 01 00 00 00    	test   edx,0x1
c002e2c3:	74 06                	je     c002e2cb <x87Detect.nox87>
c002e2c5:	b8 01 00 00 00       	mov    eax,0x1
c002e2ca:	c3                   	ret    

c002e2cb <x87Detect.nox87>:
c002e2cb:	b8 00 00 00 00       	mov    eax,0x0
c002e2d0:	c3                   	ret    

c002e2d1 <x87Save>:
c002e2d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2d5:	dd 30                	fnsave [eax]
c002e2d7:	c3                   	ret    

c002e2d8 <x87Load>:
c002e2d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2dc:	dd 20                	frstor [eax]
c002e2de:	c3                   	ret    

c002e2df <x87Init>:
c002e2df:	0f 20 c0             	mov    eax,cr0
c002e2e2:	66 25 fb ff          	and    ax,0xfffb
c002e2e6:	66 0d 22 00          	or     ax,0x22
c002e2ea:	0f 22 c0             	mov    cr0,eax
c002e2ed:	db e3                	fninit 
c002e2ef:	0f 06                	clts   
c002e2f1:	d9 2d b4 e2 02 c0    	fldcw  WORD PTR ds:0xc002e2b4
c002e2f7:	c3                   	ret    

c002e2f8 <x87Close>:
c002e2f8:	c3                   	ret    
c002e2f9:	66 90                	xchg   ax,ax
c002e2fb:	90                   	nop

c002e2fc <__do_global_ctors_aux>:
c002e2fc:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c002e301:	83 f8 ff             	cmp    eax,0xffffffff
c002e304:	74 1a                	je     c002e320 <__do_global_ctors_aux+0x24>
c002e306:	55                   	push   ebp
c002e307:	89 e5                	mov    ebp,esp
c002e309:	53                   	push   ebx
c002e30a:	52                   	push   edx
c002e30b:	bb b0 f2 02 c0       	mov    ebx,0xc002f2b0
c002e310:	ff d0                	call   eax
c002e312:	83 eb 04             	sub    ebx,0x4
c002e315:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e317:	83 f8 ff             	cmp    eax,0xffffffff
c002e31a:	75 f4                	jne    c002e310 <__do_global_ctors_aux+0x14>
c002e31c:	58                   	pop    eax
c002e31d:	5b                   	pop    ebx
c002e31e:	5d                   	pop    ebp
c002e31f:	c3                   	ret    
c002e320:	c3                   	ret    
c002e321:	66 90                	xchg   ax,ax
c002e323:	90                   	nop

c002e324 <__divdi3>:
c002e324:	55                   	push   ebp
c002e325:	57                   	push   edi
c002e326:	56                   	push   esi
c002e327:	53                   	push   ebx
c002e328:	83 ec 1c             	sub    esp,0x1c
c002e32b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e32f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e333:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e336:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e33a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e33e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e342:	85 db                	test   ebx,ebx
c002e344:	0f 88 8e 00 00 00    	js     c002e3d8 <__divdi3+0xb4>
c002e34a:	89 dd                	mov    ebp,ebx
c002e34c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e354:	89 d3                	mov    ebx,edx
c002e356:	85 d2                	test   edx,edx
c002e358:	79 0d                	jns    c002e367 <__divdi3+0x43>
c002e35a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e35e:	f7 d8                	neg    eax
c002e360:	83 d2 00             	adc    edx,0x0
c002e363:	f7 da                	neg    edx
c002e365:	89 d3                	mov    ebx,edx
c002e367:	89 c7                	mov    edi,eax
c002e369:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e36c:	85 db                	test   ebx,ebx
c002e36e:	75 48                	jne    c002e3b8 <__divdi3+0x94>
c002e370:	39 ef                	cmp    edi,ebp
c002e372:	76 24                	jbe    c002e398 <__divdi3+0x74>
c002e374:	89 ea                	mov    edx,ebp
c002e376:	f7 f7                	div    edi
c002e378:	89 c1                	mov    ecx,eax
c002e37a:	31 f6                	xor    esi,esi
c002e37c:	89 c8                	mov    eax,ecx
c002e37e:	89 f2                	mov    edx,esi
c002e380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e384:	85 c9                	test   ecx,ecx
c002e386:	74 07                	je     c002e38f <__divdi3+0x6b>
c002e388:	f7 d8                	neg    eax
c002e38a:	83 d2 00             	adc    edx,0x0
c002e38d:	f7 da                	neg    edx
c002e38f:	83 c4 1c             	add    esp,0x1c
c002e392:	5b                   	pop    ebx
c002e393:	5e                   	pop    esi
c002e394:	5f                   	pop    edi
c002e395:	5d                   	pop    ebp
c002e396:	c3                   	ret    
c002e397:	90                   	nop
c002e398:	85 ff                	test   edi,edi
c002e39a:	75 0b                	jne    c002e3a7 <__divdi3+0x83>
c002e39c:	b8 01 00 00 00       	mov    eax,0x1
c002e3a1:	31 d2                	xor    edx,edx
c002e3a3:	f7 f3                	div    ebx
c002e3a5:	89 c7                	mov    edi,eax
c002e3a7:	31 d2                	xor    edx,edx
c002e3a9:	89 e8                	mov    eax,ebp
c002e3ab:	f7 f7                	div    edi
c002e3ad:	89 c6                	mov    esi,eax
c002e3af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e3b2:	f7 f7                	div    edi
c002e3b4:	89 c1                	mov    ecx,eax
c002e3b6:	eb c4                	jmp    c002e37c <__divdi3+0x58>
c002e3b8:	39 eb                	cmp    ebx,ebp
c002e3ba:	77 3c                	ja     c002e3f8 <__divdi3+0xd4>
c002e3bc:	0f bd f3             	bsr    esi,ebx
c002e3bf:	83 f6 1f             	xor    esi,0x1f
c002e3c2:	75 40                	jne    c002e404 <__divdi3+0xe0>
c002e3c4:	39 eb                	cmp    ebx,ebp
c002e3c6:	72 09                	jb     c002e3d1 <__divdi3+0xad>
c002e3c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e3cb:	0f 87 97 00 00 00    	ja     c002e468 <__divdi3+0x144>
c002e3d1:	b9 01 00 00 00       	mov    ecx,0x1
c002e3d6:	eb a4                	jmp    c002e37c <__divdi3+0x58>
c002e3d8:	f7 d9                	neg    ecx
c002e3da:	83 d3 00             	adc    ebx,0x0
c002e3dd:	f7 db                	neg    ebx
c002e3df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e3e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e3e6:	89 dd                	mov    ebp,ebx
c002e3e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e3f0:	e9 5f ff ff ff       	jmp    c002e354 <__divdi3+0x30>
c002e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c002e3f8:	31 f6                	xor    esi,esi
c002e3fa:	31 c9                	xor    ecx,ecx
c002e3fc:	e9 7b ff ff ff       	jmp    c002e37c <__divdi3+0x58>
c002e401:	8d 76 00             	lea    esi,[esi+0x0]
c002e404:	b8 20 00 00 00       	mov    eax,0x20
c002e409:	29 f0                	sub    eax,esi
c002e40b:	89 f1                	mov    ecx,esi
c002e40d:	d3 e3                	shl    ebx,cl
c002e40f:	89 fa                	mov    edx,edi
c002e411:	88 c1                	mov    cl,al
c002e413:	d3 ea                	shr    edx,cl
c002e415:	09 da                	or     edx,ebx
c002e417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e41b:	89 f1                	mov    ecx,esi
c002e41d:	d3 e7                	shl    edi,cl
c002e41f:	89 eb                	mov    ebx,ebp
c002e421:	88 c1                	mov    cl,al
c002e423:	d3 eb                	shr    ebx,cl
c002e425:	89 f1                	mov    ecx,esi
c002e427:	d3 e5                	shl    ebp,cl
c002e429:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e42c:	88 c1                	mov    cl,al
c002e42e:	d3 ea                	shr    edx,cl
c002e430:	09 d5                	or     ebp,edx
c002e432:	89 e8                	mov    eax,ebp
c002e434:	89 da                	mov    edx,ebx
c002e436:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e43a:	89 d3                	mov    ebx,edx
c002e43c:	89 c5                	mov    ebp,eax
c002e43e:	f7 e7                	mul    edi
c002e440:	39 d3                	cmp    ebx,edx
c002e442:	72 18                	jb     c002e45c <__divdi3+0x138>
c002e444:	74 0a                	je     c002e450 <__divdi3+0x12c>
c002e446:	89 e9                	mov    ecx,ebp
c002e448:	31 f6                	xor    esi,esi
c002e44a:	e9 2d ff ff ff       	jmp    c002e37c <__divdi3+0x58>
c002e44f:	90                   	nop
c002e450:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e453:	89 f1                	mov    ecx,esi
c002e455:	d3 e7                	shl    edi,cl
c002e457:	39 c7                	cmp    edi,eax
c002e459:	73 eb                	jae    c002e446 <__divdi3+0x122>
c002e45b:	90                   	nop
c002e45c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e45f:	31 f6                	xor    esi,esi
c002e461:	e9 16 ff ff ff       	jmp    c002e37c <__divdi3+0x58>
c002e466:	66 90                	xchg   ax,ax
c002e468:	31 c9                	xor    ecx,ecx
c002e46a:	e9 0d ff ff ff       	jmp    c002e37c <__divdi3+0x58>
c002e46f:	90                   	nop

c002e470 <__moddi3>:
c002e470:	55                   	push   ebp
c002e471:	57                   	push   edi
c002e472:	56                   	push   esi
c002e473:	53                   	push   ebx
c002e474:	83 ec 2c             	sub    esp,0x2c
c002e477:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e47b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e47f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e483:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e487:	85 db                	test   ebx,ebx
c002e489:	0f 88 85 00 00 00    	js     c002e514 <__moddi3+0xa4>
c002e48f:	89 de                	mov    esi,ebx
c002e491:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e499:	89 d7                	mov    edi,edx
c002e49b:	85 d2                	test   edx,edx
c002e49d:	79 09                	jns    c002e4a8 <__moddi3+0x38>
c002e49f:	f7 d8                	neg    eax
c002e4a1:	83 d2 00             	adc    edx,0x0
c002e4a4:	f7 da                	neg    edx
c002e4a6:	89 d7                	mov    edi,edx
c002e4a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e4ac:	89 cd                	mov    ebp,ecx
c002e4ae:	85 ff                	test   edi,edi
c002e4b0:	75 52                	jne    c002e504 <__moddi3+0x94>
c002e4b2:	89 c3                	mov    ebx,eax
c002e4b4:	39 f0                	cmp    eax,esi
c002e4b6:	76 24                	jbe    c002e4dc <__moddi3+0x6c>
c002e4b8:	89 c8                	mov    eax,ecx
c002e4ba:	89 f2                	mov    edx,esi
c002e4bc:	f7 f3                	div    ebx
c002e4be:	89 d6                	mov    esi,edx
c002e4c0:	89 f0                	mov    eax,esi
c002e4c2:	31 d2                	xor    edx,edx
c002e4c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e4c8:	85 c9                	test   ecx,ecx
c002e4ca:	74 07                	je     c002e4d3 <__moddi3+0x63>
c002e4cc:	f7 d8                	neg    eax
c002e4ce:	83 d2 00             	adc    edx,0x0
c002e4d1:	f7 da                	neg    edx
c002e4d3:	83 c4 2c             	add    esp,0x2c
c002e4d6:	5b                   	pop    ebx
c002e4d7:	5e                   	pop    esi
c002e4d8:	5f                   	pop    edi
c002e4d9:	5d                   	pop    ebp
c002e4da:	c3                   	ret    
c002e4db:	90                   	nop
c002e4dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e4e0:	85 db                	test   ebx,ebx
c002e4e2:	75 0d                	jne    c002e4f1 <__moddi3+0x81>
c002e4e4:	b8 01 00 00 00       	mov    eax,0x1
c002e4e9:	31 d2                	xor    edx,edx
c002e4eb:	f7 f7                	div    edi
c002e4ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e4f1:	89 f0                	mov    eax,esi
c002e4f3:	31 d2                	xor    edx,edx
c002e4f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e4f9:	f7 f7                	div    edi
c002e4fb:	89 e8                	mov    eax,ebp
c002e4fd:	f7 f7                	div    edi
c002e4ff:	89 d6                	mov    esi,edx
c002e501:	eb bd                	jmp    c002e4c0 <__moddi3+0x50>
c002e503:	90                   	nop
c002e504:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e508:	39 f7                	cmp    edi,esi
c002e50a:	76 20                	jbe    c002e52c <__moddi3+0xbc>
c002e50c:	89 c8                	mov    eax,ecx
c002e50e:	89 f2                	mov    edx,esi
c002e510:	eb b2                	jmp    c002e4c4 <__moddi3+0x54>
c002e512:	66 90                	xchg   ax,ax
c002e514:	f7 d9                	neg    ecx
c002e516:	83 d3 00             	adc    ebx,0x0
c002e519:	f7 db                	neg    ebx
c002e51b:	89 de                	mov    esi,ebx
c002e51d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e525:	e9 6f ff ff ff       	jmp    c002e499 <__moddi3+0x29>
c002e52a:	66 90                	xchg   ax,ax
c002e52c:	0f bd c7             	bsr    eax,edi
c002e52f:	83 f0 1f             	xor    eax,0x1f
c002e532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e536:	75 24                	jne    c002e55c <__moddi3+0xec>
c002e538:	39 f7                	cmp    edi,esi
c002e53a:	72 06                	jb     c002e542 <__moddi3+0xd2>
c002e53c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e540:	77 0c                	ja     c002e54e <__moddi3+0xde>
c002e542:	89 e9                	mov    ecx,ebp
c002e544:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e548:	19 fe                	sbb    esi,edi
c002e54a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e54e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e552:	89 f2                	mov    edx,esi
c002e554:	e9 6b ff ff ff       	jmp    c002e4c4 <__moddi3+0x54>
c002e559:	8d 76 00             	lea    esi,[esi+0x0]
c002e55c:	b8 20 00 00 00       	mov    eax,0x20
c002e561:	89 c2                	mov    edx,eax
c002e563:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e567:	29 da                	sub    edx,ebx
c002e569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e56d:	88 d9                	mov    cl,bl
c002e56f:	d3 e7                	shl    edi,cl
c002e571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e575:	88 d1                	mov    cl,dl
c002e577:	d3 e8                	shr    eax,cl
c002e579:	09 c7                	or     edi,eax
c002e57b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e57f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e583:	89 d8                	mov    eax,ebx
c002e585:	88 d9                	mov    cl,bl
c002e587:	d3 e7                	shl    edi,cl
c002e589:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e58d:	89 f3                	mov    ebx,esi
c002e58f:	88 d1                	mov    cl,dl
c002e591:	d3 eb                	shr    ebx,cl
c002e593:	89 c7                	mov    edi,eax
c002e595:	88 c1                	mov    cl,al
c002e597:	d3 e6                	shl    esi,cl
c002e599:	89 e8                	mov    eax,ebp
c002e59b:	88 d1                	mov    cl,dl
c002e59d:	d3 e8                	shr    eax,cl
c002e59f:	09 f0                	or     eax,esi
c002e5a1:	89 f9                	mov    ecx,edi
c002e5a3:	d3 e5                	shl    ebp,cl
c002e5a5:	89 da                	mov    edx,ebx
c002e5a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e5ab:	89 d3                	mov    ebx,edx
c002e5ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e5b1:	89 c6                	mov    esi,eax
c002e5b3:	89 d1                	mov    ecx,edx
c002e5b5:	39 d3                	cmp    ebx,edx
c002e5b7:	72 27                	jb     c002e5e0 <__moddi3+0x170>
c002e5b9:	74 21                	je     c002e5dc <__moddi3+0x16c>
c002e5bb:	29 f5                	sub    ebp,esi
c002e5bd:	19 cb                	sbb    ebx,ecx
c002e5bf:	89 de                	mov    esi,ebx
c002e5c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e5c5:	d3 e6                	shl    esi,cl
c002e5c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e5cb:	89 f9                	mov    ecx,edi
c002e5cd:	d3 ed                	shr    ebp,cl
c002e5cf:	09 ee                	or     esi,ebp
c002e5d1:	89 f0                	mov    eax,esi
c002e5d3:	d3 eb                	shr    ebx,cl
c002e5d5:	89 da                	mov    edx,ebx
c002e5d7:	e9 e8 fe ff ff       	jmp    c002e4c4 <__moddi3+0x54>
c002e5dc:	39 c5                	cmp    ebp,eax
c002e5de:	73 db                	jae    c002e5bb <__moddi3+0x14b>
c002e5e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e5e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e5e8:	89 d1                	mov    ecx,edx
c002e5ea:	89 c6                	mov    esi,eax
c002e5ec:	eb cd                	jmp    c002e5bb <__moddi3+0x14b>
c002e5ee:	66 90                	xchg   ax,ax

c002e5f0 <__udivdi3>:
c002e5f0:	55                   	push   ebp
c002e5f1:	57                   	push   edi
c002e5f2:	56                   	push   esi
c002e5f3:	53                   	push   ebx
c002e5f4:	83 ec 1c             	sub    esp,0x1c
c002e5f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e5fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e5ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e603:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e607:	85 d2                	test   edx,edx
c002e609:	75 41                	jne    c002e64c <__udivdi3+0x5c>
c002e60b:	39 f7                	cmp    edi,esi
c002e60d:	76 15                	jbe    c002e624 <__udivdi3+0x34>
c002e60f:	89 e8                	mov    eax,ebp
c002e611:	89 f2                	mov    edx,esi
c002e613:	f7 f7                	div    edi
c002e615:	31 db                	xor    ebx,ebx
c002e617:	89 da                	mov    edx,ebx
c002e619:	83 c4 1c             	add    esp,0x1c
c002e61c:	5b                   	pop    ebx
c002e61d:	5e                   	pop    esi
c002e61e:	5f                   	pop    edi
c002e61f:	5d                   	pop    ebp
c002e620:	c3                   	ret    
c002e621:	8d 76 00             	lea    esi,[esi+0x0]
c002e624:	89 f9                	mov    ecx,edi
c002e626:	85 ff                	test   edi,edi
c002e628:	75 0b                	jne    c002e635 <__udivdi3+0x45>
c002e62a:	b8 01 00 00 00       	mov    eax,0x1
c002e62f:	31 d2                	xor    edx,edx
c002e631:	f7 f7                	div    edi
c002e633:	89 c1                	mov    ecx,eax
c002e635:	31 d2                	xor    edx,edx
c002e637:	89 f0                	mov    eax,esi
c002e639:	f7 f1                	div    ecx
c002e63b:	89 c3                	mov    ebx,eax
c002e63d:	89 e8                	mov    eax,ebp
c002e63f:	f7 f1                	div    ecx
c002e641:	89 da                	mov    edx,ebx
c002e643:	83 c4 1c             	add    esp,0x1c
c002e646:	5b                   	pop    ebx
c002e647:	5e                   	pop    esi
c002e648:	5f                   	pop    edi
c002e649:	5d                   	pop    ebp
c002e64a:	c3                   	ret    
c002e64b:	90                   	nop
c002e64c:	39 f2                	cmp    edx,esi
c002e64e:	77 1c                	ja     c002e66c <__udivdi3+0x7c>
c002e650:	0f bd da             	bsr    ebx,edx
c002e653:	83 f3 1f             	xor    ebx,0x1f
c002e656:	75 24                	jne    c002e67c <__udivdi3+0x8c>
c002e658:	39 f2                	cmp    edx,esi
c002e65a:	72 08                	jb     c002e664 <__udivdi3+0x74>
c002e65c:	39 ef                	cmp    edi,ebp
c002e65e:	0f 87 84 00 00 00    	ja     c002e6e8 <__udivdi3+0xf8>
c002e664:	b8 01 00 00 00       	mov    eax,0x1
c002e669:	eb ac                	jmp    c002e617 <__udivdi3+0x27>
c002e66b:	90                   	nop
c002e66c:	31 db                	xor    ebx,ebx
c002e66e:	31 c0                	xor    eax,eax
c002e670:	89 da                	mov    edx,ebx
c002e672:	83 c4 1c             	add    esp,0x1c
c002e675:	5b                   	pop    ebx
c002e676:	5e                   	pop    esi
c002e677:	5f                   	pop    edi
c002e678:	5d                   	pop    ebp
c002e679:	c3                   	ret    
c002e67a:	66 90                	xchg   ax,ax
c002e67c:	b8 20 00 00 00       	mov    eax,0x20
c002e681:	29 d8                	sub    eax,ebx
c002e683:	88 d9                	mov    cl,bl
c002e685:	d3 e2                	shl    edx,cl
c002e687:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e68b:	89 fa                	mov    edx,edi
c002e68d:	88 c1                	mov    cl,al
c002e68f:	d3 ea                	shr    edx,cl
c002e691:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e695:	09 d1                	or     ecx,edx
c002e697:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e69b:	88 d9                	mov    cl,bl
c002e69d:	d3 e7                	shl    edi,cl
c002e69f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e6a3:	89 f7                	mov    edi,esi
c002e6a5:	88 c1                	mov    cl,al
c002e6a7:	d3 ef                	shr    edi,cl
c002e6a9:	88 d9                	mov    cl,bl
c002e6ab:	d3 e6                	shl    esi,cl
c002e6ad:	89 ea                	mov    edx,ebp
c002e6af:	88 c1                	mov    cl,al
c002e6b1:	d3 ea                	shr    edx,cl
c002e6b3:	09 d6                	or     esi,edx
c002e6b5:	89 f0                	mov    eax,esi
c002e6b7:	89 fa                	mov    edx,edi
c002e6b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e6bd:	89 d7                	mov    edi,edx
c002e6bf:	89 c6                	mov    esi,eax
c002e6c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e6c5:	39 d7                	cmp    edi,edx
c002e6c7:	72 13                	jb     c002e6dc <__udivdi3+0xec>
c002e6c9:	74 09                	je     c002e6d4 <__udivdi3+0xe4>
c002e6cb:	89 f0                	mov    eax,esi
c002e6cd:	31 db                	xor    ebx,ebx
c002e6cf:	e9 43 ff ff ff       	jmp    c002e617 <__udivdi3+0x27>
c002e6d4:	88 d9                	mov    cl,bl
c002e6d6:	d3 e5                	shl    ebp,cl
c002e6d8:	39 c5                	cmp    ebp,eax
c002e6da:	73 ef                	jae    c002e6cb <__udivdi3+0xdb>
c002e6dc:	8d 46 ff             	lea    eax,[esi-0x1]
c002e6df:	31 db                	xor    ebx,ebx
c002e6e1:	e9 31 ff ff ff       	jmp    c002e617 <__udivdi3+0x27>
c002e6e6:	66 90                	xchg   ax,ax
c002e6e8:	31 c0                	xor    eax,eax
c002e6ea:	e9 28 ff ff ff       	jmp    c002e617 <__udivdi3+0x27>
c002e6ef:	90                   	nop

c002e6f0 <__umoddi3>:
c002e6f0:	55                   	push   ebp
c002e6f1:	57                   	push   edi
c002e6f2:	56                   	push   esi
c002e6f3:	53                   	push   ebx
c002e6f4:	83 ec 1c             	sub    esp,0x1c
c002e6f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e6fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e6ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e703:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e707:	89 da                	mov    edx,ebx
c002e709:	85 c0                	test   eax,eax
c002e70b:	75 37                	jne    c002e744 <__umoddi3+0x54>
c002e70d:	39 df                	cmp    edi,ebx
c002e70f:	76 13                	jbe    c002e724 <__umoddi3+0x34>
c002e711:	89 f0                	mov    eax,esi
c002e713:	f7 f7                	div    edi
c002e715:	89 d0                	mov    eax,edx
c002e717:	31 d2                	xor    edx,edx
c002e719:	83 c4 1c             	add    esp,0x1c
c002e71c:	5b                   	pop    ebx
c002e71d:	5e                   	pop    esi
c002e71e:	5f                   	pop    edi
c002e71f:	5d                   	pop    ebp
c002e720:	c3                   	ret    
c002e721:	8d 76 00             	lea    esi,[esi+0x0]
c002e724:	89 fd                	mov    ebp,edi
c002e726:	85 ff                	test   edi,edi
c002e728:	75 0b                	jne    c002e735 <__umoddi3+0x45>
c002e72a:	b8 01 00 00 00       	mov    eax,0x1
c002e72f:	31 d2                	xor    edx,edx
c002e731:	f7 f7                	div    edi
c002e733:	89 c5                	mov    ebp,eax
c002e735:	89 d8                	mov    eax,ebx
c002e737:	31 d2                	xor    edx,edx
c002e739:	f7 f5                	div    ebp
c002e73b:	89 f0                	mov    eax,esi
c002e73d:	f7 f5                	div    ebp
c002e73f:	89 d0                	mov    eax,edx
c002e741:	eb d4                	jmp    c002e717 <__umoddi3+0x27>
c002e743:	90                   	nop
c002e744:	89 f1                	mov    ecx,esi
c002e746:	39 d8                	cmp    eax,ebx
c002e748:	76 0a                	jbe    c002e754 <__umoddi3+0x64>
c002e74a:	89 f0                	mov    eax,esi
c002e74c:	83 c4 1c             	add    esp,0x1c
c002e74f:	5b                   	pop    ebx
c002e750:	5e                   	pop    esi
c002e751:	5f                   	pop    edi
c002e752:	5d                   	pop    ebp
c002e753:	c3                   	ret    
c002e754:	0f bd e8             	bsr    ebp,eax
c002e757:	83 f5 1f             	xor    ebp,0x1f
c002e75a:	75 1c                	jne    c002e778 <__umoddi3+0x88>
c002e75c:	39 d8                	cmp    eax,ebx
c002e75e:	72 04                	jb     c002e764 <__umoddi3+0x74>
c002e760:	39 f7                	cmp    edi,esi
c002e762:	77 08                	ja     c002e76c <__umoddi3+0x7c>
c002e764:	89 da                	mov    edx,ebx
c002e766:	29 fe                	sub    esi,edi
c002e768:	19 c2                	sbb    edx,eax
c002e76a:	89 f1                	mov    ecx,esi
c002e76c:	89 c8                	mov    eax,ecx
c002e76e:	83 c4 1c             	add    esp,0x1c
c002e771:	5b                   	pop    ebx
c002e772:	5e                   	pop    esi
c002e773:	5f                   	pop    edi
c002e774:	5d                   	pop    ebp
c002e775:	c3                   	ret    
c002e776:	66 90                	xchg   ax,ax
c002e778:	ba 20 00 00 00       	mov    edx,0x20
c002e77d:	29 ea                	sub    edx,ebp
c002e77f:	89 e9                	mov    ecx,ebp
c002e781:	d3 e0                	shl    eax,cl
c002e783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e787:	89 f8                	mov    eax,edi
c002e789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e78d:	88 d1                	mov    cl,dl
c002e78f:	d3 e8                	shr    eax,cl
c002e791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e795:	09 c1                	or     ecx,eax
c002e797:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e79b:	89 e9                	mov    ecx,ebp
c002e79d:	d3 e7                	shl    edi,cl
c002e79f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e7a3:	89 d8                	mov    eax,ebx
c002e7a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e7a9:	88 d1                	mov    cl,dl
c002e7ab:	d3 e8                	shr    eax,cl
c002e7ad:	89 c7                	mov    edi,eax
c002e7af:	89 e9                	mov    ecx,ebp
c002e7b1:	d3 e3                	shl    ebx,cl
c002e7b3:	89 f0                	mov    eax,esi
c002e7b5:	88 d1                	mov    cl,dl
c002e7b7:	d3 e8                	shr    eax,cl
c002e7b9:	09 d8                	or     eax,ebx
c002e7bb:	89 e9                	mov    ecx,ebp
c002e7bd:	d3 e6                	shl    esi,cl
c002e7bf:	89 f3                	mov    ebx,esi
c002e7c1:	89 fa                	mov    edx,edi
c002e7c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e7c7:	89 d1                	mov    ecx,edx
c002e7c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e7cd:	89 c6                	mov    esi,eax
c002e7cf:	89 d7                	mov    edi,edx
c002e7d1:	39 d1                	cmp    ecx,edx
c002e7d3:	72 27                	jb     c002e7fc <__umoddi3+0x10c>
c002e7d5:	74 21                	je     c002e7f8 <__umoddi3+0x108>
c002e7d7:	89 ca                	mov    edx,ecx
c002e7d9:	29 f3                	sub    ebx,esi
c002e7db:	19 fa                	sbb    edx,edi
c002e7dd:	89 d0                	mov    eax,edx
c002e7df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e7e3:	d3 e0                	shl    eax,cl
c002e7e5:	89 e9                	mov    ecx,ebp
c002e7e7:	d3 eb                	shr    ebx,cl
c002e7e9:	09 d8                	or     eax,ebx
c002e7eb:	d3 ea                	shr    edx,cl
c002e7ed:	83 c4 1c             	add    esp,0x1c
c002e7f0:	5b                   	pop    ebx
c002e7f1:	5e                   	pop    esi
c002e7f2:	5f                   	pop    edi
c002e7f3:	5d                   	pop    ebp
c002e7f4:	c3                   	ret    
c002e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c002e7f8:	39 c3                	cmp    ebx,eax
c002e7fa:	73 db                	jae    c002e7d7 <__umoddi3+0xe7>
c002e7fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e800:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e804:	89 d7                	mov    edi,edx
c002e806:	89 c6                	mov    esi,eax
c002e808:	eb cd                	jmp    c002e7d7 <__umoddi3+0xe7>

Disassembly of section .init:

c002e80a <_init>:
c002e80a:	55                   	push   ebp
c002e80b:	89 e5                	mov    ebp,esp
c002e80d:	e8 e2 18 fd ff       	call   c00000f4 <frame_dummy>
c002e812:	e8 e5 fa ff ff       	call   c002e2fc <__do_global_ctors_aux>
c002e817:	5d                   	pop    ebp
c002e818:	c3                   	ret    

Disassembly of section .fini:

c002e819 <_fini>:
c002e819:	55                   	push   ebp
c002e81a:	89 e5                	mov    ebp,esp
c002e81c:	e8 63 18 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e821:	5d                   	pop    ebp
c002e822:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e824 <Computer::~Computer()>:
c002e824:	83 ec 0c             	sub    esp,0xc
c002e827:	ba c4 0f 03 c0       	mov    edx,0xc0030fc4
c002e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e830:	89 10                	mov    DWORD PTR [eax],edx
c002e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e836:	83 ec 0c             	sub    esp,0xc
c002e839:	50                   	push   eax
c002e83a:	e8 6b c9 fe ff       	call   c001b1aa <Device::~Device()>
c002e83f:	83 c4 10             	add    esp,0x10
c002e842:	90                   	nop
c002e843:	83 c4 0c             	add    esp,0xc
c002e846:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e848 <Computer::~Computer()>:
c002e848:	83 ec 0c             	sub    esp,0xc
c002e84b:	83 ec 0c             	sub    esp,0xc
c002e84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e852:	e8 cd ff ff ff       	call   c002e824 <Computer::~Computer()>
c002e857:	83 c4 10             	add    esp,0x10
c002e85a:	83 ec 08             	sub    esp,0x8
c002e85d:	68 70 01 00 00       	push   0x170
c002e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e866:	e8 a9 a8 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002e86b:	83 c4 10             	add    esp,0x10
c002e86e:	83 c4 0c             	add    esp,0xc
c002e871:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e872 <idleCommon()>:
c002e872:	83 ec 0c             	sub    esp,0xc
c002e875:	fa                   	cli    
c002e876:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e87c:	e8 13 69 ff ff       	call   c0025194 <schedule()>
c002e881:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e886:	48                   	dec    eax
c002e887:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e88c:	75 01                	jne    c002e88f <idleCommon()+0x1d>
c002e88e:	fb                   	sti    
c002e88f:	83 c4 0c             	add    esp,0xc
c002e892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e894 <LinkedList<UnixFile>::~LinkedList()>:
c002e894:	90                   	nop
c002e895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e896 <LinkedList<UnixFile>::LinkedList()>:
c002e896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e89a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8d6:	90                   	nop
c002e8d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e8d8:	83 ec 0c             	sub    esp,0xc
c002e8db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e8e0:	75 10                	jne    c002e8f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e8e2:	83 ec 0c             	sub    esp,0xc
c002e8e5:	68 d8 11 03 c0       	push   0xc00311d8
c002e8ea:	e8 ab 18 ff ff       	call   c002019a <KePanic(char const*)>
c002e8ef:	83 c4 10             	add    esp,0x10
c002e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8f8:	85 c0                	test   eax,eax
c002e8fa:	74 34                	je     c002e930 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e903:	85 c0                	test   eax,eax
c002e905:	74 29                	je     c002e930 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e90b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e90e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e912:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e919:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e91d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e92e:	eb 65                	jmp    c002e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e934:	8b 00                	mov    eax,DWORD PTR [eax]
c002e936:	85 c0                	test   eax,eax
c002e938:	75 4b                	jne    c002e985 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e941:	85 c0                	test   eax,eax
c002e943:	75 40                	jne    c002e985 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e949:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e94d:	89 10                	mov    DWORD PTR [eax],edx
c002e94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e953:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e957:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e961:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e96f:	85 c0                	test   eax,eax
c002e971:	74 22                	je     c002e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e973:	83 ec 0c             	sub    esp,0xc
c002e976:	68 fa 11 03 c0       	push   0xc00311fa
c002e97b:	e8 1a 18 ff ff       	call   c002019a <KePanic(char const*)>
c002e980:	83 c4 10             	add    esp,0x10
c002e983:	eb 10                	jmp    c002e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e985:	83 ec 0c             	sub    esp,0xc
c002e988:	68 04 12 03 c0       	push   0xc0031204
c002e98d:	e8 08 18 ff ff       	call   c002019a <KePanic(char const*)>
c002e992:	83 c4 10             	add    esp,0x10
c002e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e99c:	8d 50 01             	lea    edx,[eax+0x1]
c002e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9a6:	90                   	nop
c002e9a7:	83 c4 0c             	add    esp,0xc
c002e9aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e9ac <LinkedList<UnixFile>::getFirstElement()>:
c002e9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e9b4 <LinkedList<UnixFile>::removeFirst()>:
c002e9b4:	83 ec 0c             	sub    esp,0xc
c002e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9bd:	85 c0                	test   eax,eax
c002e9bf:	75 12                	jne    c002e9d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e9c1:	83 ec 0c             	sub    esp,0xc
c002e9c4:	68 10 12 03 c0       	push   0xc0031210
c002e9c9:	e8 cc 17 ff ff       	call   c002019a <KePanic(char const*)>
c002e9ce:	83 c4 10             	add    esp,0x10
c002e9d1:	eb 7e                	jmp    c002ea51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9dd:	85 c0                	test   eax,eax
c002e9df:	74 10                	je     c002e9f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e9e1:	83 ec 0c             	sub    esp,0xc
c002e9e4:	68 5b 12 03 c0       	push   0xc003125b
c002e9e9:	e8 ac 17 ff ff       	call   c002019a <KePanic(char const*)>
c002e9ee:	83 c4 10             	add    esp,0x10
c002e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9fa:	85 c0                	test   eax,eax
c002e9fc:	75 33                	jne    c002ea31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ea08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea1a:	83 f8 01             	cmp    eax,0x1
c002ea1d:	74 21                	je     c002ea40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea1f:	83 ec 0c             	sub    esp,0xc
c002ea22:	68 34 12 03 c0       	push   0xc0031234
c002ea27:	e8 6e 17 ff ff       	call   c002019a <KePanic(char const*)>
c002ea2c:	83 c4 10             	add    esp,0x10
c002ea2f:	eb 0f                	jmp    c002ea40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea35:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ea3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea3e:	89 10                	mov    DWORD PTR [eax],edx
c002ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea47:	8d 50 ff             	lea    edx,[eax-0x1]
c002ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea51:	83 c4 0c             	add    esp,0xc
c002ea54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002ea56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002ea56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ea5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002ea5e <DriverlessDevice::~DriverlessDevice()>:
c002ea5e:	ba 88 1e 03 c0       	mov    edx,0xc0031e88
c002ea63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea67:	89 10                	mov    DWORD PTR [eax],edx
c002ea69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea6d:	50                   	push   eax
c002ea6e:	e8 37 c7 fe ff       	call   c001b1aa <Device::~Device()>
c002ea73:	83 c4 04             	add    esp,0x4
c002ea76:	90                   	nop
c002ea77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ea78 <DriverlessDevice::~DriverlessDevice()>:
c002ea78:	83 ec 0c             	sub    esp,0xc
c002ea7b:	83 ec 0c             	sub    esp,0xc
c002ea7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea82:	e8 d7 ff ff ff       	call   c002ea5e <DriverlessDevice::~DriverlessDevice()>
c002ea87:	83 c4 10             	add    esp,0x10
c002ea8a:	83 ec 08             	sub    esp,0x8
c002ea8d:	68 58 01 00 00       	push   0x158
c002ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea96:	e8 79 a6 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002ea9b:	83 c4 10             	add    esp,0x10
c002ea9e:	83 c4 0c             	add    esp,0xc
c002eaa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002eaa2 <LinkedList<Device>::addElement(Device*)>:
c002eaa2:	83 ec 0c             	sub    esp,0xc
c002eaa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eaaa:	75 10                	jne    c002eabc <LinkedList<Device>::addElement(Device*)+0x1a>
c002eaac:	83 ec 0c             	sub    esp,0xc
c002eaaf:	68 d8 11 03 c0       	push   0xc00311d8
c002eab4:	e8 e1 16 ff ff       	call   c002019a <KePanic(char const*)>
c002eab9:	83 c4 10             	add    esp,0x10
c002eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eac2:	85 c0                	test   eax,eax
c002eac4:	74 3a                	je     c002eb00 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eacd:	85 c0                	test   eax,eax
c002eacf:	74 2f                	je     c002eb00 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ead1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ead5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ead8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eadc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eaea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eaed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eafe:	eb 68                	jmp    c002eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb04:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb06:	85 c0                	test   eax,eax
c002eb08:	75 4e                	jne    c002eb58 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb11:	85 c0                	test   eax,eax
c002eb13:	75 43                	jne    c002eb58 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb1d:	89 10                	mov    DWORD PTR [eax],edx
c002eb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb42:	85 c0                	test   eax,eax
c002eb44:	74 22                	je     c002eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb46:	83 ec 0c             	sub    esp,0xc
c002eb49:	68 fa 11 03 c0       	push   0xc00311fa
c002eb4e:	e8 47 16 ff ff       	call   c002019a <KePanic(char const*)>
c002eb53:	83 c4 10             	add    esp,0x10
c002eb56:	eb 10                	jmp    c002eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb58:	83 ec 0c             	sub    esp,0xc
c002eb5b:	68 04 12 03 c0       	push   0xc0031204
c002eb60:	e8 35 16 ff ff       	call   c002019a <KePanic(char const*)>
c002eb65:	83 c4 10             	add    esp,0x10
c002eb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb6f:	8d 50 01             	lea    edx,[eax+0x1]
c002eb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb79:	90                   	nop
c002eb7a:	83 c4 0c             	add    esp,0xc
c002eb7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002eb7e <LinkedList<Device>::LinkedList()>:
c002eb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eba2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebbe:	90                   	nop
c002ebbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ebc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebc4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebc6:	85 c0                	test   eax,eax
c002ebc8:	75 0e                	jne    c002ebd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ebca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebd1:	85 c0                	test   eax,eax
c002ebd3:	75 03                	jne    c002ebd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ebd5:	b0 01                	mov    al,0x1
c002ebd7:	c3                   	ret    
c002ebd8:	b0 00                	mov    al,0x0
c002ebda:	90                   	nop
c002ebdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ebdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebe0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ebe4:	83 ec 0c             	sub    esp,0xc
c002ebe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebeb:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebed:	85 c0                	test   eax,eax
c002ebef:	75 17                	jne    c002ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ebf1:	83 ec 0c             	sub    esp,0xc
c002ebf4:	68 10 12 03 c0       	push   0xc0031210
c002ebf9:	e8 9c 15 ff ff       	call   c002019a <KePanic(char const*)>
c002ebfe:	83 c4 10             	add    esp,0x10
c002ec01:	e9 96 00 00 00       	jmp    c002ec9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ec06:	66 90                	xchg   ax,ax
c002ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec12:	85 c0                	test   eax,eax
c002ec14:	0f 95 c0             	setne  al
c002ec17:	0f b6 c0             	movzx  eax,al
c002ec1a:	85 c0                	test   eax,eax
c002ec1c:	74 12                	je     c002ec30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ec1e:	83 ec 0c             	sub    esp,0xc
c002ec21:	68 5b 12 03 c0       	push   0xc003125b
c002ec26:	e8 6f 15 ff ff       	call   c002019a <KePanic(char const*)>
c002ec2b:	83 c4 10             	add    esp,0x10
c002ec2e:	66 90                	xchg   ax,ax
c002ec30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec34:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec39:	85 c0                	test   eax,eax
c002ec3b:	0f 94 c0             	sete   al
c002ec3e:	0f b6 c0             	movzx  eax,al
c002ec41:	85 c0                	test   eax,eax
c002ec43:	74 33                	je     c002ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ec45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec61:	83 f8 01             	cmp    eax,0x1
c002ec64:	74 22                	je     c002ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ec66:	83 ec 0c             	sub    esp,0xc
c002ec69:	68 34 12 03 c0       	push   0xc0031234
c002ec6e:	e8 27 15 ff ff       	call   c002019a <KePanic(char const*)>
c002ec73:	83 c4 10             	add    esp,0x10
c002ec76:	eb 10                	jmp    c002ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec85:	89 10                	mov    DWORD PTR [eax],edx
c002ec87:	90                   	nop
c002ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec8f:	8d 50 ff             	lea    edx,[eax-0x1]
c002ec92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec99:	8d 76 00             	lea    esi,[esi+0x0]
c002ec9c:	83 c4 0c             	add    esp,0xc
c002ec9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002eca0:	83 ec 0c             	sub    esp,0xc
c002eca3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eca8:	75 12                	jne    c002ecbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ecaa:	83 ec 0c             	sub    esp,0xc
c002ecad:	68 d8 11 03 c0       	push   0xc00311d8
c002ecb2:	e8 e3 14 ff ff       	call   c002019a <KePanic(char const*)>
c002ecb7:	83 c4 10             	add    esp,0x10
c002ecba:	66 90                	xchg   ax,ax
c002ecbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecc2:	85 c0                	test   eax,eax
c002ecc4:	74 36                	je     c002ecfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eccd:	85 c0                	test   eax,eax
c002eccf:	74 2b                	je     c002ecfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecdc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ecdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ece7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ecea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ecf8:	eb 6a                	jmp    c002ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ecfa:	66 90                	xchg   ax,ax
c002ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed00:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed02:	85 c0                	test   eax,eax
c002ed04:	75 4e                	jne    c002ed54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed0d:	85 c0                	test   eax,eax
c002ed0f:	75 43                	jne    c002ed54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed19:	89 10                	mov    DWORD PTR [eax],edx
c002ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed3b:	85 c0                	test   eax,eax
c002ed3d:	74 25                	je     c002ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed3f:	83 ec 0c             	sub    esp,0xc
c002ed42:	68 fa 11 03 c0       	push   0xc00311fa
c002ed47:	e8 4e 14 ff ff       	call   c002019a <KePanic(char const*)>
c002ed4c:	83 c4 10             	add    esp,0x10
c002ed4f:	eb 13                	jmp    c002ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed51:	8d 76 00             	lea    esi,[esi+0x0]
c002ed54:	83 ec 0c             	sub    esp,0xc
c002ed57:	68 04 12 03 c0       	push   0xc0031204
c002ed5c:	e8 39 14 ff ff       	call   c002019a <KePanic(char const*)>
c002ed61:	83 c4 10             	add    esp,0x10
c002ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed6b:	8d 50 01             	lea    edx,[eax+0x1]
c002ed6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed75:	90                   	nop
c002ed76:	83 c4 0c             	add    esp,0xc
c002ed79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ed7c <ACPI::~ACPI()>:
c002ed7c:	83 ec 0c             	sub    esp,0xc
c002ed7f:	ba 40 25 03 c0       	mov    edx,0xc0032540
c002ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed88:	89 10                	mov    DWORD PTR [eax],edx
c002ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8e:	83 ec 0c             	sub    esp,0xc
c002ed91:	50                   	push   eax
c002ed92:	e8 13 c4 fe ff       	call   c001b1aa <Device::~Device()>
c002ed97:	83 c4 10             	add    esp,0x10
c002ed9a:	90                   	nop
c002ed9b:	83 c4 0c             	add    esp,0xc
c002ed9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002eda0 <ACPI::~ACPI()>:
c002eda0:	83 ec 0c             	sub    esp,0xc
c002eda3:	83 ec 0c             	sub    esp,0xc
c002eda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edaa:	e8 cd ff ff ff       	call   c002ed7c <ACPI::~ACPI()>
c002edaf:	83 c4 10             	add    esp,0x10
c002edb2:	83 ec 08             	sub    esp,0x8
c002edb5:	68 64 12 00 00       	push   0x1264
c002edba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edbe:	e8 51 a3 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002edc3:	83 c4 10             	add    esp,0x10
c002edc6:	83 c4 0c             	add    esp,0xc
c002edc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002edcc <LinkedList<Device>::~LinkedList()>:
c002edcc:	90                   	nop
c002edcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002edd0 <LinkedList<Device>::isEmpty()>:
c002edd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002edd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002edd6:	85 c0                	test   eax,eax
c002edd8:	75 0e                	jne    c002ede8 <LinkedList<Device>::isEmpty()+0x18>
c002edda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002edde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ede1:	85 c0                	test   eax,eax
c002ede3:	75 03                	jne    c002ede8 <LinkedList<Device>::isEmpty()+0x18>
c002ede5:	b0 01                	mov    al,0x1
c002ede7:	c3                   	ret    
c002ede8:	b0 00                	mov    al,0x0
c002edea:	90                   	nop
c002edeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002edec <LinkedList<Device>::getFirstElement()>:
c002edec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002edf0:	8b 00                	mov    eax,DWORD PTR [eax]
c002edf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002edf4 <LinkedList<Device>::removeFirst()>:
c002edf4:	83 ec 0c             	sub    esp,0xc
c002edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edfb:	8b 00                	mov    eax,DWORD PTR [eax]
c002edfd:	85 c0                	test   eax,eax
c002edff:	75 17                	jne    c002ee18 <LinkedList<Device>::removeFirst()+0x24>
c002ee01:	83 ec 0c             	sub    esp,0xc
c002ee04:	68 10 12 03 c0       	push   0xc0031210
c002ee09:	e8 8c 13 ff ff       	call   c002019a <KePanic(char const*)>
c002ee0e:	83 c4 10             	add    esp,0x10
c002ee11:	e9 92 00 00 00       	jmp    c002eea8 <LinkedList<Device>::removeFirst()+0xb4>
c002ee16:	66 90                	xchg   ax,ax
c002ee18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee1f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee25:	85 c0                	test   eax,eax
c002ee27:	74 13                	je     c002ee3c <LinkedList<Device>::removeFirst()+0x48>
c002ee29:	83 ec 0c             	sub    esp,0xc
c002ee2c:	68 5b 12 03 c0       	push   0xc003125b
c002ee31:	e8 64 13 ff ff       	call   c002019a <KePanic(char const*)>
c002ee36:	83 c4 10             	add    esp,0x10
c002ee39:	8d 76 00             	lea    esi,[esi+0x0]
c002ee3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee42:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee48:	85 c0                	test   eax,eax
c002ee4a:	75 34                	jne    c002ee80 <LinkedList<Device>::removeFirst()+0x8c>
c002ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee68:	83 f8 01             	cmp    eax,0x1
c002ee6b:	74 27                	je     c002ee94 <LinkedList<Device>::removeFirst()+0xa0>
c002ee6d:	83 ec 0c             	sub    esp,0xc
c002ee70:	68 34 12 03 c0       	push   0xc0031234
c002ee75:	e8 20 13 ff ff       	call   c002019a <KePanic(char const*)>
c002ee7a:	83 c4 10             	add    esp,0x10
c002ee7d:	eb 15                	jmp    c002ee94 <LinkedList<Device>::removeFirst()+0xa0>
c002ee7f:	90                   	nop
c002ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee86:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee90:	89 10                	mov    DWORD PTR [eax],edx
c002ee92:	66 90                	xchg   ax,ax
c002ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee9b:	8d 50 ff             	lea    edx,[eax-0x1]
c002ee9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eea5:	8d 76 00             	lea    esi,[esi+0x0]
c002eea8:	83 c4 0c             	add    esp,0xc
c002eeab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002eeac <CPU::~CPU()>:
c002eeac:	83 ec 0c             	sub    esp,0xc
c002eeaf:	ba e8 26 03 c0       	mov    edx,0xc00326e8
c002eeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb8:	89 10                	mov    DWORD PTR [eax],edx
c002eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eebe:	83 ec 0c             	sub    esp,0xc
c002eec1:	50                   	push   eax
c002eec2:	e8 e3 c2 fe ff       	call   c001b1aa <Device::~Device()>
c002eec7:	83 c4 10             	add    esp,0x10
c002eeca:	90                   	nop
c002eecb:	83 c4 0c             	add    esp,0xc
c002eece:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002eed0 <CPU::~CPU()>:
c002eed0:	83 ec 0c             	sub    esp,0xc
c002eed3:	83 ec 0c             	sub    esp,0xc
c002eed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeda:	e8 cd ff ff ff       	call   c002eeac <CPU::~CPU()>
c002eedf:	83 c4 10             	add    esp,0x10
c002eee2:	83 ec 08             	sub    esp,0x8
c002eee5:	68 94 11 00 00       	push   0x1194
c002eeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeee:	e8 21 a2 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002eef3:	83 c4 10             	add    esp,0x10
c002eef6:	83 c4 0c             	add    esp,0xc
c002eef9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002eefc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ef00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ef04 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ef04:	90                   	nop
c002ef05:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ef08 <ThreadControlBlock::ThreadControlBlock()>:
c002ef08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ef13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef17:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef22:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ef29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef2d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef38:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002ef3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef43:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002ef47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef4b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002ef4f:	90                   	nop
c002ef50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002ef54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef94:	90                   	nop
c002ef95:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002ef96 <PCI::~PCI()>:
c002ef96:	83 ec 0c             	sub    esp,0xc
c002ef99:	ba 08 36 03 c0       	mov    edx,0xc0033608
c002ef9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa2:	89 10                	mov    DWORD PTR [eax],edx
c002efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa8:	83 ec 0c             	sub    esp,0xc
c002efab:	50                   	push   eax
c002efac:	e8 8b bc fe ff       	call   c001ac3c <Bus::~Bus()>
c002efb1:	83 c4 10             	add    esp,0x10
c002efb4:	90                   	nop
c002efb5:	83 c4 0c             	add    esp,0xc
c002efb8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002efba <PCI::~PCI()>:
c002efba:	83 ec 0c             	sub    esp,0xc
c002efbd:	83 ec 0c             	sub    esp,0xc
c002efc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efc4:	e8 cd ff ff ff       	call   c002ef96 <PCI::~PCI()>
c002efc9:	83 c4 10             	add    esp,0x10
c002efcc:	83 ec 08             	sub    esp,0x8
c002efcf:	68 5c 01 00 00       	push   0x15c
c002efd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efd8:	e8 37 a1 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002efdd:	83 c4 10             	add    esp,0x10
c002efe0:	83 c4 0c             	add    esp,0xc
c002efe3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002efe4 <IDE::~IDE()>:
c002efe4:	83 ec 0c             	sub    esp,0xc
c002efe7:	ba bc 36 03 c0       	mov    edx,0xc00336bc
c002efec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff0:	89 10                	mov    DWORD PTR [eax],edx
c002eff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff6:	83 ec 0c             	sub    esp,0xc
c002eff9:	50                   	push   eax
c002effa:	e8 39 c6 fe ff       	call   c001b638 <HardDiskController::~HardDiskController()>
c002efff:	83 c4 10             	add    esp,0x10
c002f002:	90                   	nop
c002f003:	83 c4 0c             	add    esp,0xc
c002f006:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f008 <IDE::~IDE()>:
c002f008:	83 ec 0c             	sub    esp,0xc
c002f00b:	83 ec 0c             	sub    esp,0xc
c002f00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f012:	e8 cd ff ff ff       	call   c002efe4 <IDE::~IDE()>
c002f017:	83 c4 10             	add    esp,0x10
c002f01a:	83 ec 08             	sub    esp,0x8
c002f01d:	68 70 02 00 00       	push   0x270
c002f022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f026:	e8 e9 a0 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f02b:	83 c4 10             	add    esp,0x10
c002f02e:	83 c4 0c             	add    esp,0xc
c002f031:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f032 <SATABus::~SATABus()>:
c002f032:	83 ec 0c             	sub    esp,0xc
c002f035:	ba 0c 37 03 c0       	mov    edx,0xc003370c
c002f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f03e:	89 10                	mov    DWORD PTR [eax],edx
c002f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f044:	83 ec 0c             	sub    esp,0xc
c002f047:	50                   	push   eax
c002f048:	e8 eb c5 fe ff       	call   c001b638 <HardDiskController::~HardDiskController()>
c002f04d:	83 c4 10             	add    esp,0x10
c002f050:	90                   	nop
c002f051:	83 c4 0c             	add    esp,0xc
c002f054:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f056 <SATABus::~SATABus()>:
c002f056:	83 ec 0c             	sub    esp,0xc
c002f059:	83 ec 0c             	sub    esp,0xc
c002f05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f060:	e8 cd ff ff ff       	call   c002f032 <SATABus::~SATABus()>
c002f065:	83 c4 10             	add    esp,0x10
c002f068:	83 ec 08             	sub    esp,0x8
c002f06b:	68 64 01 00 00       	push   0x164
c002f070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f074:	e8 9b a0 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f079:	83 c4 10             	add    esp,0x10
c002f07c:	83 c4 0c             	add    esp,0xc
c002f07f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f080 <ATA::~ATA()>:
c002f080:	83 ec 0c             	sub    esp,0xc
c002f083:	ba 4c 37 03 c0       	mov    edx,0xc003374c
c002f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f08c:	89 10                	mov    DWORD PTR [eax],edx
c002f08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f092:	83 ec 0c             	sub    esp,0xc
c002f095:	50                   	push   eax
c002f096:	e8 7f c6 fe ff       	call   c001b71a <PhysicalDisk::~PhysicalDisk()>
c002f09b:	83 c4 10             	add    esp,0x10
c002f09e:	90                   	nop
c002f09f:	83 c4 0c             	add    esp,0xc
c002f0a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f0a4 <ATA::~ATA()>:
c002f0a4:	83 ec 0c             	sub    esp,0xc
c002f0a7:	83 ec 0c             	sub    esp,0xc
c002f0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ae:	e8 cd ff ff ff       	call   c002f080 <ATA::~ATA()>
c002f0b3:	83 c4 10             	add    esp,0x10
c002f0b6:	83 ec 08             	sub    esp,0x8
c002f0b9:	68 7c 01 00 00       	push   0x17c
c002f0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0c2:	e8 4d a0 fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f0c7:	83 c4 10             	add    esp,0x10
c002f0ca:	83 c4 0c             	add    esp,0xc
c002f0cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f0ce <ATAPI::~ATAPI()>:
c002f0ce:	83 ec 0c             	sub    esp,0xc
c002f0d1:	ba 94 37 03 c0       	mov    edx,0xc0033794
c002f0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0da:	89 10                	mov    DWORD PTR [eax],edx
c002f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e0:	83 ec 0c             	sub    esp,0xc
c002f0e3:	50                   	push   eax
c002f0e4:	e8 31 c6 fe ff       	call   c001b71a <PhysicalDisk::~PhysicalDisk()>
c002f0e9:	83 c4 10             	add    esp,0x10
c002f0ec:	90                   	nop
c002f0ed:	83 c4 0c             	add    esp,0xc
c002f0f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f0f2 <ATAPI::~ATAPI()>:
c002f0f2:	83 ec 0c             	sub    esp,0xc
c002f0f5:	83 ec 0c             	sub    esp,0xc
c002f0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0fc:	e8 cd ff ff ff       	call   c002f0ce <ATAPI::~ATAPI()>
c002f101:	83 c4 10             	add    esp,0x10
c002f104:	83 ec 08             	sub    esp,0x8
c002f107:	68 84 01 00 00       	push   0x184
c002f10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f110:	e8 ff 9f fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f115:	83 c4 10             	add    esp,0x10
c002f118:	83 c4 0c             	add    esp,0xc
c002f11b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f11c <SATA::~SATA()>:
c002f11c:	83 ec 0c             	sub    esp,0xc
c002f11f:	ba 54 38 03 c0       	mov    edx,0xc0033854
c002f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f128:	89 10                	mov    DWORD PTR [eax],edx
c002f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12e:	83 ec 0c             	sub    esp,0xc
c002f131:	50                   	push   eax
c002f132:	e8 e3 c5 fe ff       	call   c001b71a <PhysicalDisk::~PhysicalDisk()>
c002f137:	83 c4 10             	add    esp,0x10
c002f13a:	90                   	nop
c002f13b:	83 c4 0c             	add    esp,0xc
c002f13e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f140 <SATA::~SATA()>:
c002f140:	83 ec 0c             	sub    esp,0xc
c002f143:	83 ec 0c             	sub    esp,0xc
c002f146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f14a:	e8 cd ff ff ff       	call   c002f11c <SATA::~SATA()>
c002f14f:	83 c4 10             	add    esp,0x10
c002f152:	83 ec 08             	sub    esp,0x8
c002f155:	68 7c 01 00 00       	push   0x17c
c002f15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f15e:	e8 b1 9f fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f163:	83 c4 10             	add    esp,0x10
c002f166:	83 c4 0c             	add    esp,0xc
c002f169:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f16a <SATAPI::~SATAPI()>:
c002f16a:	83 ec 0c             	sub    esp,0xc
c002f16d:	ba 78 39 03 c0       	mov    edx,0xc0033978
c002f172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f176:	89 10                	mov    DWORD PTR [eax],edx
c002f178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f17c:	83 ec 0c             	sub    esp,0xc
c002f17f:	50                   	push   eax
c002f180:	e8 95 c5 fe ff       	call   c001b71a <PhysicalDisk::~PhysicalDisk()>
c002f185:	83 c4 10             	add    esp,0x10
c002f188:	90                   	nop
c002f189:	83 c4 0c             	add    esp,0xc
c002f18c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f18e <SATAPI::~SATAPI()>:
c002f18e:	83 ec 0c             	sub    esp,0xc
c002f191:	83 ec 0c             	sub    esp,0xc
c002f194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f198:	e8 cd ff ff ff       	call   c002f16a <SATAPI::~SATAPI()>
c002f19d:	83 c4 10             	add    esp,0x10
c002f1a0:	83 ec 08             	sub    esp,0x8
c002f1a3:	68 84 01 00 00       	push   0x184
c002f1a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ac:	e8 63 9f fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f1b1:	83 c4 10             	add    esp,0x10
c002f1b4:	83 c4 0c             	add    esp,0xc
c002f1b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f1b8 <IOAPIC::~IOAPIC()>:
c002f1b8:	83 ec 0c             	sub    esp,0xc
c002f1bb:	ba b8 39 03 c0       	mov    edx,0xc00339b8
c002f1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c4:	89 10                	mov    DWORD PTR [eax],edx
c002f1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ca:	83 ec 0c             	sub    esp,0xc
c002f1cd:	50                   	push   eax
c002f1ce:	e8 d7 bf fe ff       	call   c001b1aa <Device::~Device()>
c002f1d3:	83 c4 10             	add    esp,0x10
c002f1d6:	90                   	nop
c002f1d7:	83 c4 0c             	add    esp,0xc
c002f1da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f1dc <IOAPIC::~IOAPIC()>:
c002f1dc:	83 ec 0c             	sub    esp,0xc
c002f1df:	83 ec 0c             	sub    esp,0xc
c002f1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1e6:	e8 cd ff ff ff       	call   c002f1b8 <IOAPIC::~IOAPIC()>
c002f1eb:	83 c4 10             	add    esp,0x10
c002f1ee:	83 ec 08             	sub    esp,0x8
c002f1f1:	68 68 01 00 00       	push   0x168
c002f1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1fa:	e8 15 9f fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f1ff:	83 c4 10             	add    esp,0x10
c002f202:	83 c4 0c             	add    esp,0xc
c002f205:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f208 <APICTimer::~APICTimer()>:
c002f208:	83 ec 0c             	sub    esp,0xc
c002f20b:	ba 00 3a 03 c0       	mov    edx,0xc0033a00
c002f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f214:	89 10                	mov    DWORD PTR [eax],edx
c002f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21a:	83 ec 0c             	sub    esp,0xc
c002f21d:	50                   	push   eax
c002f21e:	e8 69 da fe ff       	call   c001cc8c <Timer::~Timer()>
c002f223:	83 c4 10             	add    esp,0x10
c002f226:	90                   	nop
c002f227:	83 c4 0c             	add    esp,0xc
c002f22a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f22c <APICTimer::~APICTimer()>:
c002f22c:	83 ec 0c             	sub    esp,0xc
c002f22f:	83 ec 0c             	sub    esp,0xc
c002f232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f236:	e8 cd ff ff ff       	call   c002f208 <APICTimer::~APICTimer()>
c002f23b:	83 c4 10             	add    esp,0x10
c002f23e:	83 ec 08             	sub    esp,0x8
c002f241:	68 60 01 00 00       	push   0x160
c002f246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f24a:	e8 c5 9e fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f24f:	83 c4 10             	add    esp,0x10
c002f252:	83 c4 0c             	add    esp,0xc
c002f255:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f258 <PIT::~PIT()>:
c002f258:	83 ec 0c             	sub    esp,0xc
c002f25b:	ba 50 3a 03 c0       	mov    edx,0xc0033a50
c002f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f264:	89 10                	mov    DWORD PTR [eax],edx
c002f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f26a:	83 ec 0c             	sub    esp,0xc
c002f26d:	50                   	push   eax
c002f26e:	e8 19 da fe ff       	call   c001cc8c <Timer::~Timer()>
c002f273:	83 c4 10             	add    esp,0x10
c002f276:	90                   	nop
c002f277:	83 c4 0c             	add    esp,0xc
c002f27a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f27c <PIT::~PIT()>:
c002f27c:	83 ec 0c             	sub    esp,0xc
c002f27f:	83 ec 0c             	sub    esp,0xc
c002f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f286:	e8 cd ff ff ff       	call   c002f258 <PIT::~PIT()>
c002f28b:	83 c4 10             	add    esp,0x10
c002f28e:	83 ec 08             	sub    esp,0x8
c002f291:	68 5c 01 00 00       	push   0x15c
c002f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f29a:	e8 75 9e fe ff       	call   c0019114 <operator delete(void*, unsigned long)>
c002f29f:	83 c4 10             	add    esp,0x10
c002f2a2:	83 c4 0c             	add    esp,0xc
c002f2a5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 3b 28 03 c0       	mov    esi,0xc003283b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 57 28 03 c0       	mov    esi,0xc0032857
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
