
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 38 02 c0       	mov    eax,0xc0023844
c0000025:	3d 44 38 02 c0       	cmp    eax,0xc0023844
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 38 02 c0       	push   0xc0023844
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 38 02 c0       	mov    eax,0xc0023844
c0000051:	2d 44 38 02 c0       	sub    eax,0xc0023844
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 38 02 c0       	push   0xc0023844
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 1c ff 01 c0       	mov    ebx,0xc001ff1c
c0000097:	81 eb 18 ff 01 c0    	sub    ebx,0xc001ff18
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 18 ff 01 c0       	mov    esi,0xc001ff18
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 38 02 c0       	push   0xc0023844
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 38 02 c0       	push   0xc0023844
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1b 51 01 00       	call   c00153c8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f9 50 01 00       	call   c00153c8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 06 56 01 00       	call   c00158f4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a1 5c 01 00       	call   c0015f98 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 fd 0e 01 00       	jmp    c001127c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe00e0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00e0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe00e0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe00e0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe00e0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00e0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 24 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdffdc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 8a 77 01 00       	jmp    c0019564 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 b4 77 01 00       	jmp    c00195a4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 d5 77 01 00       	jmp    c00195e4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 80 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe80]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 80 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe80]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 28 02 c0       	mov    edx,0xc0022864
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 3c 00 02 c0       	mov    edx,0xc002003c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 42 00 02 c0       	mov    eax,0xc0020042
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 00 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdff00]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 4b 00 02 c0       	mov    eax,0xc002004b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 80 01 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfe80]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 d0 00 02 c0       	mov    eax,0xc00200d0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb c0 00 02 c0       	mov    ebx,0xc00200c0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 a0 00 02 c0       	mov    eax,0xc00200a0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 b0 00 02 c0       	mov    eax,0xc00200b0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 52 00 02 c0       	mov    edx,0xc0020052
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 5e 00 02 c0       	mov    edx,0xc002005e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 72 00 02 c0       	mov    edx,0xc0020072
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c a0 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc00204a0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 a0 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc00204a0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 a0 02 02 c0       	mov    eax,0xc00202a0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 e0 01 02 c0       	mov    eax,0xc00201e0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 a0 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe60]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 a0 05 02 c0       	push   0xc00205a0
c0006147:	e8 bc 3d 01 00       	call   c0019f08 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ae 05 02 c0       	push   0xc00205ae
c000617f:	e8 84 3d 01 00       	call   c0019f08 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 ed 3c 01 00       	call   c0019eac <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 bd 05 02 c0       	push   0xc00205bd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 c0 05 02 c0       	push   0xc00205c0
c000682f:	e8 d4 36 01 00       	call   c0019f08 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 e2 36 01 00       	call   c0019f24 <iso_kprintfd>
c0006842:	c7 04 24 c5 05 02 c0 	mov    DWORD PTR [esp],0xc00205c5
c0006849:	e8 ba 36 01 00       	call   c0019f08 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 ca 36 01 00       	call   c0019f24 <iso_kprintfd>
c000685a:	c7 04 24 cb 05 02 c0 	mov    DWORD PTR [esp],0xc00205cb
c0006861:	e8 a2 36 01 00       	call   c0019f08 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 b2 36 01 00       	call   c0019f24 <iso_kprintfd>
c0006872:	c7 04 24 d1 05 02 c0 	mov    DWORD PTR [esp],0xc00205d1
c0006879:	e8 8a 36 01 00       	call   c0019f08 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 9a 36 01 00       	call   c0019f24 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 bd 05 02 c0       	push   0xc00205bd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 da 05 02 c0       	push   0xc00205da
c0006a52:	e8 b1 34 01 00       	call   c0019f08 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 e5 05 02 c0       	push   0xc00205e5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ec 05 02 c0       	push   0xc00205ec
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 f3 05 02 c0       	push   0xc00205f3
c0006b69:	e8 9a 33 01 00       	call   c0019f08 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 fe 05 02 c0       	push   0xc00205fe
c0006b84:	e8 7f 33 01 00       	call   c0019f08 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 4a 9e 00 00       	call   c0010ade <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 6f 5b 00 00       	call   c000c812 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 0f 06 02 c0       	push   0xc002060f
c0006cd4:	e8 e4 9e 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 28 06 02 c0       	push   0xc0020628
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 1f ea 00 00       	call   c0015720 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 2e ec 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 08 64 01 c0       	push   0xc0016408
c0006d25:	52                   	push   edx
c0006d26:	e8 19 ec 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 24 07 02 c0       	push   0xc0020724
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 80 9e 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 ff a6 00 00       	call   c0011448 <KeInitRand()>
c0006d49:	e8 dd fa 00 00       	call   c001682b <Vm::initialise8086()>
c0006d4e:	e8 2f 48 00 00       	call   c000b582 <Fs::initVFS()>
c0006d53:	c7 04 24 35 06 02 c0 	mov    DWORD PTR [esp],0xc0020635
c0006d5a:	e8 5e 9e 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 24 07 02 c0       	push   0xc0020724
c0006d7e:	e8 3a 9e 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006d83:	e8 d7 44 00 00       	call   c000b25f <KeInitialiseSymlinks()>
c0006d88:	e8 67 a3 00 00       	call   c00110f4 <KeLoadSystemEnv()>
c0006d8d:	e8 c4 a5 00 00       	call   c0011356 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 4f 06 02 c0       	push   0xc002064f
c0006d9c:	68 58 06 02 c0       	push   0xc0020658
c0006da1:	e8 a8 cb 00 00       	call   c001394e <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 be 53 00 00       	call   c000c16c <User::loadClockSettings(int)>
c0006dae:	c7 04 24 48 07 02 c0 	mov    DWORD PTR [esp],0xc0020748
c0006db5:	e8 03 9e 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 44 5a 00 00       	call   c000c810 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 60 06 02 c0 	mov    DWORD PTR [esp],0xc0020660
c0006dd3:	e8 e5 9d 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 71 06 02 c0       	push   0xc0020671
c0006de7:	e8 38 e3 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 6f e5 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 8e ef 00 00       	call   c0015d90 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 8d 06 02 c0       	push   0xc002068d
c0006e17:	50                   	push   eax
c0006e18:	e8 6f 5a 00 00       	call   c000c88c <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 94 07 02 c0       	mov    edx,0xc0020794
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 ff 7f 01 00       	call   c001ef16 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 a1 90 00 00       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 7a 90 00 00       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 58 90 00 00       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 36 90 00 00       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 43 8f 00 00       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 1e 8f 00 00       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 5e 7e 01 00       	call   c001eed0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 ac 7a 01 00       	call   c001eb40 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 34 8f 00 00       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 96 06 02 c0       	push   0xc0020696
c0007104:	e8 88 a1 00 00       	call   c0011291 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 9c 06 02 c0       	push   0xc002069c
c0007140:	e8 4c a1 00 00       	call   c0011291 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 3b 89 00 00       	jmp    c000fac8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 a2 06 02 c0       	push   0xc00206a2
c00071e3:	0f 94 05 a0 30 02 c0 	sete   BYTE PTR ds:0xc00230a0
c00071ea:	e8 ce 99 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 37 84 00 00       	call   c000f63c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 e0 54 00 00       	call   c000c6f4 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 ba 06 02 c0 	mov    DWORD PTR [esp],0xc00206ba
c000722d:	e8 8b 99 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 66 8e 00 00       	call   c00100ae <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 9d 54 00 00       	call   c000c6f4 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 68 07 02 c0       	push   0xc0020768
c0007274:	e8 44 99 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0007279:	e8 f4 07 01 00       	call   c0017a72 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 d4 06 02 c0 	mov    DWORD PTR [esp],0xc00206d4
c0007285:	e8 33 99 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 d6 e7 00 00       	call   c0015a6c <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 ef 06 02 c0       	push   0xc00206ef
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 00 07 02 c0       	push   0xc0020700
c000730d:	e8 7f 9f 00 00       	call   c0011291 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 0d 07 02 c0       	push   0xc002070d
c0007322:	e8 6a 9f 00 00       	call   c0011291 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 17 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020717
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 50 9f 00 00       	jmp    c0011291 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 0b 02 01 00       	call   c001773e <HalSystemIdle()>
c0007533:	e8 9a 7f 01 00       	call   c001f4d2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 d0 eb 01 c0       	push   0xc001ebd0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 e0 eb 01 c0       	push   0xc001ebe0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ea eb 01 c0       	push   0xc001ebea
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 f4 eb 01 c0       	push   0xc001ebf4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 fe eb 01 c0       	push   0xc001ebfe
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 08 ec 01 c0       	push   0xc001ec08
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 12 ec 01 c0       	push   0xc001ec12
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 1c ec 01 c0       	push   0xc001ec1c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 26 ec 01 c0       	push   0xc001ec26
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 2e ec 01 c0       	push   0xc001ec2e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 38 ec 01 c0       	push   0xc001ec38
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 40 ec 01 c0       	push   0xc001ec40
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 48 ec 01 c0       	push   0xc001ec48
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 50 ec 01 c0       	push   0xc001ec50
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 6a ec 01 c0       	push   0xc001ec6a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 72 ec 01 c0       	push   0xc001ec72
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 7c ec 01 c0       	push   0xc001ec7c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 86 ec 01 c0       	push   0xc001ec86
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 90 ec 01 c0       	push   0xc001ec90
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 2a ed 01 c0       	push   0xc001ed2a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 31 ed 01 c0       	push   0xc001ed31
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 1c ed 01 c0       	push   0xc001ed1c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 23 ed 01 c0       	push   0xc001ed23
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 9a ec 01 c0       	push   0xc001ec9a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 a4 ec 01 c0       	push   0xc001eca4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 ae ec 01 c0       	push   0xc001ecae
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 b8 ec 01 c0       	push   0xc001ecb8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 c2 ec 01 c0       	push   0xc001ecc2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 cc ec 01 c0       	push   0xc001eccc
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 d6 ec 01 c0       	push   0xc001ecd6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 e0 ec 01 c0       	push   0xc001ece0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ea ec 01 c0       	push   0xc001ecea
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 f4 ec 01 c0       	push   0xc001ecf4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 fe ec 01 c0       	push   0xc001ecfe
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 08 ed 01 c0       	push   0xc001ed08
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 12 ed 01 c0       	push   0xc001ed12
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 6c ee 01 c0       	push   0xc001ee6c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 76 ee 01 c0       	push   0xc001ee76
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 80 ee 01 c0       	push   0xc001ee80
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 8a ee 01 c0       	push   0xc001ee8a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 94 ee 01 c0       	push   0xc001ee94
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 9e ee 01 c0       	push   0xc001ee9e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 a8 ee 01 c0       	push   0xc001eea8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 b2 ee 01 c0       	push   0xc001eeb2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 26 ec 01 c0       	push   0xc001ec26
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023094
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 94 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023094
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 30 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023094,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 30 02 c0       	mov    eax,ds:0xc0023094
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 b8 07 02 c0       	push   0xc00207b8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 e8 07 02 c0       	push   0xc00207e8
c0007a44:	e8 48 98 00 00       	call   c0011291 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 ed 07 02 c0       	push   0xc00207ed
c0007a5a:	e8 32 98 00 00       	call   c0011291 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 f4 07 02 c0       	push   0xc00207f4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 bb 8f 00 00       	call   c0010b41 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 e4 8e 00 00       	call   c0010a8b <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 ad 78 01 00       	call   c001f46a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 0c 08 02 c0       	push   0xc002080c
c0007c4b:	e8 41 96 00 00       	call   c0011291 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 0c 08 02 c0       	push   0xc002080c
c0007cc5:	e8 c7 95 00 00       	call   c0011291 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023098
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023098
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023098
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 b1 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208b1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 c1 94 00 00       	jmp    c0011291 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 34 08 02 c0       	push   0xc0020834
c0007e54:	e8 38 94 00 00       	call   c0011291 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 c7 08 02 c0       	push   0xc00208c7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 64 08 02 c0       	push   0xc0020864
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 df 08 02 c0       	push   0xc00208df
c000810a:	e8 82 91 00 00       	call   c0011291 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 88 08 02 c0       	push   0xc0020888
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 ed 08 02 c0       	push   0xc00208ed
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 4c 09 02 c0       	mov    edx,0xc002094c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 09 09 02 c0       	push   0xc0020909
c0008331:	e8 5b 8f 00 00       	call   c0011291 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 11 d8 00 00       	call   c0015b90 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 43 6f 01 00       	call   c001f350 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 26 09 02 c0       	push   0xc0020926
c0008422:	e8 6a 8e 00 00       	call   c0011291 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 4c 09 02 c0       	mov    edx,0xc002094c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 94 09 02 c0       	mov    edx,0xc0020994
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 ca 50 00 00       	call   c000d5d6 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 fe 03 01 00       	call   c0018930 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcf40]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcf40]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd088]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0b0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 30 01 01 00       	call   c00187c4 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 8d 01 01 00       	jmp    c00188cc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 60 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020960
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 05 8b 00 00       	jmp    c0011291 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 2a 38 00 00       	jmp    c000c113 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 6e 09 02 c0       	mov    esi,0xc002096e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 a4 fc 00 00       	call   c00188cc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 94 09 02 c0       	mov    edx,0xc0020994
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 7f 09 02 c0       	push   0xc002097f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 85 09 02 c0       	push   0xc0020985
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 4f 63 01 00       	call   c001f538 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 78 0a 02 c0       	mov    edx,0xc0020a78
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 4f 62 01 00       	call   c001f60c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 43 62 01 00       	call   c001f614 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 49 61 01 00       	call   c001f538 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 34 0a 02 c0       	push   0xc0020a34
c0009414:	e8 78 7e 00 00       	call   c0011291 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 78 0a 02 c0       	mov    edx,0xc0020a78
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 4e 61 01 00       	call   c001f60c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 db 61 01 00       	call   c001f6b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 99 5f 01 00       	call   c001f4f6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 30 02 c0       	push   0xc0023090
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 f4 f4 01 c0       	push   0xc001f4f4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023108
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023108
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023104
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023104,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 31 02 c0    	mov    DWORD PTR ds:0xc0023104,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 8c 0a 02 c0       	push   0xc0020a8c
c0009674:	e8 18 7c 00 00       	call   c0011291 <KePanic(char const*)>
c0009679:	8b 2d 04 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023104
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 31 02 c0    	mov    DWORD PTR ds:0xc0023104,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 31 02 c0       	mov    eax,ds:0xc0023104
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 31 02 c0    	mov    DWORD PTR ds:0xc0023104,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 31 02 c0       	mov    ds:0xc0023104,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002310c
c000973e:	8b 0d 14 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023114
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023110
c0009759:	8b 0d 0c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002310c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 20 0d 02 c0       	push   0xc0020d20
c000979e:	e8 ee 7a 00 00       	call   c0011291 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 37 0d 02 c0       	push   0xc0020d37
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 31 02 c0    	mov    DWORD PTR ds:0xc0023110,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 31 02 c0 43 	mov    BYTE PTR ds:0xc0023118,0x43
c000984f:	c7 05 0c 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002310c,0x8
c0009859:	a3 14 31 02 c0       	mov    ds:0xc0023114,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 31 02 c0       	mov    eax,ds:0xc0023110
c0009874:	f7 35 0c 31 02 c0    	div    DWORD PTR ds:0xc002310c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 ac 0a 02 c0       	push   0xc0020aac
c00098af:	e8 dd 79 00 00       	call   c0011291 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 4e 0d 02 c0       	push   0xc0020d4e
c0009981:	e8 0b 79 00 00       	call   c0011291 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 d0 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ad0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 a8 78 00 00       	jmp    c0011291 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 6a 0d 02 c0       	push   0xc0020d6a
c00099f6:	e8 96 78 00 00       	call   c0011291 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 86 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020d86
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 4c 78 00 00       	jmp    c0011291 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 f4 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020af4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 18 0b 02 c0       	push   0xc0020b18
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 80 0b 02 c0       	push   0xc0020b80
c0009d87:	e8 05 75 00 00       	call   c0011291 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 a4 0b 02 c0       	push   0xc0020ba4
c0009e7b:	e8 11 74 00 00       	call   c0011291 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 d0 0b 02 c0       	push   0xc0020bd0
c0009fd9:	e8 b3 72 00 00       	call   c0011291 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 7a 27 00 00       	call   c000c988 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 a0 0d 02 c0       	push   0xc0020da0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023118
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 56 38 00 00       	call   c000db4a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 31 02 c0    	cmp    DWORD PTR ds:0xc002310c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 f4 0b 02 c0       	push   0xc0020bf4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 ae 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020dae
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 d1 0d 02 c0       	push   0xc0020dd1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 bf 0d 02 c0       	push   0xc0020dbf
c000a413:	e8 79 6e 00 00       	call   c0011291 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 24 0c 02 c0       	push   0xc0020c24
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023118
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 12 36 00 00       	call   c000dade <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 31 02 c0    	cmp    DWORD PTR ds:0xc002310c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 e4 0d 02 c0       	push   0xc0020de4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 44 0c 02 c0       	push   0xc0020c44
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 a4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 f9 0d 02 c0       	push   0xc0020df9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 0d 0e 02 c0       	push   0xc0020e0d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 20 0e 02 c0       	push   0xc0020e20
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 2d 0e 02 c0       	push   0xc0020e2d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 46 0e 02 c0       	push   0xc0020e46
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 46 0e 02 c0       	push   0xc0020e46
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 4e 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e4e
c000a7ec:	e8 a0 6a 00 00       	call   c0011291 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 66 0e 02 c0       	push   0xc0020e66
c000a7fe:	e8 8e 6a 00 00       	call   c0011291 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 7c 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf184]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 cc 0f 02 c0       	push   0xc0020fcc
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 e0 0f 02 c0       	push   0xc0020fe0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ea 0f 02 c0       	push   0xc0020fea
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 f4 0f 02 c0       	push   0xc0020ff4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 38 11 02 c0       	push   0xc0021138
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 fe 0f 02 c0       	push   0xc0020ffe
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 58 11 02 c0       	push   0xc0021158
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 13 10 02 c0       	push   0xc0021013
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 2d 10 02 c0       	push   0xc002102d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcee0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 80 11 02 c0       	push   0xc0021180
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 38 11 02 c0       	push   0xc0021138
c000ab78:	e8 14 67 00 00       	call   c0011291 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 c8 11 02 c0       	push   0xc00211c8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 c8 11 02 c0       	push   0xc00211c8
c000aba7:	e8 e5 66 00 00       	call   c0011291 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 38 10 02 c0       	push   0xc0021038
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 38 10 02 c0       	push   0xc0021038
c000abd3:	e8 b9 66 00 00       	call   c0011291 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 55 10 02 c0       	push   0xc0021055
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 55 10 02 c0       	push   0xc0021055
c000abff:	e8 8d 66 00 00       	call   c0011291 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 e8 11 02 c0       	push   0xc00211e8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 e8 11 02 c0       	push   0xc00211e8
c000ac2b:	e8 61 66 00 00       	call   c0011291 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 0c 12 02 c0       	push   0xc002120c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 0c 12 02 c0       	push   0xc002120c
c000ac57:	e8 35 66 00 00       	call   c0011291 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 71 10 02 c0       	push   0xc0021071
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 71 10 02 c0       	push   0xc0021071
c000ac83:	e8 09 66 00 00       	call   c0011291 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 8d 10 02 c0       	push   0xc002108d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 8d 10 02 c0       	push   0xc002108d
c000acaf:	e8 dd 65 00 00       	call   c0011291 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 2c 12 02 c0       	push   0xc002122c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 2c 12 02 c0       	push   0xc002122c
c000acdb:	e8 b1 65 00 00       	call   c0011291 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 50 12 02 c0       	push   0xc0021250
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 50 12 02 c0       	push   0xc0021250
c000ad07:	e8 85 65 00 00       	call   c0011291 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 bd 66 00 00       	call   c00113df <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 6f 12 02 c0       	push   0xc002126f
c000ad57:	e8 35 65 00 00       	call   c0011291 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 78 12 02 c0       	push   0xc0021278
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 26 0a 00 00       	call   c000b7ca <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 96 12 02 c0       	push   0xc0021296
c000adb3:	e8 d9 64 00 00       	call   c0011291 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 cd 0a 00 00       	call   c000b892 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 b0 12 02 c0       	push   0xc00212b0
c000add4:	e8 b8 64 00 00       	call   c0011291 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 ca 12 02 c0       	push   0xc00212ca
c000ae1b:	e8 71 64 00 00       	call   c0011291 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 b7 0a 00 00       	call   c000b8f0 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 e4 12 02 c0       	push   0xc00212e4
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 fe 12 02 c0       	push   0xc00212fe
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 0c 13 02 c0       	push   0xc002130c
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 56 08 00 00       	call   c000b7ca <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 00 1f 02 c0       	push   0xc0021f00
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 fc 08 00 00       	call   c000b892 <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 06 09 02 c0       	push   0xc0020906
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 32 1f 02 c0       	push   0xc0021f32
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 1a 13 02 c0       	push   0xc002131a
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 3b 0b 00 00       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 1a 13 02 c0       	push   0xc002131a
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 14 08 00 00       	call   c000b8f0 <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 12 2a 02 c0       	push   0xc0022a12
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 ef 07 00 00       	call   c000b8f0 <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 1d 13 02 c0 	mov    DWORD PTR [esp],0xc002131d
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b140:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b144:	89 c3                	mov    ebx,eax
c000b146:	50                   	push   eax
c000b147:	e8 7e 06 00 00       	call   c000b7ca <File::File(char const*, Process*)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	85 db                	test   ebx,ebx
c000b151:	b8 01 00 00 00       	mov    eax,0x1
c000b156:	0f 84 fb 00 00 00    	je     c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b15c:	52                   	push   edx
c000b15d:	52                   	push   edx
c000b15e:	6a 12                	push   0x12
c000b160:	53                   	push   ebx
c000b161:	e8 2c 07 00 00       	call   c000b892 <File::open(FileOpenMode)>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	74 0b                	je     c000b178 <KeCreateSymlink(char const*, char const*)+0x56>
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	53                   	push   ebx
c000b173:	e9 d4 00 00 00       	jmp    c000b24c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b178:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17c:	be 20 13 02 c0       	mov    esi,0xc0021320
c000b181:	b9 09 00 00 00       	mov    ecx,0x9
c000b186:	fc                   	cld    
c000b187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b192:	56                   	push   esi
c000b193:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b197:	52                   	push   edx
c000b198:	6a 00                	push   0x0
c000b19a:	6a 08                	push   0x8
c000b19c:	53                   	push   ebx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 20             	add    esp,0x20
c000b1a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a8:	0f 85 90 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 88 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b6:	e8 59 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c8:	56                   	push   esi
c000b1c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1de:	75 5e                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	75 5a                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1ec:	55                   	push   ebp
c000b1ed:	e8 8e 53 ff ff       	call   c0000580 <strlen>
c000b1f2:	31 d2                	xor    edx,edx
c000b1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f7:	55                   	push   ebp
c000b1f8:	52                   	push   edx
c000b1f9:	50                   	push   eax
c000b1fa:	53                   	push   ebx
c000b1fb:	ff d7                	call   edi
c000b1fd:	83 c4 14             	add    esp,0x14
c000b200:	55                   	push   ebp
c000b201:	89 c6                	mov    esi,eax
c000b203:	e8 78 53 ff ff       	call   c0000580 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20f:	75 2d                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b211:	85 f6                	test   esi,esi
c000b213:	75 29                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b215:	50                   	push   eax
c000b216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b222:	e8 30 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22a:	e8 c1 06 00 00       	call   c000b8f0 <File::close()>
c000b22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	31 c0                	xor    eax,eax
c000b23c:	eb 19                	jmp    c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 a9 06 00 00       	call   c000b8f0 <File::close()>
c000b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	b8 01 00 00 00       	mov    eax,0x1
c000b257:	83 c4 2c             	add    esp,0x2c
c000b25a:	5b                   	pop    ebx
c000b25b:	5e                   	pop    esi
c000b25c:	5f                   	pop    edi
c000b25d:	5d                   	pop    ebp
c000b25e:	c3                   	ret    

c000b25f <KeInitialiseSymlinks()>:
c000b25f:	53                   	push   ebx
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	6a 00                	push   0x0
c000b265:	68 52 ae 00 c0       	push   0xc000ae52
c000b26a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b274:	e8 31 58 00 00       	call   c0010aaa <KeRegisterAtexit(void (*)(void*), void*)>
c000b279:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b280:	e8 4e c8 ff ff       	call   c0007ad3 <malloc>
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28e:	68 78 12 02 c0       	push   0xc0021278
c000b293:	50                   	push   eax
c000b294:	89 c3                	mov    ebx,eax
c000b296:	e8 2f 05 00 00       	call   c000b7ca <File::File(char const*, Process*)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	85 db                	test   ebx,ebx
c000b2a0:	75 10                	jne    c000b2b2 <KeInitialiseSymlinks()+0x53>
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	68 29 13 02 c0       	push   0xc0021329
c000b2aa:	e8 e2 5f 00 00       	call   c0011291 <KePanic(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 9b 08 00 00       	call   c000bb56 <File::exists()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	84 c0                	test   al,al
c000b2c0:	75 2d                	jne    c000b2ef <KeInitialiseSymlinks()+0x90>
c000b2c2:	52                   	push   edx
c000b2c3:	52                   	push   edx
c000b2c4:	6a 12                	push   0x12
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 c6 05 00 00       	call   c000b892 <File::open(FileOpenMode)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	74 10                	je     c000b2e3 <KeInitialiseSymlinks()+0x84>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	68 46 13 02 c0       	push   0xc0021346
c000b2db:	e8 b1 5f 00 00       	call   c0011291 <KePanic(char const*)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	53                   	push   ebx
c000b2e7:	e8 04 06 00 00       	call   c000b8f0 <File::close()>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	85 db                	test   ebx,ebx
c000b2f1:	74 0c                	je     c000b2ff <KeInitialiseSymlinks()+0xa0>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	50                   	push   eax
c000b300:	50                   	push   eax
c000b301:	68 63 13 02 c0       	push   0xc0021363
c000b306:	68 71 13 02 c0       	push   0xc0021371
c000b30b:	e8 12 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b310:	83 c4 18             	add    esp,0x18
c000b313:	5b                   	pop    ebx
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::read(unsigned long long, void*, int*)>:
c000b316:	53                   	push   ebx
c000b317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b326:	83 f8 19             	cmp    eax,0x19
c000b329:	77 35                	ja     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b332:	85 c0                	test   eax,eax
c000b334:	74 2a                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b336:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33c:	85 c0                	test   eax,eax
c000b33e:	74 20                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b340:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b344:	74 21                	je     c000b367 <File::read(unsigned long long, void*, int*)+0x51>
c000b346:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35a:	5b                   	pop    ebx
c000b35b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35e:	ff e0                	jmp    eax
c000b360:	b8 0b 00 00 00       	mov    eax,0xb
c000b365:	eb 05                	jmp    c000b36c <File::read(unsigned long long, void*, int*)+0x56>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	5b                   	pop    ebx
c000b36d:	c3                   	ret    

c000b36e <File::write(unsigned long long, void*, int*)>:
c000b36e:	53                   	push   ebx
c000b36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37e:	83 f8 19             	cmp    eax,0x19
c000b381:	77 35                	ja     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b383:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38a:	85 c0                	test   eax,eax
c000b38c:	74 2a                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b394:	85 c0                	test   eax,eax
c000b396:	74 20                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b398:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39c:	74 21                	je     c000b3bf <File::write(unsigned long long, void*, int*)+0x51>
c000b39e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b6:	ff e0                	jmp    eax
c000b3b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bd:	eb 05                	jmp    c000b3c4 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	5b                   	pop    ebx
c000b3c5:	c3                   	ret    

c000b3c6 <Directory::read(unsigned long long, void*, int*)>:
c000b3c6:	53                   	push   ebx
c000b3c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d6:	83 f8 19             	cmp    eax,0x19
c000b3d9:	77 35                	ja     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	74 2a                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 20                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f4:	74 21                	je     c000b417 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40a:	5b                   	pop    ebx
c000b40b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40e:	ff e0                	jmp    eax
c000b410:	b8 0b 00 00 00       	mov    eax,0xb
c000b415:	eb 05                	jmp    c000b41c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b417:	b8 05 00 00 00       	mov    eax,0x5
c000b41c:	5b                   	pop    ebx
c000b41d:	c3                   	ret    

c000b41e <Directory::write(unsigned long long, void*, int*)>:
c000b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b422:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	83 fa 19             	cmp    edx,0x19
c000b431:	77 18                	ja     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b433:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43a:	85 d2                	test   edx,edx
c000b43c:	74 0d                	je     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b445:	19 c0                	sbb    eax,eax
c000b447:	83 e0 0a             	and    eax,0xa
c000b44a:	40                   	inc    eax
c000b44b:	c3                   	ret    

c000b44c <File::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b454:	b8 0a 00 00 00       	mov    eax,0xa
c000b459:	c3                   	ret    

c000b45a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45a:	b8 0a 00 00 00       	mov    eax,0xa
c000b45f:	c3                   	ret    

c000b460 <Filesystem::allocateSwapfile(char const*, int)>:
c000b460:	31 c0                	xor    eax,eax
c000b462:	31 d2                	xor    edx,edx
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::~File()>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	50                   	push   eax
c000b47c:	e8 0b df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	90                   	nop
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::~File()>:
c000b48a:	83 ec 0c             	sub    esp,0xc
c000b48d:	83 ec 0c             	sub    esp,0xc
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 cd ff ff ff       	call   c000b466 <File::~File()>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 ec 08             	sub    esp,0x8
c000b49f:	68 14 01 00 00       	push   0x114
c000b4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a8:	e8 5f f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <Directory::~Directory()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 bd de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Directory::~Directory()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Directory::~Directory()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 14 01 00 00       	push   0x114
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 11 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Filesystem::Filesystem()>:
c000b502:	ba c0 13 02 c0       	mov    edx,0xc00213c0
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	89 10                	mov    DWORD PTR [eax],edx
c000b50d:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51e:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b523:	90                   	nop
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Filesystem::~Filesystem()>:
c000b526:	ba c0 13 02 c0       	mov    edx,0xc00213c0
c000b52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52f:	89 10                	mov    DWORD PTR [eax],edx
c000b531:	90                   	nop
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Filesystem::~Filesystem()>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53b:	e8 e6 ff ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c000b540:	83 c4 04             	add    esp,0x4
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	6a 08                	push   0x8
c000b548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54c:	e8 bb f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	c3                   	ret    

c000b558 <Fs::getcwd(Process*, char*, int)>:
c000b558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55c:	31 c0                	xor    eax,eax
c000b55e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b562:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b565:	7d 15                	jge    c000b57c <Fs::getcwd(Process*, char*, int)+0x24>
c000b567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b572:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b575:	84 c9                	test   cl,cl
c000b577:	74 06                	je     c000b57f <Fs::getcwd(Process*, char*, int)+0x27>
c000b579:	40                   	inc    eax
c000b57a:	eb e2                	jmp    c000b55e <Fs::getcwd(Process*, char*, int)+0x6>
c000b57c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c3                   	ret    

c000b582 <Fs::initVFS()>:
c000b582:	83 ec 18             	sub    esp,0x18
c000b585:	6a 08                	push   0x8
c000b587:	e8 47 c5 ff ff       	call   c0007ad3 <malloc>
c000b58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58f:	e8 70 e1 00 00       	call   c0019704 <FAT::FAT()>
c000b594:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59b:	e8 33 c5 ff ff       	call   c0007ad3 <malloc>
c000b5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a3:	e8 8a f0 00 00       	call   c001a632 <ISO9660::ISO9660()>
c000b5a8:	83 c4 1c             	add    esp,0x1c
c000b5ab:	c3                   	ret    

c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ac:	55                   	push   ebp
c000b5ad:	57                   	push   edi
c000b5ae:	56                   	push   esi
c000b5af:	53                   	push   ebx
c000b5b0:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b6:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5bd:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c4:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5cb:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d6:	68 00 04 00 00       	push   0x400
c000b5db:	6a 00                	push   0x0
c000b5dd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5e1:	57                   	push   edi
c000b5e2:	e8 09 4f ff ff       	call   c00004f0 <memset>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ee:	75 0b                	jne    c000b5fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5f0:	50                   	push   eax
c000b5f1:	50                   	push   eax
c000b5f2:	56                   	push   esi
c000b5f3:	57                   	push   edi
c000b5f4:	e8 57 50 ff ff       	call   c0000650 <strcpy>
c000b5f9:	eb 45                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5fb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fe:	83 f8 2f             	cmp    eax,0x2f
c000b601:	74 05                	je     c000b608 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b603:	83 f8 5c             	cmp    eax,0x5c
c000b606:	75 19                	jne    c000b621 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b608:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b60b:	3c 60                	cmp    al,0x60
c000b60d:	7e 03                	jle    c000b612 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60f:	83 e8 20             	sub    eax,0x20
c000b612:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b616:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	eb 18                	jmp    c000b639 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b621:	50                   	push   eax
c000b622:	50                   	push   eax
c000b623:	55                   	push   ebp
c000b624:	57                   	push   edi
c000b625:	e8 26 50 ff ff       	call   c0000650 <strcpy>
c000b62a:	58                   	pop    eax
c000b62b:	5a                   	pop    edx
c000b62c:	68 83 23 02 c0       	push   0xc0022383
c000b631:	57                   	push   edi
c000b632:	e8 39 52 ff ff       	call   c0000870 <strcat>
c000b637:	59                   	pop    ecx
c000b638:	5d                   	pop    ebp
c000b639:	56                   	push   esi
c000b63a:	57                   	push   edi
c000b63b:	e8 30 52 ff ff       	call   c0000870 <strcat>
c000b640:	83 c4 10             	add    esp,0x10
c000b643:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b647:	3c 60                	cmp    al,0x60
c000b649:	7e 03                	jle    c000b64e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b64b:	83 e8 20             	sub    eax,0x20
c000b64e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b652:	be 03 00 00 00       	mov    esi,0x3
c000b657:	88 03                	mov    BYTE PTR [ebx],al
c000b659:	b8 03 00 00 00       	mov    eax,0x3
c000b65e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b665:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b66b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b674:	89 fa                	mov    edx,edi
c000b676:	0f be ea             	movsx  ebp,dl
c000b679:	85 ed                	test   ebp,ebp
c000b67b:	0f 84 a1 00 00 00    	je     c000b722 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b681:	8d 56 01             	lea    edx,[esi+0x1]
c000b684:	83 fd 2f             	cmp    ebp,0x2f
c000b687:	74 05                	je     c000b68e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b689:	83 fd 5c             	cmp    ebp,0x5c
c000b68c:	75 12                	jne    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b693:	89 c5                	mov    ebp,eax
c000b695:	74 09                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b697:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b69b:	40                   	inc    eax
c000b69c:	89 d6                	mov    esi,edx
c000b69e:	eb cf                	jmp    c000b66f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6a0:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a5:	89 f9                	mov    ecx,edi
c000b6a7:	0f be e9             	movsx  ebp,cl
c000b6aa:	75 61                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6ac:	83 fd 2e             	cmp    ebp,0x2e
c000b6af:	75 5c                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b1:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b6:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6bb:	74 19                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6bd:	83 fd 2e             	cmp    ebp,0x2e
c000b6c0:	74 55                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c2:	89 f2                	mov    edx,esi
c000b6c4:	42                   	inc    edx
c000b6c5:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ca:	83 f9 2f             	cmp    ecx,0x2f
c000b6cd:	74 f5                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cf:	83 f9 5c             	cmp    ecx,0x5c
c000b6d2:	74 f0                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d4:	eb c6                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d6:	83 fd 2e             	cmp    ebp,0x2e
c000b6d9:	74 3c                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6db:	83 f8 03             	cmp    eax,0x3
c000b6de:	74 bc                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6e0:	42                   	inc    edx
c000b6e1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e6:	83 f9 2f             	cmp    ecx,0x2f
c000b6e9:	74 f5                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6eb:	83 f9 5c             	cmp    ecx,0x5c
c000b6ee:	74 f0                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6f0:	48                   	dec    eax
c000b6f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f5:	75 06                	jne    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6fb:	eb f3                	jmp    c000b6f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6fd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b701:	74 07                	je     c000b70a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b703:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b707:	48                   	dec    eax
c000b708:	eb f3                	jmp    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b70a:	40                   	inc    eax
c000b70b:	eb 8f                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70d:	83 fd 2f             	cmp    ebp,0x2f
c000b710:	74 8a                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b712:	83 fd 5c             	cmp    ebp,0x5c
c000b715:	74 85                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b717:	89 f9                	mov    ecx,edi
c000b719:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b71c:	40                   	inc    eax
c000b71d:	e9 7a ff ff ff       	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b722:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	53                   	push   ebx
c000b72a:	e8 51 4e ff ff       	call   c0000580 <strlen>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b737:	74 1c                	je     c000b755 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	53                   	push   ebx
c000b73d:	e8 3e 4e ff ff       	call   c0000580 <strlen>
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b74a:	74 09                	je     c000b755 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b74c:	31 ff                	xor    edi,edi
c000b74e:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b753:	eb 4c                	jmp    c000b7a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	53                   	push   ebx
c000b759:	e8 22 4e ff ff       	call   c0000580 <strlen>
c000b75e:	83 c4 10             	add    esp,0x10
c000b761:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b766:	74 e4                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b768:	83 ec 0c             	sub    esp,0xc
c000b76b:	53                   	push   ebx
c000b76c:	e8 0f 4e ff ff       	call   c0000580 <strlen>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b779:	eb ab                	jmp    c000b726 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b77b:	50                   	push   eax
c000b77c:	50                   	push   eax
c000b77d:	53                   	push   ebx
c000b77e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b782:	55                   	push   ebp
c000b783:	e8 c8 4e ff ff       	call   c0000650 <strcpy>
c000b788:	5a                   	pop    edx
c000b789:	59                   	pop    ecx
c000b78a:	53                   	push   ebx
c000b78b:	55                   	push   ebp
c000b78c:	e8 7c f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b791:	83 c4 10             	add    esp,0x10
c000b794:	48                   	dec    eax
c000b795:	75 27                	jne    c000b7be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b797:	8d 47 01             	lea    eax,[edi+0x1]
c000b79a:	83 ff 14             	cmp    edi,0x14
c000b79d:	74 08                	je     c000b7a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000b79f:	89 c7                	mov    edi,eax
c000b7a1:	85 f6                	test   esi,esi
c000b7a3:	75 d6                	jne    c000b77b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b7a5:	eb 17                	jmp    c000b7be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b7a7:	83 ec 0c             	sub    esp,0xc
c000b7aa:	bf 15 00 00 00       	mov    edi,0x15
c000b7af:	68 8f 13 02 c0       	push   0xc002138f
c000b7b4:	e8 d8 5a 00 00       	call   c0011291 <KePanic(char const*)>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	eb e3                	jmp    c000b7a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b7be:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b7c4:	5b                   	pop    ebx
c000b7c5:	5e                   	pop    esi
c000b7c6:	5f                   	pop    edi
c000b7c7:	5d                   	pop    ebp
c000b7c8:	c3                   	ret    
c000b7c9:	90                   	nop

c000b7ca <File::File(char const*, Process*)>:
c000b7ca:	83 ec 0c             	sub    esp,0xc
c000b7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d1:	83 ec 08             	sub    esp,0x8
c000b7d4:	6a 00                	push   0x0
c000b7d6:	50                   	push   eax
c000b7d7:	e8 ca d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b7dc:	83 c4 10             	add    esp,0x10
c000b7df:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000b7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7e8:	89 10                	mov    DWORD PTR [eax],edx
c000b7ea:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b7ef:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b7f3:	0f 95 c0             	setne  al
c000b7f6:	0f b6 c0             	movzx  eax,al
c000b7f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b7fd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b807:	83 c2 0d             	add    edx,0xd
c000b80a:	50                   	push   eax
c000b80b:	51                   	push   ecx
c000b80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b810:	52                   	push   edx
c000b811:	e8 96 fd ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b81d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b820:	83 e8 41             	sub    eax,0x41
c000b823:	88 c2                	mov    dl,al
c000b825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b829:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b833:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b841:	0f b6 c0             	movzx  eax,al
c000b844:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b84b:	85 c0                	test   eax,eax
c000b84d:	74 3e                	je     c000b88d <File::File(char const*, Process*)+0xc3>
c000b84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b853:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b859:	0f b6 c0             	movzx  eax,al
c000b85c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b863:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b869:	85 c0                	test   eax,eax
c000b86b:	75 20                	jne    c000b88d <File::File(char const*, Process*)+0xc3>
c000b86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b871:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b877:	0f b6 c0             	movzx  eax,al
c000b87a:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b881:	83 ec 0c             	sub    esp,0xc
c000b884:	50                   	push   eax
c000b885:	e8 92 21 00 00       	call   c000da1c <LogicalDisk::mount()>
c000b88a:	83 c4 10             	add    esp,0x10
c000b88d:	90                   	nop
c000b88e:	83 c4 0c             	add    esp,0xc
c000b891:	c3                   	ret    

c000b892 <File::open(FileOpenMode)>:
c000b892:	53                   	push   ebx
c000b893:	b8 0b 00 00 00       	mov    eax,0xb
c000b898:	83 ec 08             	sub    esp,0x8
c000b89b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b89f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8a6:	83 fa 19             	cmp    edx,0x19
c000b8a9:	77 40                	ja     c000b8eb <File::open(FileOpenMode)+0x59>
c000b8ab:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8b2:	85 d2                	test   edx,edx
c000b8b4:	74 35                	je     c000b8eb <File::open(FileOpenMode)+0x59>
c000b8b6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8bc:	85 d2                	test   edx,edx
c000b8be:	74 2b                	je     c000b8eb <File::open(FileOpenMode)+0x59>
c000b8c0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8c4:	b8 06 00 00 00       	mov    eax,0x6
c000b8c9:	75 20                	jne    c000b8eb <File::open(FileOpenMode)+0x59>
c000b8cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8cd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	51                   	push   ecx
c000b8d8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b8db:	51                   	push   ecx
c000b8dc:	52                   	push   edx
c000b8dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	85 c0                	test   eax,eax
c000b8e5:	75 04                	jne    c000b8eb <File::open(FileOpenMode)+0x59>
c000b8e7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b8eb:	83 c4 08             	add    esp,0x8
c000b8ee:	5b                   	pop    ebx
c000b8ef:	c3                   	ret    

c000b8f0 <File::close()>:
c000b8f0:	53                   	push   ebx
c000b8f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f6:	83 ec 08             	sub    esp,0x8
c000b8f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b904:	83 f9 19             	cmp    ecx,0x19
c000b907:	77 41                	ja     c000b94a <File::close()+0x5a>
c000b909:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b910:	85 db                	test   ebx,ebx
c000b912:	74 36                	je     c000b94a <File::close()+0x5a>
c000b914:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b91b:	74 2d                	je     c000b94a <File::close()+0x5a>
c000b91d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b921:	b8 05 00 00 00       	mov    eax,0x5
c000b926:	74 22                	je     c000b94a <File::close()+0x5a>
c000b928:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b92c:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b933:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b939:	53                   	push   ebx
c000b93a:	53                   	push   ebx
c000b93b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b93d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b943:	50                   	push   eax
c000b944:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	83 c4 08             	add    esp,0x8
c000b94d:	5b                   	pop    ebx
c000b94e:	c3                   	ret    
c000b94f:	90                   	nop

c000b950 <File::seek(unsigned long long)>:
c000b950:	56                   	push   esi
c000b951:	b8 0b 00 00 00       	mov    eax,0xb
c000b956:	53                   	push   ebx
c000b957:	51                   	push   ecx
c000b958:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b95c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b960:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b964:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b96b:	83 fa 19             	cmp    edx,0x19
c000b96e:	77 31                	ja     c000b9a1 <File::seek(unsigned long long)+0x51>
c000b970:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b977:	85 d2                	test   edx,edx
c000b979:	74 26                	je     c000b9a1 <File::seek(unsigned long long)+0x51>
c000b97b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b981:	85 d2                	test   edx,edx
c000b983:	74 1c                	je     c000b9a1 <File::seek(unsigned long long)+0x51>
c000b985:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b989:	b8 05 00 00 00       	mov    eax,0x5
c000b98e:	74 11                	je     c000b9a1 <File::seek(unsigned long long)+0x51>
c000b990:	8b 02                	mov    eax,DWORD PTR [edx]
c000b992:	53                   	push   ebx
c000b993:	51                   	push   ecx
c000b994:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b99a:	52                   	push   edx
c000b99b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	5a                   	pop    edx
c000b9a2:	5b                   	pop    ebx
c000b9a3:	5e                   	pop    esi
c000b9a4:	c3                   	ret    
c000b9a5:	90                   	nop

c000b9a6 <File::truncate(unsigned long long)>:
c000b9a6:	56                   	push   esi
c000b9a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b9ac:	53                   	push   ebx
c000b9ad:	51                   	push   ecx
c000b9ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9ba:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9c1:	83 fa 19             	cmp    edx,0x19
c000b9c4:	77 31                	ja     c000b9f7 <File::truncate(unsigned long long)+0x51>
c000b9c6:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9cd:	85 d2                	test   edx,edx
c000b9cf:	74 26                	je     c000b9f7 <File::truncate(unsigned long long)+0x51>
c000b9d1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9d7:	85 d2                	test   edx,edx
c000b9d9:	74 1c                	je     c000b9f7 <File::truncate(unsigned long long)+0x51>
c000b9db:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9df:	b8 05 00 00 00       	mov    eax,0x5
c000b9e4:	74 11                	je     c000b9f7 <File::truncate(unsigned long long)+0x51>
c000b9e6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9e8:	53                   	push   ebx
c000b9e9:	51                   	push   ecx
c000b9ea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9f0:	52                   	push   edx
c000b9f1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	5a                   	pop    edx
c000b9f8:	5b                   	pop    ebx
c000b9f9:	5e                   	pop    esi
c000b9fa:	c3                   	ret    
c000b9fb:	90                   	nop

c000b9fc <File::tell(unsigned long long*)>:
c000b9fc:	83 ec 0c             	sub    esp,0xc
c000b9ff:	b8 0b 00 00 00       	mov    eax,0xb
c000ba04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba08:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba0f:	83 fa 19             	cmp    edx,0x19
c000ba12:	77 34                	ja     c000ba48 <File::tell(unsigned long long*)+0x4c>
c000ba14:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba1b:	85 d2                	test   edx,edx
c000ba1d:	74 29                	je     c000ba48 <File::tell(unsigned long long*)+0x4c>
c000ba1f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba25:	85 d2                	test   edx,edx
c000ba27:	74 1f                	je     c000ba48 <File::tell(unsigned long long*)+0x4c>
c000ba29:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba2d:	b8 05 00 00 00       	mov    eax,0x5
c000ba32:	74 14                	je     c000ba48 <File::tell(unsigned long long*)+0x4c>
c000ba34:	50                   	push   eax
c000ba35:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba3b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba41:	52                   	push   edx
c000ba42:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba45:	83 c4 10             	add    esp,0x10
c000ba48:	83 c4 0c             	add    esp,0xc
c000ba4b:	c3                   	ret    

c000ba4c <File::rewind()>:
c000ba4c:	83 ec 10             	sub    esp,0x10
c000ba4f:	6a 00                	push   0x0
c000ba51:	6a 00                	push   0x0
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	e8 f4 fe ff ff       	call   c000b950 <File::seek(unsigned long long)>
c000ba5c:	83 c4 1c             	add    esp,0x1c
c000ba5f:	c3                   	ret    

c000ba60 <File::unlink()>:
c000ba60:	83 ec 0c             	sub    esp,0xc
c000ba63:	b8 0b 00 00 00       	mov    eax,0xb
c000ba68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba73:	83 f9 19             	cmp    ecx,0x19
c000ba76:	77 2f                	ja     c000baa7 <File::unlink()+0x47>
c000ba78:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba7f:	85 c9                	test   ecx,ecx
c000ba81:	74 24                	je     c000baa7 <File::unlink()+0x47>
c000ba83:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba89:	85 c9                	test   ecx,ecx
c000ba8b:	74 1a                	je     c000baa7 <File::unlink()+0x47>
c000ba8d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba91:	b8 06 00 00 00       	mov    eax,0x6
c000ba96:	75 0f                	jne    c000baa7 <File::unlink()+0x47>
c000ba98:	50                   	push   eax
c000ba99:	83 c2 0d             	add    edx,0xd
c000ba9c:	50                   	push   eax
c000ba9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba9f:	52                   	push   edx
c000baa0:	51                   	push   ecx
c000baa1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000baa4:	83 c4 10             	add    esp,0x10
c000baa7:	83 c4 0c             	add    esp,0xc
c000baaa:	c3                   	ret    
c000baab:	90                   	nop

c000baac <File::rename(char const*)>:
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	b8 0b 00 00 00       	mov    eax,0xb
c000bab4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000babf:	83 f9 19             	cmp    ecx,0x19
c000bac2:	77 32                	ja     c000baf6 <File::rename(char const*)+0x4a>
c000bac4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bacb:	85 c9                	test   ecx,ecx
c000bacd:	74 27                	je     c000baf6 <File::rename(char const*)+0x4a>
c000bacf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bad5:	85 c9                	test   ecx,ecx
c000bad7:	74 1d                	je     c000baf6 <File::rename(char const*)+0x4a>
c000bad9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000badd:	b8 06 00 00 00       	mov    eax,0x6
c000bae2:	75 12                	jne    c000baf6 <File::rename(char const*)+0x4a>
c000bae4:	50                   	push   eax
c000bae5:	83 c2 0d             	add    edx,0xd
c000bae8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baee:	52                   	push   edx
c000baef:	51                   	push   ecx
c000baf0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	83 c4 0c             	add    esp,0xc
c000baf9:	c3                   	ret    

c000bafa <File::chfatattr(unsigned char, unsigned char)>:
c000bafa:	57                   	push   edi
c000bafb:	b8 0b 00 00 00       	mov    eax,0xb
c000bb00:	56                   	push   esi
c000bb01:	53                   	push   ebx
c000bb02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb15:	83 f9 19             	cmp    ecx,0x19
c000bb18:	77 37                	ja     c000bb51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb1a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb21:	85 c9                	test   ecx,ecx
c000bb23:	74 2c                	je     c000bb51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb25:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb2b:	85 c9                	test   ecx,ecx
c000bb2d:	74 22                	je     c000bb51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb33:	b8 06 00 00 00       	mov    eax,0x6
c000bb38:	75 17                	jne    c000bb51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb3a:	89 f0                	mov    eax,esi
c000bb3c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb3e:	0f b6 db             	movzx  ebx,bl
c000bb41:	0f b6 f0             	movzx  esi,al
c000bb44:	83 c2 0d             	add    edx,0xd
c000bb47:	56                   	push   esi
c000bb48:	53                   	push   ebx
c000bb49:	52                   	push   edx
c000bb4a:	51                   	push   ecx
c000bb4b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	5b                   	pop    ebx
c000bb52:	5e                   	pop    esi
c000bb53:	5f                   	pop    edi
c000bb54:	c3                   	ret    
c000bb55:	90                   	nop

c000bb56 <File::exists()>:
c000bb56:	83 ec 0c             	sub    esp,0xc
c000bb59:	31 c0                	xor    eax,eax
c000bb5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb5f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb66:	83 f9 19             	cmp    ecx,0x19
c000bb69:	77 24                	ja     c000bb8f <File::exists()+0x39>
c000bb6b:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb72:	85 c9                	test   ecx,ecx
c000bb74:	74 19                	je     c000bb8f <File::exists()+0x39>
c000bb76:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb7c:	85 c9                	test   ecx,ecx
c000bb7e:	74 0f                	je     c000bb8f <File::exists()+0x39>
c000bb80:	50                   	push   eax
c000bb81:	83 c2 0d             	add    edx,0xd
c000bb84:	50                   	push   eax
c000bb85:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb87:	52                   	push   edx
c000bb88:	51                   	push   ecx
c000bb89:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bb8c:	83 c4 10             	add    esp,0x10
c000bb8f:	83 c4 0c             	add    esp,0xc
c000bb92:	c3                   	ret    
c000bb93:	90                   	nop

c000bb94 <File::stat(unsigned long long*, bool*)>:
c000bb94:	56                   	push   esi
c000bb95:	53                   	push   ebx
c000bb96:	50                   	push   eax
c000bb97:	b8 0b 00 00 00       	mov    eax,0xb
c000bb9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bba0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbaf:	83 f9 19             	cmp    ecx,0x19
c000bbb2:	77 3d                	ja     c000bbf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbb4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbbb:	85 c9                	test   ecx,ecx
c000bbbd:	74 32                	je     c000bbf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbbf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbc5:	85 c9                	test   ecx,ecx
c000bbc7:	74 28                	je     c000bbf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbc9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbcd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbcf:	74 13                	je     c000bbe4 <File::stat(unsigned long long*, bool*)+0x50>
c000bbd1:	83 ec 04             	sub    esp,0x4
c000bbd4:	56                   	push   esi
c000bbd5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbdb:	51                   	push   ecx
c000bbdc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bbdf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bbe2:	eb 0a                	jmp    c000bbee <File::stat(unsigned long long*, bool*)+0x5a>
c000bbe4:	53                   	push   ebx
c000bbe5:	83 c2 0d             	add    edx,0xd
c000bbe8:	56                   	push   esi
c000bbe9:	52                   	push   edx
c000bbea:	51                   	push   ecx
c000bbeb:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	5a                   	pop    edx
c000bbf2:	5b                   	pop    ebx
c000bbf3:	5e                   	pop    esi
c000bbf4:	c3                   	ret    

c000bbf5 <Fs::setcwd(Process*, char*)>:
c000bbf5:	55                   	push   ebp
c000bbf6:	57                   	push   edi
c000bbf7:	56                   	push   esi
c000bbf8:	53                   	push   ebx
c000bbf9:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bbff:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc06:	6a 00                	push   0x0
c000bc08:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc0e:	57                   	push   edi
c000bc0f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc16:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc1a:	56                   	push   esi
c000bc1b:	e8 8c f9 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc20:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc23:	e8 58 49 ff ff       	call   c0000580 <strlen>
c000bc28:	83 c4 10             	add    esp,0x10
c000bc2b:	83 f8 02             	cmp    eax,0x2
c000bc2e:	77 15                	ja     c000bc45 <Fs::setcwd(Process*, char*)+0x50>
c000bc30:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc35:	83 eb 41             	sub    ebx,0x41
c000bc38:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc3f:	85 c0                	test   eax,eax
c000bc41:	75 1c                	jne    c000bc5f <Fs::setcwd(Process*, char*)+0x6a>
c000bc43:	eb 2f                	jmp    c000bc74 <Fs::setcwd(Process*, char*)+0x7f>
c000bc45:	83 ec 0c             	sub    esp,0xc
c000bc48:	56                   	push   esi
c000bc49:	e8 32 49 ff ff       	call   c0000580 <strlen>
c000bc4e:	83 c4 10             	add    esp,0x10
c000bc51:	83 f8 03             	cmp    eax,0x3
c000bc54:	75 57                	jne    c000bcad <Fs::setcwd(Process*, char*)+0xb8>
c000bc56:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc5b:	75 50                	jne    c000bcad <Fs::setcwd(Process*, char*)+0xb8>
c000bc5d:	eb d1                	jmp    c000bc30 <Fs::setcwd(Process*, char*)+0x3b>
c000bc5f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc66:	75 0c                	jne    c000bc74 <Fs::setcwd(Process*, char*)+0x7f>
c000bc68:	83 ec 0c             	sub    esp,0xc
c000bc6b:	50                   	push   eax
c000bc6c:	e8 ab 1d 00 00       	call   c000da1c <LogicalDisk::mount()>
c000bc71:	83 c4 10             	add    esp,0x10
c000bc74:	83 fb 19             	cmp    ebx,0x19
c000bc77:	b8 03 00 00 00       	mov    eax,0x3
c000bc7c:	0f 87 c6 00 00 00    	ja     c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bc82:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bc89:	b8 05 00 00 00       	mov    eax,0x5
c000bc8e:	85 d2                	test   edx,edx
c000bc90:	0f 84 b2 00 00 00    	je     c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bc96:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bc9d:	b8 06 00 00 00       	mov    eax,0x6
c000bca2:	0f 85 92 00 00 00    	jne    c000bd3a <Fs::setcwd(Process*, char*)+0x145>
c000bca8:	e9 9b 00 00 00       	jmp    c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bcad:	83 ec 0c             	sub    esp,0xc
c000bcb0:	68 14 01 00 00       	push   0x114
c000bcb5:	e8 19 be ff ff       	call   c0007ad3 <malloc>
c000bcba:	83 c4 0c             	add    esp,0xc
c000bcbd:	55                   	push   ebp
c000bcbe:	56                   	push   esi
c000bcbf:	50                   	push   eax
c000bcc0:	89 c3                	mov    ebx,eax
c000bcc2:	e8 03 fb ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c000bcc7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bccc:	83 c4 0c             	add    esp,0xc
c000bccf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bcd3:	50                   	push   eax
c000bcd4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bcd8:	50                   	push   eax
c000bcd9:	53                   	push   ebx
c000bcda:	e8 b5 fe ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c000bcdf:	83 c4 10             	add    esp,0x10
c000bce2:	83 f8 02             	cmp    eax,0x2
c000bce5:	74 27                	je     c000bd0e <Fs::setcwd(Process*, char*)+0x119>
c000bce7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bcec:	75 1c                	jne    c000bd0a <Fs::setcwd(Process*, char*)+0x115>
c000bcee:	85 db                	test   ebx,ebx
c000bcf0:	b8 02 00 00 00       	mov    eax,0x2
c000bcf5:	74 51                	je     c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bcf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcf9:	83 ec 0c             	sub    esp,0xc
c000bcfc:	53                   	push   ebx
c000bcfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd00:	83 c4 10             	add    esp,0x10
c000bd03:	b8 02 00 00 00       	mov    eax,0x2
c000bd08:	eb 3e                	jmp    c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	74 1c                	je     c000bd2a <Fs::setcwd(Process*, char*)+0x135>
c000bd0e:	85 db                	test   ebx,ebx
c000bd10:	b8 01 00 00 00       	mov    eax,0x1
c000bd15:	74 31                	je     c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bd17:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd19:	83 ec 0c             	sub    esp,0xc
c000bd1c:	53                   	push   ebx
c000bd1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	b8 01 00 00 00       	mov    eax,0x1
c000bd28:	eb 1e                	jmp    c000bd48 <Fs::setcwd(Process*, char*)+0x153>
c000bd2a:	85 db                	test   ebx,ebx
c000bd2c:	74 0c                	je     c000bd3a <Fs::setcwd(Process*, char*)+0x145>
c000bd2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd30:	83 ec 0c             	sub    esp,0xc
c000bd33:	53                   	push   ebx
c000bd34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd37:	83 c4 10             	add    esp,0x10
c000bd3a:	50                   	push   eax
c000bd3b:	50                   	push   eax
c000bd3c:	56                   	push   esi
c000bd3d:	57                   	push   edi
c000bd3e:	e8 0d 49 ff ff       	call   c0000650 <strcpy>
c000bd43:	83 c4 10             	add    esp,0x10
c000bd46:	31 c0                	xor    eax,eax
c000bd48:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd4e:	5b                   	pop    ebx
c000bd4f:	5e                   	pop    esi
c000bd50:	5f                   	pop    edi
c000bd51:	5d                   	pop    ebp
c000bd52:	c3                   	ret    
c000bd53:	90                   	nop

c000bd54 <Directory::Directory(char const*, Process*)>:
c000bd54:	83 ec 0c             	sub    esp,0xc
c000bd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5b:	83 ec 08             	sub    esp,0x8
c000bd5e:	6a 00                	push   0x0
c000bd60:	50                   	push   eax
c000bd61:	e8 40 d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bd66:	83 c4 10             	add    esp,0x10
c000bd69:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	89 10                	mov    DWORD PTR [eax],edx
c000bd74:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bd79:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd7d:	0f 95 c0             	setne  al
c000bd80:	0f b6 c0             	movzx  eax,al
c000bd83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd87:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bd8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd91:	83 c2 0d             	add    edx,0xd
c000bd94:	50                   	push   eax
c000bd95:	51                   	push   ecx
c000bd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9a:	52                   	push   edx
c000bd9b:	e8 0c f8 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bdaa:	83 e8 41             	sub    eax,0x41
c000bdad:	88 c2                	mov    dl,al
c000bdaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bdb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdcb:	0f b6 c0             	movzx  eax,al
c000bdce:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdd5:	85 c0                	test   eax,eax
c000bdd7:	74 3e                	je     c000be17 <Directory::Directory(char const*, Process*)+0xc3>
c000bdd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bde3:	0f b6 c0             	movzx  eax,al
c000bde6:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bded:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	75 20                	jne    c000be17 <Directory::Directory(char const*, Process*)+0xc3>
c000bdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdfb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be01:	0f b6 c0             	movzx  eax,al
c000be04:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be0b:	83 ec 0c             	sub    esp,0xc
c000be0e:	50                   	push   eax
c000be0f:	e8 08 1c 00 00       	call   c000da1c <LogicalDisk::mount()>
c000be14:	83 c4 10             	add    esp,0x10
c000be17:	90                   	nop
c000be18:	83 c4 0c             	add    esp,0xc
c000be1b:	c3                   	ret    

c000be1c <Directory::open()>:
c000be1c:	53                   	push   ebx
c000be1d:	b8 0b 00 00 00       	mov    eax,0xb
c000be22:	83 ec 08             	sub    esp,0x8
c000be25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be29:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be30:	83 fa 19             	cmp    edx,0x19
c000be33:	77 3d                	ja     c000be72 <Directory::open()+0x56>
c000be35:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be3c:	85 d2                	test   edx,edx
c000be3e:	74 32                	je     c000be72 <Directory::open()+0x56>
c000be40:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be46:	85 d2                	test   edx,edx
c000be48:	74 28                	je     c000be72 <Directory::open()+0x56>
c000be4a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be4e:	b8 06 00 00 00       	mov    eax,0x6
c000be53:	75 1d                	jne    c000be72 <Directory::open()+0x56>
c000be55:	50                   	push   eax
c000be56:	8b 02                	mov    eax,DWORD PTR [edx]
c000be58:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be5e:	51                   	push   ecx
c000be5f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be62:	51                   	push   ecx
c000be63:	52                   	push   edx
c000be64:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	75 04                	jne    c000be72 <Directory::open()+0x56>
c000be6e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000be72:	83 c4 08             	add    esp,0x8
c000be75:	5b                   	pop    ebx
c000be76:	c3                   	ret    
c000be77:	90                   	nop

c000be78 <Directory::close()>:
c000be78:	53                   	push   ebx
c000be79:	b8 0b 00 00 00       	mov    eax,0xb
c000be7e:	83 ec 08             	sub    esp,0x8
c000be81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be8c:	83 f9 19             	cmp    ecx,0x19
c000be8f:	77 41                	ja     c000bed2 <Directory::close()+0x5a>
c000be91:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000be98:	85 db                	test   ebx,ebx
c000be9a:	74 36                	je     c000bed2 <Directory::close()+0x5a>
c000be9c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bea3:	74 2d                	je     c000bed2 <Directory::close()+0x5a>
c000bea5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bea9:	b8 05 00 00 00       	mov    eax,0x5
c000beae:	74 22                	je     c000bed2 <Directory::close()+0x5a>
c000beb0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000beb4:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bebb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bec1:	53                   	push   ebx
c000bec2:	53                   	push   ebx
c000bec3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bec5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000becb:	50                   	push   eax
c000becc:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000becf:	83 c4 10             	add    esp,0x10
c000bed2:	83 c4 08             	add    esp,0x8
c000bed5:	5b                   	pop    ebx
c000bed6:	c3                   	ret    
c000bed7:	90                   	nop

c000bed8 <Directory::unlink()>:
c000bed8:	83 ec 0c             	sub    esp,0xc
c000bedb:	b8 0b 00 00 00       	mov    eax,0xb
c000bee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bee4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beeb:	83 f9 19             	cmp    ecx,0x19
c000beee:	77 2f                	ja     c000bf1f <Directory::unlink()+0x47>
c000bef0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bef7:	85 c9                	test   ecx,ecx
c000bef9:	74 24                	je     c000bf1f <Directory::unlink()+0x47>
c000befb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf01:	85 c9                	test   ecx,ecx
c000bf03:	74 1a                	je     c000bf1f <Directory::unlink()+0x47>
c000bf05:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf09:	b8 06 00 00 00       	mov    eax,0x6
c000bf0e:	75 0f                	jne    c000bf1f <Directory::unlink()+0x47>
c000bf10:	50                   	push   eax
c000bf11:	83 c2 0d             	add    edx,0xd
c000bf14:	50                   	push   eax
c000bf15:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf17:	52                   	push   edx
c000bf18:	51                   	push   ecx
c000bf19:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	83 c4 0c             	add    esp,0xc
c000bf22:	c3                   	ret    
c000bf23:	90                   	nop

c000bf24 <Directory::rename(char const*)>:
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	b8 0b 00 00 00       	mov    eax,0xb
c000bf2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf37:	83 f9 19             	cmp    ecx,0x19
c000bf3a:	77 32                	ja     c000bf6e <Directory::rename(char const*)+0x4a>
c000bf3c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf43:	85 c9                	test   ecx,ecx
c000bf45:	74 27                	je     c000bf6e <Directory::rename(char const*)+0x4a>
c000bf47:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf4d:	85 c9                	test   ecx,ecx
c000bf4f:	74 1d                	je     c000bf6e <Directory::rename(char const*)+0x4a>
c000bf51:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf55:	b8 06 00 00 00       	mov    eax,0x6
c000bf5a:	75 12                	jne    c000bf6e <Directory::rename(char const*)+0x4a>
c000bf5c:	50                   	push   eax
c000bf5d:	83 c2 0d             	add    edx,0xd
c000bf60:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf66:	52                   	push   edx
c000bf67:	51                   	push   ecx
c000bf68:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf6b:	83 c4 10             	add    esp,0x10
c000bf6e:	83 c4 0c             	add    esp,0xc
c000bf71:	c3                   	ret    

c000bf72 <Directory::exists()>:
c000bf72:	83 ec 0c             	sub    esp,0xc
c000bf75:	31 c0                	xor    eax,eax
c000bf77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf7b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf82:	83 f9 19             	cmp    ecx,0x19
c000bf85:	77 24                	ja     c000bfab <Directory::exists()+0x39>
c000bf87:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf8e:	85 c9                	test   ecx,ecx
c000bf90:	74 19                	je     c000bfab <Directory::exists()+0x39>
c000bf92:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf98:	85 c9                	test   ecx,ecx
c000bf9a:	74 0f                	je     c000bfab <Directory::exists()+0x39>
c000bf9c:	50                   	push   eax
c000bf9d:	83 c2 0d             	add    edx,0xd
c000bfa0:	50                   	push   eax
c000bfa1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfa3:	52                   	push   edx
c000bfa4:	51                   	push   ecx
c000bfa5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfa8:	83 c4 10             	add    esp,0x10
c000bfab:	83 c4 0c             	add    esp,0xc
c000bfae:	c3                   	ret    
c000bfaf:	90                   	nop

c000bfb0 <Directory::read(dirent*)>:
c000bfb0:	83 ec 1c             	sub    esp,0x1c
c000bfb3:	b8 0b 00 00 00       	mov    eax,0xb
c000bfb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfc3:	83 f9 19             	cmp    ecx,0x19
c000bfc6:	77 30                	ja     c000bff8 <Directory::read(dirent*)+0x48>
c000bfc8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfcf:	85 c9                	test   ecx,ecx
c000bfd1:	74 25                	je     c000bff8 <Directory::read(dirent*)+0x48>
c000bfd3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bfda:	74 1c                	je     c000bff8 <Directory::read(dirent*)+0x48>
c000bfdc:	83 ec 0c             	sub    esp,0xc
c000bfdf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bfe1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bfe5:	51                   	push   ecx
c000bfe6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfea:	6a 00                	push   0x0
c000bfec:	68 10 01 00 00       	push   0x110
c000bff1:	52                   	push   edx
c000bff2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bff5:	83 c4 20             	add    esp,0x20
c000bff8:	83 c4 1c             	add    esp,0x1c
c000bffb:	c3                   	ret    

c000bffc <Directory::create()>:
c000bffc:	83 ec 0c             	sub    esp,0xc
c000bfff:	b8 0b 00 00 00       	mov    eax,0xb
c000c004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c008:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c00f:	83 f9 19             	cmp    ecx,0x19
c000c012:	77 2f                	ja     c000c043 <Directory::create()+0x47>
c000c014:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c01b:	85 c9                	test   ecx,ecx
c000c01d:	74 24                	je     c000c043 <Directory::create()+0x47>
c000c01f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c025:	85 c9                	test   ecx,ecx
c000c027:	74 1a                	je     c000c043 <Directory::create()+0x47>
c000c029:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c02d:	b8 06 00 00 00       	mov    eax,0x6
c000c032:	75 0f                	jne    c000c043 <Directory::create()+0x47>
c000c034:	50                   	push   eax
c000c035:	83 c2 0d             	add    edx,0xd
c000c038:	50                   	push   eax
c000c039:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c03b:	52                   	push   edx
c000c03c:	51                   	push   ecx
c000c03d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	83 c4 0c             	add    esp,0xc
c000c046:	c3                   	ret    
c000c047:	90                   	nop

c000c048 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c048:	b8 0a 00 00 00       	mov    eax,0xa
c000c04d:	c3                   	ret    
c000c04e:	66 90                	xchg   ax,ax

c000c050 <Bus::Bus(char const*)>:
c000c050:	83 ec 0c             	sub    esp,0xc
c000c053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c057:	83 ec 08             	sub    esp,0x8
c000c05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c05e:	50                   	push   eax
c000c05f:	e8 28 08 00 00       	call   c000c88c <Device::Device(char const*)>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	ba 64 14 02 c0       	mov    edx,0xc0021464
c000c06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c070:	89 10                	mov    DWORD PTR [eax],edx
c000c072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c076:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c080:	90                   	nop
c000c081:	83 c4 0c             	add    esp,0xc
c000c084:	c3                   	ret    
c000c085:	90                   	nop
c000c086:	66 90                	xchg   ax,ax

c000c088 <Bus::~Bus()>:
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	ba 64 14 02 c0       	mov    edx,0xc0021464
c000c090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c094:	89 10                	mov    DWORD PTR [eax],edx
c000c096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	50                   	push   eax
c000c09e:	e8 53 05 00 00       	call   c000c5f6 <Device::~Device()>
c000c0a3:	83 c4 10             	add    esp,0x10
c000c0a6:	90                   	nop
c000c0a7:	83 c4 0c             	add    esp,0xc
c000c0aa:	c3                   	ret    
c000c0ab:	90                   	nop

c000c0ac <Bus::~Bus()>:
c000c0ac:	83 ec 0c             	sub    esp,0xc
c000c0af:	83 ec 0c             	sub    esp,0xc
c000c0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b6:	e8 cd ff ff ff       	call   c000c088 <Bus::~Bus()>
c000c0bb:	83 c4 10             	add    esp,0x10
c000c0be:	83 ec 08             	sub    esp,0x8
c000c0c1:	68 58 01 00 00       	push   0x158
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	e8 3d e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	83 c4 0c             	add    esp,0xc
c000c0d5:	c3                   	ret    

c000c0d6 <beepThread(void*)>:
c000c0d6:	83 ec 0c             	sub    esp,0xc
c000c0d9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c0de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0e2:	48                   	dec    eax
c000c0e3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c0e8:	75 01                	jne    c000c0eb <beepThread(void*)+0x15>
c000c0ea:	fb                   	sti    
c000c0eb:	6b c2 0a             	imul   eax,edx,0xa
c000c0ee:	83 ec 0c             	sub    esp,0xc
c000c0f1:	50                   	push   eax
c000c0f2:	e8 b5 9d 00 00       	call   c0015eac <milliTenthSleep(unsigned int)>
c000c0f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c0fe:	e8 02 bd 00 00       	call   c0017e05 <HalMakeBeep(int)>
c000c103:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c10b:	83 c4 1c             	add    esp,0x1c
c000c10e:	e9 7d 9c 00 00       	jmp    c0015d90 <blockTask(TaskState)>

c000c113 <Krnl::beep(int, int, bool)>:
c000c113:	56                   	push   esi
c000c114:	53                   	push   ebx
c000c115:	83 ec 10             	sub    esp,0x10
c000c118:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c11c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c124:	e8 dc bc 00 00       	call   c0017e05 <HalMakeBeep(int)>
c000c129:	89 f0                	mov    eax,esi
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	84 c0                	test   al,al
c000c130:	74 1e                	je     c000c150 <Krnl::beep(int, int, bool)+0x3d>
c000c132:	6b db 0a             	imul   ebx,ebx,0xa
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	53                   	push   ebx
c000c139:	e8 6e 9d 00 00       	call   c0015eac <milliTenthSleep(unsigned int)>
c000c13e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c146:	83 c4 14             	add    esp,0x14
c000c149:	5b                   	pop    ebx
c000c14a:	5e                   	pop    esi
c000c14b:	e9 b5 bc 00 00       	jmp    c0017e05 <HalMakeBeep(int)>
c000c150:	68 e6 00 00 00       	push   0xe6
c000c155:	53                   	push   ebx
c000c156:	68 d6 c0 00 c0       	push   0xc000c0d6
c000c15b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c161:	e8 de 97 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c000c166:	83 c4 14             	add    esp,0x14
c000c169:	5b                   	pop    ebx
c000c16a:	5e                   	pop    esi
c000c16b:	c3                   	ret    

c000c16c <User::loadClockSettings(int)>:
c000c16c:	53                   	push   ebx
c000c16d:	83 ec 14             	sub    esp,0x14
c000c170:	68 14 01 00 00       	push   0x114
c000c175:	e8 59 b9 ff ff       	call   c0007ad3 <malloc>
c000c17a:	83 c4 0c             	add    esp,0xc
c000c17d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c183:	68 88 14 02 c0       	push   0xc0021488
c000c188:	50                   	push   eax
c000c189:	89 c3                	mov    ebx,eax
c000c18b:	e8 3a f6 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c000c190:	58                   	pop    eax
c000c191:	5a                   	pop    edx
c000c192:	6a 01                	push   0x1
c000c194:	53                   	push   ebx
c000c195:	e8 f8 f6 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c000c19a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c19d:	e8 4e f7 ff ff       	call   c000b8f0 <File::close()>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	85 db                	test   ebx,ebx
c000c1a7:	74 0f                	je     c000c1b8 <User::loadClockSettings(int)+0x4c>
c000c1a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	ff e0                	jmp    eax
c000c1b8:	83 c4 08             	add    esp,0x8
c000c1bb:	5b                   	pop    ebx
c000c1bc:	c3                   	ret    
c000c1bd:	90                   	nop

c000c1be <Clock::Clock(char const*)>:
c000c1be:	83 ec 0c             	sub    esp,0xc
c000c1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c5:	83 ec 08             	sub    esp,0x8
c000c1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1cc:	50                   	push   eax
c000c1cd:	e8 ba 06 00 00       	call   c000c88c <Device::Device(char const*)>
c000c1d2:	83 c4 10             	add    esp,0x10
c000c1d5:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c000c1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1de:	89 10                	mov    DWORD PTR [eax],edx
c000c1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c1ee:	90                   	nop
c000c1ef:	83 c4 0c             	add    esp,0xc
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <Clock::~Clock()>:
c000c1f4:	83 ec 0c             	sub    esp,0xc
c000c1f7:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c000c1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c200:	89 10                	mov    DWORD PTR [eax],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	83 ec 0c             	sub    esp,0xc
c000c209:	50                   	push   eax
c000c20a:	e8 e7 03 00 00       	call   c000c5f6 <Device::~Device()>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	90                   	nop
c000c213:	83 c4 0c             	add    esp,0xc
c000c216:	c3                   	ret    
c000c217:	90                   	nop

c000c218 <Clock::~Clock()>:
c000c218:	83 ec 0c             	sub    esp,0xc
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c222:	e8 cd ff ff ff       	call   c000c1f4 <Clock::~Clock()>
c000c227:	83 c4 10             	add    esp,0x10
c000c22a:	83 ec 08             	sub    esp,0x8
c000c22d:	68 58 01 00 00       	push   0x158
c000c232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c236:	e8 d1 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c23b:	83 c4 10             	add    esp,0x10
c000c23e:	83 c4 0c             	add    esp,0xc
c000c241:	c3                   	ret    

c000c242 <Clock::timeInSecondsLocal()>:
c000c242:	53                   	push   ebx
c000c243:	83 ec 14             	sub    esp,0x14
c000c246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	50                   	push   eax
c000c24d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c250:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c257:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c25d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c263:	89 cb                	mov    ebx,ecx
c000c265:	c1 fb 1f             	sar    ebx,0x1f
c000c268:	01 c8                	add    eax,ecx
c000c26a:	11 da                	adc    edx,ebx
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	31 c9                	xor    ecx,ecx
c000c271:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c278:	74 05                	je     c000c27f <Clock::timeInSecondsLocal()+0x3d>
c000c27a:	b9 08 07 00 00       	mov    ecx,0x708
c000c27f:	31 db                	xor    ebx,ebx
c000c281:	01 c8                	add    eax,ecx
c000c283:	11 da                	adc    edx,ebx
c000c285:	83 c4 08             	add    esp,0x8
c000c288:	5b                   	pop    ebx
c000c289:	c3                   	ret    

c000c28a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c28a:	57                   	push   edi
c000c28b:	56                   	push   esi
c000c28c:	53                   	push   ebx
c000c28d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c291:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c295:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c299:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c29b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c29e:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2a5:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2ab:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2b1:	99                   	cdq    
c000c2b2:	29 c6                	sub    esi,eax
c000c2b4:	19 d7                	sbb    edi,edx
c000c2b6:	89 f0                	mov    eax,esi
c000c2b8:	31 f6                	xor    esi,esi
c000c2ba:	89 fa                	mov    edx,edi
c000c2bc:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2c3:	74 05                	je     c000c2ca <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2c5:	be 08 07 00 00       	mov    esi,0x708
c000c2ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c2ce:	31 ff                	xor    edi,edi
c000c2d0:	29 f0                	sub    eax,esi
c000c2d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2d6:	19 fa                	sbb    edx,edi
c000c2d8:	89 d8                	mov    eax,ebx
c000c2da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c2de:	5b                   	pop    ebx
c000c2df:	5e                   	pop    esi
c000c2e0:	5f                   	pop    edi
c000c2e1:	ff e0                	jmp    eax

c000c2e3 <datetimeToSeconds(datetime_t)>:
c000c2e3:	55                   	push   ebp
c000c2e4:	57                   	push   edi
c000c2e5:	56                   	push   esi
c000c2e6:	53                   	push   ebx
c000c2e7:	83 ec 0c             	sub    esp,0xc
c000c2ea:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c2ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c2f2:	89 f7                	mov    edi,esi
c000c2f4:	89 f0                	mov    eax,esi
c000c2f6:	0f b6 cf             	movzx  ecx,bh
c000c2f9:	0f b6 c4             	movzx  eax,ah
c000c2fc:	c1 ef 10             	shr    edi,0x10
c000c2ff:	89 da                	mov    edx,ebx
c000c301:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c304:	89 f9                	mov    ecx,edi
c000c306:	0f b6 f9             	movzx  edi,cl
c000c309:	89 f1                	mov    ecx,esi
c000c30b:	6b c0 3c             	imul   eax,eax,0x3c
c000c30e:	0f b6 f1             	movzx  esi,cl
c000c311:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c317:	0f b6 db             	movzx  ebx,bl
c000c31a:	c1 ea 10             	shr    edx,0x10
c000c31d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c323:	01 f8                	add    eax,edi
c000c325:	01 f0                	add    eax,esi
c000c327:	89 04 24             	mov    DWORD PTR [esp],eax
c000c32a:	c1 f8 1f             	sar    eax,0x1f
c000c32d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c331:	89 e8                	mov    eax,ebp
c000c333:	0f b6 c0             	movzx  eax,al
c000c336:	8b 0c 85 00 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeb00]
c000c33d:	83 f8 01             	cmp    eax,0x1
c000c340:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c344:	0f b7 da             	movzx  ebx,dx
c000c347:	76 27                	jbe    c000c370 <datetimeToSeconds(datetime_t)+0x8d>
c000c349:	80 e2 03             	and    dl,0x3
c000c34c:	75 22                	jne    c000c370 <datetimeToSeconds(datetime_t)+0x8d>
c000c34e:	31 d2                	xor    edx,edx
c000c350:	be 64 00 00 00       	mov    esi,0x64
c000c355:	89 d8                	mov    eax,ebx
c000c357:	f7 f6                	div    esi
c000c359:	85 d2                	test   edx,edx
c000c35b:	75 12                	jne    c000c36f <datetimeToSeconds(datetime_t)+0x8c>
c000c35d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c363:	be 90 01 00 00       	mov    esi,0x190
c000c368:	99                   	cdq    
c000c369:	f7 fe                	idiv   esi
c000c36b:	85 d2                	test   edx,edx
c000c36d:	75 01                	jne    c000c370 <datetimeToSeconds(datetime_t)+0x8d>
c000c36f:	41                   	inc    ecx
c000c370:	83 fb 46             	cmp    ebx,0x46
c000c373:	76 48                	jbe    c000c3bd <datetimeToSeconds(datetime_t)+0xda>
c000c375:	be 46 00 00 00       	mov    esi,0x46
c000c37a:	bf 64 00 00 00       	mov    edi,0x64
c000c37f:	bd 90 01 00 00       	mov    ebp,0x190
c000c384:	f7 c6 03 00 00 00    	test   esi,0x3
c000c38a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c38f:	75 23                	jne    c000c3b4 <datetimeToSeconds(datetime_t)+0xd1>
c000c391:	89 f0                	mov    eax,esi
c000c393:	99                   	cdq    
c000c394:	f7 ff                	idiv   edi
c000c396:	b8 6e 01 00 00       	mov    eax,0x16e
c000c39b:	85 d2                	test   edx,edx
c000c39d:	75 15                	jne    c000c3b4 <datetimeToSeconds(datetime_t)+0xd1>
c000c39f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3a5:	99                   	cdq    
c000c3a6:	f7 fd                	idiv   ebp
c000c3a8:	83 fa 01             	cmp    edx,0x1
c000c3ab:	19 c0                	sbb    eax,eax
c000c3ad:	f7 d0                	not    eax
c000c3af:	05 6e 01 00 00       	add    eax,0x16e
c000c3b4:	46                   	inc    esi
c000c3b5:	01 c1                	add    ecx,eax
c000c3b7:	39 de                	cmp    esi,ebx
c000c3b9:	7c c9                	jl     c000c384 <datetimeToSeconds(datetime_t)+0xa1>
c000c3bb:	eb 34                	jmp    c000c3f1 <datetimeToSeconds(datetime_t)+0x10e>
c000c3bd:	74 32                	je     c000c3f1 <datetimeToSeconds(datetime_t)+0x10e>
c000c3bf:	b8 45 00 00 00       	mov    eax,0x45
c000c3c4:	89 c2                	mov    edx,eax
c000c3c6:	83 e2 03             	and    edx,0x3
c000c3c9:	39 d8                	cmp    eax,ebx
c000c3cb:	7e 0f                	jle    c000c3dc <datetimeToSeconds(datetime_t)+0xf9>
c000c3cd:	83 fa 01             	cmp    edx,0x1
c000c3d0:	19 d2                	sbb    edx,edx
c000c3d2:	48                   	dec    eax
c000c3d3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c3da:	eb e8                	jmp    c000c3c4 <datetimeToSeconds(datetime_t)+0xe1>
c000c3dc:	85 d2                	test   edx,edx
c000c3de:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3e3:	75 0a                	jne    c000c3ef <datetimeToSeconds(datetime_t)+0x10c>
c000c3e5:	83 fb 01             	cmp    ebx,0x1
c000c3e8:	19 c0                	sbb    eax,eax
c000c3ea:	05 6e 01 00 00       	add    eax,0x16e
c000c3ef:	29 c1                	sub    ecx,eax
c000c3f1:	b8 80 51 01 00       	mov    eax,0x15180
c000c3f6:	f7 e9                	imul   ecx
c000c3f8:	03 04 24             	add    eax,DWORD PTR [esp]
c000c3fb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c3ff:	83 c4 0c             	add    esp,0xc
c000c402:	5b                   	pop    ebx
c000c403:	5e                   	pop    esi
c000c404:	5f                   	pop    edi
c000c405:	5d                   	pop    ebp
c000c406:	c3                   	ret    
c000c407:	90                   	nop

c000c408 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c408:	57                   	push   edi
c000c409:	56                   	push   esi
c000c40a:	53                   	push   ebx
c000c40b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c40f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c411:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c41c:	e8 c2 fe ff ff       	call   c000c2e3 <datetimeToSeconds(datetime_t)>
c000c421:	59                   	pop    ecx
c000c422:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c429:	5b                   	pop    ebx
c000c42a:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c430:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c436:	89 cb                	mov    ebx,ecx
c000c438:	c1 fb 1f             	sar    ebx,0x1f
c000c43b:	29 c8                	sub    eax,ecx
c000c43d:	19 da                	sbb    edx,ebx
c000c43f:	31 c9                	xor    ecx,ecx
c000c441:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c448:	74 05                	je     c000c44f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c44a:	b9 08 07 00 00       	mov    ecx,0x708
c000c44f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c453:	31 db                	xor    ebx,ebx
c000c455:	29 c8                	sub    eax,ecx
c000c457:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c45b:	19 da                	sbb    edx,ebx
c000c45d:	89 f8                	mov    eax,edi
c000c45f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c463:	5b                   	pop    ebx
c000c464:	5e                   	pop    esi
c000c465:	5f                   	pop    edi
c000c466:	ff e0                	jmp    eax

c000c468 <secondsToDatetime(unsigned long long)>:
c000c468:	55                   	push   ebp
c000c469:	57                   	push   edi
c000c46a:	56                   	push   esi
c000c46b:	53                   	push   ebx
c000c46c:	83 ec 1c             	sub    esp,0x1c
c000c46f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c473:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c477:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c47b:	6a 00                	push   0x0
c000c47d:	68 80 51 01 00       	push   0x15180
c000c482:	55                   	push   ebp
c000c483:	57                   	push   edi
c000c484:	e8 c7 2d 01 00       	call   c001f250 <__udivdi3>
c000c489:	83 c4 10             	add    esp,0x10
c000c48c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c490:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c496:	6a 00                	push   0x0
c000c498:	68 80 51 01 00       	push   0x15180
c000c49d:	55                   	push   ebp
c000c49e:	57                   	push   edi
c000c49f:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4a4:	e8 a7 2e 01 00       	call   c001f350 <__umoddi3>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	99                   	cdq    
c000c4ad:	f7 ff                	idiv   edi
c000c4af:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4b4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4b7:	89 d0                	mov    eax,edx
c000c4b9:	99                   	cdq    
c000c4ba:	f7 ff                	idiv   edi
c000c4bc:	85 db                	test   ebx,ebx
c000c4be:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4c1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4c4:	79 11                	jns    c000c4d7 <secondsToDatetime(unsigned long long)+0x6f>
c000c4c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4ca:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c4d0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4d5:	eb 07                	jmp    c000c4de <secondsToDatetime(unsigned long long)+0x76>
c000c4d7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4dc:	89 d8                	mov    eax,ebx
c000c4de:	99                   	cdq    
c000c4df:	bf b4 05 00 00       	mov    edi,0x5b4
c000c4e4:	f7 f9                	idiv   ecx
c000c4e6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c4eb:	31 d2                	xor    edx,edx
c000c4ed:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c4f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4f6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c4fe:	01 c3                	add    ebx,eax
c000c500:	89 d8                	mov    eax,ebx
c000c502:	f7 f1                	div    ecx
c000c504:	31 d2                	xor    edx,edx
c000c506:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c509:	89 d8                	mov    eax,ebx
c000c50b:	f7 f7                	div    edi
c000c50d:	31 d2                	xor    edx,edx
c000c50f:	29 c1                	sub    ecx,eax
c000c511:	89 d8                	mov    eax,ebx
c000c513:	f7 f5                	div    ebp
c000c515:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c51a:	31 d2                	xor    edx,edx
c000c51c:	29 c1                	sub    ecx,eax
c000c51e:	89 c8                	mov    eax,ecx
c000c520:	f7 f5                	div    ebp
c000c522:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c527:	31 d2                	xor    edx,edx
c000c529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c52d:	89 c8                	mov    eax,ecx
c000c52f:	f7 f5                	div    ebp
c000c531:	31 d2                	xor    edx,edx
c000c533:	01 c3                	add    ebx,eax
c000c535:	89 c8                	mov    eax,ecx
c000c537:	f7 f7                	div    edi
c000c539:	bf 99 00 00 00       	mov    edi,0x99
c000c53e:	31 d2                	xor    edx,edx
c000c540:	29 c3                	sub    ebx,eax
c000c542:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c54a:	29 c3                	sub    ebx,eax
c000c54c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c54f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c552:	83 c1 02             	add    ecx,0x2
c000c555:	89 c8                	mov    eax,ecx
c000c557:	bb 05 00 00 00       	mov    ebx,0x5
c000c55c:	f7 f7                	div    edi
c000c55e:	31 d2                	xor    edx,edx
c000c560:	89 c7                	mov    edi,eax
c000c562:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c568:	83 c0 02             	add    eax,0x2
c000c56b:	f7 f3                	div    ebx
c000c56d:	89 eb                	mov    ebx,ebp
c000c56f:	29 c3                	sub    ebx,eax
c000c571:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c577:	88 1e                	mov    BYTE PTR [esi],bl
c000c579:	19 c0                	sbb    eax,eax
c000c57b:	31 d2                	xor    edx,edx
c000c57d:	83 e0 0c             	and    eax,0xc
c000c580:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c584:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c58c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c590:	83 f9 01             	cmp    ecx,0x1
c000c593:	0f 96 c2             	setbe  dl
c000c596:	41                   	inc    ecx
c000c597:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c59a:	01 d0                	add    eax,edx
c000c59c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5a0:	83 c4 1c             	add    esp,0x1c
c000c5a3:	89 f0                	mov    eax,esi
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	5f                   	pop    edi
c000c5a8:	5d                   	pop    ebp
c000c5a9:	c2 04 00             	ret    0x4

c000c5ac <Clock::timeInDatetimeLocal()>:
c000c5ac:	53                   	push   ebx
c000c5ad:	83 ec 14             	sub    esp,0x14
c000c5b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5b8:	e8 85 fc ff ff       	call   c000c242 <Clock::timeInSecondsLocal()>
c000c5bd:	83 c4 0c             	add    esp,0xc
c000c5c0:	52                   	push   edx
c000c5c1:	50                   	push   eax
c000c5c2:	53                   	push   ebx
c000c5c3:	e8 a0 fe ff ff       	call   c000c468 <secondsToDatetime(unsigned long long)>
c000c5c8:	89 d8                	mov    eax,ebx
c000c5ca:	83 c4 14             	add    esp,0x14
c000c5cd:	5b                   	pop    ebx
c000c5ce:	c2 04 00             	ret    0x4
c000c5d1:	90                   	nop

c000c5d2 <Device::hibernate()>:
c000c5d2:	c3                   	ret    
c000c5d3:	90                   	nop

c000c5d4 <Device::wake()>:
c000c5d4:	c3                   	ret    
c000c5d5:	90                   	nop

c000c5d6 <Device::detect()>:
c000c5d6:	c3                   	ret    
c000c5d7:	90                   	nop

c000c5d8 <Device::disableLegacy()>:
c000c5d8:	c3                   	ret    
c000c5d9:	90                   	nop

c000c5da <Device::powerSaving(PowerSavingLevel)>:
c000c5da:	c3                   	ret    
c000c5db:	90                   	nop

c000c5dc <DriverlessDevice::close(int, int, void*)>:
c000c5dc:	31 c0                	xor    eax,eax
c000c5de:	c3                   	ret    
c000c5df:	90                   	nop

c000c5e0 <DriverlessDevice::detect()>:
c000c5e0:	c3                   	ret    
c000c5e1:	90                   	nop

c000c5e2 <DriverlessDevice::open(int, int, void*)>:
c000c5e2:	83 ec 18             	sub    esp,0x18
c000c5e5:	68 30 15 02 c0       	push   0xc0021530
c000c5ea:	e8 a2 4c 00 00       	call   c0011291 <KePanic(char const*)>
c000c5ef:	83 c8 ff             	or     eax,0xffffffff
c000c5f2:	83 c4 1c             	add    esp,0x1c
c000c5f5:	c3                   	ret    

c000c5f6 <Device::~Device()>:
c000c5f6:	ba 90 15 02 c0       	mov    edx,0xc0021590
c000c5fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5ff:	89 10                	mov    DWORD PTR [eax],edx
c000c601:	90                   	nop
c000c602:	c3                   	ret    
c000c603:	90                   	nop

c000c604 <Device::~Device()>:
c000c604:	83 ec 0c             	sub    esp,0xc
c000c607:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c60b:	e8 e6 ff ff ff       	call   c000c5f6 <Device::~Device()>
c000c610:	83 c4 04             	add    esp,0x4
c000c613:	83 ec 08             	sub    esp,0x8
c000c616:	68 58 01 00 00       	push   0x158
c000c61b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61f:	e8 e8 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c624:	83 c4 10             	add    esp,0x10
c000c627:	83 c4 0c             	add    esp,0xc
c000c62a:	c3                   	ret    
c000c62b:	90                   	nop

c000c62c <Device::findAndLoadDriver()>:
c000c62c:	c7 44 24 04 4e 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002154e
c000c634:	e9 d1 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c639:	90                   	nop

c000c63a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c63a:	57                   	push   edi
c000c63b:	b9 09 00 00 00       	mov    ecx,0x9
c000c640:	56                   	push   esi
c000c641:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c645:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c649:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c653:	81 c7 18 01 00 00    	add    edi,0x118
c000c659:	fc                   	cld    
c000c65a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c65c:	5e                   	pop    esi
c000c65d:	5f                   	pop    edi
c000c65e:	c3                   	ret    
c000c65f:	90                   	nop

c000c660 <Device::preOpenACPI(void*, char*, char*)>:
c000c660:	57                   	push   edi
c000c661:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c666:	56                   	push   esi
c000c667:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c66b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c66f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c673:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c67d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c683:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c689:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c68b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c691:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c695:	b9 0e 00 00 00       	mov    ecx,0xe
c000c69a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c69c:	5e                   	pop    esi
c000c69d:	5f                   	pop    edi
c000c69e:	c3                   	ret    
c000c69f:	90                   	nop

c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6a0:	53                   	push   ebx
c000c6a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6b1:	0f b6 c0             	movzx  eax,al
c000c6b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6c4:	5b                   	pop    ebx
c000c6c5:	e9 aa 05 00 00       	jmp    c000cc74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c6ca <Device::getParent()>:
c000c6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6ce:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c6d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6de:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c6e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6ef:	e9 f7 06 00 00       	jmp    c000cdeb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c6f4 <Device::addChild(Device*)>:
c000c6f4:	53                   	push   ebx
c000c6f5:	83 ec 08             	sub    esp,0x8
c000c6f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c700:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c706:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c70c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c70e:	85 d2                	test   edx,edx
c000c710:	74 04                	je     c000c716 <Device::addChild(Device*)+0x22>
c000c712:	89 d3                	mov    ebx,edx
c000c714:	eb f6                	jmp    c000c70c <Device::addChild(Device*)+0x18>
c000c716:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c719:	83 ec 0c             	sub    esp,0xc
c000c71c:	6a 08                	push   0x8
c000c71e:	e8 b0 b3 ff ff       	call   c0007ad3 <malloc>
c000c723:	89 03                	mov    DWORD PTR [ebx],eax
c000c725:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c72b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c732:	83 c4 18             	add    esp,0x18
c000c735:	5b                   	pop    ebx
c000c736:	c3                   	ret    
c000c737:	90                   	nop

c000c738 <Device::removeAllChildren()>:
c000c738:	56                   	push   esi
c000c739:	53                   	push   ebx
c000c73a:	52                   	push   edx
c000c73b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c73f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c745:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c748:	74 17                	je     c000c761 <Device::removeAllChildren()+0x29>
c000c74a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c74d:	85 c0                	test   eax,eax
c000c74f:	74 0c                	je     c000c75d <Device::removeAllChildren()+0x25>
c000c751:	8b 10                	mov    edx,DWORD PTR [eax]
c000c753:	83 ec 0c             	sub    esp,0xc
c000c756:	50                   	push   eax
c000c757:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c75f:	eb e4                	jmp    c000c745 <Device::removeAllChildren()+0xd>
c000c761:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c767:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c76d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c773:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c77a:	58                   	pop    eax
c000c77b:	5b                   	pop    ebx
c000c77c:	5e                   	pop    esi
c000c77d:	c3                   	ret    

c000c77e <Device::hibernateAll()>:
c000c77e:	53                   	push   ebx
c000c77f:	83 ec 14             	sub    esp,0x14
c000c782:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c786:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c788:	53                   	push   ebx
c000c789:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c78c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c798:	74 0f                	je     c000c7a9 <Device::hibernateAll()+0x2b>
c000c79a:	83 ec 0c             	sub    esp,0xc
c000c79d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7a0:	e8 d9 ff ff ff       	call   c000c77e <Device::hibernateAll()>
c000c7a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7a7:	eb e9                	jmp    c000c792 <Device::hibernateAll()+0x14>
c000c7a9:	83 c4 08             	add    esp,0x8
c000c7ac:	5b                   	pop    ebx
c000c7ad:	c3                   	ret    

c000c7ae <Device::wakeAll()>:
c000c7ae:	53                   	push   ebx
c000c7af:	83 ec 14             	sub    esp,0x14
c000c7b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b8:	53                   	push   ebx
c000c7b9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7c2:	83 c4 10             	add    esp,0x10
c000c7c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c8:	74 0f                	je     c000c7d9 <Device::wakeAll()+0x2b>
c000c7ca:	83 ec 0c             	sub    esp,0xc
c000c7cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7d0:	e8 d9 ff ff ff       	call   c000c7ae <Device::wakeAll()>
c000c7d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d7:	eb e9                	jmp    c000c7c2 <Device::wakeAll()+0x14>
c000c7d9:	83 c4 08             	add    esp,0x8
c000c7dc:	5b                   	pop    ebx
c000c7dd:	c3                   	ret    

c000c7de <Device::detectAll()>:
c000c7de:	53                   	push   ebx
c000c7df:	83 ec 14             	sub    esp,0x14
c000c7e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e8:	53                   	push   ebx
c000c7e9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c7ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7f2:	83 c4 10             	add    esp,0x10
c000c7f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7f8:	74 0f                	je     c000c809 <Device::detectAll()+0x2b>
c000c7fa:	83 ec 0c             	sub    esp,0xc
c000c7fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c800:	e8 d9 ff ff ff       	call   c000c7de <Device::detectAll()>
c000c805:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c807:	eb e9                	jmp    c000c7f2 <Device::detectAll()+0x14>
c000c809:	83 c4 08             	add    esp,0x8
c000c80c:	5b                   	pop    ebx
c000c80d:	c3                   	ret    

c000c80e <Device::disableLegacyAll()>:
c000c80e:	c3                   	ret    
c000c80f:	90                   	nop

c000c810 <Device::loadDriversForAll()>:
c000c810:	c3                   	ret    
c000c811:	90                   	nop

c000c812 <Device::closeAll()>:
c000c812:	53                   	push   ebx
c000c813:	83 ec 08             	sub    esp,0x8
c000c816:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c81a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c81c:	6a 00                	push   0x0
c000c81e:	6a 00                	push   0x0
c000c820:	6a 00                	push   0x0
c000c822:	53                   	push   ebx
c000c823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c826:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c82c:	83 c4 10             	add    esp,0x10
c000c82f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c832:	74 0f                	je     c000c843 <Device::closeAll()+0x31>
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c83a:	e8 d3 ff ff ff       	call   c000c812 <Device::closeAll()>
c000c83f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c841:	eb e9                	jmp    c000c82c <Device::closeAll()+0x1a>
c000c843:	83 c4 08             	add    esp,0x8
c000c846:	5b                   	pop    ebx
c000c847:	c3                   	ret    

c000c848 <Device::powerSavingAll(PowerSavingLevel)>:
c000c848:	56                   	push   esi
c000c849:	53                   	push   ebx
c000c84a:	83 ec 0c             	sub    esp,0xc
c000c84d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c851:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c855:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c857:	56                   	push   esi
c000c858:	53                   	push   ebx
c000c859:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c85c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c868:	74 0f                	je     c000c879 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c86a:	52                   	push   edx
c000c86b:	52                   	push   edx
c000c86c:	56                   	push   esi
c000c86d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c870:	e8 d3 ff ff ff       	call   c000c848 <Device::powerSavingAll(PowerSavingLevel)>
c000c875:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c877:	eb e9                	jmp    c000c862 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c879:	58                   	pop    eax
c000c87a:	5b                   	pop    ebx
c000c87b:	5e                   	pop    esi
c000c87c:	c3                   	ret    
c000c87d:	90                   	nop

c000c87e <Device::setName(char const*)>:
c000c87e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c886:	e9 c5 3d ff ff       	jmp    c0000650 <strcpy>
c000c88b:	90                   	nop

c000c88c <Device::Device(char const*)>:
c000c88c:	83 ec 1c             	sub    esp,0x1c
c000c88f:	ba 90 15 02 c0       	mov    edx,0xc0021590
c000c894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c898:	89 10                	mov    DWORD PTR [eax],edx
c000c89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ac:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ba:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8d2:	83 ec 08             	sub    esp,0x8
c000c8d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8dd:	e8 9c ff ff ff       	call   c000c87e <Device::setName(char const*)>
c000c8e2:	83 c4 10             	add    esp,0x10
c000c8e5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c8ed:	83 ec 0c             	sub    esp,0xc
c000c8f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8f4:	e8 da b1 ff ff       	call   c0007ad3 <malloc>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c902:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c90d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c917:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c91d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c927:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c92d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c938:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c943:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c978:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c982:	90                   	nop
c000c983:	83 c4 1c             	add    esp,0x1c
c000c986:	c3                   	ret    
c000c987:	90                   	nop

c000c988 <Device::getName()>:
c000c988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c98c:	05 d0 00 00 00       	add    eax,0xd0
c000c991:	c3                   	ret    

c000c992 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c992:	83 ec 0c             	sub    esp,0xc
c000c995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c999:	83 ec 08             	sub    esp,0x8
c000c99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a0:	50                   	push   eax
c000c9a1:	e8 e6 fe ff ff       	call   c000c88c <Device::Device(char const*)>
c000c9a6:	83 c4 10             	add    esp,0x10
c000c9a9:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c000c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b2:	89 10                	mov    DWORD PTR [eax],edx
c000c9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9c2:	90                   	nop
c000c9c3:	83 c4 0c             	add    esp,0xc
c000c9c6:	c3                   	ret    
c000c9c7:	90                   	nop

c000c9c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c9c8:	57                   	push   edi
c000c9c9:	56                   	push   esi
c000c9ca:	53                   	push   ebx
c000c9cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c9d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9d7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c9dd:	75 0c                	jne    c000c9eb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c9df:	52                   	push   edx
c000c9e0:	52                   	push   edx
c000c9e1:	53                   	push   ebx
c000c9e2:	56                   	push   esi
c000c9e3:	e8 1a 2d 01 00       	call   c001f702 <LinkedList<Device>::addElement(Device*)>
c000c9e8:	83 c4 10             	add    esp,0x10
c000c9eb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9f4:	74 12                	je     c000ca08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c9f6:	50                   	push   eax
c000c9f7:	57                   	push   edi
c000c9f8:	56                   	push   esi
c000c9f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c9fc:	e8 c7 ff ff ff       	call   c000c9c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	eb e9                	jmp    c000c9f1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca08:	5b                   	pop    ebx
c000ca09:	5e                   	pop    esi
c000ca0a:	5f                   	pop    edi
c000ca0b:	c3                   	ret    

c000ca0c <getDevicesOfType(DeviceType)>:
c000ca0c:	53                   	push   ebx
c000ca0d:	83 ec 14             	sub    esp,0x14
c000ca10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca14:	53                   	push   ebx
c000ca15:	e8 c4 2d 01 00       	call   c001f7de <LinkedList<Device>::LinkedList()>
c000ca1a:	83 c4 0c             	add    esp,0xc
c000ca1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca21:	53                   	push   ebx
c000ca22:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca28:	e8 9b ff ff ff       	call   c000c9c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca2d:	83 c4 18             	add    esp,0x18
c000ca30:	89 d8                	mov    eax,ebx
c000ca32:	5b                   	pop    ebx
c000ca33:	c2 04 00             	ret    0x4
c000ca36:	66 90                	xchg   ax,ax

c000ca38 <HardDiskController::HardDiskController(char const*)>:
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3f:	83 ec 08             	sub    esp,0x8
c000ca42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca46:	50                   	push   eax
c000ca47:	e8 40 fe ff ff       	call   c000c88c <Device::Device(char const*)>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	ba e8 15 02 c0       	mov    edx,0xc00215e8
c000ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca58:	89 10                	mov    DWORD PTR [eax],edx
c000ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca68:	90                   	nop
c000ca69:	83 c4 0c             	add    esp,0xc
c000ca6c:	c3                   	ret    
c000ca6d:	90                   	nop
c000ca6e:	66 90                	xchg   ax,ax

c000ca70 <HardDiskController::~HardDiskController()>:
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	ba e8 15 02 c0       	mov    edx,0xc00215e8
c000ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7c:	89 10                	mov    DWORD PTR [eax],edx
c000ca7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca82:	83 ec 0c             	sub    esp,0xc
c000ca85:	50                   	push   eax
c000ca86:	e8 6b fb ff ff       	call   c000c5f6 <Device::~Device()>
c000ca8b:	83 c4 10             	add    esp,0x10
c000ca8e:	90                   	nop
c000ca8f:	83 c4 0c             	add    esp,0xc
c000ca92:	c3                   	ret    
c000ca93:	90                   	nop

c000ca94 <HardDiskController::~HardDiskController()>:
c000ca94:	83 ec 0c             	sub    esp,0xc
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9e:	e8 cd ff ff ff       	call   c000ca70 <HardDiskController::~HardDiskController()>
c000caa3:	83 c4 10             	add    esp,0x10
c000caa6:	83 ec 08             	sub    esp,0x8
c000caa9:	68 58 01 00 00       	push   0x158
c000caae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab2:	e8 55 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	83 c4 0c             	add    esp,0xc
c000cabd:	c3                   	ret    

c000cabe <PhysicalDisk::eject()>:
c000cabe:	83 c8 ff             	or     eax,0xffffffff
c000cac1:	c3                   	ret    

c000cac2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cac2:	83 ec 0c             	sub    esp,0xc
c000cac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac9:	83 ec 08             	sub    esp,0x8
c000cacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad0:	50                   	push   eax
c000cad1:	e8 b6 fd ff ff       	call   c000c88c <Device::Device(char const*)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	ba 14 16 02 c0       	mov    edx,0xc0021614
c000cade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae2:	89 10                	mov    DWORD PTR [eax],edx
c000cae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb24:	90                   	nop
c000cb25:	83 c4 0c             	add    esp,0xc
c000cb28:	c3                   	ret    
c000cb29:	90                   	nop

c000cb2a <PhysicalDisk::startCache()>:
c000cb2a:	56                   	push   esi
c000cb2b:	53                   	push   ebx
c000cb2c:	83 ec 10             	sub    esp,0x10
c000cb2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb33:	6a 44                	push   0x44
c000cb35:	e8 99 af ff ff       	call   c0007ad3 <malloc>
c000cb3a:	89 c6                	mov    esi,eax
c000cb3c:	58                   	pop    eax
c000cb3d:	5a                   	pop    edx
c000cb3e:	53                   	push   ebx
c000cb3f:	56                   	push   esi
c000cb40:	e8 83 17 00 00       	call   c000e2c8 <VCache::VCache(PhysicalDisk*)>
c000cb45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb4b:	83 c4 14             	add    esp,0x14
c000cb4e:	5b                   	pop    ebx
c000cb4f:	5e                   	pop    esi
c000cb50:	c3                   	ret    
c000cb51:	90                   	nop

c000cb52 <PhysicalDisk::~PhysicalDisk()>:
c000cb52:	83 ec 0c             	sub    esp,0xc
c000cb55:	ba 14 16 02 c0       	mov    edx,0xc0021614
c000cb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5e:	89 10                	mov    DWORD PTR [eax],edx
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	50                   	push   eax
c000cb68:	e8 89 fa ff ff       	call   c000c5f6 <Device::~Device()>
c000cb6d:	83 c4 10             	add    esp,0x10
c000cb70:	90                   	nop
c000cb71:	83 c4 0c             	add    esp,0xc
c000cb74:	c3                   	ret    
c000cb75:	90                   	nop

c000cb76 <PhysicalDisk::~PhysicalDisk()>:
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	83 ec 0c             	sub    esp,0xc
c000cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb80:	e8 cd ff ff ff       	call   c000cb52 <PhysicalDisk::~PhysicalDisk()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	83 ec 08             	sub    esp,0x8
c000cb8b:	68 6c 01 00 00       	push   0x16c
c000cb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb94:	e8 73 dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	83 c4 0c             	add    esp,0xc
c000cb9f:	c3                   	ret    

c000cba0 <int_handler>:
c000cba0:	55                   	push   ebp
c000cba1:	57                   	push   edi
c000cba2:	56                   	push   esi
c000cba3:	53                   	push   ebx
c000cba4:	83 ec 0c             	sub    esp,0xc
c000cba7:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbae:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbb2:	74 0b                	je     c000cbbf <int_handler+0x1f>
c000cbb4:	fa                   	cli    
c000cbb5:	f4                   	hlt    
c000cbb6:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbbd:	75 f5                	jne    c000cbb4 <int_handler+0x14>
c000cbbf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbc2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbc5:	83 f8 17             	cmp    eax,0x17
c000cbc8:	76 40                	jbe    c000cc0a <int_handler+0x6a>
c000cbca:	c1 e6 04             	shl    esi,0x4
c000cbcd:	31 db                	xor    ebx,ebx
c000cbcf:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cbd5:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cbdb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cbdf:	85 c0                	test   eax,eax
c000cbe1:	74 13                	je     c000cbf6 <int_handler+0x56>
c000cbe3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cbe7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cbea:	74 2c                	je     c000cc18 <int_handler+0x78>
c000cbec:	83 ec 08             	sub    esp,0x8
c000cbef:	52                   	push   edx
c000cbf0:	57                   	push   edi
c000cbf1:	ff d0                	call   eax
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	83 c3 01             	add    ebx,0x1
c000cbf9:	83 fb 04             	cmp    ebx,0x4
c000cbfc:	75 dd                	jne    c000cbdb <int_handler+0x3b>
c000cbfe:	83 c4 0c             	add    esp,0xc
c000cc01:	31 c0                	xor    eax,eax
c000cc03:	5b                   	pop    ebx
c000cc04:	31 d2                	xor    edx,edx
c000cc06:	5e                   	pop    esi
c000cc07:	5f                   	pop    edi
c000cc08:	5d                   	pop    ebp
c000cc09:	c3                   	ret    
c000cc0a:	83 ec 0c             	sub    esp,0xc
c000cc0d:	50                   	push   eax
c000cc0e:	e8 2f b2 00 00       	call   c0017e42 <HalEndOfInterrupt(int)>
c000cc13:	83 c4 10             	add    esp,0x10
c000cc16:	eb b2                	jmp    c000cbca <int_handler+0x2a>
c000cc18:	83 ec 08             	sub    esp,0x8
c000cc1b:	52                   	push   edx
c000cc1c:	57                   	push   edi
c000cc1d:	ff d0                	call   eax
c000cc1f:	83 c4 10             	add    esp,0x10
c000cc22:	83 c4 0c             	add    esp,0xc
c000cc25:	5b                   	pop    ebx
c000cc26:	5e                   	pop    esi
c000cc27:	5f                   	pop    edi
c000cc28:	5d                   	pop    ebp
c000cc29:	c3                   	ret    

c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc2a:	56                   	push   esi
c000cc2b:	31 c0                	xor    eax,eax
c000cc2d:	53                   	push   ebx
c000cc2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc36:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc3a:	89 ca                	mov    edx,ecx
c000cc3c:	c1 e2 04             	shl    edx,0x4
c000cc3f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc47:	74 17                	je     c000cc60 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc49:	83 c0 01             	add    eax,0x1
c000cc4c:	83 f8 04             	cmp    eax,0x4
c000cc4f:	75 ee                	jne    c000cc3f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc51:	c7 44 24 0c 44 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021644
c000cc59:	5b                   	pop    ebx
c000cc5a:	5e                   	pop    esi
c000cc5b:	e9 31 46 00 00       	jmp    c0011291 <KePanic(char const*)>
c000cc60:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc63:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc6a:	5b                   	pop    ebx
c000cc6b:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cc72:	5e                   	pop    esi
c000cc73:	c3                   	ret    

c000cc74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cc74:	55                   	push   ebp
c000cc75:	57                   	push   edi
c000cc76:	56                   	push   esi
c000cc77:	53                   	push   ebx
c000cc78:	83 ec 0c             	sub    esp,0xc
c000cc7b:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cc81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc89:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cc90:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc93:	74 57                	je     c000ccec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc95:	84 c0                	test   al,al
c000cc97:	89 c7                	mov    edi,eax
c000cc99:	74 1d                	je     c000ccb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cc9b:	83 fe 0f             	cmp    esi,0xf
c000cc9e:	0f 8f d9 00 00 00    	jg     c000cd7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cca4:	0f b6 b6 48 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdceb8]
c000ccab:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000ccb3:	d1 ef                	shr    edi,1
c000ccb5:	83 e7 01             	and    edi,0x1
c000ccb8:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccbd:	83 ec 08             	sub    esp,0x8
c000ccc0:	31 db                	xor    ebx,ebx
c000ccc2:	50                   	push   eax
c000ccc3:	68 51 16 02 c0       	push   0xc0021651
c000ccc8:	e8 3d dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cccd:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	85 c0                	test   eax,eax
c000ccd7:	7f 59                	jg     c000cd32 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000ccd9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000ccdc:	83 ec 0c             	sub    esp,0xc
c000ccdf:	68 68 16 02 c0       	push   0xc0021668
c000cce4:	e8 a8 45 00 00       	call   c0011291 <KePanic(char const*)>
c000cce9:	83 c4 10             	add    esp,0x10
c000ccec:	89 e8                	mov    eax,ebp
c000ccee:	31 d2                	xor    edx,edx
c000ccf0:	c1 e0 04             	shl    eax,0x4
c000ccf3:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000ccfa:	85 c9                	test   ecx,ecx
c000ccfc:	0f 84 92 00 00 00    	je     c000cd94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd02:	83 c2 01             	add    edx,0x1
c000cd05:	83 fa 04             	cmp    edx,0x4
c000cd08:	75 e9                	jne    c000ccf3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd0a:	83 ec 0c             	sub    esp,0xc
c000cd0d:	68 bc 16 02 c0       	push   0xc00216bc
c000cd12:	e8 7a 45 00 00       	call   c0011291 <KePanic(char const*)>
c000cd17:	83 c4 10             	add    esp,0x10
c000cd1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd1f:	83 c4 0c             	add    esp,0xc
c000cd22:	5b                   	pop    ebx
c000cd23:	5e                   	pop    esi
c000cd24:	5f                   	pop    edi
c000cd25:	5d                   	pop    ebp
c000cd26:	c3                   	ret    
c000cd27:	83 c3 01             	add    ebx,0x1
c000cd2a:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd30:	7e a7                	jle    c000ccd9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd32:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd39:	83 ec 08             	sub    esp,0x8
c000cd3c:	56                   	push   esi
c000cd3d:	55                   	push   ebp
c000cd3e:	e8 e9 18 01 00       	call   c001e62c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	84 c0                	test   al,al
c000cd48:	74 dd                	je     c000cd27 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd4a:	89 f8                	mov    eax,edi
c000cd4c:	83 ec 04             	sub    esp,0x4
c000cd4f:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd56:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd59:	0f b6 f8             	movzx  edi,al
c000cd5c:	57                   	push   edi
c000cd5d:	89 e8                	mov    eax,ebp
c000cd5f:	6a 00                	push   0x0
c000cd61:	0f b6 c0             	movzx  eax,al
c000cd64:	50                   	push   eax
c000cd65:	89 f0                	mov    eax,esi
c000cd67:	6a 00                	push   0x0
c000cd69:	0f b6 c0             	movzx  eax,al
c000cd6c:	6a 00                	push   0x0
c000cd6e:	50                   	push   eax
c000cd6f:	53                   	push   ebx
c000cd70:	e8 23 1a 01 00       	call   c001e798 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd75:	83 c4 20             	add    esp,0x20
c000cd78:	e9 6f ff ff ff       	jmp    c000ccec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd7d:	83 ec 0c             	sub    esp,0xc
c000cd80:	31 ff                	xor    edi,edi
c000cd82:	68 84 16 02 c0       	push   0xc0021684
c000cd87:	e8 05 45 00 00       	call   c0011291 <KePanic(char const*)>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	e9 24 ff ff ff       	jmp    c000ccb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cd94:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cd97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cd9b:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cda2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cda6:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdad:	83 c4 0c             	add    esp,0xc
c000cdb0:	89 f0                	mov    eax,esi
c000cdb2:	5b                   	pop    ebx
c000cdb3:	5e                   	pop    esi
c000cdb4:	5f                   	pop    edi
c000cdb5:	5d                   	pop    ebp
c000cdb6:	c3                   	ret    

c000cdb7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdbf:	c1 e0 04             	shl    eax,0x4
c000cdc2:	8d 50 10             	lea    edx,[eax+0x10]
c000cdc5:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cdcb:	74 08                	je     c000cdd5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cdcd:	83 c0 04             	add    eax,0x4
c000cdd0:	39 d0                	cmp    eax,edx
c000cdd2:	75 f1                	jne    c000cdc5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cdd4:	c3                   	ret    
c000cdd5:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cddf:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cde9:	eb e2                	jmp    c000cdcd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cdeb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cdeb:	56                   	push   esi
c000cdec:	53                   	push   ebx
c000cded:	83 ec 04             	sub    esp,0x4
c000cdf0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cdf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cdfd:	74 0e                	je     c000ce0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cdff:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce04:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce0b:	75 34                	jne    c000ce41 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce0d:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce10:	c1 e0 04             	shl    eax,0x4
c000ce13:	8d 50 10             	lea    edx,[eax+0x10]
c000ce16:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce1c:	74 0d                	je     c000ce2b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce1e:	83 c0 04             	add    eax,0x4
c000ce21:	39 d0                	cmp    eax,edx
c000ce23:	75 f1                	jne    c000ce16 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce25:	83 c4 04             	add    esp,0x4
c000ce28:	5b                   	pop    ebx
c000ce29:	5e                   	pop    esi
c000ce2a:	c3                   	ret    
c000ce2b:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce35:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce3f:	eb dd                	jmp    c000ce1e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce41:	83 fb 0f             	cmp    ebx,0xf
c000ce44:	7f 09                	jg     c000ce4f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce46:	0f b6 9b 48 31 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdceb8]
c000ce4d:	eb be                	jmp    c000ce0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce4f:	83 ec 0c             	sub    esp,0xc
c000ce52:	68 75 16 02 c0       	push   0xc0021675
c000ce57:	e8 35 44 00 00       	call   c0011291 <KePanic(char const*)>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	eb ac                	jmp    c000ce0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ce61 <setupINTS()>:
c000ce61:	31 c0                	xor    eax,eax
c000ce63:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce6d:	83 c0 10             	add    eax,0x10
c000ce70:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ce7a:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000ce84:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000ce8e:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000ce98:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cea2:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000ceac:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000ceb6:	3d 00 10 00 00       	cmp    eax,0x1000
c000cebb:	75 a6                	jne    c000ce63 <setupINTS()+0x2>
c000cebd:	c3                   	ret    

c000cebe <convertLegacyIRQNumber(int)>:
c000cebe:	83 ec 0c             	sub    esp,0xc
c000cec1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cecb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ced2:	74 0c                	je     c000cee0 <convertLegacyIRQNumber(int)+0x22>
c000ced4:	83 f8 0f             	cmp    eax,0xf
c000ced7:	7f 0b                	jg     c000cee4 <convertLegacyIRQNumber(int)+0x26>
c000ced9:	0f b6 80 48 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdceb8]
c000cee0:	83 c4 0c             	add    esp,0xc
c000cee3:	c3                   	ret    
c000cee4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cee8:	83 ec 0c             	sub    esp,0xc
c000ceeb:	68 84 16 02 c0       	push   0xc0021684
c000cef0:	e8 9c 43 00 00       	call   c0011291 <KePanic(char const*)>
c000cef5:	83 c4 10             	add    esp,0x10
c000cef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefc:	83 c4 0c             	add    esp,0xc
c000ceff:	c3                   	ret    

c000cf00 <startGUI(void*)>:
c000cf00:	55                   	push   ebp
c000cf01:	89 e5                	mov    ebp,esp
c000cf03:	53                   	push   ebx
c000cf04:	83 ec 04             	sub    esp,0x4
c000cf07:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf0c:	83 e8 01             	sub    eax,0x1
c000cf0f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf14:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf19:	85 c0                	test   eax,eax
c000cf1b:	75 01                	jne    c000cf1e <startGUI(void*)+0x1e>
c000cf1d:	fb                   	sti    
c000cf1e:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf24:	83 ec 08             	sub    esp,0x8
c000cf27:	6a 01                	push   0x1
c000cf29:	68 e1 16 02 c0       	push   0xc00216e1
c000cf2e:	e8 f1 81 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	83 ec 08             	sub    esp,0x8
c000cf39:	53                   	push   ebx
c000cf3a:	50                   	push   eax
c000cf3b:	e8 24 84 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000cf40:	83 c4 10             	add    esp,0x10
c000cf43:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf49:	83 ec 08             	sub    esp,0x8
c000cf4c:	6a 01                	push   0x1
c000cf4e:	68 fb 16 02 c0       	push   0xc00216fb
c000cf53:	e8 cc 81 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000cf58:	83 c4 10             	add    esp,0x10
c000cf5b:	83 ec 08             	sub    esp,0x8
c000cf5e:	53                   	push   ebx
c000cf5f:	50                   	push   eax
c000cf60:	e8 ff 83 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000cf65:	83 c4 10             	add    esp,0x10
c000cf68:	90                   	nop
c000cf69:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf6c:	c9                   	leave  
c000cf6d:	c3                   	ret    

c000cf6e <startGUIVESA(void*)>:
c000cf6e:	55                   	push   ebp
c000cf6f:	89 e5                	mov    ebp,esp
c000cf71:	53                   	push   ebx
c000cf72:	83 ec 04             	sub    esp,0x4
c000cf75:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf7a:	83 e8 01             	sub    eax,0x1
c000cf7d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf82:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf87:	85 c0                	test   eax,eax
c000cf89:	75 01                	jne    c000cf8c <startGUIVESA(void*)+0x1e>
c000cf8b:	fb                   	sti    
c000cf8c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf92:	83 ec 08             	sub    esp,0x8
c000cf95:	6a 01                	push   0x1
c000cf97:	68 19 17 02 c0       	push   0xc0021719
c000cf9c:	e8 83 81 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	83 ec 08             	sub    esp,0x8
c000cfa7:	53                   	push   ebx
c000cfa8:	50                   	push   eax
c000cfa9:	e8 b6 83 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000cfae:	83 c4 10             	add    esp,0x10
c000cfb1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfb7:	83 ec 08             	sub    esp,0x8
c000cfba:	6a 01                	push   0x1
c000cfbc:	68 fb 16 02 c0       	push   0xc00216fb
c000cfc1:	e8 5e 81 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	83 ec 08             	sub    esp,0x8
c000cfcc:	53                   	push   ebx
c000cfcd:	50                   	push   eax
c000cfce:	e8 91 83 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000cfd3:	83 c4 10             	add    esp,0x10
c000cfd6:	90                   	nop
c000cfd7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfda:	c9                   	leave  
c000cfdb:	c3                   	ret    

c000cfdc <sendKeyToTerminal(unsigned char)>:
c000cfdc:	55                   	push   ebp
c000cfdd:	89 e5                	mov    ebp,esp
c000cfdf:	83 ec 28             	sub    esp,0x28
c000cfe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfe5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cfe8:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cfed:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cff1:	83 ec 08             	sub    esp,0x8
c000cff4:	52                   	push   edx
c000cff5:	50                   	push   eax
c000cff6:	e8 c1 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d002:	83 f8 0a             	cmp    eax,0xa
c000d005:	74 16                	je     c000d01d <sendKeyToTerminal(unsigned char)+0x41>
c000d007:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d00b:	83 f8 03             	cmp    eax,0x3
c000d00e:	74 0d                	je     c000d01d <sendKeyToTerminal(unsigned char)+0x41>
c000d010:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d014:	83 f8 1c             	cmp    eax,0x1c
c000d017:	0f 85 97 00 00 00    	jne    c000d0b4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d01d:	fa                   	cli    
c000d01e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d023:	83 c0 01             	add    eax,0x1
c000d026:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d02b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d030:	83 c0 01             	add    eax,0x1
c000d033:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d038:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d03d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d040:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d04a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d04e:	74 1f                	je     c000d06f <sendKeyToTerminal(unsigned char)+0x93>
c000d050:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d053:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d056:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d059:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d05c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d05f:	83 ec 0c             	sub    esp,0xc
c000d062:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d065:	e8 1e 90 00 00       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c000d06a:	83 c4 10             	add    esp,0x10
c000d06d:	eb db                	jmp    c000d04a <sendKeyToTerminal(unsigned char)+0x6e>
c000d06f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d074:	83 e8 01             	sub    eax,0x1
c000d077:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d07c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d081:	85 c0                	test   eax,eax
c000d083:	75 18                	jne    c000d09d <sendKeyToTerminal(unsigned char)+0xc1>
c000d085:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d08a:	85 c0                	test   eax,eax
c000d08c:	74 0f                	je     c000d09d <sendKeyToTerminal(unsigned char)+0xc1>
c000d08e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d098:	e8 f3 8a 00 00       	call   c0015b90 <schedule()>
c000d09d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0a2:	83 e8 01             	sub    eax,0x1
c000d0a5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0aa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0af:	85 c0                	test   eax,eax
c000d0b1:	75 01                	jne    c000d0b4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d0b3:	fb                   	sti    
c000d0b4:	90                   	nop
c000d0b5:	c9                   	leave  
c000d0b6:	c3                   	ret    

c000d0b7 <sendKeyboardToken(KeyboardToken)>:
c000d0b7:	55                   	push   ebp
c000d0b8:	89 e5                	mov    ebp,esp
c000d0ba:	83 ec 18             	sub    esp,0x18
c000d0bd:	e8 1f 42 00 00       	call   c00112e1 <KeUserIOReceived()>
c000d0c2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0c8:	0f b7 c0             	movzx  eax,ax
c000d0cb:	83 f2 01             	xor    edx,0x1
c000d0ce:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d0d4:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d0d9:	85 c0                	test   eax,eax
c000d0db:	74 24                	je     c000d101 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d0dd:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d0e3:	83 ec 04             	sub    esp,0x4
c000d0e6:	68 40 84 02 c0       	push   0xc0028440
c000d0eb:	83 ec 08             	sub    esp,0x8
c000d0ee:	89 e0                	mov    eax,esp
c000d0f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d0f3:	89 08                	mov    DWORD PTR [eax],ecx
c000d0f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d0f8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d0fc:	ff d2                	call   edx
c000d0fe:	83 c4 10             	add    esp,0x10
c000d101:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d105:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d108:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d10d:	0f b6 d2             	movzx  edx,dl
c000d110:	0f b6 c0             	movzx  eax,al
c000d113:	39 c2                	cmp    edx,eax
c000d115:	74 1c                	je     c000d133 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d117:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d11a:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d11f:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d124:	0f b6 c0             	movzx  eax,al
c000d127:	83 ec 0c             	sub    esp,0xc
c000d12a:	50                   	push   eax
c000d12b:	e8 e8 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d130:	83 c4 10             	add    esp,0x10
c000d133:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d136:	0f b6 c0             	movzx  eax,al
c000d139:	85 c0                	test   eax,eax
c000d13b:	0f 84 da 00 00 00    	je     c000d21b <sendKeyboardToken(KeyboardToken)+0x164>
c000d141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d144:	0f b7 c0             	movzx  eax,ax
c000d147:	3d 18 03 00 00       	cmp    eax,0x318
c000d14c:	75 06                	jne    c000d154 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d14e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d157:	0f b7 c0             	movzx  eax,ax
c000d15a:	3d 19 03 00 00       	cmp    eax,0x319
c000d15f:	75 06                	jne    c000d167 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d161:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d16a:	0f b7 c0             	movzx  eax,ax
c000d16d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d172:	75 06                	jne    c000d17a <sendKeyboardToken(KeyboardToken)+0xc3>
c000d174:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17d:	0f b7 c0             	movzx  eax,ax
c000d180:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d185:	75 06                	jne    c000d18d <sendKeyboardToken(KeyboardToken)+0xd6>
c000d187:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d198:	75 06                	jne    c000d1a0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d19a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a3:	0f b7 c0             	movzx  eax,ax
c000d1a6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1ab:	75 06                	jne    c000d1b3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1ad:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b6:	0f b7 c0             	movzx  eax,ax
c000d1b9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1be:	75 06                	jne    c000d1c6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1c0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c9:	0f b7 c0             	movzx  eax,ax
c000d1cc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1d1:	75 06                	jne    c000d1d9 <sendKeyboardToken(KeyboardToken)+0x122>
c000d1d3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1dc:	0f b7 c0             	movzx  eax,ax
c000d1df:	3d 20 03 00 00       	cmp    eax,0x320
c000d1e4:	75 06                	jne    c000d1ec <sendKeyboardToken(KeyboardToken)+0x135>
c000d1e6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d1ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ef:	0f b7 c0             	movzx  eax,ax
c000d1f2:	3d 21 03 00 00       	cmp    eax,0x321
c000d1f7:	75 06                	jne    c000d1ff <sendKeyboardToken(KeyboardToken)+0x148>
c000d1f9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d202:	0f b7 c0             	movzx  eax,ax
c000d205:	3d 22 03 00 00       	cmp    eax,0x322
c000d20a:	0f 85 f1 00 00 00    	jne    c000d301 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d210:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d216:	e9 e6 00 00 00       	jmp    c000d301 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d21b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21e:	0f b7 c0             	movzx  eax,ax
c000d221:	3d 18 03 00 00       	cmp    eax,0x318
c000d226:	75 0a                	jne    c000d232 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d228:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d22e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d235:	0f b7 c0             	movzx  eax,ax
c000d238:	3d 19 03 00 00       	cmp    eax,0x319
c000d23d:	75 0a                	jne    c000d249 <sendKeyboardToken(KeyboardToken)+0x192>
c000d23f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d245:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24c:	0f b7 c0             	movzx  eax,ax
c000d24f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d254:	75 0a                	jne    c000d260 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d256:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d25c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d263:	0f b7 c0             	movzx  eax,ax
c000d266:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d26b:	75 0a                	jne    c000d277 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d26d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d273:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27a:	0f b7 c0             	movzx  eax,ax
c000d27d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d282:	75 0a                	jne    c000d28e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d284:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d28a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d291:	0f b7 c0             	movzx  eax,ax
c000d294:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d299:	75 0a                	jne    c000d2a5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d29b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a8:	0f b7 c0             	movzx  eax,ax
c000d2ab:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2b0:	75 0a                	jne    c000d2bc <sendKeyboardToken(KeyboardToken)+0x205>
c000d2b2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bf:	0f b7 c0             	movzx  eax,ax
c000d2c2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2c7:	75 0a                	jne    c000d2d3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d2c9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d2cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d6:	0f b7 c0             	movzx  eax,ax
c000d2d9:	3d 20 03 00 00       	cmp    eax,0x320
c000d2de:	75 0a                	jne    c000d2ea <sendKeyboardToken(KeyboardToken)+0x233>
c000d2e0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d2e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ed:	0f b7 c0             	movzx  eax,ax
c000d2f0:	3d 21 03 00 00       	cmp    eax,0x321
c000d2f5:	75 0a                	jne    c000d301 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d2f7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d2fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d304:	0f b7 c0             	movzx  eax,ax
c000d307:	3d 00 02 00 00       	cmp    eax,0x200
c000d30c:	75 2f                	jne    c000d33d <sendKeyboardToken(KeyboardToken)+0x286>
c000d30e:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d313:	83 f0 01             	xor    eax,0x1
c000d316:	0f b6 c0             	movzx  eax,al
c000d319:	85 c0                	test   eax,eax
c000d31b:	74 20                	je     c000d33d <sendKeyboardToken(KeyboardToken)+0x286>
c000d31d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d322:	6a 01                	push   0x1
c000d324:	6a 00                	push   0x0
c000d326:	68 00 cf 00 c0       	push   0xc000cf00
c000d32b:	50                   	push   eax
c000d32c:	e8 13 86 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c000d331:	83 c4 10             	add    esp,0x10
c000d334:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d33b:	eb 3a                	jmp    c000d377 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d340:	0f b7 c0             	movzx  eax,ax
c000d343:	3d 01 02 00 00       	cmp    eax,0x201
c000d348:	75 2d                	jne    c000d377 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d34a:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d34f:	83 f0 01             	xor    eax,0x1
c000d352:	0f b6 c0             	movzx  eax,al
c000d355:	85 c0                	test   eax,eax
c000d357:	74 1e                	je     c000d377 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d359:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d35e:	6a 01                	push   0x1
c000d360:	6a 00                	push   0x0
c000d362:	68 6e cf 00 c0       	push   0xc000cf6e
c000d367:	50                   	push   eax
c000d368:	e8 d7 85 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c000d36d:	83 c4 10             	add    esp,0x10
c000d370:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37a:	0f b7 c0             	movzx  eax,ax
c000d37d:	3d 25 03 00 00       	cmp    eax,0x325
c000d382:	75 06                	jne    c000d38a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d384:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d38a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38d:	0f b7 c0             	movzx  eax,ax
c000d390:	3d 24 03 00 00       	cmp    eax,0x324
c000d395:	75 06                	jne    c000d39d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d397:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a0:	0f b7 c0             	movzx  eax,ax
c000d3a3:	3d 23 03 00 00       	cmp    eax,0x323
c000d3a8:	75 06                	jne    c000d3b0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3aa:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b3:	0f b7 c0             	movzx  eax,ax
c000d3b6:	3d 26 03 00 00       	cmp    eax,0x326
c000d3bb:	75 06                	jne    c000d3c3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3bd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c6:	0f b7 c0             	movzx  eax,ax
c000d3c9:	3d 27 03 00 00       	cmp    eax,0x327
c000d3ce:	75 06                	jne    c000d3d6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d3d0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d9:	0f b7 c0             	movzx  eax,ax
c000d3dc:	3d 22 03 00 00       	cmp    eax,0x322
c000d3e1:	75 06                	jne    c000d3e9 <sendKeyboardToken(KeyboardToken)+0x332>
c000d3e3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d3e9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d3ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3f0:	83 f0 01             	xor    eax,0x1
c000d3f3:	0f b6 c0             	movzx  eax,al
c000d3f6:	85 c0                	test   eax,eax
c000d3f8:	74 7c                	je     c000d476 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d3fa:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d3ff:	0f b6 c0             	movzx  eax,al
c000d402:	85 c0                	test   eax,eax
c000d404:	74 43                	je     c000d449 <sendKeyboardToken(KeyboardToken)+0x392>
c000d406:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d40a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d40e:	85 c0                	test   eax,eax
c000d410:	74 2b                	je     c000d43d <sendKeyboardToken(KeyboardToken)+0x386>
c000d412:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d418:	89 d0                	mov    eax,edx
c000d41a:	c1 e0 02             	shl    eax,0x2
c000d41d:	01 d0                	add    eax,edx
c000d41f:	d1 e0                	shl    eax,1
c000d421:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	0f b7 c0             	movzx  eax,ax
c000d42c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d42f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d434:	01 d0                	add    eax,edx
c000d436:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d43b:	eb 71                	jmp    c000d4ae <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d43d:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d447:	eb 65                	jmp    c000d4ae <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d449:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d44e:	85 c0                	test   eax,eax
c000d450:	74 18                	je     c000d46a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d452:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d457:	0f b6 c0             	movzx  eax,al
c000d45a:	83 ec 0c             	sub    esp,0xc
c000d45d:	50                   	push   eax
c000d45e:	e8 79 fb ff ff       	call   c000cfdc <sendKeyToTerminal(unsigned char)>
c000d463:	83 c4 10             	add    esp,0x10
c000d466:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d46a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d474:	eb 38                	jmp    c000d4ae <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d479:	0f b7 c0             	movzx  eax,ax
c000d47c:	3d 01 01 00 00       	cmp    eax,0x101
c000d481:	75 2b                	jne    c000d4ae <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d483:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d488:	85 c0                	test   eax,eax
c000d48a:	74 18                	je     c000d4a4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d48c:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d491:	0f b6 c0             	movzx  eax,al
c000d494:	83 ec 0c             	sub    esp,0xc
c000d497:	50                   	push   eax
c000d498:	e8 3f fb ff ff       	call   c000cfdc <sendKeyToTerminal(unsigned char)>
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4a4:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4ae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4b1:	83 f0 01             	xor    eax,0x1
c000d4b4:	0f b6 c0             	movzx  eax,al
c000d4b7:	85 c0                	test   eax,eax
c000d4b9:	74 5a                	je     c000d515 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4be:	83 f0 01             	xor    eax,0x1
c000d4c1:	0f b6 c0             	movzx  eax,al
c000d4c4:	85 c0                	test   eax,eax
c000d4c6:	74 4d                	je     c000d515 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4c8:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4cd:	83 f0 01             	xor    eax,0x1
c000d4d0:	0f b6 c0             	movzx  eax,al
c000d4d3:	85 c0                	test   eax,eax
c000d4d5:	74 3e                	je     c000d515 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4da:	0f b7 c0             	movzx  eax,ax
c000d4dd:	83 f8 1f             	cmp    eax,0x1f
c000d4e0:	76 0b                	jbe    c000d4ed <sendKeyboardToken(KeyboardToken)+0x436>
c000d4e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e5:	0f b7 c0             	movzx  eax,ax
c000d4e8:	83 f8 7e             	cmp    eax,0x7e
c000d4eb:	76 16                	jbe    c000d503 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f0:	0f b7 c0             	movzx  eax,ax
c000d4f3:	83 f8 0a             	cmp    eax,0xa
c000d4f6:	74 0b                	je     c000d503 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fb:	0f b7 c0             	movzx  eax,ax
c000d4fe:	83 f8 08             	cmp    eax,0x8
c000d501:	75 12                	jne    c000d515 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d506:	0f b6 c0             	movzx  eax,al
c000d509:	83 ec 0c             	sub    esp,0xc
c000d50c:	50                   	push   eax
c000d50d:	e8 ca fa ff ff       	call   c000cfdc <sendKeyToTerminal(unsigned char)>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d518:	83 f0 01             	xor    eax,0x1
c000d51b:	0f b6 c0             	movzx  eax,al
c000d51e:	85 c0                	test   eax,eax
c000d520:	74 5d                	je     c000d57f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d522:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d525:	83 f0 01             	xor    eax,0x1
c000d528:	0f b6 c0             	movzx  eax,al
c000d52b:	85 c0                	test   eax,eax
c000d52d:	74 50                	je     c000d57f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d52f:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d534:	0f b6 c0             	movzx  eax,al
c000d537:	85 c0                	test   eax,eax
c000d539:	74 44                	je     c000d57f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	83 f8 3f             	cmp    eax,0x3f
c000d544:	76 39                	jbe    c000d57f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	83 f8 7f             	cmp    eax,0x7f
c000d54f:	77 2e                	ja     c000d57f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d554:	88 c2                	mov    dl,al
c000d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d559:	0f b7 c0             	movzx  eax,ax
c000d55c:	83 f8 5f             	cmp    eax,0x5f
c000d55f:	76 04                	jbe    c000d565 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d561:	b0 20                	mov    al,0x20
c000d563:	eb 02                	jmp    c000d567 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d565:	b0 00                	mov    al,0x0
c000d567:	89 d1                	mov    ecx,edx
c000d569:	29 c1                	sub    ecx,eax
c000d56b:	89 c8                	mov    eax,ecx
c000d56d:	83 e8 40             	sub    eax,0x40
c000d570:	0f b6 c0             	movzx  eax,al
c000d573:	83 ec 0c             	sub    esp,0xc
c000d576:	50                   	push   eax
c000d577:	e8 60 fa ff ff       	call   c000cfdc <sendKeyToTerminal(unsigned char)>
c000d57c:	83 c4 10             	add    esp,0x10
c000d57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d582:	0f b7 c0             	movzx  eax,ax
c000d585:	3d 00 03 00 00       	cmp    eax,0x300
c000d58a:	75 12                	jne    c000d59e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d58c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d58f:	83 f0 01             	xor    eax,0x1
c000d592:	0f b6 c0             	movzx  eax,al
c000d595:	85 c0                	test   eax,eax
c000d597:	74 05                	je     c000d59e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d599:	e8 7b af ff ff       	call   c0008519 <doTerminalCycle()>
c000d59e:	90                   	nop
c000d59f:	c9                   	leave  
c000d5a0:	c3                   	ret    

c000d5a1 <clearInternalKeybuffer(VgaText*)>:
c000d5a1:	55                   	push   ebp
c000d5a2:	89 e5                	mov    ebp,esp
c000d5a4:	83 ec 08             	sub    esp,0x8
c000d5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5aa:	05 02 01 00 00       	add    eax,0x102
c000d5af:	83 ec 0c             	sub    esp,0xc
c000d5b2:	50                   	push   eax
c000d5b3:	e8 c8 2f ff ff       	call   c0000580 <strlen>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5be:	81 c2 02 01 00 00    	add    edx,0x102
c000d5c4:	83 ec 04             	sub    esp,0x4
c000d5c7:	50                   	push   eax
c000d5c8:	6a 00                	push   0x0
c000d5ca:	52                   	push   edx
c000d5cb:	e8 20 2f ff ff       	call   c00004f0 <memset>
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	90                   	nop
c000d5d4:	c9                   	leave  
c000d5d5:	c3                   	ret    

c000d5d6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d5d6:	55                   	push   ebp
c000d5d7:	89 e5                	mov    ebp,esp
c000d5d9:	83 ec 18             	sub    esp,0x18
c000d5dc:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d5e1:	85 c0                	test   eax,eax
c000d5e3:	74 2a                	je     c000d60f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d5e5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d5eb:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d5f1:	83 ec 04             	sub    esp,0x4
c000d5f4:	68 40 84 02 c0       	push   0xc0028440
c000d5f9:	83 ec 08             	sub    esp,0x8
c000d5fc:	89 e0                	mov    eax,esp
c000d5fe:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d601:	89 08                	mov    DWORD PTR [eax],ecx
c000d603:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d606:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d60a:	ff d2                	call   edx
c000d60c:	83 c4 10             	add    esp,0x10
c000d60f:	fb                   	sti    
c000d610:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d617:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d61b:	0f 84 0d 01 00 00    	je     c000d72e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d624:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d62a:	0f be c0             	movsx  eax,al
c000d62d:	85 c0                	test   eax,eax
c000d62f:	75 2c                	jne    c000d65d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d631:	fa                   	cli    
c000d632:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d637:	83 c0 01             	add    eax,0x1
c000d63a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d63f:	e8 4c 85 00 00       	call   c0015b90 <schedule()>
c000d644:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d649:	83 e8 01             	sub    eax,0x1
c000d64c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d651:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d656:	85 c0                	test   eax,eax
c000d658:	75 c7                	jne    c000d621 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d65a:	fb                   	sti    
c000d65b:	eb c4                	jmp    c000d621 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d65d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d660:	8d 50 01             	lea    edx,[eax+0x1]
c000d663:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d666:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d669:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d66f:	88 10                	mov    BYTE PTR [eax],dl
c000d671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d674:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d67a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d67d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d681:	83 f8 03             	cmp    eax,0x3
c000d684:	75 1e                	jne    c000d6a4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d686:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d68b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d68d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d690:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d696:	83 ec 08             	sub    esp,0x8
c000d699:	6a 02                	push   0x2
c000d69b:	50                   	push   eax
c000d69c:	e8 8e 40 00 00       	call   c001172f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6a8:	83 f8 1c             	cmp    eax,0x1c
c000d6ab:	75 1e                	jne    c000d6cb <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6b7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6bd:	83 ec 08             	sub    esp,0x8
c000d6c0:	6a 09                	push   0x9
c000d6c2:	50                   	push   eax
c000d6c3:	e8 67 40 00 00       	call   c001172f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6c8:	83 c4 10             	add    esp,0x10
c000d6cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ce:	05 02 01 00 00       	add    eax,0x102
c000d6d3:	83 ec 0c             	sub    esp,0xc
c000d6d6:	50                   	push   eax
c000d6d7:	e8 a4 2e ff ff       	call   c0000580 <strlen>
c000d6dc:	83 c4 10             	add    esp,0x10
c000d6df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6e2:	81 c2 02 01 00 00    	add    edx,0x102
c000d6e8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d6eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6ee:	81 c2 02 01 00 00    	add    edx,0x102
c000d6f4:	83 ec 04             	sub    esp,0x4
c000d6f7:	50                   	push   eax
c000d6f8:	51                   	push   ecx
c000d6f9:	52                   	push   edx
c000d6fa:	e8 d1 2c ff ff       	call   c00003d0 <memmove>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d706:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d70a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d70e:	83 f8 0a             	cmp    eax,0xa
c000d711:	74 16                	je     c000d729 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d713:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d717:	83 f8 03             	cmp    eax,0x3
c000d71a:	74 0d                	je     c000d729 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d71c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d720:	83 f8 1c             	cmp    eax,0x1c
c000d723:	0f 85 ee fe ff ff    	jne    c000d617 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d729:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d72c:	eb 03                	jmp    c000d731 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d72e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d731:	c9                   	leave  
c000d732:	c3                   	ret    
c000d733:	90                   	nop

c000d734 <Keyboard::Keyboard(char const*)>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73b:	83 ec 08             	sub    esp,0x8
c000d73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d742:	50                   	push   eax
c000d743:	e8 44 f1 ff ff       	call   c000c88c <Device::Device(char const*)>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	ba 3c 17 02 c0       	mov    edx,0xc002173c
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d764:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d76b:	90                   	nop
c000d76c:	83 c4 0c             	add    esp,0xc
c000d76f:	c3                   	ret    

c000d770 <Keyboard::~Keyboard()>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	ba 3c 17 02 c0       	mov    edx,0xc002173c
c000d778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77c:	89 10                	mov    DWORD PTR [eax],edx
c000d77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	50                   	push   eax
c000d786:	e8 6b ee ff ff       	call   c000c5f6 <Device::~Device()>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	90                   	nop
c000d78f:	83 c4 0c             	add    esp,0xc
c000d792:	c3                   	ret    
c000d793:	90                   	nop

c000d794 <Keyboard::~Keyboard()>:
c000d794:	83 ec 0c             	sub    esp,0xc
c000d797:	83 ec 0c             	sub    esp,0xc
c000d79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79e:	e8 cd ff ff ff       	call   c000d770 <Keyboard::~Keyboard()>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	83 ec 08             	sub    esp,0x8
c000d7a9:	68 5c 01 00 00       	push   0x15c
c000d7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b2:	e8 55 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	83 c4 0c             	add    esp,0xc
c000d7bd:	c3                   	ret    

c000d7be <LogicalDisk::close(int, int, void*)>:
c000d7be:	83 c8 ff             	or     eax,0xffffffff
c000d7c1:	c3                   	ret    

c000d7c2 <LogicalDisk::~LogicalDisk()>:
c000d7c2:	83 ec 0c             	sub    esp,0xc
c000d7c5:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	89 10                	mov    DWORD PTR [eax],edx
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	83 ec 0c             	sub    esp,0xc
c000d7d7:	50                   	push   eax
c000d7d8:	e8 19 ee ff ff       	call   c000c5f6 <Device::~Device()>
c000d7dd:	83 c4 10             	add    esp,0x10
c000d7e0:	90                   	nop
c000d7e1:	83 c4 0c             	add    esp,0xc
c000d7e4:	c3                   	ret    
c000d7e5:	90                   	nop

c000d7e6 <LogicalDisk::~LogicalDisk()>:
c000d7e6:	83 ec 0c             	sub    esp,0xc
c000d7e9:	83 ec 0c             	sub    esp,0xc
c000d7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f0:	e8 cd ff ff ff       	call   c000d7c2 <LogicalDisk::~LogicalDisk()>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 ec 08             	sub    esp,0x8
c000d7fb:	68 78 01 00 00       	push   0x178
c000d800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d804:	e8 03 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d809:	83 c4 10             	add    esp,0x10
c000d80c:	83 c4 0c             	add    esp,0xc
c000d80f:	c3                   	ret    

c000d810 <LogicalDisk::open(int, int, void*)>:
c000d810:	83 ec 18             	sub    esp,0x18
c000d813:	68 68 17 02 c0       	push   0xc0021768
c000d818:	e8 74 3a 00 00       	call   c0011291 <KePanic(char const*)>
c000d81d:	83 c8 ff             	or     eax,0xffffffff
c000d820:	83 c4 1c             	add    esp,0x1c
c000d823:	c3                   	ret    

c000d824 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d824:	53                   	push   ebx
c000d825:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d82d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d831:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d837:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d83d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d843:	77 10                	ja     c000d855 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d845:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d84b:	89 d3                	mov    ebx,edx
c000d84d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d853:	72 05                	jb     c000d85a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d855:	83 c8 ff             	or     eax,0xffffffff
c000d858:	89 c2                	mov    edx,eax
c000d85a:	5b                   	pop    ebx
c000d85b:	c3                   	ret    

c000d85c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d85c:	56                   	push   esi
c000d85d:	83 c8 ff             	or     eax,0xffffffff
c000d860:	53                   	push   ebx
c000d861:	89 c2                	mov    edx,eax
c000d863:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d867:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d86b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d86f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d875:	77 27                	ja     c000d89e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d877:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d87d:	89 d8                	mov    eax,ebx
c000d87f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d885:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d88a:	89 c2                	mov    edx,eax
c000d88c:	73 10                	jae    c000d89e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d88e:	89 c8                	mov    eax,ecx
c000d890:	89 da                	mov    edx,ebx
c000d892:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d898:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d89e:	5b                   	pop    ebx
c000d89f:	5e                   	pop    esi
c000d8a0:	c3                   	ret    
c000d8a1:	90                   	nop

c000d8a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8a2:	83 ec 1c             	sub    esp,0x1c
c000d8a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c8:	83 ec 08             	sub    esp,0x8
c000d8cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8cf:	50                   	push   eax
c000d8d0:	e8 b7 ef ff ff       	call   c000c88c <Device::Device(char const*)>
c000d8d5:	83 c4 10             	add    esp,0x10
c000d8d8:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c000d8dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e1:	89 10                	mov    DWORD PTR [eax],edx
c000d8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d908:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d912:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d91a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d91e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d924:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d92a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d92e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d931:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d935:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d93b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d945:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d949:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d953:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d95d:	90                   	nop
c000d95e:	83 c4 1c             	add    esp,0x1c
c000d961:	c3                   	ret    

c000d962 <LogicalDisk::assignDriveLetter()>:
c000d962:	55                   	push   ebp
c000d963:	57                   	push   edi
c000d964:	56                   	push   esi
c000d965:	53                   	push   ebx
c000d966:	83 ec 14             	sub    esp,0x14
c000d969:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d96d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d973:	b0 41                	mov    al,0x41
c000d975:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d97b:	84 d2                	test   dl,dl
c000d97d:	75 02                	jne    c000d981 <LogicalDisk::assignDriveLetter()+0x1f>
c000d97f:	b0 43                	mov    al,0x43
c000d981:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d987:	0f b6 ca             	movzx  ecx,dl
c000d98a:	0f be e8             	movsx  ebp,al
c000d98d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d991:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d995:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d99b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d99f:	3c 43                	cmp    al,0x43
c000d9a1:	75 10                	jne    c000d9b3 <LogicalDisk::assignDriveLetter()+0x51>
c000d9a3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9aa:	75 5a                	jne    c000da06 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9b1:	75 53                	jne    c000da06 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9b3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9b6:	ba 01 00 00 00       	mov    edx,0x1
c000d9bb:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9be:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9c1:	d3 e2                	shl    edx,cl
c000d9c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9c7:	89 d7                	mov    edi,edx
c000d9c9:	89 d6                	mov    esi,edx
c000d9cb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d9cf:	c1 ff 1f             	sar    edi,0x1f
c000d9d2:	21 f9                	and    ecx,edi
c000d9d4:	09 d1                	or     ecx,edx
c000d9d6:	75 2e                	jne    c000da06 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9dc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d9e0:	09 f2                	or     edx,esi
c000d9e2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d9e5:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d9eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d9ef:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d9f5:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d9fc:	09 fa                	or     edx,edi
c000d9fe:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da04:	eb 0d                	jmp    c000da13 <LogicalDisk::assignDriveLetter()+0xb1>
c000da06:	8d 50 01             	lea    edx,[eax+0x1]
c000da09:	45                   	inc    ebp
c000da0a:	80 fa 5b             	cmp    dl,0x5b
c000da0d:	88 d0                	mov    al,dl
c000da0f:	75 8e                	jne    c000d99f <LogicalDisk::assignDriveLetter()+0x3d>
c000da11:	31 c0                	xor    eax,eax
c000da13:	83 c4 14             	add    esp,0x14
c000da16:	5b                   	pop    ebx
c000da17:	5e                   	pop    esi
c000da18:	5f                   	pop    edi
c000da19:	5d                   	pop    ebp
c000da1a:	c3                   	ret    
c000da1b:	90                   	nop

c000da1c <LogicalDisk::mount()>:
c000da1c:	56                   	push   esi
c000da1d:	53                   	push   ebx
c000da1e:	53                   	push   ebx
c000da1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da23:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da29:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da33:	85 db                	test   ebx,ebx
c000da35:	74 27                	je     c000da5e <LogicalDisk::mount()+0x42>
c000da37:	51                   	push   ecx
c000da38:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da41:	83 e8 41             	sub    eax,0x41
c000da44:	50                   	push   eax
c000da45:	56                   	push   esi
c000da46:	53                   	push   ebx
c000da47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	84 c0                	test   al,al
c000da4f:	74 08                	je     c000da59 <LogicalDisk::mount()+0x3d>
c000da51:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da57:	eb 07                	jmp    c000da60 <LogicalDisk::mount()+0x44>
c000da59:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da5c:	eb d5                	jmp    c000da33 <LogicalDisk::mount()+0x17>
c000da5e:	31 c0                	xor    eax,eax
c000da60:	5a                   	pop    edx
c000da61:	5b                   	pop    ebx
c000da62:	5e                   	pop    esi
c000da63:	c3                   	ret    

c000da64 <LogicalDisk::unmount()>:
c000da64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da68:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da72:	c3                   	ret    
c000da73:	90                   	nop

c000da74 <LogicalDisk::eject()>:
c000da74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da78:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000da7e:	8b 10                	mov    edx,DWORD PTR [eax]
c000da80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000da84:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000da87:	90                   	nop

c000da88 <LogicalDisk::unassignDriveLetter()>:
c000da88:	57                   	push   edi
c000da89:	56                   	push   esi
c000da8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da8e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000da95:	85 c9                	test   ecx,ecx
c000da97:	75 0f                	jne    c000daa8 <LogicalDisk::unassignDriveLetter()+0x20>
c000da99:	c7 44 24 0c 8c 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc002178c
c000daa1:	5e                   	pop    esi
c000daa2:	5f                   	pop    edi
c000daa3:	e9 e9 37 00 00       	jmp    c0011291 <KePanic(char const*)>
c000daa8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000daaf:	83 e9 41             	sub    ecx,0x41
c000dab2:	b8 01 00 00 00       	mov    eax,0x1
c000dab7:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000dac2:	d3 e0                	shl    eax,cl
c000dac4:	89 c7                	mov    edi,eax
c000dac6:	f7 d0                	not    eax
c000dac8:	c1 ff 1f             	sar    edi,0x1f
c000dacb:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000dad1:	89 fe                	mov    esi,edi
c000dad3:	f7 d6                	not    esi
c000dad5:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000dadb:	5e                   	pop    esi
c000dadc:	5f                   	pop    edi
c000dadd:	c3                   	ret    

c000dade <LogicalDisk::read(unsigned long long, int, void*)>:
c000dade:	57                   	push   edi
c000dadf:	56                   	push   esi
c000dae0:	53                   	push   ebx
c000dae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dae9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000daed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000daf1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000daf7:	77 41                	ja     c000db3a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000daf9:	99                   	cdq    
c000dafa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db00:	01 c8                	add    eax,ecx
c000db02:	11 da                	adc    edx,ebx
c000db04:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db0a:	19 d7                	sbb    edi,edx
c000db0c:	72 33                	jb     c000db41 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db0e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db14:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db1e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db22:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db32:	5b                   	pop    ebx
c000db33:	5e                   	pop    esi
c000db34:	5f                   	pop    edi
c000db35:	e9 d4 0a 00 00       	jmp    c000e60e <VCache::read(unsigned long long, int, void*)>
c000db3a:	b8 05 00 00 00       	mov    eax,0x5
c000db3f:	eb 05                	jmp    c000db46 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db41:	b8 07 00 00 00       	mov    eax,0x7
c000db46:	5b                   	pop    ebx
c000db47:	5e                   	pop    esi
c000db48:	5f                   	pop    edi
c000db49:	c3                   	ret    

c000db4a <LogicalDisk::write(unsigned long long, int, void*)>:
c000db4a:	57                   	push   edi
c000db4b:	56                   	push   esi
c000db4c:	53                   	push   ebx
c000db4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db63:	77 41                	ja     c000dba6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db65:	99                   	cdq    
c000db66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db6c:	01 c8                	add    eax,ecx
c000db6e:	11 da                	adc    edx,ebx
c000db70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db76:	19 d7                	sbb    edi,edx
c000db78:	72 33                	jb     c000dbad <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000db7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db9e:	5b                   	pop    ebx
c000db9f:	5e                   	pop    esi
c000dba0:	5f                   	pop    edi
c000dba1:	e9 6e 09 00 00       	jmp    c000e514 <VCache::write(unsigned long long, int, void*)>
c000dba6:	b8 05 00 00 00       	mov    eax,0x5
c000dbab:	eb 05                	jmp    c000dbb2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbad:	b8 07 00 00 00       	mov    eax,0x7
c000dbb2:	5b                   	pop    ebx
c000dbb3:	5e                   	pop    esi
c000dbb4:	5f                   	pop    edi
c000dbb5:	c3                   	ret    
c000dbb6:	66 90                	xchg   ax,ax

c000dbb8 <Mouse::Mouse(char const*)>:
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbf:	83 ec 08             	sub    esp,0x8
c000dbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc6:	50                   	push   eax
c000dbc7:	e8 c0 ec ff ff       	call   c000c88c <Device::Device(char const*)>
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	ba e0 17 02 c0       	mov    edx,0xc00217e0
c000dbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd8:	89 10                	mov    DWORD PTR [eax],edx
c000dbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbde:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dbe8:	90                   	nop
c000dbe9:	83 c4 0c             	add    esp,0xc
c000dbec:	c3                   	ret    
c000dbed:	90                   	nop
c000dbee:	66 90                	xchg   ax,ax

c000dbf0 <Mouse::~Mouse()>:
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	ba e0 17 02 c0       	mov    edx,0xc00217e0
c000dbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfc:	89 10                	mov    DWORD PTR [eax],edx
c000dbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc02:	83 ec 0c             	sub    esp,0xc
c000dc05:	50                   	push   eax
c000dc06:	e8 eb e9 ff ff       	call   c000c5f6 <Device::~Device()>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	90                   	nop
c000dc0f:	83 c4 0c             	add    esp,0xc
c000dc12:	c3                   	ret    
c000dc13:	90                   	nop

c000dc14 <Mouse::~Mouse()>:
c000dc14:	83 ec 0c             	sub    esp,0xc
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1e:	e8 cd ff ff ff       	call   c000dbf0 <Mouse::~Mouse()>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	83 ec 08             	sub    esp,0x8
c000dc29:	68 58 01 00 00       	push   0x158
c000dc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc32:	e8 d5 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	83 c4 0c             	add    esp,0xc
c000dc3d:	c3                   	ret    

c000dc3e <NIC::getMAC()>:
c000dc3e:	31 c0                	xor    eax,eax
c000dc40:	31 d2                	xor    edx,edx
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <NIC::write(int, unsigned char*, int*)>:
c000dc44:	b8 01 00 00 00       	mov    eax,0x1
c000dc49:	c3                   	ret    

c000dc4a <NIC::NIC(char const*)>:
c000dc4a:	83 ec 0c             	sub    esp,0xc
c000dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc51:	83 ec 08             	sub    esp,0x8
c000dc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc58:	50                   	push   eax
c000dc59:	e8 2e ec ff ff       	call   c000c88c <Device::Device(char const*)>
c000dc5e:	83 c4 10             	add    esp,0x10
c000dc61:	ba 0c 18 02 c0       	mov    edx,0xc002180c
c000dc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc6a:	89 10                	mov    DWORD PTR [eax],edx
c000dc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc70:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dc7a:	90                   	nop
c000dc7b:	83 c4 0c             	add    esp,0xc
c000dc7e:	c3                   	ret    
c000dc7f:	90                   	nop

c000dc80 <NIC::~NIC()>:
c000dc80:	83 ec 0c             	sub    esp,0xc
c000dc83:	ba 0c 18 02 c0       	mov    edx,0xc002180c
c000dc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc8c:	89 10                	mov    DWORD PTR [eax],edx
c000dc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc92:	83 ec 0c             	sub    esp,0xc
c000dc95:	50                   	push   eax
c000dc96:	e8 5b e9 ff ff       	call   c000c5f6 <Device::~Device()>
c000dc9b:	83 c4 10             	add    esp,0x10
c000dc9e:	90                   	nop
c000dc9f:	83 c4 0c             	add    esp,0xc
c000dca2:	c3                   	ret    
c000dca3:	90                   	nop

c000dca4 <NIC::~NIC()>:
c000dca4:	83 ec 0c             	sub    esp,0xc
c000dca7:	83 ec 0c             	sub    esp,0xc
c000dcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcae:	e8 cd ff ff ff       	call   c000dc80 <NIC::~NIC()>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	83 ec 08             	sub    esp,0x8
c000dcb9:	68 58 01 00 00       	push   0x158
c000dcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc2:	e8 45 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dcc7:	83 c4 10             	add    esp,0x10
c000dcca:	83 c4 0c             	add    esp,0xc
c000dccd:	c3                   	ret    

c000dcce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dcce:	55                   	push   ebp
c000dccf:	57                   	push   edi
c000dcd0:	56                   	push   esi
c000dcd1:	53                   	push   ebx
c000dcd2:	81 ec 28 01 00 00    	sub    esp,0x128
c000dcd8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dcdf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dce6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dced:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dcf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcfc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd03:	e8 80 ec ff ff       	call   c000c988 <Device::getName()>
c000dd08:	5a                   	pop    edx
c000dd09:	59                   	pop    ecx
c000dd0a:	50                   	push   eax
c000dd0b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd0f:	55                   	push   ebp
c000dd10:	e8 3b 29 ff ff       	call   c0000650 <strcpy>
c000dd15:	5b                   	pop    ebx
c000dd16:	58                   	pop    eax
c000dd17:	68 38 18 02 c0       	push   0xc0021838
c000dd1c:	55                   	push   ebp
c000dd1d:	e8 4e 2b ff ff       	call   c0000870 <strcat>
c000dd22:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd29:	e8 a5 9d ff ff       	call   c0007ad3 <malloc>
c000dd2e:	83 c4 0c             	add    esp,0xc
c000dd31:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd39:	89 c3                	mov    ebx,eax
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd44:	55                   	push   ebp
c000dd45:	50                   	push   eax
c000dd46:	e8 57 fb ff ff       	call   c000d8a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd4b:	83 c4 14             	add    esp,0x14
c000dd4e:	53                   	push   ebx
c000dd4f:	e8 0e fc ff ff       	call   c000d962 <LogicalDisk::assignDriveLetter()>
c000dd54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd57:	e8 c0 fc ff ff       	call   c000da1c <LogicalDisk::mount()>
c000dd5c:	58                   	pop    eax
c000dd5d:	5a                   	pop    edx
c000dd5e:	53                   	push   ebx
c000dd5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd66:	e8 89 e9 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c000dd6b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd71:	5b                   	pop    ebx
c000dd72:	5e                   	pop    esi
c000dd73:	5f                   	pop    edi
c000dd74:	5d                   	pop    ebp
c000dd75:	c3                   	ret    

c000dd76 <createPartitionsForDisk(PhysicalDisk*)>:
c000dd76:	55                   	push   ebp
c000dd77:	57                   	push   edi
c000dd78:	56                   	push   esi
c000dd79:	53                   	push   ebx
c000dd7a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dd80:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dd87:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dd8d:	3d 00 02 00 00       	cmp    eax,0x200
c000dd92:	74 27                	je     c000ddbb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dd94:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dd9a:	83 ec 10             	sub    esp,0x10
c000dd9d:	99                   	cdq    
c000dd9e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dda4:	52                   	push   edx
c000dda5:	50                   	push   eax
c000dda6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddaa:	c1 e6 0a             	shl    esi,0xa
c000ddad:	89 fd                	mov    ebp,edi
c000ddaf:	55                   	push   ebp
c000ddb0:	56                   	push   esi
c000ddb1:	e8 9a 14 01 00       	call   c001f250 <__udivdi3>
c000ddb6:	e9 b9 00 00 00       	jmp    c000de74 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddbb:	83 ec 0c             	sub    esp,0xc
c000ddbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddc0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ddc4:	56                   	push   esi
c000ddc5:	6a 01                	push   0x1
c000ddc7:	6a 00                	push   0x0
c000ddc9:	6a 00                	push   0x0
c000ddcb:	53                   	push   ebx
c000ddcc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ddcf:	83 c4 20             	add    esp,0x20
c000ddd2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ddda:	75 0a                	jne    c000dde6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dddc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dde4:	74 2c                	je     c000de12 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dde6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ddec:	83 ec 10             	sub    esp,0x10
c000ddef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ddf5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ddfb:	89 f7                	mov    edi,esi
c000ddfd:	c1 ff 1f             	sar    edi,0x1f
c000de00:	57                   	push   edi
c000de01:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de05:	56                   	push   esi
c000de06:	c1 e0 0a             	shl    eax,0xa
c000de09:	52                   	push   edx
c000de0a:	50                   	push   eax
c000de0b:	e8 40 14 01 00       	call   c001f250 <__udivdi3>
c000de10:	eb 62                	jmp    c000de74 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de12:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de19:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de27:	89 cf                	mov    edi,ecx
c000de29:	83 e2 7f             	and    edx,0x7f
c000de2c:	83 e7 7f             	and    edi,0x7f
c000de2f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de32:	83 e0 7f             	and    eax,0x7f
c000de35:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de38:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de3f:	83 e0 7f             	and    eax,0x7f
c000de42:	01 d0                	add    eax,edx
c000de44:	84 c0                	test   al,al
c000de46:	89 c5                	mov    ebp,eax
c000de48:	74 41                	je     c000de8b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de4a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de50:	83 ec 10             	sub    esp,0x10
c000de53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de5f:	89 f7                	mov    edi,esi
c000de61:	c1 ff 1f             	sar    edi,0x1f
c000de64:	57                   	push   edi
c000de65:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de69:	56                   	push   esi
c000de6a:	c1 e0 0a             	shl    eax,0xa
c000de6d:	52                   	push   edx
c000de6e:	50                   	push   eax
c000de6f:	e8 dc 13 01 00       	call   c001f250 <__udivdi3>
c000de74:	83 c4 14             	add    esp,0x14
c000de77:	52                   	push   edx
c000de78:	50                   	push   eax
c000de79:	6a 00                	push   0x0
c000de7b:	6a 00                	push   0x0
c000de7d:	53                   	push   ebx
c000de7e:	e8 4b fe ff ff       	call   c000dcce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000de83:	83 c4 20             	add    esp,0x20
c000de86:	e9 73 01 00 00       	jmp    c000dffe <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000de8b:	89 f0                	mov    eax,esi
c000de8d:	31 c9                	xor    ecx,ecx
c000de8f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000de96:	75 02                	jne    c000de9a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000de98:	89 cd                	mov    ebp,ecx
c000de9a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dea2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dea9:	83 c0 10             	add    eax,0x10
c000deac:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000deb4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000debb:	c1 e2 08             	shl    edx,0x8
c000debe:	c1 e6 10             	shl    esi,0x10
c000dec1:	09 f2                	or     edx,esi
c000dec3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000deca:	09 f2                	or     edx,esi
c000decc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ded3:	c1 e6 18             	shl    esi,0x18
c000ded6:	09 f2                	or     edx,esi
c000ded8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000dedf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000dee3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000deea:	c1 e6 10             	shl    esi,0x10
c000deed:	c1 e2 08             	shl    edx,0x8
c000def0:	09 f2                	or     edx,esi
c000def2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000def9:	09 f2                	or     edx,esi
c000defb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df02:	c1 e6 18             	shl    esi,0x18
c000df05:	09 f2                	or     edx,esi
c000df07:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df0b:	41                   	inc    ecx
c000df0c:	83 f9 04             	cmp    ecx,0x4
c000df0f:	0f 85 7a ff ff ff    	jne    c000de8f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df19:	83 f0 01             	xor    eax,0x1
c000df1c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df20:	75 4f                	jne    c000df71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df26:	83 f0 01             	xor    eax,0x1
c000df29:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df2d:	75 42                	jne    c000df71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df2f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df35:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df3d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df4b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df51:	89 f7                	mov    edi,esi
c000df53:	c1 ff 1f             	sar    edi,0x1f
c000df56:	57                   	push   edi
c000df57:	56                   	push   esi
c000df58:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df5c:	52                   	push   edx
c000df5d:	c1 e0 0a             	shl    eax,0xa
c000df60:	50                   	push   eax
c000df61:	e8 ea 12 01 00       	call   c001f250 <__udivdi3>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df71:	89 e8                	mov    eax,ebp
c000df73:	0f b6 e8             	movzx  ebp,al
c000df76:	85 ed                	test   ebp,ebp
c000df78:	74 50                	je     c000dfca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000df7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df96:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfa6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfaa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfb2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfb6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfba:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dfbe:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dfc2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dfc6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dfca:	31 ed                	xor    ebp,ebp
c000dfcc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfd0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfd4:	89 f8                	mov    eax,edi
c000dfd6:	09 f0                	or     eax,esi
c000dfd8:	74 1e                	je     c000dff8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dfda:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfde:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfe2:	89 d1                	mov    ecx,edx
c000dfe4:	09 c1                	or     ecx,eax
c000dfe6:	74 10                	je     c000dff8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	57                   	push   edi
c000dfec:	56                   	push   esi
c000dfed:	52                   	push   edx
c000dfee:	50                   	push   eax
c000dfef:	53                   	push   ebx
c000dff0:	e8 d9 fc ff ff       	call   c000dcce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dff5:	83 c4 20             	add    esp,0x20
c000dff8:	45                   	inc    ebp
c000dff9:	83 fd 04             	cmp    ebp,0x4
c000dffc:	75 ce                	jne    c000dfcc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000dffe:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e004:	5b                   	pop    ebx
c000e005:	5e                   	pop    esi
c000e006:	5f                   	pop    edi
c000e007:	5d                   	pop    ebp
c000e008:	c3                   	ret    
c000e009:	66 90                	xchg   ax,ax
c000e00b:	90                   	nop

c000e00c <Serial::Serial(char const*)>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e013:	83 ec 08             	sub    esp,0x8
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	50                   	push   eax
c000e01b:	e8 6c e8 ff ff       	call   c000c88c <Device::Device(char const*)>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	ba 4c 18 02 c0       	mov    edx,0xc002184c
c000e028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02c:	89 10                	mov    DWORD PTR [eax],edx
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e03c:	90                   	nop
c000e03d:	83 c4 0c             	add    esp,0xc
c000e040:	c3                   	ret    
c000e041:	90                   	nop
c000e042:	66 90                	xchg   ax,ax

c000e044 <Serial::~Serial()>:
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	ba 4c 18 02 c0       	mov    edx,0xc002184c
c000e04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e050:	89 10                	mov    DWORD PTR [eax],edx
c000e052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	50                   	push   eax
c000e05a:	e8 97 e5 ff ff       	call   c000c5f6 <Device::~Device()>
c000e05f:	83 c4 10             	add    esp,0x10
c000e062:	90                   	nop
c000e063:	83 c4 0c             	add    esp,0xc
c000e066:	c3                   	ret    
c000e067:	90                   	nop

c000e068 <Serial::~Serial()>:
c000e068:	83 ec 0c             	sub    esp,0xc
c000e06b:	83 ec 0c             	sub    esp,0xc
c000e06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e072:	e8 cd ff ff ff       	call   c000e044 <Serial::~Serial()>
c000e077:	83 c4 10             	add    esp,0x10
c000e07a:	83 ec 08             	sub    esp,0x8
c000e07d:	68 58 01 00 00       	push   0x158
c000e082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e086:	e8 81 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e08b:	83 c4 10             	add    esp,0x10
c000e08e:	83 c4 0c             	add    esp,0xc
c000e091:	c3                   	ret    
c000e092:	66 90                	xchg   ax,ax

c000e094 <Timer::Timer(char const*)>:
c000e094:	83 ec 0c             	sub    esp,0xc
c000e097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09b:	83 ec 08             	sub    esp,0x8
c000e09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a2:	50                   	push   eax
c000e0a3:	e8 e4 e7 ff ff       	call   c000c88c <Device::Device(char const*)>
c000e0a8:	83 c4 10             	add    esp,0x10
c000e0ab:	ba 90 18 02 c0       	mov    edx,0xc0021890
c000e0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b4:	89 10                	mov    DWORD PTR [eax],edx
c000e0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0c4:	90                   	nop
c000e0c5:	83 c4 0c             	add    esp,0xc
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop
c000e0ca:	66 90                	xchg   ax,ax

c000e0cc <Timer::~Timer()>:
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	ba 90 18 02 c0       	mov    edx,0xc0021890
c000e0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d8:	89 10                	mov    DWORD PTR [eax],edx
c000e0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0de:	83 ec 0c             	sub    esp,0xc
c000e0e1:	50                   	push   eax
c000e0e2:	e8 0f e5 ff ff       	call   c000c5f6 <Device::~Device()>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	90                   	nop
c000e0eb:	83 c4 0c             	add    esp,0xc
c000e0ee:	c3                   	ret    
c000e0ef:	90                   	nop

c000e0f0 <Timer::~Timer()>:
c000e0f0:	83 ec 0c             	sub    esp,0xc
c000e0f3:	83 ec 0c             	sub    esp,0xc
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 cd ff ff ff       	call   c000e0cc <Timer::~Timer()>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	83 ec 08             	sub    esp,0x8
c000e105:	68 5c 01 00 00       	push   0x15c
c000e10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10e:	e8 f9 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e113:	83 c4 10             	add    esp,0x10
c000e116:	83 c4 0c             	add    esp,0xc
c000e119:	c3                   	ret    

c000e11a <Timer::read()>:
c000e11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e124:	c3                   	ret    

c000e125 <setupTimer(int)>:
c000e125:	53                   	push   ebx
c000e126:	83 ec 14             	sub    esp,0x14
c000e129:	68 5c 01 00 00       	push   0x15c
c000e12e:	e8 a0 99 ff ff       	call   c0007ad3 <malloc>
c000e133:	89 04 24             	mov    DWORD PTR [esp],eax
c000e136:	89 c3                	mov    ebx,eax
c000e138:	e8 77 09 01 00       	call   c001eab4 <PIT::PIT()>
c000e13d:	58                   	pop    eax
c000e13e:	5a                   	pop    edx
c000e13f:	53                   	push   ebx
c000e140:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e146:	e8 a9 e5 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c000e14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e14d:	6a 00                	push   0x0
c000e14f:	6a 00                	push   0x0
c000e151:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e155:	53                   	push   ebx
c000e156:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e159:	83 c4 28             	add    esp,0x28
c000e15c:	89 d8                	mov    eax,ebx
c000e15e:	5b                   	pop    ebx
c000e15f:	c3                   	ret    

c000e160 <timerHandler(unsigned int)>:
c000e160:	56                   	push   esi
c000e161:	53                   	push   ebx
c000e162:	51                   	push   ecx
c000e163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e167:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e16d:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e174:	0f 84 4a 01 00 00    	je     c000e2c4 <timerHandler(unsigned int)+0x164>
c000e17a:	fa                   	cli    
c000e17b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e181:	83 ec 0c             	sub    esp,0xc
c000e184:	68 d8 96 02 c0       	push   0xc00296d8
c000e189:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e18f:	e8 8c 16 01 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e194:	83 c4 10             	add    esp,0x10
c000e197:	84 c0                	test   al,al
c000e199:	0f 85 a1 00 00 00    	jne    c000e240 <timerHandler(unsigned int)+0xe0>
c000e19f:	83 ec 0c             	sub    esp,0xc
c000e1a2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1a7:	e8 90 16 01 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1ac:	83 c4 10             	add    esp,0x10
c000e1af:	89 c6                	mov    esi,eax
c000e1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	68 d8 96 02 c0       	push   0xc00296d8
c000e1bc:	e8 7b 16 01 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1c1:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e1c8:	89 c3                	mov    ebx,eax
c000e1ca:	e8 75 16 01 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e1db:	77 23                	ja     c000e200 <timerHandler(unsigned int)+0xa0>
c000e1dd:	83 ec 0c             	sub    esp,0xc
c000e1e0:	53                   	push   ebx
c000e1e1:	e8 a2 7e 00 00       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	39 de                	cmp    esi,ebx
c000e1eb:	75 27                	jne    c000e214 <timerHandler(unsigned int)+0xb4>
c000e1ed:	83 ec 0c             	sub    esp,0xc
c000e1f0:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f5:	e8 42 16 01 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1fa:	89 c6                	mov    esi,eax
c000e1fc:	eb 12                	jmp    c000e210 <timerHandler(unsigned int)+0xb0>
c000e1fe:	66 90                	xchg   ax,ax
c000e200:	52                   	push   edx
c000e201:	52                   	push   edx
c000e202:	53                   	push   ebx
c000e203:	68 d8 96 02 c0       	push   0xc00296d8
c000e208:	e8 f3 16 01 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e20d:	8d 76 00             	lea    esi,[esi+0x0]
c000e210:	83 c4 10             	add    esp,0x10
c000e213:	90                   	nop
c000e214:	83 ec 0c             	sub    esp,0xc
c000e217:	68 d8 96 02 c0       	push   0xc00296d8
c000e21c:	e8 ff 15 01 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e221:	83 c4 10             	add    esp,0x10
c000e224:	84 c0                	test   al,al
c000e226:	75 18                	jne    c000e240 <timerHandler(unsigned int)+0xe0>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	68 d8 96 02 c0       	push   0xc00296d8
c000e230:	e8 07 16 01 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e235:	83 c4 10             	add    esp,0x10
c000e238:	39 f0                	cmp    eax,esi
c000e23a:	0f 85 74 ff ff ff    	jne    c000e1b4 <timerHandler(unsigned int)+0x54>
c000e240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e245:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e249:	74 41                	je     c000e28c <timerHandler(unsigned int)+0x12c>
c000e24b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e252:	74 38                	je     c000e28c <timerHandler(unsigned int)+0x12c>
c000e254:	fa                   	cli    
c000e255:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e25b:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e260:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e266:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e269:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e26f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e272:	72 08                	jb     c000e27c <timerHandler(unsigned int)+0x11c>
c000e274:	e8 17 79 00 00       	call   c0015b90 <schedule()>
c000e279:	8d 76 00             	lea    esi,[esi+0x0]
c000e27c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e281:	48                   	dec    eax
c000e282:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e287:	75 03                	jne    c000e28c <timerHandler(unsigned int)+0x12c>
c000e289:	fb                   	sti    
c000e28a:	66 90                	xchg   ax,ax
c000e28c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e291:	48                   	dec    eax
c000e292:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e297:	75 1b                	jne    c000e2b4 <timerHandler(unsigned int)+0x154>
c000e299:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2a0:	74 12                	je     c000e2b4 <timerHandler(unsigned int)+0x154>
c000e2a2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2ac:	e8 df 78 00 00       	call   c0015b90 <schedule()>
c000e2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2b9:	48                   	dec    eax
c000e2ba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2bf:	75 03                	jne    c000e2c4 <timerHandler(unsigned int)+0x164>
c000e2c1:	fb                   	sti    
c000e2c2:	66 90                	xchg   ax,ax
c000e2c4:	58                   	pop    eax
c000e2c5:	5b                   	pop    ebx
c000e2c6:	5e                   	pop    esi
c000e2c7:	c3                   	ret    

c000e2c8 <VCache::VCache(PhysicalDisk*)>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 18             	sub    esp,0x18
c000e2cc:	ba c0 18 02 c0       	mov    edx,0xc00218c0
c000e2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d5:	89 10                	mov    DWORD PTR [eax],edx
c000e2d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2db:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e2e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e2f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e303:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e30a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e315:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e31c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e320:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e328:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e32f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e33e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e342:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e352:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e359:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e361:	83 ec 0c             	sub    esp,0xc
c000e364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e368:	e8 66 97 ff ff       	call   c0007ad3 <malloc>
c000e36d:	83 c4 10             	add    esp,0x10
c000e370:	89 c3                	mov    ebx,eax
c000e372:	83 ec 0c             	sub    esp,0xc
c000e375:	53                   	push   ebx
c000e376:	e8 b5 75 00 00       	call   c0015930 <Mutex::Mutex()>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e382:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e389:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e38d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e394:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e39b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e39f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3b0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3c0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3c3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e3d8:	05 00 02 00 00       	add    eax,0x200
c000e3dd:	c1 e0 03             	shl    eax,0x3
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	50                   	push   eax
c000e3e4:	e8 ea 96 ff ff       	call   c0007ad3 <malloc>
c000e3e9:	83 c4 10             	add    esp,0x10
c000e3ec:	89 c2                	mov    edx,eax
c000e3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e404:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e408:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e40c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e412:	89 d0                	mov    eax,edx
c000e414:	c1 e0 02             	shl    eax,0x2
c000e417:	01 d0                	add    eax,edx
c000e419:	c1 e0 04             	shl    eax,0x4
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	50                   	push   eax
c000e420:	e8 ae 96 ff ff       	call   c0007ad3 <malloc>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	89 c2                	mov    edx,eax
c000e42a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e42e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e431:	90                   	nop
c000e432:	83 c4 18             	add    esp,0x18
c000e435:	5b                   	pop    ebx
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <VCache::invalidateReadBuffer()>:
c000e438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e442:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <VCache::writeWriteBuffer()>:
c000e448:	53                   	push   ebx
c000e449:	83 ec 08             	sub    esp,0x8
c000e44c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e450:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e454:	74 1e                	je     c000e474 <VCache::writeWriteBuffer()+0x2c>
c000e456:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e459:	83 ec 0c             	sub    esp,0xc
c000e45c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e45e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e461:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e464:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e467:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e46a:	50                   	push   eax
c000e46b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e46e:	83 c4 20             	add    esp,0x20
c000e471:	8d 76 00             	lea    esi,[esi+0x0]
c000e474:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e482:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e486:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e48d:	83 c4 08             	add    esp,0x8
c000e490:	5b                   	pop    ebx
c000e491:	c3                   	ret    
c000e492:	66 90                	xchg   ax,ax

c000e494 <VCache::~VCache()>:
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	ba c0 18 02 c0       	mov    edx,0xc00218c0
c000e49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a0:	89 10                	mov    DWORD PTR [eax],edx
c000e4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4a9:	0f b6 c0             	movzx  eax,al
c000e4ac:	85 c0                	test   eax,eax
c000e4ae:	74 10                	je     c000e4c0 <VCache::~VCache()+0x2c>
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b7:	e8 8c ff ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	90                   	nop
c000e4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4c7:	83 ec 0c             	sub    esp,0xc
c000e4ca:	50                   	push   eax
c000e4cb:	e8 13 96 ff ff       	call   c0007ae3 <free>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e4da:	83 ec 0c             	sub    esp,0xc
c000e4dd:	50                   	push   eax
c000e4de:	e8 00 96 ff ff       	call   c0007ae3 <free>
c000e4e3:	83 c4 10             	add    esp,0x10
c000e4e6:	90                   	nop
c000e4e7:	83 c4 0c             	add    esp,0xc
c000e4ea:	c3                   	ret    
c000e4eb:	90                   	nop

c000e4ec <VCache::~VCache()>:
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	83 ec 0c             	sub    esp,0xc
c000e4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f6:	e8 99 ff ff ff       	call   c000e494 <VCache::~VCache()>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	83 ec 08             	sub    esp,0x8
c000e501:	6a 44                	push   0x44
c000e503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e507:	e8 00 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 c4 0c             	add    esp,0xc
c000e512:	c3                   	ret    
c000e513:	90                   	nop

c000e514 <VCache::write(unsigned long long, int, void*)>:
c000e514:	55                   	push   ebp
c000e515:	57                   	push   edi
c000e516:	56                   	push   esi
c000e517:	53                   	push   ebx
c000e518:	83 ec 1c             	sub    esp,0x1c
c000e51b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e51f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e523:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e527:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e52b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e52f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e533:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e537:	74 0f                	je     c000e548 <VCache::write(unsigned long long, int, void*)+0x34>
c000e539:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e53d:	53                   	push   ebx
c000e53e:	e8 f5 fe ff ff       	call   c000e438 <VCache::invalidateReadBuffer()>
c000e543:	58                   	pop    eax
c000e544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e548:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e54c:	74 66                	je     c000e5b4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e54e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e551:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e555:	99                   	cdq    
c000e556:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e559:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e55c:	89 c6                	mov    esi,eax
c000e55e:	31 ce                	xor    esi,ecx
c000e560:	89 d0                	mov    eax,edx
c000e562:	31 e8                	xor    eax,ebp
c000e564:	09 c6                	or     esi,eax
c000e566:	75 38                	jne    c000e5a0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e568:	83 ff 01             	cmp    edi,0x1
c000e56b:	75 33                	jne    c000e5a0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e56d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e570:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e574:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e578:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e57e:	0f af f9             	imul   edi,ecx
c000e581:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e584:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e586:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e589:	40                   	inc    eax
c000e58a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e58d:	83 f8 50             	cmp    eax,0x50
c000e590:	75 72                	jne    c000e604 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e592:	83 ec 0c             	sub    esp,0xc
c000e595:	53                   	push   ebx
c000e596:	e8 ad fe ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c000e59b:	83 c4 10             	add    esp,0x10
c000e59e:	eb 64                	jmp    c000e604 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5a4:	83 ec 0c             	sub    esp,0xc
c000e5a7:	53                   	push   ebx
c000e5a8:	e8 9b fe ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5b4:	83 ff 4f             	cmp    edi,0x4f
c000e5b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5ba:	7f 20                	jg     c000e5dc <VCache::write(unsigned long long, int, void*)+0xc8>
c000e5bc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5bf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5c3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e5c6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5c9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e5cc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e5d0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d8:	eb 2a                	jmp    c000e604 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5e0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5e2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e5e6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e5ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e5ee:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e5f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5f6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e5f9:	83 c4 1c             	add    esp,0x1c
c000e5fc:	5b                   	pop    ebx
c000e5fd:	5e                   	pop    esi
c000e5fe:	5f                   	pop    edi
c000e5ff:	5d                   	pop    ebp
c000e600:	ff e0                	jmp    eax
c000e602:	66 90                	xchg   ax,ax
c000e604:	83 c4 1c             	add    esp,0x1c
c000e607:	31 c0                	xor    eax,eax
c000e609:	5b                   	pop    ebx
c000e60a:	5e                   	pop    esi
c000e60b:	5f                   	pop    edi
c000e60c:	5d                   	pop    ebp
c000e60d:	c3                   	ret    

c000e60e <VCache::read(unsigned long long, int, void*)>:
c000e60e:	55                   	push   ebp
c000e60f:	57                   	push   edi
c000e610:	56                   	push   esi
c000e611:	53                   	push   ebx
c000e612:	83 ec 1c             	sub    esp,0x1c
c000e615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e619:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e61d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e621:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e625:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e629:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e62d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e631:	74 0d                	je     c000e640 <VCache::read(unsigned long long, int, void*)+0x32>
c000e633:	83 ec 0c             	sub    esp,0xc
c000e636:	57                   	push   edi
c000e637:	e8 0c fe ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c000e63c:	83 c4 10             	add    esp,0x10
c000e63f:	90                   	nop
c000e640:	83 fd 01             	cmp    ebp,0x1
c000e643:	0f 85 93 00 00 00    	jne    c000e6dc <VCache::read(unsigned long long, int, void*)+0xce>
c000e649:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e64c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e653:	89 04 24             	mov    DWORD PTR [esp],eax
c000e656:	0f 85 80 00 00 00    	jne    c000e6dc <VCache::read(unsigned long long, int, void*)+0xce>
c000e65c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e65f:	89 cd                	mov    ebp,ecx
c000e661:	f7 dd                	neg    ebp
c000e663:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e667:	89 e8                	mov    eax,ebp
c000e669:	21 dd                	and    ebp,ebx
c000e66b:	c1 f8 1f             	sar    eax,0x1f
c000e66e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e672:	89 e8                	mov    eax,ebp
c000e674:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e678:	21 f5                	and    ebp,esi
c000e67a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e67e:	89 ea                	mov    edx,ebp
c000e680:	74 2e                	je     c000e6b0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e682:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e685:	75 29                	jne    c000e6b0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e687:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e68a:	75 24                	jne    c000e6b0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e68c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e68f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e695:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e698:	8d 70 ff             	lea    esi,[eax-0x1]
c000e69b:	21 f3                	and    ebx,esi
c000e69d:	0f af d9             	imul   ebx,ecx
c000e6a0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6a3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6a7:	89 de                	mov    esi,ebx
c000e6a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6ab:	31 c0                	xor    eax,eax
c000e6ad:	eb 61                	jmp    c000e710 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6af:	90                   	nop
c000e6b0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6b4:	83 ec 0c             	sub    esp,0xc
c000e6b7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6be:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6c1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e6c3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6c6:	51                   	push   ecx
c000e6c7:	52                   	push   edx
c000e6c8:	50                   	push   eax
c000e6c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6cd:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e6d0:	83 c4 20             	add    esp,0x20
c000e6d3:	85 c0                	test   eax,eax
c000e6d5:	75 39                	jne    c000e710 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6d7:	eb b3                	jmp    c000e68c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6dc:	83 ec 0c             	sub    esp,0xc
c000e6df:	57                   	push   edi
c000e6e0:	e8 53 fd ff ff       	call   c000e438 <VCache::invalidateReadBuffer()>
c000e6e5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ee:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e6f2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e6f6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e6fa:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e6fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e702:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e705:	83 c4 2c             	add    esp,0x2c
c000e708:	5b                   	pop    ebx
c000e709:	5e                   	pop    esi
c000e70a:	5f                   	pop    edi
c000e70b:	5d                   	pop    ebp
c000e70c:	ff e0                	jmp    eax
c000e70e:	66 90                	xchg   ax,ax
c000e710:	83 c4 1c             	add    esp,0x1c
c000e713:	5b                   	pop    ebx
c000e714:	5e                   	pop    esi
c000e715:	5f                   	pop    edi
c000e716:	5d                   	pop    ebp
c000e717:	c3                   	ret    

c000e718 <Video::putrect(int, int, int, int, unsigned int)>:
c000e718:	55                   	push   ebp
c000e719:	57                   	push   edi
c000e71a:	56                   	push   esi
c000e71b:	53                   	push   ebx
c000e71c:	83 ec 1c             	sub    esp,0x1c
c000e71f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e723:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e727:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e72b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e72f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e737:	01 df                	add    edi,ebx
c000e739:	39 fb                	cmp    ebx,edi
c000e73b:	7d 1f                	jge    c000e75c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e73d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e741:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e745:	7d 12                	jge    c000e759 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e747:	8b 16                	mov    edx,DWORD PTR [esi]
c000e749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e74d:	53                   	push   ebx
c000e74e:	55                   	push   ebp
c000e74f:	45                   	inc    ebp
c000e750:	56                   	push   esi
c000e751:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e754:	83 c4 10             	add    esp,0x10
c000e757:	eb e8                	jmp    c000e741 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e759:	43                   	inc    ebx
c000e75a:	eb dd                	jmp    c000e739 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e75c:	83 c4 1c             	add    esp,0x1c
c000e75f:	5b                   	pop    ebx
c000e760:	5e                   	pop    esi
c000e761:	5f                   	pop    edi
c000e762:	5d                   	pop    ebp
c000e763:	c3                   	ret    

c000e764 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e764:	55                   	push   ebp
c000e765:	57                   	push   edi
c000e766:	31 ff                	xor    edi,edi
c000e768:	56                   	push   esi
c000e769:	53                   	push   ebx
c000e76a:	83 ec 1c             	sub    esp,0x1c
c000e76d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e771:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e775:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e77c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e785:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e789:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e78d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e790:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e794:	01 f9                	add    ecx,edi
c000e796:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e79a:	7d 2f                	jge    c000e7cb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e79c:	31 f6                	xor    esi,esi
c000e79e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7a2:	01 f2                	add    edx,esi
c000e7a4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7a8:	7d 1a                	jge    c000e7c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7ad:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7b0:	46                   	inc    esi
c000e7b1:	51                   	push   ecx
c000e7b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7b6:	52                   	push   edx
c000e7b7:	55                   	push   ebp
c000e7b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7c2:	eb da                	jmp    c000e79e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7c4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e7c8:	47                   	inc    edi
c000e7c9:	eb c5                	jmp    c000e790 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e7cb:	83 c4 1c             	add    esp,0x1c
c000e7ce:	5b                   	pop    ebx
c000e7cf:	5e                   	pop    esi
c000e7d0:	5f                   	pop    edi
c000e7d1:	5d                   	pop    ebp
c000e7d2:	c3                   	ret    
c000e7d3:	90                   	nop

c000e7d4 <Video::blit(unsigned int*, int, int, int, int)>:
c000e7d4:	55                   	push   ebp
c000e7d5:	ba 00 00 00 00       	mov    edx,0x0
c000e7da:	57                   	push   edi
c000e7db:	56                   	push   esi
c000e7dc:	53                   	push   ebx
c000e7dd:	83 ec 1c             	sub    esp,0x1c
c000e7e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7e4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e7e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7ec:	85 c0                	test   eax,eax
c000e7ee:	0f 49 d0             	cmovns edx,eax
c000e7f1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e7f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e7fc:	89 eb                	mov    ebx,ebp
c000e7fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e802:	01 ea                	add    edx,ebp
c000e804:	39 da                	cmp    edx,ebx
c000e806:	7e 54                	jle    c000e85c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e808:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e80e:	7c 4c                	jl     c000e85c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e810:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e814:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e818:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e81c:	01 c1                	add    ecx,eax
c000e81e:	39 f9                	cmp    ecx,edi
c000e820:	7e 2f                	jle    c000e851 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e822:	83 c2 04             	add    edx,0x4
c000e825:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e82b:	7c 21                	jl     c000e84e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e82d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e831:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e833:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e836:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e83a:	55                   	push   ebp
c000e83b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e83f:	56                   	push   esi
c000e840:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e84a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e84e:	47                   	inc    edi
c000e84f:	eb c7                	jmp    c000e818 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e851:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e855:	43                   	inc    ebx
c000e856:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e85a:	eb a2                	jmp    c000e7fe <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e85c:	83 c4 1c             	add    esp,0x1c
c000e85f:	5b                   	pop    ebx
c000e860:	5e                   	pop    esi
c000e861:	5f                   	pop    edi
c000e862:	5d                   	pop    ebp
c000e863:	c3                   	ret    

c000e864 <Video::clearScreen(unsigned int)>:
c000e864:	57                   	push   edi
c000e865:	56                   	push   esi
c000e866:	53                   	push   ebx
c000e867:	31 db                	xor    ebx,ebx
c000e869:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e86d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e873:	7e 1f                	jle    c000e894 <Video::clearScreen(unsigned int)+0x30>
c000e875:	31 ff                	xor    edi,edi
c000e877:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e87d:	7e 12                	jle    c000e891 <Video::clearScreen(unsigned int)+0x2d>
c000e87f:	8b 06                	mov    eax,DWORD PTR [esi]
c000e881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e885:	53                   	push   ebx
c000e886:	57                   	push   edi
c000e887:	47                   	inc    edi
c000e888:	56                   	push   esi
c000e889:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	eb e6                	jmp    c000e877 <Video::clearScreen(unsigned int)+0x13>
c000e891:	43                   	inc    ebx
c000e892:	eb d9                	jmp    c000e86d <Video::clearScreen(unsigned int)+0x9>
c000e894:	5b                   	pop    ebx
c000e895:	5e                   	pop    esi
c000e896:	5f                   	pop    edi
c000e897:	c3                   	ret    

c000e898 <Video::putpixel(int, int, unsigned int)>:
c000e898:	c7 44 24 04 c8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218c8
c000e8a0:	e9 ec 29 00 00       	jmp    c0011291 <KePanic(char const*)>
c000e8a5:	90                   	nop

c000e8a6 <Video::readPixelApprox(int, int)>:
c000e8a6:	83 ec 18             	sub    esp,0x18
c000e8a9:	68 e9 18 02 c0       	push   0xc00218e9
c000e8ae:	e8 de 29 00 00       	call   c0011291 <KePanic(char const*)>
c000e8b3:	31 c0                	xor    eax,eax
c000e8b5:	83 c4 1c             	add    esp,0x1c
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Video::Video(char const*)>:
c000e8ba:	83 ec 0c             	sub    esp,0xc
c000e8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c1:	83 ec 08             	sub    esp,0x8
c000e8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c8:	50                   	push   eax
c000e8c9:	e8 be df ff ff       	call   c000c88c <Device::Device(char const*)>
c000e8ce:	83 c4 10             	add    esp,0x10
c000e8d1:	ba 64 19 02 c0       	mov    edx,0xc0021964
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	89 10                	mov    DWORD PTR [eax],edx
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e8ea:	90                   	nop
c000e8eb:	83 c4 0c             	add    esp,0xc
c000e8ee:	c3                   	ret    
c000e8ef:	90                   	nop

c000e8f0 <Video::~Video()>:
c000e8f0:	83 ec 0c             	sub    esp,0xc
c000e8f3:	ba 64 19 02 c0       	mov    edx,0xc0021964
c000e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fc:	89 10                	mov    DWORD PTR [eax],edx
c000e8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e902:	83 ec 0c             	sub    esp,0xc
c000e905:	50                   	push   eax
c000e906:	e8 eb dc ff ff       	call   c000c5f6 <Device::~Device()>
c000e90b:	83 c4 10             	add    esp,0x10
c000e90e:	90                   	nop
c000e90f:	83 c4 0c             	add    esp,0xc
c000e912:	c3                   	ret    
c000e913:	90                   	nop

c000e914 <Video::~Video()>:
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	83 ec 0c             	sub    esp,0xc
c000e91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e91e:	e8 cd ff ff ff       	call   c000e8f0 <Video::~Video()>
c000e923:	83 c4 10             	add    esp,0x10
c000e926:	83 ec 08             	sub    esp,0x8
c000e929:	68 64 01 00 00       	push   0x164
c000e92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e932:	e8 d5 be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e937:	83 c4 10             	add    esp,0x10
c000e93a:	83 c4 0c             	add    esp,0xc
c000e93d:	c3                   	ret    

c000e93e <Video::isMonochrome()>:
c000e93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e942:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e948:	c3                   	ret    
c000e949:	90                   	nop

c000e94a <Video::getWidth()>:
c000e94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e94e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e954:	c3                   	ret    
c000e955:	90                   	nop

c000e956 <Video::getHeight()>:
c000e956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e95a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e960:	c3                   	ret    
c000e961:	90                   	nop

c000e962 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e962:	55                   	push   ebp
c000e963:	57                   	push   edi
c000e964:	56                   	push   esi
c000e965:	53                   	push   ebx
c000e966:	83 ec 2c             	sub    esp,0x2c
c000e969:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e96d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e971:	83 f8 01             	cmp    eax,0x1
c000e974:	19 c9                	sbb    ecx,ecx
c000e976:	31 db                	xor    ebx,ebx
c000e978:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e97c:	89 ce                	mov    esi,ecx
c000e97e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e986:	f7 d6                	not    esi
c000e988:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e98e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e992:	01 d8                	add    eax,ebx
c000e994:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e998:	57                   	push   edi
c000e999:	e8 b8 ff ff ff       	call   c000e956 <Video::getHeight()>
c000e99e:	59                   	pop    ecx
c000e99f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9a3:	7e 70                	jle    c000ea15 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9a9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e9ad:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9b8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9c3:	89 e8                	mov    eax,ebp
c000e9c5:	83 c0 20             	add    eax,0x20
c000e9c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9cc:	57                   	push   edi
c000e9cd:	e8 78 ff ff ff       	call   c000e94a <Video::getWidth()>
c000e9d2:	5a                   	pop    edx
c000e9d3:	39 c5                	cmp    ebp,eax
c000e9d5:	7d 34                	jge    c000ea0b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e9d7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e9dc:	74 05                	je     c000e9e3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e9de:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9e0:	56                   	push   esi
c000e9e1:	eb 0d                	jmp    c000e9f0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e9e3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e9e8:	74 12                	je     c000e9fc <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e9ea:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9f4:	55                   	push   ebp
c000e9f5:	57                   	push   edi
c000e9f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea00:	45                   	inc    ebp
c000ea01:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea05:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea09:	75 c1                	jne    c000e9cc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea0b:	43                   	inc    ebx
c000ea0c:	83 fb 20             	cmp    ebx,0x20
c000ea0f:	0f 85 79 ff ff ff    	jne    c000e98e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea15:	83 c4 2c             	add    esp,0x2c
c000ea18:	5b                   	pop    ebx
c000ea19:	5e                   	pop    esi
c000ea1a:	5f                   	pop    edi
c000ea1b:	5d                   	pop    ebp
c000ea1c:	c3                   	ret    
c000ea1d:	90                   	nop

c000ea1e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea1e:	55                   	push   ebp
c000ea1f:	57                   	push   edi
c000ea20:	56                   	push   esi
c000ea21:	53                   	push   ebx
c000ea22:	83 ec 28             	sub    esp,0x28
c000ea25:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea29:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea2d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea31:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea35:	c1 e7 08             	shl    edi,0x8
c000ea38:	01 c7                	add    edi,eax
c000ea3a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea3e:	c1 e6 08             	shl    esi,0x8
c000ea41:	01 f0                	add    eax,esi
c000ea43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea4b:	0f af c7             	imul   eax,edi
c000ea4e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea55:	50                   	push   eax
c000ea56:	e8 78 90 ff ff       	call   c0007ad3 <malloc>
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	85 c0                	test   eax,eax
c000ea60:	89 c5                	mov    ebp,eax
c000ea62:	75 10                	jne    c000ea74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea64:	83 ec 0c             	sub    esp,0xc
c000ea67:	68 14 19 02 c0       	push   0xc0021914
c000ea6c:	e8 20 28 00 00       	call   c0011291 <KePanic(char const*)>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea78:	ba 12 00 00 00       	mov    edx,0x12
c000ea7d:	85 c0                	test   eax,eax
c000ea7f:	74 11                	je     c000ea92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea81:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea85:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea89:	c1 fa 03             	sar    edx,0x3
c000ea8c:	0f af d1             	imul   edx,ecx
c000ea8f:	83 c2 12             	add    edx,0x12
c000ea92:	85 ff                	test   edi,edi
c000ea94:	74 06                	je     c000ea9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ea96:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ea9a:	75 12                	jne    c000eaae <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	68 24 19 02 c0       	push   0xc0021924
c000eaa4:	e8 61 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eaa9:	e9 b8 00 00 00       	jmp    c000eb66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eaae:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eab2:	83 f9 02             	cmp    ecx,0x2
c000eab5:	0f 85 96 00 00 00    	jne    c000eb51 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eabb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eac0:	75 0e                	jne    c000ead0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eac2:	85 c0                	test   eax,eax
c000eac4:	75 0a                	jne    c000ead0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eac6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eac9:	83 e8 18             	sub    eax,0x18
c000eacc:	a8 f7                	test   al,0xf7
c000eace:	74 0a                	je     c000eada <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	68 39 19 02 c0       	push   0xc0021939
c000ead8:	eb 7f                	jmp    c000eb59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eada:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eae2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eaea:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eaee:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eaf2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eafa:	75 0c                	jne    c000eb08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eafc:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb01:	c1 e1 18             	shl    ecx,0x18
c000eb04:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb08:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb0d:	46                   	inc    esi
c000eb0e:	89 c8                	mov    eax,ecx
c000eb10:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb15:	c1 e0 10             	shl    eax,0x10
c000eb18:	c1 e1 08             	shl    ecx,0x8
c000eb1b:	09 c1                	or     ecx,eax
c000eb1d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb21:	09 c1                	or     ecx,eax
c000eb23:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb27:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb2b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb2f:	c1 f8 03             	sar    eax,0x3
c000eb32:	01 c2                	add    edx,eax
c000eb34:	89 f0                	mov    eax,esi
c000eb36:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb3a:	39 c7                	cmp    edi,eax
c000eb3c:	7f b0                	jg     c000eaee <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb49:	7e 22                	jle    c000eb6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb4b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb4f:	eb 99                	jmp    c000eaea <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb51:	50                   	push   eax
c000eb52:	50                   	push   eax
c000eb53:	51                   	push   ecx
c000eb54:	68 47 19 02 c0       	push   0xc0021947
c000eb59:	e8 ac bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eb61:	e8 7d 8f ff ff       	call   c0007ae3 <free>
c000eb66:	83 c4 10             	add    esp,0x10
c000eb69:	31 ed                	xor    ebp,ebp
c000eb6b:	eb 0f                	jmp    c000eb7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb71:	89 38                	mov    DWORD PTR [eax],edi
c000eb73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eb7a:	89 38                	mov    DWORD PTR [eax],edi
c000eb7c:	83 c4 1c             	add    esp,0x1c
c000eb7f:	89 e8                	mov    eax,ebp
c000eb81:	5b                   	pop    ebx
c000eb82:	5e                   	pop    esi
c000eb83:	5f                   	pop    edi
c000eb84:	5d                   	pop    ebp
c000eb85:	c3                   	ret    

c000eb86 <Video::putTGA(int, int, unsigned char*, int)>:
c000eb86:	55                   	push   ebp
c000eb87:	57                   	push   edi
c000eb88:	56                   	push   esi
c000eb89:	53                   	push   ebx
c000eb8a:	83 ec 28             	sub    esp,0x28
c000eb8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb91:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eb95:	50                   	push   eax
c000eb96:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb9a:	50                   	push   eax
c000eb9b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb9f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eba3:	57                   	push   edi
c000eba4:	e8 75 fe ff ff       	call   c000ea1e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eba9:	83 c4 20             	add    esp,0x20
c000ebac:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebb0:	85 c0                	test   eax,eax
c000ebb2:	74 35                	je     c000ebe9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebb4:	89 c6                	mov    esi,eax
c000ebb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebbe:	39 d8                	cmp    eax,ebx
c000ebc0:	7e 27                	jle    c000ebe9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebc6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ebca:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ebce:	39 e9                	cmp    ecx,ebp
c000ebd0:	7e 14                	jle    c000ebe6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ebd2:	83 c6 04             	add    esi,0x4
c000ebd5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ebd7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ebda:	53                   	push   ebx
c000ebdb:	55                   	push   ebp
c000ebdc:	45                   	inc    ebp
c000ebdd:	57                   	push   edi
c000ebde:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	eb e0                	jmp    c000ebc6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ebe6:	43                   	inc    ebx
c000ebe7:	eb cd                	jmp    c000ebb6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ebe9:	83 c4 1c             	add    esp,0x1c
c000ebec:	5b                   	pop    ebx
c000ebed:	5e                   	pop    esi
c000ebee:	5f                   	pop    edi
c000ebef:	5d                   	pop    ebp
c000ebf0:	c3                   	ret    
c000ebf1:	66 90                	xchg   ax,ax
c000ebf3:	90                   	nop

c000ebf4 <ACPI::close(int, int, void*)>:
c000ebf4:	83 ec 1c             	sub    esp,0x1c
c000ebf7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ebff:	74 0b                	je     c000ec0c <ACPI::close(int, int, void*)+0x18>
c000ec01:	b8 00 00 00 00       	mov    eax,0x0
c000ec06:	e9 99 00 00 00       	jmp    c000eca4 <ACPI::close(int, int, void*)+0xb0>
c000ec0b:	90                   	nop
c000ec0c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec11:	75 29                	jne    c000ec3c <ACPI::close(int, int, void*)+0x48>
c000ec13:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec18:	85 c0                	test   eax,eax
c000ec1a:	74 08                	je     c000ec24 <ACPI::close(int, int, void*)+0x30>
c000ec1c:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec21:	ff d0                	call   eax
c000ec23:	90                   	nop
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	68 a8 19 02 c0       	push   0xc00219a8
c000ec2c:	e8 60 26 00 00       	call   c0011291 <KePanic(char const*)>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec39:	eb 69                	jmp    c000eca4 <ACPI::close(int, int, void*)+0xb0>
c000ec3b:	90                   	nop
c000ec3c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec41:	75 59                	jne    c000ec9c <ACPI::close(int, int, void*)+0xa8>
c000ec43:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec48:	85 c0                	test   eax,eax
c000ec4a:	74 08                	je     c000ec54 <ACPI::close(int, int, void*)+0x60>
c000ec4c:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec51:	ff d0                	call   eax
c000ec53:	90                   	nop
c000ec54:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec59:	8d 76 00             	lea    esi,[esi+0x0]
c000ec5c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec61:	83 e0 02             	and    eax,0x2
c000ec64:	74 1e                	je     c000ec84 <ACPI::close(int, int, void*)+0x90>
c000ec66:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec71:	89 c2                	mov    edx,eax
c000ec73:	ec                   	in     al,dx
c000ec74:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec78:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec80:	eb da                	jmp    c000ec5c <ACPI::close(int, int, void*)+0x68>
c000ec82:	66 90                	xchg   ax,ax
c000ec84:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec8b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ec90:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ec94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec98:	ee                   	out    dx,al
c000ec99:	8d 76 00             	lea    esi,[esi+0x0]
c000ec9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eca1:	8d 76 00             	lea    esi,[esi+0x0]
c000eca4:	83 c4 1c             	add    esp,0x1c
c000eca7:	c3                   	ret    

c000eca8 <findRSDP()>:
c000eca8:	83 ec 1c             	sub    esp,0x1c
c000ecab:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecb0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecb6:	83 e0 04             	and    eax,0x4
c000ecb9:	0f b6 c0             	movzx  eax,al
c000ecbc:	85 c0                	test   eax,eax
c000ecbe:	75 08                	jne    c000ecc8 <findRSDP()+0x20>
c000ecc0:	b8 00 00 00 00       	mov    eax,0x0
c000ecc5:	eb 75                	jmp    c000ed3c <findRSDP()+0x94>
c000ecc7:	90                   	nop
c000ecc8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000eccd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ecd2:	7f 1c                	jg     c000ecf0 <findRSDP()+0x48>
c000ecd4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecd9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ecdf:	83 e2 fb             	and    edx,0xfffffffb
c000ece2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ece8:	b8 00 00 00 00       	mov    eax,0x0
c000eced:	eb 4d                	jmp    c000ed3c <findRSDP()+0x94>
c000ecef:	90                   	nop
c000ecf0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ecf8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed00:	77 32                	ja     c000ed34 <findRSDP()+0x8c>
c000ed02:	83 ec 04             	sub    esp,0x4
c000ed05:	6a 08                	push   0x8
c000ed07:	68 43 1a 02 c0       	push   0xc0021a43
c000ed0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed10:	e8 6b 16 ff ff       	call   c0000380 <memcmp>
c000ed15:	83 c4 10             	add    esp,0x10
c000ed18:	85 c0                	test   eax,eax
c000ed1a:	0f 94 c0             	sete   al
c000ed1d:	0f b6 c0             	movzx  eax,al
c000ed20:	85 c0                	test   eax,eax
c000ed22:	74 08                	je     c000ed2c <findRSDP()+0x84>
c000ed24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed28:	eb 12                	jmp    c000ed3c <findRSDP()+0x94>
c000ed2a:	66 90                	xchg   ax,ax
c000ed2c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed31:	eb c5                	jmp    c000ecf8 <findRSDP()+0x50>
c000ed33:	90                   	nop
c000ed34:	b8 00 00 00 00       	mov    eax,0x0
c000ed39:	8d 76 00             	lea    esi,[esi+0x0]
c000ed3c:	83 c4 1c             	add    esp,0x1c
c000ed3f:	c3                   	ret    

c000ed40 <loadACPITables(unsigned char*)>:
c000ed40:	57                   	push   edi
c000ed41:	56                   	push   esi
c000ed42:	53                   	push   ebx
c000ed43:	83 ec 60             	sub    esp,0x60
c000ed46:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed4b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed51:	83 e0 04             	and    eax,0x4
c000ed54:	0f b6 c0             	movzx  eax,al
c000ed57:	85 c0                	test   eax,eax
c000ed59:	0f 84 41 02 00 00    	je     c000efa0 <loadACPITables(unsigned char*)+0x260>
c000ed5f:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed64:	0f b6 c0             	movzx  eax,al
c000ed67:	85 c0                	test   eax,eax
c000ed69:	74 79                	je     c000ede4 <loadACPITables(unsigned char*)+0xa4>
c000ed6b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed6f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed7a:	83 e8 24             	sub    eax,0x24
c000ed7d:	c1 e8 03             	shr    eax,0x3
c000ed80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed84:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed8c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed90:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ed94:	0f 8d ba 00 00 00    	jge    c000ee54 <loadACPITables(unsigned char*)+0x114>
c000ed9a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed9e:	83 c0 24             	add    eax,0x24
c000eda1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eda5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eda9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edb1:	c1 e0 03             	shl    eax,0x3
c000edb4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000edb8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edbc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc1:	89 c1                	mov    ecx,eax
c000edc3:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edc8:	8d 50 01             	lea    edx,[eax+0x1]
c000edcb:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000edd1:	89 ca                	mov    edx,ecx
c000edd3:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000edda:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000eddf:	eb ab                	jmp    c000ed8c <loadACPITables(unsigned char*)+0x4c>
c000ede1:	8d 76 00             	lea    esi,[esi+0x0]
c000ede4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ede8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edf3:	83 e8 24             	sub    eax,0x24
c000edf6:	c1 e8 02             	shr    eax,0x2
c000edf9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edfd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee05:	8d 76 00             	lea    esi,[esi+0x0]
c000ee08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee0c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee10:	7d 42                	jge    c000ee54 <loadACPITables(unsigned char*)+0x114>
c000ee12:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee16:	83 c0 24             	add    eax,0x24
c000ee19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee21:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee25:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee29:	c1 e0 02             	shl    eax,0x2
c000ee2c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee34:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee36:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee3b:	8d 50 01             	lea    edx,[eax+0x1]
c000ee3e:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee44:	89 ca                	mov    edx,ecx
c000ee46:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee4d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee52:	eb b4                	jmp    c000ee08 <loadACPITables(unsigned char*)+0xc8>
c000ee54:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee5c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee61:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee65:	0f 8d 39 01 00 00    	jge    c000efa4 <loadACPITables(unsigned char*)+0x264>
c000ee6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee6f:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee86:	25 ff 0f 00 00       	and    eax,0xfff
c000ee8b:	89 c6                	mov    esi,eax
c000ee8d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee93:	83 ec 0c             	sub    esp,0xc
c000ee96:	6a 01                	push   0x1
c000ee98:	e8 58 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eea4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	6a 01                	push   0x1
c000eeaf:	6a 01                	push   0x1
c000eeb1:	50                   	push   eax
c000eeb2:	52                   	push   edx
c000eeb3:	53                   	push   ebx
c000eeb4:	e8 4f b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eeb9:	83 c4 20             	add    esp,0x20
c000eebc:	09 f0                	or     eax,esi
c000eebe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eec2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eec6:	c1 e0 03             	shl    eax,0x3
c000eec9:	05 20 89 02 c0       	add    eax,0xc0028920
c000eece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eeda:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000eee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eee6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eeea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eef2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eef6:	89 c6                	mov    esi,eax
c000eef8:	89 d7                	mov    edi,edx
c000eefa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eefc:	89 c8                	mov    eax,ecx
c000eefe:	89 fa                	mov    edx,edi
c000ef00:	89 f3                	mov    ebx,esi
c000ef02:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef1d:	05 00 10 00 00       	add    eax,0x1000
c000ef22:	c1 e8 0c             	shr    eax,0xc
c000ef25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef35:	25 ff 0f 00 00       	and    eax,0xfff
c000ef3a:	89 c6                	mov    esi,eax
c000ef3c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef42:	83 ec 0c             	sub    esp,0xc
c000ef45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef49:	e8 a7 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef55:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef5b:	83 ec 0c             	sub    esp,0xc
c000ef5e:	6a 01                	push   0x1
c000ef60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef64:	50                   	push   eax
c000ef65:	52                   	push   edx
c000ef66:	53                   	push   ebx
c000ef67:	e8 9c af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef6c:	83 c4 20             	add    esp,0x20
c000ef6f:	09 f0                	or     eax,esi
c000ef71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef79:	83 ec 0c             	sub    esp,0xc
c000ef7c:	50                   	push   eax
c000ef7d:	e8 87 a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ef82:	83 c4 10             	add    esp,0x10
c000ef85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef8d:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ef94:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ef99:	e9 be fe ff ff       	jmp    c000ee5c <loadACPITables(unsigned char*)+0x11c>
c000ef9e:	66 90                	xchg   ax,ax
c000efa0:	90                   	nop
c000efa1:	8d 76 00             	lea    esi,[esi+0x0]
c000efa4:	83 c4 60             	add    esp,0x60
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	5f                   	pop    edi
c000efaa:	c3                   	ret    
c000efab:	90                   	nop

c000efac <findRSDT(unsigned char*)>:
c000efac:	57                   	push   edi
c000efad:	56                   	push   esi
c000efae:	53                   	push   ebx
c000efaf:	83 ec 50             	sub    esp,0x50
c000efb2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efb7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efbd:	83 e0 04             	and    eax,0x4
c000efc0:	0f b6 c0             	movzx  eax,al
c000efc3:	85 c0                	test   eax,eax
c000efc5:	75 0d                	jne    c000efd4 <findRSDT(unsigned char*)+0x28>
c000efc7:	b8 00 00 00 00       	mov    eax,0x0
c000efcc:	e9 2b 01 00 00       	jmp    c000f0fc <findRSDT(unsigned char*)+0x150>
c000efd1:	8d 76 00             	lea    esi,[esi+0x0]
c000efd4:	89 e0                	mov    eax,esp
c000efd6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efda:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000efe2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000efea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eff2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eff6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000effa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000effe:	89 c6                	mov    esi,eax
c000f000:	89 d7                	mov    edi,edx
c000f002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f004:	89 c8                	mov    eax,ecx
c000f006:	89 fa                	mov    edx,edi
c000f008:	89 f3                	mov    ebx,esi
c000f00a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f00e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f012:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f016:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f01a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f01e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f026:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f02a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f02e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f036:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f03a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f03e:	25 ff 0f 00 00       	and    eax,0xfff
c000f043:	89 c6                	mov    esi,eax
c000f045:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f04b:	83 ec 0c             	sub    esp,0xc
c000f04e:	6a 02                	push   0x2
c000f050:	e8 a0 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f05c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f062:	83 ec 0c             	sub    esp,0xc
c000f065:	6a 01                	push   0x1
c000f067:	6a 02                	push   0x2
c000f069:	50                   	push   eax
c000f06a:	52                   	push   edx
c000f06b:	53                   	push   ebx
c000f06c:	e8 97 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f071:	83 c4 20             	add    esp,0x20
c000f074:	09 f0                	or     eax,esi
c000f076:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f07a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f07e:	25 ff 0f 00 00       	and    eax,0xfff
c000f083:	89 c6                	mov    esi,eax
c000f085:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f08b:	83 ec 0c             	sub    esp,0xc
c000f08e:	6a 02                	push   0x2
c000f090:	e8 60 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f095:	83 c4 10             	add    esp,0x10
c000f098:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f09c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0a2:	83 ec 0c             	sub    esp,0xc
c000f0a5:	6a 01                	push   0x1
c000f0a7:	6a 02                	push   0x2
c000f0a9:	50                   	push   eax
c000f0aa:	52                   	push   edx
c000f0ab:	53                   	push   ebx
c000f0ac:	e8 57 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0b1:	83 c4 20             	add    esp,0x20
c000f0b4:	09 f0                	or     eax,esi
c000f0b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0ba:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0bf:	85 c0                	test   eax,eax
c000f0c1:	75 11                	jne    c000f0d4 <findRSDT(unsigned char*)+0x128>
c000f0c3:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d2:	eb 24                	jmp    c000f0f8 <findRSDT(unsigned char*)+0x14c>
c000f0d4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0d9:	83 f8 02             	cmp    eax,0x2
c000f0dc:	75 12                	jne    c000f0f0 <findRSDT(unsigned char*)+0x144>
c000f0de:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f0e5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0ed:	eb 09                	jmp    c000f0f8 <findRSDT(unsigned char*)+0x14c>
c000f0ef:	90                   	nop
c000f0f0:	b8 00 00 00 00       	mov    eax,0x0
c000f0f5:	eb 05                	jmp    c000f0fc <findRSDT(unsigned char*)+0x150>
c000f0f7:	90                   	nop
c000f0f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f0fc:	83 c4 50             	add    esp,0x50
c000f0ff:	5b                   	pop    ebx
c000f100:	5e                   	pop    esi
c000f101:	5f                   	pop    edi
c000f102:	c3                   	ret    
c000f103:	90                   	nop

c000f104 <findDataTable(unsigned char*, char*)>:
c000f104:	83 ec 1c             	sub    esp,0x1c
c000f107:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f10c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f112:	83 e0 04             	and    eax,0x4
c000f115:	0f b6 c0             	movzx  eax,al
c000f118:	85 c0                	test   eax,eax
c000f11a:	75 08                	jne    c000f124 <findDataTable(unsigned char*, char*)+0x20>
c000f11c:	b8 00 00 00 00       	mov    eax,0x0
c000f121:	eb 5d                	jmp    c000f180 <findDataTable(unsigned char*, char*)+0x7c>
c000f123:	90                   	nop
c000f124:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f12c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f131:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f135:	7d 41                	jge    c000f178 <findDataTable(unsigned char*, char*)+0x74>
c000f137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f13b:	c1 e0 03             	shl    eax,0x3
c000f13e:	05 20 89 02 c0       	add    eax,0xc0028920
c000f143:	83 ec 04             	sub    esp,0x4
c000f146:	6a 04                	push   0x4
c000f148:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f14c:	50                   	push   eax
c000f14d:	e8 2e 12 ff ff       	call   c0000380 <memcmp>
c000f152:	83 c4 10             	add    esp,0x10
c000f155:	85 c0                	test   eax,eax
c000f157:	0f 94 c0             	sete   al
c000f15a:	0f b6 c0             	movzx  eax,al
c000f15d:	85 c0                	test   eax,eax
c000f15f:	74 0f                	je     c000f170 <findDataTable(unsigned char*, char*)+0x6c>
c000f161:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f165:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f16c:	eb 12                	jmp    c000f180 <findDataTable(unsigned char*, char*)+0x7c>
c000f16e:	66 90                	xchg   ax,ax
c000f170:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f175:	eb b5                	jmp    c000f12c <findDataTable(unsigned char*, char*)+0x28>
c000f177:	90                   	nop
c000f178:	b8 00 00 00 00       	mov    eax,0x0
c000f17d:	8d 76 00             	lea    esi,[esi+0x0]
c000f180:	83 c4 1c             	add    esp,0x1c
c000f183:	c3                   	ret    

c000f184 <scanMADT()>:
c000f184:	53                   	push   ebx
c000f185:	83 ec 38             	sub    esp,0x38
c000f188:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f18d:	25 00 04 00 00       	and    eax,0x400
c000f192:	74 14                	je     c000f1a8 <scanMADT()+0x24>
c000f194:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f199:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f19f:	83 e2 fb             	and    edx,0xfffffffb
c000f1a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1a8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1ad:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1b3:	83 e0 04             	and    eax,0x4
c000f1b6:	0f b6 c0             	movzx  eax,al
c000f1b9:	85 c0                	test   eax,eax
c000f1bb:	0f 84 6b 04 00 00    	je     c000f62c <scanMADT()+0x4a8>
c000f1c1:	e8 e2 fa ff ff       	call   c000eca8 <findRSDP()>
c000f1c6:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1cb:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1d0:	85 c0                	test   eax,eax
c000f1d2:	75 1c                	jne    c000f1f0 <scanMADT()+0x6c>
c000f1d4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1df:	83 e2 fb             	and    edx,0xfffffffb
c000f1e2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1e8:	e9 47 04 00 00       	jmp    c000f634 <scanMADT()+0x4b0>
c000f1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f0:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1f5:	83 ec 0c             	sub    esp,0xc
c000f1f8:	50                   	push   eax
c000f1f9:	e8 ae fd ff ff       	call   c000efac <findRSDT(unsigned char*)>
c000f1fe:	83 c4 10             	add    esp,0x10
c000f201:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f206:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f20b:	85 c0                	test   eax,eax
c000f20d:	75 19                	jne    c000f228 <scanMADT()+0xa4>
c000f20f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f214:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f21a:	83 e2 fb             	and    edx,0xfffffffb
c000f21d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f223:	e9 0c 04 00 00       	jmp    c000f634 <scanMADT()+0x4b0>
c000f228:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	50                   	push   eax
c000f231:	e8 0a fb ff ff       	call   c000ed40 <loadACPITables(unsigned char*)>
c000f236:	83 c4 10             	add    esp,0x10
c000f239:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f23e:	83 ec 08             	sub    esp,0x8
c000f241:	68 4c 1a 02 c0       	push   0xc0021a4c
c000f246:	50                   	push   eax
c000f247:	e8 b8 fe ff ff       	call   c000f104 <findDataTable(unsigned char*, char*)>
c000f24c:	83 c4 10             	add    esp,0x10
c000f24f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f253:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f258:	75 1a                	jne    c000f274 <scanMADT()+0xf0>
c000f25a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f25f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f265:	83 e2 fe             	and    edx,0xfffffffe
c000f268:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f26e:	e9 c1 03 00 00       	jmp    c000f634 <scanMADT()+0x4b0>
c000f273:	90                   	nop
c000f274:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f27c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f280:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f283:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f287:	0f 87 a7 03 00 00    	ja     c000f634 <scanMADT()+0x4b0>
c000f28d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f295:	0f 87 99 03 00 00    	ja     c000f634 <scanMADT()+0x4b0>
c000f29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f29f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2b6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2be:	8d 50 01             	lea    edx,[eax+0x1]
c000f2c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2cd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f2d1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f2d6:	83 f8 02             	cmp    eax,0x2
c000f2d9:	0f 86 51 03 00 00    	jbe    c000f630 <scanMADT()+0x4ac>
c000f2df:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2e4:	85 c0                	test   eax,eax
c000f2e6:	75 58                	jne    c000f340 <scanMADT()+0x1bc>
c000f2e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2f3:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f2f9:	0f b6 d2             	movzx  edx,dl
c000f2fc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f300:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f304:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30e:	8d 50 01             	lea    edx,[eax+0x1]
c000f311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f315:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f31b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f31e:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f324:	0f b6 d2             	movzx  edx,dl
c000f327:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f32b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f32f:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f335:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f33a:	e9 d9 02 00 00       	jmp    c000f618 <scanMADT()+0x494>
c000f33f:	90                   	nop
c000f340:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f345:	83 f8 01             	cmp    eax,0x1
c000f348:	0f 85 1a 01 00 00    	jne    c000f468 <scanMADT()+0x2e4>
c000f34e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f352:	8d 50 01             	lea    edx,[eax+0x1]
c000f355:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f359:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f35f:	0f b6 d2             	movzx  edx,dl
c000f362:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f366:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f36a:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f370:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f375:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f379:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f37d:	01 d0                	add    eax,edx
c000f37f:	83 c0 2c             	add    eax,0x2c
c000f382:	8a 00                	mov    al,BYTE PTR [eax]
c000f384:	0f b6 d0             	movzx  edx,al
c000f387:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f38b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f38e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f392:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f396:	0f b6 c0             	movzx  eax,al
c000f399:	c1 e0 08             	shl    eax,0x8
c000f39c:	89 d1                	mov    ecx,edx
c000f39e:	09 c1                	or     ecx,eax
c000f3a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a4:	8d 50 02             	lea    edx,[eax+0x2]
c000f3a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3af:	0f b6 c0             	movzx  eax,al
c000f3b2:	c1 e0 10             	shl    eax,0x10
c000f3b5:	09 c1                	or     ecx,eax
c000f3b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3bb:	8d 50 03             	lea    edx,[eax+0x3]
c000f3be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3c6:	0f b6 c0             	movzx  eax,al
c000f3c9:	c1 e0 18             	shl    eax,0x18
c000f3cc:	09 c1                	or     ecx,eax
c000f3ce:	89 ca                	mov    edx,ecx
c000f3d0:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3d5:	0f b6 c0             	movzx  eax,al
c000f3d8:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f3df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ec:	01 d0                	add    eax,edx
c000f3ee:	83 c0 2c             	add    eax,0x2c
c000f3f1:	8a 00                	mov    al,BYTE PTR [eax]
c000f3f3:	0f b6 d0             	movzx  edx,al
c000f3f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3fa:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f401:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f405:	0f b6 c0             	movzx  eax,al
c000f408:	c1 e0 08             	shl    eax,0x8
c000f40b:	89 d1                	mov    ecx,edx
c000f40d:	09 c1                	or     ecx,eax
c000f40f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f413:	8d 50 02             	lea    edx,[eax+0x2]
c000f416:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f41a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f41e:	0f b6 c0             	movzx  eax,al
c000f421:	c1 e0 10             	shl    eax,0x10
c000f424:	09 c1                	or     ecx,eax
c000f426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42a:	8d 50 03             	lea    edx,[eax+0x3]
c000f42d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f431:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	c1 e0 18             	shl    eax,0x18
c000f43b:	09 c1                	or     ecx,eax
c000f43d:	89 ca                	mov    edx,ecx
c000f43f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f444:	0f b6 c0             	movzx  eax,al
c000f447:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f44e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f453:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f458:	83 c0 01             	add    eax,0x1
c000f45b:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f460:	e9 b3 01 00 00       	jmp    c000f618 <scanMADT()+0x494>
c000f465:	8d 76 00             	lea    esi,[esi+0x0]
c000f468:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f46d:	83 f8 02             	cmp    eax,0x2
c000f470:	0f 85 ea 00 00 00    	jne    c000f560 <scanMADT()+0x3dc>
c000f476:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f47a:	8d 50 01             	lea    edx,[eax+0x1]
c000f47d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f485:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f489:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f48d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f491:	8d 50 01             	lea    edx,[eax+0x1]
c000f494:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f498:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f49c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4a0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ac:	01 d0                	add    eax,edx
c000f4ae:	83 c0 2c             	add    eax,0x2c
c000f4b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4b3:	0f b6 d0             	movzx  edx,al
c000f4b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ba:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4c5:	0f b6 c0             	movzx  eax,al
c000f4c8:	c1 e0 08             	shl    eax,0x8
c000f4cb:	89 d1                	mov    ecx,edx
c000f4cd:	09 c1                	or     ecx,eax
c000f4cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d3:	8d 50 02             	lea    edx,[eax+0x2]
c000f4d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4da:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4de:	0f b6 c0             	movzx  eax,al
c000f4e1:	c1 e0 10             	shl    eax,0x10
c000f4e4:	09 c1                	or     ecx,eax
c000f4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ea:	8d 50 03             	lea    edx,[eax+0x3]
c000f4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4f5:	0f b6 c0             	movzx  eax,al
c000f4f8:	c1 e0 18             	shl    eax,0x18
c000f4fb:	09 c8                	or     eax,ecx
c000f4fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f501:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f50a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50e:	01 d0                	add    eax,edx
c000f510:	83 c0 2c             	add    eax,0x2c
c000f513:	8a 00                	mov    al,BYTE PTR [eax]
c000f515:	0f b6 d0             	movzx  edx,al
c000f518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f51f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f523:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f527:	0f b6 c0             	movzx  eax,al
c000f52a:	c1 e0 08             	shl    eax,0x8
c000f52d:	09 d0                	or     eax,edx
c000f52f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f534:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f539:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f53e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f542:	88 90 48 31 02 c0    	mov    BYTE PTR [eax-0x3ffdceb8],dl
c000f548:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f54d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f552:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f55a:	e9 b9 00 00 00       	jmp    c000f618 <scanMADT()+0x494>
c000f55f:	90                   	nop
c000f560:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f565:	83 f8 04             	cmp    eax,0x4
c000f568:	0f 85 9a 00 00 00    	jne    c000f608 <scanMADT()+0x484>
c000f56e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f572:	8d 50 01             	lea    edx,[eax+0x1]
c000f575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f57d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f581:	0f b6 c0             	movzx  eax,al
c000f584:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f588:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f58c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f590:	01 d0                	add    eax,edx
c000f592:	83 c0 2c             	add    eax,0x2c
c000f595:	8a 00                	mov    al,BYTE PTR [eax]
c000f597:	0f b6 d0             	movzx  edx,al
c000f59a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f59e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5a9:	0f b6 c0             	movzx  eax,al
c000f5ac:	c1 e0 08             	shl    eax,0x8
c000f5af:	09 d0                	or     eax,edx
c000f5b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5b5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5cd:	0f b6 c0             	movzx  eax,al
c000f5d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5d8:	c1 e0 08             	shl    eax,0x8
c000f5db:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f5df:	89 c1                	mov    ecx,eax
c000f5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5e5:	c1 e0 18             	shl    eax,0x18
c000f5e8:	89 c3                	mov    ebx,eax
c000f5ea:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f5ef:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f2:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f5f8:	09 d9                	or     ecx,ebx
c000f5fa:	89 ca                	mov    edx,ecx
c000f5fc:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f603:	eb 13                	jmp    c000f618 <scanMADT()+0x494>
c000f605:	8d 76 00             	lea    esi,[esi+0x0]
c000f608:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f60d:	83 f8 05             	cmp    eax,0x5
c000f610:	75 06                	jne    c000f618 <scanMADT()+0x494>
c000f612:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f617:	90                   	nop
c000f618:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f61d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f621:	01 d0                	add    eax,edx
c000f623:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f627:	e9 50 fc ff ff       	jmp    c000f27c <scanMADT()+0xf8>
c000f62c:	90                   	nop
c000f62d:	eb 05                	jmp    c000f634 <scanMADT()+0x4b0>
c000f62f:	90                   	nop
c000f630:	90                   	nop
c000f631:	8d 76 00             	lea    esi,[esi+0x0]
c000f634:	83 c4 38             	add    esp,0x38
c000f637:	5b                   	pop    ebx
c000f638:	c3                   	ret    
c000f639:	90                   	nop
c000f63a:	66 90                	xchg   ax,ax

c000f63c <ACPI::ACPI()>:
c000f63c:	83 ec 0c             	sub    esp,0xc
c000f63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f643:	83 ec 08             	sub    esp,0x8
c000f646:	68 51 1a 02 c0       	push   0xc0021a51
c000f64b:	50                   	push   eax
c000f64c:	e8 3b d2 ff ff       	call   c000c88c <Device::Device(char const*)>
c000f651:	83 c4 10             	add    esp,0x10
c000f654:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c000f659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f65d:	89 10                	mov    DWORD PTR [eax],edx
c000f65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f663:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f686:	e8 f9 fa ff ff       	call   c000f184 <scanMADT()>
c000f68b:	90                   	nop
c000f68c:	83 c4 0c             	add    esp,0xc
c000f68f:	c3                   	ret    

c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f690:	83 ec 2c             	sub    esp,0x2c
c000f693:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f697:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f69b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f69f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6a3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6a8:	88 c8                	mov    al,cl
c000f6aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6b3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6bb:	90                   	nop
c000f6bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6c0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6c6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6ca:	0f 8d b0 00 00 00    	jge    c000f780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f6d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6d8:	83 c2 2a             	add    edx,0x2a
c000f6db:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f6df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f6e4:	0f b7 c0             	movzx  eax,ax
c000f6e7:	39 c2                	cmp    edx,eax
c000f6e9:	0f 85 85 00 00 00    	jne    c000f774 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6f7:	83 c2 2a             	add    edx,0x2a
c000f6fa:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f6fe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f703:	0f b6 c0             	movzx  eax,al
c000f706:	39 c2                	cmp    edx,eax
c000f708:	75 6a                	jne    c000f774 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f70a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f70f:	85 c0                	test   eax,eax
c000f711:	74 3d                	je     c000f750 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f71b:	83 c2 2a             	add    edx,0x2a
c000f71e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f726:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f729:	39 c2                	cmp    edx,eax
c000f72b:	74 13                	je     c000f740 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f72d:	83 ec 0c             	sub    esp,0xc
c000f730:	68 cc 19 02 c0       	push   0xc00219cc
c000f735:	e8 57 1b 00 00       	call   c0011291 <KePanic(char const*)>
c000f73a:	83 c4 10             	add    esp,0x10
c000f73d:	8d 76 00             	lea    esi,[esi+0x0]
c000f740:	83 ec 0c             	sub    esp,0xc
c000f743:	68 56 1a 02 c0       	push   0xc0021a56
c000f748:	e8 44 1b 00 00       	call   c0011291 <KePanic(char const*)>
c000f74d:	83 c4 10             	add    esp,0x10
c000f750:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f754:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f758:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f75c:	83 c2 2a             	add    edx,0x2a
c000f75f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f763:	8b 02                	mov    eax,DWORD PTR [edx]
c000f765:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f768:	89 01                	mov    DWORD PTR [ecx],eax
c000f76a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f76d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f772:	66 90                	xchg   ax,ax
c000f774:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f779:	e9 3e ff ff ff       	jmp    c000f6bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f77e:	66 90                	xchg   ax,ax
c000f780:	90                   	nop
c000f781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f785:	83 c4 2c             	add    esp,0x2c
c000f788:	c2 04 00             	ret    0x4
c000f78b:	90                   	nop

c000f78c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f78c:	83 ec 1c             	sub    esp,0x1c
c000f78f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f793:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f797:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f79b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7a0:	88 c8                	mov    al,cl
c000f7a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7a6:	88 d0                	mov    al,dl
c000f7a8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7b0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ba:	83 c2 2a             	add    edx,0x2a
c000f7bd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f7c1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7da:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7e9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f7ed:	83 c0 01             	add    eax,0x1
c000f7f0:	88 c1                	mov    cl,al
c000f7f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f6:	83 c2 2a             	add    edx,0x2a
c000f7f9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f801:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f80e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f812:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f820:	8d 50 01             	lea    edx,[eax+0x1]
c000f823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f827:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f831:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f837:	3d 00 02 00 00       	cmp    eax,0x200
c000f83c:	75 12                	jne    c000f850 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f83e:	83 ec 0c             	sub    esp,0xc
c000f841:	68 65 1a 02 c0       	push   0xc0021a65
c000f846:	e8 46 1a 00 00       	call   c0011291 <KePanic(char const*)>
c000f84b:	83 c4 10             	add    esp,0x10
c000f84e:	66 90                	xchg   ax,ax
c000f850:	90                   	nop
c000f851:	83 c4 1c             	add    esp,0x1c
c000f854:	c3                   	ret    
c000f855:	90                   	nop
c000f856:	66 90                	xchg   ax,ax

c000f858 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f858:	b8 00 00 00 00       	mov    eax,0x0
c000f85d:	c3                   	ret    
c000f85e:	66 90                	xchg   ax,ax

c000f860 <ACPI::detectPCI()>:
c000f860:	53                   	push   ebx
c000f861:	83 ec 28             	sub    esp,0x28
c000f864:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f869:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f86e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f873:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f879:	83 e0 04             	and    eax,0x4
c000f87c:	0f b6 c0             	movzx  eax,al
c000f87f:	85 c0                	test   eax,eax
c000f881:	74 2d                	je     c000f8b0 <ACPI::detectPCI()+0x50>
c000f883:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f888:	83 ec 08             	sub    esp,0x8
c000f88b:	68 82 1a 02 c0       	push   0xc0021a82
c000f890:	50                   	push   eax
c000f891:	e8 6e f8 ff ff       	call   c000f104 <findDataTable(unsigned char*, char*)>
c000f896:	83 c4 10             	add    esp,0x10
c000f899:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f89d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8a2:	74 0c                	je     c000f8b0 <ACPI::detectPCI()+0x50>
c000f8a4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8a9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8ae:	66 90                	xchg   ax,ax
c000f8b0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8bc:	8a 00                	mov    al,BYTE PTR [eax]
c000f8be:	0f b6 c0             	movzx  eax,al
c000f8c1:	83 f8 01             	cmp    eax,0x1
c000f8c4:	75 0e                	jne    c000f8d4 <ACPI::detectPCI()+0x74>
c000f8c6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8cb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8d0:	eb 2e                	jmp    c000f900 <ACPI::detectPCI()+0xa0>
c000f8d2:	66 90                	xchg   ax,ax
c000f8d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8da:	0f b6 c0             	movzx  eax,al
c000f8dd:	83 f8 02             	cmp    eax,0x2
c000f8e0:	75 1e                	jne    c000f900 <ACPI::detectPCI()+0xa0>
c000f8e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8e7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8ec:	85 c0                	test   eax,eax
c000f8ee:	74 10                	je     c000f900 <ACPI::detectPCI()+0xa0>
c000f8f0:	83 ec 0c             	sub    esp,0xc
c000f8f3:	68 fc 19 02 c0       	push   0xc00219fc
c000f8f8:	e8 94 19 00 00       	call   c0011291 <KePanic(char const*)>
c000f8fd:	83 c4 10             	add    esp,0x10
c000f900:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f904:	83 f0 01             	xor    eax,0x1
c000f907:	0f b6 c0             	movzx  eax,al
c000f90a:	85 c0                	test   eax,eax
c000f90c:	74 46                	je     c000f954 <ACPI::detectPCI()+0xf4>
c000f90e:	e8 1d 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f913:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f917:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f91c:	75 0e                	jne    c000f92c <ACPI::detectPCI()+0xcc>
c000f91e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f923:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f928:	eb 2a                	jmp    c000f954 <ACPI::detectPCI()+0xf4>
c000f92a:	66 90                	xchg   ax,ax
c000f92c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f931:	75 21                	jne    c000f954 <ACPI::detectPCI()+0xf4>
c000f933:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f938:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f93d:	85 c0                	test   eax,eax
c000f93f:	74 13                	je     c000f954 <ACPI::detectPCI()+0xf4>
c000f941:	83 ec 0c             	sub    esp,0xc
c000f944:	68 fc 19 02 c0       	push   0xc00219fc
c000f949:	e8 43 19 00 00       	call   c0011291 <KePanic(char const*)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	8d 76 00             	lea    esi,[esi+0x0]
c000f954:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f959:	85 c0                	test   eax,eax
c000f95b:	0f 84 87 00 00 00    	je     c000f9e8 <ACPI::detectPCI()+0x188>
c000f961:	83 ec 0c             	sub    esp,0xc
c000f964:	68 87 1a 02 c0       	push   0xc0021a87
c000f969:	e8 4f 12 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000f96e:	83 c4 10             	add    esp,0x10
c000f971:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f980:	e8 4e 81 ff ff       	call   c0007ad3 <malloc>
c000f985:	83 c4 10             	add    esp,0x10
c000f988:	89 c3                	mov    ebx,eax
c000f98a:	83 ec 0c             	sub    esp,0xc
c000f98d:	53                   	push   ebx
c000f98e:	e8 eb b2 00 00       	call   c001ac7e <PCI::PCI()>
c000f993:	83 c4 10             	add    esp,0x10
c000f996:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f99a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f99e:	83 ec 08             	sub    esp,0x8
c000f9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a5:	50                   	push   eax
c000f9a6:	e8 49 cd ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b4:	83 c0 08             	add    eax,0x8
c000f9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9be:	85 d2                	test   edx,edx
c000f9c0:	74 0a                	je     c000f9cc <ACPI::detectPCI()+0x16c>
c000f9c2:	ba 01 00 00 00       	mov    edx,0x1
c000f9c7:	eb 0b                	jmp    c000f9d4 <ACPI::detectPCI()+0x174>
c000f9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9cc:	ba 02 00 00 00       	mov    edx,0x2
c000f9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d4:	6a 00                	push   0x0
c000f9d6:	6a 00                	push   0x0
c000f9d8:	52                   	push   edx
c000f9d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9dd:	ff d0                	call   eax
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	e9 91 00 00 00       	jmp    c000fa78 <ACPI::detectPCI()+0x218>
c000f9e7:	90                   	nop
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 9f 1a 02 c0       	push   0xc0021a9f
c000f9f0:	e8 c8 11 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f9ff:	83 ec 0c             	sub    esp,0xc
c000fa02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa06:	e8 c8 80 ff ff       	call   c0007ad3 <malloc>
c000fa0b:	83 c4 10             	add    esp,0x10
c000fa0e:	89 c3                	mov    ebx,eax
c000fa10:	83 ec 0c             	sub    esp,0xc
c000fa13:	53                   	push   ebx
c000fa14:	e8 0d be 00 00       	call   c001b826 <IDE::IDE()>
c000fa19:	83 c4 10             	add    esp,0x10
c000fa1c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa24:	83 ec 08             	sub    esp,0x8
c000fa27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa2b:	50                   	push   eax
c000fa2c:	e8 c3 cc ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa38:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa46:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa53:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa62:	83 c0 08             	add    eax,0x8
c000fa65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa67:	6a 00                	push   0x0
c000fa69:	6a 00                	push   0x0
c000fa6b:	6a 00                	push   0x0
c000fa6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa71:	ff d0                	call   eax
c000fa73:	83 c4 10             	add    esp,0x10
c000fa76:	66 90                	xchg   ax,ax
c000fa78:	90                   	nop
c000fa79:	83 c4 28             	add    esp,0x28
c000fa7c:	5b                   	pop    ebx
c000fa7d:	c3                   	ret    
c000fa7e:	66 90                	xchg   ax,ax

c000fa80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa80:	83 ec 1c             	sub    esp,0x1c
c000fa83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa87:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa8e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa93:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa98:	83 ec 08             	sub    esp,0x8
c000fa9b:	52                   	push   edx
c000fa9c:	50                   	push   eax
c000fa9d:	e8 f8 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000faa9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000faae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fab3:	83 ec 04             	sub    esp,0x4
c000fab6:	6a 01                	push   0x1
c000fab8:	52                   	push   edx
c000fab9:	50                   	push   eax
c000faba:	e8 f3 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	90                   	nop
c000fac3:	83 c4 1c             	add    esp,0x1c
c000fac6:	c3                   	ret    
c000fac7:	90                   	nop

c000fac8 <ACPI::sleep()>:
c000fac8:	83 ec 0c             	sub    esp,0xc
c000facb:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fad0:	85 c0                	test   eax,eax
c000fad2:	74 08                	je     c000fadc <ACPI::sleep()+0x14>
c000fad4:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fad9:	ff d0                	call   eax
c000fadb:	90                   	nop
c000fadc:	90                   	nop
c000fadd:	83 c4 0c             	add    esp,0xc
c000fae0:	c3                   	ret    
c000fae1:	90                   	nop
c000fae2:	66 90                	xchg   ax,ax

c000fae4 <ACPI::open(int, int, void*)>:
c000fae4:	55                   	push   ebp
c000fae5:	89 e5                	mov    ebp,esp
c000fae7:	53                   	push   ebx
c000fae8:	81 ec 74 01 00 00    	sub    esp,0x174
c000faee:	83 ec 0c             	sub    esp,0xc
c000faf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000faf4:	e8 67 fd ff ff       	call   c000f860 <ACPI::detectPCI()>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	68 24 1a 02 c0       	push   0xc0021a24
c000fb04:	e8 b4 10 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb11:	8a 00                	mov    al,BYTE PTR [eax]
c000fb13:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb16:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb1a:	83 f8 01             	cmp    eax,0x1
c000fb1d:	75 15                	jne    c000fb34 <ACPI::open(int, int, void*)+0x50>
c000fb1f:	83 ec 0c             	sub    esp,0xc
c000fb22:	68 71 13 02 c0       	push   0xc0021371
c000fb27:	e8 76 4b 00 00       	call   c00146a2 <Thr::loadKernelSymbolTable(char const*)>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	eb 33                	jmp    c000fb64 <ACPI::open(int, int, void*)+0x80>
c000fb31:	8d 76 00             	lea    esi,[esi+0x0]
c000fb34:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb38:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb3d:	75 15                	jne    c000fb54 <ACPI::open(int, int, void*)+0x70>
c000fb3f:	83 ec 0c             	sub    esp,0xc
c000fb42:	68 b4 1a 02 c0       	push   0xc0021ab4
c000fb47:	e8 56 4b 00 00       	call   c00146a2 <Thr::loadKernelSymbolTable(char const*)>
c000fb4c:	83 c4 10             	add    esp,0x10
c000fb4f:	eb 13                	jmp    c000fb64 <ACPI::open(int, int, void*)+0x80>
c000fb51:	8d 76 00             	lea    esi,[esi+0x0]
c000fb54:	83 ec 0c             	sub    esp,0xc
c000fb57:	68 d2 1a 02 c0       	push   0xc0021ad2
c000fb5c:	e8 30 17 00 00       	call   c0011291 <KePanic(char const*)>
c000fb61:	83 c4 10             	add    esp,0x10
c000fb64:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb68:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fb75:	e8 59 7f ff ff       	call   c0007ad3 <malloc>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	89 c3                	mov    ebx,eax
c000fb7f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fb84:	83 ec 04             	sub    esp,0x4
c000fb87:	50                   	push   eax
c000fb88:	68 ec 1a 02 c0       	push   0xc0021aec
c000fb8d:	53                   	push   ebx
c000fb8e:	e8 37 bc ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c000fb93:	83 c4 10             	add    esp,0x10
c000fb96:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fb99:	83 ec 08             	sub    esp,0x8
c000fb9c:	6a 01                	push   0x1
c000fb9e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fba1:	e8 ec bc ff ff       	call   c000b892 <File::open(FileOpenMode)>
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fbac:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fbb0:	75 12                	jne    c000fbc4 <ACPI::open(int, int, void*)+0xe0>
c000fbb2:	83 ec 0c             	sub    esp,0xc
c000fbb5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbb8:	e8 33 bd ff ff       	call   c000b8f0 <File::close()>
c000fbbd:	83 c4 10             	add    esp,0x10
c000fbc0:	eb 06                	jmp    c000fbc8 <ACPI::open(int, int, void*)+0xe4>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbc8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fbcc:	74 16                	je     c000fbe4 <ACPI::open(int, int, void*)+0x100>
c000fbce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd3:	83 c0 08             	add    eax,0x8
c000fbd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd8:	83 ec 0c             	sub    esp,0xc
c000fbdb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbde:	ff d0                	call   eax
c000fbe0:	83 c4 10             	add    esp,0x10
c000fbe3:	90                   	nop
c000fbe4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fbe7:	83 f0 01             	xor    eax,0x1
c000fbea:	0f b6 c0             	movzx  eax,al
c000fbed:	85 c0                	test   eax,eax
c000fbef:	74 3b                	je     c000fc2c <ACPI::open(int, int, void*)+0x148>
c000fbf1:	83 ec 0c             	sub    esp,0xc
c000fbf4:	68 0a 1b 02 c0       	push   0xc0021b0a
c000fbf9:	e8 bf 0f 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	83 ec 04             	sub    esp,0x4
c000fc04:	6a 0c                	push   0xc
c000fc06:	68 25 1b 02 c0       	push   0xc0021b25
c000fc0b:	68 36 1b 02 c0       	push   0xc0021b36
c000fc10:	e8 39 3d 00 00       	call   c001394e <Reg::readIntWithDefault(char*, char*, int)>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc1b:	83 ec 0c             	sub    esp,0xc
c000fc1e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc21:	e8 f4 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc26:	83 c4 10             	add    esp,0x10
c000fc29:	8d 76 00             	lea    esi,[esi+0x0]
c000fc2c:	83 ec 0c             	sub    esp,0xc
c000fc2f:	68 35 06 02 c0       	push   0xc0020635
c000fc34:	e8 84 0f 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc3f:	83 ec 08             	sub    esp,0x8
c000fc42:	6a 13                	push   0x13
c000fc44:	50                   	push   eax
c000fc45:	e8 c2 cd ff ff       	call   c000ca0c <getDevicesOfType(DeviceType)>
c000fc4a:	83 c4 0c             	add    esp,0xc
c000fc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc50:	83 ec 0c             	sub    esp,0xc
c000fc53:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc56:	50                   	push   eax
c000fc57:	e8 d4 fd 00 00       	call   c001fa30 <LinkedList<Device>::isEmpty()>
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	83 f0 01             	xor    eax,0x1
c000fc62:	0f b6 c0             	movzx  eax,al
c000fc65:	85 c0                	test   eax,eax
c000fc67:	0f 84 1f 01 00 00    	je     c000fd8c <ACPI::open(int, int, void*)+0x2a8>
c000fc6d:	83 ec 0c             	sub    esp,0xc
c000fc70:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc73:	50                   	push   eax
c000fc74:	e8 d3 fd 00 00       	call   c001fa4c <LinkedList<Device>::getFirstElement()>
c000fc79:	83 c4 10             	add    esp,0x10
c000fc7c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fc7f:	83 ec 0c             	sub    esp,0xc
c000fc82:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc85:	50                   	push   eax
c000fc86:	e8 c9 fd 00 00       	call   c001fa54 <LinkedList<Device>::removeFirst()>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fc91:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fc94:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fc97:	b8 24 00 00 00       	mov    eax,0x24
c000fc9c:	83 e0 fc             	and    eax,0xfffffffc
c000fc9f:	89 c3                	mov    ebx,eax
c000fca1:	b8 00 00 00 00       	mov    eax,0x0
c000fca6:	66 90                	xchg   ax,ax
c000fca8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fcaf:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fcb6:	83 c0 04             	add    eax,0x4
c000fcb9:	39 d8                	cmp    eax,ebx
c000fcbb:	72 eb                	jb     c000fca8 <ACPI::open(int, int, void*)+0x1c4>
c000fcbd:	83 ec 08             	sub    esp,0x8
c000fcc0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fcc6:	50                   	push   eax
c000fcc7:	83 ec 24             	sub    esp,0x24
c000fcca:	89 e1                	mov    ecx,esp
c000fccc:	b8 24 00 00 00       	mov    eax,0x24
c000fcd1:	83 e0 fc             	and    eax,0xfffffffc
c000fcd4:	89 c3                	mov    ebx,eax
c000fcd6:	b8 00 00 00 00       	mov    eax,0x0
c000fcdb:	90                   	nop
c000fcdc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fce3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fce6:	83 c0 04             	add    eax,0x4
c000fce9:	39 d8                	cmp    eax,ebx
c000fceb:	72 ef                	jb     c000fcdc <ACPI::open(int, int, void*)+0x1f8>
c000fced:	e8 74 b4 00 00       	call   c001b166 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fcf2:	83 c4 30             	add    esp,0x30
c000fcf5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fcf8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fcfc:	0f 84 4e ff ff ff    	je     c000fc50 <ACPI::open(int, int, void*)+0x16c>
c000fd02:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd09:	83 ec 0c             	sub    esp,0xc
c000fd0c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd0f:	e8 bf 7d ff ff       	call   c0007ad3 <malloc>
c000fd14:	83 c4 10             	add    esp,0x10
c000fd17:	89 c3                	mov    ebx,eax
c000fd19:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd1e:	83 ec 04             	sub    esp,0x4
c000fd21:	50                   	push   eax
c000fd22:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd25:	53                   	push   ebx
c000fd26:	e8 9f ba ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd31:	83 ec 0c             	sub    esp,0xc
c000fd34:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd37:	e8 1a be ff ff       	call   c000bb56 <File::exists()>
c000fd3c:	83 c4 10             	add    esp,0x10
c000fd3f:	0f b6 c0             	movzx  eax,al
c000fd42:	85 c0                	test   eax,eax
c000fd44:	74 22                	je     c000fd68 <ACPI::open(int, int, void*)+0x284>
c000fd46:	83 ec 08             	sub    esp,0x8
c000fd49:	6a 01                	push   0x1
c000fd4b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd4e:	e8 d1 53 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	83 ec 08             	sub    esp,0x8
c000fd59:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fd5c:	50                   	push   eax
c000fd5d:	e8 02 56 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	8d 76 00             	lea    esi,[esi+0x0]
c000fd68:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fd6c:	0f 84 de fe ff ff    	je     c000fc50 <ACPI::open(int, int, void*)+0x16c>
c000fd72:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fd75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd77:	83 c0 08             	add    eax,0x8
c000fd7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7c:	83 ec 0c             	sub    esp,0xc
c000fd7f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd82:	ff d0                	call   eax
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	e9 c4 fe ff ff       	jmp    c000fc50 <ACPI::open(int, int, void*)+0x16c>
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fd92:	50                   	push   eax
c000fd93:	e8 94 fc 00 00       	call   c001fa2c <LinkedList<Device>::~LinkedList()>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fda1:	83 ec 08             	sub    esp,0x8
c000fda4:	6a 01                	push   0x1
c000fda6:	68 3d 1b 02 c0       	push   0xc0021b3d
c000fdab:	e8 74 53 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 ec 08             	sub    esp,0x8
c000fdb6:	53                   	push   ebx
c000fdb7:	50                   	push   eax
c000fdb8:	e8 a7 55 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fdc5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fdcb:	83 e0 04             	and    eax,0x4
c000fdce:	0f b6 c0             	movzx  eax,al
c000fdd1:	85 c0                	test   eax,eax
c000fdd3:	0f 84 e3 00 00 00    	je     c000febc <ACPI::open(int, int, void*)+0x3d8>
c000fdd9:	83 ec 0c             	sub    esp,0xc
c000fddc:	68 5a 1b 02 c0       	push   0xc0021b5a
c000fde1:	e8 d7 0d 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c000fde6:	83 c4 10             	add    esp,0x10
c000fde9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fdf0:	83 ec 0c             	sub    esp,0xc
c000fdf3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fdf6:	e8 d8 7c ff ff       	call   c0007ad3 <malloc>
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	89 c3                	mov    ebx,eax
c000fe00:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe05:	83 ec 04             	sub    esp,0x4
c000fe08:	50                   	push   eax
c000fe09:	68 77 1b 02 c0       	push   0xc0021b77
c000fe0e:	53                   	push   ebx
c000fe0f:	e8 b6 b9 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe1a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe1e:	74 1c                	je     c000fe3c <ACPI::open(int, int, void*)+0x358>
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe26:	e8 2b bd ff ff       	call   c000bb56 <File::exists()>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	0f b6 c0             	movzx  eax,al
c000fe31:	85 c0                	test   eax,eax
c000fe33:	74 07                	je     c000fe3c <ACPI::open(int, int, void*)+0x358>
c000fe35:	b0 01                	mov    al,0x1
c000fe37:	eb 07                	jmp    c000fe40 <ACPI::open(int, int, void*)+0x35c>
c000fe39:	8d 76 00             	lea    esi,[esi+0x0]
c000fe3c:	b0 00                	mov    al,0x0
c000fe3e:	66 90                	xchg   ax,ax
c000fe40:	0f b6 c0             	movzx  eax,al
c000fe43:	85 c0                	test   eax,eax
c000fe45:	74 21                	je     c000fe68 <ACPI::open(int, int, void*)+0x384>
c000fe47:	83 ec 08             	sub    esp,0x8
c000fe4a:	6a 01                	push   0x1
c000fe4c:	68 77 1b 02 c0       	push   0xc0021b77
c000fe51:	e8 ce 52 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c000fe56:	83 c4 10             	add    esp,0x10
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe5f:	50                   	push   eax
c000fe60:	e8 ff 54 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe6c:	74 1e                	je     c000fe8c <ACPI::open(int, int, void*)+0x3a8>
c000fe6e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe72:	74 18                	je     c000fe8c <ACPI::open(int, int, void*)+0x3a8>
c000fe74:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fe77:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe79:	83 c0 08             	add    eax,0x8
c000fe7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe7e:	83 ec 0c             	sub    esp,0xc
c000fe81:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe84:	ff d0                	call   eax
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	8d 76 00             	lea    esi,[esi+0x0]
c000fe8c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe91:	83 ec 08             	sub    esp,0x8
c000fe94:	68 94 1b 02 c0       	push   0xc0021b94
c000fe99:	50                   	push   eax
c000fe9a:	e8 65 f2 ff ff       	call   c000f104 <findDataTable(unsigned char*, char*)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fea5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fea9:	74 11                	je     c000febc <ACPI::open(int, int, void*)+0x3d8>
c000feab:	83 ec 08             	sub    esp,0x8
c000feae:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000feb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000feb4:	e8 c7 fb ff ff       	call   c000fa80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	b8 00 00 00 00       	mov    eax,0x0
c000fec1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fec4:	c9                   	leave  
c000fec5:	c3                   	ret    

c000fec6 <CPU::close(int, int, void*)>:
c000fec6:	31 c0                	xor    eax,eax
c000fec8:	c3                   	ret    
c000fec9:	90                   	nop

c000feca <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000feca:	60                   	pusha  
c000fecb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fecf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fed7:	9c                   	pushf  
c000fed8:	fa                   	cli    
c000fed9:	0f 09                	wbinvd 
c000fedb:	0f 30                	wrmsr  
c000fedd:	9d                   	popf   
c000fede:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee2:	89 02                	mov    DWORD PTR [edx],eax
c000fee4:	61                   	popa   
c000fee5:	c3                   	ret    

c000fee6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fee6:	60                   	pusha  
c000fee7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000feeb:	9c                   	pushf  
c000feec:	fa                   	cli    
c000feed:	0f 09                	wbinvd 
c000feef:	31 c0                	xor    eax,eax
c000fef1:	31 d2                	xor    edx,edx
c000fef3:	0f 32                	rdmsr  
c000fef5:	9d                   	popf   
c000fef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fefa:	89 02                	mov    DWORD PTR [edx],eax
c000fefc:	61                   	popa   
c000fefd:	c3                   	ret    

c000fefe <CPU::AMD_K6_writeback(int, int, int)>:
c000fefe:	56                   	push   esi
c000feff:	53                   	push   ebx
c000ff00:	83 ec 10             	sub    esp,0x10
c000ff03:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff0c:	75 5d                	jne    c000ff6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff0e:	83 f8 08             	cmp    eax,0x8
c000ff11:	75 09                	jne    c000ff1c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff13:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff18:	7e 13                	jle    c000ff2d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff1a:	eb 30                	jmp    c000ff4c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff1c:	83 f8 06             	cmp    eax,0x6
c000ff1f:	7c 4a                	jl     c000ff6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff21:	83 f8 07             	cmp    eax,0x7
c000ff24:	7e 07                	jle    c000ff2d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff26:	83 f8 09             	cmp    eax,0x9
c000ff29:	74 21                	je     c000ff4c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff2b:	eb 3e                	jmp    c000ff6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff2d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff33:	89 e6                	mov    esi,esp
c000ff35:	56                   	push   esi
c000ff36:	68 82 00 00 c0       	push   0xc0000082
c000ff3b:	e8 a6 ff ff ff       	call   c000fee6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff40:	c1 eb 15             	shr    ebx,0x15
c000ff43:	56                   	push   esi
c000ff44:	83 e3 7e             	and    ebx,0x7e
c000ff47:	6a 00                	push   0x0
c000ff49:	53                   	push   ebx
c000ff4a:	eb 12                	jmp    c000ff5e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff4c:	89 e3                	mov    ebx,esp
c000ff4e:	53                   	push   ebx
c000ff4f:	68 82 00 00 c0       	push   0xc0000082
c000ff54:	e8 8d ff ff ff       	call   c000fee6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff59:	53                   	push   ebx
c000ff5a:	6a 00                	push   0x0
c000ff5c:	6a 00                	push   0x0
c000ff5e:	68 82 00 00 c0       	push   0xc0000082
c000ff63:	e8 62 ff ff ff       	call   c000feca <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff68:	83 c4 18             	add    esp,0x18
c000ff6b:	83 c4 10             	add    esp,0x10
c000ff6e:	5b                   	pop    ebx
c000ff6f:	5e                   	pop    esi
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff72:	55                   	push   ebp
c000ff73:	57                   	push   edi
c000ff74:	56                   	push   esi
c000ff75:	53                   	push   ebx
c000ff76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff7a:	39 05 58 31 02 c0    	cmp    DWORD PTR ds:0xc0023158,eax
c000ff80:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff84:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff88:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff8c:	75 23                	jne    c000ffb1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff8e:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff97:	89 06                	mov    DWORD PTR [esi],eax
c000ff99:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ff9e:	89 07                	mov    DWORD PTR [edi],eax
c000ffa0:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ffa5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ffa8:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ffad:	89 02                	mov    DWORD PTR [edx],eax
c000ffaf:	eb 3f                	jmp    c000fff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ffb1:	31 c9                	xor    ecx,ecx
c000ffb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb7:	0f a2                	cpuid  
c000ffb9:	89 06                	mov    DWORD PTR [esi],eax
c000ffbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffbf:	89 1f                	mov    DWORD PTR [edi],ebx
c000ffc1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ffc4:	89 10                	mov    DWORD PTR [eax],edx
c000ffc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffca:	a3 58 31 02 c0       	mov    ds:0xc0023158,eax
c000ffcf:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffd1:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ffd6:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffd8:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ffdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ffe0:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffeb:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000fff0:	5b                   	pop    ebx
c000fff1:	5e                   	pop    esi
c000fff2:	5f                   	pop    edi
c000fff3:	5d                   	pop    ebp
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <CPU::cpuidCheckEDX(unsigned int)>:
c000fff6:	83 ec 10             	sub    esp,0x10
c000fff9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fffd:	50                   	push   eax
c000fffe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010002:	50                   	push   eax
c0010003:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010007:	50                   	push   eax
c0010008:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000c:	50                   	push   eax
c001000d:	6a 01                	push   0x1
c001000f:	e8 5e ff ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010018:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001001c:	0f 95 c0             	setne  al
c001001f:	83 c4 24             	add    esp,0x24
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <CPU::cpuidCheckECX(unsigned int)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001002b:	50                   	push   eax
c001002c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010030:	50                   	push   eax
c0010031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010035:	50                   	push   eax
c0010036:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003a:	50                   	push   eax
c001003b:	6a 01                	push   0x1
c001003d:	e8 30 ff ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010046:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001004a:	0f 95 c0             	setne  al
c001004d:	83 c4 24             	add    esp,0x24
c0010050:	c3                   	ret    
c0010051:	90                   	nop

c0010052 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010052:	83 ec 10             	sub    esp,0x10
c0010055:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010059:	50                   	push   eax
c001005a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005e:	50                   	push   eax
c001005f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010063:	50                   	push   eax
c0010064:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010068:	50                   	push   eax
c0010069:	6a 07                	push   0x7
c001006b:	e8 02 ff ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010070:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010074:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010078:	0f 95 c0             	setne  al
c001007b:	83 c4 24             	add    esp,0x24
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010080:	83 ec 10             	sub    esp,0x10
c0010083:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010087:	50                   	push   eax
c0010088:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008c:	50                   	push   eax
c001008d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010091:	50                   	push   eax
c0010092:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010096:	50                   	push   eax
c0010097:	6a 07                	push   0x7
c0010099:	e8 d4 fe ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001009e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100a2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100a6:	0f 95 c0             	setne  al
c00100a9:	83 c4 24             	add    esp,0x24
c00100ac:	c3                   	ret    
c00100ad:	90                   	nop

c00100ae <CPU::CPU()>:
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b5:	83 ec 08             	sub    esp,0x8
c00100b8:	68 b9 1c 02 c0       	push   0xc0021cb9
c00100bd:	50                   	push   eax
c00100be:	e8 c9 c7 ff ff       	call   c000c88c <Device::Device(char const*)>
c00100c3:	83 c4 10             	add    esp,0x10
c00100c6:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c00100cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100cf:	89 10                	mov    DWORD PTR [eax],edx
c00100d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00100df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e3:	05 78 01 00 00       	add    eax,0x178
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	50                   	push   eax
c00100ec:	e8 8b 72 ff ff       	call   c000737c <GDT::GDT()>
c00100f1:	83 c4 10             	add    esp,0x10
c00100f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f8:	05 7c 09 00 00       	add    eax,0x97c
c00100fd:	83 ec 0c             	sub    esp,0xc
c0010100:	50                   	push   eax
c0010101:	e8 c6 74 ff ff       	call   c00075cc <IDT::IDT()>
c0010106:	83 c4 10             	add    esp,0x10
c0010109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010d:	05 7c 11 00 00       	add    eax,0x117c
c0010112:	83 ec 0c             	sub    esp,0xc
c0010115:	50                   	push   eax
c0010116:	e8 11 8e ff ff       	call   c0008f2c <TSS::TSS()>
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010122:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010137:	90                   	nop
c0010138:	83 c4 0c             	add    esp,0xc
c001013b:	c3                   	ret    

c001013c <CPU::displayFeatures()>:
c001013c:	c3                   	ret    
c001013d:	90                   	nop

c001013e <CPU::detectFeatures()>:
c001013e:	55                   	push   ebp
c001013f:	57                   	push   edi
c0010140:	56                   	push   esi
c0010141:	53                   	push   ebx
c0010142:	83 ec 30             	sub    esp,0x30
c0010145:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010149:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010153:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010159:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010160:	6a 0d                	push   0xd
c0010162:	6a 00                	push   0x0
c0010164:	55                   	push   ebp
c0010165:	e8 86 03 ff ff       	call   c00004f0 <memset>
c001016a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001016f:	83 c4 10             	add    esp,0x10
c0010172:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010179:	0f 84 db 05 00 00    	je     c001075a <CPU::detectFeatures()+0x61c>
c001017f:	83 ec 0c             	sub    esp,0xc
c0010182:	89 ef                	mov    edi,ebp
c0010184:	6a 10                	push   0x10
c0010186:	e8 6b fe ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c001018b:	83 e0 01             	and    eax,0x1
c001018e:	8d 14 00             	lea    edx,[eax+eax*1]
c0010191:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010197:	83 e0 fd             	and    eax,0xfffffffd
c001019a:	09 d0                	or     eax,edx
c001019c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101a2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00101a9:	e8 48 fe ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c00101ae:	83 e0 01             	and    eax,0x1
c00101b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101b8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101be:	83 e0 fb             	and    eax,0xfffffffb
c00101c1:	09 d0                	or     eax,edx
c00101c3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101c9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00101d0:	e8 21 fe ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c00101d5:	83 e0 01             	and    eax,0x1
c00101d8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00101df:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101e5:	83 e0 f7             	and    eax,0xfffffff7
c00101e8:	09 d0                	or     eax,edx
c00101ea:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101f7:	e8 fa fd ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c00101fc:	83 e0 01             	and    eax,0x1
c00101ff:	c1 e0 04             	shl    eax,0x4
c0010202:	89 c2                	mov    edx,eax
c0010204:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001020a:	83 e0 ef             	and    eax,0xffffffef
c001020d:	09 d0                	or     eax,edx
c001020f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010215:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001021c:	e8 d5 fd ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0010221:	83 e0 01             	and    eax,0x1
c0010224:	c1 e0 05             	shl    eax,0x5
c0010227:	89 c2                	mov    edx,eax
c0010229:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001022f:	83 e0 df             	and    eax,0xffffffdf
c0010232:	09 d0                	or     eax,edx
c0010234:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001023a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010241:	e8 b0 fd ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0010246:	83 e0 01             	and    eax,0x1
c0010249:	8d 14 00             	lea    edx,[eax+eax*1]
c001024c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010252:	83 e0 fd             	and    eax,0xfffffffd
c0010255:	09 d0                	or     eax,edx
c0010257:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001025d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010264:	e8 8d fd ff ff       	call   c000fff6 <CPU::cpuidCheckEDX(unsigned int)>
c0010269:	83 e0 01             	and    eax,0x1
c001026c:	c1 e0 06             	shl    eax,0x6
c001026f:	89 c2                	mov    edx,eax
c0010271:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010277:	83 e0 bf             	and    eax,0xffffffbf
c001027a:	09 d0                	or     eax,edx
c001027c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010282:	58                   	pop    eax
c0010283:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010287:	50                   	push   eax
c0010288:	8d 44 24 28          	lea    eax,[esp+0x28]
c001028c:	50                   	push   eax
c001028d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010291:	56                   	push   esi
c0010292:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010296:	50                   	push   eax
c0010297:	6a 00                	push   0x0
c0010299:	e8 d4 fc ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001029e:	b8 04 00 00 00       	mov    eax,0x4
c00102a3:	89 c1                	mov    ecx,eax
c00102a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00102ad:	89 c1                	mov    ecx,eax
c00102af:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00102b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00102bb:	89 c1                	mov    ecx,eax
c00102bd:	8d 74 24 38          	lea    esi,[esp+0x38]
c00102c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c3:	83 c4 18             	add    esp,0x18
c00102c6:	68 c8 1b 02 c0       	push   0xc0021bc8
c00102cb:	55                   	push   ebp
c00102cc:	e8 af 04 ff ff       	call   c0000780 <strcmp>
c00102d1:	83 c4 10             	add    esp,0x10
c00102d4:	85 c0                	test   eax,eax
c00102d6:	75 0f                	jne    c00102e7 <CPU::detectFeatures()+0x1a9>
c00102d8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00102e2:	e9 22 02 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00102e7:	50                   	push   eax
c00102e8:	50                   	push   eax
c00102e9:	68 d5 1b 02 c0       	push   0xc0021bd5
c00102ee:	55                   	push   ebp
c00102ef:	e8 8c 04 ff ff       	call   c0000780 <strcmp>
c00102f4:	83 c4 10             	add    esp,0x10
c00102f7:	85 c0                	test   eax,eax
c00102f9:	74 dd                	je     c00102d8 <CPU::detectFeatures()+0x19a>
c00102fb:	50                   	push   eax
c00102fc:	50                   	push   eax
c00102fd:	68 e2 1b 02 c0       	push   0xc0021be2
c0010302:	55                   	push   ebp
c0010303:	e8 78 04 ff ff       	call   c0000780 <strcmp>
c0010308:	83 c4 10             	add    esp,0x10
c001030b:	85 c0                	test   eax,eax
c001030d:	74 2a                	je     c0010339 <CPU::detectFeatures()+0x1fb>
c001030f:	50                   	push   eax
c0010310:	50                   	push   eax
c0010311:	68 ef 1b 02 c0       	push   0xc0021bef
c0010316:	55                   	push   ebp
c0010317:	e8 64 04 ff ff       	call   c0000780 <strcmp>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	85 c0                	test   eax,eax
c0010321:	74 16                	je     c0010339 <CPU::detectFeatures()+0x1fb>
c0010323:	50                   	push   eax
c0010324:	50                   	push   eax
c0010325:	68 fc 1b 02 c0       	push   0xc0021bfc
c001032a:	55                   	push   ebp
c001032b:	e8 50 04 ff ff       	call   c0000780 <strcmp>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	85 c0                	test   eax,eax
c0010335:	74 48                	je     c001037f <CPU::detectFeatures()+0x241>
c0010337:	eb 0f                	jmp    c0010348 <CPU::detectFeatures()+0x20a>
c0010339:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010343:	e9 c1 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c0010348:	50                   	push   eax
c0010349:	50                   	push   eax
c001034a:	68 09 1c 02 c0       	push   0xc0021c09
c001034f:	55                   	push   ebp
c0010350:	e8 2b 04 ff ff       	call   c0000780 <strcmp>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	85 c0                	test   eax,eax
c001035a:	74 23                	je     c001037f <CPU::detectFeatures()+0x241>
c001035c:	57                   	push   edi
c001035d:	57                   	push   edi
c001035e:	68 16 1c 02 c0       	push   0xc0021c16
c0010363:	55                   	push   ebp
c0010364:	e8 17 04 ff ff       	call   c0000780 <strcmp>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	85 c0                	test   eax,eax
c001036e:	75 1e                	jne    c001038e <CPU::detectFeatures()+0x250>
c0010370:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001037a:	e9 8a 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c001037f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010389:	e9 7b 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c001038e:	56                   	push   esi
c001038f:	56                   	push   esi
c0010390:	68 23 1c 02 c0       	push   0xc0021c23
c0010395:	55                   	push   ebp
c0010396:	e8 e5 03 ff ff       	call   c0000780 <strcmp>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	85 c0                	test   eax,eax
c00103a0:	75 0f                	jne    c00103b1 <CPU::detectFeatures()+0x273>
c00103a2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00103ac:	e9 58 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00103b1:	51                   	push   ecx
c00103b2:	51                   	push   ecx
c00103b3:	68 e2 1b 02 c0       	push   0xc0021be2
c00103b8:	55                   	push   ebp
c00103b9:	e8 c2 03 ff ff       	call   c0000780 <strcmp>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	85 c0                	test   eax,eax
c00103c3:	75 0f                	jne    c00103d4 <CPU::detectFeatures()+0x296>
c00103c5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00103cf:	e9 35 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00103d4:	52                   	push   edx
c00103d5:	52                   	push   edx
c00103d6:	68 30 1c 02 c0       	push   0xc0021c30
c00103db:	55                   	push   ebp
c00103dc:	e8 9f 03 ff ff       	call   c0000780 <strcmp>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	85 c0                	test   eax,eax
c00103e6:	75 0f                	jne    c00103f7 <CPU::detectFeatures()+0x2b9>
c00103e8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103f2:	e9 12 01 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00103f7:	50                   	push   eax
c00103f8:	50                   	push   eax
c00103f9:	68 3d 1c 02 c0       	push   0xc0021c3d
c00103fe:	55                   	push   ebp
c00103ff:	e8 7c 03 ff ff       	call   c0000780 <strcmp>
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	85 c0                	test   eax,eax
c0010409:	75 0f                	jne    c001041a <CPU::detectFeatures()+0x2dc>
c001040b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010415:	e9 ef 00 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c001041a:	50                   	push   eax
c001041b:	50                   	push   eax
c001041c:	68 4a 1c 02 c0       	push   0xc0021c4a
c0010421:	55                   	push   ebp
c0010422:	e8 59 03 ff ff       	call   c0000780 <strcmp>
c0010427:	83 c4 10             	add    esp,0x10
c001042a:	85 c0                	test   eax,eax
c001042c:	75 0f                	jne    c001043d <CPU::detectFeatures()+0x2ff>
c001042e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010438:	e9 cc 00 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c001043d:	50                   	push   eax
c001043e:	50                   	push   eax
c001043f:	68 57 1c 02 c0       	push   0xc0021c57
c0010444:	55                   	push   ebp
c0010445:	e8 36 03 ff ff       	call   c0000780 <strcmp>
c001044a:	83 c4 10             	add    esp,0x10
c001044d:	85 c0                	test   eax,eax
c001044f:	75 0f                	jne    c0010460 <CPU::detectFeatures()+0x322>
c0010451:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001045b:	e9 a9 00 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c0010460:	50                   	push   eax
c0010461:	50                   	push   eax
c0010462:	68 64 1c 02 c0       	push   0xc0021c64
c0010467:	55                   	push   ebp
c0010468:	e8 13 03 ff ff       	call   c0000780 <strcmp>
c001046d:	83 c4 10             	add    esp,0x10
c0010470:	85 c0                	test   eax,eax
c0010472:	75 0f                	jne    c0010483 <CPU::detectFeatures()+0x345>
c0010474:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001047e:	e9 86 00 00 00       	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c0010483:	50                   	push   eax
c0010484:	50                   	push   eax
c0010485:	68 71 1c 02 c0       	push   0xc0021c71
c001048a:	55                   	push   ebp
c001048b:	e8 f0 02 ff ff       	call   c0000780 <strcmp>
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	85 c0                	test   eax,eax
c0010495:	75 0c                	jne    c00104a3 <CPU::detectFeatures()+0x365>
c0010497:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104a1:	eb 66                	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00104a3:	50                   	push   eax
c00104a4:	50                   	push   eax
c00104a5:	68 7e 1c 02 c0       	push   0xc0021c7e
c00104aa:	55                   	push   ebp
c00104ab:	e8 d0 02 ff ff       	call   c0000780 <strcmp>
c00104b0:	83 c4 10             	add    esp,0x10
c00104b3:	85 c0                	test   eax,eax
c00104b5:	75 0c                	jne    c00104c3 <CPU::detectFeatures()+0x385>
c00104b7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00104c1:	eb 46                	jmp    c0010509 <CPU::detectFeatures()+0x3cb>
c00104c3:	57                   	push   edi
c00104c4:	57                   	push   edi
c00104c5:	68 8b 1c 02 c0       	push   0xc0021c8b
c00104ca:	55                   	push   ebp
c00104cb:	e8 b0 02 ff ff       	call   c0000780 <strcmp>
c00104d0:	83 c4 10             	add    esp,0x10
c00104d3:	85 c0                	test   eax,eax
c00104d5:	74 e0                	je     c00104b7 <CPU::detectFeatures()+0x379>
c00104d7:	56                   	push   esi
c00104d8:	56                   	push   esi
c00104d9:	68 98 1c 02 c0       	push   0xc0021c98
c00104de:	55                   	push   ebp
c00104df:	e8 9c 02 ff ff       	call   c0000780 <strcmp>
c00104e4:	83 c4 10             	add    esp,0x10
c00104e7:	85 c0                	test   eax,eax
c00104e9:	74 cc                	je     c00104b7 <CPU::detectFeatures()+0x379>
c00104eb:	51                   	push   ecx
c00104ec:	51                   	push   ecx
c00104ed:	68 a5 1c 02 c0       	push   0xc0021ca5
c00104f2:	55                   	push   ebp
c00104f3:	e8 88 02 ff ff       	call   c0000780 <strcmp>
c00104f8:	83 c4 10             	add    esp,0x10
c00104fb:	85 c0                	test   eax,eax
c00104fd:	74 b8                	je     c00104b7 <CPU::detectFeatures()+0x379>
c00104ff:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010509:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001050e:	0f 86 be 00 00 00    	jbe    c00105d2 <CPU::detectFeatures()+0x494>
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	68 80 00 00 00       	push   0x80
c001051c:	e8 31 fb ff ff       	call   c0010052 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010521:	83 e0 01             	and    eax,0x1
c0010524:	c1 e0 06             	shl    eax,0x6
c0010527:	89 c2                	mov    edx,eax
c0010529:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052f:	83 e0 bf             	and    eax,0xffffffbf
c0010532:	09 d0                	or     eax,edx
c0010534:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010541:	e8 0c fb ff ff       	call   c0010052 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010546:	83 e0 01             	and    eax,0x1
c0010549:	c1 e0 04             	shl    eax,0x4
c001054c:	89 c2                	mov    edx,eax
c001054e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010554:	83 e0 ef             	and    eax,0xffffffef
c0010557:	09 d0                	or     eax,edx
c0010559:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001055f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010566:	e8 e7 fa ff ff       	call   c0010052 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001056b:	89 c2                	mov    edx,eax
c001056d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010573:	c1 e2 07             	shl    edx,0x7
c0010576:	83 e0 7f             	and    eax,0x7f
c0010579:	09 d0                	or     eax,edx
c001057b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010581:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010588:	e8 f3 fa ff ff       	call   c0010080 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001058d:	83 e0 01             	and    eax,0x1
c0010590:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010597:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001059d:	83 e0 f7             	and    eax,0xfffffff7
c00105a0:	09 d0                	or     eax,edx
c00105a2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105a8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00105af:	e8 cc fa ff ff       	call   c0010080 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	83 e0 01             	and    eax,0x1
c00105ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105c1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105c7:	83 e0 fb             	and    eax,0xfffffffb
c00105ca:	09 d0                	or     eax,edx
c00105cc:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105d9:	50                   	push   eax
c00105da:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105de:	50                   	push   eax
c00105df:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00105e3:	57                   	push   edi
c00105e4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105e8:	56                   	push   esi
c00105e9:	6a 01                	push   0x1
c00105eb:	e8 82 f9 ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105f4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00105fa:	89 c1                	mov    ecx,eax
c00105fc:	83 e1 0f             	and    ecx,0xf
c00105ff:	83 e2 f0             	and    edx,0xfffffff0
c0010602:	09 ca                	or     edx,ecx
c0010604:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001060a:	89 c2                	mov    edx,eax
c001060c:	c1 ea 04             	shr    edx,0x4
c001060f:	83 e2 0f             	and    edx,0xf
c0010612:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010616:	89 d1                	mov    ecx,edx
c0010618:	83 c4 20             	add    esp,0x20
c001061b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010621:	c1 e1 06             	shl    ecx,0x6
c0010624:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001062a:	09 ca                	or     edx,ecx
c001062c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010633:	89 c2                	mov    edx,eax
c0010635:	c1 ea 08             	shr    edx,0x8
c0010638:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001063e:	83 e2 0f             	and    edx,0xf
c0010641:	89 d5                	mov    ebp,edx
c0010643:	83 e5 03             	and    ebp,0x3
c0010646:	c1 e5 06             	shl    ebp,0x6
c0010649:	83 e1 3f             	and    ecx,0x3f
c001064c:	09 e9                	or     ecx,ebp
c001064e:	89 d5                	mov    ebp,edx
c0010650:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010656:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001065c:	c1 ed 02             	shr    ebp,0x2
c001065f:	83 e1 c0             	and    ecx,0xffffffc0
c0010662:	09 e9                	or     ecx,ebp
c0010664:	89 c5                	mov    ebp,eax
c0010666:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001066c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010672:	c1 ed 08             	shr    ebp,0x8
c0010675:	83 e5 30             	and    ebp,0x30
c0010678:	83 e1 cf             	and    ecx,0xffffffcf
c001067b:	09 e9                	or     ecx,ebp
c001067d:	83 fa 06             	cmp    edx,0x6
c0010680:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010686:	74 05                	je     c001068d <CPU::detectFeatures()+0x54f>
c0010688:	83 fa 0f             	cmp    edx,0xf
c001068b:	75 64                	jne    c00106f1 <CPU::detectFeatures()+0x5b3>
c001068d:	89 c1                	mov    ecx,eax
c001068f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010695:	c1 e9 10             	shr    ecx,0x10
c0010698:	c1 e1 04             	shl    ecx,0x4
c001069b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001069f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106a5:	0f b6 c9             	movzx  ecx,cl
c00106a8:	c1 e1 06             	shl    ecx,0x6
c00106ab:	09 e9                	or     ecx,ebp
c00106ad:	83 fa 0f             	cmp    edx,0xf
c00106b0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00106b7:	75 38                	jne    c00106f1 <CPU::detectFeatures()+0x5b3>
c00106b9:	c1 e8 14             	shr    eax,0x14
c00106bc:	83 c0 0f             	add    eax,0xf
c00106bf:	0f b6 c0             	movzx  eax,al
c00106c2:	89 c2                	mov    edx,eax
c00106c4:	c1 e8 02             	shr    eax,0x2
c00106c7:	83 e2 03             	and    edx,0x3
c00106ca:	89 d1                	mov    ecx,edx
c00106cc:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00106d2:	c1 e1 06             	shl    ecx,0x6
c00106d5:	83 e2 3f             	and    edx,0x3f
c00106d8:	09 ca                	or     edx,ecx
c00106da:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00106e0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106e6:	83 e2 c0             	and    edx,0xffffffc0
c00106e9:	09 d0                	or     eax,edx
c00106eb:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106f1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106f7:	83 ec 0c             	sub    esp,0xc
c00106fa:	83 c8 07             	or     eax,0x7
c00106fd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010703:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010707:	50                   	push   eax
c0010708:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001070c:	55                   	push   ebp
c001070d:	57                   	push   edi
c001070e:	56                   	push   esi
c001070f:	68 00 00 00 80       	push   0x80000000
c0010714:	e8 59 f8 ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010719:	83 c4 20             	add    esp,0x20
c001071c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010724:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010728:	76 1e                	jbe    c0010748 <CPU::detectFeatures()+0x60a>
c001072a:	83 ec 0c             	sub    esp,0xc
c001072d:	50                   	push   eax
c001072e:	55                   	push   ebp
c001072f:	57                   	push   edi
c0010730:	56                   	push   esi
c0010731:	68 01 00 00 80       	push   0x80000001
c0010736:	e8 37 f8 ff ff       	call   c000ff72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001073b:	83 c4 20             	add    esp,0x20
c001073e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010748:	52                   	push   edx
c0010749:	52                   	push   edx
c001074a:	68 b1 1c 02 c0       	push   0xc0021cb1
c001074f:	53                   	push   ebx
c0010750:	e8 29 c1 ff ff       	call   c000c87e <Device::setName(char const*)>
c0010755:	83 c4 10             	add    esp,0x10
c0010758:	eb 69                	jmp    c00107c3 <CPU::detectFeatures()+0x685>
c001075a:	50                   	push   eax
c001075b:	50                   	push   eax
c001075c:	68 16 1c 02 c0       	push   0xc0021c16
c0010761:	55                   	push   ebp
c0010762:	e8 e9 fe fe ff       	call   c0000650 <strcpy>
c0010767:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010771:	e8 4d fa fe ff       	call   c00001c3 <is486>
c0010776:	83 c4 10             	add    esp,0x10
c0010779:	85 c0                	test   eax,eax
c001077b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010781:	74 1f                	je     c00107a2 <CPU::detectFeatures()+0x664>
c0010783:	83 c8 07             	or     eax,0x7
c0010786:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001078c:	0f 20 c0             	mov    eax,cr0
c001078f:	83 e0 14             	and    eax,0x14
c0010792:	83 f8 04             	cmp    eax,0x4
c0010795:	75 10                	jne    c00107a7 <CPU::detectFeatures()+0x669>
c0010797:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001079d:	83 e0 fd             	and    eax,0xfffffffd
c00107a0:	eb 1b                	jmp    c00107bd <CPU::detectFeatures()+0x67f>
c00107a2:	83 e0 f8             	and    eax,0xfffffff8
c00107a5:	eb df                	jmp    c0010786 <CPU::detectFeatures()+0x648>
c00107a7:	e8 f2 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107ac:	83 e0 01             	and    eax,0x1
c00107af:	8d 14 00             	lea    edx,[eax+eax*1]
c00107b2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107b8:	83 e0 fd             	and    eax,0xfffffffd
c00107bb:	09 d0                	or     eax,edx
c00107bd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107c3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00107ca:	74 17                	je     c00107e3 <CPU::detectFeatures()+0x6a5>
c00107cc:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00107d2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00107d8:	83 c8 10             	or     eax,0x10
c00107db:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00107e1:	eb 20                	jmp    c0010803 <CPU::detectFeatures()+0x6c5>
c00107e3:	e8 b6 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107e8:	83 e0 01             	and    eax,0x1
c00107eb:	8d 14 00             	lea    edx,[eax+eax*1]
c00107ee:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107f4:	83 e0 fd             	and    eax,0xfffffffd
c00107f7:	09 d0                	or     eax,edx
c00107f9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107ff:	a8 02                	test   al,0x2
c0010801:	75 c9                	jne    c00107cc <CPU::detectFeatures()+0x68e>
c0010803:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001080a:	83 c4 2c             	add    esp,0x2c
c001080d:	5b                   	pop    ebx
c001080e:	5e                   	pop    esi
c001080f:	5f                   	pop    edi
c0010810:	5d                   	pop    ebp
c0010811:	c3                   	ret    

c0010812 <CPU::setupSMEP()>:
c0010812:	0f 20 e0             	mov    eax,cr4
c0010815:	0d 00 00 10 00       	or     eax,0x100000
c001081a:	0f 22 e0             	mov    cr4,eax
c001081d:	c3                   	ret    

c001081e <CPU::setupUMIP()>:
c001081e:	0f 20 e0             	mov    eax,cr4
c0010821:	80 cc 08             	or     ah,0x8
c0010824:	0f 22 e0             	mov    cr4,eax
c0010827:	c3                   	ret    

c0010828 <CPU::setupTSC()>:
c0010828:	0f 20 e0             	mov    eax,cr4
c001082b:	83 c8 04             	or     eax,0x4
c001082e:	0f 22 e0             	mov    cr4,eax
c0010831:	c3                   	ret    

c0010832 <CPU::setupLargePages()>:
c0010832:	0f 20 e0             	mov    eax,cr4
c0010835:	83 c8 10             	or     eax,0x10
c0010838:	0f 22 e0             	mov    cr4,eax
c001083b:	c3                   	ret    

c001083c <CPU::setupPAT()>:
c001083c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010841:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010848:	74 2c                	je     c0010876 <CPU::setupPAT()+0x3a>
c001084a:	53                   	push   ebx
c001084b:	83 ec 10             	sub    esp,0x10
c001084e:	68 77 02 00 00       	push   0x277
c0010853:	50                   	push   eax
c0010854:	e8 89 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010859:	83 e2 f8             	and    edx,0xfffffff8
c001085c:	83 ca 01             	or     edx,0x1
c001085f:	52                   	push   edx
c0010860:	50                   	push   eax
c0010861:	68 77 02 00 00       	push   0x277
c0010866:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001086c:	e8 9d 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010871:	83 c4 28             	add    esp,0x28
c0010874:	5b                   	pop    ebx
c0010875:	c3                   	ret    
c0010876:	c3                   	ret    
c0010877:	90                   	nop

c0010878 <CPU::setupMTRR()>:
c0010878:	c3                   	ret    
c0010879:	90                   	nop

c001087a <CPU::setupGlobalPages()>:
c001087a:	0f 20 e0             	mov    eax,cr4
c001087d:	0c 80                	or     al,0x80
c001087f:	0f 22 e0             	mov    cr4,eax
c0010882:	c3                   	ret    
c0010883:	90                   	nop

c0010884 <CPU::allowUsermodeDataAccess()>:
c0010884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010888:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001088f:	74 03                	je     c0010894 <CPU::allowUsermodeDataAccess()+0x10>
c0010891:	0f 01 cb             	stac   
c0010894:	c3                   	ret    
c0010895:	90                   	nop

c0010896 <CPU::prohibitUsermodeDataAccess()>:
c0010896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108a1:	74 03                	je     c00108a6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00108a3:	0f 01 ca             	clac   
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <CPU::setupSMAP()>:
c00108a8:	0f 20 e0             	mov    eax,cr4
c00108ab:	0d 00 00 20 00       	or     eax,0x200000
c00108b0:	0f 22 e0             	mov    cr4,eax
c00108b3:	eb e1                	jmp    c0010896 <CPU::prohibitUsermodeDataAccess()>
c00108b5:	90                   	nop

c00108b6 <CPU::setupFeatures()>:
c00108b6:	53                   	push   ebx
c00108b7:	83 ec 08             	sub    esp,0x8
c00108ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108be:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00108c5:	74 18                	je     c00108df <CPU::setupFeatures()+0x29>
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	68 bd 1c 02 c0       	push   0xc0021cbd
c00108cf:	e8 36 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d7:	e8 42 ff ff ff       	call   c001081e <CPU::setupUMIP()>
c00108dc:	83 c4 10             	add    esp,0x10
c00108df:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108e6:	74 18                	je     c0010900 <CPU::setupFeatures()+0x4a>
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	68 c7 1c 02 c0       	push   0xc0021cc7
c00108f0:	e8 15 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f8:	e8 2b ff ff ff       	call   c0010828 <CPU::setupTSC()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010907:	74 18                	je     c0010921 <CPU::setupFeatures()+0x6b>
c0010909:	83 ec 0c             	sub    esp,0xc
c001090c:	68 d0 1c 02 c0       	push   0xc0021cd0
c0010911:	e8 f4 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010916:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010919:	e8 14 ff ff ff       	call   c0010832 <CPU::setupLargePages()>
c001091e:	83 c4 10             	add    esp,0x10
c0010921:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010928:	74 18                	je     c0010942 <CPU::setupFeatures()+0x8c>
c001092a:	83 ec 0c             	sub    esp,0xc
c001092d:	68 d9 1c 02 c0       	push   0xc0021cd9
c0010932:	e8 d3 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001093a:	e8 3b ff ff ff       	call   c001087a <CPU::setupGlobalPages()>
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010949:	74 18                	je     c0010963 <CPU::setupFeatures()+0xad>
c001094b:	83 ec 0c             	sub    esp,0xc
c001094e:	68 eb 1c 02 c0       	push   0xc0021ceb
c0010953:	e8 b2 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001095b:	e8 dc fe ff ff       	call   c001083c <CPU::setupPAT()>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001096a:	74 11                	je     c001097d <CPU::setupFeatures()+0xc7>
c001096c:	c7 44 24 10 f4 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021cf4
c0010974:	83 c4 08             	add    esp,0x8
c0010977:	5b                   	pop    ebx
c0010978:	e9 8d 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c001097d:	83 c4 08             	add    esp,0x8
c0010980:	5b                   	pop    ebx
c0010981:	c3                   	ret    

c0010982 <CPU::open(int, int, void*)>:
c0010982:	55                   	push   ebp
c0010983:	57                   	push   edi
c0010984:	56                   	push   esi
c0010985:	53                   	push   ebx
c0010986:	83 ec 18             	sub    esp,0x18
c0010989:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001098d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010991:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010995:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001099b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109a1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109a7:	50                   	push   eax
c00109a8:	e8 31 6a ff ff       	call   c00073de <GDT::setup()>
c00109ad:	83 c4 0c             	add    esp,0xc
c00109b0:	6a 00                	push   0x0
c00109b2:	68 ef be ad de       	push   0xdeadbeef
c00109b7:	55                   	push   ebp
c00109b8:	e8 b3 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00109bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00109c0:	e8 8b 85 ff ff       	call   c0008f50 <TSS::flush()>
c00109c5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00109cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ce:	e8 6f 6c ff ff       	call   c0007642 <IDT::setup()>
c00109d3:	b8 00 04 00 00       	mov    eax,0x400
c00109d8:	0f 23 f8             	mov    db7,eax
c00109db:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109e5:	e8 f8 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	85 f6                	test   esi,esi
c00109ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109f5:	89 38                	mov    DWORD PTR [eax],edi
c00109f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00109fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a00:	74 10                	je     c0010a12 <CPU::open(int, int, void*)+0x90>
c0010a02:	50                   	push   eax
c0010a03:	50                   	push   eax
c0010a04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a0a:	56                   	push   esi
c0010a0b:	e8 7c 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a10:	eb 0d                	jmp    c0010a1f <CPU::open(int, int, void*)+0x9d>
c0010a12:	83 ec 0c             	sub    esp,0xc
c0010a15:	68 fe 1c 02 c0       	push   0xc0021cfe
c0010a1a:	e8 72 08 00 00       	call   c0011291 <KePanic(char const*)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	68 0c 1d 02 c0       	push   0xc0021d0c
c0010a2a:	e8 8e 01 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0010a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a32:	e8 07 f7 ff ff       	call   c001013e <CPU::detectFeatures()>
c0010a37:	c7 04 24 2f 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d2f
c0010a3e:	e8 7a 01 00 00       	call   c0010bbd <KeSetBootMessage(char const*)>
c0010a43:	e8 07 72 00 00       	call   c0017c4f <HalInitialise()>
c0010a48:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a4d:	83 e0 10             	and    eax,0x10
c0010a50:	83 f8 01             	cmp    eax,0x1
c0010a53:	19 c0                	sbb    eax,eax
c0010a55:	83 e0 46             	and    eax,0x46
c0010a58:	83 c0 1e             	add    eax,0x1e
c0010a5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a5e:	e8 c2 d6 ff ff       	call   c000e125 <setupTimer(int)>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a6d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a73:	74 0c                	je     c0010a81 <CPU::open(int, int, void*)+0xff>
c0010a75:	83 ec 0c             	sub    esp,0xc
c0010a78:	53                   	push   ebx
c0010a79:	e8 38 fe ff ff       	call   c00108b6 <CPU::setupFeatures()>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	83 c4 0c             	add    esp,0xc
c0010a84:	31 c0                	xor    eax,eax
c0010a86:	5b                   	pop    ebx
c0010a87:	5e                   	pop    esi
c0010a88:	5f                   	pop    edi
c0010a89:	5d                   	pop    ebp
c0010a8a:	c3                   	ret    

c0010a8b <KeInitialiseAtexit()>:
c0010a8b:	83 ec 10             	sub    esp,0x10
c0010a8e:	6a 60                	push   0x60
c0010a90:	6a 00                	push   0x0
c0010a92:	68 20 8e 02 c0       	push   0xc0028e20
c0010a97:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010aa1:	e8 4a fa fe ff       	call   c00004f0 <memset>
c0010aa6:	83 c4 1c             	add    esp,0x1c
c0010aa9:	c3                   	ret    

c0010aaa <KeRegisterAtexit(void (*)(void*), void*)>:
c0010aaa:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010aaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ab3:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010aba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010abe:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010ac5:	40                   	inc    eax
c0010ac6:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010acb:	83 f8 17             	cmp    eax,0x17
c0010ace:	7e 0d                	jle    c0010add <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ad0:	c7 44 24 04 70 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d70
c0010ad8:	e9 b4 07 00 00       	jmp    c0011291 <KePanic(char const*)>
c0010add:	c3                   	ret    

c0010ade <KeExecuteAtexit()>:
c0010ade:	53                   	push   ebx
c0010adf:	31 db                	xor    ebx,ebx
c0010ae1:	83 ec 08             	sub    esp,0x8
c0010ae4:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010aea:	7e 50                	jle    c0010b3c <KeExecuteAtexit()+0x5e>
c0010aec:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 42                	je     c0010b39 <KeExecuteAtexit()+0x5b>
c0010af7:	51                   	push   ecx
c0010af8:	50                   	push   eax
c0010af9:	53                   	push   ebx
c0010afa:	68 89 1d 02 c0       	push   0xc0021d89
c0010aff:	e8 06 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b04:	58                   	pop    eax
c0010b05:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b0c:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b13:	c7 04 24 ab 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dab
c0010b1a:	e8 eb 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b1f:	c7 04 24 0b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f0b
c0010b26:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b31:	e8 d4 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	43                   	inc    ebx
c0010b3a:	eb a8                	jmp    c0010ae4 <KeExecuteAtexit()+0x6>
c0010b3c:	83 c4 08             	add    esp,0x8
c0010b3f:	5b                   	pop    ebx
c0010b40:	c3                   	ret    

c0010b41 <KeDisplaySplashScreen()>:
c0010b41:	55                   	push   ebp
c0010b42:	bd 05 00 00 00       	mov    ebp,0x5
c0010b47:	57                   	push   edi
c0010b48:	bf 0a 00 00 00       	mov    edi,0xa
c0010b4d:	56                   	push   esi
c0010b4e:	31 f6                	xor    esi,esi
c0010b50:	53                   	push   ebx
c0010b51:	31 db                	xor    ebx,ebx
c0010b53:	83 ec 0c             	sub    esp,0xc
c0010b56:	0f b6 96 60 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcea0]
c0010b5d:	85 d2                	test   edx,edx
c0010b5f:	89 d0                	mov    eax,edx
c0010b61:	74 52                	je     c0010bb5 <KeDisplaySplashScreen()+0x74>
c0010b63:	80 bb 96 31 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdce6a],0xdb
c0010b6a:	75 13                	jne    c0010b7f <KeDisplaySplashScreen()+0x3e>
c0010b6c:	0f b6 8b 95 31 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdce6b]
c0010b73:	83 e1 fe             	and    ecx,0xfffffffe
c0010b76:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b7c:	75 01                	jne    c0010b7f <KeDisplaySplashScreen()+0x3e>
c0010b7e:	47                   	inc    edi
c0010b7f:	83 fa 0d             	cmp    edx,0xd
c0010b82:	74 28                	je     c0010bac <KeDisplaySplashScreen()+0x6b>
c0010b84:	83 fa 0a             	cmp    edx,0xa
c0010b87:	75 0a                	jne    c0010b93 <KeDisplaySplashScreen()+0x52>
c0010b89:	45                   	inc    ebp
c0010b8a:	bf 0a 00 00 00       	mov    edi,0xa
c0010b8f:	31 db                	xor    ebx,ebx
c0010b91:	eb 19                	jmp    c0010bac <KeDisplaySplashScreen()+0x6b>
c0010b93:	83 ec 0c             	sub    esp,0xc
c0010b96:	0f be c0             	movsx  eax,al
c0010b99:	55                   	push   ebp
c0010b9a:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b9d:	43                   	inc    ebx
c0010b9e:	52                   	push   edx
c0010b9f:	6a 00                	push   0x0
c0010ba1:	6a 0e                	push   0xe
c0010ba3:	50                   	push   eax
c0010ba4:	e8 23 7d 00 00       	call   c00188cc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ba9:	83 c4 20             	add    esp,0x20
c0010bac:	46                   	inc    esi
c0010bad:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010bb3:	75 a1                	jne    c0010b56 <KeDisplaySplashScreen()+0x15>
c0010bb5:	83 c4 0c             	add    esp,0xc
c0010bb8:	5b                   	pop    ebx
c0010bb9:	5e                   	pop    esi
c0010bba:	5f                   	pop    edi
c0010bbb:	5d                   	pop    ebp
c0010bbc:	c3                   	ret    

c0010bbd <KeSetBootMessage(char const*)>:
c0010bbd:	57                   	push   edi
c0010bbe:	56                   	push   esi
c0010bbf:	53                   	push   ebx
c0010bc0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010bc6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010bcd:	68 9e 00 00 00       	push   0x9e
c0010bd2:	6a 00                	push   0x0
c0010bd4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010bd8:	56                   	push   esi
c0010bd9:	e8 12 f9 fe ff       	call   c00004f0 <memset>
c0010bde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be1:	e8 9a f9 fe ff       	call   c0000580 <strlen>
c0010be6:	ba 50 00 00 00       	mov    edx,0x50
c0010beb:	83 c4 10             	add    esp,0x10
c0010bee:	31 c9                	xor    ecx,ecx
c0010bf0:	29 c2                	sub    edx,eax
c0010bf2:	83 e2 fe             	and    edx,0xfffffffe
c0010bf5:	01 f2                	add    edx,esi
c0010bf7:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010bfc:	84 c0                	test   al,al
c0010bfe:	74 0a                	je     c0010c0a <KeSetBootMessage(char const*)+0x4d>
c0010c00:	80 cc 0f             	or     ah,0xf
c0010c03:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c07:	41                   	inc    ecx
c0010c08:	eb ed                	jmp    c0010bf7 <KeSetBootMessage(char const*)+0x3a>
c0010c0a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c0f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c16:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c1c:	5b                   	pop    ebx
c0010c1d:	5e                   	pop    esi
c0010c1e:	5f                   	pop    edi
c0010c1f:	c3                   	ret    

c0010c20 <Krnl::handlePowerButton()>:
c0010c20:	83 ec 0c             	sub    esp,0xc
c0010c23:	e8 c4 06 00 00       	call   c00112ec <KeHandlePowerButton()>
c0010c28:	90                   	nop
c0010c29:	83 c4 0c             	add    esp,0xc
c0010c2c:	c3                   	ret    
c0010c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0010c30 <Krnl::handleSleepButton()>:
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	e8 e9 06 00 00       	call   c0011321 <KeHandleSleepButton()>
c0010c38:	90                   	nop
c0010c39:	83 c4 0c             	add    esp,0xc
c0010c3c:	c3                   	ret    
c0010c3d:	90                   	nop

c0010c3e <EnvVarContainer::getEnv(char const*)>:
c0010c3e:	57                   	push   edi
c0010c3f:	56                   	push   esi
c0010c40:	53                   	push   ebx
c0010c41:	31 db                	xor    ebx,ebx
c0010c43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c47:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c49:	7e 2b                	jle    c0010c76 <EnvVarContainer::getEnv(char const*)+0x38>
c0010c4b:	50                   	push   eax
c0010c4c:	50                   	push   eax
c0010c4d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c50:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c57:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c5e:	e8 1d fb fe ff       	call   c0000780 <strcmp>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	85 c0                	test   eax,eax
c0010c68:	75 09                	jne    c0010c73 <EnvVarContainer::getEnv(char const*)+0x35>
c0010c6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c6d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c71:	eb 05                	jmp    c0010c78 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c73:	43                   	inc    ebx
c0010c74:	eb d1                	jmp    c0010c47 <EnvVarContainer::getEnv(char const*)+0x9>
c0010c76:	31 c0                	xor    eax,eax
c0010c78:	5b                   	pop    ebx
c0010c79:	5e                   	pop    esi
c0010c7a:	5f                   	pop    edi
c0010c7b:	c3                   	ret    

c0010c7c <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c7c:	55                   	push   ebp
c0010c7d:	57                   	push   edi
c0010c7e:	56                   	push   esi
c0010c7f:	53                   	push   ebx
c0010c80:	83 ec 28             	sub    esp,0x28
c0010c83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c87:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c8b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c8f:	56                   	push   esi
c0010c90:	e8 eb f8 fe ff       	call   c0000580 <strlen>
c0010c95:	40                   	inc    eax
c0010c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c99:	e8 35 6e ff ff       	call   c0007ad3 <malloc>
c0010c9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ca5:	e8 d6 f8 fe ff       	call   c0000580 <strlen>
c0010caa:	40                   	inc    eax
c0010cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cae:	e8 20 6e ff ff       	call   c0007ad3 <malloc>
c0010cb3:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010cba:	e8 c1 f8 fe ff       	call   c0000580 <strlen>
c0010cbf:	83 c4 0c             	add    esp,0xc
c0010cc2:	40                   	inc    eax
c0010cc3:	50                   	push   eax
c0010cc4:	6a 00                	push   0x0
c0010cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010cca:	e8 21 f8 fe ff       	call   c00004f0 <memset>
c0010ccf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cd2:	e8 a9 f8 fe ff       	call   c0000580 <strlen>
c0010cd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce3:	89 de                	mov    esi,ebx
c0010ce5:	e8 96 f8 fe ff       	call   c0000580 <strlen>
c0010cea:	83 c4 0c             	add    esp,0xc
c0010ced:	40                   	inc    eax
c0010cee:	50                   	push   eax
c0010cef:	6a 00                	push   0x0
c0010cf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cf5:	e8 f6 f7 fe ff       	call   c00004f0 <memset>
c0010cfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cfd:	e8 7e f8 fe ff       	call   c0000580 <strlen>
c0010d02:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d06:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d0e:	40                   	inc    eax
c0010d0f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d12:	c1 e0 03             	shl    eax,0x3
c0010d15:	5a                   	pop    edx
c0010d16:	59                   	pop    ecx
c0010d17:	50                   	push   eax
c0010d18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d1b:	e8 9f 6d ff ff       	call   c0007abf <realloc>
c0010d20:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d23:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d27:	b9 08 00 00 00       	mov    ecx,0x8
c0010d2c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d2f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d35:	83 c4 2c             	add    esp,0x2c
c0010d38:	5b                   	pop    ebx
c0010d39:	5e                   	pop    esi
c0010d3a:	5f                   	pop    edi
c0010d3b:	5d                   	pop    ebp
c0010d3c:	c3                   	ret    
c0010d3d:	90                   	nop

c0010d3e <EnvVarContainer::deleteEnv(char const*)>:
c0010d3e:	c3                   	ret    
c0010d3f:	90                   	nop

c0010d40 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d40:	55                   	push   ebp
c0010d41:	57                   	push   edi
c0010d42:	56                   	push   esi
c0010d43:	53                   	push   ebx
c0010d44:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d4a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d51:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d58:	68 14 01 00 00       	push   0x114
c0010d5d:	e8 71 6d ff ff       	call   c0007ad3 <malloc>
c0010d62:	83 c4 0c             	add    esp,0xc
c0010d65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d68:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d6f:	89 c3                	mov    ebx,eax
c0010d71:	50                   	push   eax
c0010d72:	e8 53 aa ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0010d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7a:	e8 d7 ad ff ff       	call   c000bb56 <File::exists()>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	84 c0                	test   al,al
c0010d84:	75 31                	jne    c0010db7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d86:	50                   	push   eax
c0010d87:	50                   	push   eax
c0010d88:	6a 12                	push   0x12
c0010d8a:	53                   	push   ebx
c0010d8b:	e8 02 ab ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0010d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d92:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d95:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d98:	e8 e3 f7 fe ff       	call   c0000580 <strlen>
c0010d9d:	5a                   	pop    edx
c0010d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010da2:	52                   	push   edx
c0010da3:	31 d2                	xor    edx,edx
c0010da5:	56                   	push   esi
c0010da6:	52                   	push   edx
c0010da7:	50                   	push   eax
c0010da8:	53                   	push   ebx
c0010da9:	ff d7                	call   edi
c0010dab:	83 c4 14             	add    esp,0x14
c0010dae:	53                   	push   ebx
c0010daf:	e8 3c ab ff ff       	call   c000b8f0 <File::close()>
c0010db4:	83 c4 10             	add    esp,0x10
c0010db7:	56                   	push   esi
c0010db8:	31 f6                	xor    esi,esi
c0010dba:	68 00 01 00 00       	push   0x100
c0010dbf:	6a 00                	push   0x0
c0010dc1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dc5:	50                   	push   eax
c0010dc6:	e8 25 f7 fe ff       	call   c00004f0 <memset>
c0010dcb:	5f                   	pop    edi
c0010dcc:	58                   	pop    eax
c0010dcd:	6a 01                	push   0x1
c0010dcf:	53                   	push   ebx
c0010dd0:	e8 bd aa ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010de0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010de8:	83 ec 0c             	sub    esp,0xc
c0010deb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010def:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df1:	52                   	push   edx
c0010df2:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010df6:	51                   	push   ecx
c0010df7:	6a 00                	push   0x0
c0010df9:	6a 01                	push   0x1
c0010dfb:	53                   	push   ebx
c0010dfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010dff:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e04:	83 c4 20             	add    esp,0x20
c0010e07:	85 c0                	test   eax,eax
c0010e09:	89 c1                	mov    ecx,eax
c0010e0b:	0f 84 36 01 00 00    	je     c0010f47 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e11:	83 f8 0d             	cmp    eax,0xd
c0010e14:	0f 84 22 01 00 00    	je     c0010f3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e1a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e1f:	0f 84 f0 00 00 00    	je     c0010f15 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e25:	83 f8 0a             	cmp    eax,0xa
c0010e28:	74 13                	je     c0010e3d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e2a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e2f:	74 0c                	je     c0010e3d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e37:	0f 8e f6 00 00 00    	jle    c0010f33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	8d 78 01             	lea    edi,[eax+0x1]
c0010e47:	57                   	push   edi
c0010e48:	e8 86 6c ff ff       	call   c0007ad3 <malloc>
c0010e4d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e51:	8d 56 04             	lea    edx,[esi+0x4]
c0010e54:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e5b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e5f:	e8 6f 6c ff ff       	call   c0007ad3 <malloc>
c0010e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e68:	83 c4 0c             	add    esp,0xc
c0010e6b:	57                   	push   edi
c0010e6c:	6a 00                	push   0x0
c0010e6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e72:	e8 79 f6 fe ff       	call   c00004f0 <memset>
c0010e77:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e7b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e7f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e85:	83 c4 0c             	add    esp,0xc
c0010e88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e8c:	52                   	push   edx
c0010e8d:	6a 00                	push   0x0
c0010e8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e93:	e8 58 f6 fe ff       	call   c00004f0 <memset>
c0010e98:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e9c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ea0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ea3:	e8 d8 f6 fe ff       	call   c0000580 <strlen>
c0010ea8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010eac:	89 c1                	mov    ecx,eax
c0010eae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010eb9:	40                   	inc    eax
c0010eba:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010ebd:	85 d2                	test   edx,edx
c0010ebf:	75 0c                	jne    c0010ecd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	6a 08                	push   0x8
c0010ec6:	e8 08 6c ff ff       	call   c0007ad3 <malloc>
c0010ecb:	eb 0c                	jmp    c0010ed9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010ecd:	51                   	push   ecx
c0010ece:	51                   	push   ecx
c0010ecf:	c1 e0 03             	shl    eax,0x3
c0010ed2:	50                   	push   eax
c0010ed3:	52                   	push   edx
c0010ed4:	e8 e6 6b ff ff       	call   c0007abf <realloc>
c0010ed9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010edc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010edf:	83 c4 10             	add    esp,0x10
c0010ee2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ee5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ee9:	b9 08 00 00 00       	mov    ecx,0x8
c0010eee:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ef2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ef4:	50                   	push   eax
c0010ef5:	31 f6                	xor    esi,esi
c0010ef7:	68 00 01 00 00       	push   0x100
c0010efc:	6a 00                	push   0x0
c0010efe:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f02:	50                   	push   eax
c0010f03:	e8 e8 f5 fe ff       	call   c00004f0 <memset>
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f13:	eb 27                	jmp    c0010f3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f15:	83 f8 3d             	cmp    eax,0x3d
c0010f18:	74 1e                	je     c0010f38 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f1a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f20:	7f 07                	jg     c0010f29 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f22:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f26:	46                   	inc    esi
c0010f27:	eb 13                	jmp    c0010f3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f29:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f31:	eb 09                	jmp    c0010f3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f33:	83 f8 3d             	cmp    eax,0x3d
c0010f36:	75 ea                	jne    c0010f22 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f38:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f3c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f41:	0f 85 99 fe ff ff    	jne    c0010de0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f47:	83 ec 0c             	sub    esp,0xc
c0010f4a:	53                   	push   ebx
c0010f4b:	e8 a0 a9 ff ff       	call   c000b8f0 <File::close()>
c0010f50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f58:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f5e:	5b                   	pop    ebx
c0010f5f:	5e                   	pop    esi
c0010f60:	5f                   	pop    edi
c0010f61:	5d                   	pop    ebp
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <EnvVarContainer::__loadSystem()>:
c0010f64:	83 ec 10             	sub    esp,0x10
c0010f67:	68 c0 32 02 c0       	push   0xc00232c0
c0010f6c:	68 b0 1d 02 c0       	push   0xc0021db0
c0010f71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f75:	e8 c6 fd ff ff       	call   c0010d40 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f7a:	83 c4 1c             	add    esp,0x1c
c0010f7d:	c3                   	ret    

c0010f7e <EnvVarContainer::__loadUser()>:
c0010f7e:	c3                   	ret    
c0010f7f:	90                   	nop

c0010f80 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fa0:	90                   	nop
c0010fa1:	c3                   	ret    

c0010fa2 <EnvVarContainer::~EnvVarContainer()>:
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fac:	85 c0                	test   eax,eax
c0010fae:	74 1d                	je     c0010fcd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fb6:	85 c0                	test   eax,eax
c0010fb8:	74 13                	je     c0010fcd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc1:	83 ec 0c             	sub    esp,0xc
c0010fc4:	50                   	push   eax
c0010fc5:	e8 19 6b ff ff       	call   c0007ae3 <free>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	90                   	nop
c0010fce:	83 c4 0c             	add    esp,0xc
c0010fd1:	c3                   	ret    

c0010fd2 <KeGetEnv(Process*, char const*)>:
c0010fd2:	53                   	push   ebx
c0010fd3:	83 ec 08             	sub    esp,0x8
c0010fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fda:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010fe0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fe4:	74 04                	je     c0010fea <KeGetEnv(Process*, char const*)+0x18>
c0010fe6:	85 c0                	test   eax,eax
c0010fe8:	75 0b                	jne    c0010ff5 <KeGetEnv(Process*, char const*)+0x23>
c0010fea:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010fef:	85 c0                	test   eax,eax
c0010ff1:	75 19                	jne    c001100c <KeGetEnv(Process*, char const*)+0x3a>
c0010ff3:	eb 27                	jmp    c001101c <KeGetEnv(Process*, char const*)+0x4a>
c0010ff5:	52                   	push   edx
c0010ff6:	52                   	push   edx
c0010ff7:	53                   	push   ebx
c0010ff8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010ffe:	e8 3b fc ff ff       	call   c0010c3e <EnvVarContainer::getEnv(char const*)>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	85 c0                	test   eax,eax
c0011008:	75 28                	jne    c0011032 <KeGetEnv(Process*, char const*)+0x60>
c001100a:	eb de                	jmp    c0010fea <KeGetEnv(Process*, char const*)+0x18>
c001100c:	52                   	push   edx
c001100d:	52                   	push   edx
c001100e:	53                   	push   ebx
c001100f:	50                   	push   eax
c0011010:	e8 29 fc ff ff       	call   c0010c3e <EnvVarContainer::getEnv(char const*)>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	85 c0                	test   eax,eax
c001101a:	75 16                	jne    c0011032 <KeGetEnv(Process*, char const*)+0x60>
c001101c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011020:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011025:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011029:	83 c4 08             	add    esp,0x8
c001102c:	5b                   	pop    ebx
c001102d:	e9 0c fc ff ff       	jmp    c0010c3e <EnvVarContainer::getEnv(char const*)>
c0011032:	83 c4 08             	add    esp,0x8
c0011035:	5b                   	pop    ebx
c0011036:	c3                   	ret    

c0011037 <KeSetEnvSystem(char const*, char const*)>:
c0011037:	83 ec 10             	sub    esp,0x10
c001103a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001103e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011042:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011048:	e8 2f fc ff ff       	call   c0010c7c <EnvVarContainer::setEnv(char const*, char const*)>
c001104d:	83 c4 1c             	add    esp,0x1c
c0011050:	c3                   	ret    

c0011051 <KeSetEnvUser(char const*, char const*)>:
c0011051:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011056:	85 c0                	test   eax,eax
c0011058:	74 15                	je     c001106f <KeSetEnvUser(char const*, char const*)+0x1e>
c001105a:	83 ec 10             	sub    esp,0x10
c001105d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011065:	50                   	push   eax
c0011066:	e8 11 fc ff ff       	call   c0010c7c <EnvVarContainer::setEnv(char const*, char const*)>
c001106b:	83 c4 1c             	add    esp,0x1c
c001106e:	c3                   	ret    
c001106f:	c3                   	ret    

c0011070 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011074:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001107a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001107e:	e9 f9 fb ff ff       	jmp    c0010c7c <EnvVarContainer::setEnv(char const*, char const*)>

c0011083 <KeDeleteEnvSystem(char const*)>:
c0011083:	c3                   	ret    

c0011084 <KeDeleteEnvUser(char const*)>:
c0011084:	c3                   	ret    

c0011085 <KeDeleteEnvProcess(Process*, char const*)>:
c0011085:	c3                   	ret    

c0011086 <KeNewProcessEnv(Process*)>:
c0011086:	83 ec 28             	sub    esp,0x28
c0011089:	6a 0c                	push   0xc
c001108b:	e8 43 6a ff ff       	call   c0007ad3 <malloc>
c0011090:	5a                   	pop    edx
c0011091:	59                   	pop    ecx
c0011092:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011096:	50                   	push   eax
c0011097:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001109b:	e8 e0 fe ff ff       	call   c0010f80 <EnvVarContainer::EnvVarContainer(Process*)>
c00110a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110a4:	83 c4 2c             	add    esp,0x2c
c00110a7:	c3                   	ret    

c00110a8 <KeCopyProcessEnv(Process*, Process*)>:
c00110a8:	57                   	push   edi
c00110a9:	56                   	push   esi
c00110aa:	53                   	push   ebx
c00110ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110af:	83 ec 0c             	sub    esp,0xc
c00110b2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00110b8:	6a 0c                	push   0xc
c00110ba:	e8 14 6a ff ff       	call   c0007ad3 <malloc>
c00110bf:	89 c3                	mov    ebx,eax
c00110c1:	58                   	pop    eax
c00110c2:	5a                   	pop    edx
c00110c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c7:	53                   	push   ebx
c00110c8:	e8 b3 fe ff ff       	call   c0010f80 <EnvVarContainer::EnvVarContainer(Process*)>
c00110cd:	8b 07                	mov    eax,DWORD PTR [edi]
c00110cf:	89 03                	mov    DWORD PTR [ebx],eax
c00110d1:	c1 e0 03             	shl    eax,0x3
c00110d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00110d7:	e8 f7 69 ff ff       	call   c0007ad3 <malloc>
c00110dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00110df:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00110e1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110e4:	89 c7                	mov    edi,eax
c00110e6:	c1 e1 03             	shl    ecx,0x3
c00110e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	89 d8                	mov    eax,ebx
c00110f0:	5b                   	pop    ebx
c00110f1:	5e                   	pop    esi
c00110f2:	5f                   	pop    edi
c00110f3:	c3                   	ret    

c00110f4 <KeLoadSystemEnv()>:
c00110f4:	53                   	push   ebx
c00110f5:	83 ec 14             	sub    esp,0x14
c00110f8:	6a 0c                	push   0xc
c00110fa:	e8 d4 69 ff ff       	call   c0007ad3 <malloc>
c00110ff:	89 c3                	mov    ebx,eax
c0011101:	58                   	pop    eax
c0011102:	5a                   	pop    edx
c0011103:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011109:	53                   	push   ebx
c001110a:	e8 71 fe ff ff       	call   c0010f80 <EnvVarContainer::EnvVarContainer(Process*)>
c001110f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011112:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011118:	e8 47 fe ff ff       	call   c0010f64 <EnvVarContainer::__loadSystem()>
c001111d:	83 c4 18             	add    esp,0x18
c0011120:	5b                   	pop    ebx
c0011121:	c3                   	ret    

c0011122 <KeLoadUserEnv()>:
c0011122:	53                   	push   ebx
c0011123:	83 ec 14             	sub    esp,0x14
c0011126:	6a 0c                	push   0xc
c0011128:	e8 a6 69 ff ff       	call   c0007ad3 <malloc>
c001112d:	89 c3                	mov    ebx,eax
c001112f:	58                   	pop    eax
c0011130:	5a                   	pop    edx
c0011131:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011137:	53                   	push   ebx
c0011138:	e8 43 fe ff ff       	call   c0010f80 <EnvVarContainer::EnvVarContainer(Process*)>
c001113d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011143:	83 c4 18             	add    esp,0x18
c0011146:	5b                   	pop    ebx
c0011147:	c3                   	ret    

c0011148 <KeFlushEnv()>:
c0011148:	c3                   	ret    

c0011149 <KeGetProcessTotalEnvCount(Process*)>:
c0011149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001114d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011153:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011159:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001115e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011160:	03 01                	add    eax,DWORD PTR [ecx]
c0011162:	85 d2                	test   edx,edx
c0011164:	74 02                	je     c0011168 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011166:	03 02                	add    eax,DWORD PTR [edx]
c0011168:	c3                   	ret    

c0011169 <KeGetProcessEnvPair(Process*, int)>:
c0011169:	57                   	push   edi
c001116a:	56                   	push   esi
c001116b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011171:	53                   	push   ebx
c0011172:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011176:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001117a:	85 f6                	test   esi,esi
c001117c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011180:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011186:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011188:	75 16                	jne    c00111a0 <KeGetProcessEnvPair(Process*, int)+0x37>
c001118a:	39 c2                	cmp    edx,eax
c001118c:	7c 16                	jl     c00111a4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001118e:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011194:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011196:	01 c6                	add    esi,eax
c0011198:	39 d6                	cmp    esi,edx
c001119a:	7e 3c                	jle    c00111d8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001119c:	29 c2                	sub    edx,eax
c001119e:	eb 04                	jmp    c00111a4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111a0:	39 c2                	cmp    edx,eax
c00111a2:	7d 05                	jge    c00111a9 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111a7:	eb 20                	jmp    c00111c9 <KeGetProcessEnvPair(Process*, int)+0x60>
c00111a9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00111ab:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00111ae:	39 d1                	cmp    ecx,edx
c00111b0:	7e 04                	jle    c00111b6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00111b2:	29 c2                	sub    edx,eax
c00111b4:	eb 10                	jmp    c00111c6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00111b6:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00111bc:	03 0e                	add    ecx,DWORD PTR [esi]
c00111be:	39 d1                	cmp    ecx,edx
c00111c0:	7e 16                	jle    c00111d8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111c2:	29 c2                	sub    edx,eax
c00111c4:	29 fa                	sub    edx,edi
c00111c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00111c9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00111cc:	8b 02                	mov    eax,DWORD PTR [edx]
c00111ce:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00111d1:	89 03                	mov    DWORD PTR [ebx],eax
c00111d3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00111d6:	eb 1d                	jmp    c00111f5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00111d8:	83 ec 0c             	sub    esp,0xc
c00111db:	68 d2 1d 02 c0       	push   0xc0021dd2
c00111e0:	e8 ac 00 00 00       	call   c0011291 <KePanic(char const*)>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111f5:	89 d8                	mov    eax,ebx
c00111f7:	5b                   	pop    ebx
c00111f8:	5e                   	pop    esi
c00111f9:	5f                   	pop    edi
c00111fa:	c2 04 00             	ret    0x4

c00111fd <CPU::current()>:
c00111fd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011202:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011208:	c3                   	ret    

c0011209 <operator new(unsigned long)>:
c0011209:	e9 c5 68 ff ff       	jmp    c0007ad3 <malloc>

c001120e <operator delete(void*)>:
c001120e:	e9 e0 68 ff ff       	jmp    c0007af3 <rfree>

c0011213 <disableIRQs()>:
c0011213:	fa                   	cli    
c0011214:	c3                   	ret    

c0011215 <enableIRQs()>:
c0011215:	fb                   	sti    
c0011216:	c3                   	ret    

c0011217 <lockScheduler()>:
c0011217:	fa                   	cli    
c0011218:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001121e:	c3                   	ret    

c001121f <unlockScheduler()>:
c001121f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011224:	48                   	dec    eax
c0011225:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001122a:	75 01                	jne    c001122d <unlockScheduler()+0xe>
c001122c:	fb                   	sti    
c001122d:	c3                   	ret    

c001122e <lockStuff()>:
c001122e:	fa                   	cli    
c001122f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011235:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001123b:	c3                   	ret    

c001123c <unlockStuff()>:
c001123c:	83 ec 0c             	sub    esp,0xc
c001123f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011244:	48                   	dec    eax
c0011245:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001124a:	75 18                	jne    c0011264 <unlockStuff()+0x28>
c001124c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011253:	74 0f                	je     c0011264 <unlockStuff()+0x28>
c0011255:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001125f:	e8 2c 49 00 00       	call   c0015b90 <schedule()>
c0011264:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011269:	48                   	dec    eax
c001126a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001126f:	75 01                	jne    c0011272 <unlockStuff()+0x36>
c0011271:	fb                   	sti    
c0011272:	83 c4 0c             	add    esp,0xc
c0011275:	c3                   	ret    

c0011276 <Virt::getAKernelVAS()>:
c0011276:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001127b:	c3                   	ret    

c001127c <__not_memcpy>:
c001127c:	57                   	push   edi
c001127d:	56                   	push   esi
c001127e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011282:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011286:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001128a:	89 c7                	mov    edi,eax
c001128c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001128e:	5e                   	pop    esi
c001128f:	5f                   	pop    edi
c0011290:	c3                   	ret    

c0011291 <KePanic(char const*)>:
c0011291:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011298:	e9 83 68 00 00       	jmp    c0017b20 <HalPanic(char const*)>

c001129d <KePowerThread(void*)>:
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112a5:	48                   	dec    eax
c00112a6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112ab:	75 01                	jne    c00112ae <KePowerThread(void*)+0x11>
c00112ad:	fb                   	sti    
c00112ae:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	6a 0a                	push   0xa
c00112ba:	e8 01 4c 00 00       	call   c0015ec0 <sleep(unsigned int)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00112c9:	eb e3                	jmp    c00112ae <KePowerThread(void*)+0x11>

c00112cb <KeChangePowerSettings(PowerSettings)>:
c00112cb:	57                   	push   edi
c00112cc:	b9 09 00 00 00       	mov    ecx,0x9
c00112d1:	56                   	push   esi
c00112d2:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00112d7:	fc                   	cld    
c00112d8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112de:	5e                   	pop    esi
c00112df:	5f                   	pop    edi
c00112e0:	c3                   	ret    

c00112e1 <KeUserIOReceived()>:
c00112e1:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112eb:	c3                   	ret    

c00112ec <KeHandlePowerButton()>:
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112f4:	83 f8 02             	cmp    eax,0x2
c00112f7:	75 10                	jne    c0011309 <KeHandlePowerButton()+0x1d>
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011302:	e8 43 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011307:	eb 11                	jmp    c001131a <KeHandlePowerButton()+0x2e>
c0011309:	48                   	dec    eax
c001130a:	75 11                	jne    c001131d <KeHandlePowerButton()+0x31>
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011315:	e8 60 5e ff ff       	call   c000717a <Computer::sleep()>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	83 c4 0c             	add    esp,0xc
c0011320:	c3                   	ret    

c0011321 <KeHandleSleepButton()>:
c0011321:	83 ec 0c             	sub    esp,0xc
c0011324:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011329:	83 f8 02             	cmp    eax,0x2
c001132c:	75 10                	jne    c001133e <KeHandleSleepButton()+0x1d>
c001132e:	83 ec 0c             	sub    esp,0xc
c0011331:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011337:	e8 0e 5e ff ff       	call   c000714a <Computer::shutdown()>
c001133c:	eb 11                	jmp    c001134f <KeHandleSleepButton()+0x2e>
c001133e:	48                   	dec    eax
c001133f:	75 11                	jne    c0011352 <KeHandleSleepButton()+0x31>
c0011341:	83 ec 0c             	sub    esp,0xc
c0011344:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001134a:	e8 2b 5e ff ff       	call   c000717a <Computer::sleep()>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	83 c4 0c             	add    esp,0xc
c0011355:	c3                   	ret    

c0011356 <KeSetupPowerManager()>:
c0011356:	83 ec 0c             	sub    esp,0xc
c0011359:	68 f0 00 00 00       	push   0xf0
c001135e:	6a 00                	push   0x0
c0011360:	68 9d 12 01 c0       	push   0xc001129d
c0011365:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001136b:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011375:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001137c:	e8 c3 45 00 00       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c0011381:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c001138b:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011395:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c001139f:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00113a9:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00113b3:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00113bd:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00113c7:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00113d1:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00113db:	83 c4 1c             	add    esp,0x1c
c00113de:	c3                   	ret    

c00113df <KeRand()>:
c00113df:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113e9:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113f3:	53                   	push   ebx
c00113f4:	01 c1                	add    ecx,eax
c00113f6:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00113fb:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011401:	01 ca                	add    edx,ecx
c0011403:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011408:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001140d:	83 d2 00             	adc    edx,0x0
c0011410:	0f b7 da             	movzx  ebx,dx
c0011413:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011419:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001141d:	5b                   	pop    ebx
c001141e:	c3                   	ret    

c001141f <KeSeedRand(unsigned int)>:
c001141f:	53                   	push   ebx
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011427:	e8 13 6a 00 00       	call   c0017e3f <HalGetRand()>
c001142c:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011436:	31 d8                	xor    eax,ebx
c0011438:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001143d:	e8 9d ff ff ff       	call   c00113df <KeRand()>
c0011442:	83 c4 08             	add    esp,0x8
c0011445:	5b                   	pop    ebx
c0011446:	eb 97                	jmp    c00113df <KeRand()>

c0011448 <KeInitRand()>:
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	e8 e4 67 00 00       	call   c0017c34 <HalQueryPerformanceCounter()>
c0011450:	0f 20 da             	mov    edx,cr3
c0011453:	0f 22 da             	mov    cr3,edx
c0011456:	0f 20 da             	mov    edx,cr3
c0011459:	0f 22 da             	mov    cr3,edx
c001145c:	0f 20 da             	mov    edx,cr3
c001145f:	0f 22 da             	mov    cr3,edx
c0011462:	0f 20 da             	mov    edx,cr3
c0011465:	0f 22 da             	mov    cr3,edx
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011470:	50                   	push   eax
c0011471:	e8 a9 ff ff ff       	call   c001141f <KeSeedRand(unsigned int)>
c0011476:	83 c4 1c             	add    esp,0x1c
c0011479:	c3                   	ret    
c001147a:	66 90                	xchg   ax,ax

c001147c <KeResolveCompatibilitySymbol(char*)>:
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	83 ec 08             	sub    esp,0x8
c0011482:	68 ec 1d 02 c0       	push   0xc0021dec
c0011487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148b:	e8 f0 f2 fe ff       	call   c0000780 <strcmp>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	85 c0                	test   eax,eax
c0011495:	0f 94 c0             	sete   al
c0011498:	0f b6 c0             	movzx  eax,al
c001149b:	85 c0                	test   eax,eax
c001149d:	74 0d                	je     c00114ac <KeResolveCompatibilitySymbol(char*)+0x30>
c001149f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114a4:	e9 8b 01 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114a9:	8d 76 00             	lea    esi,[esi+0x0]
c00114ac:	83 ec 08             	sub    esp,0x8
c00114af:	68 f5 1d 02 c0       	push   0xc0021df5
c00114b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b8:	e8 c3 f2 fe ff       	call   c0000780 <strcmp>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	85 c0                	test   eax,eax
c00114c2:	0f 94 c0             	sete   al
c00114c5:	0f b6 c0             	movzx  eax,al
c00114c8:	85 c0                	test   eax,eax
c00114ca:	74 0c                	je     c00114d8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00114cc:	b8 50 f2 01 c0       	mov    eax,0xc001f250
c00114d1:	e9 5e 01 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114d6:	66 90                	xchg   ax,ax
c00114d8:	83 ec 08             	sub    esp,0x8
c00114db:	68 ff 1d 02 c0       	push   0xc0021dff
c00114e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e4:	e8 97 f2 fe ff       	call   c0000780 <strcmp>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	85 c0                	test   eax,eax
c00114ee:	0f 94 c0             	sete   al
c00114f1:	0f b6 c0             	movzx  eax,al
c00114f4:	85 c0                	test   eax,eax
c00114f6:	74 0c                	je     c0011504 <KeResolveCompatibilitySymbol(char*)+0x88>
c00114f8:	b8 84 ef 01 c0       	mov    eax,0xc001ef84
c00114fd:	e9 32 01 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011502:	66 90                	xchg   ax,ax
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	68 08 1e 02 c0       	push   0xc0021e08
c001150c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011510:	e8 6b f2 fe ff       	call   c0000780 <strcmp>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	85 c0                	test   eax,eax
c001151a:	0f 94 c0             	sete   al
c001151d:	0f b6 c0             	movzx  eax,al
c0011520:	85 c0                	test   eax,eax
c0011522:	74 0c                	je     c0011530 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011524:	b8 91 12 01 c0       	mov    eax,0xc0011291
c0011529:	e9 06 01 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001152e:	66 90                	xchg   ax,ax
c0011530:	83 ec 08             	sub    esp,0x8
c0011533:	68 1b 1e 02 c0       	push   0xc0021e1b
c0011538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153c:	e8 3f f2 fe ff       	call   c0000780 <strcmp>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	85 c0                	test   eax,eax
c0011546:	0f 94 c0             	sete   al
c0011549:	0f b6 c0             	movzx  eax,al
c001154c:	85 c0                	test   eax,eax
c001154e:	74 0c                	je     c001155c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011550:	b8 bd 0b 01 c0       	mov    eax,0xc0010bbd
c0011555:	e9 da 00 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155a:	66 90                	xchg   ax,ax
c001155c:	83 ec 08             	sub    esp,0x8
c001155f:	68 38 1e 02 c0       	push   0xc0021e38
c0011564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011568:	e8 13 f2 fe ff       	call   c0000780 <strcmp>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	85 c0                	test   eax,eax
c0011572:	0f 94 c0             	sete   al
c0011575:	0f b6 c0             	movzx  eax,al
c0011578:	85 c0                	test   eax,eax
c001157a:	74 0c                	je     c0011588 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001157c:	b8 50 f3 01 c0       	mov    eax,0xc001f350
c0011581:	e9 ae 00 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011586:	66 90                	xchg   ax,ax
c0011588:	83 ec 08             	sub    esp,0x8
c001158b:	68 42 1e 02 c0       	push   0xc0021e42
c0011590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011594:	e8 e7 f1 fe ff       	call   c0000780 <strcmp>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	85 c0                	test   eax,eax
c001159e:	0f 94 c0             	sete   al
c00115a1:	0f b6 c0             	movzx  eax,al
c00115a4:	85 c0                	test   eax,eax
c00115a6:	74 0c                	je     c00115b4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00115a8:	b8 d0 f0 01 c0       	mov    eax,0xc001f0d0
c00115ad:	e9 82 00 00 00       	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b2:	66 90                	xchg   ax,ax
c00115b4:	83 ec 08             	sub    esp,0x8
c00115b7:	68 4b 1e 02 c0       	push   0xc0021e4b
c00115bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c0:	e8 bb f1 fe ff       	call   c0000780 <strcmp>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	85 c0                	test   eax,eax
c00115ca:	0f 94 c0             	sete   al
c00115cd:	0f b6 c0             	movzx  eax,al
c00115d0:	85 c0                	test   eax,eax
c00115d2:	74 08                	je     c00115dc <KeResolveCompatibilitySymbol(char*)+0x160>
c00115d4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115d9:	eb 59                	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115db:	90                   	nop
c00115dc:	83 ec 08             	sub    esp,0x8
c00115df:	68 63 1e 02 c0       	push   0xc0021e63
c00115e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e8:	e8 93 f1 fe ff       	call   c0000780 <strcmp>
c00115ed:	83 c4 10             	add    esp,0x10
c00115f0:	85 c0                	test   eax,eax
c00115f2:	0f 94 c0             	sete   al
c00115f5:	0f b6 c0             	movzx  eax,al
c00115f8:	85 c0                	test   eax,eax
c00115fa:	74 08                	je     c0011604 <KeResolveCompatibilitySymbol(char*)+0x188>
c00115fc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011601:	eb 31                	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011603:	90                   	nop
c0011604:	83 ec 08             	sub    esp,0x8
c0011607:	68 70 1e 02 c0       	push   0xc0021e70
c001160c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011610:	e8 6b f1 fe ff       	call   c0000780 <strcmp>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	85 c0                	test   eax,eax
c001161a:	0f 94 c0             	sete   al
c001161d:	0f b6 c0             	movzx  eax,al
c0011620:	85 c0                	test   eax,eax
c0011622:	74 08                	je     c001162c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011624:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011629:	eb 09                	jmp    c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001162b:	90                   	nop
c001162c:	b8 00 00 00 00       	mov    eax,0x0
c0011631:	8d 76 00             	lea    esi,[esi+0x0]
c0011634:	83 c4 0c             	add    esp,0xc
c0011637:	c3                   	ret    

c0011638 <KiSigKill(int)>:
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	6a 00                	push   0x0
c001163d:	6a 00                	push   0x0
c001163f:	6a ff                	push   0xffffffff
c0011641:	6a 01                	push   0x1
c0011643:	e8 0a 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011648:	83 c4 1c             	add    esp,0x1c
c001164b:	c3                   	ret    

c001164c <KiDefaultSignalHandlerIgnore(int)>:
c001164c:	c3                   	ret    

c001164d <KiDefaultSignalHandlerPause(int)>:
c001164d:	57                   	push   edi
c001164e:	b9 07 00 00 00       	mov    ecx,0x7
c0011653:	56                   	push   esi
c0011654:	be b9 1e 02 c0       	mov    esi,0xc0021eb9
c0011659:	83 ec 24             	sub    esp,0x24
c001165c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011660:	fc                   	cld    
c0011661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011663:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011667:	50                   	push   eax
c0011668:	6a 00                	push   0x0
c001166a:	6a 00                	push   0x0
c001166c:	6a 27                	push   0x27
c001166e:	e8 df 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011673:	83 c4 34             	add    esp,0x34
c0011676:	5e                   	pop    esi
c0011677:	5f                   	pop    edi
c0011678:	c3                   	ret    

c0011679 <KiDefaultSignalHandlerResume(int)>:
c0011679:	57                   	push   edi
c001167a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001167f:	56                   	push   esi
c0011680:	be d5 1e 02 c0       	mov    esi,0xc0021ed5
c0011685:	83 ec 24             	sub    esp,0x24
c0011688:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001168c:	fc                   	cld    
c001168d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001168f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011693:	50                   	push   eax
c0011694:	6a 00                	push   0x0
c0011696:	6a 00                	push   0x0
c0011698:	6a 27                	push   0x27
c001169a:	e8 b3 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001169f:	83 c4 34             	add    esp,0x34
c00116a2:	5e                   	pop    esi
c00116a3:	5f                   	pop    edi
c00116a4:	c3                   	ret    

c00116a5 <KeDeinitSignals(SigHandlerBlock*)>:
c00116a5:	e9 39 64 ff ff       	jmp    c0007ae3 <free>

c00116aa <KeInitSignals()>:
c00116aa:	53                   	push   ebx
c00116ab:	83 ec 14             	sub    esp,0x14
c00116ae:	68 c8 00 00 00       	push   0xc8
c00116b3:	e8 1b 64 ff ff       	call   c0007ad3 <malloc>
c00116b8:	83 c4 0c             	add    esp,0xc
c00116bb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00116c5:	89 c3                	mov    ebx,eax
c00116c7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00116d1:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00116d7:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00116db:	6a 20                	push   0x20
c00116dd:	6a 00                	push   0x0
c00116df:	50                   	push   eax
c00116e0:	e8 0b ee fe ff       	call   c00004f0 <memset>
c00116e5:	83 c4 0c             	add    esp,0xc
c00116e8:	6a 44                	push   0x44
c00116ea:	6a 00                	push   0x0
c00116ec:	53                   	push   ebx
c00116ed:	e8 fe ed fe ff       	call   c00004f0 <memset>
c00116f2:	83 c4 18             	add    esp,0x18
c00116f5:	89 d8                	mov    eax,ebx
c00116f7:	5b                   	pop    ebx
c00116f8:	c3                   	ret    

c00116f9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116f9:	53                   	push   ebx
c00116fa:	b8 01 00 00 00       	mov    eax,0x1
c00116ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011707:	83 f9 10             	cmp    ecx,0x10
c001170a:	7f 21                	jg     c001172d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001170c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011710:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011713:	89 03                	mov    DWORD PTR [ebx],eax
c0011715:	b8 01 00 00 00       	mov    eax,0x1
c001171a:	d3 e0                	shl    eax,cl
c001171c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011720:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011723:	31 c0                	xor    eax,eax
c0011725:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001172d:	5b                   	pop    ebx
c001172e:	c3                   	ret    

c001172f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001172f:	55                   	push   ebp
c0011730:	57                   	push   edi
c0011731:	bf 08 00 00 00       	mov    edi,0x8
c0011736:	56                   	push   esi
c0011737:	53                   	push   ebx
c0011738:	83 ec 18             	sub    esp,0x18
c001173b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001173f:	68 f2 1e 02 c0       	push   0xc0021ef2
c0011744:	e8 c1 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	31 c9                	xor    ecx,ecx
c001174e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011755:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001175b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001175f:	99                   	cdq    
c0011760:	f7 ff                	idiv   edi
c0011762:	8d 42 24             	lea    eax,[edx+0x24]
c0011765:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011769:	85 f6                	test   esi,esi
c001176b:	75 1a                	jne    c0011787 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001176d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011771:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011775:	50                   	push   eax
c0011776:	50                   	push   eax
c0011777:	52                   	push   edx
c0011778:	68 03 1f 02 c0       	push   0xc0021f03
c001177d:	e8 88 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011782:	83 c4 10             	add    esp,0x10
c0011785:	eb 1b                	jmp    c00117a2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011787:	41                   	inc    ecx
c0011788:	83 f9 08             	cmp    ecx,0x8
c001178b:	75 ce                	jne    c001175b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	be 01 00 00 00       	mov    esi,0x1
c0011795:	68 24 1f 02 c0       	push   0xc0021f24
c001179a:	e8 6b 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	83 c4 0c             	add    esp,0xc
c00117a5:	89 f0                	mov    eax,esi
c00117a7:	5b                   	pop    ebx
c00117a8:	5e                   	pop    esi
c00117a9:	5f                   	pop    edi
c00117aa:	5d                   	pop    ebp
c00117ab:	c3                   	ret    

c00117ac <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117ac:	55                   	push   ebp
c00117ad:	57                   	push   edi
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	51                   	push   ecx
c00117b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117b5:	85 db                	test   ebx,ebx
c00117b7:	0f 84 bc 00 00 00    	je     c0011879 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117bd:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117c4:	0f 84 af 00 00 00    	je     c0011879 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117ca:	31 c9                	xor    ecx,ecx
c00117cc:	bf 08 00 00 00       	mov    edi,0x8
c00117d1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00117d7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00117da:	99                   	cdq    
c00117db:	f7 ff                	idiv   edi
c00117dd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117e4:	85 ed                	test   ebp,ebp
c00117e6:	0f 84 9e 00 00 00    	je     c001188a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117ec:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117f2:	89 e9                	mov    ecx,ebp
c00117f4:	bf 01 00 00 00       	mov    edi,0x1
c00117f9:	d3 e7                	shl    edi,cl
c00117fb:	31 c9                	xor    ecx,ecx
c00117fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0011800:	b8 01 00 00 00       	mov    eax,0x1
c0011805:	d3 e0                	shl    eax,cl
c0011807:	85 04 24             	test   DWORD PTR [esp],eax
c001180a:	74 06                	je     c0011812 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001180c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011810:	75 67                	jne    c0011879 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011812:	41                   	inc    ecx
c0011813:	83 f9 11             	cmp    ecx,0x11
c0011816:	75 e8                	jne    c0011800 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011818:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001181b:	46                   	inc    esi
c001181c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011822:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001182d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011834:	09 f8                	or     eax,edi
c0011836:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001183c:	31 c0                	xor    eax,eax
c001183e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011846:	74 09                	je     c0011851 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011848:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001184f:	eb 06                	jmp    c0011857 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011851:	40                   	inc    eax
c0011852:	83 f8 08             	cmp    eax,0x8
c0011855:	75 e7                	jne    c001183e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011857:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001185b:	83 fd 09             	cmp    ebp,0x9
c001185e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011861:	89 2a                	mov    DWORD PTR [edx],ebp
c0011863:	75 07                	jne    c001186c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011865:	b8 38 16 01 c0       	mov    eax,0xc0011638
c001186a:	eb 31                	jmp    c001189d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001186c:	83 f8 01             	cmp    eax,0x1
c001186f:	75 0c                	jne    c001187d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011871:	f7 d7                	not    edi
c0011873:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011879:	31 c0                	xor    eax,eax
c001187b:	eb 20                	jmp    c001189d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001187d:	85 c0                	test   eax,eax
c001187f:	75 1c                	jne    c001189d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011881:	8b 04 ad 20 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcce0]
c0011888:	eb 13                	jmp    c001189d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001188a:	41                   	inc    ecx
c001188b:	46                   	inc    esi
c001188c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011892:	83 f9 08             	cmp    ecx,0x8
c0011895:	0f 85 36 ff ff ff    	jne    c00117d1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001189b:	eb dc                	jmp    c0011879 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001189d:	5a                   	pop    edx
c001189e:	5b                   	pop    ebx
c001189f:	5e                   	pop    esi
c00118a0:	5f                   	pop    edi
c00118a1:	5d                   	pop    ebp
c00118a2:	c3                   	ret    

c00118a3 <KiCheckSignalZ>:
c00118a3:	83 ec 10             	sub    esp,0x10
c00118a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118aa:	50                   	push   eax
c00118ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118b3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118b9:	e8 ee fe ff ff       	call   c00117ac <KeCheckSignal(SigHandlerBlock*, int*)>
c00118be:	5a                   	pop    edx
c00118bf:	31 d2                	xor    edx,edx
c00118c1:	59                   	pop    ecx
c00118c2:	85 c0                	test   eax,eax
c00118c4:	74 19                	je     c00118df <KiCheckSignalZ+0x3c>
c00118c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00118cc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00118cf:	89 02                	mov    DWORD PTR [edx],eax
c00118d1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00118d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118dc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00118df:	89 d0                	mov    eax,edx
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	c3                   	ret    

c00118e5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118e5:	56                   	push   esi
c00118e6:	53                   	push   ebx
c00118e7:	bb 01 00 00 00       	mov    ebx,0x1
c00118ec:	52                   	push   edx
c00118ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118f5:	d3 e3                	shl    ebx,cl
c00118f7:	83 f9 10             	cmp    ecx,0x10
c00118fa:	7f 08                	jg     c0011904 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00118fc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011902:	75 10                	jne    c0011914 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	68 35 1f 02 c0       	push   0xc0021f35
c001190c:	e8 80 f9 ff ff       	call   c0011291 <KePanic(char const*)>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	f7 d3                	not    ebx
c0011916:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001191c:	58                   	pop    eax
c001191d:	5b                   	pop    ebx
c001191e:	5e                   	pop    esi
c001191f:	c3                   	ret    

c0011920 <KiFinishSignalZ>:
c0011920:	53                   	push   ebx
c0011921:	83 ec 10             	sub    esp,0x10
c0011924:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011928:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001192b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011930:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011933:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011939:	e8 a7 ff ff ff       	call   c00118e5 <KeCompleteSignal(SigHandlerBlock*, int)>
c001193e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011944:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001194b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011952:	83 c4 18             	add    esp,0x18
c0011955:	5b                   	pop    ebx
c0011956:	c3                   	ret    

c0011957 <SysSeekDir(regs*)>:
c0011957:	31 c0                	xor    eax,eax
c0011959:	31 d2                	xor    edx,edx
c001195b:	c3                   	ret    

c001195c <SysTellDir(regs*)>:
c001195c:	31 c0                	xor    eax,eax
c001195e:	31 d2                	xor    edx,edx
c0011960:	c3                   	ret    

c0011961 <SysVerify(regs*)>:
c0011961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011965:	31 d2                	xor    edx,edx
c0011967:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001196a:	c3                   	ret    

c001196b <SysGetArgc(regs*)>:
c001196b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011970:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011973:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011979:	89 c2                	mov    edx,eax
c001197b:	c1 fa 1f             	sar    edx,0x1f
c001197e:	c3                   	ret    

c001197f <SysTTYName(regs*)>:
c001197f:	b8 01 00 00 00       	mov    eax,0x1
c0011984:	31 d2                	xor    edx,edx
c0011986:	c3                   	ret    

c0011987 <SysFormatDisk(regs*)>:
c0011987:	56                   	push   esi
c0011988:	53                   	push   ebx
c0011989:	83 ec 04             	sub    esp,0x4
c001198c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011990:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011996:	eb 2a                	jmp    c00119c2 <SysFormatDisk(regs*)+0x3b>
c0011998:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001199b:	83 ec 0c             	sub    esp,0xc
c001199e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119a3:	51                   	push   ecx
c00119a4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119a7:	51                   	push   ecx
c00119a8:	50                   	push   eax
c00119a9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00119b0:	50                   	push   eax
c00119b1:	53                   	push   ebx
c00119b2:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00119b5:	83 c4 20             	add    esp,0x20
c00119b8:	83 f8 08             	cmp    eax,0x8
c00119bb:	89 c1                	mov    ecx,eax
c00119bd:	75 14                	jne    c00119d3 <SysFormatDisk(regs*)+0x4c>
c00119bf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00119c2:	85 db                	test   ebx,ebx
c00119c4:	75 d2                	jne    c0011998 <SysFormatDisk(regs*)+0x11>
c00119c6:	b8 03 00 00 00       	mov    eax,0x3
c00119cb:	31 d2                	xor    edx,edx
c00119cd:	83 c4 04             	add    esp,0x4
c00119d0:	5b                   	pop    ebx
c00119d1:	5e                   	pop    esi
c00119d2:	c3                   	ret    
c00119d3:	85 c0                	test   eax,eax
c00119d5:	74 13                	je     c00119ea <SysFormatDisk(regs*)+0x63>
c00119d7:	31 d2                	xor    edx,edx
c00119d9:	83 f9 09             	cmp    ecx,0x9
c00119dc:	b8 01 00 00 00       	mov    eax,0x1
c00119e1:	74 ea                	je     c00119cd <SysFormatDisk(regs*)+0x46>
c00119e3:	b8 02 00 00 00       	mov    eax,0x2
c00119e8:	eb e1                	jmp    c00119cb <SysFormatDisk(regs*)+0x44>
c00119ea:	31 c0                	xor    eax,eax
c00119ec:	eb dd                	jmp    c00119cb <SysFormatDisk(regs*)+0x44>

c00119ee <SysSetDiskVolumeLabel(regs*)>:
c00119ee:	56                   	push   esi
c00119ef:	53                   	push   ebx
c00119f0:	83 ec 04             	sub    esp,0x4
c00119f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119f7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119fa:	83 f8 19             	cmp    eax,0x19
c00119fd:	77 33                	ja     c0011a32 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119ff:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a06:	85 c9                	test   ecx,ecx
c0011a08:	74 28                	je     c0011a32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a0a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a0d:	85 db                	test   ebx,ebx
c0011a0f:	74 21                	je     c0011a32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a11:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a17:	85 d2                	test   edx,edx
c0011a19:	74 17                	je     c0011a32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a1b:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a1d:	53                   	push   ebx
c0011a1e:	50                   	push   eax
c0011a1f:	51                   	push   ecx
c0011a20:	52                   	push   edx
c0011a21:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	83 c4 04             	add    esp,0x4
c0011a2a:	5b                   	pop    ebx
c0011a2b:	5e                   	pop    esi
c0011a2c:	89 c2                	mov    edx,eax
c0011a2e:	c1 fa 1f             	sar    edx,0x1f
c0011a31:	c3                   	ret    
c0011a32:	83 c4 04             	add    esp,0x4
c0011a35:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a3a:	5b                   	pop    ebx
c0011a3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a40:	5e                   	pop    esi
c0011a41:	c3                   	ret    

c0011a42 <SysGetDiskVolumeLabel(regs*)>:
c0011a42:	57                   	push   edi
c0011a43:	56                   	push   esi
c0011a44:	53                   	push   ebx
c0011a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a49:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a4c:	83 fa 19             	cmp    edx,0x19
c0011a4f:	77 3c                	ja     c0011a8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a51:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a58:	85 c9                	test   ecx,ecx
c0011a5a:	74 31                	je     c0011a8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a5c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a5f:	85 db                	test   ebx,ebx
c0011a61:	74 2a                	je     c0011a8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a63:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a66:	85 f6                	test   esi,esi
c0011a68:	74 23                	je     c0011a8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a6a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a70:	85 c0                	test   eax,eax
c0011a72:	74 19                	je     c0011a8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a74:	83 ec 0c             	sub    esp,0xc
c0011a77:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a79:	56                   	push   esi
c0011a7a:	53                   	push   ebx
c0011a7b:	52                   	push   edx
c0011a7c:	51                   	push   ecx
c0011a7d:	50                   	push   eax
c0011a7e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a81:	83 c4 20             	add    esp,0x20
c0011a84:	5b                   	pop    ebx
c0011a85:	5e                   	pop    esi
c0011a86:	89 c2                	mov    edx,eax
c0011a88:	c1 fa 1f             	sar    edx,0x1f
c0011a8b:	5f                   	pop    edi
c0011a8c:	c3                   	ret    
c0011a8d:	5b                   	pop    ebx
c0011a8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a98:	5e                   	pop    esi
c0011a99:	5f                   	pop    edi
c0011a9a:	c3                   	ret    

c0011a9b <SysShutdown(regs*)>:
c0011a9b:	57                   	push   edi
c0011a9c:	56                   	push   esi
c0011a9d:	83 ec 04             	sub    esp,0x4
c0011aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011aa7:	85 c0                	test   eax,eax
c0011aa9:	74 1e                	je     c0011ac9 <SysShutdown(regs*)+0x2e>
c0011aab:	83 f8 01             	cmp    eax,0x1
c0011aae:	74 5f                	je     c0011b0f <SysShutdown(regs*)+0x74>
c0011ab0:	83 f8 02             	cmp    eax,0x2
c0011ab3:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ab8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011abd:	74 32                	je     c0011af1 <SysShutdown(regs*)+0x56>
c0011abf:	83 c4 04             	add    esp,0x4
c0011ac2:	89 f0                	mov    eax,esi
c0011ac4:	5e                   	pop    esi
c0011ac5:	89 fa                	mov    edx,edi
c0011ac7:	5f                   	pop    edi
c0011ac8:	c3                   	ret    
c0011ac9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ace:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ad3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011ad8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ada:	6a 00                	push   0x0
c0011adc:	6a 00                	push   0x0
c0011ade:	6a 00                	push   0x0
c0011ae0:	50                   	push   eax
c0011ae1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ae4:	83 c4 10             	add    esp,0x10
c0011ae7:	89 f0                	mov    eax,esi
c0011ae9:	83 c4 04             	add    esp,0x4
c0011aec:	89 fa                	mov    edx,edi
c0011aee:	5e                   	pop    esi
c0011aef:	5f                   	pop    edi
c0011af0:	c3                   	ret    
c0011af1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011af6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011af8:	6a 00                	push   0x0
c0011afa:	6a 00                	push   0x0
c0011afc:	6a 01                	push   0x1
c0011afe:	50                   	push   eax
c0011aff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	89 f0                	mov    eax,esi
c0011b07:	83 c4 04             	add    esp,0x4
c0011b0a:	89 fa                	mov    edx,edi
c0011b0c:	5e                   	pop    esi
c0011b0d:	5f                   	pop    edi
c0011b0e:	c3                   	ret    
c0011b0f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b14:	85 c0                	test   eax,eax
c0011b16:	74 02                	je     c0011b1a <SysShutdown(regs*)+0x7f>
c0011b18:	ff d0                	call   eax
c0011b1a:	31 f6                	xor    esi,esi
c0011b1c:	83 c4 04             	add    esp,0x4
c0011b1f:	89 f0                	mov    eax,esi
c0011b21:	31 ff                	xor    edi,edi
c0011b23:	5e                   	pop    esi
c0011b24:	89 fa                	mov    edx,edi
c0011b26:	5f                   	pop    edi
c0011b27:	c3                   	ret    

c0011b28 <SysRealpath(regs*)>:
c0011b28:	53                   	push   ebx
c0011b29:	83 ec 08             	sub    esp,0x8
c0011b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b30:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b33:	85 c9                	test   ecx,ecx
c0011b35:	74 36                	je     c0011b6d <SysRealpath(regs*)+0x45>
c0011b37:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b3a:	31 d2                	xor    edx,edx
c0011b3c:	b8 01 00 00 00       	mov    eax,0x1
c0011b41:	85 db                	test   ebx,ebx
c0011b43:	75 05                	jne    c0011b4a <SysRealpath(regs*)+0x22>
c0011b45:	83 c4 08             	add    esp,0x8
c0011b48:	5b                   	pop    ebx
c0011b49:	c3                   	ret    
c0011b4a:	6a 00                	push   0x0
c0011b4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b54:	05 0c 01 00 00       	add    eax,0x10c
c0011b59:	50                   	push   eax
c0011b5a:	51                   	push   ecx
c0011b5b:	53                   	push   ebx
c0011b5c:	e8 4b 9a ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	31 c0                	xor    eax,eax
c0011b66:	31 d2                	xor    edx,edx
c0011b68:	83 c4 08             	add    esp,0x8
c0011b6b:	5b                   	pop    ebx
c0011b6c:	c3                   	ret    
c0011b6d:	b8 01 00 00 00       	mov    eax,0x1
c0011b72:	31 d2                	xor    edx,edx
c0011b74:	eb f2                	jmp    c0011b68 <SysRealpath(regs*)+0x40>

c0011b76 <SysReadDir(regs*)>:
c0011b76:	53                   	push   ebx
c0011b77:	83 ec 18             	sub    esp,0x18
c0011b7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b81:	83 f8 02             	cmp    eax,0x2
c0011b84:	76 4f                	jbe    c0011bd5 <SysReadDir(regs*)+0x5f>
c0011b86:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b8d:	77 52                	ja     c0011be1 <SysReadDir(regs*)+0x6b>
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	50                   	push   eax
c0011b93:	e8 03 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	85 c0                	test   eax,eax
c0011b9d:	74 42                	je     c0011be1 <SysReadDir(regs*)+0x6b>
c0011b9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ba7:	83 ec 0c             	sub    esp,0xc
c0011baa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bae:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bb0:	51                   	push   ecx
c0011bb1:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011bb4:	51                   	push   ecx
c0011bb5:	6a 00                	push   0x0
c0011bb7:	68 10 01 00 00       	push   0x110
c0011bbc:	50                   	push   eax
c0011bbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bc0:	83 c4 20             	add    esp,0x20
c0011bc3:	85 c0                	test   eax,eax
c0011bc5:	89 c1                	mov    ecx,eax
c0011bc7:	74 27                	je     c0011bf0 <SysReadDir(regs*)+0x7a>
c0011bc9:	31 d2                	xor    edx,edx
c0011bcb:	83 f9 07             	cmp    ecx,0x7
c0011bce:	b8 02 00 00 00       	mov    eax,0x2
c0011bd3:	75 16                	jne    c0011beb <SysReadDir(regs*)+0x75>
c0011bd5:	b8 01 00 00 00       	mov    eax,0x1
c0011bda:	31 d2                	xor    edx,edx
c0011bdc:	83 c4 18             	add    esp,0x18
c0011bdf:	5b                   	pop    ebx
c0011be0:	c3                   	ret    
c0011be1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011beb:	83 c4 18             	add    esp,0x18
c0011bee:	5b                   	pop    ebx
c0011bef:	c3                   	ret    
c0011bf0:	31 c0                	xor    eax,eax
c0011bf2:	31 d2                	xor    edx,edx
c0011bf4:	eb e6                	jmp    c0011bdc <SysReadDir(regs*)+0x66>

c0011bf6 <SysIsATTY(regs*)>:
c0011bf6:	83 ec 0c             	sub    esp,0xc
c0011bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c00:	83 f8 02             	cmp    eax,0x2
c0011c03:	76 07                	jbe    c0011c0c <SysIsATTY(regs*)+0x16>
c0011c05:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c0a:	75 26                	jne    c0011c32 <SysIsATTY(regs*)+0x3c>
c0011c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c11:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c1a:	85 c0                	test   eax,eax
c0011c1c:	74 24                	je     c0011c42 <SysIsATTY(regs*)+0x4c>
c0011c1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c20:	83 ec 0c             	sub    esp,0xc
c0011c23:	50                   	push   eax
c0011c24:	ff 12                	call   DWORD PTR [edx]
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	31 d2                	xor    edx,edx
c0011c2b:	83 c4 0c             	add    esp,0xc
c0011c2e:	0f b6 c0             	movzx  eax,al
c0011c31:	c3                   	ret    
c0011c32:	83 ec 0c             	sub    esp,0xc
c0011c35:	50                   	push   eax
c0011c36:	e8 60 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c3b:	83 c4 10             	add    esp,0x10
c0011c3e:	85 c0                	test   eax,eax
c0011c40:	75 dc                	jne    c0011c1e <SysIsATTY(regs*)+0x28>
c0011c42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c4c:	83 c4 0c             	add    esp,0xc
c0011c4f:	c3                   	ret    

c0011c50 <SysSeek(regs*)>:
c0011c50:	56                   	push   esi
c0011c51:	53                   	push   ebx
c0011c52:	83 ec 04             	sub    esp,0x4
c0011c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c59:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c5c:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011c5f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011c65:	77 33                	ja     c0011c9a <SysSeek(regs*)+0x4a>
c0011c67:	83 ec 0c             	sub    esp,0xc
c0011c6a:	51                   	push   ecx
c0011c6b:	e8 2b 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c70:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c73:	83 c4 0c             	add    esp,0xc
c0011c76:	31 db                	xor    ebx,ebx
c0011c78:	53                   	push   ebx
c0011c79:	51                   	push   ecx
c0011c7a:	50                   	push   eax
c0011c7b:	e8 d0 9c ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	85 c0                	test   eax,eax
c0011c85:	0f 95 c0             	setne  al
c0011c88:	31 d2                	xor    edx,edx
c0011c8a:	0f b6 c0             	movzx  eax,al
c0011c8d:	f7 d8                	neg    eax
c0011c8f:	83 d2 00             	adc    edx,0x0
c0011c92:	83 c4 04             	add    esp,0x4
c0011c95:	5b                   	pop    ebx
c0011c96:	f7 da                	neg    edx
c0011c98:	5e                   	pop    esi
c0011c99:	c3                   	ret    
c0011c9a:	83 c4 04             	add    esp,0x4
c0011c9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca2:	5b                   	pop    ebx
c0011ca3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca8:	5e                   	pop    esi
c0011ca9:	c3                   	ret    

c0011caa <SysTell(regs*)>:
c0011caa:	53                   	push   ebx
c0011cab:	83 ec 08             	sub    esp,0x8
c0011cae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cb2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cb5:	83 f8 02             	cmp    eax,0x2
c0011cb8:	76 4e                	jbe    c0011d08 <SysTell(regs*)+0x5e>
c0011cba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cbf:	76 19                	jbe    c0011cda <SysTell(regs*)+0x30>
c0011cc1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cc4:	31 d2                	xor    edx,edx
c0011cc6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cd3:	83 c4 08             	add    esp,0x8
c0011cd6:	31 c0                	xor    eax,eax
c0011cd8:	5b                   	pop    ebx
c0011cd9:	c3                   	ret    
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	50                   	push   eax
c0011cde:	e8 b8 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ce3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011ce6:	5a                   	pop    edx
c0011ce7:	59                   	pop    ecx
c0011ce8:	53                   	push   ebx
c0011ce9:	50                   	push   eax
c0011cea:	e8 0d 9d ff ff       	call   c000b9fc <File::tell(unsigned long long*)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	85 c0                	test   eax,eax
c0011cf4:	0f 95 c0             	setne  al
c0011cf7:	31 d2                	xor    edx,edx
c0011cf9:	0f b6 c0             	movzx  eax,al
c0011cfc:	f7 d8                	neg    eax
c0011cfe:	83 d2 00             	adc    edx,0x0
c0011d01:	83 c4 08             	add    esp,0x8
c0011d04:	5b                   	pop    ebx
c0011d05:	f7 da                	neg    edx
c0011d07:	c3                   	ret    
c0011d08:	83 c4 08             	add    esp,0x8
c0011d0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d10:	5b                   	pop    ebx
c0011d11:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d16:	c3                   	ret    

c0011d17 <SysSize(regs*)>:
c0011d17:	53                   	push   ebx
c0011d18:	83 ec 18             	sub    esp,0x18
c0011d1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d22:	83 f8 02             	cmp    eax,0x2
c0011d25:	76 54                	jbe    c0011d7b <SysSize(regs*)+0x64>
c0011d27:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d2c:	76 19                	jbe    c0011d47 <SysSize(regs*)+0x30>
c0011d2e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d31:	31 d2                	xor    edx,edx
c0011d33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d40:	83 c4 18             	add    esp,0x18
c0011d43:	31 c0                	xor    eax,eax
c0011d45:	5b                   	pop    ebx
c0011d46:	c3                   	ret    
c0011d47:	83 ec 0c             	sub    esp,0xc
c0011d4a:	50                   	push   eax
c0011d4b:	e8 4b 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d50:	83 c4 0c             	add    esp,0xc
c0011d53:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d57:	52                   	push   edx
c0011d58:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d5b:	52                   	push   edx
c0011d5c:	50                   	push   eax
c0011d5d:	e8 32 9e ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	85 c0                	test   eax,eax
c0011d67:	0f 95 c0             	setne  al
c0011d6a:	31 d2                	xor    edx,edx
c0011d6c:	0f b6 c0             	movzx  eax,al
c0011d6f:	f7 d8                	neg    eax
c0011d71:	83 d2 00             	adc    edx,0x0
c0011d74:	83 c4 18             	add    esp,0x18
c0011d77:	5b                   	pop    ebx
c0011d78:	f7 da                	neg    edx
c0011d7a:	c3                   	ret    
c0011d7b:	83 c4 18             	add    esp,0x18
c0011d7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d83:	5b                   	pop    ebx
c0011d84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d89:	c3                   	ret    

c0011d8a <SysSizeFromFilename(regs*)>:
c0011d8a:	57                   	push   edi
c0011d8b:	56                   	push   esi
c0011d8c:	53                   	push   ebx
c0011d8d:	83 ec 10             	sub    esp,0x10
c0011d90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011d94:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d97:	83 fb 02             	cmp    ebx,0x2
c0011d9a:	0f 86 83 00 00 00    	jbe    c0011e23 <SysSizeFromFilename(regs*)+0x99>
c0011da0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011da6:	76 1b                	jbe    c0011dc3 <SysSizeFromFilename(regs*)+0x39>
c0011da8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011dab:	31 d2                	xor    edx,edx
c0011dad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011db3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dba:	83 c4 10             	add    esp,0x10
c0011dbd:	31 c0                	xor    eax,eax
c0011dbf:	5b                   	pop    ebx
c0011dc0:	5e                   	pop    esi
c0011dc1:	5f                   	pop    edi
c0011dc2:	c3                   	ret    
c0011dc3:	83 ec 0c             	sub    esp,0xc
c0011dc6:	68 14 01 00 00       	push   0x114
c0011dcb:	e8 03 5d ff ff       	call   c0007ad3 <malloc>
c0011dd0:	83 c4 0c             	add    esp,0xc
c0011dd3:	89 c7                	mov    edi,eax
c0011dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ddd:	50                   	push   eax
c0011dde:	53                   	push   ebx
c0011ddf:	57                   	push   edi
c0011de0:	e8 e5 99 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0011de5:	83 c4 0c             	add    esp,0xc
c0011de8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011dec:	50                   	push   eax
c0011ded:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011df0:	52                   	push   edx
c0011df1:	57                   	push   edi
c0011df2:	e8 9d 9d ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	85 ff                	test   edi,edi
c0011dfc:	89 c3                	mov    ebx,eax
c0011dfe:	74 0c                	je     c0011e0c <SysSizeFromFilename(regs*)+0x82>
c0011e00:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	57                   	push   edi
c0011e06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	31 c0                	xor    eax,eax
c0011e0e:	85 db                	test   ebx,ebx
c0011e10:	0f 95 c0             	setne  al
c0011e13:	31 d2                	xor    edx,edx
c0011e15:	f7 d8                	neg    eax
c0011e17:	83 d2 00             	adc    edx,0x0
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	5b                   	pop    ebx
c0011e1e:	f7 da                	neg    edx
c0011e20:	5e                   	pop    esi
c0011e21:	5f                   	pop    edi
c0011e22:	c3                   	ret    
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e2b:	5b                   	pop    ebx
c0011e2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e31:	5e                   	pop    esi
c0011e32:	5f                   	pop    edi
c0011e33:	c3                   	ret    

c0011e34 <SysClose(regs*)>:
c0011e34:	53                   	push   ebx
c0011e35:	83 ec 08             	sub    esp,0x8
c0011e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e3f:	83 f8 02             	cmp    eax,0x2
c0011e42:	76 41                	jbe    c0011e85 <SysClose(regs*)+0x51>
c0011e44:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e4a:	83 fa 01             	cmp    edx,0x1
c0011e4d:	76 2d                	jbe    c0011e7c <SysClose(regs*)+0x48>
c0011e4f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e54:	77 2f                	ja     c0011e85 <SysClose(regs*)+0x51>
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	50                   	push   eax
c0011e5a:	e8 3c 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e62:	89 c3                	mov    ebx,eax
c0011e64:	e8 87 9a ff ff       	call   c000b8f0 <File::close()>
c0011e69:	83 c4 10             	add    esp,0x10
c0011e6c:	85 db                	test   ebx,ebx
c0011e6e:	74 0c                	je     c0011e7c <SysClose(regs*)+0x48>
c0011e70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	53                   	push   ebx
c0011e76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e79:	83 c4 10             	add    esp,0x10
c0011e7c:	83 c4 08             	add    esp,0x8
c0011e7f:	31 c0                	xor    eax,eax
c0011e81:	5b                   	pop    ebx
c0011e82:	31 d2                	xor    edx,edx
c0011e84:	c3                   	ret    
c0011e85:	83 c4 08             	add    esp,0x8
c0011e88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e8d:	5b                   	pop    ebx
c0011e8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e93:	c3                   	ret    

c0011e94 <SysOpenDir(regs*)>:
c0011e94:	56                   	push   esi
c0011e95:	53                   	push   ebx
c0011e96:	83 ec 04             	sub    esp,0x4
c0011e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e9d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ea0:	85 c9                	test   ecx,ecx
c0011ea2:	74 5d                	je     c0011f01 <SysOpenDir(regs*)+0x6d>
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	68 14 01 00 00       	push   0x114
c0011eac:	e8 22 5c ff ff       	call   c0007ad3 <malloc>
c0011eb1:	83 c4 0c             	add    esp,0xc
c0011eb4:	89 c6                	mov    esi,eax
c0011eb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ebb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ebe:	50                   	push   eax
c0011ebf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ec2:	52                   	push   edx
c0011ec3:	56                   	push   esi
c0011ec4:	e8 8b 9e ff ff       	call   c000bd54 <Directory::Directory(char const*, Process*)>
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	85 f6                	test   esi,esi
c0011ece:	74 31                	je     c0011f01 <SysOpenDir(regs*)+0x6d>
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	56                   	push   esi
c0011ed4:	e8 43 9f ff ff       	call   c000be1c <Directory::open()>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	85 c0                	test   eax,eax
c0011ede:	75 21                	jne    c0011f01 <SysOpenDir(regs*)+0x6d>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	56                   	push   esi
c0011ee4:	e8 b5 72 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011ee9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	89 02                	mov    DWORD PTR [edx],eax
c0011ef1:	c1 f8 1f             	sar    eax,0x1f
c0011ef4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ef7:	83 c4 04             	add    esp,0x4
c0011efa:	31 c0                	xor    eax,eax
c0011efc:	5b                   	pop    ebx
c0011efd:	31 d2                	xor    edx,edx
c0011eff:	5e                   	pop    esi
c0011f00:	c3                   	ret    
c0011f01:	83 c4 04             	add    esp,0x4
c0011f04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f09:	5b                   	pop    ebx
c0011f0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f0f:	5e                   	pop    esi
c0011f10:	c3                   	ret    

c0011f11 <SysMakeDir(regs*)>:
c0011f11:	56                   	push   esi
c0011f12:	53                   	push   ebx
c0011f13:	83 ec 10             	sub    esp,0x10
c0011f16:	68 14 01 00 00       	push   0x114
c0011f1b:	e8 b3 5b ff ff       	call   c0007ad3 <malloc>
c0011f20:	83 c4 0c             	add    esp,0xc
c0011f23:	89 c3                	mov    ebx,eax
c0011f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f2d:	50                   	push   eax
c0011f2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f32:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011f35:	52                   	push   edx
c0011f36:	53                   	push   ebx
c0011f37:	e8 18 9e ff ff       	call   c000bd54 <Directory::Directory(char const*, Process*)>
c0011f3c:	83 c4 10             	add    esp,0x10
c0011f3f:	85 db                	test   ebx,ebx
c0011f41:	74 2c                	je     c0011f6f <SysMakeDir(regs*)+0x5e>
c0011f43:	83 ec 0c             	sub    esp,0xc
c0011f46:	53                   	push   ebx
c0011f47:	e8 b0 a0 ff ff       	call   c000bffc <Directory::create()>
c0011f4c:	89 c6                	mov    esi,eax
c0011f4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f56:	83 c4 10             	add    esp,0x10
c0011f59:	31 c0                	xor    eax,eax
c0011f5b:	85 f6                	test   esi,esi
c0011f5d:	0f 95 c0             	setne  al
c0011f60:	31 d2                	xor    edx,edx
c0011f62:	f7 d8                	neg    eax
c0011f64:	83 d2 00             	adc    edx,0x0
c0011f67:	83 c4 04             	add    esp,0x4
c0011f6a:	5b                   	pop    ebx
c0011f6b:	f7 da                	neg    edx
c0011f6d:	5e                   	pop    esi
c0011f6e:	c3                   	ret    
c0011f6f:	83 c4 04             	add    esp,0x4
c0011f72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f77:	5b                   	pop    ebx
c0011f78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f7d:	5e                   	pop    esi
c0011f7e:	c3                   	ret    

c0011f7f <SysCloseDir(regs*)>:
c0011f7f:	53                   	push   ebx
c0011f80:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f94:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011f97:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011f9d:	77 2a                	ja     c0011fc9 <SysCloseDir(regs*)+0x4a>
c0011f9f:	83 ec 0c             	sub    esp,0xc
c0011fa2:	51                   	push   ecx
c0011fa3:	e8 f3 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fa8:	89 04 24             	mov    DWORD PTR [esp],eax
c0011fab:	89 c3                	mov    ebx,eax
c0011fad:	e8 c6 9e ff ff       	call   c000be78 <Directory::close()>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	85 db                	test   ebx,ebx
c0011fb7:	74 0c                	je     c0011fc5 <SysCloseDir(regs*)+0x46>
c0011fb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fbb:	83 ec 0c             	sub    esp,0xc
c0011fbe:	53                   	push   ebx
c0011fbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fc2:	83 c4 10             	add    esp,0x10
c0011fc5:	31 c0                	xor    eax,eax
c0011fc7:	31 d2                	xor    edx,edx
c0011fc9:	83 c4 08             	add    esp,0x8
c0011fcc:	5b                   	pop    ebx
c0011fcd:	c3                   	ret    

c0011fce <SysWait(regs*)>:
c0011fce:	83 ec 10             	sub    esp,0x10
c0011fd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fd5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011fd8:	52                   	push   edx
c0011fd9:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011fdc:	51                   	push   ecx
c0011fdd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fe0:	50                   	push   eax
c0011fe1:	e8 e2 3d 00 00       	call   c0015dc8 <waitTask(int, int*, int)>
c0011fe6:	83 c4 1c             	add    esp,0x1c
c0011fe9:	89 c2                	mov    edx,eax
c0011feb:	c1 fa 1f             	sar    edx,0x1f
c0011fee:	c3                   	ret    

c0011fef <SysNotImpl(regs*)>:
c0011fef:	83 ec 18             	sub    esp,0x18
c0011ff2:	68 46 1f 02 c0       	push   0xc0021f46
c0011ff7:	e8 95 f2 ff ff       	call   c0011291 <KePanic(char const*)>
c0011ffc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012001:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012006:	83 c4 1c             	add    esp,0x1c
c0012009:	c3                   	ret    

c001200a <SysPanic(regs*)>:
c001200a:	83 ec 18             	sub    esp,0x18
c001200d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012011:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012014:	50                   	push   eax
c0012015:	e8 77 f2 ff ff       	call   c0011291 <KePanic(char const*)>
c001201a:	b8 01 00 00 00       	mov    eax,0x1
c001201f:	31 d2                	xor    edx,edx
c0012021:	83 c4 1c             	add    esp,0x1c
c0012024:	c3                   	ret    

c0012025 <SysRmdir(regs*)>:
c0012025:	56                   	push   esi
c0012026:	53                   	push   ebx
c0012027:	83 ec 10             	sub    esp,0x10
c001202a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001202e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012031:	68 14 01 00 00       	push   0x114
c0012036:	e8 98 5a ff ff       	call   c0007ad3 <malloc>
c001203b:	83 c4 0c             	add    esp,0xc
c001203e:	89 c3                	mov    ebx,eax
c0012040:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012045:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012048:	50                   	push   eax
c0012049:	56                   	push   esi
c001204a:	53                   	push   ebx
c001204b:	e8 7a 97 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0012050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012053:	e8 08 9a ff ff       	call   c000ba60 <File::unlink()>
c0012058:	83 c4 10             	add    esp,0x10
c001205b:	85 db                	test   ebx,ebx
c001205d:	89 c6                	mov    esi,eax
c001205f:	74 0c                	je     c001206d <SysRmdir(regs*)+0x48>
c0012061:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012063:	83 ec 0c             	sub    esp,0xc
c0012066:	53                   	push   ebx
c0012067:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	31 c0                	xor    eax,eax
c001206f:	85 f6                	test   esi,esi
c0012071:	0f 95 c0             	setne  al
c0012074:	31 d2                	xor    edx,edx
c0012076:	f7 d8                	neg    eax
c0012078:	83 d2 00             	adc    edx,0x0
c001207b:	83 c4 04             	add    esp,0x4
c001207e:	5b                   	pop    ebx
c001207f:	f7 da                	neg    edx
c0012081:	5e                   	pop    esi
c0012082:	c3                   	ret    

c0012083 <SysUnlink(regs*)>:
c0012083:	56                   	push   esi
c0012084:	53                   	push   ebx
c0012085:	83 ec 10             	sub    esp,0x10
c0012088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001208c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001208f:	68 14 01 00 00       	push   0x114
c0012094:	e8 3a 5a ff ff       	call   c0007ad3 <malloc>
c0012099:	83 c4 0c             	add    esp,0xc
c001209c:	89 c3                	mov    ebx,eax
c001209e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120a6:	50                   	push   eax
c00120a7:	56                   	push   esi
c00120a8:	53                   	push   ebx
c00120a9:	e8 1c 97 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c00120ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120b1:	e8 aa 99 ff ff       	call   c000ba60 <File::unlink()>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	85 db                	test   ebx,ebx
c00120bb:	89 c6                	mov    esi,eax
c00120bd:	74 0c                	je     c00120cb <SysUnlink(regs*)+0x48>
c00120bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	53                   	push   ebx
c00120c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	31 c0                	xor    eax,eax
c00120cd:	85 f6                	test   esi,esi
c00120cf:	0f 95 c0             	setne  al
c00120d2:	31 d2                	xor    edx,edx
c00120d4:	f7 d8                	neg    eax
c00120d6:	83 d2 00             	adc    edx,0x0
c00120d9:	83 c4 04             	add    esp,0x4
c00120dc:	5b                   	pop    ebx
c00120dd:	f7 da                	neg    edx
c00120df:	5e                   	pop    esi
c00120e0:	c3                   	ret    

c00120e1 <SysGetArgv(regs*)>:
c00120e1:	83 ec 0c             	sub    esp,0xc
c00120e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120e8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00120eb:	85 c0                	test   eax,eax
c00120ed:	78 2c                	js     c001211b <SysGetArgv(regs*)+0x3a>
c00120ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120f5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00120f8:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00120fe:	7d 1b                	jge    c001211b <SysGetArgv(regs*)+0x3a>
c0012100:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012107:	85 c0                	test   eax,eax
c0012109:	74 18                	je     c0012123 <SysGetArgv(regs*)+0x42>
c001210b:	83 ec 08             	sub    esp,0x8
c001210e:	50                   	push   eax
c001210f:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012112:	50                   	push   eax
c0012113:	e8 38 e5 fe ff       	call   c0000650 <strcpy>
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	31 c0                	xor    eax,eax
c001211d:	31 d2                	xor    edx,edx
c001211f:	83 c4 0c             	add    esp,0xc
c0012122:	c3                   	ret    
c0012123:	b8 01 00 00 00       	mov    eax,0x1
c0012128:	31 d2                	xor    edx,edx
c001212a:	83 c4 0c             	add    esp,0xc
c001212d:	c3                   	ret    

c001212e <SysUSleep(regs*)>:
c001212e:	83 ec 1c             	sub    esp,0x1c
c0012131:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012135:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012138:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001213b:	6a 00                	push   0x0
c001213d:	6a 64                	push   0x64
c001213f:	52                   	push   edx
c0012140:	50                   	push   eax
c0012141:	e8 0a d1 00 00       	call   c001f250 <__udivdi3>
c0012146:	83 c4 14             	add    esp,0x14
c0012149:	50                   	push   eax
c001214a:	e8 5d 3d 00 00       	call   c0015eac <milliTenthSleep(unsigned int)>
c001214f:	31 c0                	xor    eax,eax
c0012151:	31 d2                	xor    edx,edx
c0012153:	83 c4 1c             	add    esp,0x1c
c0012156:	c3                   	ret    

c0012157 <SysSpawn(regs*)>:
c0012157:	56                   	push   esi
c0012158:	53                   	push   ebx
c0012159:	83 ec 04             	sub    esp,0x4
c001215c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012160:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012163:	85 f6                	test   esi,esi
c0012165:	75 0a                	jne    c0012171 <SysSpawn(regs*)+0x1a>
c0012167:	83 c4 04             	add    esp,0x4
c001216a:	31 c0                	xor    eax,eax
c001216c:	5b                   	pop    ebx
c001216d:	31 d2                	xor    edx,edx
c001216f:	5e                   	pop    esi
c0012170:	c3                   	ret    
c0012171:	83 ec 0c             	sub    esp,0xc
c0012174:	68 24 07 00 00       	push   0x724
c0012179:	e8 55 59 ff ff       	call   c0007ad3 <malloc>
c001217e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012181:	83 c4 10             	add    esp,0x10
c0012184:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012187:	89 c6                	mov    esi,eax
c0012189:	31 c0                	xor    eax,eax
c001218b:	85 c9                	test   ecx,ecx
c001218d:	75 08                	jne    c0012197 <SysSpawn(regs*)+0x40>
c001218f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012194:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012197:	52                   	push   edx
c0012198:	50                   	push   eax
c0012199:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001219c:	50                   	push   eax
c001219d:	56                   	push   esi
c001219e:	e8 71 33 00 00       	call   c0015514 <Process::Process(char const*, Process*, char**)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00121ad:	75 b8                	jne    c0012167 <SysSpawn(regs*)+0x10>
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	56                   	push   esi
c00121b3:	e8 94 38 00 00       	call   c0015a4c <Process::createUserThread()>
c00121b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00121ba:	83 c4 10             	add    esp,0x10
c00121bd:	83 c4 04             	add    esp,0x4
c00121c0:	5b                   	pop    ebx
c00121c1:	89 c2                	mov    edx,eax
c00121c3:	c1 fa 1f             	sar    edx,0x1f
c00121c6:	5e                   	pop    esi
c00121c7:	c3                   	ret    

c00121c8 <SysGetEnv(regs*)>:
c00121c8:	57                   	push   edi
c00121c9:	56                   	push   esi
c00121ca:	53                   	push   ebx
c00121cb:	83 ec 1c             	sub    esp,0x1c
c00121ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121d3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00121d7:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121da:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121dd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121e0:	51                   	push   ecx
c00121e1:	e8 63 ef ff ff       	call   c0011149 <KeGetProcessTotalEnvCount(Process*)>
c00121e6:	83 c4 10             	add    esp,0x10
c00121e9:	39 c7                	cmp    edi,eax
c00121eb:	7c 12                	jl     c00121ff <SysGetEnv(regs*)+0x37>
c00121ed:	31 c0                	xor    eax,eax
c00121ef:	31 d2                	xor    edx,edx
c00121f1:	85 f6                	test   esi,esi
c00121f3:	74 03                	je     c00121f8 <SysGetEnv(regs*)+0x30>
c00121f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	5b                   	pop    ebx
c00121fc:	5e                   	pop    esi
c00121fd:	5f                   	pop    edi
c00121fe:	c3                   	ret    
c00121ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012203:	83 ec 04             	sub    esp,0x4
c0012206:	57                   	push   edi
c0012207:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001220d:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012210:	57                   	push   edi
c0012211:	50                   	push   eax
c0012212:	e8 52 ef ff ff       	call   c0011169 <KeGetProcessEnvPair(Process*, int)>
c0012217:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001221a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001221e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012222:	83 c4 0c             	add    esp,0xc
c0012225:	85 d2                	test   edx,edx
c0012227:	75 23                	jne    c001224c <SysGetEnv(regs*)+0x84>
c0012229:	83 ec 0c             	sub    esp,0xc
c001222c:	50                   	push   eax
c001222d:	e8 4e e3 fe ff       	call   c0000580 <strlen>
c0012232:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012235:	89 c3                	mov    ebx,eax
c0012237:	e8 44 e3 fe ff       	call   c0000580 <strlen>
c001223c:	83 c4 10             	add    esp,0x10
c001223f:	31 d2                	xor    edx,edx
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012248:	5b                   	pop    ebx
c0012249:	5e                   	pop    esi
c001224a:	5f                   	pop    edi
c001224b:	c3                   	ret    
c001224c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001224f:	83 ec 08             	sub    esp,0x8
c0012252:	50                   	push   eax
c0012253:	56                   	push   esi
c0012254:	e8 f7 e3 fe ff       	call   c0000650 <strcpy>
c0012259:	58                   	pop    eax
c001225a:	5a                   	pop    edx
c001225b:	68 60 1f 02 c0       	push   0xc0021f60
c0012260:	56                   	push   esi
c0012261:	e8 0a e6 fe ff       	call   c0000870 <strcat>
c0012266:	59                   	pop    ecx
c0012267:	5b                   	pop    ebx
c0012268:	57                   	push   edi
c0012269:	56                   	push   esi
c001226a:	e8 01 e6 fe ff       	call   c0000870 <strcat>
c001226f:	83 c4 10             	add    esp,0x10
c0012272:	31 c0                	xor    eax,eax
c0012274:	83 c4 10             	add    esp,0x10
c0012277:	31 d2                	xor    edx,edx
c0012279:	5b                   	pop    ebx
c001227a:	5e                   	pop    esi
c001227b:	5f                   	pop    edi
c001227c:	c3                   	ret    

c001227d <SysSetFatAttrib(regs*)>:
c001227d:	57                   	push   edi
c001227e:	56                   	push   esi
c001227f:	53                   	push   ebx
c0012280:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012284:	83 ec 0c             	sub    esp,0xc
c0012287:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001228a:	68 14 01 00 00       	push   0x114
c001228f:	e8 3f 58 ff ff       	call   c0007ad3 <malloc>
c0012294:	83 c4 0c             	add    esp,0xc
c0012297:	89 c3                	mov    ebx,eax
c0012299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001229e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122a1:	50                   	push   eax
c00122a2:	57                   	push   edi
c00122a3:	53                   	push   ebx
c00122a4:	e8 21 95 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c00122a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00122ac:	83 c4 0c             	add    esp,0xc
c00122af:	0f b6 d4             	movzx  edx,ah
c00122b2:	0f b6 c0             	movzx  eax,al
c00122b5:	52                   	push   edx
c00122b6:	50                   	push   eax
c00122b7:	53                   	push   ebx
c00122b8:	e8 3d 98 ff ff       	call   c000bafa <File::chfatattr(unsigned char, unsigned char)>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	85 db                	test   ebx,ebx
c00122c2:	89 c6                	mov    esi,eax
c00122c4:	74 0c                	je     c00122d2 <SysSetFatAttrib(regs*)+0x55>
c00122c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122c8:	83 ec 0c             	sub    esp,0xc
c00122cb:	53                   	push   ebx
c00122cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	5b                   	pop    ebx
c00122d3:	31 c0                	xor    eax,eax
c00122d5:	85 f6                	test   esi,esi
c00122d7:	0f 95 c0             	setne  al
c00122da:	31 d2                	xor    edx,edx
c00122dc:	5e                   	pop    esi
c00122dd:	f7 d8                	neg    eax
c00122df:	83 d2 00             	adc    edx,0x0
c00122e2:	f7 da                	neg    edx
c00122e4:	5f                   	pop    edi
c00122e5:	c3                   	ret    

c00122e6 <SysPipe(regs*)>:
c00122e6:	57                   	push   edi
c00122e7:	56                   	push   esi
c00122e8:	53                   	push   ebx
c00122e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ed:	83 ec 0c             	sub    esp,0xc
c00122f0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00122f3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00122f6:	6a 20                	push   0x20
c00122f8:	e8 d6 57 ff ff       	call   c0007ad3 <malloc>
c00122fd:	89 c3                	mov    ebx,eax
c00122ff:	58                   	pop    eax
c0012300:	5a                   	pop    edx
c0012301:	68 00 50 00 00       	push   0x5000
c0012306:	53                   	push   ebx
c0012307:	e8 32 61 ff ff       	call   c000843e <Pipe::Pipe(int)>
c001230c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001230f:	e8 8a 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012314:	89 07                	mov    DWORD PTR [edi],eax
c0012316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012319:	e8 80 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001231e:	83 c4 10             	add    esp,0x10
c0012321:	31 d2                	xor    edx,edx
c0012323:	89 06                	mov    DWORD PTR [esi],eax
c0012325:	31 c0                	xor    eax,eax
c0012327:	5b                   	pop    ebx
c0012328:	5e                   	pop    esi
c0012329:	5f                   	pop    edi
c001232a:	c3                   	ret    

c001232b <SysGetUnixTime(regs*)>:
c001232b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012330:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012336:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001233a:	e9 03 9f ff ff       	jmp    c000c242 <Clock::timeInSecondsLocal()>

c001233f <string_ends_with(char const*, char const*)>:
c001233f:	57                   	push   edi
c0012340:	56                   	push   esi
c0012341:	53                   	push   ebx
c0012342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001234d:	53                   	push   ebx
c001234e:	e8 2d e2 fe ff       	call   c0000580 <strlen>
c0012353:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012356:	89 c6                	mov    esi,eax
c0012358:	e8 23 e2 fe ff       	call   c0000580 <strlen>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	31 d2                	xor    edx,edx
c0012362:	39 c6                	cmp    esi,eax
c0012364:	7d 06                	jge    c001236c <string_ends_with(char const*, char const*)+0x2d>
c0012366:	5b                   	pop    ebx
c0012367:	89 d0                	mov    eax,edx
c0012369:	5e                   	pop    esi
c001236a:	5f                   	pop    edi
c001236b:	c3                   	ret    
c001236c:	83 ec 08             	sub    esp,0x8
c001236f:	29 c6                	sub    esi,eax
c0012371:	57                   	push   edi
c0012372:	01 f3                	add    ebx,esi
c0012374:	53                   	push   ebx
c0012375:	e8 06 e4 fe ff       	call   c0000780 <strcmp>
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	31 d2                	xor    edx,edx
c001237f:	5b                   	pop    ebx
c0012380:	5e                   	pop    esi
c0012381:	85 c0                	test   eax,eax
c0012383:	5f                   	pop    edi
c0012384:	0f 94 c2             	sete   dl
c0012387:	89 d0                	mov    eax,edx
c0012389:	c3                   	ret    

c001238a <SysOpen(regs*)>:
c001238a:	56                   	push   esi
c001238b:	53                   	push   ebx
c001238c:	81 ec 04 01 00 00    	sub    esp,0x104
c0012392:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001239c:	85 c0                	test   eax,eax
c001239e:	0f 84 c4 01 00 00    	je     c0012568 <SysOpen(regs*)+0x1de>
c00123a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123a7:	85 c0                	test   eax,eax
c00123a9:	0f 84 b9 01 00 00    	je     c0012568 <SysOpen(regs*)+0x1de>
c00123af:	6a 00                	push   0x0
c00123b1:	68 62 1f 02 c0       	push   0xc0021f62
c00123b6:	50                   	push   eax
c00123b7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00123bb:	56                   	push   esi
c00123bc:	e8 eb 91 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00123c4:	e8 b7 e1 fe ff       	call   c0000580 <strlen>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	83 e8 01             	sub    eax,0x1
c00123cf:	74 29                	je     c00123fa <SysOpen(regs*)+0x70>
c00123d1:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00123d5:	83 fa 2e             	cmp    edx,0x2e
c00123d8:	74 1c                	je     c00123f6 <SysOpen(regs*)+0x6c>
c00123da:	83 fa 3a             	cmp    edx,0x3a
c00123dd:	74 17                	je     c00123f6 <SysOpen(regs*)+0x6c>
c00123df:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00123e3:	83 e8 01             	sub    eax,0x1
c00123e6:	74 12                	je     c00123fa <SysOpen(regs*)+0x70>
c00123e8:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00123ec:	83 fa 3a             	cmp    edx,0x3a
c00123ef:	74 05                	je     c00123f6 <SysOpen(regs*)+0x6c>
c00123f1:	83 fa 2e             	cmp    edx,0x2e
c00123f4:	75 e9                	jne    c00123df <SysOpen(regs*)+0x55>
c00123f6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00123fa:	83 ec 08             	sub    esp,0x8
c00123fd:	68 66 1f 02 c0       	push   0xc0021f66
c0012402:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012405:	50                   	push   eax
c0012406:	e8 34 ff ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	85 c0                	test   eax,eax
c0012410:	74 1d                	je     c001242f <SysOpen(regs*)+0xa5>
c0012412:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012415:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001241b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012422:	81 c4 04 01 00 00    	add    esp,0x104
c0012428:	31 c0                	xor    eax,eax
c001242a:	5b                   	pop    ebx
c001242b:	31 d2                	xor    edx,edx
c001242d:	5e                   	pop    esi
c001242e:	c3                   	ret    
c001242f:	83 ec 08             	sub    esp,0x8
c0012432:	68 6b 1f 02 c0       	push   0xc0021f6b
c0012437:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001243a:	50                   	push   eax
c001243b:	e8 ff fe ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	85 c0                	test   eax,eax
c0012445:	75 cb                	jne    c0012412 <SysOpen(regs*)+0x88>
c0012447:	83 ec 08             	sub    esp,0x8
c001244a:	68 67 1f 02 c0       	push   0xc0021f67
c001244f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012452:	50                   	push   eax
c0012453:	e8 28 e3 fe ff       	call   c0000780 <strcmp>
c0012458:	83 c4 10             	add    esp,0x10
c001245b:	85 c0                	test   eax,eax
c001245d:	74 b3                	je     c0012412 <SysOpen(regs*)+0x88>
c001245f:	83 ec 08             	sub    esp,0x8
c0012462:	68 66 1f 02 c0       	push   0xc0021f66
c0012467:	56                   	push   esi
c0012468:	e8 d2 fe ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	85 c0                	test   eax,eax
c0012472:	75 9e                	jne    c0012412 <SysOpen(regs*)+0x88>
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	68 70 1f 02 c0       	push   0xc0021f70
c001247c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001247f:	50                   	push   eax
c0012480:	e8 ba fe ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	85 c0                	test   eax,eax
c001248a:	0f 85 eb 00 00 00    	jne    c001257b <SysOpen(regs*)+0x1f1>
c0012490:	83 ec 08             	sub    esp,0x8
c0012493:	68 75 1f 02 c0       	push   0xc0021f75
c0012498:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001249b:	50                   	push   eax
c001249c:	e8 9e fe ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	85 c0                	test   eax,eax
c00124a6:	0f 85 cf 00 00 00    	jne    c001257b <SysOpen(regs*)+0x1f1>
c00124ac:	83 ec 08             	sub    esp,0x8
c00124af:	68 71 1f 02 c0       	push   0xc0021f71
c00124b4:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00124b7:	51                   	push   ecx
c00124b8:	e8 c3 e2 fe ff       	call   c0000780 <strcmp>
c00124bd:	83 c4 10             	add    esp,0x10
c00124c0:	85 c0                	test   eax,eax
c00124c2:	0f 84 b3 00 00 00    	je     c001257b <SysOpen(regs*)+0x1f1>
c00124c8:	83 ec 08             	sub    esp,0x8
c00124cb:	68 70 1f 02 c0       	push   0xc0021f70
c00124d0:	56                   	push   esi
c00124d1:	e8 69 fe ff ff       	call   c001233f <string_ends_with(char const*, char const*)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	85 c0                	test   eax,eax
c00124db:	0f 85 9a 00 00 00    	jne    c001257b <SysOpen(regs*)+0x1f1>
c00124e1:	83 ec 0c             	sub    esp,0xc
c00124e4:	68 14 01 00 00       	push   0x114
c00124e9:	e8 e5 55 ff ff       	call   c0007ad3 <malloc>
c00124ee:	83 c4 0c             	add    esp,0xc
c00124f1:	89 c6                	mov    esi,eax
c00124f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124fb:	50                   	push   eax
c00124fc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124ff:	52                   	push   edx
c0012500:	56                   	push   esi
c0012501:	e8 c4 92 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	85 f6                	test   esi,esi
c001250b:	74 5b                	je     c0012568 <SysOpen(regs*)+0x1de>
c001250d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012510:	0f b6 c2             	movzx  eax,dl
c0012513:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012516:	89 d0                	mov    eax,edx
c0012518:	83 e0 01             	and    eax,0x1
c001251b:	f6 c2 02             	test   dl,0x2
c001251e:	74 03                	je     c0012523 <SysOpen(regs*)+0x199>
c0012520:	83 c8 02             	or     eax,0x2
c0012523:	f6 c2 04             	test   dl,0x4
c0012526:	74 03                	je     c001252b <SysOpen(regs*)+0x1a1>
c0012528:	83 c8 04             	or     eax,0x4
c001252b:	f6 c2 08             	test   dl,0x8
c001252e:	74 03                	je     c0012533 <SysOpen(regs*)+0x1a9>
c0012530:	83 c8 0a             	or     eax,0xa
c0012533:	80 e2 10             	and    dl,0x10
c0012536:	74 03                	je     c001253b <SysOpen(regs*)+0x1b1>
c0012538:	83 c8 12             	or     eax,0x12
c001253b:	83 ec 08             	sub    esp,0x8
c001253e:	50                   	push   eax
c001253f:	56                   	push   esi
c0012540:	e8 4d 93 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	85 c0                	test   eax,eax
c001254a:	75 1c                	jne    c0012568 <SysOpen(regs*)+0x1de>
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	56                   	push   esi
c0012550:	e8 49 6c ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012555:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	89 02                	mov    DWORD PTR [edx],eax
c001255d:	c1 f8 1f             	sar    eax,0x1f
c0012560:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012563:	e9 ba fe ff ff       	jmp    c0012422 <SysOpen(regs*)+0x98>
c0012568:	81 c4 04 01 00 00    	add    esp,0x104
c001256e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012573:	5b                   	pop    ebx
c0012574:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012579:	5e                   	pop    esi
c001257a:	c3                   	ret    
c001257b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001257e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012584:	e9 92 fe ff ff       	jmp    c001241b <SysOpen(regs*)+0x91>

c0012589 <KeSystemCall(regs*, void*)>:
c0012589:	53                   	push   ebx
c001258a:	83 ec 08             	sub    esp,0x8
c001258d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012591:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012594:	83 f8 3b             	cmp    eax,0x3b
c0012597:	77 16                	ja     c00125af <KeSystemCall(regs*, void*)+0x26>
c0012599:	8b 14 85 80 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc80]
c00125a0:	85 d2                	test   edx,edx
c00125a2:	74 0b                	je     c00125af <KeSystemCall(regs*, void*)+0x26>
c00125a4:	83 ec 0c             	sub    esp,0xc
c00125a7:	53                   	push   ebx
c00125a8:	ff d2                	call   edx
c00125aa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00125ad:	eb 0d                	jmp    c00125bc <KeSystemCall(regs*, void*)+0x33>
c00125af:	52                   	push   edx
c00125b0:	52                   	push   edx
c00125b1:	50                   	push   eax
c00125b2:	68 7a 1f 02 c0       	push   0xc0021f7a
c00125b7:	e8 4e 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00125c4:	83 c4 08             	add    esp,0x8
c00125c7:	31 d2                	xor    edx,edx
c00125c9:	5b                   	pop    ebx
c00125ca:	c3                   	ret    
c00125cb:	90                   	nop

c00125cc <KeSwitchEndian16(unsigned short)>:
c00125cc:	83 ec 04             	sub    esp,0x4
c00125cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00125d7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125db:	c1 f8 08             	sar    eax,0x8
c00125de:	89 c2                	mov    edx,eax
c00125e0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125e4:	c1 e0 08             	shl    eax,0x8
c00125e7:	09 d0                	or     eax,edx
c00125e9:	83 c4 04             	add    esp,0x4
c00125ec:	c3                   	ret    
c00125ed:	8d 76 00             	lea    esi,[esi+0x0]

c00125f0 <KeSwitchEndian32(unsigned int)>:
c00125f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f4:	c1 e8 18             	shr    eax,0x18
c00125f7:	89 c2                	mov    edx,eax
c00125f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125fd:	c1 e0 08             	shl    eax,0x8
c0012600:	25 00 00 ff 00       	and    eax,0xff0000
c0012605:	09 c2                	or     edx,eax
c0012607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001260b:	c1 e8 08             	shr    eax,0x8
c001260e:	25 00 ff 00 00       	and    eax,0xff00
c0012613:	09 c2                	or     edx,eax
c0012615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012619:	c1 e0 18             	shl    eax,0x18
c001261c:	09 d0                	or     eax,edx
c001261e:	c3                   	ret    
c001261f:	90                   	nop

c0012620 <EthernetCRC32(unsigned char*, int)>:
c0012620:	83 ec 10             	sub    esp,0x10
c0012623:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012628:	75 0a                	jne    c0012634 <EthernetCRC32(unsigned char*, int)+0x14>
c001262a:	b8 00 00 00 00       	mov    eax,0x0
c001262f:	e9 8c 00 00 00       	jmp    c00126c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012634:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012639:	7f 09                	jg     c0012644 <EthernetCRC32(unsigned char*, int)+0x24>
c001263b:	b8 00 00 00 00       	mov    eax,0x0
c0012640:	eb 7e                	jmp    c00126c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012642:	66 90                	xchg   ax,ax
c0012644:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001264c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012658:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001265c:	7d 5a                	jge    c00126b8 <EthernetCRC32(unsigned char*, int)+0x98>
c001265e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012666:	01 d0                	add    eax,edx
c0012668:	8a 00                	mov    al,BYTE PTR [eax]
c001266a:	0f b6 c0             	movzx  eax,al
c001266d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012671:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012679:	8d 76 00             	lea    esi,[esi+0x0]
c001267c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012681:	7f 2d                	jg     c00126b0 <EthernetCRC32(unsigned char*, int)+0x90>
c0012683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012687:	83 e0 01             	and    eax,0x1
c001268a:	74 10                	je     c001269c <EthernetCRC32(unsigned char*, int)+0x7c>
c001268c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012690:	d1 e8                	shr    eax,1
c0012692:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012697:	eb 0b                	jmp    c00126a4 <EthernetCRC32(unsigned char*, int)+0x84>
c0012699:	8d 76 00             	lea    esi,[esi+0x0]
c001269c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a0:	d1 e8                	shr    eax,1
c00126a2:	66 90                	xchg   ax,ax
c00126a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00126ad:	eb cd                	jmp    c001267c <EthernetCRC32(unsigned char*, int)+0x5c>
c00126af:	90                   	nop
c00126b0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00126b5:	eb 9d                	jmp    c0012654 <EthernetCRC32(unsigned char*, int)+0x34>
c00126b7:	90                   	nop
c00126b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126bc:	f7 d0                	not    eax
c00126be:	66 90                	xchg   ax,ax
c00126c0:	83 c4 10             	add    esp,0x10
c00126c3:	c3                   	ret    

c00126c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00126c4:	83 ec 2c             	sub    esp,0x2c
c00126c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00126d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126df:	0f b7 c0             	movzx  eax,ax
c00126e2:	3d 06 08 00 00       	cmp    eax,0x806
c00126e7:	75 13                	jne    c00126fc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00126e9:	83 ec 0c             	sub    esp,0xc
c00126ec:	68 8e 1f 02 c0       	push   0xc0021f8e
c00126f1:	e8 14 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00126f6:	83 c4 10             	add    esp,0x10
c00126f9:	eb 25                	jmp    c0012720 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126fb:	90                   	nop
c00126fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012700:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012703:	0f b7 c0             	movzx  eax,ax
c0012706:	3d 00 08 00 00       	cmp    eax,0x800
c001270b:	75 13                	jne    c0012720 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001270d:	83 ec 0c             	sub    esp,0xc
c0012710:	68 a4 1f 02 c0       	push   0xc0021fa4
c0012715:	e8 f0 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001271a:	83 c4 10             	add    esp,0x10
c001271d:	8d 76 00             	lea    esi,[esi+0x0]
c0012720:	90                   	nop
c0012721:	83 c4 2c             	add    esp,0x2c
c0012724:	c3                   	ret    

c0012725 <CmOpen(char const*)>:
c0012725:	57                   	push   edi
c0012726:	56                   	push   esi
c0012727:	53                   	push   ebx
c0012728:	83 ec 1c             	sub    esp,0x1c
c001272b:	6a 30                	push   0x30
c001272d:	e8 a1 53 ff ff       	call   c0007ad3 <malloc>
c0012732:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012739:	89 c3                	mov    ebx,eax
c001273b:	e8 93 53 ff ff       	call   c0007ad3 <malloc>
c0012740:	83 c4 0c             	add    esp,0xc
c0012743:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001274d:	89 c6                	mov    esi,eax
c001274f:	50                   	push   eax
c0012750:	e8 75 90 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0012755:	83 c4 0c             	add    esp,0xc
c0012758:	89 33                	mov    DWORD PTR [ebx],esi
c001275a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001275e:	50                   	push   eax
c001275f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012763:	50                   	push   eax
c0012764:	56                   	push   esi
c0012765:	e8 2a 94 ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c001276a:	5a                   	pop    edx
c001276b:	59                   	pop    ecx
c001276c:	6a 01                	push   0x1
c001276e:	ff 33                	push   DWORD PTR [ebx]
c0012770:	e8 1d 91 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0012775:	5e                   	pop    esi
c0012776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001277a:	e8 54 53 ff ff       	call   c0007ad3 <malloc>
c001277f:	5a                   	pop    edx
c0012780:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012784:	89 c7                	mov    edi,eax
c0012786:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012788:	8b 10                	mov    edx,DWORD PTR [eax]
c001278a:	56                   	push   esi
c001278b:	57                   	push   edi
c001278c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012790:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012794:	50                   	push   eax
c0012795:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012798:	83 c4 14             	add    esp,0x14
c001279b:	ff 33                	push   DWORD PTR [ebx]
c001279d:	e8 4e 91 ff ff       	call   c000b8f0 <File::close()>
c00127a2:	59                   	pop    ecx
c00127a3:	58                   	pop    eax
c00127a4:	6a 13                	push   0x13
c00127a6:	ff 33                	push   DWORD PTR [ebx]
c00127a8:	e8 e5 90 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c00127ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127af:	8b 10                	mov    edx,DWORD PTR [eax]
c00127b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00127b4:	57                   	push   edi
c00127b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127bd:	50                   	push   eax
c00127be:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00127c1:	83 c4 14             	add    esp,0x14
c00127c4:	57                   	push   edi
c00127c5:	e8 19 53 ff ff       	call   c0007ae3 <free>
c00127ca:	83 c4 10             	add    esp,0x10
c00127cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00127d0:	75 10                	jne    c00127e2 <CmOpen(char const*)+0xbd>
c00127d2:	83 ec 0c             	sub    esp,0xc
c00127d5:	68 b9 1f 02 c0       	push   0xc0021fb9
c00127da:	e8 b2 ea ff ff       	call   c0011291 <KePanic(char const*)>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	50                   	push   eax
c00127e3:	6a 00                	push   0x0
c00127e5:	6a 00                	push   0x0
c00127e7:	ff 33                	push   DWORD PTR [ebx]
c00127e9:	8d 7b 05             	lea    edi,[ebx+0x5]
c00127ec:	e8 5f 91 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c00127f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00127f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00127f8:	57                   	push   edi
c00127f9:	6a 00                	push   0x0
c00127fb:	6a 2b                	push   0x2b
c00127fd:	50                   	push   eax
c00127fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012801:	83 c4 1c             	add    esp,0x1c
c0012804:	6a 00                	push   0x0
c0012806:	6a 00                	push   0x0
c0012808:	ff 33                	push   DWORD PTR [ebx]
c001280a:	e8 41 91 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c001280f:	83 c4 0c             	add    esp,0xc
c0012812:	6a 08                	push   0x8
c0012814:	68 ca 1f 02 c0       	push   0xc0021fca
c0012819:	57                   	push   edi
c001281a:	e8 61 db fe ff       	call   c0000380 <memcmp>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	85 c0                	test   eax,eax
c0012824:	74 10                	je     c0012836 <CmOpen(char const*)+0x111>
c0012826:	83 ec 0c             	sub    esp,0xc
c0012829:	68 d3 1f 02 c0       	push   0xc0021fd3
c001282e:	e8 5e ea ff ff       	call   c0011291 <KePanic(char const*)>
c0012833:	83 c4 10             	add    esp,0x10
c0012836:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001283a:	83 c4 10             	add    esp,0x10
c001283d:	89 d8                	mov    eax,ebx
c001283f:	5b                   	pop    ebx
c0012840:	5e                   	pop    esi
c0012841:	5f                   	pop    edi
c0012842:	c3                   	ret    

c0012843 <CmClose(Reghive_Tag*)>:
c0012843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012847:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001284b:	74 0b                	je     c0012858 <CmClose(Reghive_Tag*)+0x15>
c001284d:	8b 00                	mov    eax,DWORD PTR [eax]
c001284f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012853:	e9 98 90 ff ff       	jmp    c000b8f0 <File::close()>
c0012858:	c3                   	ret    

c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012859:	53                   	push   ebx
c001285a:	83 ec 18             	sub    esp,0x18
c001285d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012861:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012865:	74 29                	je     c0012890 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012867:	50                   	push   eax
c0012868:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001286d:	99                   	cdq    
c001286e:	52                   	push   edx
c001286f:	50                   	push   eax
c0012870:	ff 33                	push   DWORD PTR [ebx]
c0012872:	e8 d9 90 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0012877:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012879:	5a                   	pop    edx
c001287a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001287e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012880:	51                   	push   ecx
c0012881:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012885:	6a 00                	push   0x0
c0012887:	6a 2b                	push   0x2b
c0012889:	50                   	push   eax
c001288a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001288d:	83 c4 20             	add    esp,0x20
c0012890:	83 c4 18             	add    esp,0x18
c0012893:	5b                   	pop    ebx
c0012894:	c3                   	ret    

c0012895 <CmGetString(Reghive_Tag*, int, char*)>:
c0012895:	55                   	push   ebp
c0012896:	57                   	push   edi
c0012897:	56                   	push   esi
c0012898:	53                   	push   ebx
c0012899:	31 db                	xor    ebx,ebx
c001289b:	83 ec 70             	sub    esp,0x70
c001289e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00128a2:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00128a9:	50                   	push   eax
c00128aa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00128b1:	55                   	push   ebp
c00128b2:	e8 a2 ff ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00128bf:	c1 e0 08             	shl    eax,0x8
c00128c2:	89 c2                	mov    edx,eax
c00128c4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00128c9:	09 d0                	or     eax,edx
c00128cb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00128d0:	c1 e0 08             	shl    eax,0x8
c00128d3:	09 d0                	or     eax,edx
c00128d5:	74 25                	je     c00128fc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00128d7:	52                   	push   edx
c00128d8:	8d 54 24 39          	lea    edx,[esp+0x39]
c00128dc:	52                   	push   edx
c00128dd:	6b fb 0d             	imul   edi,ebx,0xd
c00128e0:	50                   	push   eax
c00128e1:	55                   	push   ebp
c00128e2:	e8 72 ff ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128e7:	8d 74 24 49          	lea    esi,[esp+0x49]
c00128eb:	b9 27 00 00 00       	mov    ecx,0x27
c00128f0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00128f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	83 c3 03             	add    ebx,0x3
c00128ff:	83 fb 15             	cmp    ebx,0x15
c0012902:	75 b6                	jne    c00128ba <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012904:	83 c4 6c             	add    esp,0x6c
c0012907:	5b                   	pop    ebx
c0012908:	5e                   	pop    esi
c0012909:	5f                   	pop    edi
c001290a:	5d                   	pop    ebp
c001290b:	c3                   	ret    

c001290c <CmEnterDirectory(Reghive_Tag*, int)>:
c001290c:	83 ec 40             	sub    esp,0x40
c001290f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012913:	50                   	push   eax
c0012914:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012918:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001291c:	e8 38 ff ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	83 c8 ff             	or     eax,0xffffffff
c0012927:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001292c:	75 19                	jne    c0012947 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001292e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012933:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012938:	c1 e0 08             	shl    eax,0x8
c001293b:	09 c2                	or     edx,eax
c001293d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012942:	c1 e0 10             	shl    eax,0x10
c0012945:	09 d0                	or     eax,edx
c0012947:	83 c4 3c             	add    esp,0x3c
c001294a:	c3                   	ret    

c001294b <CmGetNext(Reghive_Tag*, int)>:
c001294b:	83 ec 40             	sub    esp,0x40
c001294e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012952:	50                   	push   eax
c0012953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012957:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001295b:	e8 f9 fe ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012960:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012965:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001296a:	c1 e0 08             	shl    eax,0x8
c001296d:	09 c2                	or     edx,eax
c001296f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012974:	83 c4 4c             	add    esp,0x4c
c0012977:	c1 e0 10             	shl    eax,0x10
c001297a:	09 d0                	or     eax,edx
c001297c:	c3                   	ret    

c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001297d:	53                   	push   ebx
c001297e:	83 ec 18             	sub    esp,0x18
c0012981:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012985:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012989:	74 29                	je     c00129b4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001298b:	50                   	push   eax
c001298c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012991:	99                   	cdq    
c0012992:	52                   	push   edx
c0012993:	50                   	push   eax
c0012994:	ff 33                	push   DWORD PTR [ebx]
c0012996:	e8 b5 8f ff ff       	call   c000b950 <File::seek(unsigned long long)>
c001299b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001299d:	5a                   	pop    edx
c001299e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00129a4:	51                   	push   ecx
c00129a5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00129a9:	6a 00                	push   0x0
c00129ab:	6a 2b                	push   0x2b
c00129ad:	50                   	push   eax
c00129ae:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00129b1:	83 c4 20             	add    esp,0x20
c00129b4:	83 c4 18             	add    esp,0x18
c00129b7:	5b                   	pop    ebx
c00129b8:	c3                   	ret    

c00129b9 <CmFreeExtent(Reghive_Tag*, int)>:
c00129b9:	53                   	push   ebx
c00129ba:	83 ec 3c             	sub    esp,0x3c
c00129bd:	6a 2b                	push   0x2b
c00129bf:	6a 00                	push   0x0
c00129c1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00129c5:	53                   	push   ebx
c00129c6:	e8 25 db fe ff       	call   c00004f0 <memset>
c00129cb:	83 c4 0c             	add    esp,0xc
c00129ce:	53                   	push   ebx
c00129cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129d7:	e8 a1 ff ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129dc:	83 c4 48             	add    esp,0x48
c00129df:	5b                   	pop    ebx
c00129e0:	c3                   	ret    

c00129e1 <CmUpdateHeader(Reghive_Tag*)>:
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129ec:	74 10                	je     c00129fe <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00129ee:	52                   	push   edx
c00129ef:	8d 50 05             	lea    edx,[eax+0x5]
c00129f2:	52                   	push   edx
c00129f3:	6a 00                	push   0x0
c00129f5:	50                   	push   eax
c00129f6:	e8 82 ff ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	83 c4 0c             	add    esp,0xc
c0012a01:	c3                   	ret    

c0012a02 <CmExpand(Reghive_Tag*, int)>:
c0012a02:	55                   	push   ebp
c0012a03:	57                   	push   edi
c0012a04:	83 cf ff             	or     edi,0xffffffff
c0012a07:	56                   	push   esi
c0012a08:	53                   	push   ebx
c0012a09:	83 ec 3c             	sub    esp,0x3c
c0012a0c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a10:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a14:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a18:	74 59                	je     c0012a73 <CmExpand(Reghive_Tag*, int)+0x71>
c0012a1a:	50                   	push   eax
c0012a1b:	31 d2                	xor    edx,edx
c0012a1d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012a21:	31 ff                	xor    edi,edi
c0012a23:	52                   	push   edx
c0012a24:	50                   	push   eax
c0012a25:	ff 33                	push   DWORD PTR [ebx]
c0012a27:	e8 24 8f ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0012a2c:	83 c4 0c             	add    esp,0xc
c0012a2f:	6a 2b                	push   0x2b
c0012a31:	6a 00                	push   0x0
c0012a33:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012a37:	55                   	push   ebp
c0012a38:	e8 b3 da fe ff       	call   c00004f0 <memset>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	39 f7                	cmp    edi,esi
c0012a42:	7d 1b                	jge    c0012a5f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012a44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a46:	83 ec 0c             	sub    esp,0xc
c0012a49:	47                   	inc    edi
c0012a4a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a50:	51                   	push   ecx
c0012a51:	55                   	push   ebp
c0012a52:	6a 00                	push   0x0
c0012a54:	6a 2b                	push   0x2b
c0012a56:	50                   	push   eax
c0012a57:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a5a:	83 c4 20             	add    esp,0x20
c0012a5d:	eb e1                	jmp    c0012a40 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012a5f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	01 fe                	add    esi,edi
c0012a67:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012a6a:	53                   	push   ebx
c0012a6b:	e8 71 ff ff ff       	call   c00129e1 <CmUpdateHeader(Reghive_Tag*)>
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	83 c4 3c             	add    esp,0x3c
c0012a76:	89 f8                	mov    eax,edi
c0012a78:	5b                   	pop    ebx
c0012a79:	5e                   	pop    esi
c0012a7a:	5f                   	pop    edi
c0012a7b:	5d                   	pop    ebp
c0012a7c:	c3                   	ret    

c0012a7d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012a7d:	55                   	push   ebp
c0012a7e:	57                   	push   edi
c0012a7f:	56                   	push   esi
c0012a80:	53                   	push   ebx
c0012a81:	83 cb ff             	or     ebx,0xffffffff
c0012a84:	83 ec 1c             	sub    esp,0x1c
c0012a87:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a8b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012a8f:	74 68                	je     c0012af9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a91:	51                   	push   ecx
c0012a92:	be 2b 00 00 00       	mov    esi,0x2b
c0012a97:	6a 00                	push   0x0
c0012a99:	31 ff                	xor    edi,edi
c0012a9b:	6a 00                	push   0x0
c0012a9d:	31 db                	xor    ebx,ebx
c0012a9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012aa2:	e8 a9 8e ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012aad:	76 3b                	jbe    c0012aea <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012aaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ab2:	83 ec 0c             	sub    esp,0xc
c0012ab5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ab9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012abb:	51                   	push   ecx
c0012abc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ac0:	51                   	push   ecx
c0012ac1:	6a 00                	push   0x0
c0012ac3:	6a 01                	push   0x1
c0012ac5:	50                   	push   eax
c0012ac6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ac9:	83 c4 20             	add    esp,0x20
c0012acc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ad1:	74 26                	je     c0012af9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ad3:	52                   	push   edx
c0012ad4:	43                   	inc    ebx
c0012ad5:	57                   	push   edi
c0012ad6:	56                   	push   esi
c0012ad7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ada:	e8 71 8e ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0012adf:	83 c6 2b             	add    esi,0x2b
c0012ae2:	83 d7 00             	adc    edi,0x0
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	eb c0                	jmp    c0012aaa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012aea:	50                   	push   eax
c0012aeb:	50                   	push   eax
c0012aec:	6a 40                	push   0x40
c0012aee:	55                   	push   ebp
c0012aef:	e8 0e ff ff ff       	call   c0012a02 <CmExpand(Reghive_Tag*, int)>
c0012af4:	83 c4 10             	add    esp,0x10
c0012af7:	89 c3                	mov    ebx,eax
c0012af9:	83 c4 1c             	add    esp,0x1c
c0012afc:	89 d8                	mov    eax,ebx
c0012afe:	5b                   	pop    ebx
c0012aff:	5e                   	pop    esi
c0012b00:	5f                   	pop    edi
c0012b01:	5d                   	pop    ebp
c0012b02:	c3                   	ret    

c0012b03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012b03:	55                   	push   ebp
c0012b04:	57                   	push   edi
c0012b05:	56                   	push   esi
c0012b06:	53                   	push   ebx
c0012b07:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b0d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012b14:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b1b:	e8 5d ff ff ff       	call   c0012a7d <CmFindUnusedExtent(Reghive_Tag*)>
c0012b20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b24:	83 c4 0c             	add    esp,0xc
c0012b27:	6a 2b                	push   0x2b
c0012b29:	6a 00                	push   0x0
c0012b2b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012b2f:	55                   	push   ebp
c0012b30:	e8 bb d9 fe ff       	call   c00004f0 <memset>
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	85 db                	test   ebx,ebx
c0012b3a:	74 12                	je     c0012b4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b3c:	51                   	push   ecx
c0012b3d:	55                   	push   ebp
c0012b3e:	53                   	push   ebx
c0012b3f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b46:	e8 0e fd ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012b52:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b59:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012b5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b60:	85 db                	test   ebx,ebx
c0012b62:	74 49                	je     c0012bad <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012b64:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012b69:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012b6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b72:	c1 e0 08             	shl    eax,0x8
c0012b75:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012b7b:	09 c8                	or     eax,ecx
c0012b7d:	74 11                	je     c0012b90 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012b7f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b83:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012b87:	c1 e8 10             	shr    eax,0x10
c0012b8a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012b8e:	eb 0f                	jmp    c0012b9f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012b90:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b95:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b9a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b9f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ba3:	c1 ea 08             	shr    edx,0x8
c0012ba6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012bab:	eb 0f                	jmp    c0012bbc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012bad:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012bb2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012bb7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012bbc:	52                   	push   edx
c0012bbd:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012bc1:	50                   	push   eax
c0012bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bc6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bcd:	e8 ab fd ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bd2:	83 c4 10             	add    esp,0x10
c0012bd5:	85 db                	test   ebx,ebx
c0012bd7:	74 12                	je     c0012beb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012bd9:	50                   	push   eax
c0012bda:	55                   	push   ebp
c0012bdb:	53                   	push   ebx
c0012bdc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012be3:	e8 95 fd ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012be8:	83 c4 10             	add    esp,0x10
c0012beb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bef:	83 c4 7c             	add    esp,0x7c
c0012bf2:	5b                   	pop    ebx
c0012bf3:	5e                   	pop    esi
c0012bf4:	5f                   	pop    edi
c0012bf5:	5d                   	pop    ebp
c0012bf6:	c3                   	ret    

c0012bf7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012bf7:	55                   	push   ebp
c0012bf8:	57                   	push   edi
c0012bf9:	56                   	push   esi
c0012bfa:	53                   	push   ebx
c0012bfb:	bb 27 00 00 00       	mov    ebx,0x27
c0012c00:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c06:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012c0d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012c14:	e8 67 d9 fe ff       	call   c0000580 <strlen>
c0012c19:	8d 48 26             	lea    ecx,[eax+0x26]
c0012c1c:	89 c8                	mov    eax,ecx
c0012c1e:	99                   	cdq    
c0012c1f:	f7 fb                	idiv   ebx
c0012c21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c25:	83 c4 10             	add    esp,0x10
c0012c28:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012c2e:	7e 10                	jle    c0012c40 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	68 e4 1f 02 c0       	push   0xc0021fe4
c0012c38:	e8 54 e6 ff ff       	call   c0011291 <KePanic(char const*)>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	53                   	push   ebx
c0012c41:	31 ed                	xor    ebp,ebp
c0012c43:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c47:	53                   	push   ebx
c0012c48:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c4f:	57                   	push   edi
c0012c50:	e8 04 fc ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012c5c:	89 f0                	mov    eax,esi
c0012c5e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012c62:	c1 e0 08             	shl    eax,0x8
c0012c65:	09 c6                	or     esi,eax
c0012c67:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012c6b:	c1 e6 08             	shl    esi,0x8
c0012c6e:	09 c6                	or     esi,eax
c0012c70:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012c74:	7e 72                	jle    c0012ce8 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012c76:	85 f6                	test   esi,esi
c0012c78:	75 25                	jne    c0012c9f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012c7a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012c7f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012c83:	50                   	push   eax
c0012c84:	6a 00                	push   0x0
c0012c86:	6a 00                	push   0x0
c0012c88:	57                   	push   edi
c0012c89:	e8 75 fe ff ff       	call   c0012b03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c94:	89 c6                	mov    esi,eax
c0012c96:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c99:	c1 f8 10             	sar    eax,0x10
c0012c9c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c9f:	51                   	push   ecx
c0012ca0:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012ca4:	52                   	push   edx
c0012ca5:	56                   	push   esi
c0012ca6:	57                   	push   edi
c0012ca7:	e8 ad fb ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cac:	83 c4 0c             	add    esp,0xc
c0012caf:	6a 27                	push   0x27
c0012cb1:	6a 00                	push   0x0
c0012cb3:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012cb7:	51                   	push   ecx
c0012cb8:	e8 33 d8 fe ff       	call   c00004f0 <memset>
c0012cbd:	6b c5 27             	imul   eax,ebp,0x27
c0012cc0:	83 c4 0c             	add    esp,0xc
c0012cc3:	6a 27                	push   0x27
c0012cc5:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012ccc:	50                   	push   eax
c0012ccd:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012cd1:	51                   	push   ecx
c0012cd2:	e8 b9 d9 fe ff       	call   c0000690 <strncpy>
c0012cd7:	83 c4 0c             	add    esp,0xc
c0012cda:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012cde:	52                   	push   edx
c0012cdf:	56                   	push   esi
c0012ce0:	57                   	push   edi
c0012ce1:	e8 97 fc ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ce6:	eb 19                	jmp    c0012d01 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012ce8:	85 f6                	test   esi,esi
c0012cea:	74 18                	je     c0012d04 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012cec:	52                   	push   edx
c0012ced:	52                   	push   edx
c0012cee:	56                   	push   esi
c0012cef:	57                   	push   edi
c0012cf0:	e8 c4 fc ff ff       	call   c00129b9 <CmFreeExtent(Reghive_Tag*, int)>
c0012cf5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012cf9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012cfd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012d01:	83 c4 10             	add    esp,0x10
c0012d04:	45                   	inc    ebp
c0012d05:	83 c3 03             	add    ebx,0x3
c0012d08:	83 fd 07             	cmp    ebp,0x7
c0012d0b:	0f 85 47 ff ff ff    	jne    c0012c58 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012d11:	50                   	push   eax
c0012d12:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012d16:	50                   	push   eax
c0012d17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d1e:	57                   	push   edi
c0012d1f:	e8 59 fc ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d24:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012d2a:	5b                   	pop    ebx
c0012d2b:	5e                   	pop    esi
c0012d2c:	5f                   	pop    edi
c0012d2d:	5d                   	pop    ebp
c0012d2e:	c3                   	ret    

c0012d2f <CmGetMatch(char*, char*, bool, bool*)>:
c0012d2f:	56                   	push   esi
c0012d30:	53                   	push   ebx
c0012d31:	50                   	push   eax
c0012d32:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d37:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d3b:	74 25                	je     c0012d62 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d3d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d40:	31 db                	xor    ebx,ebx
c0012d42:	50                   	push   eax
c0012d43:	50                   	push   eax
c0012d44:	8d 04 9d 80 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb80]
c0012d4b:	50                   	push   eax
c0012d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d50:	e8 2b da fe ff       	call   c0000780 <strcmp>
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	85 c0                	test   eax,eax
c0012d5a:	74 2e                	je     c0012d8a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d5c:	43                   	inc    ebx
c0012d5d:	83 fb 3f             	cmp    ebx,0x3f
c0012d60:	75 e0                	jne    c0012d42 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012d62:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d65:	31 db                	xor    ebx,ebx
c0012d67:	51                   	push   ecx
c0012d68:	51                   	push   ecx
c0012d69:	8d 04 9d 80 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb80]
c0012d70:	50                   	push   eax
c0012d71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d75:	e8 06 da fe ff       	call   c0000780 <strcmp>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	85 c0                	test   eax,eax
c0012d7f:	74 09                	je     c0012d8a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d81:	43                   	inc    ebx
c0012d82:	83 fb 3f             	cmp    ebx,0x3f
c0012d85:	75 e0                	jne    c0012d67 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012d87:	83 cb ff             	or     ebx,0xffffffff
c0012d8a:	5a                   	pop    edx
c0012d8b:	89 d8                	mov    eax,ebx
c0012d8d:	5b                   	pop    ebx
c0012d8e:	5e                   	pop    esi
c0012d8f:	c3                   	ret    

c0012d90 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d90:	55                   	push   ebp
c0012d91:	31 c0                	xor    eax,eax
c0012d93:	57                   	push   edi
c0012d94:	56                   	push   esi
c0012d95:	53                   	push   ebx
c0012d96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d9a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d9e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012da2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012da6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012da8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012dab:	83 fd 1f             	cmp    ebp,0x1f
c0012dae:	7f 0b                	jg     c0012dbb <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012db0:	0f b6 c2             	movzx  eax,dl
c0012db3:	d3 e0                	shl    eax,cl
c0012db5:	09 07                	or     DWORD PTR [edi],eax
c0012db7:	b0 01                	mov    al,0x1
c0012db9:	01 33                	add    DWORD PTR [ebx],esi
c0012dbb:	5b                   	pop    ebx
c0012dbc:	5e                   	pop    esi
c0012dbd:	5f                   	pop    edi
c0012dbe:	5d                   	pop    ebp
c0012dbf:	c3                   	ret    

c0012dc0 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012dc0:	57                   	push   edi
c0012dc1:	56                   	push   esi
c0012dc2:	53                   	push   ebx
c0012dc3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012dcb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012dcf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012dd3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012dd5:	7c 17                	jl     c0012dee <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012dd7:	8b 17                	mov    edx,DWORD PTR [edi]
c0012dd9:	b8 01 00 00 00       	mov    eax,0x1
c0012dde:	d3 e0                	shl    eax,cl
c0012de0:	48                   	dec    eax
c0012de1:	21 d0                	and    eax,edx
c0012de3:	d3 ea                	shr    edx,cl
c0012de5:	89 17                	mov    DWORD PTR [edi],edx
c0012de7:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012de9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012dec:	eb 05                	jmp    c0012df3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012dee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012df1:	31 c0                	xor    eax,eax
c0012df3:	5b                   	pop    ebx
c0012df4:	5e                   	pop    esi
c0012df5:	5f                   	pop    edi
c0012df6:	c3                   	ret    

c0012df7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012df7:	83 ec 40             	sub    esp,0x40
c0012dfa:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dfe:	50                   	push   eax
c0012dff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e07:	e8 4d fa ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012e10:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012e14:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012e18:	89 10                	mov    DWORD PTR [eax],edx
c0012e1a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012e1d:	83 c4 4c             	add    esp,0x4c
c0012e20:	c3                   	ret    

c0012e21 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012e21:	55                   	push   ebp
c0012e22:	57                   	push   edi
c0012e23:	56                   	push   esi
c0012e24:	53                   	push   ebx
c0012e25:	83 ec 40             	sub    esp,0x40
c0012e28:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012e2c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e30:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012e34:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e38:	53                   	push   ebx
c0012e39:	56                   	push   esi
c0012e3a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e3e:	e8 16 fa ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e43:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e47:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e4b:	83 c4 0c             	add    esp,0xc
c0012e4e:	53                   	push   ebx
c0012e4f:	56                   	push   esi
c0012e50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e54:	e8 24 fb ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e59:	83 c4 4c             	add    esp,0x4c
c0012e5c:	5b                   	pop    ebx
c0012e5d:	5e                   	pop    esi
c0012e5e:	5f                   	pop    edi
c0012e5f:	5d                   	pop    ebp
c0012e60:	c3                   	ret    

c0012e61 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012e61:	55                   	push   ebp
c0012e62:	57                   	push   edi
c0012e63:	56                   	push   esi
c0012e64:	31 f6                	xor    esi,esi
c0012e66:	53                   	push   ebx
c0012e67:	31 db                	xor    ebx,ebx
c0012e69:	83 ec 40             	sub    esp,0x40
c0012e6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e74:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e7c:	6a 12                	push   0x12
c0012e7e:	68 ee 00 00 00       	push   0xee
c0012e83:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e87:	e8 64 d6 fe ff       	call   c00004f0 <memset>
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e93:	6a 08                	push   0x8
c0012e95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e99:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e9d:	50                   	push   eax
c0012e9e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012ea2:	55                   	push   ebp
c0012ea3:	57                   	push   edi
c0012ea4:	e8 e7 fe ff ff       	call   c0012d90 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012eb0:	50                   	push   eax
c0012eb1:	6a 06                	push   0x6
c0012eb3:	55                   	push   ebp
c0012eb4:	57                   	push   edi
c0012eb5:	e8 06 ff ff ff       	call   c0012dc0 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012eba:	83 c4 10             	add    esp,0x10
c0012ebd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ec2:	74 07                	je     c0012ecb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012ec4:	46                   	inc    esi
c0012ec5:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012ec9:	eb e1                	jmp    c0012eac <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012ecb:	43                   	inc    ebx
c0012ecc:	83 fb 12             	cmp    ebx,0x12
c0012ecf:	75 c2                	jne    c0012e93 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012ed1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ed5:	31 f6                	xor    esi,esi
c0012ed7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012eda:	50                   	push   eax
c0012edb:	50                   	push   eax
c0012edc:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012ee1:	46                   	inc    esi
c0012ee2:	8d 04 85 80 34 02 c0 	lea    eax,[eax*4-0x3ffdcb80]
c0012ee9:	50                   	push   eax
c0012eea:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012eee:	e8 7d d9 fe ff       	call   c0000870 <strcat>
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	83 fe 18             	cmp    esi,0x18
c0012ef9:	75 df                	jne    c0012eda <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012efb:	83 c4 3c             	add    esp,0x3c
c0012efe:	31 c0                	xor    eax,eax
c0012f00:	5b                   	pop    ebx
c0012f01:	5e                   	pop    esi
c0012f02:	5f                   	pop    edi
c0012f03:	5d                   	pop    ebp
c0012f04:	c3                   	ret    

c0012f05 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012f05:	83 ec 40             	sub    esp,0x40
c0012f08:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f0c:	50                   	push   eax
c0012f0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f15:	e8 3f f9 ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f1a:	58                   	pop    eax
c0012f1b:	5a                   	pop    edx
c0012f1c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012f20:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f24:	50                   	push   eax
c0012f25:	e8 37 ff ff ff       	call   c0012e61 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012f2a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012f2f:	83 c4 4c             	add    esp,0x4c
c0012f32:	c3                   	ret    

c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012f33:	55                   	push   ebp
c0012f34:	57                   	push   edi
c0012f35:	56                   	push   esi
c0012f36:	53                   	push   ebx
c0012f37:	31 db                	xor    ebx,ebx
c0012f39:	83 ec 70             	sub    esp,0x70
c0012f3c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f43:	6a 30                	push   0x30
c0012f45:	6a 00                	push   0x0
c0012f47:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f4b:	56                   	push   esi
c0012f4c:	e8 9f d5 fe ff       	call   c00004f0 <memset>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	57                   	push   edi
c0012f58:	e8 23 d6 fe ff       	call   c0000580 <strlen>
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	39 d8                	cmp    eax,ebx
c0012f62:	76 16                	jbe    c0012f7a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012f64:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012f68:	83 ec 0c             	sub    esp,0xc
c0012f6b:	50                   	push   eax
c0012f6c:	e8 ef d9 fe ff       	call   c0000960 <toupper>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012f77:	43                   	inc    ebx
c0012f78:	eb da                	jmp    c0012f54 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012f7a:	52                   	push   edx
c0012f7b:	31 db                	xor    ebx,ebx
c0012f7d:	6a 18                	push   0x18
c0012f7f:	31 ff                	xor    edi,edi
c0012f81:	6a 3f                	push   0x3f
c0012f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f87:	50                   	push   eax
c0012f88:	e8 63 d5 fe ff       	call   c00004f0 <memset>
c0012f8d:	83 c4 10             	add    esp,0x10
c0012f90:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012f94:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012f98:	84 c0                	test   al,al
c0012f9a:	0f 84 af 00 00 00    	je     c001304f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012fa0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012fa4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012faf:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012fb3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012fb7:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012fbc:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012fc0:	56                   	push   esi
c0012fc1:	e8 ba d5 fe ff       	call   c0000580 <strlen>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fcf:	74 0b                	je     c0012fdc <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012fd1:	50                   	push   eax
c0012fd2:	6a 01                	push   0x1
c0012fd4:	56                   	push   esi
c0012fd5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fd9:	50                   	push   eax
c0012fda:	eb 0a                	jmp    c0012fe6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012fdc:	50                   	push   eax
c0012fdd:	6a 00                	push   0x0
c0012fdf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012fe3:	50                   	push   eax
c0012fe4:	6a 00                	push   0x0
c0012fe6:	e8 44 fd ff ff       	call   c0012d2f <CmGetMatch(char*, char*, bool, bool*)>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	83 f8 ff             	cmp    eax,0xffffffff
c0012ff1:	75 1a                	jne    c001300d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012ff3:	83 ec 0c             	sub    esp,0xc
c0012ff6:	68 f9 1f 02 c0       	push   0xc0021ff9
c0012ffb:	e8 91 e2 ff ff       	call   c0011291 <KePanic(char const*)>
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	b8 02 00 00 00       	mov    eax,0x2
c0013008:	e9 bb 00 00 00       	jmp    c00130c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001300d:	83 ff 18             	cmp    edi,0x18
c0013010:	75 1a                	jne    c001302c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013012:	83 ec 0c             	sub    esp,0xc
c0013015:	68 0e 20 02 c0       	push   0xc002200e
c001301a:	e8 72 e2 ff ff       	call   c0011291 <KePanic(char const*)>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	b8 01 00 00 00       	mov    eax,0x1
c0013027:	e9 9c 00 00 00       	jmp    c00130c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001302c:	47                   	inc    edi
c001302d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013032:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013036:	0f 45 dd             	cmovne ebx,ebp
c0013039:	83 ec 0c             	sub    esp,0xc
c001303c:	56                   	push   esi
c001303d:	e8 3e d5 fe ff       	call   c0000580 <strlen>
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	85 c0                	test   eax,eax
c0013047:	74 06                	je     c001304f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013049:	43                   	inc    ebx
c001304a:	e9 41 ff ff ff       	jmp    c0012f90 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001304f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013057:	31 db                	xor    ebx,ebx
c0013059:	31 ff                	xor    edi,edi
c001305b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013063:	50                   	push   eax
c0013064:	6a 12                	push   0x12
c0013066:	68 ee 00 00 00       	push   0xee
c001306b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013072:	e8 79 d4 fe ff       	call   c00004f0 <memset>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001307e:	83 fb 17             	cmp    ebx,0x17
c0013081:	7e 26                	jle    c00130a9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013083:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013087:	50                   	push   eax
c0013088:	6a 08                	push   0x8
c001308a:	55                   	push   ebp
c001308b:	56                   	push   esi
c001308c:	e8 2f fd ff ff       	call   c0012dc0 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013099:	74 26                	je     c00130c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001309b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00130a2:	4b                   	dec    ebx
c00130a3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00130a6:	47                   	inc    edi
c00130a7:	eb 1c                	jmp    c00130c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00130a9:	6a 06                	push   0x6
c00130ab:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00130b0:	50                   	push   eax
c00130b1:	55                   	push   ebp
c00130b2:	56                   	push   esi
c00130b3:	e8 d8 fc ff ff       	call   c0012d90 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	84 c0                	test   al,al
c00130bd:	75 06                	jne    c00130c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00130bf:	eb c2                	jmp    c0013083 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00130c1:	31 c0                	xor    eax,eax
c00130c3:	eb 03                	jmp    c00130c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00130c5:	43                   	inc    ebx
c00130c6:	eb b2                	jmp    c001307a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00130c8:	83 c4 6c             	add    esp,0x6c
c00130cb:	5b                   	pop    ebx
c00130cc:	5e                   	pop    esi
c00130cd:	5f                   	pop    edi
c00130ce:	5d                   	pop    ebp
c00130cf:	c3                   	ret    

c00130d0 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00130d0:	53                   	push   ebx
c00130d1:	83 ec 3c             	sub    esp,0x3c
c00130d4:	6a 2b                	push   0x2b
c00130d6:	6a 00                	push   0x0
c00130d8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130dc:	53                   	push   ebx
c00130dd:	e8 0e d4 fe ff       	call   c00004f0 <memset>
c00130e2:	58                   	pop    eax
c00130e3:	5a                   	pop    edx
c00130e4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130e8:	50                   	push   eax
c00130e9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130ed:	e8 41 fe ff ff       	call   c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130f2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00130f7:	83 c4 0c             	add    esp,0xc
c00130fa:	6a 15                	push   0x15
c00130fc:	6a 00                	push   0x0
c00130fe:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013102:	50                   	push   eax
c0013103:	e8 e8 d3 fe ff       	call   c00004f0 <memset>
c0013108:	53                   	push   ebx
c0013109:	6a 00                	push   0x0
c001310b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001310f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013113:	e8 eb f9 ff ff       	call   c0012b03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013118:	83 c4 58             	add    esp,0x58
c001311b:	5b                   	pop    ebx
c001311c:	c3                   	ret    

c001311d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001311d:	56                   	push   esi
c001311e:	53                   	push   ebx
c001311f:	83 ec 48             	sub    esp,0x48
c0013122:	6a 12                	push   0x12
c0013124:	68 ff 00 00 00       	push   0xff
c0013129:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001312d:	56                   	push   esi
c001312e:	e8 bd d3 fe ff       	call   c00004f0 <memset>
c0013133:	5a                   	pop    edx
c0013134:	59                   	pop    ecx
c0013135:	56                   	push   esi
c0013136:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001313a:	e8 f4 fd ff ff       	call   c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013146:	85 db                	test   ebx,ebx
c0013148:	74 42                	je     c001318c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001314a:	50                   	push   eax
c001314b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001314f:	50                   	push   eax
c0013150:	53                   	push   ebx
c0013151:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013155:	e8 ff f6 ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001315a:	83 c4 0c             	add    esp,0xc
c001315d:	6a 12                	push   0x12
c001315f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013163:	50                   	push   eax
c0013164:	56                   	push   esi
c0013165:	e8 16 d2 fe ff       	call   c0000380 <memcmp>
c001316a:	83 c4 10             	add    esp,0x10
c001316d:	85 c0                	test   eax,eax
c001316f:	74 1e                	je     c001318f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013171:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013176:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001317b:	c1 e3 08             	shl    ebx,0x8
c001317e:	09 d8                	or     eax,ebx
c0013180:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013185:	c1 e3 10             	shl    ebx,0x10
c0013188:	09 c3                	or     ebx,eax
c001318a:	eb ba                	jmp    c0013146 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001318c:	83 cb ff             	or     ebx,0xffffffff
c001318f:	83 c4 44             	add    esp,0x44
c0013192:	89 d8                	mov    eax,ebx
c0013194:	5b                   	pop    ebx
c0013195:	5e                   	pop    esi
c0013196:	c3                   	ret    

c0013197 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013197:	57                   	push   edi
c0013198:	56                   	push   esi
c0013199:	53                   	push   ebx
c001319a:	83 ec 34             	sub    esp,0x34
c001319d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00131a1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00131a5:	6a 2b                	push   0x2b
c00131a7:	6a 00                	push   0x0
c00131a9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131ad:	53                   	push   ebx
c00131ae:	e8 3d d3 fe ff       	call   c00004f0 <memset>
c00131b3:	58                   	pop    eax
c00131b4:	5a                   	pop    edx
c00131b5:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131b9:	50                   	push   eax
c00131ba:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00131be:	e8 70 fd ff ff       	call   c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131c3:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00131c7:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00131cb:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00131cf:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00131d3:	53                   	push   ebx
c00131d4:	6a 00                	push   0x0
c00131d6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131da:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131de:	e8 20 f9 ff ff       	call   c0012b03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131e3:	83 c4 50             	add    esp,0x50
c00131e6:	5b                   	pop    ebx
c00131e7:	5e                   	pop    esi
c00131e8:	5f                   	pop    edi
c00131e9:	c3                   	ret    

c00131ea <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00131ea:	55                   	push   ebp
c00131eb:	57                   	push   edi
c00131ec:	56                   	push   esi
c00131ed:	53                   	push   ebx
c00131ee:	83 ec 40             	sub    esp,0x40
c00131f1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00131f5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131f9:	6a 2b                	push   0x2b
c00131fb:	6a 00                	push   0x0
c00131fd:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013201:	56                   	push   esi
c0013202:	e8 e9 d2 fe ff       	call   c00004f0 <memset>
c0013207:	5f                   	pop    edi
c0013208:	89 ef                	mov    edi,ebp
c001320a:	58                   	pop    eax
c001320b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001320f:	50                   	push   eax
c0013210:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013214:	e8 1a fd ff ff       	call   c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013219:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001321e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013223:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013228:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	85 ed                	test   ebp,ebp
c0013232:	74 14                	je     c0013248 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013234:	51                   	push   ecx
c0013235:	51                   	push   ecx
c0013236:	57                   	push   edi
c0013237:	53                   	push   ebx
c0013238:	e8 0e f7 ff ff       	call   c001294b <CmGetNext(Reghive_Tag*, int)>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	85 c0                	test   eax,eax
c0013242:	74 04                	je     c0013248 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013244:	89 c7                	mov    edi,eax
c0013246:	eb e8                	jmp    c0013230 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013248:	56                   	push   esi
c0013249:	6a 00                	push   0x0
c001324b:	57                   	push   edi
c001324c:	53                   	push   ebx
c001324d:	e8 b1 f8 ff ff       	call   c0012b03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013252:	83 c4 0c             	add    esp,0xc
c0013255:	56                   	push   esi
c0013256:	50                   	push   eax
c0013257:	89 c7                	mov    edi,eax
c0013259:	53                   	push   ebx
c001325a:	e8 fa f5 ff ff       	call   c0012859 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001325f:	58                   	pop    eax
c0013260:	5a                   	pop    edx
c0013261:	6a 6c                	push   0x6c
c0013263:	6a 00                	push   0x0
c0013265:	6a 00                	push   0x0
c0013267:	68 1f 20 02 c0       	push   0xc002201f
c001326c:	57                   	push   edi
c001326d:	53                   	push   ebx
c001326e:	e8 24 ff ff ff       	call   c0013197 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013273:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013277:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001327b:	c1 e8 10             	shr    eax,0x10
c001327e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013282:	83 c4 1c             	add    esp,0x1c
c0013285:	56                   	push   esi
c0013286:	57                   	push   edi
c0013287:	53                   	push   ebx
c0013288:	e8 f0 f6 ff ff       	call   c001297d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001328d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013292:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013297:	c1 e0 08             	shl    eax,0x8
c001329a:	09 c2                	or     edx,eax
c001329c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00132a1:	83 c4 4c             	add    esp,0x4c
c00132a4:	5b                   	pop    ebx
c00132a5:	5e                   	pop    esi
c00132a6:	c1 e0 10             	shl    eax,0x10
c00132a9:	09 d0                	or     eax,edx
c00132ab:	5f                   	pop    edi
c00132ac:	5d                   	pop    ebp
c00132ad:	c3                   	ret    

c00132ae <zStrtok(char*, char const*)>:
c00132ae:	55                   	push   ebp
c00132af:	57                   	push   edi
c00132b0:	56                   	push   esi
c00132b1:	53                   	push   ebx
c00132b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ba:	85 db                	test   ebx,ebx
c00132bc:	74 2f                	je     c00132ed <zStrtok(char*, char const*)+0x3f>
c00132be:	85 c0                	test   eax,eax
c00132c0:	75 09                	jne    c00132cb <zStrtok(char*, char const*)+0x1d>
c00132c2:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00132c7:	85 c0                	test   eax,eax
c00132c9:	74 50                	je     c001331b <zStrtok(char*, char const*)+0x6d>
c00132cb:	31 c9                	xor    ecx,ecx
c00132cd:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00132d1:	74 03                	je     c00132d6 <zStrtok(char*, char const*)+0x28>
c00132d3:	41                   	inc    ecx
c00132d4:	eb f7                	jmp    c00132cd <zStrtok(char*, char const*)+0x1f>
c00132d6:	31 d2                	xor    edx,edx
c00132d8:	39 ca                	cmp    edx,ecx
c00132da:	74 15                	je     c00132f1 <zStrtok(char*, char const*)+0x43>
c00132dc:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00132e0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00132e3:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00132e6:	39 ee                	cmp    esi,ebp
c00132e8:	74 13                	je     c00132fd <zStrtok(char*, char const*)+0x4f>
c00132ea:	42                   	inc    edx
c00132eb:	eb eb                	jmp    c00132d8 <zStrtok(char*, char const*)+0x2a>
c00132ed:	31 c0                	xor    eax,eax
c00132ef:	eb 2a                	jmp    c001331b <zStrtok(char*, char const*)+0x6d>
c00132f1:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00132fb:	eb 1e                	jmp    c001331b <zStrtok(char*, char const*)+0x6d>
c00132fd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013300:	39 ce                	cmp    esi,ecx
c0013302:	75 0a                	jne    c001330e <zStrtok(char*, char const*)+0x60>
c0013304:	40                   	inc    eax
c0013305:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001330a:	89 d8                	mov    eax,ebx
c001330c:	eb 0d                	jmp    c001331b <zStrtok(char*, char const*)+0x6d>
c001330e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013311:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013315:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c001331b:	5b                   	pop    ebx
c001331c:	5e                   	pop    esi
c001331d:	5f                   	pop    edi
c001331e:	5d                   	pop    ebp
c001331f:	c3                   	ret    

c0013320 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013320:	57                   	push   edi
c0013321:	56                   	push   esi
c0013322:	53                   	push   ebx
c0013323:	81 ec 08 01 00 00    	sub    esp,0x108
c0013329:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013330:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013337:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001333b:	53                   	push   ebx
c001333c:	e8 0f d3 fe ff       	call   c0000650 <strcpy>
c0013341:	59                   	pop    ecx
c0013342:	5e                   	pop    esi
c0013343:	68 83 23 02 c0       	push   0xc0022383
c0013348:	53                   	push   ebx
c0013349:	bb 01 00 00 00       	mov    ebx,0x1
c001334e:	e8 5b ff ff ff       	call   c00132ae <zStrtok(char*, char const*)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	85 c0                	test   eax,eax
c0013358:	74 3b                	je     c0013395 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001335a:	52                   	push   edx
c001335b:	50                   	push   eax
c001335c:	6a 01                	push   0x1
c001335e:	57                   	push   edi
c001335f:	e8 b9 fd ff ff       	call   c001311d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013364:	59                   	pop    ecx
c0013365:	5e                   	pop    esi
c0013366:	89 c3                	mov    ebx,eax
c0013368:	68 83 23 02 c0       	push   0xc0022383
c001336d:	6a 00                	push   0x0
c001336f:	e8 3a ff ff ff       	call   c00132ae <zStrtok(char*, char const*)>
c0013374:	83 c4 10             	add    esp,0x10
c0013377:	85 c0                	test   eax,eax
c0013379:	89 c6                	mov    esi,eax
c001337b:	74 18                	je     c0013395 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001337d:	52                   	push   edx
c001337e:	52                   	push   edx
c001337f:	53                   	push   ebx
c0013380:	57                   	push   edi
c0013381:	e8 86 f5 ff ff       	call   c001290c <CmEnterDirectory(Reghive_Tag*, int)>
c0013386:	83 c4 10             	add    esp,0x10
c0013389:	83 f8 ff             	cmp    eax,0xffffffff
c001338c:	89 c3                	mov    ebx,eax
c001338e:	74 05                	je     c0013395 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013390:	50                   	push   eax
c0013391:	56                   	push   esi
c0013392:	53                   	push   ebx
c0013393:	eb c9                	jmp    c001335e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013395:	81 c4 00 01 00 00    	add    esp,0x100
c001339b:	89 d8                	mov    eax,ebx
c001339d:	5b                   	pop    ebx
c001339e:	5e                   	pop    esi
c001339f:	5f                   	pop    edi
c00133a0:	c3                   	ret    

c00133a1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00133a1:	55                   	push   ebp
c00133a2:	57                   	push   edi
c00133a3:	56                   	push   esi
c00133a4:	53                   	push   ebx
c00133a5:	83 ec 5c             	sub    esp,0x5c
c00133a8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00133ac:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00133b0:	85 db                	test   ebx,ebx
c00133b2:	0f 8e 84 00 00 00    	jle    c001343c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00133b8:	57                   	push   edi
c00133b9:	31 ed                	xor    ebp,ebp
c00133bb:	6a 32                	push   0x32
c00133bd:	6a 00                	push   0x0
c00133bf:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00133c3:	57                   	push   edi
c00133c4:	e8 27 d1 fe ff       	call   c00004f0 <memset>
c00133c9:	83 c4 0c             	add    esp,0xc
c00133cc:	57                   	push   edi
c00133cd:	53                   	push   ebx
c00133ce:	56                   	push   esi
c00133cf:	e8 31 fb ff ff       	call   c0012f05 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00133df:	7d 13                	jge    c00133f4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00133e1:	83 ec 0c             	sub    esp,0xc
c00133e4:	45                   	inc    ebp
c00133e5:	68 27 27 02 c0       	push   0xc0022727
c00133ea:	e8 1b 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	eb e7                	jmp    c00133db <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00133f4:	51                   	push   ecx
c00133f5:	57                   	push   edi
c00133f6:	53                   	push   ebx
c00133f7:	68 25 20 02 c0       	push   0xc0022025
c00133fc:	e8 09 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013409:	75 1e                	jne    c0013429 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001340b:	52                   	push   edx
c001340c:	52                   	push   edx
c001340d:	53                   	push   ebx
c001340e:	56                   	push   esi
c001340f:	e8 f8 f4 ff ff       	call   c001290c <CmEnterDirectory(Reghive_Tag*, int)>
c0013414:	83 c4 0c             	add    esp,0xc
c0013417:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001341b:	8d 51 04             	lea    edx,[ecx+0x4]
c001341e:	52                   	push   edx
c001341f:	50                   	push   eax
c0013420:	56                   	push   esi
c0013421:	e8 7b ff ff ff       	call   c00133a1 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013426:	83 c4 10             	add    esp,0x10
c0013429:	50                   	push   eax
c001342a:	50                   	push   eax
c001342b:	53                   	push   ebx
c001342c:	56                   	push   esi
c001342d:	e8 19 f5 ff ff       	call   c001294b <CmGetNext(Reghive_Tag*, int)>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	89 c3                	mov    ebx,eax
c0013437:	e9 74 ff ff ff       	jmp    c00133b0 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001343c:	83 c4 5c             	add    esp,0x5c
c001343f:	5b                   	pop    ebx
c0013440:	5e                   	pop    esi
c0013441:	5f                   	pop    edi
c0013442:	5d                   	pop    ebp
c0013443:	c3                   	ret    

c0013444 <CmSplitFinalSlashInPlace(char*)>:
c0013444:	53                   	push   ebx
c0013445:	83 ec 14             	sub    esp,0x14
c0013448:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001344c:	53                   	push   ebx
c001344d:	e8 2e d1 fe ff       	call   c0000580 <strlen>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	48                   	dec    eax
c0013456:	85 c0                	test   eax,eax
c0013458:	74 15                	je     c001346f <CmSplitFinalSlashInPlace(char*)+0x2b>
c001345a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001345e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013461:	75 09                	jne    c001346c <CmSplitFinalSlashInPlace(char*)+0x28>
c0013463:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013466:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001346a:	eb 05                	jmp    c0013471 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001346c:	48                   	dec    eax
c001346d:	eb e7                	jmp    c0013456 <CmSplitFinalSlashInPlace(char*)+0x12>
c001346f:	31 c0                	xor    eax,eax
c0013471:	83 c4 08             	add    esp,0x8
c0013474:	5b                   	pop    ebx
c0013475:	c3                   	ret    

c0013476 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013476:	55                   	push   ebp
c0013477:	57                   	push   edi
c0013478:	56                   	push   esi
c0013479:	53                   	push   ebx
c001347a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013480:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013487:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001348a:	8d 43 01             	lea    eax,[ebx+0x1]
c001348d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013491:	89 f0                	mov    eax,esi
c0013493:	3c 40                	cmp    al,0x40
c0013495:	75 1b                	jne    c00134b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013497:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001349a:	85 c0                	test   eax,eax
c001349c:	74 08                	je     c00134a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001349e:	83 f8 3a             	cmp    eax,0x3a
c00134a1:	74 03                	je     c00134a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00134a3:	43                   	inc    ebx
c00134a4:	eb f1                	jmp    c0013497 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00134a6:	85 c0                	test   eax,eax
c00134a8:	0f 84 45 01 00 00    	je     c00135f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134ae:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00134b1:	43                   	inc    ebx
c00134b2:	50                   	push   eax
c00134b3:	6a 40                	push   0x40
c00134b5:	6a 00                	push   0x0
c00134b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134bb:	50                   	push   eax
c00134bc:	e8 2f d0 fe ff       	call   c00004f0 <memset>
c00134c1:	89 f1                	mov    ecx,esi
c00134c3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00134ca:	31 c0                	xor    eax,eax
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	0f be f1             	movsx  esi,cl
c00134d2:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00134d5:	85 d2                	test   edx,edx
c00134d7:	89 d1                	mov    ecx,edx
c00134d9:	0f 84 14 01 00 00    	je     c00135f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134df:	3d c7 00 00 00       	cmp    eax,0xc7
c00134e4:	0f 8f 09 01 00 00    	jg     c00135f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134ea:	83 fa 0a             	cmp    edx,0xa
c00134ed:	0f 85 f1 00 00 00    	jne    c00135e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00134f3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00134f8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00134fd:	89 c8                	mov    eax,ecx
c00134ff:	a8 df                	test   al,0xdf
c0013501:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013506:	83 f9 23             	cmp    ecx,0x23
c0013509:	0f 94 c2             	sete   dl
c001350c:	89 d5                	mov    ebp,edx
c001350e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013512:	09 ea                	or     edx,ebp
c0013514:	80 e2 01             	and    dl,0x1
c0013517:	75 47                	jne    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013519:	83 e8 09             	sub    eax,0x9
c001351c:	3c 01                	cmp    al,0x1
c001351e:	76 40                	jbe    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013520:	83 f9 5b             	cmp    ecx,0x5b
c0013523:	75 42                	jne    c0013567 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013525:	83 fe 40             	cmp    esi,0x40
c0013528:	75 36                	jne    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013531:	55                   	push   ebp
c0013532:	e8 49 d0 fe ff       	call   c0000580 <strlen>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	83 f8 3f             	cmp    eax,0x3f
c001353d:	0f 87 b0 00 00 00    	ja     c00135f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013543:	50                   	push   eax
c0013544:	50                   	push   eax
c0013545:	55                   	push   ebp
c0013546:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001354a:	55                   	push   ebp
c001354b:	e8 00 d1 fe ff       	call   c0000650 <strcpy>
c0013550:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013553:	e8 28 d0 fe ff       	call   c0000580 <strlen>
c0013558:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	31 d2                	xor    edx,edx
c0013562:	e9 84 00 00 00       	jmp    c00135eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013567:	83 fe 40             	cmp    esi,0x40
c001356a:	74 06                	je     c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c001356c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013570:	eb 19                	jmp    c001358b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013572:	51                   	push   ecx
c0013573:	51                   	push   ecx
c0013574:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013578:	8d 44 24 24          	lea    eax,[esp+0x24]
c001357c:	50                   	push   eax
c001357d:	e8 fe d1 fe ff       	call   c0000780 <strcmp>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	85 c0                	test   eax,eax
c0013587:	75 d7                	jne    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013589:	eb e1                	jmp    c001356c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001358b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c001358e:	85 c9                	test   ecx,ecx
c0013590:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013595:	83 f9 3d             	cmp    ecx,0x3d
c0013598:	0f 94 c0             	sete   al
c001359b:	89 c5                	mov    ebp,eax
c001359d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a1:	09 e8                	or     eax,ebp
c00135a3:	a8 01                	test   al,0x1
c00135a5:	89 c5                	mov    ebp,eax
c00135a7:	75 03                	jne    c00135ac <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00135a9:	42                   	inc    edx
c00135aa:	eb df                	jmp    c001358b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00135ac:	85 c9                	test   ecx,ecx
c00135ae:	74 43                	je     c00135f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00135b4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00135b7:	52                   	push   edx
c00135b8:	52                   	push   edx
c00135b9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00135bd:	50                   	push   eax
c00135be:	53                   	push   ebx
c00135bf:	e8 bc d1 fe ff       	call   c0000780 <strcmp>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135cb:	85 c0                	test   eax,eax
c00135cd:	75 91                	jne    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135cf:	50                   	push   eax
c00135d0:	42                   	inc    edx
c00135d1:	50                   	push   eax
c00135d2:	52                   	push   edx
c00135d3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00135da:	e8 71 d0 fe ff       	call   c0000650 <strcpy>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	eb 11                	jmp    c00135f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00135e4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00135e8:	8d 50 01             	lea    edx,[eax+0x1]
c00135eb:	47                   	inc    edi
c00135ec:	89 d0                	mov    eax,edx
c00135ee:	e9 df fe ff ff       	jmp    c00134d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00135f3:	31 ed                	xor    ebp,ebp
c00135f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00135fb:	89 e8                	mov    eax,ebp
c00135fd:	5b                   	pop    ebx
c00135fe:	5e                   	pop    esi
c00135ff:	5f                   	pop    edi
c0013600:	5d                   	pop    ebp
c0013601:	c3                   	ret    

c0013602 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013602:	57                   	push   edi
c0013603:	56                   	push   esi
c0013604:	53                   	push   ebx
c0013605:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001360b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013612:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013619:	53                   	push   ebx
c001361a:	e8 61 cf fe ff       	call   c0000580 <strlen>
c001361f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013622:	89 c7                	mov    edi,eax
c0013624:	e8 57 cf fe ff       	call   c0000580 <strlen>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013630:	3d ff 00 00 00       	cmp    eax,0xff
c0013635:	0f 87 d3 00 00 00    	ja     c001370e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001363b:	57                   	push   edi
c001363c:	57                   	push   edi
c001363d:	56                   	push   esi
c001363e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013642:	56                   	push   esi
c0013643:	e8 08 d0 fe ff       	call   c0000650 <strcpy>
c0013648:	58                   	pop    eax
c0013649:	5a                   	pop    edx
c001364a:	68 83 23 02 c0       	push   0xc0022383
c001364f:	56                   	push   esi
c0013650:	e8 1b d2 fe ff       	call   c0000870 <strcat>
c0013655:	59                   	pop    ecx
c0013656:	5f                   	pop    edi
c0013657:	53                   	push   ebx
c0013658:	56                   	push   esi
c0013659:	e8 12 d2 fe ff       	call   c0000870 <strcat>
c001365e:	58                   	pop    eax
c001365f:	5a                   	pop    edx
c0013660:	68 2f 20 02 c0       	push   0xc002202f
c0013665:	56                   	push   esi
c0013666:	e8 05 d2 fe ff       	call   c0000870 <strcat>
c001366b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013672:	e8 5c 44 ff ff       	call   c0007ad3 <malloc>
c0013677:	83 c4 0c             	add    esp,0xc
c001367a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013680:	56                   	push   esi
c0013681:	50                   	push   eax
c0013682:	89 c3                	mov    ebx,eax
c0013684:	e8 41 81 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	85 db                	test   ebx,ebx
c001368e:	74 7e                	je     c001370e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013690:	51                   	push   ecx
c0013691:	51                   	push   ecx
c0013692:	6a 01                	push   0x1
c0013694:	53                   	push   ebx
c0013695:	e8 f8 81 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c001369a:	83 c4 10             	add    esp,0x10
c001369d:	85 c0                	test   eax,eax
c001369f:	74 08                	je     c00136a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00136a1:	83 ec 0c             	sub    esp,0xc
c00136a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136a6:	53                   	push   ebx
c00136a7:	eb 5f                	jmp    c0013708 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00136a9:	52                   	push   edx
c00136aa:	8d 44 24 17          	lea    eax,[esp+0x17]
c00136ae:	50                   	push   eax
c00136af:	8d 44 24 20          	lea    eax,[esp+0x20]
c00136b3:	50                   	push   eax
c00136b4:	53                   	push   ebx
c00136b5:	e8 da 84 ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c00136ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	89 c1                	mov    ecx,eax
c00136c3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00136c7:	74 31                	je     c00136fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00136c9:	83 ec 0c             	sub    esp,0xc
c00136cc:	50                   	push   eax
c00136cd:	e8 01 44 ff ff       	call   c0007ad3 <malloc>
c00136d2:	89 c6                	mov    esi,eax
c00136d4:	58                   	pop    eax
c00136d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136d7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00136db:	52                   	push   edx
c00136dc:	56                   	push   esi
c00136dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136e5:	53                   	push   ebx
c00136e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136e9:	83 c4 20             	add    esp,0x20
c00136ec:	85 c0                	test   eax,eax
c00136ee:	75 0a                	jne    c00136fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00136f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136f4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00136f8:	74 18                	je     c0013712 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	53                   	push   ebx
c00136fe:	e8 ed 81 ff ff       	call   c000b8f0 <File::close()>
c0013703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013705:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013708:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	31 c0                	xor    eax,eax
c0013710:	eb 3b                	jmp    c001374d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013712:	83 ec 0c             	sub    esp,0xc
c0013715:	53                   	push   ebx
c0013716:	e8 d5 81 ff ff       	call   c000b8f0 <File::close()>
c001371b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001371d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013723:	83 c4 0c             	add    esp,0xc
c0013726:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001372d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013734:	56                   	push   esi
c0013735:	e8 3c fd ff ff       	call   c0013476 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001373a:	89 34 24             	mov    DWORD PTR [esp],esi
c001373d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013741:	e8 9d 43 ff ff       	call   c0007ae3 <free>
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001374d:	81 c4 20 01 00 00    	add    esp,0x120
c0013753:	5b                   	pop    ebx
c0013754:	5e                   	pop    esi
c0013755:	5f                   	pop    edi
c0013756:	c3                   	ret    

c0013757 <Reg::getLine(char*, char*, char*)>:
c0013757:	57                   	push   edi
c0013758:	56                   	push   esi
c0013759:	53                   	push   ebx
c001375a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001375e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013762:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013766:	57                   	push   edi
c0013767:	56                   	push   esi
c0013768:	53                   	push   ebx
c0013769:	68 34 20 02 c0       	push   0xc0022034
c001376e:	e8 8f fe ff ff       	call   c0013602 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013773:	83 c4 10             	add    esp,0x10
c0013776:	84 c0                	test   al,al
c0013778:	75 10                	jne    c001378a <Reg::getLine(char*, char*, char*)+0x33>
c001377a:	57                   	push   edi
c001377b:	56                   	push   esi
c001377c:	53                   	push   ebx
c001377d:	68 59 20 02 c0       	push   0xc0022059
c0013782:	e8 7b fe ff ff       	call   c0013602 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	5b                   	pop    ebx
c001378b:	5e                   	pop    esi
c001378c:	5f                   	pop    edi
c001378d:	c3                   	ret    

c001378e <Reg::readInt(char*, char*, int*)>:
c001378e:	55                   	push   ebp
c001378f:	57                   	push   edi
c0013790:	56                   	push   esi
c0013791:	53                   	push   ebx
c0013792:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013798:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001379c:	55                   	push   ebp
c001379d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137a4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137ab:	e8 a7 ff ff ff       	call   c0013757 <Reg::getLine(char*, char*, char*)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	84 c0                	test   al,al
c00137b5:	0f 84 b6 00 00 00    	je     c0013871 <Reg::readInt(char*, char*, int*)+0xe3>
c00137bb:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00137c0:	83 fa 2b             	cmp    edx,0x2b
c00137c3:	74 0c                	je     c00137d1 <Reg::readInt(char*, char*, int*)+0x43>
c00137c5:	83 fa 2d             	cmp    edx,0x2d
c00137c8:	75 0e                	jne    c00137d8 <Reg::readInt(char*, char*, int*)+0x4a>
c00137ca:	ba 01 00 00 00       	mov    edx,0x1
c00137cf:	eb 0b                	jmp    c00137dc <Reg::readInt(char*, char*, int*)+0x4e>
c00137d1:	ba 01 00 00 00       	mov    edx,0x1
c00137d6:	eb 02                	jmp    c00137da <Reg::readInt(char*, char*, int*)+0x4c>
c00137d8:	31 d2                	xor    edx,edx
c00137da:	31 c0                	xor    eax,eax
c00137dc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00137e1:	be 0a 00 00 00       	mov    esi,0xa
c00137e6:	75 21                	jne    c0013809 <Reg::readInt(char*, char*, int*)+0x7b>
c00137e8:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00137ed:	83 f9 78             	cmp    ecx,0x78
c00137f0:	75 0a                	jne    c00137fc <Reg::readInt(char*, char*, int*)+0x6e>
c00137f2:	83 c2 02             	add    edx,0x2
c00137f5:	be 10 00 00 00       	mov    esi,0x10
c00137fa:	eb 0d                	jmp    c0013809 <Reg::readInt(char*, char*, int*)+0x7b>
c00137fc:	83 f9 62             	cmp    ecx,0x62
c00137ff:	75 08                	jne    c0013809 <Reg::readInt(char*, char*, int*)+0x7b>
c0013801:	83 c2 02             	add    edx,0x2
c0013804:	be 02 00 00 00       	mov    esi,0x2
c0013809:	01 d5                	add    ebp,edx
c001380b:	31 d2                	xor    edx,edx
c001380d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013811:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013815:	85 c9                	test   ecx,ecx
c0013817:	0f 94 c3             	sete   bl
c001381a:	83 f9 0d             	cmp    ecx,0xd
c001381d:	89 df                	mov    edi,ebx
c001381f:	0f 94 c3             	sete   bl
c0013822:	09 df                	or     edi,ebx
c0013824:	89 fb                	mov    ebx,edi
c0013826:	83 e7 01             	and    edi,0x1
c0013829:	75 35                	jne    c0013860 <Reg::readInt(char*, char*, int*)+0xd2>
c001382b:	0f af d6             	imul   edx,esi
c001382e:	83 fe 10             	cmp    esi,0x10
c0013831:	75 26                	jne    c0013859 <Reg::readInt(char*, char*, int*)+0xcb>
c0013833:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013837:	83 ef 41             	sub    edi,0x41
c001383a:	89 fb                	mov    ebx,edi
c001383c:	80 fb 05             	cmp    bl,0x5
c001383f:	77 06                	ja     c0013847 <Reg::readInt(char*, char*, int*)+0xb9>
c0013841:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013845:	eb 16                	jmp    c001385d <Reg::readInt(char*, char*, int*)+0xcf>
c0013847:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001384b:	83 eb 61             	sub    ebx,0x61
c001384e:	80 fb 05             	cmp    bl,0x5
c0013851:	77 06                	ja     c0013859 <Reg::readInt(char*, char*, int*)+0xcb>
c0013853:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013857:	eb 04                	jmp    c001385d <Reg::readInt(char*, char*, int*)+0xcf>
c0013859:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001385d:	45                   	inc    ebp
c001385e:	eb ad                	jmp    c001380d <Reg::readInt(char*, char*, int*)+0x7f>
c0013860:	84 c0                	test   al,al
c0013862:	74 02                	je     c0013866 <Reg::readInt(char*, char*, int*)+0xd8>
c0013864:	f7 da                	neg    edx
c0013866:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001386d:	89 10                	mov    DWORD PTR [eax],edx
c001386f:	88 d8                	mov    al,bl
c0013871:	81 c4 ec 00 00 00    	add    esp,0xec
c0013877:	5b                   	pop    ebx
c0013878:	5e                   	pop    esi
c0013879:	5f                   	pop    edi
c001387a:	5d                   	pop    ebp
c001387b:	c3                   	ret    

c001387c <Reg::readString(char*, char*, char*, int)>:
c001387c:	57                   	push   edi
c001387d:	56                   	push   esi
c001387e:	53                   	push   ebx
c001387f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013885:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013889:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013890:	57                   	push   edi
c0013891:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013898:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001389f:	e8 b3 fe ff ff       	call   c0013757 <Reg::getLine(char*, char*, char*)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	84 c0                	test   al,al
c00138a9:	89 c6                	mov    esi,eax
c00138ab:	74 44                	je     c00138f1 <Reg::readString(char*, char*, char*, int)+0x75>
c00138ad:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00138b4:	31 c0                	xor    eax,eax
c00138b6:	4a                   	dec    edx
c00138b7:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00138ba:	84 c9                	test   cl,cl
c00138bc:	74 0f                	je     c00138cd <Reg::readString(char*, char*, char*, int)+0x51>
c00138be:	39 c2                	cmp    edx,eax
c00138c0:	7e 0b                	jle    c00138cd <Reg::readString(char*, char*, char*, int)+0x51>
c00138c2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00138c5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00138ca:	40                   	inc    eax
c00138cb:	eb ea                	jmp    c00138b7 <Reg::readString(char*, char*, char*, int)+0x3b>
c00138cd:	83 ec 0c             	sub    esp,0xc
c00138d0:	53                   	push   ebx
c00138d1:	e8 aa cc fe ff       	call   c0000580 <strlen>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00138de:	75 11                	jne    c00138f1 <Reg::readString(char*, char*, char*, int)+0x75>
c00138e0:	83 ec 0c             	sub    esp,0xc
c00138e3:	53                   	push   ebx
c00138e4:	e8 97 cc fe ff       	call   c0000580 <strlen>
c00138e9:	83 c4 10             	add    esp,0x10
c00138ec:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00138f1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00138f7:	89 f0                	mov    eax,esi
c00138f9:	5b                   	pop    ebx
c00138fa:	5e                   	pop    esi
c00138fb:	5f                   	pop    edi
c00138fc:	c3                   	ret    

c00138fd <Reg::readBool(char*, char*, bool*)>:
c00138fd:	83 ec 20             	sub    esp,0x20
c0013900:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013904:	50                   	push   eax
c0013905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013909:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001390d:	e8 7c fe ff ff       	call   c001378e <Reg::readInt(char*, char*, int*)>
c0013912:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013916:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001391b:	0f 95 02             	setne  BYTE PTR [edx]
c001391e:	83 c4 2c             	add    esp,0x2c
c0013921:	c3                   	ret    

c0013922 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013922:	53                   	push   ebx
c0013923:	83 ec 1c             	sub    esp,0x1c
c0013926:	8d 44 24 13          	lea    eax,[esp+0x13]
c001392a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001392e:	50                   	push   eax
c001392f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013937:	e8 c1 ff ff ff       	call   c00138fd <Reg::readBool(char*, char*, bool*)>
c001393c:	83 c4 10             	add    esp,0x10
c001393f:	84 c0                	test   al,al
c0013941:	74 04                	je     c0013947 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013943:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013947:	83 c4 18             	add    esp,0x18
c001394a:	88 d8                	mov    al,bl
c001394c:	5b                   	pop    ebx
c001394d:	c3                   	ret    

c001394e <Reg::readIntWithDefault(char*, char*, int)>:
c001394e:	53                   	push   ebx
c001394f:	83 ec 1c             	sub    esp,0x1c
c0013952:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013956:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001395a:	50                   	push   eax
c001395b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001395f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013963:	e8 26 fe ff ff       	call   c001378e <Reg::readInt(char*, char*, int*)>
c0013968:	83 c4 10             	add    esp,0x10
c001396b:	84 c0                	test   al,al
c001396d:	74 04                	je     c0013973 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001396f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013973:	83 c4 18             	add    esp,0x18
c0013976:	89 d8                	mov    eax,ebx
c0013978:	5b                   	pop    ebx
c0013979:	c3                   	ret    

c001397a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001397a:	57                   	push   edi
c001397b:	56                   	push   esi
c001397c:	53                   	push   ebx
c001397d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013981:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013985:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013989:	56                   	push   esi
c001398a:	57                   	push   edi
c001398b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001398f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013993:	e8 e4 fe ff ff       	call   c001387c <Reg::readString(char*, char*, char*, int)>
c0013998:	83 c4 10             	add    esp,0x10
c001399b:	84 c0                	test   al,al
c001399d:	75 16                	jne    c00139b5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001399f:	50                   	push   eax
c00139a0:	56                   	push   esi
c00139a1:	6a 00                	push   0x0
c00139a3:	57                   	push   edi
c00139a4:	e8 47 cb fe ff       	call   c00004f0 <memset>
c00139a9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00139ac:	89 de                	mov    esi,ebx
c00139ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139b0:	83 c4 10             	add    esp,0x10
c00139b3:	89 df                	mov    edi,ebx
c00139b5:	5b                   	pop    ebx
c00139b6:	89 f8                	mov    eax,edi
c00139b8:	5e                   	pop    esi
c00139b9:	5f                   	pop    edi
c00139ba:	c3                   	ret    

c00139bb <SysEject(regs*)>:
c00139bb:	83 ec 0c             	sub    esp,0xc
c00139be:	83 ca ff             	or     edx,0xffffffff
c00139c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00139c8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00139cd:	83 e9 41             	sub    ecx,0x41
c00139d0:	83 f9 19             	cmp    ecx,0x19
c00139d3:	77 18                	ja     c00139ed <SysEject(regs*)+0x32>
c00139d5:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00139dc:	85 c9                	test   ecx,ecx
c00139de:	74 0d                	je     c00139ed <SysEject(regs*)+0x32>
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	51                   	push   ecx
c00139e4:	e8 8b a0 ff ff       	call   c000da74 <LogicalDisk::eject()>
c00139e9:	83 c4 10             	add    esp,0x10
c00139ec:	99                   	cdq    
c00139ed:	83 c4 0c             	add    esp,0xc
c00139f0:	c3                   	ret    

c00139f1 <SysExit(regs*)>:
c00139f1:	83 ec 18             	sub    esp,0x18
c00139f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139fb:	e8 10 2b 00 00       	call   c0016510 <terminateTask(int)>
c0013a00:	83 c8 ff             	or     eax,0xffffffff
c0013a03:	83 c4 1c             	add    esp,0x1c
c0013a06:	89 c2                	mov    edx,eax
c0013a08:	c3                   	ret    

c0013a09 <SysGetCwd(regs*)>:
c0013a09:	83 ec 10             	sub    esp,0x10
c0013a0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a10:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013a13:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a1e:	e8 35 7b ff ff       	call   c000b558 <Fs::getcwd(Process*, char*, int)>
c0013a23:	83 c4 1c             	add    esp,0x1c
c0013a26:	99                   	cdq    
c0013a27:	c3                   	ret    

c0013a28 <SysGetPID(regs*)>:
c0013a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a32:	99                   	cdq    
c0013a33:	c3                   	ret    

c0013a34 <SysGetRAMData(regs*)>:
c0013a34:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013a3e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013a44:	99                   	cdq    
c0013a45:	f7 f9                	idiv   ecx
c0013a47:	c1 e0 18             	shl    eax,0x18
c0013a4a:	09 c8                	or     eax,ecx
c0013a4c:	99                   	cdq    
c0013a4d:	c3                   	ret    

c0013a4e <SysGetVGAPtr(regs*)>:
c0013a4e:	55                   	push   ebp
c0013a4f:	57                   	push   edi
c0013a50:	56                   	push   esi
c0013a51:	53                   	push   ebx
c0013a52:	83 ec 18             	sub    esp,0x18
c0013a55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a59:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a5c:	e8 7b 25 00 00       	call   c0015fdc <Thr::processFromPID(int)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	89 c1                	mov    ecx,eax
c0013a66:	b8 01 00 00 00       	mov    eax,0x1
c0013a6b:	85 c9                	test   ecx,ecx
c0013a6d:	74 57                	je     c0013ac6 <SysGetVGAPtr(regs*)+0x78>
c0013a6f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013a73:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013a79:	74 0c                	je     c0013a87 <SysGetVGAPtr(regs*)+0x39>
c0013a7b:	83 ec 0c             	sub    esp,0xc
c0013a7e:	55                   	push   ebp
c0013a7f:	e8 eb 4c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013a8a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013a8f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a94:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a9a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013aa0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013aa3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013aa6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013aac:	50                   	push   eax
c0013aad:	50                   	push   eax
c0013aae:	68 74 20 02 c0       	push   0xc0022074
c0013ab3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ab6:	05 a8 0f 00 00       	add    eax,0xfa8
c0013abb:	50                   	push   eax
c0013abc:	e8 8f cb fe ff       	call   c0000650 <strcpy>
c0013ac1:	83 c4 10             	add    esp,0x10
c0013ac4:	31 c0                	xor    eax,eax
c0013ac6:	83 c4 0c             	add    esp,0xc
c0013ac9:	31 d2                	xor    edx,edx
c0013acb:	5b                   	pop    ebx
c0013acc:	5e                   	pop    esi
c0013acd:	5f                   	pop    edi
c0013ace:	5d                   	pop    ebp
c0013acf:	c3                   	ret    

c0013ad0 <SysKill(regs*)>:
c0013ad0:	53                   	push   ebx
c0013ad1:	83 ec 08             	sub    esp,0x8
c0013ad4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ad8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013adc:	75 16                	jne    c0013af4 <SysKill(regs*)+0x24>
c0013ade:	83 ec 0c             	sub    esp,0xc
c0013ae1:	68 7e 20 02 c0       	push   0xc002207e
c0013ae6:	e8 a6 d7 ff ff       	call   c0011291 <KePanic(char const*)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	e9 89 00 00 00       	jmp    c0013b7c <SysKill(regs*)+0xac>
c0013af3:	90                   	nop
c0013af4:	83 ec 0c             	sub    esp,0xc
c0013af7:	68 e4 96 02 c0       	push   0xc00296e4
c0013afc:	e8 3b bd 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b01:	8d 76 00             	lea    esi,[esi+0x0]
c0013b04:	83 c4 10             	add    esp,0x10
c0013b07:	85 c0                	test   eax,eax
c0013b09:	74 19                	je     c0013b24 <SysKill(regs*)+0x54>
c0013b0b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b0e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b11:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b13:	74 33                	je     c0013b48 <SysKill(regs*)+0x78>
c0013b15:	52                   	push   edx
c0013b16:	52                   	push   edx
c0013b17:	50                   	push   eax
c0013b18:	68 e4 96 02 c0       	push   0xc00296e4
c0013b1d:	e8 3a c0 00 00       	call   c001fb5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b22:	eb e0                	jmp    c0013b04 <SysKill(regs*)+0x34>
c0013b24:	83 ec 0c             	sub    esp,0xc
c0013b27:	68 d8 96 02 c0       	push   0xc00296d8
c0013b2c:	e8 0b bd 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b31:	8d 76 00             	lea    esi,[esi+0x0]
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	85 c0                	test   eax,eax
c0013b39:	74 41                	je     c0013b7c <SysKill(regs*)+0xac>
c0013b3b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b3e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b41:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b43:	75 27                	jne    c0013b6c <SysKill(regs*)+0x9c>
c0013b45:	8d 76 00             	lea    esi,[esi+0x0]
c0013b48:	51                   	push   ecx
c0013b49:	51                   	push   ecx
c0013b4a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b55:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b5b:	e8 cf db ff ff       	call   c001172f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	31 c0                	xor    eax,eax
c0013b65:	31 d2                	xor    edx,edx
c0013b67:	eb 1b                	jmp    c0013b84 <SysKill(regs*)+0xb4>
c0013b69:	8d 76 00             	lea    esi,[esi+0x0]
c0013b6c:	52                   	push   edx
c0013b6d:	52                   	push   edx
c0013b6e:	50                   	push   eax
c0013b6f:	68 d8 96 02 c0       	push   0xc00296d8
c0013b74:	e8 e3 bf 00 00       	call   c001fb5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b79:	eb b9                	jmp    c0013b34 <SysKill(regs*)+0x64>
c0013b7b:	90                   	nop
c0013b7c:	83 c8 ff             	or     eax,0xffffffff
c0013b7f:	89 c2                	mov    edx,eax
c0013b81:	8d 76 00             	lea    esi,[esi+0x0]
c0013b84:	83 c4 08             	add    esp,0x8
c0013b87:	5b                   	pop    ebx
c0013b88:	c3                   	ret    

c0013b89 <SysLoadDLL(regs*)>:
c0013b89:	56                   	push   esi
c0013b8a:	31 d2                	xor    edx,edx
c0013b8c:	53                   	push   ebx
c0013b8d:	b8 01 00 00 00       	mov    eax,0x1
c0013b92:	51                   	push   ecx
c0013b93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b97:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013b9b:	0f 84 8c 00 00 00    	je     c0013c2d <SysLoadDLL(regs*)+0xa4>
c0013ba1:	83 ec 0c             	sub    esp,0xc
c0013ba4:	68 14 01 00 00       	push   0x114
c0013ba9:	e8 25 3f ff ff       	call   c0007ad3 <malloc>
c0013bae:	83 c4 0c             	add    esp,0xc
c0013bb1:	89 c3                	mov    ebx,eax
c0013bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013bbb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013bbe:	53                   	push   ebx
c0013bbf:	e8 06 7c ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	31 d2                	xor    edx,edx
c0013bc9:	85 db                	test   ebx,ebx
c0013bcb:	b8 02 00 00 00       	mov    eax,0x2
c0013bd0:	74 5b                	je     c0013c2d <SysLoadDLL(regs*)+0xa4>
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	53                   	push   ebx
c0013bd6:	e8 7b 7f ff ff       	call   c000bb56 <File::exists()>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	84 c0                	test   al,al
c0013be0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be2:	75 11                	jne    c0013bf5 <SysLoadDLL(regs*)+0x6c>
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	53                   	push   ebx
c0013be8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	b8 03 00 00 00       	mov    eax,0x3
c0013bf3:	eb 36                	jmp    c0013c2b <SysLoadDLL(regs*)+0xa2>
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	53                   	push   ebx
c0013bf9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bfc:	58                   	pop    eax
c0013bfd:	5a                   	pop    edx
c0013bfe:	6a 00                	push   0x0
c0013c00:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c03:	e8 1c 15 00 00       	call   c0015124 <Thr::loadDLL(char const*, bool)>
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	31 d2                	xor    edx,edx
c0013c0d:	89 c1                	mov    ecx,eax
c0013c0f:	b8 04 00 00 00       	mov    eax,0x4
c0013c14:	85 c9                	test   ecx,ecx
c0013c16:	74 15                	je     c0013c2d <SysLoadDLL(regs*)+0xa4>
c0013c18:	53                   	push   ebx
c0013c19:	53                   	push   ebx
c0013c1a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013c20:	51                   	push   ecx
c0013c21:	e8 3e 17 00 00       	call   c0015364 <Thr::executeDLL(unsigned long, void*)>
c0013c26:	83 c4 10             	add    esp,0x10
c0013c29:	31 c0                	xor    eax,eax
c0013c2b:	31 d2                	xor    edx,edx
c0013c2d:	59                   	pop    ecx
c0013c2e:	5b                   	pop    ebx
c0013c2f:	5e                   	pop    esi
c0013c30:	c3                   	ret    

c0013c31 <SysRead(regs*)>:
c0013c31:	57                   	push   edi
c0013c32:	56                   	push   esi
c0013c33:	53                   	push   ebx
c0013c34:	83 ec 10             	sub    esp,0x10
c0013c37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c3e:	83 f8 02             	cmp    eax,0x2
c0013c41:	77 10                	ja     c0013c53 <SysRead(regs*)+0x22>
c0013c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c4b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c51:	eb 0e                	jmp    c0013c61 <SysRead(regs*)+0x30>
c0013c53:	83 ec 0c             	sub    esp,0xc
c0013c56:	50                   	push   eax
c0013c57:	e8 3f 58 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	89 c1                	mov    ecx,eax
c0013c61:	83 c8 ff             	or     eax,0xffffffff
c0013c64:	85 c9                	test   ecx,ecx
c0013c66:	89 c2                	mov    edx,eax
c0013c68:	74 28                	je     c0013c92 <SysRead(regs*)+0x61>
c0013c6a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	31 ff                	xor    edi,edi
c0013c77:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c7d:	52                   	push   edx
c0013c7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c81:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	51                   	push   ecx
c0013c87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013c8e:	83 c4 20             	add    esp,0x20
c0013c91:	99                   	cdq    
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	5b                   	pop    ebx
c0013c96:	5e                   	pop    esi
c0013c97:	5f                   	pop    edi
c0013c98:	c3                   	ret    

c0013c99 <SysRegisterSignal(regs*)>:
c0013c99:	83 ec 18             	sub    esp,0x18
c0013c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca0:	6a 00                	push   0x0
c0013ca2:	6a 00                	push   0x0
c0013ca4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ca7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013caf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cb2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013cb8:	e8 3c da ff ff       	call   c00116f9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013cbd:	83 c4 2c             	add    esp,0x2c
c0013cc0:	99                   	cdq    
c0013cc1:	c3                   	ret    

c0013cc2 <SysRegistryGetTypeFromPath(regs*)>:
c0013cc2:	57                   	push   edi
c0013cc3:	56                   	push   esi
c0013cc4:	53                   	push   ebx
c0013cc5:	81 ec 38 01 00 00    	sub    esp,0x138
c0013ccb:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013cd2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd5:	68 9f 20 02 c0       	push   0xc002209f
c0013cda:	e8 2b 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cdf:	5a                   	pop    edx
c0013ce0:	59                   	pop    ecx
c0013ce1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ce4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ce7:	e8 34 f6 ff ff       	call   c0013320 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cec:	5f                   	pop    edi
c0013ced:	5a                   	pop    edx
c0013cee:	89 c6                	mov    esi,eax
c0013cf0:	50                   	push   eax
c0013cf1:	68 bf 20 02 c0       	push   0xc00220bf
c0013cf6:	e8 0f 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	85 f6                	test   esi,esi
c0013d00:	74 28                	je     c0013d2a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d02:	50                   	push   eax
c0013d03:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d07:	57                   	push   edi
c0013d08:	56                   	push   esi
c0013d09:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d0c:	e8 f4 f1 ff ff       	call   c0012f05 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d11:	83 c4 0c             	add    esp,0xc
c0013d14:	57                   	push   edi
c0013d15:	50                   	push   eax
c0013d16:	89 c3                	mov    ebx,eax
c0013d18:	68 c7 20 02 c0       	push   0xc00220c7
c0013d1d:	e8 e8 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d22:	89 d8                	mov    eax,ebx
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	99                   	cdq    
c0013d28:	eb 05                	jmp    c0013d2f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013d2a:	83 c8 ff             	or     eax,0xffffffff
c0013d2d:	89 c2                	mov    edx,eax
c0013d2f:	81 c4 30 01 00 00    	add    esp,0x130
c0013d35:	5b                   	pop    ebx
c0013d36:	5e                   	pop    esi
c0013d37:	5f                   	pop    edi
c0013d38:	c3                   	ret    

c0013d39 <SysRegistryReadExtent(regs*)>:
c0013d39:	83 ec 1c             	sub    esp,0x1c
c0013d3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d40:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d43:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d46:	85 c0                	test   eax,eax
c0013d48:	79 1f                	jns    c0013d69 <SysRegistryReadExtent(regs*)+0x30>
c0013d4a:	52                   	push   edx
c0013d4b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013d50:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d54:	52                   	push   edx
c0013d55:	50                   	push   eax
c0013d56:	51                   	push   ecx
c0013d57:	e8 9b f0 ff ff       	call   c0012df7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013d5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	eb 14                	jmp    c0013d7d <SysRegistryReadExtent(regs*)+0x44>
c0013d69:	83 ec 04             	sub    esp,0x4
c0013d6c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013d6f:	50                   	push   eax
c0013d70:	51                   	push   ecx
c0013d71:	e8 1f eb ff ff       	call   c0012895 <CmGetString(Reghive_Tag*, int, char*)>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	31 c0                	xor    eax,eax
c0013d7b:	31 d2                	xor    edx,edx
c0013d7d:	83 c4 1c             	add    esp,0x1c
c0013d80:	c3                   	ret    

c0013d81 <SysRegistryPathToExtentLookup(regs*)>:
c0013d81:	53                   	push   ebx
c0013d82:	83 ec 10             	sub    esp,0x10
c0013d85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d8c:	68 dd 20 02 c0       	push   0xc00220dd
c0013d91:	e8 74 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d96:	58                   	pop    eax
c0013d97:	5a                   	pop    edx
c0013d98:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d9b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d9e:	e8 7d f5 ff ff       	call   c0013320 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013da3:	83 c4 18             	add    esp,0x18
c0013da6:	5b                   	pop    ebx
c0013da7:	99                   	cdq    
c0013da8:	c3                   	ret    

c0013da9 <SysRegistryEnterDirectory(regs*)>:
c0013da9:	53                   	push   ebx
c0013daa:	83 ec 10             	sub    esp,0x10
c0013dad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013db1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013db4:	68 00 21 02 c0       	push   0xc0022100
c0013db9:	e8 4c 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dbe:	58                   	pop    eax
c0013dbf:	5a                   	pop    edx
c0013dc0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013dc3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dc6:	e8 41 eb ff ff       	call   c001290c <CmEnterDirectory(Reghive_Tag*, int)>
c0013dcb:	83 c4 18             	add    esp,0x18
c0013dce:	5b                   	pop    ebx
c0013dcf:	99                   	cdq    
c0013dd0:	c3                   	ret    

c0013dd1 <SysRegistryGetNext(regs*)>:
c0013dd1:	53                   	push   ebx
c0013dd2:	83 ec 10             	sub    esp,0x10
c0013dd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dd9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ddc:	68 1e 21 02 c0       	push   0xc002211e
c0013de1:	e8 24 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013de6:	58                   	pop    eax
c0013de7:	5a                   	pop    edx
c0013de8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013deb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dee:	e8 58 eb ff ff       	call   c001294b <CmGetNext(Reghive_Tag*, int)>
c0013df3:	83 c4 18             	add    esp,0x18
c0013df6:	5b                   	pop    ebx
c0013df7:	99                   	cdq    
c0013df8:	c3                   	ret    

c0013df9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013df9:	57                   	push   edi
c0013dfa:	56                   	push   esi
c0013dfb:	53                   	push   ebx
c0013dfc:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e02:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e09:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e0d:	57                   	push   edi
c0013e0e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013e11:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e14:	e8 ec f0 ff ff       	call   c0012f05 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e19:	89 c3                	mov    ebx,eax
c0013e1b:	58                   	pop    eax
c0013e1c:	5a                   	pop    edx
c0013e1d:	57                   	push   edi
c0013e1e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013e21:	e8 2a c8 fe ff       	call   c0000650 <strcpy>
c0013e26:	81 c4 40 01 00 00    	add    esp,0x140
c0013e2c:	89 d8                	mov    eax,ebx
c0013e2e:	5b                   	pop    ebx
c0013e2f:	99                   	cdq    
c0013e30:	5e                   	pop    esi
c0013e31:	5f                   	pop    edi
c0013e32:	c3                   	ret    

c0013e33 <SysRegistryOpen(regs*)>:
c0013e33:	83 ec 18             	sub    esp,0x18
c0013e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e3a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e3d:	e8 e3 e8 ff ff       	call   c0012725 <CmOpen(char const*)>
c0013e42:	83 c4 1c             	add    esp,0x1c
c0013e45:	99                   	cdq    
c0013e46:	c3                   	ret    

c0013e47 <SysRegistryClose(regs*)>:
c0013e47:	83 ec 18             	sub    esp,0x18
c0013e4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e4e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e51:	e8 ed e9 ff ff       	call   c0012843 <CmClose(Reghive_Tag*)>
c0013e56:	31 c0                	xor    eax,eax
c0013e58:	31 d2                	xor    edx,edx
c0013e5a:	83 c4 1c             	add    esp,0x1c
c0013e5d:	c3                   	ret    

c0013e5e <SysSbrk(regs*)>:
c0013e5e:	56                   	push   esi
c0013e5f:	53                   	push   ebx
c0013e60:	50                   	push   eax
c0013e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e6d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e70:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e76:	85 db                	test   ebx,ebx
c0013e78:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013e7b:	74 02                	je     c0013e7f <SysSbrk(regs*)+0x21>
c0013e7d:	79 06                	jns    c0013e85 <SysSbrk(regs*)+0x27>
c0013e7f:	89 f0                	mov    eax,esi
c0013e81:	31 d2                	xor    edx,edx
c0013e83:	eb 2a                	jmp    c0013eaf <SysSbrk(regs*)+0x51>
c0013e85:	83 c8 ff             	or     eax,0xffffffff
c0013e88:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013e8e:	89 c2                	mov    edx,eax
c0013e90:	77 1d                	ja     c0013eaf <SysSbrk(regs*)+0x51>
c0013e92:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013e98:	50                   	push   eax
c0013e99:	68 07 0c 00 00       	push   0xc07
c0013e9e:	c1 ea 0c             	shr    edx,0xc
c0013ea1:	52                   	push   edx
c0013ea2:	51                   	push   ecx
c0013ea3:	e8 5e 5f ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013ea8:	89 f0                	mov    eax,esi
c0013eaa:	31 d2                	xor    edx,edx
c0013eac:	83 c4 10             	add    esp,0x10
c0013eaf:	59                   	pop    ecx
c0013eb0:	5b                   	pop    ebx
c0013eb1:	5e                   	pop    esi
c0013eb2:	c3                   	ret    

c0013eb3 <SysSetCwd(regs*)>:
c0013eb3:	83 ec 14             	sub    esp,0x14
c0013eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ec2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ec5:	e8 2b 7d ff ff       	call   c000bbf5 <Fs::setcwd(Process*, char*)>
c0013eca:	83 c4 1c             	add    esp,0x1c
c0013ecd:	99                   	cdq    
c0013ece:	c3                   	ret    

c0013ecf <SysSetTime(regs*)>:
c0013ecf:	55                   	push   ebp
c0013ed0:	31 c9                	xor    ecx,ecx
c0013ed2:	57                   	push   edi
c0013ed3:	bd 0c 00 00 00       	mov    ebp,0xc
c0013ed8:	56                   	push   esi
c0013ed9:	53                   	push   ebx
c0013eda:	31 db                	xor    ebx,ebx
c0013edc:	83 ec 10             	sub    esp,0x10
c0013edf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ee3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013ee6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013ee9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013eec:	89 c2                	mov    edx,eax
c0013eee:	c1 e8 05             	shr    eax,0x5
c0013ef1:	83 e2 1f             	and    edx,0x1f
c0013ef4:	42                   	inc    edx
c0013ef5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013efb:	c1 e7 10             	shl    edi,0x10
c0013efe:	88 d1                	mov    cl,dl
c0013f00:	31 d2                	xor    edx,edx
c0013f02:	f7 f5                	div    ebp
c0013f04:	89 dd                	mov    ebp,ebx
c0013f06:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f0c:	88 d5                	mov    ch,dl
c0013f0e:	31 d2                	xor    edx,edx
c0013f10:	0f b7 c1             	movzx  eax,cx
c0013f13:	09 f8                	or     eax,edi
c0013f15:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f1a:	89 c1                	mov    ecx,eax
c0013f1c:	89 f0                	mov    eax,esi
c0013f1e:	f7 f7                	div    edi
c0013f20:	c1 e2 10             	shl    edx,0x10
c0013f23:	09 d5                	or     ebp,edx
c0013f25:	31 d2                	xor    edx,edx
c0013f27:	f7 f7                	div    edi
c0013f29:	89 eb                	mov    ebx,ebp
c0013f2b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f30:	89 f0                	mov    eax,esi
c0013f32:	88 d7                	mov    bh,dl
c0013f34:	31 d2                	xor    edx,edx
c0013f36:	f7 f7                	div    edi
c0013f38:	bf 18 00 00 00       	mov    edi,0x18
c0013f3d:	31 d2                	xor    edx,edx
c0013f3f:	f7 f7                	div    edi
c0013f41:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f46:	88 d3                	mov    bl,dl
c0013f48:	53                   	push   ebx
c0013f49:	51                   	push   ecx
c0013f4a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f50:	e8 b3 84 ff ff       	call   c000c408 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f55:	83 c4 1c             	add    esp,0x1c
c0013f58:	31 d2                	xor    edx,edx
c0013f5a:	5b                   	pop    ebx
c0013f5b:	5e                   	pop    esi
c0013f5c:	83 f0 01             	xor    eax,0x1
c0013f5f:	5f                   	pop    edi
c0013f60:	0f b6 c0             	movzx  eax,al
c0013f63:	5d                   	pop    ebp
c0013f64:	c3                   	ret    

c0013f65 <SysTimezone(regs*)>:
c0013f65:	53                   	push   ebx
c0013f66:	83 ec 08             	sub    esp,0x8
c0013f69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f6d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f71:	75 17                	jne    c0013f8a <SysTimezone(regs*)+0x25>
c0013f73:	83 ec 0c             	sub    esp,0xc
c0013f76:	68 35 21 02 c0       	push   0xc0022135
c0013f7b:	e8 8a 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f80:	83 c8 ff             	or     eax,0xffffffff
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	89 c2                	mov    edx,eax
c0013f88:	eb 20                	jmp    c0013faa <SysTimezone(regs*)+0x45>
c0013f8a:	83 ec 0c             	sub    esp,0xc
c0013f8d:	68 4a 21 02 c0       	push   0xc002214a
c0013f92:	e8 73 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f97:	58                   	pop    eax
c0013f98:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f9b:	e8 cc 81 ff ff       	call   c000c16c <User::loadClockSettings(int)>
c0013fa0:	83 c4 10             	add    esp,0x10
c0013fa3:	b8 01 00 00 00       	mov    eax,0x1
c0013fa8:	31 d2                	xor    edx,edx
c0013faa:	83 c4 08             	add    esp,0x8
c0013fad:	5b                   	pop    ebx
c0013fae:	c3                   	ret    

c0013faf <SysTruncate(regs*)>:
c0013faf:	55                   	push   ebp
c0013fb0:	57                   	push   edi
c0013fb1:	31 ff                	xor    edi,edi
c0013fb3:	56                   	push   esi
c0013fb4:	53                   	push   ebx
c0013fb5:	83 ec 0c             	sub    esp,0xc
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013fbf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013fc3:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013fc6:	89 ce                	mov    esi,ecx
c0013fc8:	0f 84 9a 00 00 00    	je     c0014068 <SysTruncate(regs*)+0xb9>
c0013fce:	83 ec 0c             	sub    esp,0xc
c0013fd1:	68 14 01 00 00       	push   0x114
c0013fd6:	e8 f8 3a ff ff       	call   c0007ad3 <malloc>
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	89 c3                	mov    ebx,eax
c0013fe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fe8:	55                   	push   ebp
c0013fe9:	53                   	push   ebx
c0013fea:	e8 db 77 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	31 d2                	xor    edx,edx
c0013ff4:	85 db                	test   ebx,ebx
c0013ff6:	b8 03 00 00 00       	mov    eax,0x3
c0013ffb:	0f 84 a2 00 00 00    	je     c00140a3 <SysTruncate(regs*)+0xf4>
c0014001:	51                   	push   ecx
c0014002:	51                   	push   ecx
c0014003:	6a 02                	push   0x2
c0014005:	53                   	push   ebx
c0014006:	e8 87 78 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	85 c0                	test   eax,eax
c0014010:	74 13                	je     c0014025 <SysTruncate(regs*)+0x76>
c0014012:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	53                   	push   ebx
c0014018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	b8 04 00 00 00       	mov    eax,0x4
c0014023:	eb 7c                	jmp    c00140a1 <SysTruncate(regs*)+0xf2>
c0014025:	52                   	push   edx
c0014026:	57                   	push   edi
c0014027:	56                   	push   esi
c0014028:	53                   	push   ebx
c0014029:	e8 78 79 ff ff       	call   c000b9a6 <File::truncate(unsigned long long)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	85 c0                	test   eax,eax
c0014033:	74 1b                	je     c0014050 <SysTruncate(regs*)+0xa1>
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	53                   	push   ebx
c0014039:	e8 b2 78 ff ff       	call   c000b8f0 <File::close()>
c001403e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014040:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	b8 05 00 00 00       	mov    eax,0x5
c001404e:	eb 51                	jmp    c00140a1 <SysTruncate(regs*)+0xf2>
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	53                   	push   ebx
c0014054:	e8 97 78 ff ff       	call   c000b8f0 <File::close()>
c0014059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001405e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	31 c0                	xor    eax,eax
c0014066:	eb 39                	jmp    c00140a1 <SysTruncate(regs*)+0xf2>
c0014068:	31 d2                	xor    edx,edx
c001406a:	83 fd 02             	cmp    ebp,0x2
c001406d:	b8 01 00 00 00       	mov    eax,0x1
c0014072:	7e 2f                	jle    c00140a3 <SysTruncate(regs*)+0xf4>
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	51                   	push   ecx
c0014078:	e8 1e 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	31 d2                	xor    edx,edx
c0014082:	89 c1                	mov    ecx,eax
c0014084:	b8 02 00 00 00       	mov    eax,0x2
c0014089:	85 c9                	test   ecx,ecx
c001408b:	74 16                	je     c00140a3 <SysTruncate(regs*)+0xf4>
c001408d:	50                   	push   eax
c001408e:	57                   	push   edi
c001408f:	56                   	push   esi
c0014090:	51                   	push   ecx
c0014091:	e8 10 79 ff ff       	call   c000b9a6 <File::truncate(unsigned long long)>
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	85 c0                	test   eax,eax
c001409b:	0f 95 c0             	setne  al
c001409e:	0f b6 c0             	movzx  eax,al
c00140a1:	31 d2                	xor    edx,edx
c00140a3:	83 c4 0c             	add    esp,0xc
c00140a6:	5b                   	pop    ebx
c00140a7:	5e                   	pop    esi
c00140a8:	5f                   	pop    edi
c00140a9:	5d                   	pop    ebp
c00140aa:	c3                   	ret    

c00140ab <SysWrite(regs*)>:
c00140ab:	57                   	push   edi
c00140ac:	56                   	push   esi
c00140ad:	53                   	push   ebx
c00140ae:	83 ec 10             	sub    esp,0x10
c00140b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140b8:	83 f8 02             	cmp    eax,0x2
c00140bb:	77 10                	ja     c00140cd <SysWrite(regs*)+0x22>
c00140bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140c5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140cb:	eb 0e                	jmp    c00140db <SysWrite(regs*)+0x30>
c00140cd:	83 ec 0c             	sub    esp,0xc
c00140d0:	50                   	push   eax
c00140d1:	e8 c5 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	89 c1                	mov    ecx,eax
c00140db:	83 c8 ff             	or     eax,0xffffffff
c00140de:	85 c9                	test   ecx,ecx
c00140e0:	89 c2                	mov    edx,eax
c00140e2:	74 28                	je     c001410c <SysWrite(regs*)+0x61>
c00140e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	31 ff                	xor    edi,edi
c00140f1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140f7:	52                   	push   edx
c00140f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140fb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140fe:	57                   	push   edi
c00140ff:	56                   	push   esi
c0014100:	51                   	push   ecx
c0014101:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014104:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014108:	83 c4 20             	add    esp,0x20
c001410b:	99                   	cdq    
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	5b                   	pop    ebx
c0014110:	5e                   	pop    esi
c0014111:	5f                   	pop    edi
c0014112:	c3                   	ret    

c0014113 <SysWsbe(regs*)>:
c0014113:	57                   	push   edi
c0014114:	b9 0b 00 00 00       	mov    ecx,0xb
c0014119:	56                   	push   esi
c001411a:	be 89 21 02 c0       	mov    esi,0xc0022189
c001411f:	53                   	push   ebx
c0014120:	83 ec 30             	sub    esp,0x30
c0014123:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014127:	fc                   	cld    
c0014128:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014136:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014139:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001413f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014141:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014144:	57                   	push   edi
c0014145:	e8 36 c4 fe ff       	call   c0000580 <strlen>
c001414a:	5a                   	pop    edx
c001414b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001414f:	52                   	push   edx
c0014150:	31 d2                	xor    edx,edx
c0014152:	57                   	push   edi
c0014153:	52                   	push   edx
c0014154:	50                   	push   eax
c0014155:	56                   	push   esi
c0014156:	ff d3                	call   ebx
c0014158:	83 c4 14             	add    esp,0x14
c001415b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001415f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014162:	e8 a9 23 00 00       	call   c0016510 <terminateTask(int)>
c0014167:	83 c4 40             	add    esp,0x40
c001416a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001416f:	5b                   	pop    ebx
c0014170:	31 d2                	xor    edx,edx
c0014172:	5e                   	pop    esi
c0014173:	5f                   	pop    edi
c0014174:	c3                   	ret    

c0014175 <SysYield(regs*)>:
c0014175:	83 ec 0c             	sub    esp,0xc
c0014178:	fa                   	cli    
c0014179:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001417f:	e8 0c 1a 00 00       	call   c0015b90 <schedule()>
c0014184:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014189:	48                   	dec    eax
c001418a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001418f:	75 01                	jne    c0014192 <SysYield(regs*)+0x1d>
c0014191:	fb                   	sti    
c0014192:	31 c0                	xor    eax,eax
c0014194:	31 d2                	xor    edx,edx
c0014196:	83 c4 0c             	add    esp,0xc
c0014199:	c3                   	ret    

c001419a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001419a:	55                   	push   ebp
c001419b:	57                   	push   edi
c001419c:	56                   	push   esi
c001419d:	53                   	push   ebx
c001419e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00141a4:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00141af:	74 3b                	je     c00141ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00141b1:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00141b9:	74 31                	je     c00141ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00141bb:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00141c3:	75 27                	jne    c00141ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00141c5:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00141cc:	05 00 10 00 00       	add    eax,0x1000
c00141d1:	89 c2                	mov    edx,eax
c00141d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141d8:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00141df:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00141e5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00141ec:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	6a 01                	push   0x1
c00141f8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141fe:	e8 f2 53 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014203:	83 c4 10             	add    esp,0x10
c0014206:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001420c:	89 c3                	mov    ebx,eax
c001420e:	0f 86 26 01 00 00    	jbe    c001433a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014214:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001421c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014223:	c1 ee 0c             	shr    esi,0xc
c0014226:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001422a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014231:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014238:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001423c:	29 ef                	sub    edi,ebp
c001423e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014242:	0f 83 f9 00 00 00    	jae    c0014341 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014248:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001424e:	b8 00 10 00 00       	mov    eax,0x1000
c0014253:	0f 47 f8             	cmova  edi,eax
c0014256:	83 ec 0c             	sub    esp,0xc
c0014259:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014260:	31 d2                	xor    edx,edx
c0014262:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014264:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014268:	50                   	push   eax
c0014269:	8d 74 24 30          	lea    esi,[esp+0x30]
c001426d:	56                   	push   esi
c001426e:	52                   	push   edx
c001426f:	57                   	push   edi
c0014270:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014277:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001427a:	83 c4 20             	add    esp,0x20
c001427d:	85 c0                	test   eax,eax
c001427f:	75 06                	jne    c0014287 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014281:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014285:	74 13                	je     c001429a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	53                   	push   ebx
c001428b:	e8 79 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014290:	83 c4 10             	add    esp,0x10
c0014293:	31 c0                	xor    eax,eax
c0014295:	e9 7c 01 00 00       	jmp    c0014416 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001429a:	fa                   	cli    
c001429b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142a1:	e8 3c 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142a6:	6a 07                	push   0x7
c00142a8:	53                   	push   ebx
c00142a9:	50                   	push   eax
c00142aa:	89 c7                	mov    edi,eax
c00142ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142b4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142ba:	e8 3f 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00142bf:	83 c4 0c             	add    esp,0xc
c00142c2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00142c9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142cf:	6a 00                	push   0x0
c00142d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142d9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142df:	e8 80 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00142e4:	58                   	pop    eax
c00142e5:	5a                   	pop    edx
c00142e6:	68 07 0c 00 00       	push   0xc07
c00142eb:	55                   	push   ebp
c00142ec:	57                   	push   edi
c00142ed:	89 df                	mov    edi,ebx
c00142ef:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142fc:	6a 00                	push   0x0
c00142fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014303:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014306:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001430c:	e8 51 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014311:	b9 00 10 00 00       	mov    ecx,0x1000
c0014316:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014318:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001431d:	83 c4 20             	add    esp,0x20
c0014320:	48                   	dec    eax
c0014321:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014326:	85 c0                	test   eax,eax
c0014328:	75 01                	jne    c001432b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001432a:	fb                   	sti    
c001432b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001432f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014335:	e9 f0 fe ff ff       	jmp    c001422a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001433a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014341:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014348:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001434e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014354:	0f 86 ae 00 00 00    	jbe    c0014408 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001435a:	fa                   	cli    
c001435b:	51                   	push   ecx
c001435c:	31 ff                	xor    edi,edi
c001435e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014365:	c1 ee 0c             	shr    esi,0xc
c0014368:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001436e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014374:	6a 00                	push   0x0
c0014376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001437e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014384:	e8 db 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014389:	83 c4 10             	add    esp,0x10
c001438c:	e8 51 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014391:	47                   	inc    edi
c0014392:	6a 07                	push   0x7
c0014394:	53                   	push   ebx
c0014395:	50                   	push   eax
c0014396:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001439a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00143a0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00143a3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00143a9:	e8 50 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00143ae:	58                   	pop    eax
c00143af:	5a                   	pop    edx
c00143b0:	68 07 0c 00 00       	push   0xc07
c00143b5:	55                   	push   ebp
c00143b6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00143bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143c0:	50                   	push   eax
c00143c1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00143c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ce:	6a 00                	push   0x0
c00143d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143d8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143de:	e8 7f 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00143e3:	83 c4 1c             	add    esp,0x1c
c00143e6:	68 00 10 00 00       	push   0x1000
c00143eb:	6a 00                	push   0x0
c00143ed:	53                   	push   ebx
c00143ee:	e8 fd c0 fe ff       	call   c00004f0 <memset>
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	39 fe                	cmp    esi,edi
c00143f8:	77 92                	ja     c001438c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00143fa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143ff:	48                   	dec    eax
c0014400:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014405:	75 01                	jne    c0014408 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014407:	fb                   	sti    
c0014408:	83 ec 0c             	sub    esp,0xc
c001440b:	53                   	push   ebx
c001440c:	e8 f8 54 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014411:	83 c4 10             	add    esp,0x10
c0014414:	b0 01                	mov    al,0x1
c0014416:	81 c4 2c 10 00 00    	add    esp,0x102c
c001441c:	5b                   	pop    ebx
c001441d:	5e                   	pop    esi
c001441e:	5f                   	pop    edi
c001441f:	5d                   	pop    ebp
c0014420:	c3                   	ret    

c0014421 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014421:	55                   	push   ebp
c0014422:	57                   	push   edi
c0014423:	56                   	push   esi
c0014424:	53                   	push   ebx
c0014425:	83 ec 48             	sub    esp,0x48
c0014428:	68 14 01 00 00       	push   0x114
c001442d:	e8 a1 36 ff ff       	call   c0007ad3 <malloc>
c0014432:	83 c4 0c             	add    esp,0xc
c0014435:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014439:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001443d:	89 c7                	mov    edi,eax
c001443f:	50                   	push   eax
c0014440:	e8 85 73 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0014445:	58                   	pop    eax
c0014446:	5a                   	pop    edx
c0014447:	6a 01                	push   0x1
c0014449:	57                   	push   edi
c001444a:	e8 43 74 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c001444f:	83 c4 10             	add    esp,0x10
c0014452:	85 c0                	test   eax,eax
c0014454:	0f 85 4c 01 00 00    	jne    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001445a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014462:	83 ec 0c             	sub    esp,0xc
c0014465:	6a 34                	push   0x34
c0014467:	e8 67 36 ff ff       	call   c0007ad3 <malloc>
c001446c:	89 c3                	mov    ebx,eax
c001446e:	58                   	pop    eax
c001446f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014471:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014475:	56                   	push   esi
c0014476:	53                   	push   ebx
c0014477:	6a 00                	push   0x0
c0014479:	6a 34                	push   0x34
c001447b:	57                   	push   edi
c001447c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001447f:	83 c4 20             	add    esp,0x20
c0014482:	85 c0                	test   eax,eax
c0014484:	0f 85 1c 01 00 00    	jne    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001448a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014490:	0f 85 10 01 00 00    	jne    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014496:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014499:	85 c0                	test   eax,eax
c001449b:	0f 84 05 01 00 00    	je     c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144a1:	31 d2                	xor    edx,edx
c00144a3:	55                   	push   ebp
c00144a4:	52                   	push   edx
c00144a5:	50                   	push   eax
c00144a6:	57                   	push   edi
c00144a7:	e8 a4 74 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	85 c0                	test   eax,eax
c00144b1:	0f 85 ef 00 00 00    	jne    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00144c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00144c5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00144c9:	0f af c2             	imul   eax,edx
c00144cc:	50                   	push   eax
c00144cd:	e8 01 36 ff ff       	call   c0007ad3 <malloc>
c00144d2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00144d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00144d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00144db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144df:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00144e3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00144e7:	0f af c2             	imul   eax,edx
c00144ea:	99                   	cdq    
c00144eb:	52                   	push   edx
c00144ec:	50                   	push   eax
c00144ed:	57                   	push   edi
c00144ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00144f4:	83 c4 20             	add    esp,0x20
c00144f7:	85 c0                	test   eax,eax
c00144f9:	0f 84 a7 00 00 00    	je     c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144ff:	31 d2                	xor    edx,edx
c0014501:	51                   	push   ecx
c0014502:	52                   	push   edx
c0014503:	50                   	push   eax
c0014504:	57                   	push   edi
c0014505:	e8 46 74 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c001450a:	83 c4 10             	add    esp,0x10
c001450d:	85 c0                	test   eax,eax
c001450f:	0f 85 91 00 00 00    	jne    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014515:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014519:	83 ec 0c             	sub    esp,0xc
c001451c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014520:	0f af c2             	imul   eax,edx
c0014523:	50                   	push   eax
c0014524:	e8 aa 35 ff ff       	call   c0007ad3 <malloc>
c0014529:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001452b:	89 34 24             	mov    DWORD PTR [esp],esi
c001452e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014536:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001453a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001453e:	0f af c2             	imul   eax,edx
c0014541:	99                   	cdq    
c0014542:	52                   	push   edx
c0014543:	50                   	push   eax
c0014544:	57                   	push   edi
c0014545:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014548:	83 c4 20             	add    esp,0x20
c001454b:	31 c9                	xor    ecx,ecx
c001454d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014555:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014559:	0f b7 e9             	movzx  ebp,cx
c001455c:	0f 83 86 00 00 00    	jae    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014562:	c1 e5 05             	shl    ebp,0x5
c0014565:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014569:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001456d:	75 73                	jne    c00145e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001456f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014576:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014579:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001457d:	52                   	push   edx
c001457e:	31 d2                	xor    edx,edx
c0014580:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014583:	52                   	push   edx
c0014584:	50                   	push   eax
c0014585:	57                   	push   edi
c0014586:	e8 c5 73 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c001458b:	83 c4 10             	add    esp,0x10
c001458e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014592:	85 c0                	test   eax,eax
c0014594:	74 17                	je     c00145ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	68 b5 21 02 c0       	push   0xc00221b5
c001459e:	e8 67 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00145a3:	83 c4 10             	add    esp,0x10
c00145a6:	31 c0                	xor    eax,eax
c00145a8:	e9 8b 00 00 00       	jmp    c0014638 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00145ad:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145b1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00145b4:	83 ec 0c             	sub    esp,0xc
c00145b7:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00145ba:	50                   	push   eax
c00145bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145bf:	56                   	push   esi
c00145c0:	57                   	push   edi
c00145c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00145c5:	e8 d0 fb ff ff       	call   c001419a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00145ca:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00145ce:	83 c4 20             	add    esp,0x20
c00145d1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00145d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00145d9:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00145de:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00145e2:	41                   	inc    ecx
c00145e3:	e9 6d ff ff ff       	jmp    c0014555 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00145e8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00145ec:	83 ec 0c             	sub    esp,0xc
c00145ef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145f7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00145fd:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014603:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014608:	05 00 10 00 00       	add    eax,0x1000
c001460d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014614:	e8 ca 34 ff ff       	call   c0007ae3 <free>
c0014619:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001461c:	e8 c2 34 ff ff       	call   c0007ae3 <free>
c0014621:	58                   	pop    eax
c0014622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014626:	e8 b8 34 ff ff       	call   c0007ae3 <free>
c001462b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001462e:	e8 bd 72 ff ff       	call   c000b8f0 <File::close()>
c0014633:	83 c4 10             	add    esp,0x10
c0014636:	b0 01                	mov    al,0x1
c0014638:	83 c4 3c             	add    esp,0x3c
c001463b:	5b                   	pop    ebx
c001463c:	5e                   	pop    esi
c001463d:	5f                   	pop    edi
c001463e:	5d                   	pop    ebp
c001463f:	c3                   	ret    

c0014640 <Thr::runtimeReferenceHelper()>:
c0014640:	83 ec 18             	sub    esp,0x18
c0014643:	68 bd 21 02 c0       	push   0xc00221bd
c0014648:	e8 bd 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001464d:	fa                   	cli    
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	eb fe                	jmp    c0014651 <Thr::runtimeReferenceHelper()+0x11>

c0014653 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014653:	57                   	push   edi
c0014654:	56                   	push   esi
c0014655:	53                   	push   ebx
c0014656:	31 db                	xor    ebx,ebx
c0014658:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001465e:	7e 3c                	jle    c001469c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014660:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014667:	31 ff                	xor    edi,edi
c0014669:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014670:	7e 27                	jle    c0014699 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014672:	50                   	push   eax
c0014673:	50                   	push   eax
c0014674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014678:	8b 06                	mov    eax,DWORD PTR [esi]
c001467a:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014681:	50                   	push   eax
c0014682:	e8 f9 c0 fe ff       	call   c0000780 <strcmp>
c0014687:	83 c4 10             	add    esp,0x10
c001468a:	85 c0                	test   eax,eax
c001468c:	75 05                	jne    c0014693 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001468e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014691:	eb 0b                	jmp    c001469e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014693:	83 c6 10             	add    esi,0x10
c0014696:	47                   	inc    edi
c0014697:	eb d0                	jmp    c0014669 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014699:	43                   	inc    ebx
c001469a:	eb bc                	jmp    c0014658 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001469c:	31 c0                	xor    eax,eax
c001469e:	5b                   	pop    ebx
c001469f:	5e                   	pop    esi
c00146a0:	5f                   	pop    edi
c00146a1:	c3                   	ret    

c00146a2 <Thr::loadKernelSymbolTable(char const*)>:
c00146a2:	55                   	push   ebp
c00146a3:	57                   	push   edi
c00146a4:	56                   	push   esi
c00146a5:	53                   	push   ebx
c00146a6:	83 ec 68             	sub    esp,0x68
c00146a9:	68 14 01 00 00       	push   0x114
c00146ae:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00146b4:	e8 1a 34 ff ff       	call   c0007ad3 <malloc>
c00146b9:	83 c4 0c             	add    esp,0xc
c00146bc:	56                   	push   esi
c00146bd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00146c1:	89 c3                	mov    ebx,eax
c00146c3:	50                   	push   eax
c00146c4:	e8 01 71 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c00146c9:	5e                   	pop    esi
c00146ca:	5f                   	pop    edi
c00146cb:	6a 01                	push   0x1
c00146cd:	53                   	push   ebx
c00146ce:	e8 bf 71 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c00146d3:	83 c4 10             	add    esp,0x10
c00146d6:	85 c0                	test   eax,eax
c00146d8:	74 0a                	je     c00146e4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	68 df 21 02 c0       	push   0xc00221df
c00146e2:	eb 34                	jmp    c0014718 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00146e4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	6a 34                	push   0x34
c00146f1:	e8 dd 33 ff ff       	call   c0007ad3 <malloc>
c00146f6:	59                   	pop    ecx
c00146f7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00146fb:	89 c7                	mov    edi,eax
c00146fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146ff:	56                   	push   esi
c0014700:	57                   	push   edi
c0014701:	6a 00                	push   0x0
c0014703:	6a 34                	push   0x34
c0014705:	53                   	push   ebx
c0014706:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014709:	83 c4 20             	add    esp,0x20
c001470c:	85 c0                	test   eax,eax
c001470e:	74 17                	je     c0014727 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	68 f6 21 02 c0       	push   0xc00221f6
c0014718:	e8 74 cb ff ff       	call   c0011291 <KePanic(char const*)>
c001471d:	83 c4 10             	add    esp,0x10
c0014720:	31 c0                	xor    eax,eax
c0014722:	e9 31 02 00 00       	jmp    c0014958 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014727:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001472d:	75 e1                	jne    c0014710 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001472f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014732:	85 c0                	test   eax,eax
c0014734:	74 da                	je     c0014710 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014736:	52                   	push   edx
c0014737:	31 d2                	xor    edx,edx
c0014739:	52                   	push   edx
c001473a:	50                   	push   eax
c001473b:	53                   	push   ebx
c001473c:	e8 0f 72 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	85 c0                	test   eax,eax
c0014746:	75 c8                	jne    c0014710 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014748:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	31 ed                	xor    ebp,ebp
c0014751:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014755:	0f af c2             	imul   eax,edx
c0014758:	50                   	push   eax
c0014759:	e8 75 33 ff ff       	call   c0007ad3 <malloc>
c001475e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014760:	89 34 24             	mov    DWORD PTR [esp],esi
c0014763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014767:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001476b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001476f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014773:	0f af c2             	imul   eax,edx
c0014776:	99                   	cdq    
c0014777:	52                   	push   edx
c0014778:	50                   	push   eax
c0014779:	53                   	push   ebx
c001477a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001477d:	83 c4 20             	add    esp,0x20
c0014780:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014788:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014790:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014798:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147a0:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00147a4:	0f b7 f5             	movzx  esi,bp
c00147a7:	0f 83 a7 00 00 00    	jae    c0014854 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00147ad:	6b f6 28             	imul   esi,esi,0x28
c00147b0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00147b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147bb:	50                   	push   eax
c00147bc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00147c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147c4:	8b 16                	mov    edx,DWORD PTR [esi]
c00147c6:	6b c0 28             	imul   eax,eax,0x28
c00147c9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00147cd:	89 d0                	mov    eax,edx
c00147cf:	31 d2                	xor    edx,edx
c00147d1:	52                   	push   edx
c00147d2:	50                   	push   eax
c00147d3:	53                   	push   ebx
c00147d4:	e8 77 71 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	6a 20                	push   0x20
c00147de:	6a 00                	push   0x0
c00147e0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147e4:	52                   	push   edx
c00147e5:	e8 06 bd fe ff       	call   c00004f0 <memset>
c00147ea:	58                   	pop    eax
c00147eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ed:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00147f1:	51                   	push   ecx
c00147f2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00147f6:	52                   	push   edx
c00147f7:	6a 00                	push   0x0
c00147f9:	6a 1f                	push   0x1f
c00147fb:	53                   	push   ebx
c00147fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147ff:	83 c4 18             	add    esp,0x18
c0014802:	68 0d 22 02 c0       	push   0xc002220d
c0014807:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001480b:	52                   	push   edx
c001480c:	e8 6f bf fe ff       	call   c0000780 <strcmp>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	85 c0                	test   eax,eax
c0014816:	75 0f                	jne    c0014827 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014818:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001481b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001481f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014827:	50                   	push   eax
c0014828:	50                   	push   eax
c0014829:	68 15 22 02 c0       	push   0xc0022215
c001482e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014832:	50                   	push   eax
c0014833:	e8 48 bf fe ff       	call   c0000780 <strcmp>
c0014838:	83 c4 10             	add    esp,0x10
c001483b:	85 c0                	test   eax,eax
c001483d:	75 0f                	jne    c001484e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001483f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014842:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014846:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001484a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001484e:	45                   	inc    ebp
c001484f:	e9 4c ff ff ff       	jmp    c00147a0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014854:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014859:	75 10                	jne    c001486b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001485b:	83 ec 0c             	sub    esp,0xc
c001485e:	68 1d 22 02 c0       	push   0xc002221d
c0014863:	e8 29 ca ff ff       	call   c0011291 <KePanic(char const*)>
c0014868:	83 c4 10             	add    esp,0x10
c001486b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014870:	75 10                	jne    c0014882 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014872:	83 ec 0c             	sub    esp,0xc
c0014875:	68 1d 22 02 c0       	push   0xc002221d
c001487a:	e8 12 ca ff ff       	call   c0011291 <KePanic(char const*)>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	50                   	push   eax
c0014883:	31 d2                	xor    edx,edx
c0014885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014889:	52                   	push   edx
c001488a:	50                   	push   eax
c001488b:	53                   	push   ebx
c001488c:	e8 bf 70 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014891:	5a                   	pop    edx
c0014892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014896:	e8 38 32 ff ff       	call   c0007ad3 <malloc>
c001489b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001489f:	31 c9                	xor    ecx,ecx
c00148a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148a7:	5e                   	pop    esi
c00148a8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00148ac:	55                   	push   ebp
c00148ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b1:	51                   	push   ecx
c00148b2:	52                   	push   edx
c00148b3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00148b7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00148bb:	53                   	push   ebx
c00148bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148bf:	83 c4 14             	add    esp,0x14
c00148c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00148c6:	e8 08 32 ff ff       	call   c0007ad3 <malloc>
c00148cb:	89 c6                	mov    esi,eax
c00148cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148d2:	56                   	push   esi
c00148d3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00148d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00148db:	51                   	push   ecx
c00148dc:	52                   	push   edx
c00148dd:	53                   	push   ebx
c00148de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148e5:	83 c4 1c             	add    esp,0x1c
c00148e8:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00148ee:	c1 e8 04             	shr    eax,0x4
c00148f1:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00148f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148fc:	31 d2                	xor    edx,edx
c00148fe:	52                   	push   edx
c00148ff:	50                   	push   eax
c0014900:	53                   	push   ebx
c0014901:	e8 4a 70 ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014906:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014908:	31 d2                	xor    edx,edx
c001490a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001490d:	56                   	push   esi
c001490e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014912:	52                   	push   edx
c0014913:	50                   	push   eax
c0014914:	53                   	push   ebx
c0014915:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014918:	83 c4 14             	add    esp,0x14
c001491b:	53                   	push   ebx
c001491c:	e8 cf 6f ff ff       	call   c000b8f0 <File::close()>
c0014921:	5d                   	pop    ebp
c0014922:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014926:	e8 b8 31 ff ff       	call   c0007ae3 <free>
c001492b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001492e:	e8 b0 31 ff ff       	call   c0007ae3 <free>
c0014933:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014938:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014946:	8d 50 01             	lea    edx,[eax+0x1]
c0014949:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014950:	b0 01                	mov    al,0x1
c0014952:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014958:	83 c4 5c             	add    esp,0x5c
c001495b:	5b                   	pop    ebx
c001495c:	5e                   	pop    esi
c001495d:	5f                   	pop    edi
c001495e:	5d                   	pop    ebp
c001495f:	c3                   	ret    

c0014960 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014960:	55                   	push   ebp
c0014961:	57                   	push   edi
c0014962:	56                   	push   esi
c0014963:	53                   	push   ebx
c0014964:	81 ec 68 03 00 00    	sub    esp,0x368
c001496a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014971:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014977:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001497b:	68 14 01 00 00       	push   0x114
c0014980:	e8 4e 31 ff ff       	call   c0007ad3 <malloc>
c0014985:	83 c4 0c             	add    esp,0xc
c0014988:	56                   	push   esi
c0014989:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014990:	50                   	push   eax
c0014991:	89 c3                	mov    ebx,eax
c0014993:	e8 32 6e ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0014998:	5f                   	pop    edi
c0014999:	5d                   	pop    ebp
c001499a:	6a 01                	push   0x1
c001499c:	53                   	push   ebx
c001499d:	e8 f0 6e ff ff       	call   c000b892 <File::open(FileOpenMode)>
c00149a2:	83 c4 10             	add    esp,0x10
c00149a5:	85 c0                	test   eax,eax
c00149a7:	0f 85 b3 06 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149ad:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00149b5:	83 ec 0c             	sub    esp,0xc
c00149b8:	6a 34                	push   0x34
c00149ba:	e8 14 31 ff ff       	call   c0007ad3 <malloc>
c00149bf:	5e                   	pop    esi
c00149c0:	8d 74 24 54          	lea    esi,[esp+0x54]
c00149c4:	89 c5                	mov    ebp,eax
c00149c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149c8:	56                   	push   esi
c00149c9:	55                   	push   ebp
c00149ca:	6a 00                	push   0x0
c00149cc:	6a 34                	push   0x34
c00149ce:	53                   	push   ebx
c00149cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149d2:	83 c4 20             	add    esp,0x20
c00149d5:	85 c0                	test   eax,eax
c00149d7:	0f 85 83 06 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149dd:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00149e4:	0f 85 76 06 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149ea:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00149ed:	85 c0                	test   eax,eax
c00149ef:	0f 84 6b 06 00 00    	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149f5:	31 d2                	xor    edx,edx
c00149f7:	51                   	push   ecx
c00149f8:	52                   	push   edx
c00149f9:	50                   	push   eax
c00149fa:	53                   	push   ebx
c00149fb:	e8 50 6f ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	85 c0                	test   eax,eax
c0014a05:	0f 85 55 06 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a0b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a15:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014a19:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a1d:	0f af c2             	imul   eax,edx
c0014a20:	50                   	push   eax
c0014a21:	e8 ad 30 ff ff       	call   c0007ad3 <malloc>
c0014a26:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a28:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a33:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a37:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a3b:	0f af c2             	imul   eax,edx
c0014a3e:	99                   	cdq    
c0014a3f:	52                   	push   edx
c0014a40:	50                   	push   eax
c0014a41:	53                   	push   ebx
c0014a42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a45:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014a48:	83 c4 20             	add    esp,0x20
c0014a4b:	85 c0                	test   eax,eax
c0014a4d:	0f 84 0d 06 00 00    	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a53:	52                   	push   edx
c0014a54:	31 d2                	xor    edx,edx
c0014a56:	52                   	push   edx
c0014a57:	50                   	push   eax
c0014a58:	53                   	push   ebx
c0014a59:	e8 f2 6e ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	85 c0                	test   eax,eax
c0014a63:	0f 85 f7 05 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a69:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014a6d:	83 ec 0c             	sub    esp,0xc
c0014a70:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014a74:	0f af c2             	imul   eax,edx
c0014a77:	50                   	push   eax
c0014a78:	e8 56 30 ff ff       	call   c0007ad3 <malloc>
c0014a7d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a7f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a8a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014a8e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014a92:	0f af c2             	imul   eax,edx
c0014a95:	99                   	cdq    
c0014a96:	52                   	push   edx
c0014a97:	50                   	push   eax
c0014a98:	53                   	push   ebx
c0014a99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a9c:	83 c4 20             	add    esp,0x20
c0014a9f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014aa5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014aa8:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014aac:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014ab0:	73 78                	jae    c0014b2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014ab2:	c1 e7 05             	shl    edi,0x5
c0014ab5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014ab9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014abc:	75 63                	jne    c0014b21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014abe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014ac1:	31 d2                	xor    edx,edx
c0014ac3:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014aca:	50                   	push   eax
c0014acb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014ace:	52                   	push   edx
c0014acf:	50                   	push   eax
c0014ad0:	53                   	push   ebx
c0014ad1:	e8 7a 6e ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	85 c0                	test   eax,eax
c0014adb:	0f 85 7f 05 00 00    	jne    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ae1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014ae8:	83 ec 0c             	sub    esp,0xc
c0014aeb:	31 d2                	xor    edx,edx
c0014aed:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014af1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014af3:	01 c6                	add    esi,eax
c0014af5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014afc:	50                   	push   eax
c0014afd:	56                   	push   esi
c0014afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b02:	52                   	push   edx
c0014b03:	50                   	push   eax
c0014b04:	53                   	push   ebx
c0014b05:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b08:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b0b:	83 c4 1c             	add    esp,0x1c
c0014b0e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b11:	50                   	push   eax
c0014b12:	6a 00                	push   0x0
c0014b14:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014b18:	56                   	push   esi
c0014b19:	e8 d2 b9 fe ff       	call   c00004f0 <memset>
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	66 ff 04 24          	inc    WORD PTR [esp]
c0014b25:	e9 7b ff ff ff       	jmp    c0014aa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014b2a:	50                   	push   eax
c0014b2b:	68 00 01 00 00       	push   0x100
c0014b30:	6a 00                	push   0x0
c0014b32:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b36:	50                   	push   eax
c0014b37:	e8 b4 b9 fe ff       	call   c00004f0 <memset>
c0014b3c:	83 c4 0c             	add    esp,0xc
c0014b3f:	68 00 01 00 00       	push   0x100
c0014b44:	6a 00                	push   0x0
c0014b46:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b4d:	50                   	push   eax
c0014b4e:	e8 9d b9 fe ff       	call   c00004f0 <memset>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014b5d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014b64:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b6c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014b74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b88:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014b8c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014b91:	0f 83 16 01 00 00    	jae    c0014cad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014b97:	6b ff 28             	imul   edi,edi,0x28
c0014b9a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014b9e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014ba1:	51                   	push   ecx
c0014ba2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014ba6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014baa:	8b 07                	mov    eax,DWORD PTR [edi]
c0014bac:	6b d2 28             	imul   edx,edx,0x28
c0014baf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014bb3:	31 d2                	xor    edx,edx
c0014bb5:	52                   	push   edx
c0014bb6:	50                   	push   eax
c0014bb7:	53                   	push   ebx
c0014bb8:	e8 93 6d ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014bbd:	83 c4 0c             	add    esp,0xc
c0014bc0:	6a 20                	push   0x20
c0014bc2:	6a 00                	push   0x0
c0014bc4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bcb:	51                   	push   ecx
c0014bcc:	e8 1f b9 fe ff       	call   c00004f0 <memset>
c0014bd1:	58                   	pop    eax
c0014bd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bd4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014bd8:	52                   	push   edx
c0014bd9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014be0:	51                   	push   ecx
c0014be1:	6a 00                	push   0x0
c0014be3:	6a 1f                	push   0x1f
c0014be5:	53                   	push   ebx
c0014be6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014be9:	83 c4 1c             	add    esp,0x1c
c0014bec:	6a 09                	push   0x9
c0014bee:	68 37 22 02 c0       	push   0xc0022237
c0014bf3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bfa:	51                   	push   ecx
c0014bfb:	e8 80 b7 fe ff       	call   c0000380 <memcmp>
c0014c00:	83 c4 10             	add    esp,0x10
c0014c03:	85 c0                	test   eax,eax
c0014c05:	75 1a                	jne    c0014c21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014c07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c0a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014c0d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c11:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c14:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c1b:	89 d0                	mov    eax,edx
c0014c1d:	40                   	inc    eax
c0014c1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c21:	52                   	push   edx
c0014c22:	6a 09                	push   0x9
c0014c24:	68 41 22 02 c0       	push   0xc0022241
c0014c29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c30:	50                   	push   eax
c0014c31:	e8 4a b7 fe ff       	call   c0000380 <memcmp>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	85 c0                	test   eax,eax
c0014c3b:	75 1a                	jne    c0014c57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014c3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014c43:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c47:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c4a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014c51:	89 c8                	mov    eax,ecx
c0014c53:	40                   	inc    eax
c0014c54:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c57:	50                   	push   eax
c0014c58:	50                   	push   eax
c0014c59:	68 0d 22 02 c0       	push   0xc002220d
c0014c5e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c65:	50                   	push   eax
c0014c66:	e8 15 bb fe ff       	call   c0000780 <strcmp>
c0014c6b:	83 c4 10             	add    esp,0x10
c0014c6e:	85 c0                	test   eax,eax
c0014c70:	75 0b                	jne    c0014c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014c72:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014c76:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c7d:	50                   	push   eax
c0014c7e:	50                   	push   eax
c0014c7f:	68 15 22 02 c0       	push   0xc0022215
c0014c84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c8b:	50                   	push   eax
c0014c8c:	e8 ef ba fe ff       	call   c0000780 <strcmp>
c0014c91:	83 c4 10             	add    esp,0x10
c0014c94:	85 c0                	test   eax,eax
c0014c96:	75 0b                	jne    c0014ca3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014c98:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014c9c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ca3:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014ca8:	e9 d7 fe ff ff       	jmp    c0014b84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014cad:	50                   	push   eax
c0014cae:	31 d2                	xor    edx,edx
c0014cb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb4:	52                   	push   edx
c0014cb5:	50                   	push   eax
c0014cb6:	53                   	push   ebx
c0014cb7:	e8 94 6c ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014cbc:	58                   	pop    eax
c0014cbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cc1:	e8 0d 2e ff ff       	call   c0007ad3 <malloc>
c0014cc6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cc8:	31 d2                	xor    edx,edx
c0014cca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014cce:	58                   	pop    eax
c0014ccf:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014cd3:	56                   	push   esi
c0014cd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cdc:	52                   	push   edx
c0014cdd:	50                   	push   eax
c0014cde:	53                   	push   ebx
c0014cdf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ce2:	83 c4 14             	add    esp,0x14
c0014ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce9:	e8 e5 2d ff ff       	call   c0007ad3 <malloc>
c0014cee:	31 d2                	xor    edx,edx
c0014cf0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014cf4:	83 c4 0c             	add    esp,0xc
c0014cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfb:	52                   	push   edx
c0014cfc:	50                   	push   eax
c0014cfd:	53                   	push   ebx
c0014cfe:	e8 4d 6c ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014d03:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d05:	31 d2                	xor    edx,edx
c0014d07:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d12:	52                   	push   edx
c0014d13:	50                   	push   eax
c0014d14:	53                   	push   ebx
c0014d15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d18:	83 c4 20             	add    esp,0x20
c0014d1b:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014d20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014d30:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014d33:	0f 84 2b 03 00 00    	je     c0015064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014d39:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d46:	c1 e8 03             	shr    eax,0x3
c0014d49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d4d:	51                   	push   ecx
c0014d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d52:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014d56:	52                   	push   edx
c0014d57:	50                   	push   eax
c0014d58:	53                   	push   ebx
c0014d59:	e8 f2 6b ff ff       	call   c000b950 <File::seek(unsigned long long)>
c0014d5e:	5e                   	pop    esi
c0014d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d63:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014d6a:	e8 64 2d ff ff       	call   c0007ad3 <malloc>
c0014d6f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d71:	31 d2                	xor    edx,edx
c0014d73:	89 c7                	mov    edi,eax
c0014d75:	58                   	pop    eax
c0014d76:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d7a:	50                   	push   eax
c0014d7b:	57                   	push   edi
c0014d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d80:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014d87:	52                   	push   edx
c0014d88:	50                   	push   eax
c0014d89:	53                   	push   ebx
c0014d8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d8d:	83 c4 20             	add    esp,0x20
c0014d90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014d98:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014d9c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014da0:	0f 8d a5 02 00 00    	jge    c001504b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014da6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014dab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014daf:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014db2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014db6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dba:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014dbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dc2:	c1 e8 08             	shr    eax,0x8
c0014dc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014dc9:	89 c2                	mov    edx,eax
c0014dcb:	c1 e2 04             	shl    edx,0x4
c0014dce:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014dd2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014dd5:	85 f6                	test   esi,esi
c0014dd7:	0f 85 cf 00 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014ddd:	83 ec 0c             	sub    esp,0xc
c0014de0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de8:	03 02                	add    eax,DWORD PTR [edx]
c0014dea:	50                   	push   eax
c0014deb:	e8 63 f8 ff ff       	call   c0014653 <Thr::getAddressOfKernelSymbol(char const*)>
c0014df0:	83 c4 10             	add    esp,0x10
c0014df3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014df7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014dfc:	85 c0                	test   eax,eax
c0014dfe:	89 c6                	mov    esi,eax
c0014e00:	0f 85 a6 00 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e06:	83 ec 0c             	sub    esp,0xc
c0014e09:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e11:	03 02                	add    eax,DWORD PTR [edx]
c0014e13:	50                   	push   eax
c0014e14:	e8 63 c6 ff ff       	call   c001147c <KeResolveCompatibilitySymbol(char*)>
c0014e19:	83 c4 10             	add    esp,0x10
c0014e1c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e20:	85 c0                	test   eax,eax
c0014e22:	89 c6                	mov    esi,eax
c0014e24:	0f 85 82 00 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e2a:	50                   	push   eax
c0014e2b:	50                   	push   eax
c0014e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e30:	03 02                	add    eax,DWORD PTR [edx]
c0014e32:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014e36:	50                   	push   eax
c0014e37:	68 4b 22 02 c0       	push   0xc002224b
c0014e3c:	e8 c9 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014e41:	58                   	pop    eax
c0014e42:	5a                   	pop    edx
c0014e43:	68 65 22 02 c0       	push   0xc0022265
c0014e48:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e4f:	51                   	push   ecx
c0014e50:	e8 fb b7 fe ff       	call   c0000650 <strcpy>
c0014e55:	59                   	pop    ecx
c0014e56:	58                   	pop    eax
c0014e57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e5f:	03 02                	add    eax,DWORD PTR [edx]
c0014e61:	50                   	push   eax
c0014e62:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e69:	51                   	push   ecx
c0014e6a:	e8 01 ba fe ff       	call   c0000870 <strcat>
c0014e6f:	58                   	pop    eax
c0014e70:	5a                   	pop    edx
c0014e71:	68 fb 22 02 c0       	push   0xc00222fb
c0014e76:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e7d:	51                   	push   ecx
c0014e7e:	e8 ed b9 fe ff       	call   c0000870 <strcat>
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e8b:	0f 84 77 01 00 00    	je     c0015008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e91:	83 ec 0c             	sub    esp,0xc
c0014e94:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e9b:	51                   	push   ecx
c0014e9c:	e8 f0 c3 ff ff       	call   c0011291 <KePanic(char const*)>
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014ea8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014eac:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014eb1:	83 f8 01             	cmp    eax,0x1
c0014eb4:	0f 85 9b 00 00 00    	jne    c0014f55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014eba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ebe:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014ec5:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014ec9:	01 d0                	add    eax,edx
c0014ecb:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014ed3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014ed7:	0f 94 c0             	sete   al
c0014eda:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014ee2:	0f 94 c1             	sete   cl
c0014ee5:	09 c1                	or     ecx,eax
c0014ee7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014eeb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ef0:	0f b6 c9             	movzx  ecx,cl
c0014ef3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef5:	74 41                	je     c0014f38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014ef7:	8d 14 06             	lea    edx,[esi+eax*1]
c0014efa:	85 c9                	test   ecx,ecx
c0014efc:	75 15                	jne    c0014f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014efe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f02:	66 83 f8 0c          	cmp    ax,0xc
c0014f06:	76 05                	jbe    c0014f0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014f08:	b8 0c 00 00 00       	mov    eax,0xc
c0014f0d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f11:	76 37                	jbe    c0014f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f13:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f18:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f1c:	0f 84 e6 00 00 00    	je     c0015008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f22:	83 ec 0c             	sub    esp,0xc
c0014f25:	68 7c 22 02 c0       	push   0xc002227c
c0014f2a:	e8 62 c3 ff ff       	call   c0011291 <KePanic(char const*)>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f36:	eb 12                	jmp    c0014f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f38:	01 c2                	add    edx,eax
c0014f3a:	85 c9                	test   ecx,ecx
c0014f3c:	75 0c                	jne    c0014f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f3e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f42:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f46:	77 02                	ja     c0014f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f48:	01 f2                	add    edx,esi
c0014f4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f4e:	89 10                	mov    DWORD PTR [eax],edx
c0014f50:	e9 ed 00 00 00       	jmp    c0015042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f55:	83 f8 02             	cmp    eax,0x2
c0014f58:	0f 85 81 00 00 00    	jne    c0014fdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014f5e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f65:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014f69:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014f6d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014f75:	74 21                	je     c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014f77:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014f7f:	74 17                	je     c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014f81:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014f85:	ba 0a 00 00 00       	mov    edx,0xa
c0014f8a:	83 f9 0e             	cmp    ecx,0xe
c0014f8d:	77 03                	ja     c0014f92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014f8f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014f92:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014f96:	76 1f                	jbe    c0014fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014f98:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fa1:	74 65                	je     c0015008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014fa3:	83 ec 0c             	sub    esp,0xc
c0014fa6:	68 98 22 02 c0       	push   0xc0022298
c0014fab:	e8 e1 c2 ff ff       	call   c0011291 <KePanic(char const*)>
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fb7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014fbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0014fbe:	74 15                	je     c0014fd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014fc0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014fc4:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014fcb:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014fcf:	01 d1                	add    ecx,edx
c0014fd1:	01 ce                	add    esi,ecx
c0014fd3:	eb 06                	jmp    c0014fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014fd5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014fd9:	01 d6                	add    esi,edx
c0014fdb:	89 30                	mov    DWORD PTR [eax],esi
c0014fdd:	eb 63                	jmp    c0015042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014fdf:	56                   	push   esi
c0014fe0:	56                   	push   esi
c0014fe1:	50                   	push   eax
c0014fe2:	68 b4 22 02 c0       	push   0xc00222b4
c0014fe7:	e8 1e 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014fec:	83 c4 10             	add    esp,0x10
c0014fef:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ff4:	74 12                	je     c0015008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ff6:	83 ec 0c             	sub    esp,0xc
c0014ff9:	68 bf 22 02 c0       	push   0xc00222bf
c0014ffe:	e8 8e c2 ff ff       	call   c0011291 <KePanic(char const*)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	eb 3a                	jmp    c0015042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	53                   	push   ebx
c001500c:	e8 df 68 ff ff       	call   c000b8f0 <File::close()>
c0015011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015013:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015016:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015019:	89 3c 24             	mov    DWORD PTR [esp],edi
c001501c:	e8 c2 2a ff ff       	call   c0007ae3 <free>
c0015021:	59                   	pop    ecx
c0015022:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015026:	e8 b8 2a ff ff       	call   c0007ae3 <free>
c001502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001502e:	e8 b0 2a ff ff       	call   c0007ae3 <free>
c0015033:	5b                   	pop    ebx
c0015034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015038:	e8 a6 2a ff ff       	call   c0007ae3 <free>
c001503d:	83 c4 10             	add    esp,0x10
c0015040:	eb 1e                	jmp    c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015042:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015046:	e9 4d fd ff ff       	jmp    c0014d98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001504b:	83 ec 0c             	sub    esp,0xc
c001504e:	57                   	push   edi
c001504f:	e8 8f 2a ff ff       	call   c0007ae3 <free>
c0015054:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015058:	83 c4 10             	add    esp,0x10
c001505b:	e9 cc fc ff ff       	jmp    c0014d2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015060:	31 c0                	xor    eax,eax
c0015062:	eb 32                	jmp    c0015096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015064:	83 ec 0c             	sub    esp,0xc
c0015067:	53                   	push   ebx
c0015068:	e8 83 68 ff ff       	call   c000b8f0 <File::close()>
c001506d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001506f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015075:	58                   	pop    eax
c0015076:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001507a:	e8 64 2a ff ff       	call   c0007ae3 <free>
c001507f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015082:	e8 5c 2a ff ff       	call   c0007ae3 <free>
c0015087:	5a                   	pop    edx
c0015088:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001508c:	e8 52 2a ff ff       	call   c0007ae3 <free>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	b0 01                	mov    al,0x1
c0015096:	81 c4 5c 03 00 00    	add    esp,0x35c
c001509c:	5b                   	pop    ebx
c001509d:	5e                   	pop    esi
c001509e:	5f                   	pop    edi
c001509f:	5d                   	pop    ebp
c00150a0:	c3                   	ret    

c00150a1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00150a1:	56                   	push   esi
c00150a2:	31 d2                	xor    edx,edx
c00150a4:	53                   	push   ebx
c00150a5:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00150ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150af:	39 d3                	cmp    ebx,edx
c00150b1:	7e 1b                	jle    c00150ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00150b3:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00150ba:	39 c8                	cmp    eax,ecx
c00150bc:	77 0d                	ja     c00150cb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00150be:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00150c5:	01 c6                	add    esi,eax
c00150c7:	39 ce                	cmp    esi,ecx
c00150c9:	77 05                	ja     c00150d0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00150cb:	42                   	inc    edx
c00150cc:	eb e1                	jmp    c00150af <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00150ce:	31 c0                	xor    eax,eax
c00150d0:	5b                   	pop    ebx
c00150d1:	5e                   	pop    esi
c00150d2:	c3                   	ret    

c00150d3 <Thr::getDriverNameFromAddress(unsigned long)>:
c00150d3:	53                   	push   ebx
c00150d4:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00150da:	31 c0                	xor    eax,eax
c00150dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00150e0:	39 c3                	cmp    ebx,eax
c00150e2:	7e 22                	jle    c0015106 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00150e4:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00150eb:	39 ca                	cmp    edx,ecx
c00150ed:	77 14                	ja     c0015103 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150ef:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00150f6:	39 ca                	cmp    edx,ecx
c00150f8:	76 09                	jbe    c0015103 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150fa:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015101:	eb 05                	jmp    c0015108 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015103:	40                   	inc    eax
c0015104:	eb da                	jmp    c00150e0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015106:	31 c0                	xor    eax,eax
c0015108:	5b                   	pop    ebx
c0015109:	c3                   	ret    

c001510a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001510a:	53                   	push   ebx
c001510b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001510f:	53                   	push   ebx
c0015110:	e8 8c ff ff ff       	call   c00150a1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015115:	5a                   	pop    edx
c0015116:	31 d2                	xor    edx,edx
c0015118:	85 c0                	test   eax,eax
c001511a:	74 04                	je     c0015120 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001511c:	89 da                	mov    edx,ebx
c001511e:	29 c2                	sub    edx,eax
c0015120:	5b                   	pop    ebx
c0015121:	89 d0                	mov    eax,edx
c0015123:	c3                   	ret    

c0015124 <Thr::loadDLL(char const*, bool)>:
c0015124:	55                   	push   ebp
c0015125:	57                   	push   edi
c0015126:	56                   	push   esi
c0015127:	53                   	push   ebx
c0015128:	81 ec 34 01 00 00    	sub    esp,0x134
c001512e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015135:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001513c:	56                   	push   esi
c001513d:	68 d7 22 02 c0       	push   0xc00222d7
c0015142:	e8 c3 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015147:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001514e:	e8 80 29 ff ff       	call   c0007ad3 <malloc>
c0015153:	83 c4 0c             	add    esp,0xc
c0015156:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001515c:	56                   	push   esi
c001515d:	50                   	push   eax
c001515e:	89 c3                	mov    ebx,eax
c0015160:	e8 65 66 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0015165:	83 c4 10             	add    esp,0x10
c0015168:	85 db                	test   ebx,ebx
c001516a:	75 3c                	jne    c00151a8 <Thr::loadDLL(char const*, bool)+0x84>
c001516c:	89 e8                	mov    eax,ebp
c001516e:	84 c0                	test   al,al
c0015170:	0f 84 e1 01 00 00    	je     c0015357 <Thr::loadDLL(char const*, bool)+0x233>
c0015176:	50                   	push   eax
c0015177:	50                   	push   eax
c0015178:	68 e8 22 02 c0       	push   0xc00222e8
c001517d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015181:	57                   	push   edi
c0015182:	e8 c9 b4 fe ff       	call   c0000650 <strcpy>
c0015187:	58                   	pop    eax
c0015188:	5a                   	pop    edx
c0015189:	56                   	push   esi
c001518a:	57                   	push   edi
c001518b:	e8 e0 b6 fe ff       	call   c0000870 <strcat>
c0015190:	59                   	pop    ecx
c0015191:	58                   	pop    eax
c0015192:	68 fb 22 02 c0       	push   0xc00222fb
c0015197:	57                   	push   edi
c0015198:	e8 d3 b6 fe ff       	call   c0000870 <strcat>
c001519d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151a0:	e8 ec c0 ff ff       	call   c0011291 <KePanic(char const*)>
c00151a5:	83 c4 10             	add    esp,0x10
c00151a8:	50                   	push   eax
c00151a9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00151ad:	50                   	push   eax
c00151ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00151b2:	50                   	push   eax
c00151b3:	53                   	push   ebx
c00151b4:	e8 db 69 ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	85 db                	test   ebx,ebx
c00151be:	74 0c                	je     c00151cc <Thr::loadDLL(char const*, bool)+0xa8>
c00151c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151c2:	83 ec 0c             	sub    esp,0xc
c00151c5:	53                   	push   ebx
c00151c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151c9:	83 c4 10             	add    esp,0x10
c00151cc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00151d1:	75 0a                	jne    c00151dd <Thr::loadDLL(char const*, bool)+0xb9>
c00151d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151d7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00151db:	75 3e                	jne    c001521b <Thr::loadDLL(char const*, bool)+0xf7>
c00151dd:	89 e8                	mov    eax,ebp
c00151df:	31 db                	xor    ebx,ebx
c00151e1:	84 c0                	test   al,al
c00151e3:	0f 84 6e 01 00 00    	je     c0015357 <Thr::loadDLL(char const*, bool)+0x233>
c00151e9:	50                   	push   eax
c00151ea:	50                   	push   eax
c00151eb:	68 e8 22 02 c0       	push   0xc00222e8
c00151f0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00151f4:	53                   	push   ebx
c00151f5:	e8 56 b4 fe ff       	call   c0000650 <strcpy>
c00151fa:	58                   	pop    eax
c00151fb:	5a                   	pop    edx
c00151fc:	56                   	push   esi
c00151fd:	53                   	push   ebx
c00151fe:	e8 6d b6 fe ff       	call   c0000870 <strcat>
c0015203:	59                   	pop    ecx
c0015204:	5f                   	pop    edi
c0015205:	68 fb 22 02 c0       	push   0xc00222fb
c001520a:	53                   	push   ebx
c001520b:	e8 60 b6 fe ff       	call   c0000870 <strcat>
c0015210:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015213:	e8 79 c0 ff ff       	call   c0011291 <KePanic(char const*)>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	53                   	push   ebx
c001521c:	6a 03                	push   0x3
c001521e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015222:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015226:	05 ff 0f 00 00       	add    eax,0xfff
c001522b:	83 d2 00             	adc    edx,0x0
c001522e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015232:	50                   	push   eax
c0015233:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015239:	e8 c8 4b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001523e:	89 c3                	mov    ebx,eax
c0015240:	58                   	pop    eax
c0015241:	5a                   	pop    edx
c0015242:	53                   	push   ebx
c0015243:	68 d2 08 02 c0       	push   0xc00208d2
c0015248:	e8 bd 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001524d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015250:	e8 2b b3 fe ff       	call   c0000580 <strlen>
c0015255:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c001525b:	40                   	inc    eax
c001525c:	89 04 24             	mov    DWORD PTR [esp],eax
c001525f:	e8 6f 28 ff ff       	call   c0007ad3 <malloc>
c0015264:	59                   	pop    ecx
c0015265:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c001526c:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015271:	5f                   	pop    edi
c0015272:	56                   	push   esi
c0015273:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001527a:	e8 d1 b3 fe ff       	call   c0000650 <strcpy>
c001527f:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015284:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001528b:	8d 50 01             	lea    edx,[eax+0x1]
c001528e:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015294:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015298:	83 c4 0c             	add    esp,0xc
c001529b:	6a 01                	push   0x1
c001529d:	53                   	push   ebx
c001529e:	56                   	push   esi
c001529f:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00152a6:	e8 b5 f6 ff ff       	call   c0014960 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	89 c7                	mov    edi,eax
c00152b0:	89 f8                	mov    eax,edi
c00152b2:	83 f0 01             	xor    eax,0x1
c00152b5:	84 c0                	test   al,al
c00152b7:	74 18                	je     c00152d1 <Thr::loadDLL(char const*, bool)+0x1ad>
c00152b9:	89 e8                	mov    eax,ebp
c00152bb:	84 c0                	test   al,al
c00152bd:	74 12                	je     c00152d1 <Thr::loadDLL(char const*, bool)+0x1ad>
c00152bf:	83 ec 0c             	sub    esp,0xc
c00152c2:	68 fd 22 02 c0       	push   0xc00222fd
c00152c7:	e8 c5 bf ff ff       	call   c0011291 <KePanic(char const*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	eb 06                	jmp    c00152d7 <Thr::loadDLL(char const*, bool)+0x1b3>
c00152d1:	89 f8                	mov    eax,edi
c00152d3:	84 c0                	test   al,al
c00152d5:	75 10                	jne    c00152e7 <Thr::loadDLL(char const*, bool)+0x1c3>
c00152d7:	83 ec 0c             	sub    esp,0xc
c00152da:	68 1c 23 02 c0       	push   0xc002231c
c00152df:	e8 ad bf ff ff       	call   c0011291 <KePanic(char const*)>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	31 f6                	xor    esi,esi
c00152e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152f1:	05 ff 0f 00 00       	add    eax,0xfff
c00152f6:	83 d2 00             	adc    edx,0x0
c00152f9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015301:	c1 ea 0c             	shr    edx,0xc
c0015304:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015308:	ba 00 00 00 00       	mov    edx,0x0
c001530d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015311:	89 d0                	mov    eax,edx
c0015313:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015317:	73 32                	jae    c001534b <Thr::loadDLL(char const*, bool)+0x227>
c0015319:	50                   	push   eax
c001531a:	50                   	push   eax
c001531b:	89 f0                	mov    eax,esi
c001531d:	c1 e0 0c             	shl    eax,0xc
c0015320:	01 d8                	add    eax,ebx
c0015322:	50                   	push   eax
c0015323:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015329:	e8 bc 45 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	8b 00                	mov    eax,DWORD PTR [eax]
c0015333:	a8 60                	test   al,0x60
c0015335:	75 11                	jne    c0015348 <Thr::loadDLL(char const*, bool)+0x224>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001533f:	50                   	push   eax
c0015340:	e8 34 2a ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	46                   	inc    esi
c0015349:	eb 9e                	jmp    c00152e9 <Thr::loadDLL(char const*, bool)+0x1c5>
c001534b:	89 f8                	mov    eax,edi
c001534d:	84 c0                	test   al,al
c001534f:	b8 00 00 00 00       	mov    eax,0x0
c0015354:	0f 44 d8             	cmove  ebx,eax
c0015357:	81 c4 2c 01 00 00    	add    esp,0x12c
c001535d:	89 d8                	mov    eax,ebx
c001535f:	5b                   	pop    ebx
c0015360:	5e                   	pop    esi
c0015361:	5f                   	pop    edi
c0015362:	5d                   	pop    ebp
c0015363:	c3                   	ret    

c0015364 <Thr::executeDLL(unsigned long, void*)>:
c0015364:	56                   	push   esi
c0015365:	53                   	push   ebx
c0015366:	52                   	push   edx
c0015367:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001536b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001536f:	85 db                	test   ebx,ebx
c0015371:	75 10                	jne    c0015383 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015373:	83 ec 0c             	sub    esp,0xc
c0015376:	68 38 23 02 c0       	push   0xc0022338
c001537b:	e8 11 bf ff ff       	call   c0011291 <KePanic(char const*)>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	50                   	push   eax
c0015384:	50                   	push   eax
c0015385:	53                   	push   ebx
c0015386:	68 62 23 02 c0       	push   0xc0022362
c001538b:	e8 7a 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015390:	89 d8                	mov    eax,ebx
c0015392:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015396:	83 c4 14             	add    esp,0x14
c0015399:	5b                   	pop    ebx
c001539a:	5e                   	pop    esi
c001539b:	ff e0                	jmp    eax
c001539d:	66 90                	xchg   ax,ax
c001539f:	90                   	nop

c00153a0 <userModeEntryPoint(void*)>:
c00153a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00153a5:	83 e8 01             	sub    eax,0x1
c00153a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00153ad:	75 01                	jne    c00153b0 <userModeEntryPoint(void*)+0x10>
c00153af:	fb                   	sti    
c00153b0:	fb                   	sti    
c00153b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00153bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153c3:	e9 77 ae fe ff       	jmp    c000023f <goToUsermode>

c00153c8 <changeTSS>:
c00153c8:	83 ec 14             	sub    esp,0x14
c00153cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153d3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00153d8:	c1 e2 15             	shl    edx,0x15
c00153db:	29 d0                	sub    eax,edx
c00153dd:	50                   	push   eax
c00153de:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00153e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153e9:	05 7c 11 00 00       	add    eax,0x117c
c00153ee:	50                   	push   eax
c00153ef:	e8 48 3b ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00153f4:	83 c4 1c             	add    esp,0x1c
c00153f7:	c3                   	ret    

c00153f8 <switchToThread(ThreadControlBlock*)>:
c00153f8:	57                   	push   edi
c00153f9:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00153ff:	56                   	push   esi
c0015400:	53                   	push   ebx
c0015401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015405:	85 c9                	test   ecx,ecx
c0015407:	0f 85 8b 00 00 00    	jne    c0015498 <switchToThread(ThreadControlBlock*)+0xa0>
c001540d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015411:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015417:	74 7b                	je     c0015494 <switchToThread(ThreadControlBlock*)+0x9c>
c0015419:	b8 00 04 00 00       	mov    eax,0x400
c001541e:	29 d0                	sub    eax,edx
c0015420:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015423:	d1 f8                	sar    eax,1
c0015425:	01 d0                	add    eax,edx
c0015427:	90                   	nop
c0015428:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001542b:	e8 04 28 00 00       	call   c0017c34 <HalQueryPerformanceCounter()>
c0015430:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015435:	89 c6                	mov    esi,eax
c0015437:	89 d7                	mov    edi,edx
c0015439:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c001543f:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015444:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001544a:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015450:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015456:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001545c:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015462:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015468:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001546b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001546e:	01 c6                	add    esi,eax
c0015470:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015473:	11 d7                	adc    edi,edx
c0015475:	83 ec 0c             	sub    esp,0xc
c0015478:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001547b:	53                   	push   ebx
c001547c:	e8 f6 ad fe ff       	call   c0000277 <switchToThreadASM>
c0015481:	0f 20 c0             	mov    eax,cr0
c0015484:	83 c8 08             	or     eax,0x8
c0015487:	0f 22 c0             	mov    cr0,eax
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	5b                   	pop    ebx
c001548e:	5e                   	pop    esi
c001548f:	5f                   	pop    edi
c0015490:	c3                   	ret    
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	31 c0                	xor    eax,eax
c0015496:	eb 90                	jmp    c0015428 <switchToThread(ThreadControlBlock*)+0x30>
c0015498:	5b                   	pop    ebx
c0015499:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00154a3:	5e                   	pop    esi
c00154a4:	5f                   	pop    edi
c00154a5:	c3                   	ret    
c00154a6:	66 90                	xchg   ax,ax

c00154a8 <Process::addArgs(char**)>:
c00154a8:	57                   	push   edi
c00154a9:	56                   	push   esi
c00154aa:	53                   	push   ebx
c00154ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00154af:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00154b3:	85 f6                	test   esi,esi
c00154b5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00154bf:	74 4f                	je     c0015510 <Process::addArgs(char**)+0x68>
c00154c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00154c3:	85 c0                	test   eax,eax
c00154c5:	74 49                	je     c0015510 <Process::addArgs(char**)+0x68>
c00154c7:	31 db                	xor    ebx,ebx
c00154c9:	8d 76 00             	lea    esi,[esi+0x0]
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	50                   	push   eax
c00154d0:	e8 ab b0 fe ff       	call   c0000580 <strlen>
c00154d5:	83 c0 01             	add    eax,0x1
c00154d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00154db:	e8 f3 25 ff ff       	call   c0007ad3 <malloc>
c00154e0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00154e7:	5a                   	pop    edx
c00154e8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00154eb:	83 c3 01             	add    ebx,0x1
c00154ee:	59                   	pop    ecx
c00154ef:	52                   	push   edx
c00154f0:	50                   	push   eax
c00154f1:	e8 5a b1 fe ff       	call   c0000650 <strcpy>
c00154f6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	83 c1 01             	add    ecx,0x1
c0015502:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015508:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001550b:	85 c0                	test   eax,eax
c001550d:	75 bd                	jne    c00154cc <Process::addArgs(char**)+0x24>
c001550f:	90                   	nop
c0015510:	5b                   	pop    ebx
c0015511:	5e                   	pop    esi
c0015512:	5f                   	pop    edi
c0015513:	c3                   	ret    

c0015514 <Process::Process(char const*, Process*, char**)>:
c0015514:	56                   	push   esi
c0015515:	53                   	push   ebx
c0015516:	83 ec 14             	sub    esp,0x14
c0015519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001551d:	05 0c 02 00 00       	add    eax,0x20c
c0015522:	bb 07 00 00 00       	mov    ebx,0x7
c0015527:	89 c6                	mov    esi,eax
c0015529:	8d 76 00             	lea    esi,[esi+0x0]
c001552c:	85 db                	test   ebx,ebx
c001552e:	78 14                	js     c0015544 <Process::Process(char const*, Process*, char**)+0x30>
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	56                   	push   esi
c0015534:	e8 2f a6 00 00       	call   c001fb68 <ThreadControlBlock::ThreadControlBlock()>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	83 c6 5f             	add    esi,0x5f
c001553f:	83 eb 01             	sub    ebx,0x1
c0015542:	eb e8                	jmp    c001552c <Process::Process(char const*, Process*, char**)+0x18>
c0015544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015548:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001554f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015553:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001555a:	83 ec 0c             	sub    esp,0xc
c001555d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015561:	e8 20 bb ff ff       	call   c0011086 <KeNewProcessEnv(Process*)>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	89 c2                	mov    edx,eax
c001556b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015579:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015582:	a1 80 35 02 c0       	mov    eax,ds:0xc0023580
c0015587:	8d 50 01             	lea    edx,[eax+0x1]
c001558a:	89 15 80 35 02 c0    	mov    DWORD PTR ds:0xc0023580,edx
c0015590:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015594:	89 02                	mov    DWORD PTR [edx],eax
c0015596:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001559e:	83 ec 0c             	sub    esp,0xc
c00155a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155a5:	e8 29 25 ff ff       	call   c0007ad3 <malloc>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	89 c3                	mov    ebx,eax
c00155af:	83 ec 08             	sub    esp,0x8
c00155b2:	6a 00                	push   0x0
c00155b4:	53                   	push   ebx
c00155b5:	e8 98 4a ff ff       	call   c000a052 <VAS::VAS(bool)>
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00155c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155cb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155dd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00155e3:	e8 c2 c0 ff ff       	call   c00116aa <KeInitSignals()>
c00155e8:	89 c2                	mov    edx,eax
c00155ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00155f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155fe:	85 c0                	test   eax,eax
c0015600:	74 42                	je     c0015644 <Process::Process(char const*, Process*, char**)+0x130>
c0015602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015606:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001560c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015616:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001561c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015620:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015626:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001562c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015630:	05 0c 01 00 00       	add    eax,0x10c
c0015635:	83 ec 08             	sub    esp,0x8
c0015638:	52                   	push   edx
c0015639:	50                   	push   eax
c001563a:	e8 11 b0 fe ff       	call   c0000650 <strcpy>
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	eb 64                	jmp    c00156a8 <Process::Process(char const*, Process*, char**)+0x194>
c0015644:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015653:	e8 7b 24 ff ff       	call   c0007ad3 <malloc>
c0015658:	83 c4 10             	add    esp,0x10
c001565b:	89 c3                	mov    ebx,eax
c001565d:	83 ec 08             	sub    esp,0x8
c0015660:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015664:	53                   	push   ebx
c0015665:	e8 02 36 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015671:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015681:	83 ec 0c             	sub    esp,0xc
c0015684:	50                   	push   eax
c0015685:	e8 90 2e ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001568a:	83 c4 10             	add    esp,0x10
c001568d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015691:	05 0c 01 00 00       	add    eax,0x10c
c0015696:	83 ec 08             	sub    esp,0x8
c0015699:	68 81 23 02 c0       	push   0xc0022381
c001569e:	50                   	push   eax
c001569f:	e8 ac af fe ff       	call   c0000650 <strcpy>
c00156a4:	83 c4 10             	add    esp,0x10
c00156a7:	90                   	nop
c00156a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ac:	83 c0 0c             	add    eax,0xc
c00156af:	83 ec 08             	sub    esp,0x8
c00156b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156b6:	50                   	push   eax
c00156b7:	e8 94 af fe ff       	call   c0000650 <strcpy>
c00156bc:	83 c4 10             	add    esp,0x10
c00156bf:	83 ec 08             	sub    esp,0x8
c00156c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00156c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156ca:	e8 d9 fd ff ff       	call   c00154a8 <Process::addArgs(char**)>
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	83 ec 08             	sub    esp,0x8
c00156d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156dd:	e8 3f ed ff ff       	call   c0014421 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00156e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156ed:	83 f0 01             	xor    eax,0x1
c00156f0:	88 c2                	mov    dl,al
c00156f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00156fc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015701:	83 ec 04             	sub    esp,0x4
c0015704:	50                   	push   eax
c0015705:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015709:	68 d8 23 02 c0       	push   0xc00223d8
c001570e:	e8 f7 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	90                   	nop
c0015717:	83 c4 14             	add    esp,0x14
c001571a:	5b                   	pop    ebx
c001571b:	5e                   	pop    esi
c001571c:	c3                   	ret    
c001571d:	90                   	nop
c001571e:	66 90                	xchg   ax,ax

c0015720 <Process::Process(bool, char const*, Process*, char**)>:
c0015720:	56                   	push   esi
c0015721:	53                   	push   ebx
c0015722:	83 ec 24             	sub    esp,0x24
c0015725:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015729:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001572d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015731:	05 0c 02 00 00       	add    eax,0x20c
c0015736:	bb 07 00 00 00       	mov    ebx,0x7
c001573b:	89 c6                	mov    esi,eax
c001573d:	8d 76 00             	lea    esi,[esi+0x0]
c0015740:	85 db                	test   ebx,ebx
c0015742:	78 14                	js     c0015758 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	56                   	push   esi
c0015748:	e8 1b a4 00 00       	call   c001fb68 <ThreadControlBlock::ThreadControlBlock()>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	83 c6 5f             	add    esi,0x5f
c0015753:	83 eb 01             	sub    ebx,0x1
c0015756:	eb e8                	jmp    c0015740 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001575c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015767:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001576e:	83 ec 0c             	sub    esp,0xc
c0015771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015775:	e8 0c b9 ff ff       	call   c0011086 <KeNewProcessEnv(Process*)>
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	89 c2                	mov    edx,eax
c001577f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015783:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001578d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015796:	a1 80 35 02 c0       	mov    eax,ds:0xc0023580
c001579b:	8d 50 01             	lea    edx,[eax+0x1]
c001579e:	89 15 80 35 02 c0    	mov    DWORD PTR ds:0xc0023580,edx
c00157a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00157a8:	89 02                	mov    DWORD PTR [edx],eax
c00157aa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00157b2:	83 ec 0c             	sub    esp,0xc
c00157b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157b9:	e8 15 23 ff ff       	call   c0007ad3 <malloc>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	89 c3                	mov    ebx,eax
c00157c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00157c8:	83 ec 08             	sub    esp,0x8
c00157cb:	50                   	push   eax
c00157cc:	53                   	push   ebx
c00157cd:	e8 80 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00157df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00157f5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00157fb:	e8 aa be ff ff       	call   c00116aa <KeInitSignals()>
c0015800:	89 c2                	mov    edx,eax
c0015802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015806:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001580c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015810:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015816:	85 c0                	test   eax,eax
c0015818:	74 42                	je     c001585c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001581a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001581e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015824:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001582a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001582e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015838:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001583e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015848:	05 0c 01 00 00       	add    eax,0x10c
c001584d:	83 ec 08             	sub    esp,0x8
c0015850:	52                   	push   edx
c0015851:	50                   	push   eax
c0015852:	e8 f9 ad fe ff       	call   c0000650 <strcpy>
c0015857:	83 c4 10             	add    esp,0x10
c001585a:	eb 64                	jmp    c00158c0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001585c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001586b:	e8 63 22 ff ff       	call   c0007ad3 <malloc>
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	89 c3                	mov    ebx,eax
c0015875:	83 ec 08             	sub    esp,0x8
c0015878:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001587c:	53                   	push   ebx
c001587d:	e8 ea 33 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015889:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001588f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015893:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015899:	83 ec 0c             	sub    esp,0xc
c001589c:	50                   	push   eax
c001589d:	e8 78 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a9:	05 0c 01 00 00       	add    eax,0x10c
c00158ae:	83 ec 08             	sub    esp,0x8
c00158b1:	68 81 23 02 c0       	push   0xc0022381
c00158b6:	50                   	push   eax
c00158b7:	e8 94 ad fe ff       	call   c0000650 <strcpy>
c00158bc:	83 c4 10             	add    esp,0x10
c00158bf:	90                   	nop
c00158c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158c4:	83 c0 0c             	add    eax,0xc
c00158c7:	83 ec 08             	sub    esp,0x8
c00158ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158ce:	50                   	push   eax
c00158cf:	e8 7c ad fe ff       	call   c0000650 <strcpy>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	83 ec 08             	sub    esp,0x8
c00158da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00158de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158e2:	e8 c1 fb ff ff       	call   c00154a8 <Process::addArgs(char**)>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	90                   	nop
c00158eb:	83 c4 24             	add    esp,0x24
c00158ee:	5b                   	pop    ebx
c00158ef:	5e                   	pop    esi
c00158f0:	c3                   	ret    
c00158f1:	8d 76 00             	lea    esi,[esi+0x0]

c00158f4 <taskStartupFunction>:
c00158f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00158fc:	c3                   	ret    
c00158fd:	90                   	nop
c00158fe:	66 90                	xchg   ax,ax

c0015900 <Semaphore::Semaphore(int)>:
c0015900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015908:	89 10                	mov    DWORD PTR [eax],edx
c001590a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001590e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015919:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015924:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001592b:	90                   	nop
c001592c:	c3                   	ret    
c001592d:	90                   	nop
c001592e:	66 90                	xchg   ax,ax

c0015930 <Mutex::Mutex()>:
c0015930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015934:	6a 01                	push   0x1
c0015936:	50                   	push   eax
c0015937:	e8 c4 ff ff ff       	call   c0015900 <Semaphore::Semaphore(int)>
c001593c:	83 c4 08             	add    esp,0x8
c001593f:	90                   	nop
c0015940:	c3                   	ret    
c0015941:	90                   	nop
c0015942:	66 90                	xchg   ax,ax

c0015944 <Process::createThread(void (*)(void*), void*, int)>:
c0015944:	57                   	push   edi
c0015945:	31 c9                	xor    ecx,ecx
c0015947:	56                   	push   esi
c0015948:	53                   	push   ebx
c0015949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001594d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015954:	89 f2                	mov    edx,esi
c0015956:	66 90                	xchg   ax,ax
c0015958:	0f b7 c2             	movzx  eax,dx
c001595b:	80 e2 01             	and    dl,0x1
c001595e:	74 14                	je     c0015974 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015960:	d1 f8                	sar    eax,1
c0015962:	83 c1 01             	add    ecx,0x1
c0015965:	83 f9 10             	cmp    ecx,0x10
c0015968:	89 c2                	mov    edx,eax
c001596a:	75 ec                	jne    c0015958 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001596c:	31 db                	xor    ebx,ebx
c001596e:	89 d8                	mov    eax,ebx
c0015970:	5b                   	pop    ebx
c0015971:	5e                   	pop    esi
c0015972:	5f                   	pop    edi
c0015973:	c3                   	ret    
c0015974:	b8 01 00 00 00       	mov    eax,0x1
c0015979:	d3 e0                	shl    eax,cl
c001597b:	09 c6                	or     esi,eax
c001597d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015984:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015987:	c1 e0 05             	shl    eax,0x5
c001598a:	29 c8                	sub    eax,ecx
c001598c:	01 d8                	add    eax,ebx
c001598e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015995:	75 0d                	jne    c00159a4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015997:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00159a1:	8d 76 00             	lea    esi,[esi+0x0]
c00159a4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159aa:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	c1 e6 05             	shl    esi,0x5
c00159b3:	29 ce                	sub    esi,ecx
c00159b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00159b8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00159bb:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00159c1:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00159c7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00159cd:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00159d4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00159da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00159de:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00159e4:	89 ca                	mov    edx,ecx
c00159e6:	f7 da                	neg    edx
c00159e8:	c1 e2 15             	shl    edx,0x15
c00159eb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00159f1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00159f7:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00159fb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a05:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a0f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a15:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a1f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015a29:	68 00 01 00 00       	push   0x100
c0015a2e:	e8 a0 20 ff ff       	call   c0007ad3 <malloc>
c0015a33:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015a36:	58                   	pop    eax
c0015a37:	5a                   	pop    edx
c0015a38:	53                   	push   ebx
c0015a39:	68 e4 96 02 c0       	push   0xc00296e4
c0015a3e:	e8 bd 9e 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	89 d8                	mov    eax,ebx
c0015a48:	5b                   	pop    ebx
c0015a49:	5e                   	pop    esi
c0015a4a:	5f                   	pop    edi
c0015a4b:	c3                   	ret    

c0015a4c <Process::createUserThread()>:
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	68 80 00 00 00       	push   0x80
c0015a54:	6a 00                	push   0x0
c0015a56:	68 a0 53 01 c0       	push   0xc00153a0
c0015a5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a5f:	50                   	push   eax
c0015a60:	e8 df fe ff ff       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c0015a65:	83 c4 1c             	add    esp,0x1c
c0015a68:	c3                   	ret    
c0015a69:	8d 76 00             	lea    esi,[esi+0x0]

c0015a6c <setupMultitasking(void (*)())>:
c0015a6c:	56                   	push   esi
c0015a6d:	53                   	push   ebx
c0015a6e:	83 ec 04             	sub    esp,0x4
c0015a71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a75:	eb 11                	jmp    c0015a88 <setupMultitasking(void (*)())+0x1c>
c0015a77:	90                   	nop
c0015a78:	83 ec 0c             	sub    esp,0xc
c0015a7b:	68 e4 96 02 c0       	push   0xc00296e4
c0015a80:	e8 bf 9d 00 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a85:	83 c4 10             	add    esp,0x10
c0015a88:	83 ec 0c             	sub    esp,0xc
c0015a8b:	68 e4 96 02 c0       	push   0xc00296e4
c0015a90:	e8 8b 9d 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	84 c0                	test   al,al
c0015a9a:	74 dc                	je     c0015a78 <setupMultitasking(void (*)())+0xc>
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	68 24 07 00 00       	push   0x724
c0015aa4:	e8 2a 20 ff ff       	call   c0007ad3 <malloc>
c0015aa9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ab0:	6a 00                	push   0x0
c0015ab2:	68 85 23 02 c0       	push   0xc0022385
c0015ab7:	6a 01                	push   0x1
c0015ab9:	50                   	push   eax
c0015aba:	89 c3                	mov    ebx,eax
c0015abc:	e8 5f fc ff ff       	call   c0015720 <Process::Process(bool, char const*, Process*, char**)>
c0015ac1:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015ac7:	83 c4 14             	add    esp,0x14
c0015aca:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015ad0:	50                   	push   eax
c0015ad1:	e8 99 2c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015ad6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015add:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015ae7:	83 c8 01             	or     eax,0x1
c0015aea:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015af1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015af7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015afa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b04:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b0a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b14:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b1a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b24:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015b2e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015b34:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015b3a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015b44:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015b4e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015b55:	e8 79 1f ff ff       	call   c0007ad3 <malloc>
c0015b5a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015b60:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b66:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015b6c:	5a                   	pop    edx
c0015b6d:	59                   	pop    ecx
c0015b6e:	68 81 23 02 c0       	push   0xc0022381
c0015b73:	50                   	push   eax
c0015b74:	e8 d7 aa fe ff       	call   c0000650 <strcpy>
c0015b79:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b80:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b84:	83 c4 14             	add    esp,0x14
c0015b87:	5b                   	pop    ebx
c0015b88:	5e                   	pop    esi
c0015b89:	e9 db a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015b8e:	66 90                	xchg   ax,ax

c0015b90 <schedule()>:
c0015b90:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015b96:	85 d2                	test   edx,edx
c0015b98:	74 0e                	je     c0015ba8 <schedule()+0x18>
c0015b9a:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015ba4:	c3                   	ret    
c0015ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba8:	53                   	push   ebx
c0015ba9:	83 ec 14             	sub    esp,0x14
c0015bac:	68 e4 96 02 c0       	push   0xc00296e4
c0015bb1:	e8 6a 9c 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	84 c0                	test   al,al
c0015bbb:	75 3f                	jne    c0015bfc <schedule()+0x6c>
c0015bbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015bc5:	83 fa 01             	cmp    edx,0x1
c0015bc8:	74 3a                	je     c0015c04 <schedule()+0x74>
c0015bca:	66 90                	xchg   ax,ax
c0015bcc:	83 ec 0c             	sub    esp,0xc
c0015bcf:	68 e4 96 02 c0       	push   0xc00296e4
c0015bd4:	e8 63 9c 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bd9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015be0:	89 c3                	mov    ebx,eax
c0015be2:	e8 5d 9c 00 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015be7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015bee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bf1:	e8 02 f8 ff ff       	call   c00153f8 <switchToThread(ThreadControlBlock*)>
c0015bf6:	83 c4 10             	add    esp,0x10
c0015bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bfc:	83 c4 08             	add    esp,0x8
c0015bff:	5b                   	pop    ebx
c0015c00:	c3                   	ret    
c0015c01:	8d 76 00             	lea    esi,[esi+0x0]
c0015c04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c0b:	83 ec 08             	sub    esp,0x8
c0015c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c13:	50                   	push   eax
c0015c14:	68 e4 96 02 c0       	push   0xc00296e4
c0015c19:	e8 e2 9c 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	eb a9                	jmp    c0015bcc <schedule()+0x3c>
c0015c23:	90                   	nop

c0015c24 <Semaphore::tryAcquire()>:
c0015c24:	53                   	push   ebx
c0015c25:	83 ec 08             	sub    esp,0x8
c0015c28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c2c:	fa                   	cli    
c0015c2d:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015c33:	8d 42 01             	lea    eax,[edx+0x1]
c0015c36:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c3b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c40:	8d 58 01             	lea    ebx,[eax+0x1]
c0015c43:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015c49:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015c4c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015c4e:	7c 2c                	jl     c0015c7c <Semaphore::tryAcquire()+0x58>
c0015c50:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c55:	85 c0                	test   eax,eax
c0015c57:	75 0b                	jne    c0015c64 <Semaphore::tryAcquire()+0x40>
c0015c59:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015c5e:	85 c0                	test   eax,eax
c0015c60:	75 5a                	jne    c0015cbc <Semaphore::tryAcquire()+0x98>
c0015c62:	66 90                	xchg   ax,ax
c0015c64:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c6a:	31 c0                	xor    eax,eax
c0015c6c:	85 d2                	test   edx,edx
c0015c6e:	75 04                	jne    c0015c74 <Semaphore::tryAcquire()+0x50>
c0015c70:	fb                   	sti    
c0015c71:	8d 76 00             	lea    esi,[esi+0x0]
c0015c74:	83 c4 08             	add    esp,0x8
c0015c77:	5b                   	pop    ebx
c0015c78:	c3                   	ret    
c0015c79:	8d 76 00             	lea    esi,[esi+0x0]
c0015c7c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c81:	83 c3 01             	add    ebx,0x1
c0015c84:	85 c0                	test   eax,eax
c0015c86:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c89:	75 21                	jne    c0015cac <Semaphore::tryAcquire()+0x88>
c0015c8b:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015c91:	85 c9                	test   ecx,ecx
c0015c93:	74 17                	je     c0015cac <Semaphore::tryAcquire()+0x88>
c0015c95:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c9f:	e8 ec fe ff ff       	call   c0015b90 <schedule()>
c0015ca4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ca9:	8d 50 ff             	lea    edx,[eax-0x1]
c0015cac:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015cb2:	85 d2                	test   edx,edx
c0015cb4:	b0 01                	mov    al,0x1
c0015cb6:	75 bc                	jne    c0015c74 <Semaphore::tryAcquire()+0x50>
c0015cb8:	eb b6                	jmp    c0015c70 <Semaphore::tryAcquire()+0x4c>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cc6:	e8 c5 fe ff ff       	call   c0015b90 <schedule()>
c0015ccb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cd0:	8d 50 ff             	lea    edx,[eax-0x1]
c0015cd3:	31 c0                	xor    eax,eax
c0015cd5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015cdb:	85 d2                	test   edx,edx
c0015cdd:	75 95                	jne    c0015c74 <Semaphore::tryAcquire()+0x50>
c0015cdf:	eb 8f                	jmp    c0015c70 <Semaphore::tryAcquire()+0x4c>
c0015ce1:	90                   	nop
c0015ce2:	66 90                	xchg   ax,ax

c0015ce4 <Semaphore::assertLocked(char const*)>:
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ceb:	fa                   	cli    
c0015cec:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015cf2:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cf7:	83 c1 01             	add    ecx,0x1
c0015cfa:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d00:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d03:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d09:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d0b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d0e:	7c 28                	jl     c0015d38 <Semaphore::assertLocked(char const*)+0x54>
c0015d10:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d15:	85 c0                	test   eax,eax
c0015d17:	75 0b                	jne    c0015d24 <Semaphore::assertLocked(char const*)+0x40>
c0015d19:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d1e:	85 c0                	test   eax,eax
c0015d20:	75 32                	jne    c0015d54 <Semaphore::assertLocked(char const*)+0x70>
c0015d22:	66 90                	xchg   ax,ax
c0015d24:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d29:	83 e8 01             	sub    eax,0x1
c0015d2c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d31:	75 01                	jne    c0015d34 <Semaphore::assertLocked(char const*)+0x50>
c0015d33:	fb                   	sti    
c0015d34:	83 c4 0c             	add    esp,0xc
c0015d37:	c3                   	ret    
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d3f:	52                   	push   edx
c0015d40:	e8 4c b5 ff ff       	call   c0011291 <KePanic(char const*)>
c0015d45:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	83 e8 01             	sub    eax,0x1
c0015d50:	eb be                	jmp    c0015d10 <Semaphore::assertLocked(char const*)+0x2c>
c0015d52:	66 90                	xchg   ax,ax
c0015d54:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d5e:	e8 2d fe ff ff       	call   c0015b90 <schedule()>
c0015d63:	eb bf                	jmp    c0015d24 <Semaphore::assertLocked(char const*)+0x40>
c0015d65:	8d 76 00             	lea    esi,[esi+0x0]

c0015d68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d77:	e8 14 fe ff ff       	call   c0015b90 <schedule()>
c0015d7c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d81:	83 e8 01             	sub    eax,0x1
c0015d84:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d89:	75 01                	jne    c0015d8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d8b:	fb                   	sti    
c0015d8c:	83 c4 0c             	add    esp,0xc
c0015d8f:	c3                   	ret    

c0015d90 <blockTask(TaskState)>:
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	fa                   	cli    
c0015d94:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d9d:	83 c0 01             	add    eax,0x1
c0015da0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015daa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dad:	e8 de fd ff ff       	call   c0015b90 <schedule()>
c0015db2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db7:	83 e8 01             	sub    eax,0x1
c0015dba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dbf:	75 03                	jne    c0015dc4 <blockTask(TaskState)+0x34>
c0015dc1:	fb                   	sti    
c0015dc2:	66 90                	xchg   ax,ax
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	c3                   	ret    

c0015dc8 <waitTask(int, int*, int)>:
c0015dc8:	83 ec 18             	sub    esp,0x18
c0015dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015dd4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015dd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015de3:	6a 07                	push   0x7
c0015de5:	e8 a6 ff ff ff       	call   c0015d90 <blockTask(TaskState)>
c0015dea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015def:	83 c4 10             	add    esp,0x10
c0015df2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015df5:	85 d2                	test   edx,edx
c0015df7:	74 0b                	je     c0015e04 <waitTask(int, int*, int)+0x3c>
c0015df9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015dfc:	89 02                	mov    DWORD PTR [edx],eax
c0015dfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e03:	90                   	nop
c0015e04:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e07:	83 c4 0c             	add    esp,0xc
c0015e0a:	c3                   	ret    
c0015e0b:	90                   	nop

c0015e0c <milliTenthSleepUntil(unsigned int)>:
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e13:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015e19:	76 05                	jbe    c0015e20 <milliTenthSleepUntil(unsigned int)+0x14>
c0015e1b:	90                   	nop
c0015e1c:	83 c4 0c             	add    esp,0xc
c0015e1f:	c3                   	ret    
c0015e20:	fa                   	cli    
c0015e21:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015e30:	83 c2 01             	add    edx,0x1
c0015e33:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e39:	83 c1 01             	add    ecx,0x1
c0015e3c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e42:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e48:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e50:	50                   	push   eax
c0015e51:	68 d8 96 02 c0       	push   0xc00296d8
c0015e56:	e8 a5 9a 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e5b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015e62:	e8 29 ff ff ff       	call   c0015d90 <blockTask(TaskState)>
c0015e67:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	83 e8 01             	sub    eax,0x1
c0015e72:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e77:	85 c0                	test   eax,eax
c0015e79:	75 09                	jne    c0015e84 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e7b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e80:	85 c0                	test   eax,eax
c0015e82:	75 14                	jne    c0015e98 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015e84:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e89:	83 e8 01             	sub    eax,0x1
c0015e8c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e91:	75 89                	jne    c0015e1c <milliTenthSleepUntil(unsigned int)+0x10>
c0015e93:	fb                   	sti    
c0015e94:	83 c4 0c             	add    esp,0xc
c0015e97:	c3                   	ret    
c0015e98:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ea2:	e8 e9 fc ff ff       	call   c0015b90 <schedule()>
c0015ea7:	eb db                	jmp    c0015e84 <milliTenthSleepUntil(unsigned int)+0x78>
c0015ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0015eac <milliTenthSleep(unsigned int)>:
c0015eac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eb0:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015eb5:	01 c2                	add    edx,eax
c0015eb7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015ebb:	e9 4c ff ff ff       	jmp    c0015e0c <milliTenthSleepUntil(unsigned int)>

c0015ec0 <sleep(unsigned int)>:
c0015ec0:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015ec8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ecc:	eb de                	jmp    c0015eac <milliTenthSleep(unsigned int)>
c0015ece:	66 90                	xchg   ax,ax

c0015ed0 <Semaphore::acquire()>:
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ed7:	fa                   	cli    
c0015ed8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015edd:	83 c0 01             	add    eax,0x1
c0015ee0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eea:	8d 48 01             	lea    ecx,[eax+0x1]
c0015eed:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ef3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015ef6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015ef8:	7d 2e                	jge    c0015f28 <Semaphore::acquire()+0x58>
c0015efa:	83 c1 01             	add    ecx,0x1
c0015efd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f00:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f05:	85 c0                	test   eax,eax
c0015f07:	75 0b                	jne    c0015f14 <Semaphore::acquire()+0x44>
c0015f09:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f0e:	85 c0                	test   eax,eax
c0015f10:	75 66                	jne    c0015f78 <Semaphore::acquire()+0xa8>
c0015f12:	66 90                	xchg   ax,ax
c0015f14:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f19:	83 e8 01             	sub    eax,0x1
c0015f1c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f21:	75 01                	jne    c0015f24 <Semaphore::acquire()+0x54>
c0015f23:	fb                   	sti    
c0015f24:	83 c4 0c             	add    esp,0xc
c0015f27:	c3                   	ret    
c0015f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015f34:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f37:	85 c9                	test   ecx,ecx
c0015f39:	74 51                	je     c0015f8c <Semaphore::acquire()+0xbc>
c0015f3b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015f3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f44:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f47:	90                   	nop
c0015f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015f53:	68 04 24 02 c0       	push   0xc0022404
c0015f58:	e8 ad 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015f5d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015f64:	e8 27 fe ff ff       	call   c0015d90 <blockTask(TaskState)>
c0015f69:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	83 e8 01             	sub    eax,0x1
c0015f74:	eb 8a                	jmp    c0015f00 <Semaphore::acquire()+0x30>
c0015f76:	66 90                	xchg   ax,ax
c0015f78:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f82:	e8 09 fc ff ff       	call   c0015b90 <schedule()>
c0015f87:	eb 8b                	jmp    c0015f14 <Semaphore::acquire()+0x44>
c0015f89:	8d 76 00             	lea    esi,[esi+0x0]
c0015f8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f91:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f94:	eb b2                	jmp    c0015f48 <Semaphore::acquire()+0x78>
c0015f96:	66 90                	xchg   ax,ax

c0015f98 <taskReturned>:
c0015f98:	83 ec 18             	sub    esp,0x18
c0015f9b:	68 24 24 02 c0       	push   0xc0022424
c0015fa0:	e8 ec b2 ff ff       	call   c0011291 <KePanic(char const*)>
c0015fa5:	83 c4 10             	add    esp,0x10
c0015fa8:	83 ec 0c             	sub    esp,0xc
c0015fab:	6a 02                	push   0x2
c0015fad:	e8 de fd ff ff       	call   c0015d90 <blockTask(TaskState)>
c0015fb2:	fa                   	cli    
c0015fb3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fb8:	83 c0 01             	add    eax,0x1
c0015fbb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fc0:	e8 cb fb ff ff       	call   c0015b90 <schedule()>
c0015fc5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fca:	83 c4 10             	add    esp,0x10
c0015fcd:	83 e8 01             	sub    eax,0x1
c0015fd0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fd5:	85 c0                	test   eax,eax
c0015fd7:	75 cf                	jne    c0015fa8 <taskReturned+0x10>
c0015fd9:	fb                   	sti    
c0015fda:	eb cc                	jmp    c0015fa8 <taskReturned+0x10>

c0015fdc <Thr::processFromPID(int)>:
c0015fdc:	57                   	push   edi
c0015fdd:	56                   	push   esi
c0015fde:	53                   	push   ebx
c0015fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fe3:	fa                   	cli    
c0015fe4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015fea:	83 ec 0c             	sub    esp,0xc
c0015fed:	68 e4 96 02 c0       	push   0xc00296e4
c0015ff2:	83 c1 01             	add    ecx,0x1
c0015ff5:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015ffb:	e8 3c 98 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016000:	83 c4 10             	add    esp,0x10
c0016003:	89 c7                	mov    edi,eax
c0016005:	eb 15                	jmp    c001601c <Thr::processFromPID(int)+0x40>
c0016007:	90                   	nop
c0016008:	83 ec 0c             	sub    esp,0xc
c001600b:	68 e4 96 02 c0       	push   0xc00296e4
c0016010:	e8 27 98 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016015:	83 c4 10             	add    esp,0x10
c0016018:	39 f8                	cmp    eax,edi
c001601a:	74 50                	je     c001606c <Thr::processFromPID(int)+0x90>
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 e4 96 02 c0       	push   0xc00296e4
c0016024:	e8 13 98 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016029:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016030:	89 c3                	mov    ebx,eax
c0016032:	e8 0d 98 00 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016037:	58                   	pop    eax
c0016038:	5a                   	pop    edx
c0016039:	53                   	push   ebx
c001603a:	68 e4 96 02 c0       	push   0xc00296e4
c001603f:	e8 bc 98 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016044:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016047:	83 c4 10             	add    esp,0x10
c001604a:	39 30                	cmp    DWORD PTR [eax],esi
c001604c:	75 ba                	jne    c0016008 <Thr::processFromPID(int)+0x2c>
c001604e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016053:	83 e8 01             	sub    eax,0x1
c0016056:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001605b:	74 0b                	je     c0016068 <Thr::processFromPID(int)+0x8c>
c001605d:	8d 76 00             	lea    esi,[esi+0x0]
c0016060:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016063:	90                   	nop
c0016064:	5b                   	pop    ebx
c0016065:	5e                   	pop    esi
c0016066:	5f                   	pop    edi
c0016067:	c3                   	ret    
c0016068:	fb                   	sti    
c0016069:	eb f5                	jmp    c0016060 <Thr::processFromPID(int)+0x84>
c001606b:	90                   	nop
c001606c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016071:	8d 50 ff             	lea    edx,[eax-0x1]
c0016074:	31 c0                	xor    eax,eax
c0016076:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001607c:	85 d2                	test   edx,edx
c001607e:	75 e4                	jne    c0016064 <Thr::processFromPID(int)+0x88>
c0016080:	fb                   	sti    
c0016081:	5b                   	pop    ebx
c0016082:	5e                   	pop    esi
c0016083:	5f                   	pop    edi
c0016084:	c3                   	ret    
c0016085:	8d 76 00             	lea    esi,[esi+0x0]

c0016088 <unblockTask(ThreadControlBlock*)>:
c0016088:	53                   	push   ebx
c0016089:	83 ec 08             	sub    esp,0x8
c001608c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016090:	fa                   	cli    
c0016091:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016096:	83 c0 01             	add    eax,0x1
c0016099:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001609e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160a1:	85 c0                	test   eax,eax
c00160a3:	74 67                	je     c001610c <unblockTask(ThreadControlBlock*)+0x84>
c00160a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160a8:	83 f8 01             	cmp    eax,0x1
c00160ab:	74 37                	je     c00160e4 <unblockTask(ThreadControlBlock*)+0x5c>
c00160ad:	83 ec 0c             	sub    esp,0xc
c00160b0:	68 e4 96 02 c0       	push   0xc00296e4
c00160b5:	e8 82 97 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160ba:	83 c4 10             	add    esp,0x10
c00160bd:	85 c0                	test   eax,eax
c00160bf:	75 1b                	jne    c00160dc <unblockTask(ThreadControlBlock*)+0x54>
c00160c1:	eb 5d                	jmp    c0016120 <unblockTask(ThreadControlBlock*)+0x98>
c00160c3:	90                   	nop
c00160c4:	83 ec 08             	sub    esp,0x8
c00160c7:	50                   	push   eax
c00160c8:	68 e4 96 02 c0       	push   0xc00296e4
c00160cd:	e8 8a 9a 00 00       	call   c001fb5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00160d2:	83 c4 10             	add    esp,0x10
c00160d5:	85 c0                	test   eax,eax
c00160d7:	74 47                	je     c0016120 <unblockTask(ThreadControlBlock*)+0x98>
c00160d9:	8d 76 00             	lea    esi,[esi+0x0]
c00160dc:	39 c3                	cmp    ebx,eax
c00160de:	75 e4                	jne    c00160c4 <unblockTask(ThreadControlBlock*)+0x3c>
c00160e0:	eb 12                	jmp    c00160f4 <unblockTask(ThreadControlBlock*)+0x6c>
c00160e2:	66 90                	xchg   ax,ax
c00160e4:	83 ec 0c             	sub    esp,0xc
c00160e7:	68 a3 23 02 c0       	push   0xc00223a3
c00160ec:	e8 19 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160f9:	83 e8 01             	sub    eax,0x1
c00160fc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016101:	75 01                	jne    c0016104 <unblockTask(ThreadControlBlock*)+0x7c>
c0016103:	fb                   	sti    
c0016104:	83 c4 08             	add    esp,0x8
c0016107:	5b                   	pop    ebx
c0016108:	c3                   	ret    
c0016109:	8d 76 00             	lea    esi,[esi+0x0]
c001610c:	83 ec 0c             	sub    esp,0xc
c001610f:	68 8c 23 02 c0       	push   0xc002238c
c0016114:	e8 f1 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016119:	83 c4 10             	add    esp,0x10
c001611c:	eb d6                	jmp    c00160f4 <unblockTask(ThreadControlBlock*)+0x6c>
c001611e:	66 90                	xchg   ax,ax
c0016120:	83 ec 08             	sub    esp,0x8
c0016123:	53                   	push   ebx
c0016124:	68 e4 96 02 c0       	push   0xc00296e4
c0016129:	e8 d2 97 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001612e:	83 c4 10             	add    esp,0x10
c0016131:	eb c1                	jmp    c00160f4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016133:	90                   	nop

c0016134 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016134:	55                   	push   ebp
c0016135:	57                   	push   edi
c0016136:	56                   	push   esi
c0016137:	53                   	push   ebx
c0016138:	83 ec 1c             	sub    esp,0x1c
c001613b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001613f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016142:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016148:	85 ed                	test   ebp,ebp
c001614a:	7e 28                	jle    c0016174 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001614c:	31 f6                	xor    esi,esi
c001614e:	66 90                	xchg   ax,ax
c0016150:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016157:	83 ec 0c             	sub    esp,0xc
c001615a:	83 c6 01             	add    esi,0x1
c001615d:	57                   	push   edi
c001615e:	e8 80 19 ff ff       	call   c0007ae3 <free>
c0016163:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001616f:	7f df                	jg     c0016150 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001617e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016183:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016186:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016189:	d3 c0                	rol    eax,cl
c001618b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016192:	21 c8                	and    eax,ecx
c0016194:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001619b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001619e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00161a6:	89 f7                	mov    edi,esi
c00161a8:	0f 85 72 01 00 00    	jne    c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161ae:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00161b4:	85 ed                	test   ebp,ebp
c00161b6:	74 1c                	je     c00161d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	55                   	push   ebp
c00161bc:	e8 e1 ad ff ff       	call   c0010fa2 <EnvVarContainer::~EnvVarContainer()>
c00161c1:	59                   	pop    ecx
c00161c2:	5e                   	pop    esi
c00161c3:	6a 0c                	push   0xc
c00161c5:	55                   	push   ebp
c00161c6:	e8 41 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00161cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	89 f7                	mov    edi,esi
c00161d3:	90                   	nop
c00161d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161da:	85 c0                	test   eax,eax
c00161dc:	0f 84 b2 00 00 00    	je     c0016294 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161e2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00161e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00161e9:	31 c9                	xor    ecx,ecx
c00161eb:	eb 17                	jmp    c0016204 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00161ed:	8d 76 00             	lea    esi,[esi+0x0]
c00161f0:	83 c1 01             	add    ecx,0x1
c00161f3:	83 f9 10             	cmp    ecx,0x10
c00161f6:	0f 84 98 00 00 00    	je     c0016294 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016202:	66 90                	xchg   ax,ax
c0016204:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001620b:	d3 fa                	sar    edx,cl
c001620d:	80 e2 01             	and    dl,0x1
c0016210:	74 de                	je     c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016212:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016215:	c1 e2 05             	shl    edx,0x5
c0016218:	29 ca                	sub    edx,ecx
c001621a:	01 d0                	add    eax,edx
c001621c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016222:	83 fd 07             	cmp    ebp,0x7
c0016225:	75 c9                	jne    c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016227:	05 40 02 00 00       	add    eax,0x240
c001622c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001622f:	83 fd ff             	cmp    ebp,0xffffffff
c0016232:	0f 8c f0 00 00 00    	jl     c0016328 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016238:	0f 84 ae 01 00 00    	je     c00163ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001623e:	85 ed                	test   ebp,ebp
c0016240:	0f 84 92 01 00 00    	je     c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016246:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016248:	75 a6                	jne    c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001624a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001624e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016254:	01 d0                	add    eax,edx
c0016256:	66 90                	xchg   ax,ax
c0016258:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001625c:	83 ec 0c             	sub    esp,0xc
c001625f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016265:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016268:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001626e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016275:	50                   	push   eax
c0016276:	e8 0d fe ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016281:	89 f7                	mov    edi,esi
c0016283:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016287:	83 c1 01             	add    ecx,0x1
c001628a:	83 f9 10             	cmp    ecx,0x10
c001628d:	0f 85 69 ff ff ff    	jne    c00161fc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016293:	90                   	nop
c0016294:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001629a:	85 c0                	test   eax,eax
c001629c:	74 62                	je     c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001629e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00162a4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00162aa:	74 54                	je     c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	68 e4 96 02 c0       	push   0xc00296e4
c00162b4:	e8 83 95 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162b9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162c0:	89 c7                	mov    edi,eax
c00162c2:	e8 59 95 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00162c7:	83 c4 10             	add    esp,0x10
c00162ca:	84 c0                	test   al,al
c00162cc:	0f 84 ce 00 00 00    	je     c00163a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00162d2:	66 90                	xchg   ax,ax
c00162d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162d7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00162dd:	85 d2                	test   edx,edx
c00162df:	74 0f                	je     c00162f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00162e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00162e3:	83 ec 0c             	sub    esp,0xc
c00162e6:	52                   	push   edx
c00162e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00162fa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00162fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016300:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016306:	85 db                	test   ebx,ebx
c0016308:	74 16                	je     c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001630a:	83 ec 0c             	sub    esp,0xc
c001630d:	53                   	push   ebx
c001630e:	e8 7d 38 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016313:	58                   	pop    eax
c0016314:	5a                   	pop    edx
c0016315:	6a 14                	push   0x14
c0016317:	53                   	push   ebx
c0016318:	e8 ef 44 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	83 c4 1c             	add    esp,0x1c
c0016323:	5b                   	pop    ebx
c0016324:	5e                   	pop    esi
c0016325:	5f                   	pop    edi
c0016326:	5d                   	pop    ebp
c0016327:	c3                   	ret    
c0016328:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	68 58 24 02 c0       	push   0xc0022458
c0016334:	e8 58 af ff ff       	call   c0011291 <KePanic(char const*)>
c0016339:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	89 f7                	mov    edi,esi
c0016341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016345:	e9 a6 fe ff ff       	jmp    c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001634a:	66 90                	xchg   ax,ax
c001634c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016352:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016358:	75 1e                	jne    c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	68 c0 24 02 c0       	push   0xc00224c0
c0016362:	e8 a3 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016367:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001636e:	e8 1d fa ff ff       	call   c0015d90 <blockTask(TaskState)>
c0016373:	83 c4 10             	add    esp,0x10
c0016376:	66 90                	xchg   ax,ax
c0016378:	83 ec 08             	sub    esp,0x8
c001637b:	56                   	push   esi
c001637c:	68 e4 96 02 c0       	push   0xc00296e4
c0016381:	e8 7a 95 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016386:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001638d:	e8 aa 94 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	39 f8                	cmp    eax,edi
c0016397:	0f 84 37 ff ff ff    	je     c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001639d:	8d 76 00             	lea    esi,[esi+0x0]
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	68 e4 96 02 c0       	push   0xc00296e4
c00163a8:	e8 8f 94 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163ad:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163b4:	89 c6                	mov    esi,eax
c00163b6:	e8 89 94 00 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163bb:	83 c4 10             	add    esp,0x10
c00163be:	39 f3                	cmp    ebx,esi
c00163c0:	74 b6                	je     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163c2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00163c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163c8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00163ce:	75 a8                	jne    c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163d0:	e9 77 ff ff ff       	jmp    c001634c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00163d5:	8d 76 00             	lea    esi,[esi+0x0]
c00163d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163dc:	83 ec 0c             	sub    esp,0xc
c00163df:	68 8c 24 02 c0       	push   0xc002248c
c00163e4:	e9 4b ff ff ff       	jmp    c0016334 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00163e9:	8d 76 00             	lea    esi,[esi+0x0]
c00163ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163f0:	8b 36                	mov    esi,DWORD PTR [esi]
c00163f2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00163f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163f8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00163fe:	01 d7                	add    edi,edx
c0016400:	89 f8                	mov    eax,edi
c0016402:	e9 51 fe ff ff       	jmp    c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016407:	90                   	nop

c0016408 <cleanerTaskFunction(void*)>:
c0016408:	53                   	push   ebx
c0016409:	83 ec 08             	sub    esp,0x8
c001640c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016411:	83 e8 01             	sub    eax,0x1
c0016414:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016419:	75 01                	jne    c001641c <cleanerTaskFunction(void*)+0x14>
c001641b:	fb                   	sti    
c001641c:	fa                   	cli    
c001641d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016422:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016429:	8d 50 01             	lea    edx,[eax+0x1]
c001642c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016432:	0f 84 c4 00 00 00    	je     c00164fc <cleanerTaskFunction(void*)+0xf4>
c0016438:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001643d:	85 c0                	test   eax,eax
c001643f:	75 03                	jne    c0016444 <cleanerTaskFunction(void*)+0x3c>
c0016441:	fb                   	sti    
c0016442:	66 90                	xchg   ax,ax
c0016444:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001644b:	fa                   	cli    
c001644c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016452:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016458:	83 c2 01             	add    edx,0x1
c001645b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016461:	83 c1 01             	add    ecx,0x1
c0016464:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001646a:	fa                   	cli    
c001646b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016471:	83 c3 01             	add    ebx,0x1
c0016474:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001647a:	eb 28                	jmp    c00164a4 <cleanerTaskFunction(void*)+0x9c>
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	68 cc 96 02 c0       	push   0xc00296cc
c0016484:	e8 b3 93 00 00       	call   c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016489:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016490:	89 c3                	mov    ebx,eax
c0016492:	e8 ad 93 00 00       	call   c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016497:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001649a:	e8 95 fc ff ff       	call   c0016134 <cleanupTerminatedTask(ThreadControlBlock*)>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	66 90                	xchg   ax,ax
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	68 cc 96 02 c0       	push   0xc00296cc
c00164ac:	e8 6f 93 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	84 c0                	test   al,al
c00164b6:	74 c4                	je     c001647c <cleanerTaskFunction(void*)+0x74>
c00164b8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164bd:	83 e8 01             	sub    eax,0x1
c00164c0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164c5:	75 01                	jne    c00164c8 <cleanerTaskFunction(void*)+0xc0>
c00164c7:	fb                   	sti    
c00164c8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00164cd:	83 e8 01             	sub    eax,0x1
c00164d0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00164d5:	0f 85 31 ff ff ff    	jne    c001640c <cleanerTaskFunction(void*)+0x4>
c00164db:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00164e0:	85 c0                	test   eax,eax
c00164e2:	0f 84 24 ff ff ff    	je     c001640c <cleanerTaskFunction(void*)+0x4>
c00164e8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00164f2:	e8 99 f6 ff ff       	call   c0015b90 <schedule()>
c00164f7:	e9 10 ff ff ff       	jmp    c001640c <cleanerTaskFunction(void*)+0x4>
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	6a 02                	push   0x2
c0016501:	e8 62 f8 ff ff       	call   c0015d68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	e9 36 ff ff ff       	jmp    c0016444 <cleanerTaskFunction(void*)+0x3c>
c001650e:	66 90                	xchg   ax,ax

c0016510 <terminateTask(int)>:
c0016510:	83 ec 14             	sub    esp,0x14
c0016513:	fa                   	cli    
c0016514:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001651a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016520:	83 c2 01             	add    edx,0x1
c0016523:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016529:	83 c1 01             	add    ecx,0x1
c001652c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016532:	fa                   	cli    
c0016533:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016538:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001653c:	83 c0 01             	add    eax,0x1
c001653f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016544:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016549:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001654c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016551:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016554:	50                   	push   eax
c0016555:	68 cc 96 02 c0       	push   0xc00296cc
c001655a:	e8 a1 93 00 00       	call   c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001655f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001656e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016573:	85 c0                	test   eax,eax
c0016575:	74 65                	je     c00165dc <terminateTask(int)+0xcc>
c0016577:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	50                   	push   eax
c0016582:	e8 01 fb ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	66 90                	xchg   ax,ax
c001658c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016591:	83 e8 01             	sub    eax,0x1
c0016594:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016599:	75 01                	jne    c001659c <terminateTask(int)+0x8c>
c001659b:	fb                   	sti    
c001659c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165a1:	83 e8 01             	sub    eax,0x1
c00165a4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165a9:	75 09                	jne    c00165b4 <terminateTask(int)+0xa4>
c00165ab:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00165b2:	75 3c                	jne    c00165f0 <terminateTask(int)+0xe0>
c00165b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165b9:	83 e8 01             	sub    eax,0x1
c00165bc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165c1:	75 01                	jne    c00165c4 <terminateTask(int)+0xb4>
c00165c3:	fb                   	sti    
c00165c4:	fa                   	cli    
c00165c5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165ca:	83 c0 01             	add    eax,0x1
c00165cd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d2:	66 90                	xchg   ax,ax
c00165d4:	e8 b7 f5 ff ff       	call   c0015b90 <schedule()>
c00165d9:	eb d9                	jmp    c00165b4 <terminateTask(int)+0xa4>
c00165db:	90                   	nop
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	68 ba 23 02 c0       	push   0xc00223ba
c00165e4:	e8 21 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	eb 9e                	jmp    c001658c <terminateTask(int)+0x7c>
c00165ee:	66 90                	xchg   ax,ax
c00165f0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165fa:	eb d8                	jmp    c00165d4 <terminateTask(int)+0xc4>

c00165fc <Thr::terminateFromIRQ(int)>:
c00165fc:	83 ec 18             	sub    esp,0x18
c00165ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016603:	50                   	push   eax
c0016604:	e8 07 ff ff ff       	call   c0016510 <terminateTask(int)>
c0016609:	90                   	nop
c001660a:	66 90                	xchg   ax,ax

c001660c <Semaphore::release()>:
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016613:	fa                   	cli    
c0016614:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016619:	83 c0 01             	add    eax,0x1
c001661c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016621:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016626:	8d 48 01             	lea    ecx,[eax+0x1]
c0016629:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001662f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016632:	85 c9                	test   ecx,ecx
c0016634:	74 42                	je     c0016678 <Semaphore::release()+0x6c>
c0016636:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016639:	83 ec 0c             	sub    esp,0xc
c001663c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001663f:	51                   	push   ecx
c0016640:	e8 43 fa ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c0016645:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001664a:	83 c4 10             	add    esp,0x10
c001664d:	83 e8 01             	sub    eax,0x1
c0016650:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016655:	85 c0                	test   eax,eax
c0016657:	75 0b                	jne    c0016664 <Semaphore::release()+0x58>
c0016659:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001665e:	85 c0                	test   eax,eax
c0016660:	75 22                	jne    c0016684 <Semaphore::release()+0x78>
c0016662:	66 90                	xchg   ax,ax
c0016664:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016669:	83 e8 01             	sub    eax,0x1
c001666c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016671:	75 01                	jne    c0016674 <Semaphore::release()+0x68>
c0016673:	fb                   	sti    
c0016674:	83 c4 0c             	add    esp,0xc
c0016677:	c3                   	ret    
c0016678:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001667b:	83 e9 01             	sub    ecx,0x1
c001667e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016681:	eb cd                	jmp    c0016650 <Semaphore::release()+0x44>
c0016683:	90                   	nop
c0016684:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001668e:	e8 fd f4 ff ff       	call   c0015b90 <schedule()>
c0016693:	eb cf                	jmp    c0016664 <Semaphore::release()+0x58>
c0016695:	8d 76 00             	lea    esi,[esi+0x0]

c0016698 <__static_initialization_and_destruction_0(int, int)>:
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00166a0:	0f 85 8e 00 00 00    	jne    c0016734 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00166ae:	0f 85 80 00 00 00    	jne    c0016734 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 e4 96 02 c0       	push   0xc00296e4
c00166bc:	e8 f3 94 00 00       	call   c001fbb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	83 ec 04             	sub    esp,0x4
c00166c7:	68 90 30 02 c0       	push   0xc0023090
c00166cc:	68 e4 96 02 c0       	push   0xc00296e4
c00166d1:	68 64 fb 01 c0       	push   0xc001fb64
c00166d6:	e8 e1 40 ff ff       	call   c000a7bc <__cxa_atexit>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	68 d8 96 02 c0       	push   0xc00296d8
c00166e6:	e8 c9 94 00 00       	call   c001fbb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166eb:	83 c4 10             	add    esp,0x10
c00166ee:	83 ec 04             	sub    esp,0x4
c00166f1:	68 90 30 02 c0       	push   0xc0023090
c00166f6:	68 d8 96 02 c0       	push   0xc00296d8
c00166fb:	68 64 fb 01 c0       	push   0xc001fb64
c0016700:	e8 b7 40 ff ff       	call   c000a7bc <__cxa_atexit>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	68 cc 96 02 c0       	push   0xc00296cc
c0016710:	e8 9f 94 00 00       	call   c001fbb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016715:	83 c4 10             	add    esp,0x10
c0016718:	83 ec 04             	sub    esp,0x4
c001671b:	68 90 30 02 c0       	push   0xc0023090
c0016720:	68 cc 96 02 c0       	push   0xc00296cc
c0016725:	68 64 fb 01 c0       	push   0xc001fb64
c001672a:	e8 8d 40 ff ff       	call   c000a7bc <__cxa_atexit>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	66 90                	xchg   ax,ax
c0016734:	90                   	nop
c0016735:	83 c4 0c             	add    esp,0xc
c0016738:	c3                   	ret    
c0016739:	8d 76 00             	lea    esi,[esi+0x0]

c001673c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	83 ec 08             	sub    esp,0x8
c0016742:	68 ff ff 00 00       	push   0xffff
c0016747:	6a 01                	push   0x1
c0016749:	e8 4a ff ff ff       	call   c0016698 <__static_initialization_and_destruction_0(int, int)>
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	83 c4 0c             	add    esp,0xc
c0016754:	c3                   	ret    

c0016755 <Vm::inbv(unsigned short)>:
c0016755:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016759:	66 81 fa fe fe       	cmp    dx,0xfefe
c001675e:	75 06                	jne    c0016766 <Vm::inbv(unsigned short)+0x11>
c0016760:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016765:	c3                   	ret    
c0016766:	ec                   	in     al,dx
c0016767:	c3                   	ret    

c0016768 <Vm::outbv(unsigned short, unsigned char)>:
c0016768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001676c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016770:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016775:	75 25                	jne    c001679c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016777:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001677d:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016783:	8d 51 01             	lea    edx,[ecx+0x1]
c0016786:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c001678c:	83 fa 20             	cmp    edx,0x20
c001678f:	75 0c                	jne    c001679d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016791:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c001679b:	c3                   	ret    
c001679c:	ee                   	out    dx,al
c001679d:	c3                   	ret    

c001679e <Vm::realToLinear(unsigned short, unsigned short)>:
c001679e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00167a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00167a8:	c1 e0 04             	shl    eax,0x4
c00167ab:	01 d0                	add    eax,edx
c00167ad:	c3                   	ret    

c00167ae <Vm::getSegment(unsigned int)>:
c00167ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167b2:	c1 e8 10             	shr    eax,0x10
c00167b5:	c3                   	ret    

c00167b6 <Vm::getOffset(unsigned int)>:
c00167b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ba:	c3                   	ret    

c00167bb <Vm::mainloop2()>:
c00167bb:	83 ec 18             	sub    esp,0x18
c00167be:	fa                   	cli    
c00167bf:	6a 02                	push   0x2
c00167c1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167c7:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00167ce:	e8 95 f5 ff ff       	call   c0015d68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00167dc:	52                   	push   edx
c00167dd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00167e1:	52                   	push   edx
c00167e2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00167e6:	52                   	push   edx
c00167e7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00167eb:	50                   	push   eax
c00167ec:	e8 1e 9a fe ff       	call   c000020f <goToVM86>
c00167f1:	83 c4 2c             	add    esp,0x2c
c00167f4:	c3                   	ret    

c00167f5 <Vm::mainVm8086Loop(void*)>:
c00167f5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167fa:	48                   	dec    eax
c00167fb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016800:	75 01                	jne    c0016803 <Vm::mainVm8086Loop(void*)+0xe>
c0016802:	fb                   	sti    
c0016803:	eb b6                	jmp    c00167bb <Vm::mainloop2()>

c0016805 <Vm::mainloop3(unsigned long)>:
c0016805:	83 ec 18             	sub    esp,0x18
c0016808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680c:	fa                   	cli    
c001680d:	6a 02                	push   0x2
c001680f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016815:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001681c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016821:	e8 42 f5 ff ff       	call   c0015d68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016826:	83 c4 1c             	add    esp,0x1c
c0016829:	eb 90                	jmp    c00167bb <Vm::mainloop2()>

c001682b <Vm::initialise8086()>:
c001682b:	83 ec 0c             	sub    esp,0xc
c001682e:	68 80 00 00 00       	push   0x80
c0016833:	6a 00                	push   0x0
c0016835:	68 f5 67 01 c0       	push   0xc00167f5
c001683a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016840:	e8 ff f0 ff ff       	call   c0015944 <Process::createThread(void (*)(void*), void*, int)>
c0016845:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001684c:	68 00 01 00 00       	push   0x100
c0016851:	6a 00                	push   0x0
c0016853:	6a 00                	push   0x0
c0016855:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c001685a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001685f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016865:	e8 9e 36 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001686a:	83 c4 2c             	add    esp,0x2c
c001686d:	c3                   	ret    

c001686e <Vm::finish8086()>:
c001686e:	53                   	push   ebx
c001686f:	83 ec 08             	sub    esp,0x8
c0016872:	fa                   	cli    
c0016873:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016879:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016880:	75 15                	jne    c0016897 <Vm::finish8086()+0x29>
c0016882:	e8 09 f3 ff ff       	call   c0015b90 <schedule()>
c0016887:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001688c:	48                   	dec    eax
c001688d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016892:	75 de                	jne    c0016872 <Vm::finish8086()+0x4>
c0016894:	fb                   	sti    
c0016895:	eb db                	jmp    c0016872 <Vm::finish8086()+0x4>
c0016897:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00168a7:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168ad:	e8 d6 f7 ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c00168b2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	8d 50 ff             	lea    edx,[eax-0x1]
c00168bd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00168c3:	85 d2                	test   edx,edx
c00168c5:	75 01                	jne    c00168c8 <Vm::finish8086()+0x5a>
c00168c7:	fb                   	sti    
c00168c8:	83 c4 08             	add    esp,0x8
c00168cb:	89 d8                	mov    eax,ebx
c00168cd:	5b                   	pop    ebx
c00168ce:	c3                   	ret    

c00168cf <Vm::getOutput8086(unsigned char*)>:
c00168cf:	57                   	push   edi
c00168d0:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00168d6:	56                   	push   esi
c00168d7:	be 40 97 02 c0       	mov    esi,0xc0029740
c00168dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00168e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168e2:	5e                   	pop    esi
c00168e3:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00168e8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168f2:	5f                   	pop    edi
c00168f3:	c3                   	ret    

c00168f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168f4:	55                   	push   ebp
c00168f5:	57                   	push   edi
c00168f6:	56                   	push   esi
c00168f7:	53                   	push   ebx
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00168ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016903:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016907:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001690b:	fa                   	cli    
c001690c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016912:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016919:	75 15                	jne    c0016930 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001691b:	e8 70 f2 ff ff       	call   c0015b90 <schedule()>
c0016920:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016925:	48                   	dec    eax
c0016926:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001692b:	75 de                	jne    c001690b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001692d:	fb                   	sti    
c001692e:	eb db                	jmp    c001690b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016930:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001693a:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001693f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016943:	0f b7 ff             	movzx  edi,di
c0016946:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001694a:	0f b7 f6             	movzx  esi,si
c001694d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016951:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016955:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016959:	50                   	push   eax
c001695a:	6a 20                	push   0x20
c001695c:	6a 00                	push   0x0
c001695e:	68 40 97 02 c0       	push   0xc0029740
c0016963:	e8 88 9b fe ff       	call   c00004f0 <memset>
c0016968:	5a                   	pop    edx
c0016969:	59                   	pop    ecx
c001696a:	57                   	push   edi
c001696b:	56                   	push   esi
c001696c:	e8 2d fe ff ff       	call   c001679e <Vm::realToLinear(unsigned short, unsigned short)>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016978:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001697c:	89 c7                	mov    edi,eax
c001697e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016980:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016987:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001698c:	48                   	dec    eax
c001698d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016992:	75 01                	jne    c0016995 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016994:	fb                   	sti    
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001699e:	e8 e5 f6 ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c00169a3:	83 c4 1c             	add    esp,0x1c
c00169a6:	b0 01                	mov    al,0x1
c00169a8:	5b                   	pop    ebx
c00169a9:	5e                   	pop    esi
c00169aa:	5f                   	pop    edi
c00169ab:	5d                   	pop    ebp
c00169ac:	c3                   	ret    

c00169ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169ad:	55                   	push   ebp
c00169ae:	57                   	push   edi
c00169af:	56                   	push   esi
c00169b0:	53                   	push   ebx
c00169b1:	83 ec 34             	sub    esp,0x34
c00169b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00169b8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00169bc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00169c0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00169c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169cc:	68 e8 24 02 c0       	push   0xc00224e8
c00169d1:	e8 34 3f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00169d6:	83 c4 10             	add    esp,0x10
c00169d9:	fa                   	cli    
c00169da:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c00169e0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169e6:	84 db                	test   bl,bl
c00169e8:	75 15                	jne    c00169ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00169ea:	e8 a1 f1 ff ff       	call   c0015b90 <schedule()>
c00169ef:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169f4:	48                   	dec    eax
c00169f5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169fa:	75 dd                	jne    c00169d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169fc:	fb                   	sti    
c00169fd:	eb da                	jmp    c00169d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169ff:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a0d:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a12:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016a16:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a1a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a1e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a22:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a26:	50                   	push   eax
c0016a27:	6a 20                	push   0x20
c0016a29:	6a 00                	push   0x0
c0016a2b:	68 40 97 02 c0       	push   0xc0029740
c0016a30:	e8 bb 9a fe ff       	call   c00004f0 <memset>
c0016a35:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016a3c:	e8 92 10 ff ff       	call   c0007ad3 <malloc>
c0016a41:	83 c4 0c             	add    esp,0xc
c0016a44:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a4e:	89 c5                	mov    ebp,eax
c0016a50:	50                   	push   eax
c0016a51:	e8 74 4d ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	85 ed                	test   ebp,ebp
c0016a5b:	75 0a                	jne    c0016a67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016a5d:	83 ec 0c             	sub    esp,0xc
c0016a60:	68 0a 25 02 c0       	push   0xc002250a
c0016a65:	eb 2b                	jmp    c0016a92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016a67:	50                   	push   eax
c0016a68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016a6c:	50                   	push   eax
c0016a6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a71:	50                   	push   eax
c0016a72:	55                   	push   ebp
c0016a73:	e8 1c 51 ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c0016a78:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a7c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016a88:	74 27                	je     c0016ab1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	68 1e 25 02 c0       	push   0xc002251e
c0016a92:	e8 fa a7 ff ff       	call   c0011291 <KePanic(char const*)>
c0016a97:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	48                   	dec    eax
c0016aa0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016aa5:	85 c0                	test   eax,eax
c0016aa7:	75 01                	jne    c0016aaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016aa9:	fb                   	sti    
c0016aaa:	31 db                	xor    ebx,ebx
c0016aac:	e9 90 00 00 00       	jmp    c0016b41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ab1:	51                   	push   ecx
c0016ab2:	51                   	push   ecx
c0016ab3:	6a 01                	push   0x1
c0016ab5:	55                   	push   ebp
c0016ab6:	e8 d7 4d ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	85 c0                	test   eax,eax
c0016ac0:	74 26                	je     c0016ae8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	68 37 25 02 c0       	push   0xc0022537
c0016aca:	e8 c2 a7 ff ff       	call   c0011291 <KePanic(char const*)>
c0016acf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	48                   	dec    eax
c0016ad8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016add:	85 c0                	test   eax,eax
c0016adf:	75 c9                	jne    c0016aaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ae1:	fb                   	sti    
c0016ae2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016ae6:	eb 59                	jmp    c0016b41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ae8:	50                   	push   eax
c0016ae9:	0f b7 ff             	movzx  edi,di
c0016aec:	50                   	push   eax
c0016aed:	0f b7 f6             	movzx  esi,si
c0016af0:	57                   	push   edi
c0016af1:	56                   	push   esi
c0016af2:	e8 a7 fc ff ff       	call   c001679e <Vm::realToLinear(unsigned short, unsigned short)>
c0016af7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016afa:	5a                   	pop    edx
c0016afb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016aff:	56                   	push   esi
c0016b00:	50                   	push   eax
c0016b01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b09:	55                   	push   ebp
c0016b0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b0d:	83 c4 14             	add    esp,0x14
c0016b10:	55                   	push   ebp
c0016b11:	e8 da 4d ff ff       	call   c000b8f0 <File::close()>
c0016b16:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b25:	48                   	dec    eax
c0016b26:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b2b:	85 c0                	test   eax,eax
c0016b2d:	75 01                	jne    c0016b30 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016b2f:	fb                   	sti    
c0016b30:	83 ec 0c             	sub    esp,0xc
c0016b33:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b39:	e8 4a f5 ff ff       	call   c0016088 <unblockTask(ThreadControlBlock*)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	83 c4 2c             	add    esp,0x2c
c0016b44:	88 d8                	mov    al,bl
c0016b46:	5b                   	pop    ebx
c0016b47:	5e                   	pop    esi
c0016b48:	5f                   	pop    edi
c0016b49:	5d                   	pop    ebp
c0016b4a:	c3                   	ret    

c0016b4b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b4b:	57                   	push   edi
c0016b4c:	56                   	push   esi
c0016b4d:	53                   	push   ebx
c0016b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b56:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b5a:	83 e8 06             	sub    eax,0x6
c0016b5d:	0f b7 c0             	movzx  eax,ax
c0016b60:	50                   	push   eax
c0016b61:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016b66:	50                   	push   eax
c0016b67:	e8 32 fc ff ff       	call   c001679e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b6c:	5a                   	pop    edx
c0016b6d:	59                   	pop    ecx
c0016b6e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016b71:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016b74:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016b77:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b7d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016b80:	8d 51 02             	lea    edx,[ecx+0x2]
c0016b83:	66 89 10             	mov    WORD PTR [eax],dx
c0016b86:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016b8a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016b8e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016b92:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016b95:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b9f:	89 f1                	mov    ecx,esi
c0016ba1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016ba5:	89 f2                	mov    edx,esi
c0016ba7:	0f b6 d6             	movzx  edx,dh
c0016baa:	0f b6 f1             	movzx  esi,cl
c0016bad:	74 0a                	je     c0016bb9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016baf:	c1 e2 08             	shl    edx,0x8
c0016bb2:	09 f2                	or     edx,esi
c0016bb4:	80 ce 02             	or     dh,0x2
c0016bb7:	eb 08                	jmp    c0016bc1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016bb9:	c1 e2 08             	shl    edx,0x8
c0016bbc:	09 f2                	or     edx,esi
c0016bbe:	80 e6 fd             	and    dh,0xfd
c0016bc1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016bc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bca:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016bce:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016bd6:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016bd9:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016be1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016be4:	5b                   	pop    ebx
c0016be5:	5e                   	pop    esi
c0016be6:	5f                   	pop    edi
c0016be7:	c3                   	ret    

c0016be8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016be8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bf2:	c1 e0 04             	shl    eax,0x4
c0016bf5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016bf8:	c3                   	ret    

c0016bf9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016bf9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c03:	c1 e0 04             	shl    eax,0x4
c0016c06:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c0a:	c3                   	ret    

c0016c0b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c10:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c15:	c1 e0 04             	shl    eax,0x4
c0016c18:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016c1b:	c3                   	ret    

c0016c1c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016c1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c26:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c2a:	c1 e0 04             	shl    eax,0x4
c0016c2d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016c30:	c3                   	ret    

c0016c31 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016c31:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c36:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c3f:	c1 e0 04             	shl    eax,0x4
c0016c42:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c46:	c3                   	ret    

c0016c47 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c55:	c1 e0 04             	shl    eax,0x4
c0016c58:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016c5b:	c3                   	ret    

c0016c5c <Vm::faultHandler(regs*)>:
c0016c5c:	55                   	push   ebp
c0016c5d:	57                   	push   edi
c0016c5e:	56                   	push   esi
c0016c5f:	53                   	push   ebx
c0016c60:	83 ec 2c             	sub    esp,0x2c
c0016c63:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c67:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c6a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016c6e:	0f b7 f8             	movzx  edi,ax
c0016c71:	0f b7 c0             	movzx  eax,ax
c0016c74:	52                   	push   edx
c0016c75:	50                   	push   eax
c0016c76:	e8 23 fb ff ff       	call   c001679e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c7b:	5a                   	pop    edx
c0016c7c:	59                   	pop    ecx
c0016c7d:	89 c1                	mov    ecx,eax
c0016c7f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c86:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016c8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c8f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016c92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c96:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016c9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ca3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ca7:	e8 f2 fa ff ff       	call   c001679e <Vm::realToLinear(unsigned short, unsigned short)>
c0016cac:	5e                   	pop    esi
c0016cad:	be 06 00 00 00       	mov    esi,0x6
c0016cb2:	5d                   	pop    ebp
c0016cb3:	31 ed                	xor    ebp,ebp
c0016cb5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016cba:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016cbd:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016cc3:	0f 84 74 02 00 00    	je     c0016f3d <Vm::faultHandler(regs*)+0x2e1>
c0016cc9:	0f 87 94 00 00 00    	ja     c0016d63 <Vm::faultHandler(regs*)+0x107>
c0016ccf:	83 fa 66             	cmp    edx,0x66
c0016cd2:	0f 84 e2 01 00 00    	je     c0016eba <Vm::faultHandler(regs*)+0x25e>
c0016cd8:	77 47                	ja     c0016d21 <Vm::faultHandler(regs*)+0xc5>
c0016cda:	83 fa 36             	cmp    edx,0x36
c0016cdd:	0f 84 ca 01 00 00    	je     c0016ead <Vm::faultHandler(regs*)+0x251>
c0016ce3:	77 1a                	ja     c0016cff <Vm::faultHandler(regs*)+0xa3>
c0016ce5:	83 fa 26             	cmp    edx,0x26
c0016ce8:	0f 84 98 01 00 00    	je     c0016e86 <Vm::faultHandler(regs*)+0x22a>
c0016cee:	83 fa 2e             	cmp    edx,0x2e
c0016cf1:	0f 85 27 06 00 00    	jne    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016cf7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cfa:	31 f6                	xor    esi,esi
c0016cfc:	41                   	inc    ecx
c0016cfd:	eb bb                	jmp    c0016cba <Vm::faultHandler(regs*)+0x5e>
c0016cff:	83 fa 64             	cmp    edx,0x64
c0016d02:	0f 84 8b 01 00 00    	je     c0016e93 <Vm::faultHandler(regs*)+0x237>
c0016d08:	0f 87 92 01 00 00    	ja     c0016ea0 <Vm::faultHandler(regs*)+0x244>
c0016d0e:	83 fa 3e             	cmp    edx,0x3e
c0016d11:	0f 85 07 06 00 00    	jne    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016d17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d1a:	be 01 00 00 00       	mov    esi,0x1
c0016d1f:	eb db                	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016d21:	83 fa 6d             	cmp    edx,0x6d
c0016d24:	0f 84 34 03 00 00    	je     c001705e <Vm::faultHandler(regs*)+0x402>
c0016d2a:	77 17                	ja     c0016d43 <Vm::faultHandler(regs*)+0xe7>
c0016d2c:	83 fa 67             	cmp    edx,0x67
c0016d2f:	0f 84 92 01 00 00    	je     c0016ec7 <Vm::faultHandler(regs*)+0x26b>
c0016d35:	83 fa 6c             	cmp    edx,0x6c
c0016d38:	0f 84 b1 02 00 00    	je     c0016fef <Vm::faultHandler(regs*)+0x393>
c0016d3e:	e9 db 05 00 00       	jmp    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016d43:	83 fa 6f             	cmp    edx,0x6f
c0016d46:	0f 84 40 04 00 00    	je     c001718c <Vm::faultHandler(regs*)+0x530>
c0016d4c:	0f 82 a2 03 00 00    	jb     c00170f4 <Vm::faultHandler(regs*)+0x498>
c0016d52:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016d58:	0f 84 76 01 00 00    	je     c0016ed4 <Vm::faultHandler(regs*)+0x278>
c0016d5e:	e9 bb 05 00 00       	jmp    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016d63:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016d69:	0f 84 57 05 00 00    	je     c00172c6 <Vm::faultHandler(regs*)+0x66a>
c0016d6f:	0f 87 a9 00 00 00    	ja     c0016e1e <Vm::faultHandler(regs*)+0x1c2>
c0016d75:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016d7b:	0f 84 d6 04 00 00    	je     c0017257 <Vm::faultHandler(regs*)+0x5fb>
c0016d81:	77 78                	ja     c0016dfb <Vm::faultHandler(regs*)+0x19f>
c0016d83:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016d89:	0f 84 0e 02 00 00    	je     c0016f9d <Vm::faultHandler(regs*)+0x341>
c0016d8f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016d95:	0f 85 83 05 00 00    	jne    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016d9b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016d9f:	89 d1                	mov    ecx,edx
c0016da1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016da4:	c1 e1 08             	shl    ecx,0x8
c0016da7:	09 ca                	or     edx,ecx
c0016da9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016dac:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016db0:	89 d1                	mov    ecx,edx
c0016db2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016db6:	c1 e1 08             	shl    ecx,0x8
c0016db9:	09 ca                	or     edx,ecx
c0016dbb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016dbe:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016dc2:	89 d1                	mov    ecx,edx
c0016dc4:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016dc8:	c1 e1 08             	shl    ecx,0x8
c0016dcb:	09 ca                	or     edx,ecx
c0016dcd:	81 ca 00 02 02 00    	or     edx,0x20200
c0016dd3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016dd6:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016dda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016de0:	d1 e8                	shr    eax,1
c0016de2:	83 e0 01             	and    eax,0x1
c0016de5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016de8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016deb:	83 c0 06             	add    eax,0x6
c0016dee:	25 ff ff 00 00       	and    eax,0xffff
c0016df3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016df6:	e9 1f 05 00 00       	jmp    c001731a <Vm::faultHandler(regs*)+0x6be>
c0016dfb:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e01:	0f 84 95 04 00 00    	je     c001729c <Vm::faultHandler(regs*)+0x640>
c0016e07:	0f 82 66 04 00 00    	jb     c0017273 <Vm::faultHandler(regs*)+0x617>
c0016e0d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016e13:	0f 84 9a 04 00 00    	je     c00172b3 <Vm::faultHandler(regs*)+0x657>
c0016e19:	e9 00 05 00 00       	jmp    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016e1e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016e24:	0f 84 dd 04 00 00    	je     c0017307 <Vm::faultHandler(regs*)+0x6ab>
c0016e2a:	77 2e                	ja     c0016e5a <Vm::faultHandler(regs*)+0x1fe>
c0016e2c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016e32:	0f 84 aa 04 00 00    	je     c00172e2 <Vm::faultHandler(regs*)+0x686>
c0016e38:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016e3e:	0f 85 da 04 00 00    	jne    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016e44:	50                   	push   eax
c0016e45:	50                   	push   eax
c0016e46:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016e4a:	50                   	push   eax
c0016e4b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e4f:	50                   	push   eax
c0016e50:	e8 13 f9 ff ff       	call   c0016768 <Vm::outbv(unsigned short, unsigned char)>
c0016e55:	e9 a5 04 00 00       	jmp    c00172ff <Vm::faultHandler(regs*)+0x6a3>
c0016e5a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016e60:	0f 84 6d 01 00 00    	je     c0016fd3 <Vm::faultHandler(regs*)+0x377>
c0016e66:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016e6c:	0f 84 6f 01 00 00    	je     c0016fe1 <Vm::faultHandler(regs*)+0x385>
c0016e72:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016e78:	0f 85 a0 04 00 00    	jne    c001731e <Vm::faultHandler(regs*)+0x6c2>
c0016e7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e81:	e9 76 fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016e86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e89:	be 02 00 00 00       	mov    esi,0x2
c0016e8e:	e9 69 fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016e93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e96:	be 03 00 00 00       	mov    esi,0x3
c0016e9b:	e9 5c fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016ea0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ea3:	be 04 00 00 00       	mov    esi,0x4
c0016ea8:	e9 4f fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016ead:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016eb0:	be 05 00 00 00       	mov    esi,0x5
c0016eb5:	e9 42 fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016eba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ebd:	bd 01 00 00 00       	mov    ebp,0x1
c0016ec2:	e9 35 fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016ec7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016eca:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016ecf:	e9 28 fe ff ff       	jmp    c0016cfc <Vm::faultHandler(regs*)+0xa0>
c0016ed4:	83 e5 01             	and    ebp,0x1
c0016ed7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016eda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ede:	74 30                	je     c0016f10 <Vm::faultHandler(regs*)+0x2b4>
c0016ee0:	83 e9 04             	sub    ecx,0x4
c0016ee3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ee9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016eef:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ef2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ef5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016efb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016eff:	0f 84 12 04 00 00    	je     c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016f05:	80 ce 02             	or     dh,0x2
c0016f08:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f0b:	e9 07 04 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016f10:	83 e9 02             	sub    ecx,0x2
c0016f13:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f19:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f1c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f20:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f26:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f2a:	74 05                	je     c0016f31 <Vm::faultHandler(regs*)+0x2d5>
c0016f2c:	80 ce 02             	or     dh,0x2
c0016f2f:	eb 03                	jmp    c0016f34 <Vm::faultHandler(regs*)+0x2d8>
c0016f31:	80 e6 fd             	and    dh,0xfd
c0016f34:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f38:	e9 da 03 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016f3d:	83 e5 01             	and    ebp,0x1
c0016f40:	74 2a                	je     c0016f6c <Vm::faultHandler(regs*)+0x310>
c0016f42:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f44:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f4a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f50:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f55:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f5b:	c1 e8 09             	shr    eax,0x9
c0016f5e:	83 e0 01             	and    eax,0x1
c0016f61:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f64:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f67:	83 c0 04             	add    eax,0x4
c0016f6a:	eb 24                	jmp    c0016f90 <Vm::faultHandler(regs*)+0x334>
c0016f6c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016f6f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f75:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f78:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016f7b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f81:	c1 e8 09             	shr    eax,0x9
c0016f84:	83 e0 01             	and    eax,0x1
c0016f87:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f8a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f8d:	83 c0 02             	add    eax,0x2
c0016f90:	25 ff ff 00 00       	and    eax,0xffff
c0016f95:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f98:	e9 7a 03 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016f9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fa1:	3d ee 00 00 00       	cmp    eax,0xee
c0016fa6:	75 10                	jne    c0016fb8 <Vm::faultHandler(regs*)+0x35c>
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016fae:	e8 52 f8 ff ff       	call   c0016805 <Vm::mainloop3(unsigned long)>
c0016fb3:	e9 4a 03 00 00       	jmp    c0017302 <Vm::faultHandler(regs*)+0x6a6>
c0016fb8:	83 ec 0c             	sub    esp,0xc
c0016fbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016fbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fc3:	51                   	push   ecx
c0016fc4:	50                   	push   eax
c0016fc5:	53                   	push   ebx
c0016fc6:	e8 80 fb ff ff       	call   c0016b4b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016fcb:	83 c4 20             	add    esp,0x20
c0016fce:	e9 47 03 00 00       	jmp    c001731a <Vm::faultHandler(regs*)+0x6be>
c0016fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fd8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016fdc:	e9 36 03 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fe6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016fea:	e9 28 03 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0016fef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ff4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016ff7:	74 2b                	je     c0017024 <Vm::faultHandler(regs*)+0x3c8>
c0016ff9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017000:	76 22                	jbe    c0017024 <Vm::faultHandler(regs*)+0x3c8>
c0017002:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017006:	50                   	push   eax
c0017007:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001700b:	50                   	push   eax
c001700c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017010:	50                   	push   eax
c0017011:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017015:	50                   	push   eax
c0017016:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001701a:	50                   	push   eax
c001701b:	6a 6c                	push   0x6c
c001701d:	6a 6c                	push   0x6c
c001701f:	e9 c0 01 00 00       	jmp    c00171e4 <Vm::faultHandler(regs*)+0x588>
c0017024:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	0f b7 f6             	movzx  esi,si
c001702e:	50                   	push   eax
c001702f:	e8 21 f7 ff ff       	call   c0016755 <Vm::inbv(unsigned short)>
c0017034:	83 c4 0c             	add    esp,0xc
c0017037:	0f b6 c0             	movzx  eax,al
c001703a:	50                   	push   eax
c001703b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001703f:	50                   	push   eax
c0017040:	56                   	push   esi
c0017041:	e8 d6 fb ff ff       	call   c0016c1c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001704c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017050:	74 03                	je     c0017055 <Vm::faultHandler(regs*)+0x3f9>
c0017052:	48                   	dec    eax
c0017053:	eb 01                	jmp    c0017056 <Vm::faultHandler(regs*)+0x3fa>
c0017055:	40                   	inc    eax
c0017056:	0f b7 c0             	movzx  eax,ax
c0017059:	e9 8e 00 00 00       	jmp    c00170ec <Vm::faultHandler(regs*)+0x490>
c001705e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017063:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017066:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017069:	74 29                	je     c0017094 <Vm::faultHandler(regs*)+0x438>
c001706b:	3d ff ff 00 00       	cmp    eax,0xffff
c0017070:	76 22                	jbe    c0017094 <Vm::faultHandler(regs*)+0x438>
c0017072:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017076:	50                   	push   eax
c0017077:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001707b:	50                   	push   eax
c001707c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017080:	50                   	push   eax
c0017081:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017085:	50                   	push   eax
c0017086:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001708a:	50                   	push   eax
c001708b:	6a 6d                	push   0x6d
c001708d:	6a 6d                	push   0x6d
c001708f:	e9 50 01 00 00       	jmp    c00171e4 <Vm::faultHandler(regs*)+0x588>
c0017094:	83 e5 01             	and    ebp,0x1
c0017097:	0f b7 c8             	movzx  ecx,ax
c001709a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001709d:	0f b7 f6             	movzx  esi,si
c00170a0:	74 1e                	je     c00170c0 <Vm::faultHandler(regs*)+0x464>
c00170a2:	ed                   	in     eax,dx
c00170a3:	55                   	push   ebp
c00170a4:	50                   	push   eax
c00170a5:	51                   	push   ecx
c00170a6:	56                   	push   esi
c00170a7:	e8 9b fb ff ff       	call   c0016c47 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00170ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	8d 50 04             	lea    edx,[eax+0x4]
c00170b5:	83 e8 04             	sub    eax,0x4
c00170b8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170be:	eb 20                	jmp    c00170e0 <Vm::faultHandler(regs*)+0x484>
c00170c0:	66 ed                	in     ax,dx
c00170c2:	57                   	push   edi
c00170c3:	0f b7 c0             	movzx  eax,ax
c00170c6:	50                   	push   eax
c00170c7:	51                   	push   ecx
c00170c8:	56                   	push   esi
c00170c9:	e8 63 fb ff ff       	call   c0016c31 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00170ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170d1:	83 c4 10             	add    esp,0x10
c00170d4:	8d 50 02             	lea    edx,[eax+0x2]
c00170d7:	83 e8 02             	sub    eax,0x2
c00170da:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170e0:	25 ff ff 00 00       	and    eax,0xffff
c00170e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170e9:	0f 44 c2             	cmove  eax,edx
c00170ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00170ef:	e9 23 02 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c00170f4:	8d 46 ff             	lea    eax,[esi-0x1]
c00170f7:	0f b6 f0             	movzx  esi,al
c00170fa:	83 fe 05             	cmp    esi,0x5
c00170fd:	77 23                	ja     c0017122 <Vm::faultHandler(regs*)+0x4c6>
c00170ff:	ff 24 b5 ac 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdda54]
c0017106:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001710b:	eb 15                	jmp    c0017122 <Vm::faultHandler(regs*)+0x4c6>
c001710d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017111:	eb 0f                	jmp    c0017122 <Vm::faultHandler(regs*)+0x4c6>
c0017113:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017117:	eb 09                	jmp    c0017122 <Vm::faultHandler(regs*)+0x4c6>
c0017119:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001711d:	eb 03                	jmp    c0017122 <Vm::faultHandler(regs*)+0x4c6>
c001711f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017122:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017127:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001712a:	74 29                	je     c0017155 <Vm::faultHandler(regs*)+0x4f9>
c001712c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017131:	76 22                	jbe    c0017155 <Vm::faultHandler(regs*)+0x4f9>
c0017133:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017137:	50                   	push   eax
c0017138:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001713c:	50                   	push   eax
c001713d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017141:	50                   	push   eax
c0017142:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017146:	50                   	push   eax
c0017147:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001714b:	50                   	push   eax
c001714c:	6a 6e                	push   0x6e
c001714e:	6a 6e                	push   0x6e
c0017150:	e9 8f 00 00 00       	jmp    c00171e4 <Vm::faultHandler(regs*)+0x588>
c0017155:	52                   	push   edx
c0017156:	0f b7 c0             	movzx  eax,ax
c0017159:	52                   	push   edx
c001715a:	50                   	push   eax
c001715b:	57                   	push   edi
c001715c:	e8 87 fa ff ff       	call   c0016be8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017161:	59                   	pop    ecx
c0017162:	5e                   	pop    esi
c0017163:	0f b6 c0             	movzx  eax,al
c0017166:	50                   	push   eax
c0017167:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001716b:	50                   	push   eax
c001716c:	e8 f7 f5 ff ff       	call   c0016768 <Vm::outbv(unsigned short, unsigned char)>
c0017171:	83 c4 10             	add    esp,0x10
c0017174:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017177:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001717b:	74 03                	je     c0017180 <Vm::faultHandler(regs*)+0x524>
c001717d:	48                   	dec    eax
c001717e:	eb 01                	jmp    c0017181 <Vm::faultHandler(regs*)+0x525>
c0017180:	40                   	inc    eax
c0017181:	0f b7 c0             	movzx  eax,ax
c0017184:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017187:	e9 8b 01 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c001718c:	8d 46 ff             	lea    eax,[esi-0x1]
c001718f:	0f b6 f0             	movzx  esi,al
c0017192:	83 fe 05             	cmp    esi,0x5
c0017195:	77 1e                	ja     c00171b5 <Vm::faultHandler(regs*)+0x559>
c0017197:	ff 24 b5 c4 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdda3c]
c001719e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171a2:	eb 11                	jmp    c00171b5 <Vm::faultHandler(regs*)+0x559>
c00171a4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00171a7:	eb 0c                	jmp    c00171b5 <Vm::faultHandler(regs*)+0x559>
c00171a9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00171ac:	eb 07                	jmp    c00171b5 <Vm::faultHandler(regs*)+0x559>
c00171ae:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00171b1:	eb 02                	jmp    c00171b5 <Vm::faultHandler(regs*)+0x559>
c00171b3:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00171b5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00171ba:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00171bd:	74 37                	je     c00171f6 <Vm::faultHandler(regs*)+0x59a>
c00171bf:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00171c5:	76 2f                	jbe    c00171f6 <Vm::faultHandler(regs*)+0x59a>
c00171c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171cb:	50                   	push   eax
c00171cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171d0:	50                   	push   eax
c00171d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171d5:	50                   	push   eax
c00171d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171da:	50                   	push   eax
c00171db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171df:	50                   	push   eax
c00171e0:	6a 6f                	push   0x6f
c00171e2:	6a 6f                	push   0x6f
c00171e4:	68 50 25 02 c0       	push   0xc0022550
c00171e9:	e8 1c 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00171ee:	83 c4 20             	add    esp,0x20
c00171f1:	e9 86 01 00 00       	jmp    c001737c <Vm::faultHandler(regs*)+0x720>
c00171f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171f9:	0f b7 d7             	movzx  edx,di
c00171fc:	0f b7 c6             	movzx  eax,si
c00171ff:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017202:	81 e1 00 04 00 00    	and    ecx,0x400
c0017208:	83 e5 01             	and    ebp,0x1
c001720b:	74 1c                	je     c0017229 <Vm::faultHandler(regs*)+0x5cd>
c001720d:	55                   	push   ebp
c001720e:	55                   	push   ebp
c001720f:	50                   	push   eax
c0017210:	52                   	push   edx
c0017211:	e8 f5 f9 ff ff       	call   c0016c0b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	89 fa                	mov    edx,edi
c001721b:	ef                   	out    dx,eax
c001721c:	8d 46 04             	lea    eax,[esi+0x4]
c001721f:	83 ee 04             	sub    esi,0x4
c0017222:	25 ff ff 00 00       	and    eax,0xffff
c0017227:	eb 1b                	jmp    c0017244 <Vm::faultHandler(regs*)+0x5e8>
c0017229:	55                   	push   ebp
c001722a:	55                   	push   ebp
c001722b:	50                   	push   eax
c001722c:	52                   	push   edx
c001722d:	e8 c7 f9 ff ff       	call   c0016bf9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017232:	83 c4 10             	add    esp,0x10
c0017235:	89 fa                	mov    edx,edi
c0017237:	66 ef                	out    dx,ax
c0017239:	8d 46 02             	lea    eax,[esi+0x2]
c001723c:	83 ee 02             	sub    esi,0x2
c001723f:	25 ff ff 00 00       	and    eax,0xffff
c0017244:	81 e6 ff ff 00 00    	and    esi,0xffff
c001724a:	85 c9                	test   ecx,ecx
c001724c:	0f 44 f0             	cmove  esi,eax
c001724f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017252:	e9 c0 00 00 00       	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0017257:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001725e:	83 ec 0c             	sub    esp,0xc
c0017261:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017265:	50                   	push   eax
c0017266:	e8 ea f4 ff ff       	call   c0016755 <Vm::inbv(unsigned short)>
c001726b:	0f b6 c0             	movzx  eax,al
c001726e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017271:	eb 3a                	jmp    c00172ad <Vm::faultHandler(regs*)+0x651>
c0017273:	83 e5 01             	and    ebp,0x1
c0017276:	74 07                	je     c001727f <Vm::faultHandler(regs*)+0x623>
c0017278:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001727c:	ed                   	in     eax,dx
c001727d:	eb 14                	jmp    c0017293 <Vm::faultHandler(regs*)+0x637>
c001727f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017282:	66 31 f6             	xor    si,si
c0017285:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017288:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001728c:	66 ed                	in     ax,dx
c001728e:	0f b7 c0             	movzx  eax,ax
c0017291:	09 f0                	or     eax,esi
c0017293:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017296:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001729a:	eb 7e                	jmp    c001731a <Vm::faultHandler(regs*)+0x6be>
c001729c:	52                   	push   edx
c001729d:	52                   	push   edx
c001729e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172a2:	50                   	push   eax
c00172a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172a7:	50                   	push   eax
c00172a8:	e8 bb f4 ff ff       	call   c0016768 <Vm::outbv(unsigned short, unsigned char)>
c00172ad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00172b1:	eb 4f                	jmp    c0017302 <Vm::faultHandler(regs*)+0x6a6>
c00172b3:	83 e5 01             	and    ebp,0x1
c00172b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172b9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172bd:	74 03                	je     c00172c2 <Vm::faultHandler(regs*)+0x666>
c00172bf:	ef                   	out    dx,eax
c00172c0:	eb d4                	jmp    c0017296 <Vm::faultHandler(regs*)+0x63a>
c00172c2:	66 ef                	out    dx,ax
c00172c4:	eb d0                	jmp    c0017296 <Vm::faultHandler(regs*)+0x63a>
c00172c6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172ca:	83 ec 0c             	sub    esp,0xc
c00172cd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00172d4:	50                   	push   eax
c00172d5:	e8 7b f4 ff ff       	call   c0016755 <Vm::inbv(unsigned short)>
c00172da:	0f b6 c0             	movzx  eax,al
c00172dd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172e0:	eb 1d                	jmp    c00172ff <Vm::faultHandler(regs*)+0x6a3>
c00172e2:	83 e5 01             	and    ebp,0x1
c00172e5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172e8:	74 03                	je     c00172ed <Vm::faultHandler(regs*)+0x691>
c00172ea:	ed                   	in     eax,dx
c00172eb:	eb 0d                	jmp    c00172fa <Vm::faultHandler(regs*)+0x69e>
c00172ed:	66 ed                	in     ax,dx
c00172ef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00172f2:	0f b7 c0             	movzx  eax,ax
c00172f5:	66 31 d2             	xor    dx,dx
c00172f8:	09 d0                	or     eax,edx
c00172fa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172fd:	eb 18                	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c00172ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017302:	83 c4 10             	add    esp,0x10
c0017305:	eb 13                	jmp    c001731a <Vm::faultHandler(regs*)+0x6be>
c0017307:	83 e5 01             	and    ebp,0x1
c001730a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001730d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017310:	74 03                	je     c0017315 <Vm::faultHandler(regs*)+0x6b9>
c0017312:	ef                   	out    dx,eax
c0017313:	eb 02                	jmp    c0017317 <Vm::faultHandler(regs*)+0x6bb>
c0017315:	66 ef                	out    dx,ax
c0017317:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001731a:	b0 01                	mov    al,0x1
c001731c:	eb 60                	jmp    c001737e <Vm::faultHandler(regs*)+0x722>
c001731e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017322:	50                   	push   eax
c0017323:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017327:	50                   	push   eax
c0017328:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001732c:	50                   	push   eax
c001732d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017331:	50                   	push   eax
c0017332:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017336:	50                   	push   eax
c0017337:	52                   	push   edx
c0017338:	52                   	push   edx
c0017339:	68 7d 25 02 c0       	push   0xc002257d
c001733e:	e8 c7 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017343:	83 c4 20             	add    esp,0x20
c0017346:	83 ec 0c             	sub    esp,0xc
c0017349:	6a 60                	push   0x60
c001734b:	e8 05 f4 ff ff       	call   c0016755 <Vm::inbv(unsigned short)>
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	0f b6 d0             	movzx  edx,al
c0017356:	83 fa 1c             	cmp    edx,0x1c
c0017359:	74 05                	je     c0017360 <Vm::faultHandler(regs*)+0x704>
c001735b:	83 fa 5a             	cmp    edx,0x5a
c001735e:	75 e6                	jne    c0017346 <Vm::faultHandler(regs*)+0x6ea>
c0017360:	0f b6 c0             	movzx  eax,al
c0017363:	83 f8 1c             	cmp    eax,0x1c
c0017366:	74 05                	je     c001736d <Vm::faultHandler(regs*)+0x711>
c0017368:	83 f8 5a             	cmp    eax,0x5a
c001736b:	75 0f                	jne    c001737c <Vm::faultHandler(regs*)+0x720>
c001736d:	83 ec 0c             	sub    esp,0xc
c0017370:	6a 60                	push   0x60
c0017372:	e8 de f3 ff ff       	call   c0016755 <Vm::inbv(unsigned short)>
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	eb e4                	jmp    c0017360 <Vm::faultHandler(regs*)+0x704>
c001737c:	31 c0                	xor    eax,eax
c001737e:	83 c4 2c             	add    esp,0x2c
c0017381:	5b                   	pop    ebx
c0017382:	5e                   	pop    esi
c0017383:	5f                   	pop    edi
c0017384:	5d                   	pop    ebp
c0017385:	c3                   	ret    

c0017386 <noCopro(unsigned long)>:
c0017386:	c3                   	ret    

c0017387 <nmiHandler(regs*, void*)>:
c0017387:	83 ec 0c             	sub    esp,0xc
c001738a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001738f:	83 ec 0c             	sub    esp,0xc
c0017392:	50                   	push   eax
c0017393:	e8 3e ff fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	90                   	nop
c001739c:	83 c4 0c             	add    esp,0xc
c001739f:	c3                   	ret    

c00173a0 <doubleFault(regs*, void*)>:
c00173a0:	55                   	push   ebp
c00173a1:	89 e5                	mov    ebp,esp
c00173a3:	83 ec 08             	sub    esp,0x8
c00173a6:	83 ec 0c             	sub    esp,0xc
c00173a9:	68 dc 25 02 c0       	push   0xc00225dc
c00173ae:	e8 de 9e ff ff       	call   c0011291 <KePanic(char const*)>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	90                   	nop
c00173b7:	c9                   	leave  
c00173b8:	c3                   	ret    

c00173b9 <displayDebugInfo(regs*)>:
c00173b9:	83 ec 1c             	sub    esp,0x1c
c00173bc:	0f 20 c0             	mov    eax,cr0
c00173bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c3:	0f 20 d0             	mov    eax,cr2
c00173c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173ca:	0f 20 d8             	mov    eax,cr3
c00173cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173d1:	0f 20 e0             	mov    eax,cr4
c00173d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00173d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173db:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00173de:	83 ec 08             	sub    esp,0x8
c00173e1:	50                   	push   eax
c00173e2:	68 f8 25 02 c0       	push   0xc00225f8
c00173e7:	e8 1e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173ec:	83 c4 10             	add    esp,0x10
c00173ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00173f6:	83 ec 08             	sub    esp,0x8
c00173f9:	50                   	push   eax
c00173fa:	68 e9 25 02 c0       	push   0xc00225e9
c00173ff:	e8 06 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001740b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001740e:	83 ec 08             	sub    esp,0x8
c0017411:	50                   	push   eax
c0017412:	68 f4 25 02 c0       	push   0xc00225f4
c0017417:	e8 ee 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001741c:	83 c4 10             	add    esp,0x10
c001741f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017423:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017426:	83 ec 08             	sub    esp,0x8
c0017429:	50                   	push   eax
c001742a:	68 03 26 02 c0       	push   0xc0022603
c001742f:	e8 d6 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001743b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001743e:	83 ec 08             	sub    esp,0x8
c0017441:	50                   	push   eax
c0017442:	68 0e 26 02 c0       	push   0xc002260e
c0017447:	e8 be 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017456:	68 19 26 02 c0       	push   0xc0022619
c001745b:	e8 aa 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	83 ec 08             	sub    esp,0x8
c0017466:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001746a:	68 24 26 02 c0       	push   0xc0022624
c001746f:	e8 96 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001747e:	c1 e0 05             	shl    eax,0x5
c0017481:	8d 90 a0 35 02 c0    	lea    edx,[eax-0x3ffdca60]
c0017487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001748e:	83 ec 04             	sub    esp,0x4
c0017491:	52                   	push   edx
c0017492:	50                   	push   eax
c0017493:	68 2f 26 02 c0       	push   0xc002262f
c0017498:	e8 6d 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ab:	83 ec 0c             	sub    esp,0xc
c00174ae:	50                   	push   eax
c00174af:	e8 bb 12 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00174b4:	83 c4 10             	add    esp,0x10
c00174b7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174c2:	83 ec 08             	sub    esp,0x8
c00174c5:	68 3e 26 02 c0       	push   0xc002263e
c00174ca:	50                   	push   eax
c00174cb:	e8 dc 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174d0:	83 c4 10             	add    esp,0x10
c00174d3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174e2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00174e5:	83 ec 08             	sub    esp,0x8
c00174e8:	52                   	push   edx
c00174e9:	50                   	push   eax
c00174ea:	e8 77 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174fd:	83 ec 08             	sub    esp,0x8
c0017500:	68 4c 26 02 c0       	push   0xc002264c
c0017505:	50                   	push   eax
c0017506:	e8 a1 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017513:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017519:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001751e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017520:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017523:	83 c2 0c             	add    edx,0xc
c0017526:	83 ec 08             	sub    esp,0x8
c0017529:	52                   	push   edx
c001752a:	50                   	push   eax
c001752b:	e8 7c 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017530:	83 c4 10             	add    esp,0x10
c0017533:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017538:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001753e:	83 ec 08             	sub    esp,0x8
c0017541:	68 55 26 02 c0       	push   0xc0022655
c0017546:	50                   	push   eax
c0017547:	e8 60 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017554:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001755a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001755e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017561:	83 ec 08             	sub    esp,0x8
c0017564:	52                   	push   edx
c0017565:	50                   	push   eax
c0017566:	e8 fb 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017573:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017579:	83 ec 08             	sub    esp,0x8
c001757c:	68 5d 26 02 c0       	push   0xc002265d
c0017581:	50                   	push   eax
c0017582:	e8 25 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017587:	83 c4 10             	add    esp,0x10
c001758a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017599:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001759c:	83 ec 08             	sub    esp,0x8
c001759f:	52                   	push   edx
c00175a0:	50                   	push   eax
c00175a1:	e8 c0 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175a6:	83 c4 10             	add    esp,0x10
c00175a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b4:	83 ec 08             	sub    esp,0x8
c00175b7:	68 65 26 02 c0       	push   0xc0022665
c00175bc:	50                   	push   eax
c00175bd:	e8 ea 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175d4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	52                   	push   edx
c00175db:	50                   	push   eax
c00175dc:	e8 85 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175e1:	83 c4 10             	add    esp,0x10
c00175e4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ef:	83 ec 08             	sub    esp,0x8
c00175f2:	68 6d 26 02 c0       	push   0xc002266d
c00175f7:	50                   	push   eax
c00175f8:	e8 af 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017605:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001760f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017612:	83 ec 08             	sub    esp,0x8
c0017615:	52                   	push   edx
c0017616:	50                   	push   eax
c0017617:	e8 4a 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017624:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762a:	83 ec 08             	sub    esp,0x8
c001762d:	68 75 26 02 c0       	push   0xc0022675
c0017632:	50                   	push   eax
c0017633:	e8 74 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017638:	83 c4 10             	add    esp,0x10
c001763b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017640:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017646:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001764a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001764d:	83 ec 08             	sub    esp,0x8
c0017650:	52                   	push   edx
c0017651:	50                   	push   eax
c0017652:	e8 0f 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017665:	83 ec 08             	sub    esp,0x8
c0017668:	68 7d 26 02 c0       	push   0xc002267d
c001766d:	50                   	push   eax
c001766e:	e8 39 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017681:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017685:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017688:	83 ec 08             	sub    esp,0x8
c001768b:	52                   	push   edx
c001768c:	50                   	push   eax
c001768d:	e8 d4 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017692:	83 c4 10             	add    esp,0x10
c0017695:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001769a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a0:	83 ec 08             	sub    esp,0x8
c00176a3:	68 85 26 02 c0       	push   0xc0022685
c00176a8:	50                   	push   eax
c00176a9:	e8 fe 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176bc:	83 ec 08             	sub    esp,0x8
c00176bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176c3:	50                   	push   eax
c00176c4:	e8 9d 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d7:	83 ec 08             	sub    esp,0x8
c00176da:	68 8e 26 02 c0       	push   0xc002268e
c00176df:	50                   	push   eax
c00176e0:	e8 c7 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f3:	83 ec 08             	sub    esp,0x8
c00176f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176fa:	50                   	push   eax
c00176fb:	e8 66 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017708:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770e:	83 ec 08             	sub    esp,0x8
c0017711:	68 96 26 02 c0       	push   0xc0022696
c0017716:	50                   	push   eax
c0017717:	e8 90 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017724:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001772a:	83 ec 08             	sub    esp,0x8
c001772d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017731:	50                   	push   eax
c0017732:	e8 2f 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	fa                   	cli    
c001773b:	f4                   	hlt    
c001773c:	eb fe                	jmp    c001773c <displayDebugInfo(regs*)+0x383>

c001773e <HalSystemIdle()>:
c001773e:	56                   	push   esi
c001773f:	53                   	push   ebx
c0017740:	83 ec 14             	sub    esp,0x14
c0017743:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017748:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001774e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017754:	83 e0 04             	and    eax,0x4
c0017757:	0f b6 c0             	movzx  eax,al
c001775a:	85 c0                	test   eax,eax
c001775c:	0f 95 c0             	setne  al
c001775f:	0f b6 c0             	movzx  eax,al
c0017762:	85 c0                	test   eax,eax
c0017764:	74 4c                	je     c00177b2 <HalSystemIdle()+0x74>
c0017766:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001776b:	83 ec 08             	sub    esp,0x8
c001776e:	68 e1 00 00 00       	push   0xe1
c0017773:	50                   	push   eax
c0017774:	e8 69 f9 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017784:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001778d:	83 e2 02             	and    edx,0x2
c0017790:	89 d3                	mov    ebx,edx
c0017792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017796:	83 e2 00             	and    edx,0x0
c0017799:	89 d6                	mov    esi,edx
c001779b:	56                   	push   esi
c001779c:	53                   	push   ebx
c001779d:	68 e1 00 00 00       	push   0xe1
c00177a2:	50                   	push   eax
c00177a3:	e8 66 f9 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00177a8:	83 c4 10             	add    esp,0x10
c00177ab:	e8 e4 89 fe ff       	call   c0000194 <doTPAUSE>
c00177b0:	eb 01                	jmp    c00177b3 <HalSystemIdle()+0x75>
c00177b2:	f4                   	hlt    
c00177b3:	90                   	nop
c00177b4:	83 c4 14             	add    esp,0x14
c00177b7:	5b                   	pop    ebx
c00177b8:	5e                   	pop    esi
c00177b9:	c3                   	ret    

c00177ba <displayProgramFault(char const*)>:
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	83 ec 0c             	sub    esp,0xc
c00177c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177c4:	e8 41 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00177d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177dc:	85 c0                	test   eax,eax
c00177de:	74 21                	je     c0017801 <displayProgramFault(char const*)+0x47>
c00177e0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00177e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177f0:	6a 04                	push   0x4
c00177f2:	6a 0f                	push   0xf
c00177f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177f8:	50                   	push   eax
c00177f9:	e8 20 13 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177fe:	83 c4 10             	add    esp,0x10
c0017801:	90                   	nop
c0017802:	83 c4 0c             	add    esp,0xc
c0017805:	c3                   	ret    

c0017806 <gpFault(regs*, void*)>:
c0017806:	83 ec 1c             	sub    esp,0x1c
c0017809:	c7 05 74 97 02 c0 5c 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c5c
c0017813:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017818:	85 c0                	test   eax,eax
c001781a:	74 1e                	je     c001783a <gpFault(regs*, void*)+0x34>
c001781c:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017821:	83 ec 0c             	sub    esp,0xc
c0017824:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017828:	ff d0                	call   eax
c001782a:	83 c4 10             	add    esp,0x10
c001782d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017831:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017836:	85 c0                	test   eax,eax
c0017838:	75 2e                	jne    c0017868 <gpFault(regs*, void*)+0x62>
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	68 9e 26 02 c0       	push   0xc002269e
c0017842:	e8 73 ff ff ff       	call   c00177ba <displayProgramFault(char const*)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	83 ec 0c             	sub    esp,0xc
c001784d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017851:	e8 63 fb ff ff       	call   c00173b9 <displayDebugInfo(regs*)>
c0017856:	83 c4 10             	add    esp,0x10
c0017859:	83 ec 0c             	sub    esp,0xc
c001785c:	6a 00                	push   0x0
c001785e:	e8 99 ed ff ff       	call   c00165fc <Thr::terminateFromIRQ(int)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	eb 01                	jmp    c0017869 <gpFault(regs*, void*)+0x63>
c0017868:	90                   	nop
c0017869:	83 c4 1c             	add    esp,0x1c
c001786c:	c3                   	ret    

c001786d <pgFault(regs*, void*)>:
c001786d:	83 ec 1c             	sub    esp,0x1c
c0017870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017874:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017877:	0f 20 d0             	mov    eax,cr2
c001787a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001787e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017882:	83 ec 04             	sub    esp,0x4
c0017885:	52                   	push   edx
c0017886:	50                   	push   eax
c0017887:	68 7c 27 02 c0       	push   0xc002277c
c001788c:	e8 79 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017891:	83 c4 10             	add    esp,0x10
c0017894:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017899:	8b 00                	mov    eax,DWORD PTR [eax]
c001789b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001789e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00178a4:	0f 20 d2             	mov    edx,cr2
c00178a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00178ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178af:	83 ec 08             	sub    esp,0x8
c00178b2:	52                   	push   edx
c00178b3:	50                   	push   eax
c00178b4:	e8 c1 2a ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	0f b6 c0             	movzx  eax,al
c00178bf:	85 c0                	test   eax,eax
c00178c1:	75 2e                	jne    c00178f1 <pgFault(regs*, void*)+0x84>
c00178c3:	83 ec 0c             	sub    esp,0xc
c00178c6:	68 b7 26 02 c0       	push   0xc00226b7
c00178cb:	e8 ea fe ff ff       	call   c00177ba <displayProgramFault(char const*)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	83 ec 0c             	sub    esp,0xc
c00178d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178da:	e8 da fa ff ff       	call   c00173b9 <displayDebugInfo(regs*)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	6a 00                	push   0x0
c00178e7:	e8 10 ed ff ff       	call   c00165fc <Thr::terminateFromIRQ(int)>
c00178ec:	83 c4 10             	add    esp,0x10
c00178ef:	eb 01                	jmp    c00178f2 <pgFault(regs*, void*)+0x85>
c00178f1:	90                   	nop
c00178f2:	83 c4 1c             	add    esp,0x1c
c00178f5:	c3                   	ret    

c00178f6 <otherISRHandler(regs*, void*)>:
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	83 ec 0c             	sub    esp,0xc
c00178fc:	68 a4 27 02 c0       	push   0xc00227a4
c0017901:	e8 b4 fe ff ff       	call   c00177ba <displayProgramFault(char const*)>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	83 ec 0c             	sub    esp,0xc
c001790c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017910:	e8 a4 fa ff ff       	call   c00173b9 <displayDebugInfo(regs*)>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	83 ec 0c             	sub    esp,0xc
c001791b:	6a 00                	push   0x0
c001791d:	e8 da ec ff ff       	call   c00165fc <Thr::terminateFromIRQ(int)>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	90                   	nop
c0017926:	83 c4 0c             	add    esp,0xc
c0017929:	c3                   	ret    

c001792a <opcodeFault(regs*, void*)>:
c001792a:	55                   	push   ebp
c001792b:	89 e5                	mov    ebp,esp
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017933:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017936:	83 ec 08             	sub    esp,0x8
c0017939:	50                   	push   eax
c001793a:	68 c2 26 02 c0       	push   0xc00226c2
c001793f:	e8 c6 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001794c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017952:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017958:	0f b6 c0             	movzx  eax,al
c001795b:	85 c0                	test   eax,eax
c001795d:	74 21                	je     c0017980 <opcodeFault(regs*, void*)+0x56>
c001795f:	83 ec 0c             	sub    esp,0xc
c0017962:	68 cc 27 02 c0       	push   0xc00227cc
c0017967:	e8 9e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001796c:	83 c4 10             	add    esp,0x10
c001796f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017972:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017975:	8d 50 19             	lea    edx,[eax+0x19]
c0017978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001797b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001797e:	eb 2b                	jmp    c00179ab <opcodeFault(regs*, void*)+0x81>
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	68 d0 26 02 c0       	push   0xc00226d0
c0017988:	e8 2d fe ff ff       	call   c00177ba <displayProgramFault(char const*)>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	83 ec 0c             	sub    esp,0xc
c0017993:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017996:	e8 1e fa ff ff       	call   c00173b9 <displayDebugInfo(regs*)>
c001799b:	83 c4 10             	add    esp,0x10
c001799e:	83 ec 0c             	sub    esp,0xc
c00179a1:	6a 00                	push   0x0
c00179a3:	e8 54 ec ff ff       	call   c00165fc <Thr::terminateFromIRQ(int)>
c00179a8:	83 c4 10             	add    esp,0x10
c00179ab:	c9                   	leave  
c00179ac:	c3                   	ret    

c00179ad <i386SaveCoprocessor(void*)>:
c00179ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179b1:	83 c0 3f             	add    eax,0x3f
c00179b4:	83 e0 c0             	and    eax,0xffffffc0
c00179b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179bb:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c00179c1 <i386LoadCoprocessor(void*)>:
c00179c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179c5:	83 c0 3f             	add    eax,0x3f
c00179c8:	83 e0 c0             	and    eax,0xffffffc0
c00179cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179cf:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c00179d5 <x87EmulHandler(regs*, void*)>:
c00179d5:	53                   	push   ebx
c00179d6:	83 ec 08             	sub    esp,0x8
c00179d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179de:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00179e2:	74 10                	je     c00179f4 <x87EmulHandler(regs*, void*)+0x1f>
c00179e4:	83 ec 0c             	sub    esp,0xc
c00179e7:	68 dd 26 02 c0       	push   0xc00226dd
c00179ec:	e8 a0 98 ff ff       	call   c0011291 <KePanic(char const*)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	0f 20 c0             	mov    eax,cr0
c00179f7:	a8 08                	test   al,0x8
c00179f9:	74 59                	je     c0017a54 <x87EmulHandler(regs*, void*)+0x7f>
c00179fb:	0f 06                	clts   
c00179fd:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a02:	85 c0                	test   eax,eax
c0017a04:	74 0e                	je     c0017a14 <x87EmulHandler(regs*, void*)+0x3f>
c0017a06:	83 ec 0c             	sub    esp,0xc
c0017a09:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a0c:	e8 9c ff ff ff       	call   c00179ad <i386SaveCoprocessor(void*)>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017a1a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017a1e:	75 12                	jne    c0017a32 <x87EmulHandler(regs*, void*)+0x5d>
c0017a20:	83 ec 0c             	sub    esp,0xc
c0017a23:	68 40 02 00 00       	push   0x240
c0017a28:	e8 a6 00 ff ff       	call   c0007ad3 <malloc>
c0017a2d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017a30:	eb 10                	jmp    c0017a42 <x87EmulHandler(regs*, void*)+0x6d>
c0017a32:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a3d:	e8 7f ff ff ff       	call   c00179c1 <i386LoadCoprocessor(void*)>
c0017a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017a4f:	83 c4 08             	add    esp,0x8
c0017a52:	5b                   	pop    ebx
c0017a53:	c3                   	ret    
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	68 f1 26 02 c0       	push   0xc00226f1
c0017a5c:	e8 a9 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a61:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017a69:	83 c4 18             	add    esp,0x18
c0017a6c:	5b                   	pop    ebx
c0017a6d:	e9 8a eb ff ff       	jmp    c00165fc <Thr::terminateFromIRQ(int)>

c0017a72 <HalInitialiseCoprocessor()>:
c0017a72:	83 ec 10             	sub    esp,0x10
c0017a75:	6a 00                	push   0x0
c0017a77:	68 d5 79 01 c0       	push   0xc00179d5
c0017a7c:	6a 07                	push   0x7
c0017a7e:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017a88:	e8 9d 51 ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017a8d:	e8 ae 70 00 00       	call   c001eb40 <avxDetect>
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	85 c0                	test   eax,eax
c0017a97:	74 1c                	je     c0017ab5 <HalInitialiseCoprocessor()+0x43>
c0017a99:	c7 05 70 97 02 c0 6a eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eb6a
c0017aa3:	c7 05 6c 97 02 c0 7b eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eb7b
c0017aad:	83 c4 0c             	add    esp,0xc
c0017ab0:	e9 d7 70 00 00       	jmp    c001eb8c <avxInit>
c0017ab5:	e8 16 74 00 00       	call   c001eed0 <absolutelyNoChanceInHell>
c0017aba:	85 c0                	test   eax,eax
c0017abc:	74 1c                	je     c0017ada <HalInitialiseCoprocessor()+0x68>
c0017abe:	c7 05 70 97 02 c0 e8 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eee8
c0017ac8:	c7 05 6c 97 02 c0 f0 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eef0
c0017ad2:	83 c4 0c             	add    esp,0xc
c0017ad5:	e9 1e 74 00 00       	jmp    c001eef8 <sseInit>
c0017ada:	e8 37 74 00 00       	call   c001ef16 <x87Detect>
c0017adf:	85 c0                	test   eax,eax
c0017ae1:	74 1c                	je     c0017aff <HalInitialiseCoprocessor()+0x8d>
c0017ae3:	c7 05 70 97 02 c0 31 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef31
c0017aed:	c7 05 6c 97 02 c0 38 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef38
c0017af7:	83 c4 0c             	add    esp,0xc
c0017afa:	e9 40 74 00 00       	jmp    c001ef3f <x87Init>
c0017aff:	c7 05 70 97 02 c0 86 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017386
c0017b09:	c7 05 6c 97 02 c0 86 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017386
c0017b13:	0f 20 c0             	mov    eax,cr0
c0017b16:	83 c8 04             	or     eax,0x4
c0017b19:	0f 22 c0             	mov    cr0,eax
c0017b1c:	83 c4 0c             	add    esp,0xc
c0017b1f:	c3                   	ret    

c0017b20 <HalPanic(char const*)>:
c0017b20:	53                   	push   ebx
c0017b21:	83 ec 10             	sub    esp,0x10
c0017b24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b28:	fa                   	cli    
c0017b29:	53                   	push   ebx
c0017b2a:	68 07 27 02 c0       	push   0xc0022707
c0017b2f:	e8 d6 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b34:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	85 c0                	test   eax,eax
c0017b3e:	74 09                	je     c0017b49 <HalPanic(char const*)+0x29>
c0017b40:	83 ec 0c             	sub    esp,0xc
c0017b43:	53                   	push   ebx
c0017b44:	ff d0                	call   eax
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017b4e:	85 c0                	test   eax,eax
c0017b50:	0f 84 dc 00 00 00    	je     c0017c32 <HalPanic(char const*)+0x112>
c0017b56:	52                   	push   edx
c0017b57:	6a 01                	push   0x1
c0017b59:	6a 0f                	push   0xf
c0017b5b:	50                   	push   eax
c0017b5c:	e8 69 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b61:	59                   	pop    ecx
c0017b62:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b68:	e8 4d 0c ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017b6d:	58                   	pop    eax
c0017b6e:	5a                   	pop    edx
c0017b6f:	68 84 09 02 c0       	push   0xc0020984
c0017b74:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b7a:	e8 83 0a ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017b7f:	83 c4 0c             	add    esp,0xc
c0017b82:	6a 01                	push   0x1
c0017b84:	6a 0f                	push   0xf
c0017b86:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b8c:	e8 39 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b91:	59                   	pop    ecx
c0017b92:	58                   	pop    eax
c0017b93:	68 20 27 02 c0       	push   0xc0022720
c0017b98:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b9e:	e8 09 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ba3:	83 c4 0c             	add    esp,0xc
c0017ba6:	6a 0f                	push   0xf
c0017ba8:	6a 01                	push   0x1
c0017baa:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb0:	e8 15 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bb5:	58                   	pop    eax
c0017bb6:	5a                   	pop    edx
c0017bb7:	68 29 27 02 c0       	push   0xc0022729
c0017bbc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc2:	e8 e5 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bc7:	83 c4 0c             	add    esp,0xc
c0017bca:	6a 01                	push   0x1
c0017bcc:	6a 0f                	push   0xf
c0017bce:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd4:	e8 f1 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bd9:	59                   	pop    ecx
c0017bda:	58                   	pop    eax
c0017bdb:	68 6d 27 02 c0       	push   0xc002276d
c0017be0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017be6:	e8 c1 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017beb:	58                   	pop    eax
c0017bec:	5a                   	pop    edx
c0017bed:	68 36 27 02 c0       	push   0xc0022736
c0017bf2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bf8:	e8 af 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bfd:	59                   	pop    ecx
c0017bfe:	58                   	pop    eax
c0017bff:	68 70 27 02 c0       	push   0xc0022770
c0017c04:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c0a:	e8 9d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c0f:	58                   	pop    eax
c0017c10:	5a                   	pop    edx
c0017c11:	53                   	push   ebx
c0017c12:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c18:	e8 8f 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c1d:	59                   	pop    ecx
c0017c1e:	5b                   	pop    ebx
c0017c1f:	68 6d 27 02 c0       	push   0xc002276d
c0017c24:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c2a:	e8 7d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	eb fe                	jmp    c0017c32 <HalPanic(char const*)+0x112>

c0017c34 <HalQueryPerformanceCounter()>:
c0017c34:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c39:	31 d2                	xor    edx,edx
c0017c3b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017c41:	31 c0                	xor    eax,eax
c0017c43:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017c4a:	74 02                	je     c0017c4e <HalQueryPerformanceCounter()+0x1a>
c0017c4c:	0f 31                	rdtsc  
c0017c4e:	c3                   	ret    

c0017c4f <HalInitialise()>:
c0017c4f:	53                   	push   ebx
c0017c50:	83 ec 08             	sub    esp,0x8
c0017c53:	e8 09 52 ff ff       	call   c000ce61 <setupINTS()>
c0017c58:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c5d:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017c64:	75 0f                	jne    c0017c75 <HalInitialise()+0x26>
c0017c66:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c6c:	83 e2 fe             	and    edx,0xfffffffe
c0017c6f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c75:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017c7c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c82:	83 e2 fe             	and    edx,0xfffffffe
c0017c85:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c8b:	e8 a0 02 00 00       	call   c0017f30 <picOpen()>
c0017c90:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017c97:	74 0a                	je     c0017ca3 <HalInitialise()+0x54>
c0017c99:	e8 e2 01 00 00       	call   c0017e80 <picDisable()>
c0017c9e:	e8 0d 68 00 00       	call   c001e4b0 <apicOpen()>
c0017ca3:	50                   	push   eax
c0017ca4:	bb 0f 00 00 00       	mov    ebx,0xf
c0017ca9:	6a 00                	push   0x0
c0017cab:	68 f6 78 01 c0       	push   0xc00178f6
c0017cb0:	6a 00                	push   0x0
c0017cb2:	e8 73 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb7:	83 c4 0c             	add    esp,0xc
c0017cba:	6a 00                	push   0x0
c0017cbc:	68 f6 78 01 c0       	push   0xc00178f6
c0017cc1:	6a 01                	push   0x1
c0017cc3:	e8 62 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cc8:	83 c4 0c             	add    esp,0xc
c0017ccb:	6a 00                	push   0x0
c0017ccd:	68 87 73 01 c0       	push   0xc0017387
c0017cd2:	6a 02                	push   0x2
c0017cd4:	e8 51 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cd9:	83 c4 0c             	add    esp,0xc
c0017cdc:	6a 00                	push   0x0
c0017cde:	68 f6 78 01 c0       	push   0xc00178f6
c0017ce3:	6a 03                	push   0x3
c0017ce5:	e8 40 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cea:	83 c4 0c             	add    esp,0xc
c0017ced:	6a 00                	push   0x0
c0017cef:	68 f6 78 01 c0       	push   0xc00178f6
c0017cf4:	6a 04                	push   0x4
c0017cf6:	e8 2f 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cfb:	83 c4 0c             	add    esp,0xc
c0017cfe:	6a 00                	push   0x0
c0017d00:	68 f6 78 01 c0       	push   0xc00178f6
c0017d05:	6a 05                	push   0x5
c0017d07:	e8 1e 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d0c:	83 c4 0c             	add    esp,0xc
c0017d0f:	6a 00                	push   0x0
c0017d11:	68 2a 79 01 c0       	push   0xc001792a
c0017d16:	6a 06                	push   0x6
c0017d18:	e8 0d 4f ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d1d:	83 c4 0c             	add    esp,0xc
c0017d20:	6a 00                	push   0x0
c0017d22:	68 a0 73 01 c0       	push   0xc00173a0
c0017d27:	6a 08                	push   0x8
c0017d29:	e8 fc 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d2e:	83 c4 0c             	add    esp,0xc
c0017d31:	6a 00                	push   0x0
c0017d33:	68 f6 78 01 c0       	push   0xc00178f6
c0017d38:	6a 09                	push   0x9
c0017d3a:	e8 eb 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d3f:	83 c4 0c             	add    esp,0xc
c0017d42:	6a 00                	push   0x0
c0017d44:	68 f6 78 01 c0       	push   0xc00178f6
c0017d49:	6a 0a                	push   0xa
c0017d4b:	e8 da 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d50:	83 c4 0c             	add    esp,0xc
c0017d53:	6a 00                	push   0x0
c0017d55:	68 f6 78 01 c0       	push   0xc00178f6
c0017d5a:	6a 0b                	push   0xb
c0017d5c:	e8 c9 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d61:	83 c4 0c             	add    esp,0xc
c0017d64:	6a 00                	push   0x0
c0017d66:	68 06 78 01 c0       	push   0xc0017806
c0017d6b:	6a 0d                	push   0xd
c0017d6d:	e8 b8 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d72:	83 c4 0c             	add    esp,0xc
c0017d75:	6a 00                	push   0x0
c0017d77:	68 6d 78 01 c0       	push   0xc001786d
c0017d7c:	6a 0e                	push   0xe
c0017d7e:	e8 a7 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d83:	83 c4 10             	add    esp,0x10
c0017d86:	50                   	push   eax
c0017d87:	6a 00                	push   0x0
c0017d89:	68 f6 78 01 c0       	push   0xc00178f6
c0017d8e:	53                   	push   ebx
c0017d8f:	43                   	inc    ebx
c0017d90:	e8 95 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	83 fb 1e             	cmp    ebx,0x1e
c0017d9b:	75 e9                	jne    c0017d86 <HalInitialise()+0x137>
c0017d9d:	50                   	push   eax
c0017d9e:	6a 00                	push   0x0
c0017da0:	68 89 25 01 c0       	push   0xc0012589
c0017da5:	6a 60                	push   0x60
c0017da7:	e8 7e 4e ff ff       	call   c000cc2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dac:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017db1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017dbb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017dc2:	e8 0c fd fe ff       	call   c0007ad3 <malloc>
c0017dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dca:	89 c3                	mov    ebx,eax
c0017dcc:	e8 37 09 00 00       	call   c0018708 <RTC::RTC()>
c0017dd1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017ddb:	5a                   	pop    edx
c0017ddc:	59                   	pop    ecx
c0017ddd:	53                   	push   ebx
c0017dde:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017de4:	e8 0b 49 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c0017de9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017deb:	6a 00                	push   0x0
c0017ded:	6a 00                	push   0x0
c0017def:	6a 00                	push   0x0
c0017df1:	53                   	push   ebx
c0017df2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017df5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017dfa:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e00:	83 c4 28             	add    esp,0x28
c0017e03:	5b                   	pop    ebx
c0017e04:	c3                   	ret    

c0017e05 <HalMakeBeep(int)>:
c0017e05:	53                   	push   ebx
c0017e06:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e0a:	85 db                	test   ebx,ebx
c0017e0c:	75 07                	jne    c0017e15 <HalMakeBeep(int)+0x10>
c0017e0e:	e4 61                	in     al,0x61
c0017e10:	83 e0 fc             	and    eax,0xfffffffc
c0017e13:	eb 26                	jmp    c0017e3b <HalMakeBeep(int)+0x36>
c0017e15:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017e1a:	99                   	cdq    
c0017e1b:	f7 fb                	idiv   ebx
c0017e1d:	89 c1                	mov    ecx,eax
c0017e1f:	b0 b6                	mov    al,0xb6
c0017e21:	e6 43                	out    0x43,al
c0017e23:	88 c8                	mov    al,cl
c0017e25:	e6 42                	out    0x42,al
c0017e27:	89 c8                	mov    eax,ecx
c0017e29:	c1 e8 08             	shr    eax,0x8
c0017e2c:	e6 42                	out    0x42,al
c0017e2e:	e4 61                	in     al,0x61
c0017e30:	89 c2                	mov    edx,eax
c0017e32:	83 ca 03             	or     edx,0x3
c0017e35:	38 d0                	cmp    al,dl
c0017e37:	74 04                	je     c0017e3d <HalMakeBeep(int)+0x38>
c0017e39:	88 d0                	mov    al,dl
c0017e3b:	e6 61                	out    0x61,al
c0017e3d:	5b                   	pop    ebx
c0017e3e:	c3                   	ret    

c0017e3f <HalGetRand()>:
c0017e3f:	31 c0                	xor    eax,eax
c0017e41:	c3                   	ret    

c0017e42 <HalEndOfInterrupt(int)>:
c0017e42:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e49:	74 23                	je     c0017e6e <HalEndOfInterrupt(int)+0x2c>
c0017e4b:	83 ec 14             	sub    esp,0x14
c0017e4e:	6a 1b                	push   0x1b
c0017e50:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e56:	e8 87 f2 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017e5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e60:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017e6a:	83 c4 1c             	add    esp,0x1c
c0017e6d:	c3                   	ret    
c0017e6e:	e9 41 02 00 00       	jmp    c00180b4 <picEOI(int)>

c0017e73 <HalRestart()>:
c0017e73:	c3                   	ret    

c0017e74 <HalShutdown()>:
c0017e74:	c3                   	ret    

c0017e75 <HalSleep()>:
c0017e75:	c3                   	ret    
c0017e76:	66 90                	xchg   ax,ax

c0017e78 <picIoWait()>:
c0017e78:	eb 00                	jmp    c0017e7a <picIoWait()+0x2>
c0017e7a:	eb 00                	jmp    c0017e7c <picIoWait()+0x4>
c0017e7c:	90                   	nop
c0017e7d:	c3                   	ret    
c0017e7e:	66 90                	xchg   ax,ax

c0017e80 <picDisable()>:
c0017e80:	83 ec 10             	sub    esp,0x10
c0017e83:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017e8a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017e8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017e98:	ee                   	out    dx,al
c0017e99:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017ea0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017ea5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017ea9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017eae:	ee                   	out    dx,al
c0017eaf:	90                   	nop
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	c3                   	ret    

c0017eb4 <picGetIRQReg(int)>:
c0017eb4:	83 ec 10             	sub    esp,0x10
c0017eb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ebb:	0f b6 c0             	movzx  eax,al
c0017ebe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017ec5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017ec9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017ecd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017ed2:	ee                   	out    dx,al
c0017ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ed7:	0f b6 c0             	movzx  eax,al
c0017eda:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017ee1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017ee5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017ee9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017eee:	ee                   	out    dx,al
c0017eef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017ef6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017efb:	89 c2                	mov    edx,eax
c0017efd:	ec                   	in     al,dx
c0017efe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f02:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f06:	0f b6 c0             	movzx  eax,al
c0017f09:	c1 e0 08             	shl    eax,0x8
c0017f0c:	89 c1                	mov    ecx,eax
c0017f0e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f15:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017f1a:	89 c2                	mov    edx,eax
c0017f1c:	ec                   	in     al,dx
c0017f1d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f21:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f25:	0f b6 c0             	movzx  eax,al
c0017f28:	09 c8                	or     eax,ecx
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	c3                   	ret    
c0017f2e:	66 90                	xchg   ax,ax

c0017f30 <picOpen()>:
c0017f30:	83 ec 50             	sub    esp,0x50
c0017f33:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017f3a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f47:	ee                   	out    dx,al
c0017f48:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017f4f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017f54:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017f58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f5c:	ee                   	out    dx,al
c0017f5d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017f65:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017f6d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017f74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f78:	89 c2                	mov    edx,eax
c0017f7a:	ec                   	in     al,dx
c0017f7b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017f7f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017f83:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017f87:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017f8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f92:	89 c2                	mov    edx,eax
c0017f94:	ec                   	in     al,dx
c0017f95:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017f99:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017f9d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017fa1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017fa8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017fad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fb5:	ee                   	out    dx,al
c0017fb6:	e8 bd fe ff ff       	call   c0017e78 <picIoWait()>
c0017fbb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017fc2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017fc7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017fcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fcf:	ee                   	out    dx,al
c0017fd0:	e8 a3 fe ff ff       	call   c0017e78 <picIoWait()>
c0017fd5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017fd9:	0f b6 c0             	movzx  eax,al
c0017fdc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017fe3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017fe7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017feb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fef:	ee                   	out    dx,al
c0017ff0:	e8 83 fe ff ff       	call   c0017e78 <picIoWait()>
c0017ff5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ff9:	0f b6 c0             	movzx  eax,al
c0017ffc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018003:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018007:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001800b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001800f:	ee                   	out    dx,al
c0018010:	e8 63 fe ff ff       	call   c0017e78 <picIoWait()>
c0018015:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001801c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018021:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018025:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018029:	ee                   	out    dx,al
c001802a:	e8 49 fe ff ff       	call   c0017e78 <picIoWait()>
c001802f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018036:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001803b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001803f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018043:	ee                   	out    dx,al
c0018044:	e8 2f fe ff ff       	call   c0017e78 <picIoWait()>
c0018049:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018050:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018055:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018059:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001805d:	ee                   	out    dx,al
c001805e:	e8 15 fe ff ff       	call   c0017e78 <picIoWait()>
c0018063:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001806a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001806f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018073:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018077:	ee                   	out    dx,al
c0018078:	e8 fb fd ff ff       	call   c0017e78 <picIoWait()>
c001807d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018082:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018089:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001808d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018091:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018095:	ee                   	out    dx,al
c0018096:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001809b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00180a2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00180a6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00180aa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00180ae:	ee                   	out    dx,al
c00180af:	90                   	nop
c00180b0:	83 c4 50             	add    esp,0x50
c00180b3:	c3                   	ret    

c00180b4 <picEOI(int)>:
c00180b4:	83 ec 10             	sub    esp,0x10
c00180b7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180bc:	75 1e                	jne    c00180dc <picEOI(int)+0x28>
c00180be:	6a 0b                	push   0xb
c00180c0:	e8 ef fd ff ff       	call   c0017eb4 <picGetIRQReg(int)>
c00180c5:	83 c4 04             	add    esp,0x4
c00180c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00180cd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00180d2:	25 80 00 00 00       	and    eax,0x80
c00180d7:	74 73                	je     c001814c <picEOI(int)+0x98>
c00180d9:	8d 76 00             	lea    esi,[esi+0x0]
c00180dc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00180e1:	75 31                	jne    c0018114 <picEOI(int)+0x60>
c00180e3:	6a 0b                	push   0xb
c00180e5:	e8 ca fd ff ff       	call   c0017eb4 <picGetIRQReg(int)>
c00180ea:	83 c4 04             	add    esp,0x4
c00180ed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f6:	98                   	cwde   
c00180f7:	85 c0                	test   eax,eax
c00180f9:	78 19                	js     c0018114 <picEOI(int)+0x60>
c00180fb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018102:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018107:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001810b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018110:	ee                   	out    dx,al
c0018111:	eb 3d                	jmp    c0018150 <picEOI(int)+0x9c>
c0018113:	90                   	nop
c0018114:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018119:	7e 19                	jle    c0018134 <picEOI(int)+0x80>
c001811b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018122:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018127:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001812b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018130:	ee                   	out    dx,al
c0018131:	8d 76 00             	lea    esi,[esi+0x0]
c0018134:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001813b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018140:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018144:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018149:	ee                   	out    dx,al
c001814a:	eb 04                	jmp    c0018150 <picEOI(int)+0x9c>
c001814c:	90                   	nop
c001814d:	8d 76 00             	lea    esi,[esi+0x0]
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	c3                   	ret    

c0018154 <RTC::open(int, int, void*)>:
c0018154:	31 c0                	xor    eax,eax
c0018156:	c3                   	ret    
c0018157:	90                   	nop

c0018158 <RTC::close(int, int, void*)>:
c0018158:	31 c0                	xor    eax,eax
c001815a:	c3                   	ret    
c001815b:	90                   	nop

c001815c <RTC::timeInSecondsUTC()>:
c001815c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018160:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018166:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001816c:	c3                   	ret    
c001816d:	90                   	nop

c001816e <RTC::timeInDatetimeUTC()>:
c001816e:	53                   	push   ebx
c001816f:	83 ec 14             	sub    esp,0x14
c0018172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018176:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001817a:	8b 10                	mov    edx,DWORD PTR [eax]
c001817c:	50                   	push   eax
c001817d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018180:	83 c4 0c             	add    esp,0xc
c0018183:	52                   	push   edx
c0018184:	50                   	push   eax
c0018185:	53                   	push   ebx
c0018186:	e8 dd 42 ff ff       	call   c000c468 <secondsToDatetime(unsigned long long)>
c001818b:	89 d8                	mov    eax,ebx
c001818d:	83 c4 14             	add    esp,0x14
c0018190:	5b                   	pop    ebx
c0018191:	c2 04 00             	ret    0x4

c0018194 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018194:	56                   	push   esi
c0018195:	53                   	push   ebx
c0018196:	83 ec 14             	sub    esp,0x14
c0018199:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001819d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001819f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00181a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181a6:	52                   	push   edx
c00181a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181af:	50                   	push   eax
c00181b0:	e8 b3 42 ff ff       	call   c000c468 <secondsToDatetime(unsigned long long)>
c00181b5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00181b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00181c5:	89 f0                	mov    eax,esi
c00181c7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00181cb:	83 c4 20             	add    esp,0x20
c00181ce:	5b                   	pop    ebx
c00181cf:	5e                   	pop    esi
c00181d0:	ff e0                	jmp    eax

c00181d2 <RTC::~RTC()>:
c00181d2:	83 ec 0c             	sub    esp,0xc
c00181d5:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c00181da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181de:	89 10                	mov    DWORD PTR [eax],edx
c00181e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e4:	83 ec 0c             	sub    esp,0xc
c00181e7:	50                   	push   eax
c00181e8:	e8 07 40 ff ff       	call   c000c1f4 <Clock::~Clock()>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	90                   	nop
c00181f1:	83 c4 0c             	add    esp,0xc
c00181f4:	c3                   	ret    
c00181f5:	90                   	nop

c00181f6 <RTC::~RTC()>:
c00181f6:	83 ec 0c             	sub    esp,0xc
c00181f9:	83 ec 0c             	sub    esp,0xc
c00181fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018200:	e8 cd ff ff ff       	call   c00181d2 <RTC::~RTC()>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	83 ec 08             	sub    esp,0x8
c001820b:	68 60 01 00 00       	push   0x160
c0018210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018214:	e8 f3 25 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	83 c4 0c             	add    esp,0xc
c001821f:	c3                   	ret    

c0018220 <RTC::get_update_in_progress_flag()>:
c0018220:	83 ec 14             	sub    esp,0x14
c0018223:	6a 0a                	push   0xa
c0018225:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822b:	e8 6a ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018230:	83 c4 1c             	add    esp,0x1c
c0018233:	0f b6 c0             	movzx  eax,al
c0018236:	c1 e8 07             	shr    eax,0x7
c0018239:	c3                   	ret    

c001823a <RTC::completeRTCRefresh()>:
c001823a:	55                   	push   ebp
c001823b:	57                   	push   edi
c001823c:	56                   	push   esi
c001823d:	53                   	push   ebx
c001823e:	83 ec 3c             	sub    esp,0x3c
c0018241:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018247:	83 ec 0c             	sub    esp,0xc
c001824a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001824e:	e8 cd ff ff ff       	call   c0018220 <RTC::get_update_in_progress_flag()>
c0018253:	83 c4 10             	add    esp,0x10
c0018256:	84 c0                	test   al,al
c0018258:	74 0e                	je     c0018268 <RTC::completeRTCRefresh()+0x2e>
c001825a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018260:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018266:	73 df                	jae    c0018247 <RTC::completeRTCRefresh()+0xd>
c0018268:	50                   	push   eax
c0018269:	50                   	push   eax
c001826a:	6a 00                	push   0x0
c001826c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018272:	e8 23 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018277:	89 c7                	mov    edi,eax
c0018279:	58                   	pop    eax
c001827a:	5a                   	pop    edx
c001827b:	6a 02                	push   0x2
c001827d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018283:	e8 12 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018288:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001828c:	59                   	pop    ecx
c001828d:	5b                   	pop    ebx
c001828e:	6a 04                	push   0x4
c0018290:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018296:	e8 ff ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001829b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001829f:	5e                   	pop    esi
c00182a0:	5d                   	pop    ebp
c00182a1:	6a 07                	push   0x7
c00182a3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a9:	e8 ec ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182ae:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00182b2:	58                   	pop    eax
c00182b3:	5a                   	pop    edx
c00182b4:	6a 08                	push   0x8
c00182b6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182bc:	e8 d9 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182c1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00182c5:	59                   	pop    ecx
c00182c6:	5b                   	pop    ebx
c00182c7:	6a 09                	push   0x9
c00182c9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182cf:	e8 c6 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182d4:	0f b6 c0             	movzx  eax,al
c00182d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00182e4:	83 ec 0c             	sub    esp,0xc
c00182e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182eb:	e8 30 ff ff ff       	call   c0018220 <RTC::get_update_in_progress_flag()>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	84 c0                	test   al,al
c00182f5:	74 0e                	je     c0018305 <RTC::completeRTCRefresh()+0xcb>
c00182f7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182fd:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018303:	73 df                	jae    c00182e4 <RTC::completeRTCRefresh()+0xaa>
c0018305:	51                   	push   ecx
c0018306:	51                   	push   ecx
c0018307:	6a 00                	push   0x0
c0018309:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001830f:	e8 86 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018314:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018318:	5b                   	pop    ebx
c0018319:	5e                   	pop    esi
c001831a:	6a 02                	push   0x2
c001831c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018322:	e8 73 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018327:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001832b:	5d                   	pop    ebp
c001832c:	58                   	pop    eax
c001832d:	6a 04                	push   0x4
c001832f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018335:	e8 60 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001833a:	88 c3                	mov    bl,al
c001833c:	58                   	pop    eax
c001833d:	5a                   	pop    edx
c001833e:	6a 07                	push   0x7
c0018340:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018346:	e8 4f ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001834b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001834f:	59                   	pop    ecx
c0018350:	5e                   	pop    esi
c0018351:	6a 08                	push   0x8
c0018353:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018359:	e8 3c ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001835e:	5d                   	pop    ebp
c001835f:	89 c6                	mov    esi,eax
c0018361:	58                   	pop    eax
c0018362:	6a 09                	push   0x9
c0018364:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001836a:	e8 2b ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001836f:	89 f9                	mov    ecx,edi
c0018371:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018375:	83 c4 10             	add    esp,0x10
c0018378:	0f b6 e8             	movzx  ebp,al
c001837b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018380:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018388:	74 27                	je     c00183b1 <RTC::completeRTCRefresh()+0x177>
c001838a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001838e:	89 f0                	mov    eax,esi
c0018390:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018394:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018398:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001839c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00183a0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00183a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183a8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183ac:	e9 2d ff ff ff       	jmp    c00182de <RTC::completeRTCRefresh()+0xa4>
c00183b1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00183b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00183ba:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183be:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00183c2:	75 c6                	jne    c001838a <RTC::completeRTCRefresh()+0x150>
c00183c4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00183c9:	89 f1                	mov    ecx,esi
c00183cb:	0f b6 fb             	movzx  edi,bl
c00183ce:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00183d2:	0f b6 c9             	movzx  ecx,cl
c00183d5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00183d9:	89 f1                	mov    ecx,esi
c00183db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00183df:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00183e3:	0f 94 c2             	sete   dl
c00183e6:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00183ea:	0f 94 c0             	sete   al
c00183ed:	21 d0                	and    eax,edx
c00183ef:	31 d2                	xor    edx,edx
c00183f1:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00183f5:	0f 94 c2             	sete   dl
c00183f8:	85 c2                	test   edx,eax
c00183fa:	74 8e                	je     c001838a <RTC::completeRTCRefresh()+0x150>
c00183fc:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018400:	75 88                	jne    c001838a <RTC::completeRTCRefresh()+0x150>
c0018402:	52                   	push   edx
c0018403:	52                   	push   edx
c0018404:	6a 0b                	push   0xb
c0018406:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001840c:	e8 89 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018411:	83 c4 10             	add    esp,0x10
c0018414:	a8 04                	test   al,0x4
c0018416:	75 7a                	jne    c0018492 <RTC::completeRTCRefresh()+0x258>
c0018418:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001841c:	c1 ef 04             	shr    edi,0x4
c001841f:	83 e6 0f             	and    esi,0xf
c0018422:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018426:	c1 ed 04             	shr    ebp,0x4
c0018429:	6b ed 0a             	imul   ebp,ebp,0xa
c001842c:	c1 ea 04             	shr    edx,0x4
c001842f:	6b d2 0a             	imul   edx,edx,0xa
c0018432:	83 e1 0f             	and    ecx,0xf
c0018435:	01 d1                	add    ecx,edx
c0018437:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001843b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001843f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018443:	c1 ea 04             	shr    edx,0x4
c0018446:	6b d2 0a             	imul   edx,edx,0xa
c0018449:	83 e1 0f             	and    ecx,0xf
c001844c:	01 d1                	add    ecx,edx
c001844e:	89 fa                	mov    edx,edi
c0018450:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018454:	83 e2 07             	and    edx,0x7
c0018457:	89 d9                	mov    ecx,ebx
c0018459:	6b d2 0a             	imul   edx,edx,0xa
c001845c:	83 e1 0f             	and    ecx,0xf
c001845f:	83 e3 80             	and    ebx,0xffffff80
c0018462:	01 d1                	add    ecx,edx
c0018464:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018468:	09 cb                	or     ebx,ecx
c001846a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001846e:	c1 ea 04             	shr    edx,0x4
c0018471:	6b d2 0a             	imul   edx,edx,0xa
c0018474:	83 e1 0f             	and    ecx,0xf
c0018477:	01 d1                	add    ecx,edx
c0018479:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001847d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018481:	c1 ea 04             	shr    edx,0x4
c0018484:	6b d2 0a             	imul   edx,edx,0xa
c0018487:	01 d6                	add    esi,edx
c0018489:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001848d:	83 e2 0f             	and    edx,0xf
c0018490:	01 d5                	add    ebp,edx
c0018492:	a8 02                	test   al,0x2
c0018494:	75 15                	jne    c00184ab <RTC::completeRTCRefresh()+0x271>
c0018496:	f6 c3 80             	test   bl,0x80
c0018499:	74 10                	je     c00184ab <RTC::completeRTCRefresh()+0x271>
c001849b:	83 e3 7f             	and    ebx,0x7f
c001849e:	b9 18 00 00 00       	mov    ecx,0x18
c00184a3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00184a6:	99                   	cdq    
c00184a7:	f7 f9                	idiv   ecx
c00184a9:	88 d3                	mov    bl,dl
c00184ab:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00184b1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00184b7:	77 06                	ja     c00184bf <RTC::completeRTCRefresh()+0x285>
c00184b9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00184bf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184c4:	31 c9                	xor    ecx,ecx
c00184c6:	31 d2                	xor    edx,edx
c00184c8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00184cc:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00184d0:	89 cd                	mov    ebp,ecx
c00184d2:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00184d6:	c1 e7 10             	shl    edi,0x10
c00184d9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00184df:	c1 e0 10             	shl    eax,0x10
c00184e2:	09 c5                	or     ebp,eax
c00184e4:	89 e9                	mov    ecx,ebp
c00184e6:	0f b7 c2             	movzx  eax,dx
c00184e9:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00184ed:	09 f8                	or     eax,edi
c00184ef:	89 c2                	mov    edx,eax
c00184f1:	50                   	push   eax
c00184f2:	50                   	push   eax
c00184f3:	88 d9                	mov    cl,bl
c00184f5:	51                   	push   ecx
c00184f6:	52                   	push   edx
c00184f7:	e8 e7 3d ff ff       	call   c000c2e3 <datetimeToSeconds(datetime_t)>
c00184fc:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018500:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018506:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001850c:	83 c4 4c             	add    esp,0x4c
c001850f:	5b                   	pop    ebx
c0018510:	5e                   	pop    esi
c0018511:	5f                   	pop    edi
c0018512:	5d                   	pop    ebp
c0018513:	c3                   	ret    

c0018514 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018514:	55                   	push   ebp
c0018515:	57                   	push   edi
c0018516:	56                   	push   esi
c0018517:	53                   	push   ebx
c0018518:	83 ec 30             	sub    esp,0x30
c001851b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001851f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018523:	6a 00                	push   0x0
c0018525:	6a 00                	push   0x0
c0018527:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001852d:	e8 80 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018532:	83 c4 0c             	add    esp,0xc
c0018535:	6a 00                	push   0x0
c0018537:	6a 02                	push   0x2
c0018539:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001853f:	e8 6e ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018544:	89 f8                	mov    eax,edi
c0018546:	89 f9                	mov    ecx,edi
c0018548:	0f b6 c4             	movzx  eax,ah
c001854b:	31 d2                	xor    edx,edx
c001854d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018551:	c1 e9 10             	shr    ecx,0x10
c0018554:	89 f0                	mov    eax,esi
c0018556:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001855a:	89 f0                	mov    eax,esi
c001855c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018560:	0f b6 c4             	movzx  eax,ah
c0018563:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018567:	89 f0                	mov    eax,esi
c0018569:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001856d:	c1 e8 10             	shr    eax,0x10
c0018570:	b9 64 00 00 00       	mov    ecx,0x64
c0018575:	f7 f1                	div    ecx
c0018577:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001857b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001857f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018583:	59                   	pop    ecx
c0018584:	5b                   	pop    ebx
c0018585:	89 fb                	mov    ebx,edi
c0018587:	6a 0b                	push   0xb
c0018589:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858f:	e8 06 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	a8 04                	test   al,0x4
c0018599:	89 c5                	mov    ebp,eax
c001859b:	75 6e                	jne    c001860b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001859d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185a1:	31 d2                	xor    edx,edx
c00185a3:	0f b6 c1             	movzx  eax,cl
c00185a6:	b9 0a 00 00 00       	mov    ecx,0xa
c00185ab:	f7 f1                	div    ecx
c00185ad:	c1 e0 04             	shl    eax,0x4
c00185b0:	09 d0                	or     eax,edx
c00185b2:	31 d2                	xor    edx,edx
c00185b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00185bd:	f7 f1                	div    ecx
c00185bf:	c1 e0 04             	shl    eax,0x4
c00185c2:	09 d0                	or     eax,edx
c00185c4:	31 d2                	xor    edx,edx
c00185c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185ca:	0f b6 c3             	movzx  eax,bl
c00185cd:	f7 f1                	div    ecx
c00185cf:	c1 e0 04             	shl    eax,0x4
c00185d2:	09 d0                	or     eax,edx
c00185d4:	31 d2                	xor    edx,edx
c00185d6:	89 c3                	mov    ebx,eax
c00185d8:	89 f0                	mov    eax,esi
c00185da:	0f b6 c0             	movzx  eax,al
c00185dd:	f7 f1                	div    ecx
c00185df:	c1 e0 04             	shl    eax,0x4
c00185e2:	09 d0                	or     eax,edx
c00185e4:	31 d2                	xor    edx,edx
c00185e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185ef:	f7 f1                	div    ecx
c00185f1:	c1 e0 04             	shl    eax,0x4
c00185f4:	09 d0                	or     eax,edx
c00185f6:	31 d2                	xor    edx,edx
c00185f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018600:	f7 f1                	div    ecx
c0018602:	c1 e0 04             	shl    eax,0x4
c0018605:	09 d0                	or     eax,edx
c0018607:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001860b:	83 e5 02             	and    ebp,0x2
c001860e:	75 1e                	jne    c001862e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018610:	0f b6 c3             	movzx  eax,bl
c0018613:	83 f8 0b             	cmp    eax,0xb
c0018616:	76 10                	jbe    c0018628 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018618:	8d 53 f4             	lea    edx,[ebx-0xc]
c001861b:	84 d2                	test   dl,dl
c001861d:	88 d3                	mov    bl,dl
c001861f:	75 02                	jne    c0018623 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018621:	b3 0c                	mov    bl,0xc
c0018623:	83 cb 80             	or     ebx,0xffffff80
c0018626:	eb 06                	jmp    c001862e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018628:	85 c0                	test   eax,eax
c001862a:	75 02                	jne    c001862e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001862c:	b3 0c                	mov    bl,0xc
c001862e:	50                   	push   eax
c001862f:	0f b6 db             	movzx  ebx,bl
c0018632:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018637:	52                   	push   edx
c0018638:	6a 00                	push   0x0
c001863a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018640:	e8 6d ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018645:	83 c4 0c             	add    esp,0xc
c0018648:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001864d:	50                   	push   eax
c001864e:	6a 02                	push   0x2
c0018650:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018656:	e8 57 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001865b:	83 c4 0c             	add    esp,0xc
c001865e:	53                   	push   ebx
c001865f:	6a 04                	push   0x4
c0018661:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018667:	e8 46 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001866c:	83 c4 0c             	add    esp,0xc
c001866f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018674:	52                   	push   edx
c0018675:	6a 07                	push   0x7
c0018677:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001867d:	e8 30 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018682:	83 c4 0c             	add    esp,0xc
c0018685:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001868a:	50                   	push   eax
c001868b:	6a 08                	push   0x8
c001868d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018693:	e8 1a ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018698:	83 c4 0c             	add    esp,0xc
c001869b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00186a0:	55                   	push   ebp
c00186a1:	6a 09                	push   0x9
c00186a3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186a9:	e8 04 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186ae:	5a                   	pop    edx
c00186af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00186b3:	e8 82 fb ff ff       	call   c001823a <RTC::completeRTCRefresh()>
c00186b8:	83 c4 3c             	add    esp,0x3c
c00186bb:	b0 01                	mov    al,0x1
c00186bd:	5b                   	pop    ebx
c00186be:	5e                   	pop    esi
c00186bf:	5f                   	pop    edi
c00186c0:	5d                   	pop    ebp
c00186c1:	c3                   	ret    

c00186c2 <rtcIRQHandler(regs*, void*)>:
c00186c2:	53                   	push   ebx
c00186c3:	83 ec 10             	sub    esp,0x10
c00186c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186ca:	6a 0c                	push   0xc
c00186cc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186d2:	e8 c3 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	a8 80                	test   al,0x80
c00186dc:	74 24                	je     c0018702 <rtcIRQHandler(regs*, void*)+0x40>
c00186de:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00186e5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00186ec:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00186f3:	75 0d                	jne    c0018702 <rtcIRQHandler(regs*, void*)+0x40>
c00186f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186f9:	83 c4 08             	add    esp,0x8
c00186fc:	5b                   	pop    ebx
c00186fd:	e9 38 fb ff ff       	jmp    c001823a <RTC::completeRTCRefresh()>
c0018702:	83 c4 08             	add    esp,0x8
c0018705:	5b                   	pop    ebx
c0018706:	c3                   	ret    
c0018707:	90                   	nop

c0018708 <RTC::RTC()>:
c0018708:	83 ec 1c             	sub    esp,0x1c
c001870b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870f:	83 ec 08             	sub    esp,0x8
c0018712:	68 ef 27 02 c0       	push   0xc00227ef
c0018717:	50                   	push   eax
c0018718:	e8 a1 3a ff ff       	call   c000c1be <Clock::Clock(char const*)>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c0018725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018729:	89 10                	mov    DWORD PTR [eax],edx
c001872b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018736:	6a 01                	push   0x1
c0018738:	68 c2 86 01 c0       	push   0xc00186c2
c001873d:	6a 08                	push   0x8
c001873f:	50                   	push   eax
c0018740:	e8 5b 3f ff ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018745:	83 c4 20             	add    esp,0x20
c0018748:	89 c2                	mov    edx,eax
c001874a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001874e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018754:	fa                   	cli    
c0018755:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001875a:	83 c0 01             	add    eax,0x1
c001875d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018762:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018767:	83 ec 08             	sub    esp,0x8
c001876a:	6a 0b                	push   0xb
c001876c:	50                   	push   eax
c001876d:	e8 28 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018772:	83 c4 10             	add    esp,0x10
c0018775:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018779:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001877e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018782:	83 ca 10             	or     edx,0x10
c0018785:	0f b6 d2             	movzx  edx,dl
c0018788:	83 ec 04             	sub    esp,0x4
c001878b:	52                   	push   edx
c001878c:	6a 0b                	push   0xb
c001878e:	50                   	push   eax
c001878f:	e8 1e eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	83 ec 0c             	sub    esp,0xc
c001879a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001879e:	e8 97 fa ff ff       	call   c001823a <RTC::completeRTCRefresh()>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187ab:	83 e8 01             	sub    eax,0x1
c00187ae:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187b3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187b8:	85 c0                	test   eax,eax
c00187ba:	75 01                	jne    c00187bd <RTC::RTC()+0xb5>
c00187bc:	fb                   	sti    
c00187bd:	90                   	nop
c00187be:	83 c4 1c             	add    esp,0x1c
c00187c1:	c3                   	ret    
c00187c2:	66 90                	xchg   ax,ax

c00187c4 <HalConsoleScroll(int, int)>:
c00187c4:	83 ec 10             	sub    esp,0x10
c00187c7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00187cf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00187d7:	90                   	nop
c00187d8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00187dd:	0f 8f e1 00 00 00    	jg     c00188c4 <HalConsoleScroll(int, int)+0x100>
c00187e3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00187eb:	90                   	nop
c00187ec:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00187f4:	0f 8f be 00 00 00    	jg     c00188b8 <HalConsoleScroll(int, int)+0xf4>
c00187fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187fe:	89 d0                	mov    eax,edx
c0018800:	c1 e0 02             	shl    eax,0x2
c0018803:	01 d0                	add    eax,edx
c0018805:	c1 e0 05             	shl    eax,0x5
c0018808:	89 c2                	mov    edx,eax
c001880a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001880e:	01 d0                	add    eax,edx
c0018810:	89 c2                	mov    edx,eax
c0018812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018816:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018819:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001881d:	89 d0                	mov    eax,edx
c001881f:	c1 e0 02             	shl    eax,0x2
c0018822:	01 d0                	add    eax,edx
c0018824:	c1 e0 05             	shl    eax,0x5
c0018827:	89 c2                	mov    edx,eax
c0018829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001882d:	01 d0                	add    eax,edx
c001882f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018839:	01 d0                	add    eax,edx
c001883b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001883d:	88 10                	mov    BYTE PTR [eax],dl
c001883f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018844:	75 66                	jne    c00188ac <HalConsoleScroll(int, int)+0xe8>
c0018846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001884a:	83 e0 01             	and    eax,0x1
c001884d:	74 39                	je     c0018888 <HalConsoleScroll(int, int)+0xc4>
c001884f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018853:	83 e0 0f             	and    eax,0xf
c0018856:	88 c2                	mov    dl,al
c0018858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001885c:	c1 e0 04             	shl    eax,0x4
c001885f:	09 d0                	or     eax,edx
c0018861:	88 c1                	mov    cl,al
c0018863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018867:	89 d0                	mov    eax,edx
c0018869:	c1 e0 02             	shl    eax,0x2
c001886c:	01 d0                	add    eax,edx
c001886e:	c1 e0 05             	shl    eax,0x5
c0018871:	89 c2                	mov    edx,eax
c0018873:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018877:	01 d0                	add    eax,edx
c0018879:	89 c2                	mov    edx,eax
c001887b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001887f:	01 d0                	add    eax,edx
c0018881:	88 ca                	mov    dl,cl
c0018883:	88 10                	mov    BYTE PTR [eax],dl
c0018885:	eb 25                	jmp    c00188ac <HalConsoleScroll(int, int)+0xe8>
c0018887:	90                   	nop
c0018888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001888c:	89 d0                	mov    eax,edx
c001888e:	c1 e0 02             	shl    eax,0x2
c0018891:	01 d0                	add    eax,edx
c0018893:	c1 e0 05             	shl    eax,0x5
c0018896:	89 c2                	mov    edx,eax
c0018898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001889c:	01 d0                	add    eax,edx
c001889e:	89 c2                	mov    edx,eax
c00188a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188a4:	01 d0                	add    eax,edx
c00188a6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00188a9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ac:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00188b1:	e9 36 ff ff ff       	jmp    c00187ec <HalConsoleScroll(int, int)+0x28>
c00188b6:	66 90                	xchg   ax,ax
c00188b8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00188bd:	e9 16 ff ff ff       	jmp    c00187d8 <HalConsoleScroll(int, int)+0x14>
c00188c2:	66 90                	xchg   ax,ax
c00188c4:	90                   	nop
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	c3                   	ret    
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]

c00188cc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00188cc:	83 ec 14             	sub    esp,0x14
c00188cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188d3:	88 04 24             	mov    BYTE PTR [esp],al
c00188d6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00188d9:	0f b6 c0             	movzx  eax,al
c00188dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188e0:	89 d1                	mov    ecx,edx
c00188e2:	83 e1 0f             	and    ecx,0xf
c00188e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188e9:	c1 e2 04             	shl    edx,0x4
c00188ec:	0f b6 d2             	movzx  edx,dl
c00188ef:	09 ca                	or     edx,ecx
c00188f1:	c1 e2 08             	shl    edx,0x8
c00188f4:	09 d0                	or     eax,edx
c00188f6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00188fb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018903:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018907:	89 d0                	mov    eax,edx
c0018909:	c1 e0 02             	shl    eax,0x2
c001890c:	01 d0                	add    eax,edx
c001890e:	c1 e0 04             	shl    eax,0x4
c0018911:	89 c2                	mov    edx,eax
c0018913:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018917:	01 d0                	add    eax,edx
c0018919:	d1 e0                	shl    eax,1
c001891b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001891f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018923:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018928:	66 89 10             	mov    WORD PTR [eax],dx
c001892b:	90                   	nop
c001892c:	83 c4 14             	add    esp,0x14
c001892f:	c3                   	ret    

c0018930 <HalConsoleCursorUpdate(int, int)>:
c0018930:	83 ec 20             	sub    esp,0x20
c0018933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018937:	89 c2                	mov    edx,eax
c0018939:	c1 e2 02             	shl    edx,0x2
c001893c:	01 d0                	add    eax,edx
c001893e:	c1 e0 04             	shl    eax,0x4
c0018941:	89 c2                	mov    edx,eax
c0018943:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018947:	01 d0                	add    eax,edx
c0018949:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001894e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018955:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001895a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001895e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018962:	ee                   	out    dx,al
c0018963:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018968:	0f b6 c0             	movzx  eax,al
c001896b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018972:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018976:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001897a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001897e:	ee                   	out    dx,al
c001897f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018986:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001898b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001898f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018993:	ee                   	out    dx,al
c0018994:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018999:	c1 e8 08             	shr    eax,0x8
c001899c:	0f b6 c0             	movzx  eax,al
c001899f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00189a6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00189aa:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00189ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189b2:	ee                   	out    dx,al
c00189b3:	90                   	nop
c00189b4:	83 c4 20             	add    esp,0x20
c00189b7:	c3                   	ret    

c00189b8 <FAT::getName()>:
c00189b8:	b8 40 28 02 c0       	mov    eax,0xc0022840
c00189bd:	c3                   	ret    
c00189be:	66 90                	xchg   ax,ax

c00189c0 <FAT::tell(void*, unsigned long long*)>:
c00189c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189c5:	75 09                	jne    c00189d0 <FAT::tell(void*, unsigned long long*)+0x10>
c00189c7:	b8 04 00 00 00       	mov    eax,0x4
c00189cc:	c3                   	ret    
c00189cd:	8d 76 00             	lea    esi,[esi+0x0]
c00189d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189d5:	75 09                	jne    c00189e0 <FAT::tell(void*, unsigned long long*)+0x20>
c00189d7:	b8 04 00 00 00       	mov    eax,0x4
c00189dc:	c3                   	ret    
c00189dd:	8d 76 00             	lea    esi,[esi+0x0]
c00189e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00189e7:	ba 00 00 00 00       	mov    edx,0x0
c00189ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189f0:	89 01                	mov    DWORD PTR [ecx],eax
c00189f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189f5:	b8 00 00 00 00       	mov    eax,0x0
c00189fa:	c3                   	ret    
c00189fb:	90                   	nop

c00189fc <FAT::stat(void*, unsigned long long*)>:
c00189fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a01:	75 09                	jne    c0018a0c <FAT::stat(void*, unsigned long long*)+0x10>
c0018a03:	b8 04 00 00 00       	mov    eax,0x4
c0018a08:	c3                   	ret    
c0018a09:	8d 76 00             	lea    esi,[esi+0x0]
c0018a0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a11:	75 09                	jne    c0018a1c <FAT::stat(void*, unsigned long long*)+0x20>
c0018a13:	b8 04 00 00 00       	mov    eax,0x4
c0018a18:	c3                   	ret    
c0018a19:	8d 76 00             	lea    esi,[esi+0x0]
c0018a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a23:	ba 00 00 00 00       	mov    edx,0x0
c0018a28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a2c:	89 01                	mov    DWORD PTR [ecx],eax
c0018a2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a31:	b8 00 00 00 00       	mov    eax,0x0
c0018a36:	c3                   	ret    
c0018a37:	90                   	nop

c0018a38 <FAT::~FAT()>:
c0018a38:	83 ec 0c             	sub    esp,0xc
c0018a3b:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c0018a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a44:	89 10                	mov    DWORD PTR [eax],edx
c0018a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a4a:	83 ec 0c             	sub    esp,0xc
c0018a4d:	50                   	push   eax
c0018a4e:	e8 d3 2a ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	90                   	nop
c0018a57:	83 c4 0c             	add    esp,0xc
c0018a5a:	c3                   	ret    
c0018a5b:	90                   	nop

c0018a5c <FAT::~FAT()>:
c0018a5c:	83 ec 0c             	sub    esp,0xc
c0018a5f:	83 ec 0c             	sub    esp,0xc
c0018a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a66:	e8 cd ff ff ff       	call   c0018a38 <FAT::~FAT()>
c0018a6b:	83 c4 10             	add    esp,0x10
c0018a6e:	83 ec 08             	sub    esp,0x8
c0018a71:	6a 08                	push   0x8
c0018a73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a77:	e8 90 1d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	83 c4 0c             	add    esp,0xc
c0018a82:	c3                   	ret    
c0018a83:	90                   	nop

c0018a84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a84:	83 ec 1c             	sub    esp,0x1c
c0018a87:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a8e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a97:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a9e:	83 f8 ff             	cmp    eax,0xffffffff
c0018aa1:	75 35                	jne    c0018ad8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018aa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018aa7:	88 c2                	mov    dl,al
c0018aa9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018aae:	01 d0                	add    eax,edx
c0018ab0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ab4:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018aba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018abe:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ac5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018aca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ace:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ad5:	eb 19                	jmp    c0018af0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018ad7:	90                   	nop
c0018ad8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018adc:	88 c2                	mov    dl,al
c0018ade:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ae2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ae9:	01 d0                	add    eax,edx
c0018aeb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018aef:	90                   	nop
c0018af0:	83 ec 04             	sub    esp,0x4
c0018af3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018af7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018afb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018aff:	50                   	push   eax
c0018b00:	e8 ee c4 fe ff       	call   c0004ff3 <f_getlabel>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b11:	75 09                	jne    c0018b1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b13:	b8 00 00 00 00       	mov    eax,0x0
c0018b18:	eb 0a                	jmp    c0018b24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018b1a:	66 90                	xchg   ax,ax
c0018b1c:	b8 01 00 00 00       	mov    eax,0x1
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	83 c4 1c             	add    esp,0x1c
c0018b27:	c3                   	ret    

c0018b28 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018b28:	53                   	push   ebx
c0018b29:	83 ec 58             	sub    esp,0x58
c0018b2c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018b34:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018b38:	b9 00 00 00 00       	mov    ecx,0x0
c0018b3d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018b42:	83 e0 f8             	and    eax,0xfffffff8
c0018b45:	89 c3                	mov    ebx,eax
c0018b47:	b8 00 00 00 00       	mov    eax,0x0
c0018b4c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018b50:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018b54:	83 c0 08             	add    eax,0x8
c0018b57:	39 d8                	cmp    eax,ebx
c0018b59:	72 f1                	jb     c0018b4c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018b5b:	01 c2                	add    edx,eax
c0018b5d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018b5f:	83 c2 04             	add    edx,0x4
c0018b62:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b66:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b6d:	83 f8 ff             	cmp    eax,0xffffffff
c0018b70:	75 36                	jne    c0018ba8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018b72:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b76:	88 c2                	mov    dl,al
c0018b78:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b7d:	01 d0                	add    eax,edx
c0018b7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b83:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b89:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b8d:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b94:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b99:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b9d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ba4:	eb 1a                	jmp    c0018bc0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018ba6:	66 90                	xchg   ax,ax
c0018ba8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bac:	88 c2                	mov    dl,al
c0018bae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bb2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bb9:	01 d0                	add    eax,edx
c0018bbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bbf:	90                   	nop
c0018bc0:	83 ec 08             	sub    esp,0x8
c0018bc3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018bc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bcb:	50                   	push   eax
c0018bcc:	e8 9f 7c fe ff       	call   c0000870 <strcat>
c0018bd1:	83 c4 10             	add    esp,0x10
c0018bd4:	83 ec 0c             	sub    esp,0xc
c0018bd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bdb:	50                   	push   eax
c0018bdc:	e8 66 c5 fe ff       	call   c0005147 <f_setlabel>
c0018be1:	83 c4 10             	add    esp,0x10
c0018be4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018be8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018bed:	75 09                	jne    c0018bf8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018bef:	b8 00 00 00 00       	mov    eax,0x0
c0018bf4:	eb 0a                	jmp    c0018c00 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018bf6:	66 90                	xchg   ax,ax
c0018bf8:	b8 01 00 00 00       	mov    eax,0x1
c0018bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018c00:	83 c4 58             	add    esp,0x58
c0018c03:	5b                   	pop    ebx
c0018c04:	c3                   	ret    
c0018c05:	90                   	nop
c0018c06:	66 90                	xchg   ax,ax

c0018c08 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c08:	83 ec 2c             	sub    esp,0x2c
c0018c0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c13:	83 ec 08             	sub    esp,0x8
c0018c16:	68 64 28 02 c0       	push   0xc0022864
c0018c1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c1f:	e8 5c 7b fe ff       	call   c0000780 <strcmp>
c0018c24:	83 c4 10             	add    esp,0x10
c0018c27:	85 c0                	test   eax,eax
c0018c29:	0f 94 c0             	sete   al
c0018c2c:	0f b6 c0             	movzx  eax,al
c0018c2f:	85 c0                	test   eax,eax
c0018c31:	74 0d                	je     c0018c40 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018c33:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c3b:	e9 c0 00 00 00       	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c40:	83 ec 08             	sub    esp,0x8
c0018c43:	68 56 28 02 c0       	push   0xc0022856
c0018c48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c4c:	e8 2f 7b fe ff       	call   c0000780 <strcmp>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	85 c0                	test   eax,eax
c0018c56:	0f 94 c0             	sete   al
c0018c59:	0f b6 c0             	movzx  eax,al
c0018c5c:	85 c0                	test   eax,eax
c0018c5e:	74 10                	je     c0018c70 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018c60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c68:	e9 93 00 00 00       	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c70:	83 ec 08             	sub    esp,0x8
c0018c73:	68 5c 28 02 c0       	push   0xc002285c
c0018c78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c7c:	e8 ff 7a fe ff       	call   c0000780 <strcmp>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	85 c0                	test   eax,eax
c0018c86:	0f 94 c0             	sete   al
c0018c89:	0f b6 c0             	movzx  eax,al
c0018c8c:	85 c0                	test   eax,eax
c0018c8e:	74 0c                	je     c0018c9c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018c90:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c98:	eb 66                	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c9a:	66 90                	xchg   ax,ax
c0018c9c:	83 ec 08             	sub    esp,0x8
c0018c9f:	68 3c 00 02 c0       	push   0xc002003c
c0018ca4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ca8:	e8 d3 7a fe ff       	call   c0000780 <strcmp>
c0018cad:	83 c4 10             	add    esp,0x10
c0018cb0:	85 c0                	test   eax,eax
c0018cb2:	0f 94 c0             	sete   al
c0018cb5:	0f b6 c0             	movzx  eax,al
c0018cb8:	85 c0                	test   eax,eax
c0018cba:	74 0c                	je     c0018cc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018cbc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018cc4:	eb 3a                	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cc6:	66 90                	xchg   ax,ax
c0018cc8:	83 ec 08             	sub    esp,0x8
c0018ccb:	68 62 28 02 c0       	push   0xc0022862
c0018cd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cd4:	e8 a7 7a fe ff       	call   c0000780 <strcmp>
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	85 c0                	test   eax,eax
c0018cde:	0f 94 c0             	sete   al
c0018ce1:	0f b6 c0             	movzx  eax,al
c0018ce4:	85 c0                	test   eax,eax
c0018ce6:	74 0c                	je     c0018cf4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018ce8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018cf0:	eb 0e                	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	b8 08 00 00 00       	mov    eax,0x8
c0018cf9:	e9 ea 00 00 00       	jmp    c0018de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cfe:	66 90                	xchg   ax,ax
c0018d00:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d07:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d10:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d17:	83 f8 ff             	cmp    eax,0xffffffff
c0018d1a:	75 34                	jne    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d1c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d20:	88 c2                	mov    dl,al
c0018d22:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d27:	01 d0                	add    eax,edx
c0018d29:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d2d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d37:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d3e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d47:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d4e:	eb 18                	jmp    c0018d68 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018d50:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d54:	88 c2                	mov    dl,al
c0018d56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d5a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d61:	01 d0                	add    eax,edx
c0018d63:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d67:	90                   	nop
c0018d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d6c:	88 04 24             	mov    BYTE PTR [esp],al
c0018d6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d7f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d8c:	83 ec 0c             	sub    esp,0xc
c0018d8f:	68 00 20 00 00       	push   0x2000
c0018d94:	e8 3a ed fe ff       	call   c0007ad3 <malloc>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018da0:	68 00 20 00 00       	push   0x2000
c0018da5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018da9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018dad:	50                   	push   eax
c0018dae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018db2:	50                   	push   eax
c0018db3:	e8 8c c6 fe ff       	call   c0005444 <f_mkfs>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018dbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018dc4:	75 0a                	jne    c0018dd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018dc6:	b8 00 00 00 00       	mov    eax,0x0
c0018dcb:	eb 1b                	jmp    c0018de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018dd5:	75 09                	jne    c0018de0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018dd7:	b8 09 00 00 00       	mov    eax,0x9
c0018ddc:	eb 0a                	jmp    c0018de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dde:	66 90                	xchg   ax,ax
c0018de0:	b8 01 00 00 00       	mov    eax,0x1
c0018de5:	8d 76 00             	lea    esi,[esi+0x0]
c0018de8:	83 c4 2c             	add    esp,0x2c
c0018deb:	c3                   	ret    

c0018dec <FAT::tryMount(LogicalDisk*, int)>:
c0018dec:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018df2:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018df7:	83 f8 14             	cmp    eax,0x14
c0018dfa:	75 18                	jne    c0018e14 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	68 68 28 02 c0       	push   0xc0022868
c0018e04:	e8 88 84 ff ff       	call   c0011291 <KePanic(char const*)>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	b0 00                	mov    al,0x0
c0018e0e:	e9 ed 01 00 00       	jmp    c0019000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e13:	90                   	nop
c0018e14:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e27:	3d 00 02 00 00       	cmp    eax,0x200
c0018e2c:	74 0a                	je     c0018e38 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018e2e:	b0 00                	mov    al,0x0
c0018e30:	e9 cb 01 00 00       	jmp    c0019000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e35:	8d 76 00             	lea    esi,[esi+0x0]
c0018e38:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018e40:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e47:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e4e:	83 f8 ff             	cmp    eax,0xffffffff
c0018e51:	74 09                	je     c0018e5c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018e53:	b0 01                	mov    al,0x1
c0018e55:	e9 a6 01 00 00       	jmp    c0019000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e5a:	66 90                	xchg   ax,ax
c0018e5c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018e66:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018e6e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018e75:	88 c2                	mov    dl,al
c0018e77:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e7c:	01 d0                	add    eax,edx
c0018e7e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018e85:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e8b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e92:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e99:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e9e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018ea5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	68 34 02 00 00       	push   0x234
c0018eb4:	e8 1a ec fe ff       	call   c0007ad3 <malloc>
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018ec3:	83 ec 04             	sub    esp,0x4
c0018ec6:	6a 00                	push   0x0
c0018ec8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ecf:	50                   	push   eax
c0018ed0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018ed7:	e8 62 ad fe ff       	call   c0003c3e <f_mount>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ee6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018eee:	74 1c                	je     c0018f0c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018ef0:	83 ec 0c             	sub    esp,0xc
c0018ef3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018efa:	e8 f4 eb fe ff       	call   c0007af3 <rfree>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	b0 00                	mov    al,0x0
c0018f04:	e9 f7 00 00 00       	jmp    c0019000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f09:	8d 76 00             	lea    esi,[esi+0x0]
c0018f0c:	83 ec 04             	sub    esp,0x4
c0018f0f:	68 00 01 00 00       	push   0x100
c0018f14:	6a 00                	push   0x0
c0018f16:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f1d:	50                   	push   eax
c0018f1e:	e8 cd 75 fe ff       	call   c00004f0 <memset>
c0018f23:	83 c4 10             	add    esp,0x10
c0018f26:	83 ec 08             	sub    esp,0x8
c0018f29:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f30:	50                   	push   eax
c0018f31:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f38:	50                   	push   eax
c0018f39:	e8 32 79 fe ff       	call   c0000870 <strcat>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	83 ec 08             	sub    esp,0x8
c0018f44:	68 76 28 02 c0       	push   0xc0022876
c0018f49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f50:	50                   	push   eax
c0018f51:	e8 1a 79 fe ff       	call   c0000870 <strcat>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	83 ec 04             	sub    esp,0x4
c0018f5c:	6a 01                	push   0x1
c0018f5e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018f65:	50                   	push   eax
c0018f66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f6a:	50                   	push   eax
c0018f6b:	e8 30 ad fe ff       	call   c0003ca0 <f_open>
c0018f70:	83 c4 10             	add    esp,0x10
c0018f73:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f7a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018f81:	85 c0                	test   eax,eax
c0018f83:	74 0b                	je     c0018f90 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018f85:	78 31                	js     c0018fb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f87:	83 e8 04             	sub    eax,0x4
c0018f8a:	83 f8 01             	cmp    eax,0x1
c0018f8d:	77 29                	ja     c0018fb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f8f:	90                   	nop
c0018f90:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018f98:	83 ec 0c             	sub    esp,0xc
c0018f9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f9f:	50                   	push   eax
c0018fa0:	e8 ab b4 fe ff       	call   c0004450 <f_close>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	90                   	nop
c0018fa9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018fb1:	85 c0                	test   eax,eax
c0018fb3:	74 43                	je     c0018ff8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018fb5:	eb 31                	jmp    c0018fe8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018fb7:	90                   	nop
c0018fb8:	83 ec 0c             	sub    esp,0xc
c0018fbb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fc2:	e8 2c eb fe ff       	call   c0007af3 <rfree>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	83 ec 04             	sub    esp,0x4
c0018fcd:	6a 00                	push   0x0
c0018fcf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fd6:	50                   	push   eax
c0018fd7:	6a 00                	push   0x0
c0018fd9:	e8 60 ac fe ff       	call   c0003c3e <f_mount>
c0018fde:	83 c4 10             	add    esp,0x10
c0018fe1:	b0 00                	mov    al,0x0
c0018fe3:	eb 1b                	jmp    c0019000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe8:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fed:	83 c0 01             	add    eax,0x1
c0018ff0:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018fff:	90                   	nop
c0019000:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019006:	c3                   	ret    
c0019007:	90                   	nop

c0019008 <FAT::allocateSwapfile(char const*, int)>:
c0019008:	55                   	push   ebp
c0019009:	57                   	push   edi
c001900a:	56                   	push   esi
c001900b:	53                   	push   ebx
c001900c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019012:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001901d:	83 ec 0c             	sub    esp,0xc
c0019020:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019027:	e8 a7 ea fe ff       	call   c0007ad3 <malloc>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	89 c7                	mov    edi,eax
c0019031:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019036:	83 ec 04             	sub    esp,0x4
c0019039:	50                   	push   eax
c001903a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019041:	57                   	push   edi
c0019042:	e8 83 27 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019051:	83 ec 04             	sub    esp,0x4
c0019054:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019058:	50                   	push   eax
c0019059:	8d 44 24 18          	lea    eax,[esp+0x18]
c001905d:	50                   	push   eax
c001905e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019065:	e8 2a 2b ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c001906a:	83 c4 10             	add    esp,0x10
c001906d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019074:	c1 e0 14             	shl    eax,0x14
c0019077:	89 c7                	mov    edi,eax
c0019079:	89 c5                	mov    ebp,eax
c001907b:	c1 fd 1f             	sar    ebp,0x1f
c001907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019086:	89 f9                	mov    ecx,edi
c0019088:	31 c1                	xor    ecx,eax
c001908a:	89 cb                	mov    ebx,ecx
c001908c:	89 e9                	mov    ecx,ebp
c001908e:	31 d1                	xor    ecx,edx
c0019090:	89 ce                	mov    esi,ecx
c0019092:	89 f0                	mov    eax,esi
c0019094:	09 d8                	or     eax,ebx
c0019096:	0f 84 9c 00 00 00    	je     c0019138 <FAT::allocateSwapfile(char const*, int)+0x130>
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190a6:	e8 b5 29 ff ff       	call   c000ba60 <File::unlink()>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	83 ec 08             	sub    esp,0x8
c00190b1:	6a 12                	push   0x12
c00190b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190ba:	e8 d3 27 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190c9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190cf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190d6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190dd:	c1 e0 14             	shl    eax,0x14
c00190e0:	83 ec 04             	sub    esp,0x4
c00190e3:	6a 01                	push   0x1
c00190e5:	50                   	push   eax
c00190e6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00190ed:	e8 e5 c1 fe ff       	call   c00052d7 <f_expand>
c00190f2:	83 c4 10             	add    esp,0x10
c00190f5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00190fe:	83 c0 10             	add    eax,0x10
c0019101:	8b 00                	mov    eax,DWORD PTR [eax]
c0019103:	83 ec 0c             	sub    esp,0xc
c0019106:	8d 54 24 24          	lea    edx,[esp+0x24]
c001910a:	52                   	push   edx
c001910b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001910f:	52                   	push   edx
c0019110:	6a 00                	push   0x0
c0019112:	68 00 04 00 00       	push   0x400
c0019117:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001911e:	ff d0                	call   eax
c0019120:	83 c4 20             	add    esp,0x20
c0019123:	83 ec 0c             	sub    esp,0xc
c0019126:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001912d:	e8 be 27 ff ff       	call   c000b8f0 <File::close()>
c0019132:	83 c4 10             	add    esp,0x10
c0019135:	8d 76 00             	lea    esi,[esi+0x0]
c0019138:	83 ec 08             	sub    esp,0x8
c001913b:	6a 01                	push   0x1
c001913d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019144:	e8 49 27 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c0019149:	83 c4 10             	add    esp,0x10
c001914c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019153:	8b 00                	mov    eax,DWORD PTR [eax]
c0019155:	83 c0 0c             	add    eax,0xc
c0019158:	8b 00                	mov    eax,DWORD PTR [eax]
c001915a:	83 ec 0c             	sub    esp,0xc
c001915d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019161:	52                   	push   edx
c0019162:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019166:	52                   	push   edx
c0019167:	6a 00                	push   0x0
c0019169:	6a 04                	push   0x4
c001916b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019172:	ff d0                	call   eax
c0019174:	83 c4 20             	add    esp,0x20
c0019177:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001917e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019184:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001918b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019192:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019195:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001919c:	83 ec 0c             	sub    esp,0xc
c001919f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191a6:	e8 45 27 ff ff       	call   c000b8f0 <File::close()>
c00191ab:	83 c4 10             	add    esp,0x10
c00191ae:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00191b5:	ba 00 00 00 00       	mov    edx,0x0
c00191ba:	81 c4 3c 04 00 00    	add    esp,0x43c
c00191c0:	5b                   	pop    ebx
c00191c1:	5e                   	pop    esi
c00191c2:	5f                   	pop    edi
c00191c3:	5d                   	pop    ebp
c00191c4:	c3                   	ret    
c00191c5:	90                   	nop
c00191c6:	66 90                	xchg   ax,ax

c00191c8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00191c8:	57                   	push   edi
c00191c9:	56                   	push   esi
c00191ca:	53                   	push   ebx
c00191cb:	81 ec 50 02 00 00    	sub    esp,0x250
c00191d1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00191d9:	74 0d                	je     c00191e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00191db:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00191e3:	75 0f                	jne    c00191f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00191e5:	8d 76 00             	lea    esi,[esi+0x0]
c00191e8:	b8 04 00 00 00       	mov    eax,0x4
c00191ed:	e9 3a 01 00 00       	jmp    c001932c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191f2:	66 90                	xchg   ax,ax
c00191f4:	83 ec 08             	sub    esp,0x8
c00191f7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191fe:	50                   	push   eax
c00191ff:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019206:	e8 11 b5 fe ff       	call   c000471c <f_readdir>
c001920b:	83 c4 10             	add    esp,0x10
c001920e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019215:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019226:	83 c0 16             	add    eax,0x16
c0019229:	50                   	push   eax
c001922a:	e8 51 73 fe ff       	call   c0000580 <strlen>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	ba 00 00 00 00       	mov    edx,0x0
c0019237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001923b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001923f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019246:	0f b6 c0             	movzx  eax,al
c0019249:	83 e0 10             	and    eax,0x10
c001924c:	74 0a                	je     c0019258 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001924e:	b8 02 00 00 00       	mov    eax,0x2
c0019253:	eb 0b                	jmp    c0019260 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	b8 01 00 00 00       	mov    eax,0x1
c001925d:	8d 76 00             	lea    esi,[esi+0x0]
c0019260:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019264:	83 ec 08             	sub    esp,0x8
c0019267:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001926e:	83 c0 16             	add    eax,0x16
c0019271:	50                   	push   eax
c0019272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019276:	83 c0 10             	add    eax,0x10
c0019279:	50                   	push   eax
c001927a:	e8 d1 73 fe ff       	call   c0000650 <strcpy>
c001927f:	83 c4 10             	add    esp,0x10
c0019282:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019289:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019290:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019294:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001929b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00192a2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00192a9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00192b0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00192b7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00192be:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00192c5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00192cc:	89 c6                	mov    esi,eax
c00192ce:	89 d7                	mov    edi,edx
c00192d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192d2:	89 c8                	mov    eax,ecx
c00192d4:	89 fa                	mov    edx,edi
c00192d6:	89 f3                	mov    ebx,esi
c00192d8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00192df:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00192e6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00192ed:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00192f4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00192fa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019301:	0f be c0             	movsx  eax,al
c0019304:	85 c0                	test   eax,eax
c0019306:	75 08                	jne    c0019310 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019308:	b8 07 00 00 00       	mov    eax,0x7
c001930d:	eb 1d                	jmp    c001932c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001930f:	90                   	nop
c0019310:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019317:	85 c0                	test   eax,eax
c0019319:	75 09                	jne    c0019324 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001931b:	b8 00 00 00 00       	mov    eax,0x0
c0019320:	eb 0a                	jmp    c001932c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019322:	66 90                	xchg   ax,ax
c0019324:	b8 01 00 00 00       	mov    eax,0x1
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	81 c4 50 02 00 00    	add    esp,0x250
c0019332:	5b                   	pop    ebx
c0019333:	5e                   	pop    esi
c0019334:	5f                   	pop    edi
c0019335:	c3                   	ret    
c0019336:	66 90                	xchg   ax,ax

c0019338 <FAT::read(void*, unsigned long, void*, int*)>:
c0019338:	83 ec 1c             	sub    esp,0x1c
c001933b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019340:	74 0a                	je     c001934c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019342:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019347:	75 0b                	jne    c0019354 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	b8 04 00 00 00       	mov    eax,0x4
c0019351:	eb 41                	jmp    c0019394 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019353:	90                   	nop
c0019354:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019358:	50                   	push   eax
c0019359:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001935d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019361:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019365:	e8 f9 ab fe ff       	call   c0003f63 <f_read>
c001936a:	83 c4 10             	add    esp,0x10
c001936d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019371:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019375:	89 c2                	mov    edx,eax
c0019377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001937b:	89 10                	mov    DWORD PTR [eax],edx
c001937d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019381:	85 c0                	test   eax,eax
c0019383:	75 07                	jne    c001938c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019385:	b8 00 00 00 00       	mov    eax,0x0
c001938a:	eb 08                	jmp    c0019394 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001938c:	b8 01 00 00 00       	mov    eax,0x1
c0019391:	8d 76 00             	lea    esi,[esi+0x0]
c0019394:	83 c4 1c             	add    esp,0x1c
c0019397:	c3                   	ret    

c0019398 <FAT::write(void*, unsigned long, void*, int*)>:
c0019398:	83 ec 1c             	sub    esp,0x1c
c001939b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193a0:	74 0a                	je     c00193ac <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00193a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193a7:	75 0b                	jne    c00193b4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00193a9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ac:	b8 04 00 00 00       	mov    eax,0x4
c00193b1:	eb 41                	jmp    c00193f4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00193b3:	90                   	nop
c00193b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193b8:	50                   	push   eax
c00193b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193c5:	e8 7a ad fe ff       	call   c0004144 <f_write>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193d5:	89 c2                	mov    edx,eax
c00193d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193db:	89 10                	mov    DWORD PTR [eax],edx
c00193dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193e1:	85 c0                	test   eax,eax
c00193e3:	75 07                	jne    c00193ec <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00193e5:	b8 00 00 00 00       	mov    eax,0x0
c00193ea:	eb 08                	jmp    c00193f4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00193ec:	b8 01 00 00 00       	mov    eax,0x1
c00193f1:	8d 76 00             	lea    esi,[esi+0x0]
c00193f4:	83 c4 1c             	add    esp,0x1c
c00193f7:	c3                   	ret    

c00193f8 <FAT::close(void*)>:
c00193f8:	83 ec 1c             	sub    esp,0x1c
c00193fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019400:	75 0a                	jne    c001940c <FAT::close(void*)+0x14>
c0019402:	b8 04 00 00 00       	mov    eax,0x4
c0019407:	eb 3f                	jmp    c0019448 <FAT::close(void*)+0x50>
c0019409:	8d 76 00             	lea    esi,[esi+0x0]
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019413:	e8 38 b0 fe ff       	call   c0004450 <f_close>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001941f:	83 ec 0c             	sub    esp,0xc
c0019422:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019426:	e8 b8 e6 fe ff       	call   c0007ae3 <free>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019432:	85 c0                	test   eax,eax
c0019434:	75 0a                	jne    c0019440 <FAT::close(void*)+0x48>
c0019436:	b8 00 00 00 00       	mov    eax,0x0
c001943b:	eb 0b                	jmp    c0019448 <FAT::close(void*)+0x50>
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	b8 01 00 00 00       	mov    eax,0x1
c0019445:	8d 76 00             	lea    esi,[esi+0x0]
c0019448:	83 c4 1c             	add    esp,0x1c
c001944b:	c3                   	ret    

c001944c <FAT::closeDir(void*)>:
c001944c:	83 ec 1c             	sub    esp,0x1c
c001944f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019454:	75 0a                	jne    c0019460 <FAT::closeDir(void*)+0x14>
c0019456:	b8 04 00 00 00       	mov    eax,0x4
c001945b:	eb 3f                	jmp    c001949c <FAT::closeDir(void*)+0x50>
c001945d:	8d 76 00             	lea    esi,[esi+0x0]
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019467:	e8 8e b2 fe ff       	call   c00046fa <f_closedir>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019473:	83 ec 0c             	sub    esp,0xc
c0019476:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001947a:	e8 64 e6 fe ff       	call   c0007ae3 <free>
c001947f:	83 c4 10             	add    esp,0x10
c0019482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019486:	85 c0                	test   eax,eax
c0019488:	75 0a                	jne    c0019494 <FAT::closeDir(void*)+0x48>
c001948a:	b8 00 00 00 00       	mov    eax,0x0
c001948f:	eb 0b                	jmp    c001949c <FAT::closeDir(void*)+0x50>
c0019491:	8d 76 00             	lea    esi,[esi+0x0]
c0019494:	b8 01 00 00 00       	mov    eax,0x1
c0019499:	8d 76 00             	lea    esi,[esi+0x0]
c001949c:	83 c4 1c             	add    esp,0x1c
c001949f:	c3                   	ret    

c00194a0 <FAT::truncate(void*, unsigned long long)>:
c00194a0:	83 ec 2c             	sub    esp,0x2c
c00194a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194b3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194b8:	75 0a                	jne    c00194c4 <FAT::truncate(void*, unsigned long long)+0x24>
c00194ba:	b8 04 00 00 00       	mov    eax,0x4
c00194bf:	eb 47                	jmp    c0019508 <FAT::truncate(void*, unsigned long long)+0x68>
c00194c1:	8d 76 00             	lea    esi,[esi+0x0]
c00194c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00194c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00194cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00194cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00194d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194db:	83 ec 08             	sub    esp,0x8
c00194de:	50                   	push   eax
c00194df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194e3:	e8 97 af fe ff       	call   c000447f <f_lseek>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194f3:	85 c0                	test   eax,eax
c00194f5:	75 09                	jne    c0019500 <FAT::truncate(void*, unsigned long long)+0x60>
c00194f7:	b8 00 00 00 00       	mov    eax,0x0
c00194fc:	eb 0a                	jmp    c0019508 <FAT::truncate(void*, unsigned long long)+0x68>
c00194fe:	66 90                	xchg   ax,ax
c0019500:	b8 01 00 00 00       	mov    eax,0x1
c0019505:	8d 76 00             	lea    esi,[esi+0x0]
c0019508:	83 c4 2c             	add    esp,0x2c
c001950b:	c3                   	ret    

c001950c <FAT::seek(void*, unsigned long long)>:
c001950c:	83 ec 2c             	sub    esp,0x2c
c001950f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001951b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001951f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019524:	75 0a                	jne    c0019530 <FAT::seek(void*, unsigned long long)+0x24>
c0019526:	b8 04 00 00 00       	mov    eax,0x4
c001952b:	eb 33                	jmp    c0019560 <FAT::seek(void*, unsigned long long)+0x54>
c001952d:	8d 76 00             	lea    esi,[esi+0x0]
c0019530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019534:	83 ec 08             	sub    esp,0x8
c0019537:	50                   	push   eax
c0019538:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001953c:	e8 3e af fe ff       	call   c000447f <f_lseek>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001954c:	85 c0                	test   eax,eax
c001954e:	75 08                	jne    c0019558 <FAT::seek(void*, unsigned long long)+0x4c>
c0019550:	b8 00 00 00 00       	mov    eax,0x0
c0019555:	eb 09                	jmp    c0019560 <FAT::seek(void*, unsigned long long)+0x54>
c0019557:	90                   	nop
c0019558:	b8 01 00 00 00       	mov    eax,0x1
c001955d:	8d 76 00             	lea    esi,[esi+0x0]
c0019560:	83 c4 2c             	add    esp,0x2c
c0019563:	c3                   	ret    

c0019564 <fatWrapperReadDisk>:
c0019564:	53                   	push   ebx
c0019565:	83 ec 18             	sub    esp,0x18
c0019568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001956c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019570:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019575:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001957c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019584:	ba 00 00 00 00       	mov    edx,0x0
c0019589:	83 ec 0c             	sub    esp,0xc
c001958c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019590:	53                   	push   ebx
c0019591:	52                   	push   edx
c0019592:	50                   	push   eax
c0019593:	51                   	push   ecx
c0019594:	e8 45 45 ff ff       	call   c000dade <LogicalDisk::read(unsigned long long, int, void*)>
c0019599:	83 c4 20             	add    esp,0x20
c001959c:	83 c4 18             	add    esp,0x18
c001959f:	5b                   	pop    ebx
c00195a0:	c3                   	ret    
c00195a1:	8d 76 00             	lea    esi,[esi+0x0]

c00195a4 <fatWrapperWriteDisk>:
c00195a4:	53                   	push   ebx
c00195a5:	83 ec 18             	sub    esp,0x18
c00195a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195b5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195c4:	ba 00 00 00 00       	mov    edx,0x0
c00195c9:	83 ec 0c             	sub    esp,0xc
c00195cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195d0:	53                   	push   ebx
c00195d1:	52                   	push   edx
c00195d2:	50                   	push   eax
c00195d3:	51                   	push   ecx
c00195d4:	e8 71 45 ff ff       	call   c000db4a <LogicalDisk::write(unsigned long long, int, void*)>
c00195d9:	83 c4 20             	add    esp,0x20
c00195dc:	83 c4 18             	add    esp,0x18
c00195df:	5b                   	pop    ebx
c00195e0:	c3                   	ret    
c00195e1:	8d 76 00             	lea    esi,[esi+0x0]

c00195e4 <fatWrapperIoctl>:
c00195e4:	53                   	push   ebx
c00195e5:	83 ec 28             	sub    esp,0x28
c00195e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00195ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00195f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195f4:	88 d0                	mov    al,dl
c00195f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00195fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195ff:	83 f8 02             	cmp    eax,0x2
c0019602:	75 34                	jne    c0019638 <fatWrapperIoctl+0x54>
c0019604:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019608:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001960c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019611:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019618:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001961e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019624:	89 c2                	mov    edx,eax
c0019626:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001962a:	66 89 10             	mov    WORD PTR [eax],dx
c001962d:	b8 00 00 00 00       	mov    eax,0x0
c0019632:	e9 c5 00 00 00       	jmp    c00196fc <fatWrapperIoctl+0x118>
c0019637:	90                   	nop
c0019638:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001963d:	83 f8 01             	cmp    eax,0x1
c0019640:	75 6a                	jne    c00196ac <fatWrapperIoctl+0xc8>
c0019642:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001964a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001964f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019656:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001965c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019662:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019668:	89 c8                	mov    eax,ecx
c001966a:	89 da                	mov    edx,ebx
c001966c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019670:	c1 e0 0a             	shl    eax,0xa
c0019673:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019678:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001967f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019685:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001968b:	89 cb                	mov    ebx,ecx
c001968d:	c1 fb 1f             	sar    ebx,0x1f
c0019690:	53                   	push   ebx
c0019691:	51                   	push   ecx
c0019692:	52                   	push   edx
c0019693:	50                   	push   eax
c0019694:	e8 b7 5b 00 00       	call   c001f250 <__udivdi3>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	89 c2                	mov    edx,eax
c001969e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196a2:	89 10                	mov    DWORD PTR [eax],edx
c00196a4:	b8 00 00 00 00       	mov    eax,0x0
c00196a9:	eb 51                	jmp    c00196fc <fatWrapperIoctl+0x118>
c00196ab:	90                   	nop
c00196ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196b1:	85 c0                	test   eax,eax
c00196b3:	75 07                	jne    c00196bc <fatWrapperIoctl+0xd8>
c00196b5:	b8 00 00 00 00       	mov    eax,0x0
c00196ba:	eb 40                	jmp    c00196fc <fatWrapperIoctl+0x118>
c00196bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196c1:	83 f8 03             	cmp    eax,0x3
c00196c4:	75 1a                	jne    c00196e0 <fatWrapperIoctl+0xfc>
c00196c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196d2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00196d8:	b8 00 00 00 00       	mov    eax,0x0
c00196dd:	eb 1d                	jmp    c00196fc <fatWrapperIoctl+0x118>
c00196df:	90                   	nop
c00196e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196e5:	83 f8 04             	cmp    eax,0x4
c00196e8:	75 0a                	jne    c00196f4 <fatWrapperIoctl+0x110>
c00196ea:	b8 00 00 00 00       	mov    eax,0x0
c00196ef:	eb 0b                	jmp    c00196fc <fatWrapperIoctl+0x118>
c00196f1:	8d 76 00             	lea    esi,[esi+0x0]
c00196f4:	b8 04 00 00 00       	mov    eax,0x4
c00196f9:	8d 76 00             	lea    esi,[esi+0x0]
c00196fc:	83 c4 28             	add    esp,0x28
c00196ff:	5b                   	pop    ebx
c0019700:	c3                   	ret    
c0019701:	90                   	nop
c0019702:	66 90                	xchg   ax,ax

c0019704 <FAT::FAT()>:
c0019704:	83 ec 1c             	sub    esp,0x1c
c0019707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001970b:	83 ec 0c             	sub    esp,0xc
c001970e:	50                   	push   eax
c001970f:	e8 ee 1d ff ff       	call   c000b502 <Filesystem::Filesystem()>
c0019714:	83 c4 10             	add    esp,0x10
c0019717:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c001971c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019720:	89 10                	mov    DWORD PTR [eax],edx
c0019722:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001972c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019734:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019739:	7f 19                	jg     c0019754 <FAT::FAT()+0x50>
c001973b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001973f:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001974a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001974f:	eb e3                	jmp    c0019734 <FAT::FAT()+0x30>
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	90                   	nop
c0019755:	83 c4 1c             	add    esp,0x1c
c0019758:	c3                   	ret    
c0019759:	90                   	nop
c001975a:	66 90                	xchg   ax,ax

c001975c <FAT::fixFilepath(char*)>:
c001975c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019760:	8a 00                	mov    al,BYTE PTR [eax]
c0019762:	0f be c0             	movsx  eax,al
c0019765:	83 f8 40             	cmp    eax,0x40
c0019768:	7e 2e                	jle    c0019798 <FAT::fixFilepath(char*)+0x3c>
c001976a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001976e:	8a 00                	mov    al,BYTE PTR [eax]
c0019770:	83 e8 41             	sub    eax,0x41
c0019773:	88 c2                	mov    dl,al
c0019775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019779:	88 10                	mov    BYTE PTR [eax],dl
c001977b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001977f:	8a 00                	mov    al,BYTE PTR [eax]
c0019781:	0f be c0             	movsx  eax,al
c0019784:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001978b:	83 c0 30             	add    eax,0x30
c001978e:	88 c2                	mov    dl,al
c0019790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019794:	88 10                	mov    BYTE PTR [eax],dl
c0019796:	66 90                	xchg   ax,ax
c0019798:	90                   	nop
c0019799:	c3                   	ret    
c001979a:	66 90                	xchg   ax,ax

c001979c <FAT::open(char const*, void**, FileOpenMode)>:
c001979c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197aa:	74 0c                	je     c00197b8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00197ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197b4:	75 0e                	jne    c00197c4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00197b6:	66 90                	xchg   ax,ax
c00197b8:	b8 04 00 00 00       	mov    eax,0x4
c00197bd:	e9 46 01 00 00       	jmp    c0019908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00197c2:	66 90                	xchg   ax,ax
c00197c4:	83 ec 08             	sub    esp,0x8
c00197c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197d2:	50                   	push   eax
c00197d3:	e8 78 6e fe ff       	call   c0000650 <strcpy>
c00197d8:	83 c4 10             	add    esp,0x10
c00197db:	83 ec 08             	sub    esp,0x8
c00197de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197e2:	50                   	push   eax
c00197e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197ea:	e8 6d ff ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c00197ef:	83 c4 10             	add    esp,0x10
c00197f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00197fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019801:	83 e0 01             	and    eax,0x1
c0019804:	74 12                	je     c0019818 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019806:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001980d:	83 c8 01             	or     eax,0x1
c0019810:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019817:	90                   	nop
c0019818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001981f:	83 e0 04             	and    eax,0x4
c0019822:	74 24                	je     c0019848 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019824:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001982b:	83 c8 30             	or     eax,0x30
c001982e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019835:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001983c:	83 c8 02             	or     eax,0x2
c001983f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019846:	66 90                	xchg   ax,ax
c0019848:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001984f:	83 e0 02             	and    eax,0x2
c0019852:	74 14                	je     c0019868 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019854:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001985b:	83 c8 02             	or     eax,0x2
c001985e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019865:	8d 76 00             	lea    esi,[esi+0x0]
c0019868:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986f:	83 e0 08             	and    eax,0x8
c0019872:	74 14                	je     c0019888 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019874:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001987b:	83 c8 04             	or     eax,0x4
c001987e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019885:	8d 76 00             	lea    esi,[esi+0x0]
c0019888:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001988f:	83 e0 10             	and    eax,0x10
c0019892:	74 14                	je     c00198a8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019894:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001989b:	83 c8 08             	or     eax,0x8
c001989e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	68 28 02 00 00       	push   0x228
c00198b0:	e8 1e e2 fe ff       	call   c0007ad3 <malloc>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	89 c2                	mov    edx,eax
c00198ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198c1:	89 10                	mov    DWORD PTR [eax],edx
c00198c3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00198cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00198d4:	83 ec 04             	sub    esp,0x4
c00198d7:	52                   	push   edx
c00198d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198dc:	52                   	push   edx
c00198dd:	50                   	push   eax
c00198de:	e8 bd a3 fe ff       	call   c0003ca0 <f_open>
c00198e3:	83 c4 10             	add    esp,0x10
c00198e6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00198ed:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00198f5:	74 09                	je     c0019900 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00198f7:	b8 01 00 00 00       	mov    eax,0x1
c00198fc:	eb 0a                	jmp    c0019908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00198fe:	66 90                	xchg   ax,ax
c0019900:	b8 00 00 00 00       	mov    eax,0x0
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	81 c4 1c 01 00 00    	add    esp,0x11c
c001990e:	c3                   	ret    
c001990f:	90                   	nop

c0019910 <FAT::openDir(char const*, void**)>:
c0019910:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019916:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001991e:	74 0c                	je     c001992c <FAT::openDir(char const*, void**)+0x1c>
c0019920:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019928:	75 0e                	jne    c0019938 <FAT::openDir(char const*, void**)+0x28>
c001992a:	66 90                	xchg   ax,ax
c001992c:	b8 04 00 00 00       	mov    eax,0x4
c0019931:	e9 82 00 00 00       	jmp    c00199b8 <FAT::openDir(char const*, void**)+0xa8>
c0019936:	66 90                	xchg   ax,ax
c0019938:	83 ec 08             	sub    esp,0x8
c001993b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019942:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019946:	50                   	push   eax
c0019947:	e8 04 6d fe ff       	call   c0000650 <strcpy>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	83 ec 08             	sub    esp,0x8
c0019952:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019956:	50                   	push   eax
c0019957:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001995e:	e8 f9 fd ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019963:	83 c4 10             	add    esp,0x10
c0019966:	83 ec 0c             	sub    esp,0xc
c0019969:	6a 30                	push   0x30
c001996b:	e8 63 e1 fe ff       	call   c0007ad3 <malloc>
c0019970:	83 c4 10             	add    esp,0x10
c0019973:	89 c2                	mov    edx,eax
c0019975:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001997c:	89 10                	mov    DWORD PTR [eax],edx
c001997e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019985:	8b 00                	mov    eax,DWORD PTR [eax]
c0019987:	83 ec 08             	sub    esp,0x8
c001998a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001998e:	52                   	push   edx
c001998f:	50                   	push   eax
c0019990:	e8 9a ac fe ff       	call   c000462f <f_opendir>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001999f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199a7:	74 07                	je     c00199b0 <FAT::openDir(char const*, void**)+0xa0>
c00199a9:	b8 01 00 00 00       	mov    eax,0x1
c00199ae:	eb 08                	jmp    c00199b8 <FAT::openDir(char const*, void**)+0xa8>
c00199b0:	b8 00 00 00 00       	mov    eax,0x0
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199be:	c3                   	ret    
c00199bf:	90                   	nop

c00199c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00199c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00199c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00199ce:	75 0c                	jne    c00199dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00199d0:	b8 04 00 00 00       	mov    eax,0x4
c00199d5:	e9 d6 00 00 00       	jmp    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199da:	66 90                	xchg   ax,ax
c00199dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199e4:	75 0a                	jne    c00199f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00199e6:	b8 04 00 00 00       	mov    eax,0x4
c00199eb:	e9 c0 00 00 00       	jmp    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00199f8:	75 0a                	jne    c0019a04 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00199fa:	b8 04 00 00 00       	mov    eax,0x4
c00199ff:	e9 ac 00 00 00       	jmp    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a04:	83 ec 08             	sub    esp,0x8
c0019a07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a15:	50                   	push   eax
c0019a16:	e8 35 6c fe ff       	call   c0000650 <strcpy>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	83 ec 08             	sub    esp,0x8
c0019a21:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a28:	50                   	push   eax
c0019a29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a30:	e8 27 fd ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	83 ec 08             	sub    esp,0x8
c0019a3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a3f:	50                   	push   eax
c0019a40:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a47:	50                   	push   eax
c0019a48:	e8 61 ad fe ff       	call   c00047ae <f_stat>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a57:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a5e:	85 c0                	test   eax,eax
c0019a60:	74 0a                	je     c0019a6c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019a62:	83 f8 04             	cmp    eax,0x4
c0019a65:	74 39                	je     c0019aa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a67:	eb 3f                	jmp    c0019aa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019a69:	8d 76 00             	lea    esi,[esi+0x0]
c0019a6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a70:	0f b6 c0             	movzx  eax,al
c0019a73:	83 e0 10             	and    eax,0x10
c0019a76:	0f 95 c2             	setne  dl
c0019a79:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a80:	88 10                	mov    BYTE PTR [eax],dl
c0019a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a86:	ba 00 00 00 00       	mov    edx,0x0
c0019a8b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a92:	89 01                	mov    DWORD PTR [ecx],eax
c0019a94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a97:	b8 00 00 00 00       	mov    eax,0x0
c0019a9c:	eb 12                	jmp    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a9e:	66 90                	xchg   ax,ax
c0019aa0:	b8 02 00 00 00       	mov    eax,0x2
c0019aa5:	eb 09                	jmp    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019aa7:	90                   	nop
c0019aa8:	b8 01 00 00 00       	mov    eax,0x1
c0019aad:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ab6:	c3                   	ret    
c0019ab7:	90                   	nop

c0019ab8 <FAT::unlink(char const*)>:
c0019ab8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019abe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ac6:	75 08                	jne    c0019ad0 <FAT::unlink(char const*)+0x18>
c0019ac8:	b8 04 00 00 00       	mov    eax,0x4
c0019acd:	eb 61                	jmp    c0019b30 <FAT::unlink(char const*)+0x78>
c0019acf:	90                   	nop
c0019ad0:	83 ec 08             	sub    esp,0x8
c0019ad3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ada:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ade:	50                   	push   eax
c0019adf:	e8 6c 6b fe ff       	call   c0000650 <strcpy>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	83 ec 08             	sub    esp,0x8
c0019aea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aee:	50                   	push   eax
c0019aef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019af6:	e8 61 fc ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b05:	50                   	push   eax
c0019b06:	e8 15 af fe ff       	call   c0004a20 <f_unlink>
c0019b0b:	83 c4 10             	add    esp,0x10
c0019b0e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b15:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b1c:	85 c0                	test   eax,eax
c0019b1e:	75 08                	jne    c0019b28 <FAT::unlink(char const*)+0x70>
c0019b20:	b8 00 00 00 00       	mov    eax,0x0
c0019b25:	eb 09                	jmp    c0019b30 <FAT::unlink(char const*)+0x78>
c0019b27:	90                   	nop
c0019b28:	b8 01 00 00 00       	mov    eax,0x1
c0019b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b36:	c3                   	ret    
c0019b37:	90                   	nop

c0019b38 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b38:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b3e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019b45:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019b4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b50:	88 d0                	mov    al,dl
c0019b52:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b56:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b5e:	75 0c                	jne    c0019b6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019b60:	b8 04 00 00 00       	mov    eax,0x4
c0019b65:	e9 7e 01 00 00       	jmp    c0019ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019b6a:	66 90                	xchg   ax,ax
c0019b6c:	83 ec 08             	sub    esp,0x8
c0019b6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b7a:	50                   	push   eax
c0019b7b:	e8 d0 6a fe ff       	call   c0000650 <strcpy>
c0019b80:	83 c4 10             	add    esp,0x10
c0019b83:	83 ec 08             	sub    esp,0x8
c0019b86:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b8a:	50                   	push   eax
c0019b8b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b92:	e8 c5 fb ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019b97:	83 c4 10             	add    esp,0x10
c0019b9a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ba2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019baa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019baf:	83 e0 01             	and    eax,0x1
c0019bb2:	74 14                	je     c0019bc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019bb4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bbb:	83 c8 01             	or     eax,0x1
c0019bbe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bcd:	83 e0 02             	and    eax,0x2
c0019bd0:	74 12                	je     c0019be4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019bd2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bd9:	83 c8 20             	or     eax,0x20
c0019bdc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019be3:	90                   	nop
c0019be4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be9:	83 e0 04             	and    eax,0x4
c0019bec:	74 12                	je     c0019c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019bee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bf5:	83 c8 04             	or     eax,0x4
c0019bf8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bff:	90                   	nop
c0019c00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c05:	83 e0 08             	and    eax,0x8
c0019c08:	74 12                	je     c0019c1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019c0a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c11:	83 c8 02             	or     eax,0x2
c0019c14:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c1b:	90                   	nop
c0019c1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c21:	83 e0 01             	and    eax,0x1
c0019c24:	74 12                	je     c0019c38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019c26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c2d:	83 c8 01             	or     eax,0x1
c0019c30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c37:	90                   	nop
c0019c38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c3d:	83 e0 02             	and    eax,0x2
c0019c40:	74 12                	je     c0019c54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019c42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c49:	83 c8 20             	or     eax,0x20
c0019c4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c53:	90                   	nop
c0019c54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c59:	83 e0 04             	and    eax,0x4
c0019c5c:	74 12                	je     c0019c70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019c5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c65:	83 c8 04             	or     eax,0x4
c0019c68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c6f:	90                   	nop
c0019c70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c75:	83 e0 08             	and    eax,0x8
c0019c78:	74 12                	je     c0019c8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019c7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c81:	83 c8 02             	or     eax,0x2
c0019c84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c8b:	90                   	nop
c0019c8c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019c93:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c9a:	09 d0                	or     eax,edx
c0019c9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ca3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019cab:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019cb3:	83 ec 04             	sub    esp,0x4
c0019cb6:	52                   	push   edx
c0019cb7:	50                   	push   eax
c0019cb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cbc:	50                   	push   eax
c0019cbd:	e8 d1 b1 fe ff       	call   c0004e93 <f_chmod>
c0019cc2:	83 c4 10             	add    esp,0x10
c0019cc5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019ccc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019cd3:	85 c0                	test   eax,eax
c0019cd5:	75 09                	jne    c0019ce0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019cd7:	b8 00 00 00 00       	mov    eax,0x0
c0019cdc:	eb 0a                	jmp    c0019ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019cde:	66 90                	xchg   ax,ax
c0019ce0:	b8 01 00 00 00       	mov    eax,0x1
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cee:	c3                   	ret    
c0019cef:	90                   	nop

c0019cf0 <FAT::rename(char const*, char const*)>:
c0019cf0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019cf6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019cfe:	74 0c                	je     c0019d0c <FAT::rename(char const*, char const*)+0x1c>
c0019d00:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d08:	75 0e                	jne    c0019d18 <FAT::rename(char const*, char const*)+0x28>
c0019d0a:	66 90                	xchg   ax,ax
c0019d0c:	b8 04 00 00 00       	mov    eax,0x4
c0019d11:	e9 9e 00 00 00       	jmp    c0019db4 <FAT::rename(char const*, char const*)+0xc4>
c0019d16:	66 90                	xchg   ax,ax
c0019d18:	83 ec 08             	sub    esp,0x8
c0019d1b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d22:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d29:	50                   	push   eax
c0019d2a:	e8 21 69 fe ff       	call   c0000650 <strcpy>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	83 ec 08             	sub    esp,0x8
c0019d35:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d3c:	50                   	push   eax
c0019d3d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d44:	e8 13 fa ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019d49:	83 c4 10             	add    esp,0x10
c0019d4c:	83 ec 08             	sub    esp,0x8
c0019d4f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d5a:	50                   	push   eax
c0019d5b:	e8 f0 68 fe ff       	call   c0000650 <strcpy>
c0019d60:	83 c4 10             	add    esp,0x10
c0019d63:	83 ec 08             	sub    esp,0x8
c0019d66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d6a:	50                   	push   eax
c0019d6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d72:	e8 e5 f9 ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	83 ec 08             	sub    esp,0x8
c0019d7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d81:	50                   	push   eax
c0019d82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d89:	50                   	push   eax
c0019d8a:	e8 4c af fe ff       	call   c0004cdb <f_rename>
c0019d8f:	83 c4 10             	add    esp,0x10
c0019d92:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d99:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019da0:	85 c0                	test   eax,eax
c0019da2:	75 08                	jne    c0019dac <FAT::rename(char const*, char const*)+0xbc>
c0019da4:	b8 00 00 00 00       	mov    eax,0x0
c0019da9:	eb 09                	jmp    c0019db4 <FAT::rename(char const*, char const*)+0xc4>
c0019dab:	90                   	nop
c0019dac:	b8 01 00 00 00       	mov    eax,0x1
c0019db1:	8d 76 00             	lea    esi,[esi+0x0]
c0019db4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019dba:	c3                   	ret    
c0019dbb:	90                   	nop

c0019dbc <FAT::mkdir(char const*)>:
c0019dbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dca:	75 08                	jne    c0019dd4 <FAT::mkdir(char const*)+0x18>
c0019dcc:	b8 04 00 00 00       	mov    eax,0x4
c0019dd1:	eb 61                	jmp    c0019e34 <FAT::mkdir(char const*)+0x78>
c0019dd3:	90                   	nop
c0019dd4:	83 ec 08             	sub    esp,0x8
c0019dd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019de2:	50                   	push   eax
c0019de3:	e8 68 68 fe ff       	call   c0000650 <strcpy>
c0019de8:	83 c4 10             	add    esp,0x10
c0019deb:	83 ec 08             	sub    esp,0x8
c0019dee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019df2:	50                   	push   eax
c0019df3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dfa:	e8 5d f9 ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019dff:	83 c4 10             	add    esp,0x10
c0019e02:	83 ec 0c             	sub    esp,0xc
c0019e05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e09:	50                   	push   eax
c0019e0a:	e8 31 ad fe ff       	call   c0004b40 <f_mkdir>
c0019e0f:	83 c4 10             	add    esp,0x10
c0019e12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e20:	85 c0                	test   eax,eax
c0019e22:	75 08                	jne    c0019e2c <FAT::mkdir(char const*)+0x70>
c0019e24:	b8 00 00 00 00       	mov    eax,0x0
c0019e29:	eb 09                	jmp    c0019e34 <FAT::mkdir(char const*)+0x78>
c0019e2b:	90                   	nop
c0019e2c:	b8 01 00 00 00       	mov    eax,0x1
c0019e31:	8d 76 00             	lea    esi,[esi+0x0]
c0019e34:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <FAT::exists(char const*)>:
c0019e3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e42:	83 ec 08             	sub    esp,0x8
c0019e45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e50:	50                   	push   eax
c0019e51:	e8 fa 67 fe ff       	call   c0000650 <strcpy>
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	83 ec 08             	sub    esp,0x8
c0019e5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e60:	50                   	push   eax
c0019e61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e68:	e8 ef f8 ff ff       	call   c001975c <FAT::fixFilepath(char*)>
c0019e6d:	83 c4 10             	add    esp,0x10
c0019e70:	83 ec 08             	sub    esp,0x8
c0019e73:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019e7a:	50                   	push   eax
c0019e7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e7f:	50                   	push   eax
c0019e80:	e8 29 a9 fe ff       	call   c00047ae <f_stat>
c0019e85:	83 c4 10             	add    esp,0x10
c0019e88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e96:	85 c0                	test   eax,eax
c0019e98:	75 06                	jne    c0019ea0 <FAT::exists(char const*)+0x64>
c0019e9a:	b0 01                	mov    al,0x1
c0019e9c:	eb 06                	jmp    c0019ea4 <FAT::exists(char const*)+0x68>
c0019e9e:	66 90                	xchg   ax,ax
c0019ea0:	b0 00                	mov    al,0x0
c0019ea2:	66 90                	xchg   ax,ax
c0019ea4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019eaa:	c3                   	ret    
c0019eab:	90                   	nop

c0019eac <isoReadDiscSectorHelper>:
c0019eac:	83 ec 2c             	sub    esp,0x2c
c0019eaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019eb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019eb7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019ebc:	83 e8 41             	sub    eax,0x41
c0019ebf:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019ec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019eca:	ba 00 00 00 00       	mov    edx,0x0
c0019ecf:	83 ec 0c             	sub    esp,0xc
c0019ed2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ed6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019eda:	52                   	push   edx
c0019edb:	50                   	push   eax
c0019edc:	51                   	push   ecx
c0019edd:	e8 fc 3b ff ff       	call   c000dade <LogicalDisk::read(unsigned long long, int, void*)>
c0019ee2:	83 c4 20             	add    esp,0x20
c0019ee5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ee9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019eee:	74 0c                	je     c0019efc <isoReadDiscSectorHelper+0x50>
c0019ef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ef4:	c1 e0 0b             	shl    eax,0xb
c0019ef7:	eb 0b                	jmp    c0019f04 <isoReadDiscSectorHelper+0x58>
c0019ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0019efc:	b8 00 00 00 00       	mov    eax,0x0
c0019f01:	8d 76 00             	lea    esi,[esi+0x0]
c0019f04:	83 c4 2c             	add    esp,0x2c
c0019f07:	c3                   	ret    

c0019f08 <iso_kprintf>:
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	83 ec 08             	sub    esp,0x8
c0019f0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f12:	68 3a 26 02 c0       	push   0xc002263a
c0019f17:	e8 ee 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f1c:	83 c4 10             	add    esp,0x10
c0019f1f:	90                   	nop
c0019f20:	83 c4 0c             	add    esp,0xc
c0019f23:	c3                   	ret    

c0019f24 <iso_kprintfd>:
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	83 ec 08             	sub    esp,0x8
c0019f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f2e:	68 1a 0e 02 c0       	push   0xc0020e1a
c0019f33:	e8 d2 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f38:	83 c4 10             	add    esp,0x10
c0019f3b:	90                   	nop
c0019f3c:	83 c4 0c             	add    esp,0xc
c0019f3f:	c3                   	ret    

c0019f40 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f40:	b8 08 00 00 00       	mov    eax,0x8
c0019f45:	c3                   	ret    

c0019f46 <ISO9660::truncate(void*, unsigned long long)>:
c0019f46:	b8 01 00 00 00       	mov    eax,0x1
c0019f4b:	c3                   	ret    

c0019f4c <ISO9660::getName()>:
c0019f4c:	b8 f0 28 02 c0       	mov    eax,0xc00228f0
c0019f51:	c3                   	ret    

c0019f52 <ISO9660::closeDir(void*)>:
c0019f52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f58:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019f5b:	90                   	nop

c0019f5c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019f5c:	b8 01 00 00 00       	mov    eax,0x1
c0019f61:	c3                   	ret    

c0019f62 <ISO9660::unlink(char const*)>:
c0019f62:	b8 01 00 00 00       	mov    eax,0x1
c0019f67:	c3                   	ret    

c0019f68 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f68:	b8 03 00 00 00       	mov    eax,0x3
c0019f6d:	c3                   	ret    

c0019f6e <ISO9660::rename(char const*, char const*)>:
c0019f6e:	b8 01 00 00 00       	mov    eax,0x1
c0019f73:	c3                   	ret    

c0019f74 <ISO9660::mkdir(char const*)>:
c0019f74:	b8 01 00 00 00       	mov    eax,0x1
c0019f79:	c3                   	ret    

c0019f7a <ISO9660::~ISO9660()>:
c0019f7a:	83 ec 0c             	sub    esp,0xc
c0019f7d:	ba 30 2a 02 c0       	mov    edx,0xc0022a30
c0019f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f86:	89 10                	mov    DWORD PTR [eax],edx
c0019f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8c:	83 ec 0c             	sub    esp,0xc
c0019f8f:	50                   	push   eax
c0019f90:	e8 91 15 ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	90                   	nop
c0019f99:	83 c4 0c             	add    esp,0xc
c0019f9c:	c3                   	ret    
c0019f9d:	90                   	nop

c0019f9e <ISO9660::~ISO9660()>:
c0019f9e:	83 ec 0c             	sub    esp,0xc
c0019fa1:	83 ec 0c             	sub    esp,0xc
c0019fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fa8:	e8 cd ff ff ff       	call   c0019f7a <ISO9660::~ISO9660()>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	83 ec 08             	sub    esp,0x8
c0019fb3:	6a 08                	push   0x8
c0019fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fb9:	e8 4e 08 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	83 c4 0c             	add    esp,0xc
c0019fc4:	c3                   	ret    
c0019fc5:	90                   	nop

c0019fc6 <ISO9660::exists(char const*)>:
c0019fc6:	83 ec 18             	sub    esp,0x18
c0019fc9:	68 0b 29 02 c0       	push   0xc002290b
c0019fce:	e8 be 72 ff ff       	call   c0011291 <KePanic(char const*)>
c0019fd3:	31 c0                	xor    eax,eax
c0019fd5:	83 c4 1c             	add    esp,0x1c
c0019fd8:	c3                   	ret    
c0019fd9:	90                   	nop

c0019fda <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019fda:	56                   	push   esi
c0019fdb:	53                   	push   ebx
c0019fdc:	53                   	push   ebx
c0019fdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fe1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fe5:	85 db                	test   ebx,ebx
c0019fe7:	0f 84 ca 00 00 00    	je     c001a0b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019fed:	85 f6                	test   esi,esi
c0019fef:	0f 84 c2 00 00 00    	je     c001a0b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ff5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019ffa:	b8 03 00 00 00       	mov    eax,0x3
c0019fff:	0f 85 b7 00 00 00    	jne    c001a0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a005:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a007:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a00d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a014:	74 1b                	je     c001a031 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a016:	85 c0                	test   eax,eax
c001a018:	74 10                	je     c001a02a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a01a:	83 ec 0c             	sub    esp,0xc
c001a01d:	68 29 29 02 c0       	push   0xc0022929
c001a022:	e8 6a 72 ff ff       	call   c0011291 <KePanic(char const*)>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a02c:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a031:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a034:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a03b:	85 c0                	test   eax,eax
c001a03d:	74 09                	je     c001a048 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a03f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a046:	74 48                	je     c001a090 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	68 39 29 02 c0       	push   0xc0022939
c001a050:	e8 b5 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a055:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a062:	85 c0                	test   eax,eax
c001a064:	74 17                	je     c001a07d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a066:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a06d:	83 ec 0c             	sub    esp,0xc
c001a070:	68 59 29 02 c0       	push   0xc0022959
c001a075:	e8 90 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	50                   	push   eax
c001a088:	e8 da c9 fe ff       	call   c0006a67 <init_percd>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	51                   	push   ecx
c001a091:	83 c3 03             	add    ebx,0x3
c001a094:	51                   	push   ecx
c001a095:	6a 00                	push   0x0
c001a097:	53                   	push   ebx
c001a098:	e8 8d c4 fe ff       	call   c000652a <iso_open>
c001a09d:	83 c4 10             	add    esp,0x10
c001a0a0:	89 c2                	mov    edx,eax
c001a0a2:	b8 01 00 00 00       	mov    eax,0x1
c001a0a7:	83 fa ff             	cmp    edx,0xffffffff
c001a0aa:	74 10                	je     c001a0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0ac:	83 c2 32             	add    edx,0x32
c001a0af:	31 c0                	xor    eax,eax
c001a0b1:	01 d2                	add    edx,edx
c001a0b3:	89 16                	mov    DWORD PTR [esi],edx
c001a0b5:	eb 05                	jmp    c001a0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0b7:	b8 04 00 00 00       	mov    eax,0x4
c001a0bc:	5a                   	pop    edx
c001a0bd:	5b                   	pop    ebx
c001a0be:	5e                   	pop    esi
c001a0bf:	c3                   	ret    

c001a0c0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a0c0:	53                   	push   ebx
c001a0c1:	83 ec 08             	sub    esp,0x8
c001a0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0cc:	85 c0                	test   eax,eax
c001a0ce:	74 2d                	je     c001a0fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a0d0:	85 db                	test   ebx,ebx
c001a0d2:	74 29                	je     c001a0fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a0d4:	52                   	push   edx
c001a0d5:	b9 02 00 00 00       	mov    ecx,0x2
c001a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0de:	99                   	cdq    
c001a0df:	f7 f9                	idiv   ecx
c001a0e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0e5:	83 e8 32             	sub    eax,0x32
c001a0e8:	50                   	push   eax
c001a0e9:	e8 e4 c4 fe ff       	call   c00065d2 <iso_read>
c001a0ee:	83 c4 10             	add    esp,0x10
c001a0f1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0f3:	09 d0                	or     eax,edx
c001a0f5:	0f 94 c0             	sete   al
c001a0f8:	0f b6 c0             	movzx  eax,al
c001a0fb:	eb 05                	jmp    c001a102 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a0fd:	b8 04 00 00 00       	mov    eax,0x4
c001a102:	83 c4 08             	add    esp,0x8
c001a105:	5b                   	pop    ebx
c001a106:	c3                   	ret    
c001a107:	90                   	nop

c001a108 <ISO9660::seek(void*, unsigned long long)>:
c001a108:	57                   	push   edi
c001a109:	b8 04 00 00 00       	mov    eax,0x4
c001a10e:	56                   	push   esi
c001a10f:	51                   	push   ecx
c001a110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a114:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a118:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a11c:	85 d2                	test   edx,edx
c001a11e:	74 26                	je     c001a146 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a120:	89 d0                	mov    eax,edx
c001a122:	b9 02 00 00 00       	mov    ecx,0x2
c001a127:	6a 00                	push   0x0
c001a129:	99                   	cdq    
c001a12a:	f7 f9                	idiv   ecx
c001a12c:	57                   	push   edi
c001a12d:	56                   	push   esi
c001a12e:	83 e8 32             	sub    eax,0x32
c001a131:	50                   	push   eax
c001a132:	e8 b1 c5 fe ff       	call   c00066e8 <iso_seek>
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	31 f0                	xor    eax,esi
c001a13c:	31 fa                	xor    edx,edi
c001a13e:	09 d0                	or     eax,edx
c001a140:	0f 95 c0             	setne  al
c001a143:	0f b6 c0             	movzx  eax,al
c001a146:	5a                   	pop    edx
c001a147:	5e                   	pop    esi
c001a148:	5f                   	pop    edi
c001a149:	c3                   	ret    

c001a14a <ISO9660::tell(void*, unsigned long long*)>:
c001a14a:	53                   	push   ebx
c001a14b:	83 ec 08             	sub    esp,0x8
c001a14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a152:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a156:	85 c0                	test   eax,eax
c001a158:	74 24                	je     c001a17e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a15a:	85 db                	test   ebx,ebx
c001a15c:	74 20                	je     c001a17e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a15e:	b9 02 00 00 00       	mov    ecx,0x2
c001a163:	99                   	cdq    
c001a164:	f7 f9                	idiv   ecx
c001a166:	83 ec 0c             	sub    esp,0xc
c001a169:	83 e8 32             	sub    eax,0x32
c001a16c:	50                   	push   eax
c001a16d:	e8 fa c5 fe ff       	call   c000676c <iso_tell>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	89 03                	mov    DWORD PTR [ebx],eax
c001a177:	31 c0                	xor    eax,eax
c001a179:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a17c:	eb 05                	jmp    c001a183 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a17e:	b8 04 00 00 00       	mov    eax,0x4
c001a183:	83 c4 08             	add    esp,0x8
c001a186:	5b                   	pop    ebx
c001a187:	c3                   	ret    

c001a188 <ISO9660::stat(void*, unsigned long long*)>:
c001a188:	56                   	push   esi
c001a189:	53                   	push   ebx
c001a18a:	83 ec 10             	sub    esp,0x10
c001a18d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a191:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a195:	68 7d 29 02 c0       	push   0xc002297d
c001a19a:	e8 6b 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a19f:	83 c4 10             	add    esp,0x10
c001a1a2:	85 db                	test   ebx,ebx
c001a1a4:	74 2a                	je     c001a1d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1a6:	85 f6                	test   esi,esi
c001a1a8:	74 26                	je     c001a1d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1aa:	89 d8                	mov    eax,ebx
c001a1ac:	b9 02 00 00 00       	mov    ecx,0x2
c001a1b1:	99                   	cdq    
c001a1b2:	83 ec 0c             	sub    esp,0xc
c001a1b5:	f7 f9                	idiv   ecx
c001a1b7:	83 e8 32             	sub    eax,0x32
c001a1ba:	50                   	push   eax
c001a1bb:	e8 dd c5 fe ff       	call   c000679d <iso_total>
c001a1c0:	83 c4 10             	add    esp,0x10
c001a1c3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a1ca:	89 06                	mov    DWORD PTR [esi],eax
c001a1cc:	31 c0                	xor    eax,eax
c001a1ce:	eb 05                	jmp    c001a1d5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a1d0:	b8 04 00 00 00       	mov    eax,0x4
c001a1d5:	5a                   	pop    edx
c001a1d6:	5b                   	pop    ebx
c001a1d7:	5e                   	pop    esi
c001a1d8:	c3                   	ret    
c001a1d9:	90                   	nop

c001a1da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a1da:	55                   	push   ebp
c001a1db:	57                   	push   edi
c001a1dc:	56                   	push   esi
c001a1dd:	53                   	push   ebx
c001a1de:	83 ec 18             	sub    esp,0x18
c001a1e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a1e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a1e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1ed:	68 85 29 02 c0       	push   0xc0022985
c001a1f2:	e8 13 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	85 ff                	test   edi,edi
c001a1fc:	0f 94 c0             	sete   al
c001a1ff:	85 f6                	test   esi,esi
c001a201:	0f 94 c2             	sete   dl
c001a204:	09 d0                	or     eax,edx
c001a206:	a8 01                	test   al,0x1
c001a208:	0f 85 dd 00 00 00    	jne    c001a2eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a20e:	85 db                	test   ebx,ebx
c001a210:	0f 84 d5 00 00 00    	je     c001a2eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a216:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a219:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a21f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a226:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a22d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a22f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a235:	74 1b                	je     c001a252 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a237:	85 c0                	test   eax,eax
c001a239:	74 10                	je     c001a24b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	68 29 29 02 c0       	push   0xc0022929
c001a243:	e8 49 70 ff ff       	call   c0011291 <KePanic(char const*)>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a24d:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a252:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a255:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a25c:	85 c0                	test   eax,eax
c001a25e:	74 09                	je     c001a269 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a260:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a267:	74 51                	je     c001a2ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a269:	83 ec 0c             	sub    esp,0xc
c001a26c:	68 8d 29 02 c0       	push   0xc002298d
c001a271:	e8 94 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a276:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a284:	74 21                	je     c001a2a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a286:	83 ec 0c             	sub    esp,0xc
c001a289:	68 ad 29 02 c0       	push   0xc00229ad
c001a28e:	e8 77 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a293:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a296:	83 c4 10             	add    esp,0x10
c001a299:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2a0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2a7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2ae:	83 ec 0c             	sub    esp,0xc
c001a2b1:	50                   	push   eax
c001a2b2:	e8 b0 c7 fe ff       	call   c0006a67 <init_percd>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	52                   	push   edx
c001a2bb:	83 c3 03             	add    ebx,0x3
c001a2be:	52                   	push   edx
c001a2bf:	6a 00                	push   0x0
c001a2c1:	53                   	push   ebx
c001a2c2:	e8 63 c2 fe ff       	call   c000652a <iso_open>
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a2cd:	89 c5                	mov    ebp,eax
c001a2cf:	75 21                	jne    c001a2f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a2d1:	50                   	push   eax
c001a2d2:	50                   	push   eax
c001a2d3:	6a 01                	push   0x1
c001a2d5:	53                   	push   ebx
c001a2d6:	e8 4f c2 fe ff       	call   c000652a <iso_open>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	ba 02 00 00 00       	mov    edx,0x2
c001a2e3:	40                   	inc    eax
c001a2e4:	74 2b                	je     c001a311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a2e6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a2e9:	eb 24                	jmp    c001a30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a2eb:	ba 04 00 00 00       	mov    edx,0x4
c001a2f0:	eb 1f                	jmp    c001a311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a2f2:	83 ec 0c             	sub    esp,0xc
c001a2f5:	50                   	push   eax
c001a2f6:	e8 a2 c4 fe ff       	call   c000679d <iso_total>
c001a2fb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a302:	89 07                	mov    DWORD PTR [edi],eax
c001a304:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a307:	e8 a8 c2 fe ff       	call   c00065b4 <iso_close>
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	31 d2                	xor    edx,edx
c001a311:	83 c4 0c             	add    esp,0xc
c001a314:	89 d0                	mov    eax,edx
c001a316:	5b                   	pop    ebx
c001a317:	5e                   	pop    esi
c001a318:	5f                   	pop    edi
c001a319:	5d                   	pop    ebp
c001a31a:	c3                   	ret    
c001a31b:	90                   	nop

c001a31c <ISO9660::close(void*)>:
c001a31c:	83 ec 0c             	sub    esp,0xc
c001a31f:	b8 04 00 00 00       	mov    eax,0x4
c001a324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a328:	85 d2                	test   edx,edx
c001a32a:	74 1b                	je     c001a347 <ISO9660::close(void*)+0x2b>
c001a32c:	89 d0                	mov    eax,edx
c001a32e:	b9 02 00 00 00       	mov    ecx,0x2
c001a333:	99                   	cdq    
c001a334:	83 ec 0c             	sub    esp,0xc
c001a337:	f7 f9                	idiv   ecx
c001a339:	83 e8 32             	sub    eax,0x32
c001a33c:	50                   	push   eax
c001a33d:	e8 72 c2 fe ff       	call   c00065b4 <iso_close>
c001a342:	83 c4 10             	add    esp,0x10
c001a345:	31 c0                	xor    eax,eax
c001a347:	83 c4 0c             	add    esp,0xc
c001a34a:	c3                   	ret    
c001a34b:	90                   	nop

c001a34c <ISO9660::openDir(char const*, void**)>:
c001a34c:	56                   	push   esi
c001a34d:	53                   	push   ebx
c001a34e:	50                   	push   eax
c001a34f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a353:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a357:	85 db                	test   ebx,ebx
c001a359:	0f 84 bd 00 00 00    	je     c001a41c <ISO9660::openDir(char const*, void**)+0xd0>
c001a35f:	85 f6                	test   esi,esi
c001a361:	0f 84 b5 00 00 00    	je     c001a41c <ISO9660::openDir(char const*, void**)+0xd0>
c001a367:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a369:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a36f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a376:	74 1b                	je     c001a393 <ISO9660::openDir(char const*, void**)+0x47>
c001a378:	85 c0                	test   eax,eax
c001a37a:	74 10                	je     c001a38c <ISO9660::openDir(char const*, void**)+0x40>
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	68 29 29 02 c0       	push   0xc0022929
c001a384:	e8 08 6f ff ff       	call   c0011291 <KePanic(char const*)>
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a38e:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a393:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a396:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a39d:	85 c0                	test   eax,eax
c001a39f:	74 10                	je     c001a3b1 <ISO9660::openDir(char const*, void**)+0x65>
c001a3a1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a3a8:	74 1a                	je     c001a3c4 <ISO9660::openDir(char const*, void**)+0x78>
c001a3aa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a3b1:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3b8:	83 ec 0c             	sub    esp,0xc
c001a3bb:	50                   	push   eax
c001a3bc:	e8 a6 c6 fe ff       	call   c0006a67 <init_percd>
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	50                   	push   eax
c001a3c5:	83 c3 03             	add    ebx,0x3
c001a3c8:	50                   	push   eax
c001a3c9:	6a 01                	push   0x1
c001a3cb:	53                   	push   ebx
c001a3cc:	e8 59 c1 fe ff       	call   c000652a <iso_open>
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	83 f8 ff             	cmp    eax,0xffffffff
c001a3d7:	89 c3                	mov    ebx,eax
c001a3d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3de:	75 1c                	jne    c001a3fc <ISO9660::openDir(char const*, void**)+0xb0>
c001a3e0:	53                   	push   ebx
c001a3e1:	53                   	push   ebx
c001a3e2:	68 d1 29 02 c0       	push   0xc00229d1
c001a3e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3ed:	e8 ba e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3f2:	83 c4 10             	add    esp,0x10
c001a3f5:	b8 01 00 00 00       	mov    eax,0x1
c001a3fa:	eb 25                	jmp    c001a421 <ISO9660::openDir(char const*, void**)+0xd5>
c001a3fc:	51                   	push   ecx
c001a3fd:	01 db                	add    ebx,ebx
c001a3ff:	51                   	push   ecx
c001a400:	83 c3 65             	add    ebx,0x65
c001a403:	68 e4 29 02 c0       	push   0xc00229e4
c001a408:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a40e:	e8 99 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	31 c0                	xor    eax,eax
c001a418:	89 1e                	mov    DWORD PTR [esi],ebx
c001a41a:	eb 05                	jmp    c001a421 <ISO9660::openDir(char const*, void**)+0xd5>
c001a41c:	b8 04 00 00 00       	mov    eax,0x4
c001a421:	5a                   	pop    edx
c001a422:	5b                   	pop    ebx
c001a423:	5e                   	pop    esi
c001a424:	c3                   	ret    
c001a425:	90                   	nop

c001a426 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a426:	55                   	push   ebp
c001a427:	57                   	push   edi
c001a428:	56                   	push   esi
c001a429:	53                   	push   ebx
c001a42a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a430:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a437:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a43e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a445:	85 db                	test   ebx,ebx
c001a447:	0f 84 e4 00 00 00    	je     c001a531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a44d:	85 ed                	test   ebp,ebp
c001a44f:	0f 84 dc 00 00 00    	je     c001a531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a455:	83 ec 0c             	sub    esp,0xc
c001a458:	68 f7 29 02 c0       	push   0xc00229f7
c001a45d:	e8 a8 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a462:	89 d8                	mov    eax,ebx
c001a464:	b9 02 00 00 00       	mov    ecx,0x2
c001a469:	99                   	cdq    
c001a46a:	f7 f9                	idiv   ecx
c001a46c:	83 e8 32             	sub    eax,0x32
c001a46f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a472:	e8 78 c3 fe ff       	call   c00067ef <iso_readdir>
c001a477:	83 c4 10             	add    esp,0x10
c001a47a:	85 c0                	test   eax,eax
c001a47c:	89 c3                	mov    ebx,eax
c001a47e:	75 38                	jne    c001a4b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a480:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a485:	53                   	push   ebx
c001a486:	53                   	push   ebx
c001a487:	68 02 2a 02 c0       	push   0xc0022a02
c001a48c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a492:	e8 15 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a497:	83 c4 0c             	add    esp,0xc
c001a49a:	68 10 01 00 00       	push   0x110
c001a49f:	6a 00                	push   0x0
c001a4a1:	57                   	push   edi
c001a4a2:	e8 49 60 fe ff       	call   c00004f0 <memset>
c001a4a7:	83 c4 10             	add    esp,0x10
c001a4aa:	b8 01 00 00 00       	mov    eax,0x1
c001a4af:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a4b6:	eb 7e                	jmp    c001a536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a4b8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a4be:	8d 70 08             	lea    esi,[eax+0x8]
c001a4c1:	83 ec 0c             	sub    esp,0xc
c001a4c4:	56                   	push   esi
c001a4c5:	e8 b6 60 fe ff       	call   c0000580 <strlen>
c001a4ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a4d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a4dd:	75 0a                	jne    c001a4e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a4df:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a4e2:	b8 02 00 00 00       	mov    eax,0x2
c001a4e7:	74 05                	je     c001a4ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a4e9:	b8 01 00 00 00       	mov    eax,0x1
c001a4ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4f2:	50                   	push   eax
c001a4f3:	50                   	push   eax
c001a4f4:	56                   	push   esi
c001a4f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a4f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a4fd:	50                   	push   eax
c001a4fe:	e8 4d 61 fe ff       	call   c0000650 <strcpy>
c001a503:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a50a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a50c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a513:	5a                   	pop    edx
c001a514:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a519:	59                   	pop    ecx
c001a51a:	68 15 2a 02 c0       	push   0xc0022a15
c001a51f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a525:	e8 82 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a52a:	83 c4 10             	add    esp,0x10
c001a52d:	31 c0                	xor    eax,eax
c001a52f:	eb 05                	jmp    c001a536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a531:	b8 04 00 00 00       	mov    eax,0x4
c001a536:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a53c:	5b                   	pop    ebx
c001a53d:	5e                   	pop    esi
c001a53e:	5f                   	pop    edi
c001a53f:	5d                   	pop    ebp
c001a540:	c3                   	ret    

c001a541 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a541:	57                   	push   edi
c001a542:	56                   	push   esi
c001a543:	53                   	push   ebx
c001a544:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a548:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a54c:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a552:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a556:	0f be cb             	movsx  ecx,bl
c001a559:	75 0b                	jne    c001a566 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a55b:	0f be 05 40 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023840
c001a562:	39 c8                	cmp    eax,ecx
c001a564:	74 47                	je     c001a5ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a566:	83 ec 0c             	sub    esp,0xc
c001a569:	31 d2                	xor    edx,edx
c001a56b:	68 a0 98 02 c0       	push   0xc00298a0
c001a570:	6a 01                	push   0x1
c001a572:	52                   	push   edx
c001a573:	56                   	push   esi
c001a574:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a57b:	e8 5e 35 ff ff       	call   c000dade <LogicalDisk::read(unsigned long long, int, void*)>
c001a580:	83 c4 20             	add    esp,0x20
c001a583:	85 c0                	test   eax,eax
c001a585:	75 0e                	jne    c001a595 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a587:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a58d:	88 1d 40 38 02 c0    	mov    BYTE PTR ds:0xc0023840,bl
c001a593:	eb 18                	jmp    c001a5ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a595:	50                   	push   eax
c001a596:	68 00 08 00 00       	push   0x800
c001a59b:	6a 00                	push   0x0
c001a59d:	57                   	push   edi
c001a59e:	e8 4d 5f fe ff       	call   c00004f0 <memset>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	b8 01 00 00 00       	mov    eax,0x1
c001a5ab:	eb 0e                	jmp    c001a5bb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a5ad:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a5b2:	b9 00 08 00 00       	mov    ecx,0x800
c001a5b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5b9:	31 c0                	xor    eax,eax
c001a5bb:	5b                   	pop    ebx
c001a5bc:	5e                   	pop    esi
c001a5bd:	5f                   	pop    edi
c001a5be:	c3                   	ret    
c001a5bf:	90                   	nop

c001a5c0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a5c0:	53                   	push   ebx
c001a5c1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a5c7:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a5d1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a5d8:	8d 58 41             	lea    ebx,[eax+0x41]
c001a5db:	0f be db             	movsx  ebx,bl
c001a5de:	53                   	push   ebx
c001a5df:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5e3:	50                   	push   eax
c001a5e4:	6a 10                	push   0x10
c001a5e6:	e8 56 ff ff ff       	call   c001a541 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a5eb:	83 c4 10             	add    esp,0x10
c001a5ee:	31 d2                	xor    edx,edx
c001a5f0:	85 c0                	test   eax,eax
c001a5f2:	75 33                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5f4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a5f9:	75 2c                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5fb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a600:	75 25                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a602:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a607:	75 1e                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a609:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a60e:	75 17                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a610:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a615:	75 10                	jne    c001a627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a617:	83 ec 0c             	sub    esp,0xc
c001a61a:	53                   	push   ebx
c001a61b:	e8 47 c4 fe ff       	call   c0006a67 <init_percd>
c001a620:	83 c4 10             	add    esp,0x10
c001a623:	40                   	inc    eax
c001a624:	0f 95 c2             	setne  dl
c001a627:	81 c4 08 08 00 00    	add    esp,0x808
c001a62d:	88 d0                	mov    al,dl
c001a62f:	5b                   	pop    ebx
c001a630:	c3                   	ret    
c001a631:	90                   	nop

c001a632 <ISO9660::ISO9660()>:
c001a632:	83 ec 0c             	sub    esp,0xc
c001a635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a639:	83 ec 0c             	sub    esp,0xc
c001a63c:	50                   	push   eax
c001a63d:	e8 c0 0e ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001a642:	83 c4 10             	add    esp,0x10
c001a645:	ba 30 2a 02 c0       	mov    edx,0xc0022a30
c001a64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a64e:	89 10                	mov    DWORD PTR [eax],edx
c001a650:	e8 24 c5 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a655:	90                   	nop
c001a656:	83 c4 0c             	add    esp,0xc
c001a659:	c3                   	ret    

c001a65a <SoundCard::beginPlayback()>:
c001a65a:	c7 44 24 04 94 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a94
c001a662:	e9 2a 6c ff ff       	jmp    c0011291 <KePanic(char const*)>
c001a667:	90                   	nop

c001a668 <SoundCard::stopPlayback()>:
c001a668:	c7 44 24 04 94 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a94
c001a670:	e9 1c 6c ff ff       	jmp    c0011291 <KePanic(char const*)>
c001a675:	90                   	nop

c001a676 <SoundCard::SoundCard(char const*)>:
c001a676:	83 ec 1c             	sub    esp,0x1c
c001a679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a67d:	83 ec 08             	sub    esp,0x8
c001a680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a684:	50                   	push   eax
c001a685:	e8 02 22 ff ff       	call   c000c88c <Device::Device(char const*)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	ba e0 2a 02 c0       	mov    edx,0xc0022ae0
c001a692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a696:	89 10                	mov    DWORD PTR [eax],edx
c001a698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a69c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6b5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6c3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a6db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6e3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a6e8:	7f 1a                	jg     c001a704 <SoundCard::SoundCard(char const*)+0x8e>
c001a6ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6f2:	83 c2 54             	add    edx,0x54
c001a6f5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a6fd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a702:	eb df                	jmp    c001a6e3 <SoundCard::SoundCard(char const*)+0x6d>
c001a704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a708:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a70f:	90                   	nop
c001a710:	83 c4 1c             	add    esp,0x1c
c001a713:	c3                   	ret    

c001a714 <SoundCard::~SoundCard()>:
c001a714:	83 ec 0c             	sub    esp,0xc
c001a717:	ba e0 2a 02 c0       	mov    edx,0xc0022ae0
c001a71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a720:	89 10                	mov    DWORD PTR [eax],edx
c001a722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a726:	83 ec 0c             	sub    esp,0xc
c001a729:	50                   	push   eax
c001a72a:	e8 c7 1e ff ff       	call   c000c5f6 <Device::~Device()>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	90                   	nop
c001a733:	83 c4 0c             	add    esp,0xc
c001a736:	c3                   	ret    
c001a737:	90                   	nop

c001a738 <SoundCard::~SoundCard()>:
c001a738:	83 ec 0c             	sub    esp,0xc
c001a73b:	83 ec 0c             	sub    esp,0xc
c001a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a742:	e8 cd ff ff ff       	call   c001a714 <SoundCard::~SoundCard()>
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	83 ec 08             	sub    esp,0x8
c001a74d:	68 e8 01 00 00       	push   0x1e8
c001a752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a756:	e8 b1 00 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	83 c4 0c             	add    esp,0xc
c001a761:	c3                   	ret    

c001a762 <SoundCard::configureRates(int, int, int)>:
c001a762:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a766:	31 c0                	xor    eax,eax
c001a768:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a76f:	75 20                	jne    c001a791 <SoundCard::configureRates(int, int, int)+0x2f>
c001a771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a775:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a77b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a77f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a789:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a78f:	b0 01                	mov    al,0x1
c001a791:	c3                   	ret    

c001a792 <SoundCard::getSamples16(int, short*)>:
c001a792:	55                   	push   ebp
c001a793:	57                   	push   edi
c001a794:	31 ff                	xor    edi,edi
c001a796:	56                   	push   esi
c001a797:	53                   	push   ebx
c001a798:	31 db                	xor    ebx,ebx
c001a79a:	83 ec 10             	sub    esp,0x10
c001a79d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a7a1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7a5:	8d 04 36             	lea    eax,[esi+esi*1]
c001a7a8:	50                   	push   eax
c001a7a9:	6a 00                	push   0x0
c001a7ab:	55                   	push   ebp
c001a7ac:	e8 3f 5d fe ff       	call   c00004f0 <memset>
c001a7b1:	83 c4 10             	add    esp,0x10
c001a7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7b8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a7bf:	85 c0                	test   eax,eax
c001a7c1:	74 1a                	je     c001a7dd <SoundCard::getSamples16(int, short*)+0x4b>
c001a7c3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a7c7:	75 14                	jne    c001a7dd <SoundCard::getSamples16(int, short*)+0x4b>
c001a7c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7cd:	55                   	push   ebp
c001a7ce:	56                   	push   esi
c001a7cf:	50                   	push   eax
c001a7d0:	e8 f3 02 00 00       	call   c001aac8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a7d5:	83 c4 10             	add    esp,0x10
c001a7d8:	39 c3                	cmp    ebx,eax
c001a7da:	0f 4c d8             	cmovl  ebx,eax
c001a7dd:	47                   	inc    edi
c001a7de:	83 ff 20             	cmp    edi,0x20
c001a7e1:	75 d1                	jne    c001a7b4 <SoundCard::getSamples16(int, short*)+0x22>
c001a7e3:	83 c4 0c             	add    esp,0xc
c001a7e6:	89 d8                	mov    eax,ebx
c001a7e8:	5b                   	pop    ebx
c001a7e9:	5e                   	pop    esi
c001a7ea:	5f                   	pop    edi
c001a7eb:	5d                   	pop    ebp
c001a7ec:	c3                   	ret    
c001a7ed:	90                   	nop

c001a7ee <SoundCard::getSamples32(int, int*)>:
c001a7ee:	55                   	push   ebp
c001a7ef:	57                   	push   edi
c001a7f0:	31 ff                	xor    edi,edi
c001a7f2:	56                   	push   esi
c001a7f3:	31 f6                	xor    esi,esi
c001a7f5:	53                   	push   ebx
c001a7f6:	83 ec 10             	sub    esp,0x10
c001a7f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7fd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a801:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a805:	c1 e0 02             	shl    eax,0x2
c001a808:	50                   	push   eax
c001a809:	6a 00                	push   0x0
c001a80b:	55                   	push   ebp
c001a80c:	e8 df 5c fe ff       	call   c00004f0 <memset>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a81b:	85 c0                	test   eax,eax
c001a81d:	74 1a                	je     c001a839 <SoundCard::getSamples32(int, int*)+0x4b>
c001a81f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a823:	75 14                	jne    c001a839 <SoundCard::getSamples32(int, int*)+0x4b>
c001a825:	53                   	push   ebx
c001a826:	55                   	push   ebp
c001a827:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a82b:	50                   	push   eax
c001a82c:	e8 67 03 00 00       	call   c001ab98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	39 c6                	cmp    esi,eax
c001a836:	0f 4c f0             	cmovl  esi,eax
c001a839:	47                   	inc    edi
c001a83a:	83 ff 20             	cmp    edi,0x20
c001a83d:	75 d5                	jne    c001a814 <SoundCard::getSamples32(int, int*)+0x26>
c001a83f:	85 f6                	test   esi,esi
c001a841:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a848:	75 0f                	jne    c001a859 <SoundCard::getSamples32(int, int*)+0x6b>
c001a84a:	85 c0                	test   eax,eax
c001a84c:	74 1b                	je     c001a869 <SoundCard::getSamples32(int, int*)+0x7b>
c001a84e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a850:	83 ec 0c             	sub    esp,0xc
c001a853:	53                   	push   ebx
c001a854:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a857:	eb 0d                	jmp    c001a866 <SoundCard::getSamples32(int, int*)+0x78>
c001a859:	85 c0                	test   eax,eax
c001a85b:	75 0c                	jne    c001a869 <SoundCard::getSamples32(int, int*)+0x7b>
c001a85d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a85f:	83 ec 0c             	sub    esp,0xc
c001a862:	53                   	push   ebx
c001a863:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a866:	83 c4 10             	add    esp,0x10
c001a869:	83 c4 0c             	add    esp,0xc
c001a86c:	89 f0                	mov    eax,esi
c001a86e:	5b                   	pop    ebx
c001a86f:	5e                   	pop    esi
c001a870:	5f                   	pop    edi
c001a871:	5d                   	pop    ebp
c001a872:	c3                   	ret    
c001a873:	90                   	nop

c001a874 <SoundCard::addChannel(SoundPort*)>:
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	31 c0                	xor    eax,eax
c001a879:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a87d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a885:	74 1b                	je     c001a8a2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a887:	40                   	inc    eax
c001a888:	83 f8 20             	cmp    eax,0x20
c001a88b:	75 f0                	jne    c001a87d <SoundCard::addChannel(SoundPort*)+0x9>
c001a88d:	83 ec 0c             	sub    esp,0xc
c001a890:	68 b9 2a 02 c0       	push   0xc0022ab9
c001a895:	e8 f7 69 ff ff       	call   c0011291 <KePanic(char const*)>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	83 c8 ff             	or     eax,0xffffffff
c001a8a0:	eb 0b                	jmp    c001a8ad <SoundCard::addChannel(SoundPort*)+0x39>
c001a8a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8a6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a8ad:	83 c4 0c             	add    esp,0xc
c001a8b0:	c3                   	ret    
c001a8b1:	90                   	nop

c001a8b2 <SoundCard::removeChannel(int)>:
c001a8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8ba:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a8c5:	c3                   	ret    
c001a8c6:	66 90                	xchg   ax,ax

c001a8c8 <SoundPort::SoundPort(int, int, int, int)>:
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8e6:	89 10                	mov    DWORD PTR [eax],edx
c001a8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a8fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a903:	75 13                	jne    c001a918 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a909:	8b 00                	mov    eax,DWORD PTR [eax]
c001a90b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a910:	d1 e0                	shl    eax,1
c001a912:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a916:	66 90                	xchg   ax,ax
c001a918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a920:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a927:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a932:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a935:	c1 e0 02             	shl    eax,0x2
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	50                   	push   eax
c001a93c:	e8 92 d1 fe ff       	call   c0007ad3 <malloc>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	89 c2                	mov    edx,eax
c001a946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a94d:	90                   	nop
c001a94e:	83 c4 0c             	add    esp,0xc
c001a951:	c3                   	ret    
c001a952:	66 90                	xchg   ax,ax

c001a954 <SoundPort::~SoundPort()>:
c001a954:	83 ec 0c             	sub    esp,0xc
c001a957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a95e:	85 c0                	test   eax,eax
c001a960:	74 1e                	je     c001a980 <SoundPort::~SoundPort()+0x2c>
c001a962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a966:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a969:	83 ec 0c             	sub    esp,0xc
c001a96c:	50                   	push   eax
c001a96d:	e8 71 d1 fe ff       	call   c0007ae3 <free>
c001a972:	83 c4 10             	add    esp,0x10
c001a975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a979:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a980:	90                   	nop
c001a981:	83 c4 0c             	add    esp,0xc
c001a984:	c3                   	ret    
c001a985:	90                   	nop
c001a986:	66 90                	xchg   ax,ax

c001a988 <SoundPort::unpause()>:
c001a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a98c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a990:	c3                   	ret    
c001a991:	90                   	nop
c001a992:	66 90                	xchg   ax,ax

c001a994 <SoundPort::pause()>:
c001a994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a998:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a99c:	c3                   	ret    
c001a99d:	90                   	nop
c001a99e:	66 90                	xchg   ax,ax

c001a9a0 <SoundPort::getBufferUsed()>:
c001a9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9a7:	c3                   	ret    

c001a9a8 <SoundPort::getBufferSize()>:
c001a9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9af:	c3                   	ret    

c001a9b0 <SoundPort::buffer16(short*, int)>:
c001a9b0:	55                   	push   ebp
c001a9b1:	57                   	push   edi
c001a9b2:	56                   	push   esi
c001a9b3:	53                   	push   ebx
c001a9b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a9bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a9bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a9c2:	74 68                	je     c001aa2c <SoundPort::buffer16(short*, int)+0x7c>
c001a9c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a9c8:	85 c9                	test   ecx,ecx
c001a9ca:	7e 60                	jle    c001aa2c <SoundPort::buffer16(short*, int)+0x7c>
c001a9cc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a9d0:	8d 70 01             	lea    esi,[eax+0x1]
c001a9d3:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a9d6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a9d9:	c1 e1 0f             	shl    ecx,0xf
c001a9dc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a9df:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9e2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9e5:	74 4d                	je     c001aa34 <SoundPort::buffer16(short*, int)+0x84>
c001a9e7:	31 f6                	xor    esi,esi
c001a9e9:	eb 21                	jmp    c001aa0c <SoundPort::buffer16(short*, int)+0x5c>
c001a9eb:	90                   	nop
c001a9ec:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a9f1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a9f4:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a9f7:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a9fa:	c1 e3 0f             	shl    ebx,0xf
c001a9fd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa03:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa06:	74 1c                	je     c001aa24 <SoundPort::buffer16(short*, int)+0x74>
c001aa08:	89 c6                	mov    esi,eax
c001aa0a:	66 90                	xchg   ax,ax
c001aa0c:	8d 46 01             	lea    eax,[esi+0x1]
c001aa0f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa13:	75 d7                	jne    c001a9ec <SoundPort::buffer16(short*, int)+0x3c>
c001aa15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa19:	8d 76 00             	lea    esi,[esi+0x0]
c001aa1c:	5b                   	pop    ebx
c001aa1d:	5e                   	pop    esi
c001aa1e:	5f                   	pop    edi
c001aa1f:	5d                   	pop    ebp
c001aa20:	c3                   	ret    
c001aa21:	8d 76 00             	lea    esi,[esi+0x0]
c001aa24:	5b                   	pop    ebx
c001aa25:	8d 46 02             	lea    eax,[esi+0x2]
c001aa28:	5e                   	pop    esi
c001aa29:	5f                   	pop    edi
c001aa2a:	5d                   	pop    ebp
c001aa2b:	c3                   	ret    
c001aa2c:	5b                   	pop    ebx
c001aa2d:	31 c0                	xor    eax,eax
c001aa2f:	5e                   	pop    esi
c001aa30:	5f                   	pop    edi
c001aa31:	5d                   	pop    ebp
c001aa32:	c3                   	ret    
c001aa33:	90                   	nop
c001aa34:	b8 01 00 00 00       	mov    eax,0x1
c001aa39:	eb e1                	jmp    c001aa1c <SoundPort::buffer16(short*, int)+0x6c>
c001aa3b:	90                   	nop

c001aa3c <SoundPort::buffer32(int*, int)>:
c001aa3c:	55                   	push   ebp
c001aa3d:	57                   	push   edi
c001aa3e:	56                   	push   esi
c001aa3f:	53                   	push   ebx
c001aa40:	83 ec 04             	sub    esp,0x4
c001aa43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aa4f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa52:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa55:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa58:	74 5a                	je     c001aab4 <SoundPort::buffer32(int*, int)+0x78>
c001aa5a:	85 c0                	test   eax,eax
c001aa5c:	7e 56                	jle    c001aab4 <SoundPort::buffer32(int*, int)+0x78>
c001aa5e:	8d 71 01             	lea    esi,[ecx+0x1]
c001aa61:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa64:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa67:	8b 37                	mov    esi,DWORD PTR [edi]
c001aa69:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aa6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa6f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa72:	74 4c                	je     c001aac0 <SoundPort::buffer32(int*, int)+0x84>
c001aa74:	31 f6                	xor    esi,esi
c001aa76:	eb 1c                	jmp    c001aa94 <SoundPort::buffer32(int*, int)+0x58>
c001aa78:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aa7b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aa7e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aa81:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aa84:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aa88:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa8b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa8e:	74 18                	je     c001aaa8 <SoundPort::buffer32(int*, int)+0x6c>
c001aa90:	89 de                	mov    esi,ebx
c001aa92:	66 90                	xchg   ax,ax
c001aa94:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aa97:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aa9a:	75 dc                	jne    c001aa78 <SoundPort::buffer32(int*, int)+0x3c>
c001aa9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa9f:	90                   	nop
c001aaa0:	83 c4 04             	add    esp,0x4
c001aaa3:	5b                   	pop    ebx
c001aaa4:	5e                   	pop    esi
c001aaa5:	5f                   	pop    edi
c001aaa6:	5d                   	pop    ebp
c001aaa7:	c3                   	ret    
c001aaa8:	8d 46 02             	lea    eax,[esi+0x2]
c001aaab:	83 c4 04             	add    esp,0x4
c001aaae:	5b                   	pop    ebx
c001aaaf:	5e                   	pop    esi
c001aab0:	5f                   	pop    edi
c001aab1:	5d                   	pop    ebp
c001aab2:	c3                   	ret    
c001aab3:	90                   	nop
c001aab4:	83 c4 04             	add    esp,0x4
c001aab7:	31 c0                	xor    eax,eax
c001aab9:	5b                   	pop    ebx
c001aaba:	5e                   	pop    esi
c001aabb:	5f                   	pop    edi
c001aabc:	5d                   	pop    ebp
c001aabd:	c3                   	ret    
c001aabe:	66 90                	xchg   ax,ax
c001aac0:	b8 01 00 00 00       	mov    eax,0x1
c001aac5:	eb d9                	jmp    c001aaa0 <SoundPort::buffer32(int*, int)+0x64>
c001aac7:	90                   	nop

c001aac8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aac8:	55                   	push   ebp
c001aac9:	57                   	push   edi
c001aaca:	56                   	push   esi
c001aacb:	53                   	push   ebx
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aad3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aad7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aadb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aadf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aae5:	39 03                	cmp    DWORD PTR [ebx],eax
c001aae7:	74 13                	je     c001aafc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	68 0c 2b 02 c0       	push   0xc0022b0c
c001aaf1:	e8 9b 67 ff ff       	call   c0011291 <KePanic(char const*)>
c001aaf6:	83 c4 10             	add    esp,0x10
c001aaf9:	8d 76 00             	lea    esi,[esi+0x0]
c001aafc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab02:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab05:	74 11                	je     c001ab18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ab07:	83 ec 0c             	sub    esp,0xc
c001ab0a:	68 4b 2b 02 c0       	push   0xc0022b4b
c001ab0f:	e8 7d 67 ff ff       	call   c0011291 <KePanic(char const*)>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	90                   	nop
c001ab18:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab1e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab21:	74 11                	je     c001ab34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ab23:	83 ec 0c             	sub    esp,0xc
c001ab26:	68 4b 2b 02 c0       	push   0xc0022b4b
c001ab2b:	e8 61 67 ff ff       	call   c0011291 <KePanic(char const*)>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	90                   	nop
c001ab34:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ab37:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ab3b:	85 f6                	test   esi,esi
c001ab3d:	7e 2d                	jle    c001ab6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ab3f:	31 c0                	xor    eax,eax
c001ab41:	8d 76 00             	lea    esi,[esi+0x0]
c001ab44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab47:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ab4a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ab50:	85 c9                	test   ecx,ecx
c001ab52:	0f 49 d1             	cmovns edx,ecx
c001ab55:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ab59:	c1 fa 0f             	sar    edx,0xf
c001ab5c:	01 d1                	add    ecx,edx
c001ab5e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ab62:	83 c0 01             	add    eax,0x1
c001ab65:	39 f0                	cmp    eax,esi
c001ab67:	75 db                	jne    c001ab44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ab69:	8d 76 00             	lea    esi,[esi+0x0]
c001ab6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab6f:	83 ec 04             	sub    esp,0x4
c001ab72:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab75:	29 f0                	sub    eax,esi
c001ab77:	c1 e0 02             	shl    eax,0x2
c001ab7a:	50                   	push   eax
c001ab7b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ab7e:	50                   	push   eax
c001ab7f:	52                   	push   edx
c001ab80:	e8 4b 58 fe ff       	call   c00003d0 <memmove>
c001ab85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab88:	29 f0                	sub    eax,esi
c001ab8a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab8d:	83 c4 1c             	add    esp,0x1c
c001ab90:	89 f0                	mov    eax,esi
c001ab92:	5b                   	pop    ebx
c001ab93:	5e                   	pop    esi
c001ab94:	5f                   	pop    edi
c001ab95:	5d                   	pop    ebp
c001ab96:	c3                   	ret    
c001ab97:	90                   	nop

c001ab98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ab98:	55                   	push   ebp
c001ab99:	57                   	push   edi
c001ab9a:	56                   	push   esi
c001ab9b:	53                   	push   ebx
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aba3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aba7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001abab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001abaf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001abb5:	39 03                	cmp    DWORD PTR [ebx],eax
c001abb7:	74 13                	je     c001abcc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001abb9:	83 ec 0c             	sub    esp,0xc
c001abbc:	68 2c 2b 02 c0       	push   0xc0022b2c
c001abc1:	e8 cb 66 ff ff       	call   c0011291 <KePanic(char const*)>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	8d 76 00             	lea    esi,[esi+0x0]
c001abcc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001abd2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001abd5:	74 11                	je     c001abe8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001abd7:	83 ec 0c             	sub    esp,0xc
c001abda:	68 67 2b 02 c0       	push   0xc0022b67
c001abdf:	e8 ad 66 ff ff       	call   c0011291 <KePanic(char const*)>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	90                   	nop
c001abe8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001abee:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001abf1:	74 11                	je     c001ac04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001abf3:	83 ec 0c             	sub    esp,0xc
c001abf6:	68 67 2b 02 c0       	push   0xc0022b67
c001abfb:	e8 91 66 ff ff       	call   c0011291 <KePanic(char const*)>
c001ac00:	83 c4 10             	add    esp,0x10
c001ac03:	90                   	nop
c001ac04:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ac07:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ac0b:	85 ff                	test   edi,edi
c001ac0d:	7e 21                	jle    c001ac30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ac0f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac16:	31 c0                	xor    eax,eax
c001ac18:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac1b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ac1e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac21:	01 d5                	add    ebp,edx
c001ac23:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ac26:	83 c0 04             	add    eax,0x4
c001ac29:	39 c1                	cmp    ecx,eax
c001ac2b:	75 eb                	jne    c001ac18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ac2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac33:	83 ec 04             	sub    esp,0x4
c001ac36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac39:	29 f8                	sub    eax,edi
c001ac3b:	c1 e0 02             	shl    eax,0x2
c001ac3e:	50                   	push   eax
c001ac3f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac42:	50                   	push   eax
c001ac43:	52                   	push   edx
c001ac44:	e8 87 57 fe ff       	call   c00003d0 <memmove>
c001ac49:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac4c:	29 f8                	sub    eax,edi
c001ac4e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac51:	83 c4 1c             	add    esp,0x1c
c001ac54:	89 f8                	mov    eax,edi
c001ac56:	5b                   	pop    ebx
c001ac57:	5e                   	pop    esi
c001ac58:	5f                   	pop    edi
c001ac59:	5d                   	pop    ebp
c001ac5a:	c3                   	ret    
c001ac5b:	90                   	nop

c001ac5c <PCI::open(int, int, void*)>:
c001ac5c:	83 ec 18             	sub    esp,0x18
c001ac5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ac6d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac6f:	50                   	push   eax
c001ac70:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ac73:	31 c0                	xor    eax,eax
c001ac75:	83 c4 1c             	add    esp,0x1c
c001ac78:	c3                   	ret    
c001ac79:	90                   	nop

c001ac7a <PCI::close(int, int, void*)>:
c001ac7a:	31 c0                	xor    eax,eax
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <PCI::PCI()>:
c001ac7e:	83 ec 0c             	sub    esp,0xc
c001ac81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac85:	83 ec 08             	sub    esp,0x8
c001ac88:	68 83 2b 02 c0       	push   0xc0022b83
c001ac8d:	50                   	push   eax
c001ac8e:	e8 bd 13 ff ff       	call   c000c050 <Bus::Bus(char const*)>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	ba 2c 2c 02 c0       	mov    edx,0xc0022c2c
c001ac9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9f:	89 10                	mov    DWORD PTR [eax],edx
c001aca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001acaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb3:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001acb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acc2:	0f b6 d0             	movzx  edx,al
c001acc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001acd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acda:	0f b6 d0             	movzx  edx,al
c001acdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ace6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acf0:	8d 50 01             	lea    edx,[eax+0x1]
c001acf3:	88 d1                	mov    cl,dl
c001acf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acf9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001acff:	0f b6 d0             	movzx  edx,al
c001ad02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad0a:	83 c9 c0             	or     ecx,0xffffffc0
c001ad0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad11:	90                   	nop
c001ad12:	83 c4 0c             	add    esp,0xc
c001ad15:	c3                   	ret    

c001ad16 <PCI::readBAR8(unsigned int, int)>:
c001ad16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad1e:	f6 c2 01             	test   dl,0x1
c001ad21:	74 07                	je     c001ad2a <PCI::readBAR8(unsigned int, int)+0x14>
c001ad23:	83 e2 fc             	and    edx,0xfffffffc
c001ad26:	01 c2                	add    edx,eax
c001ad28:	ec                   	in     al,dx
c001ad29:	c3                   	ret    
c001ad2a:	83 e2 f0             	and    edx,0xfffffff0
c001ad2d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ad30:	c3                   	ret    
c001ad31:	90                   	nop

c001ad32 <PCI::readBAR16(unsigned int, int)>:
c001ad32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad3a:	f6 c2 01             	test   dl,0x1
c001ad3d:	74 08                	je     c001ad47 <PCI::readBAR16(unsigned int, int)+0x15>
c001ad3f:	83 e2 fc             	and    edx,0xfffffffc
c001ad42:	01 c2                	add    edx,eax
c001ad44:	66 ed                	in     ax,dx
c001ad46:	c3                   	ret    
c001ad47:	83 e2 f0             	and    edx,0xfffffff0
c001ad4a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ad4e:	c3                   	ret    
c001ad4f:	90                   	nop

c001ad50 <PCI::readBAR32(unsigned int, int)>:
c001ad50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad58:	f6 c2 01             	test   dl,0x1
c001ad5b:	74 07                	je     c001ad64 <PCI::readBAR32(unsigned int, int)+0x14>
c001ad5d:	83 e2 fc             	and    edx,0xfffffffc
c001ad60:	01 c2                	add    edx,eax
c001ad62:	ed                   	in     eax,dx
c001ad63:	c3                   	ret    
c001ad64:	83 e2 f0             	and    edx,0xfffffff0
c001ad67:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ad6a:	c3                   	ret    
c001ad6b:	90                   	nop

c001ad6c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ad6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad78:	f6 c2 01             	test   dl,0x1
c001ad7b:	74 07                	je     c001ad84 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ad7d:	83 e2 fc             	and    edx,0xfffffffc
c001ad80:	01 ca                	add    edx,ecx
c001ad82:	ee                   	out    dx,al
c001ad83:	c3                   	ret    
c001ad84:	83 e2 f0             	and    edx,0xfffffff0
c001ad87:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ad8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad98:	f6 c2 01             	test   dl,0x1
c001ad9b:	74 08                	je     c001ada5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ad9d:	83 e2 fc             	and    edx,0xfffffffc
c001ada0:	01 ca                	add    edx,ecx
c001ada2:	66 ef                	out    dx,ax
c001ada4:	c3                   	ret    
c001ada5:	83 e2 f0             	and    edx,0xfffffff0
c001ada8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001adae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adba:	f6 c2 01             	test   dl,0x1
c001adbd:	74 07                	je     c001adc6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001adbf:	83 e2 fc             	and    edx,0xfffffffc
c001adc2:	01 ca                	add    edx,ecx
c001adc4:	ef                   	out    dx,eax
c001adc5:	c3                   	ret    
c001adc6:	83 e2 f0             	and    edx,0xfffffff0
c001adc9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001adcc:	c3                   	ret    
c001adcd:	90                   	nop

c001adce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001adce:	55                   	push   ebp
c001adcf:	57                   	push   edi
c001add0:	56                   	push   esi
c001add1:	53                   	push   ebx
c001add2:	83 ec 0c             	sub    esp,0xc
c001add5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001adda:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001adde:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ade2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ade6:	83 fe 07             	cmp    esi,0x7
c001ade9:	76 10                	jbe    c001adfb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001adeb:	83 ec 0c             	sub    esp,0xc
c001adee:	68 8b 2b 02 c0       	push   0xc0022b8b
c001adf3:	e8 99 64 ff ff       	call   c0011291 <KePanic(char const*)>
c001adf8:	83 c4 10             	add    esp,0x10
c001adfb:	0f b6 db             	movzx  ebx,bl
c001adfe:	83 fb 0f             	cmp    ebx,0xf
c001ae01:	76 10                	jbe    c001ae13 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae03:	83 ec 0c             	sub    esp,0xc
c001ae06:	68 bb 2b 02 c0       	push   0xc0022bbb
c001ae0b:	e8 81 64 ff ff       	call   c0011291 <KePanic(char const*)>
c001ae10:	83 c4 10             	add    esp,0x10
c001ae13:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae16:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae1b:	83 c8 f0             	or     eax,0xfffffff0
c001ae1e:	ee                   	out    dx,al
c001ae1f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae24:	89 e8                	mov    eax,ebp
c001ae26:	ee                   	out    dx,al
c001ae27:	89 f9                	mov    ecx,edi
c001ae29:	89 d8                	mov    eax,ebx
c001ae2b:	0f b6 d9             	movzx  ebx,cl
c001ae2e:	83 c4 0c             	add    esp,0xc
c001ae31:	c1 e0 08             	shl    eax,0x8
c001ae34:	83 e3 fc             	and    ebx,0xfffffffc
c001ae37:	09 d8                	or     eax,ebx
c001ae39:	5b                   	pop    ebx
c001ae3a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ae3f:	5e                   	pop    esi
c001ae40:	5f                   	pop    edi
c001ae41:	5d                   	pop    ebp
c001ae42:	c3                   	ret    
c001ae43:	90                   	nop

c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae44:	57                   	push   edi
c001ae45:	56                   	push   esi
c001ae46:	53                   	push   ebx
c001ae47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae53:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae57:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ae5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae61:	83 ff 01             	cmp    edi,0x1
c001ae64:	75 3f                	jne    c001aea5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ae66:	89 de                	mov    esi,ebx
c001ae68:	0f b6 c0             	movzx  eax,al
c001ae6b:	c1 e0 10             	shl    eax,0x10
c001ae6e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ae74:	0f b6 c9             	movzx  ecx,cl
c001ae77:	09 f0                	or     eax,esi
c001ae79:	c1 e1 08             	shl    ecx,0x8
c001ae7c:	0f b6 d2             	movzx  edx,dl
c001ae7f:	c1 e2 0b             	shl    edx,0xb
c001ae82:	09 c8                	or     eax,ecx
c001ae84:	09 d0                	or     eax,edx
c001ae86:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae8b:	0d 00 00 00 80       	or     eax,0x80000000
c001ae90:	ef                   	out    dx,eax
c001ae91:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae96:	ed                   	in     eax,dx
c001ae97:	83 e3 02             	and    ebx,0x2
c001ae9a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aea1:	d3 e8                	shr    eax,cl
c001aea3:	eb 44                	jmp    c001aee9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aea5:	83 ff 02             	cmp    edi,0x2
c001aea8:	75 2d                	jne    c001aed7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001aeaa:	83 ec 0c             	sub    esp,0xc
c001aead:	0f b6 fb             	movzx  edi,bl
c001aeb0:	57                   	push   edi
c001aeb1:	0f b6 c9             	movzx  ecx,cl
c001aeb4:	51                   	push   ecx
c001aeb5:	0f b6 d2             	movzx  edx,dl
c001aeb8:	52                   	push   edx
c001aeb9:	0f b6 c0             	movzx  eax,al
c001aebc:	50                   	push   eax
c001aebd:	56                   	push   esi
c001aebe:	e8 0b ff ff ff       	call   c001adce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec3:	89 c2                	mov    edx,eax
c001aec5:	ed                   	in     eax,dx
c001aec6:	83 e3 02             	and    ebx,0x2
c001aec9:	83 c4 20             	add    esp,0x20
c001aecc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aed3:	d3 e8                	shr    eax,cl
c001aed5:	eb 12                	jmp    c001aee9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aed7:	83 ec 0c             	sub    esp,0xc
c001aeda:	68 eb 2b 02 c0       	push   0xc0022beb
c001aedf:	e8 ad 63 ff ff       	call   c0011291 <KePanic(char const*)>
c001aee4:	83 c4 10             	add    esp,0x10
c001aee7:	31 c0                	xor    eax,eax
c001aee9:	5b                   	pop    ebx
c001aeea:	5e                   	pop    esi
c001aeeb:	5f                   	pop    edi
c001aeec:	c3                   	ret    
c001aeed:	90                   	nop

c001aeee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aeee:	83 ec 18             	sub    esp,0x18
c001aef1:	6a 00                	push   0x0
c001aef3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aef8:	50                   	push   eax
c001aef9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aefe:	50                   	push   eax
c001aeff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af04:	50                   	push   eax
c001af05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af09:	e8 36 ff ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af0e:	83 c4 2c             	add    esp,0x2c
c001af11:	c3                   	ret    

c001af12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af12:	83 ec 18             	sub    esp,0x18
c001af15:	6a 0e                	push   0xe
c001af17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af1c:	50                   	push   eax
c001af1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af22:	50                   	push   eax
c001af23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af28:	50                   	push   eax
c001af29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af2d:	e8 12 ff ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af32:	83 c4 2c             	add    esp,0x2c
c001af35:	0f b6 c0             	movzx  eax,al
c001af38:	c3                   	ret    
c001af39:	90                   	nop

c001af3a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af3a:	55                   	push   ebp
c001af3b:	57                   	push   edi
c001af3c:	56                   	push   esi
c001af3d:	53                   	push   ebx
c001af3e:	83 ec 18             	sub    esp,0x18
c001af41:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001af46:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001af4b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001af50:	6a 0a                	push   0xa
c001af52:	56                   	push   esi
c001af53:	55                   	push   ebp
c001af54:	57                   	push   edi
c001af55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af59:	e8 e6 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5e:	83 c4 14             	add    esp,0x14
c001af61:	6a 0a                	push   0xa
c001af63:	56                   	push   esi
c001af64:	55                   	push   ebp
c001af65:	57                   	push   edi
c001af66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af6a:	89 c3                	mov    ebx,eax
c001af6c:	0f b6 db             	movzx  ebx,bl
c001af6f:	e8 d0 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af74:	83 c4 2c             	add    esp,0x2c
c001af77:	25 00 ff 00 00       	and    eax,0xff00
c001af7c:	09 d8                	or     eax,ebx
c001af7e:	5b                   	pop    ebx
c001af7f:	5e                   	pop    esi
c001af80:	5f                   	pop    edi
c001af81:	5d                   	pop    ebp
c001af82:	c3                   	ret    
c001af83:	90                   	nop

c001af84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af84:	83 ec 18             	sub    esp,0x18
c001af87:	6a 08                	push   0x8
c001af89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af8e:	50                   	push   eax
c001af8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af94:	50                   	push   eax
c001af95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af9a:	50                   	push   eax
c001af9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af9f:	e8 a0 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afa4:	83 c4 2c             	add    esp,0x2c
c001afa7:	0f b6 c4             	movzx  eax,ah
c001afaa:	c3                   	ret    
c001afab:	90                   	nop

c001afac <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001afac:	83 ec 18             	sub    esp,0x18
c001afaf:	6a 08                	push   0x8
c001afb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afb6:	50                   	push   eax
c001afb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afbc:	50                   	push   eax
c001afbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afc2:	50                   	push   eax
c001afc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc7:	e8 78 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afcc:	83 c4 2c             	add    esp,0x2c
c001afcf:	c3                   	ret    

c001afd0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001afd0:	83 ec 18             	sub    esp,0x18
c001afd3:	6a 3c                	push   0x3c
c001afd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afda:	50                   	push   eax
c001afdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe0:	50                   	push   eax
c001afe1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe6:	50                   	push   eax
c001afe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afeb:	e8 54 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff0:	83 c4 2c             	add    esp,0x2c
c001aff3:	c3                   	ret    

c001aff4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001aff4:	83 ec 18             	sub    esp,0x18
c001aff7:	6a 18                	push   0x18
c001aff9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001affe:	50                   	push   eax
c001afff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b004:	50                   	push   eax
c001b005:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b00a:	50                   	push   eax
c001b00b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b00f:	e8 30 fe ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b014:	83 c4 2c             	add    esp,0x2c
c001b017:	0f b6 c4             	movzx  eax,ah
c001b01a:	c3                   	ret    
c001b01b:	90                   	nop

c001b01c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b01c:	55                   	push   ebp
c001b01d:	57                   	push   edi
c001b01e:	56                   	push   esi
c001b01f:	53                   	push   ebx
c001b020:	83 ec 28             	sub    esp,0x28
c001b023:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b027:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b02c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b031:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b036:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b03d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b040:	83 c3 10             	add    ebx,0x10
c001b043:	0f b6 c0             	movzx  eax,al
c001b046:	0f b6 db             	movzx  ebx,bl
c001b049:	50                   	push   eax
c001b04a:	51                   	push   ecx
c001b04b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b04f:	57                   	push   edi
c001b050:	55                   	push   ebp
c001b051:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b055:	e8 ea fd ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b05a:	83 c4 14             	add    esp,0x14
c001b05d:	53                   	push   ebx
c001b05e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b062:	51                   	push   ecx
c001b063:	89 c6                	mov    esi,eax
c001b065:	57                   	push   edi
c001b066:	55                   	push   ebp
c001b067:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b06b:	c1 e6 10             	shl    esi,0x10
c001b06e:	e8 d1 fd ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b073:	83 c4 3c             	add    esp,0x3c
c001b076:	5b                   	pop    ebx
c001b077:	0f b7 c0             	movzx  eax,ax
c001b07a:	09 f0                	or     eax,esi
c001b07c:	5e                   	pop    esi
c001b07d:	5f                   	pop    edi
c001b07e:	5d                   	pop    ebp
c001b07f:	c3                   	ret    

c001b080 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b080:	55                   	push   ebp
c001b081:	57                   	push   edi
c001b082:	56                   	push   esi
c001b083:	53                   	push   ebx
c001b084:	83 ec 0c             	sub    esp,0xc
c001b087:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b08b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b08f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b093:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b097:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b09d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b0a5:	83 f9 01             	cmp    ecx,0x1
c001b0a8:	75 5d                	jne    c001b107 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b0aa:	0f b6 c8             	movzx  ecx,al
c001b0ad:	89 f0                	mov    eax,esi
c001b0af:	25 fc 00 00 00       	and    eax,0xfc
c001b0b4:	0f b6 d2             	movzx  edx,dl
c001b0b7:	c1 e1 10             	shl    ecx,0x10
c001b0ba:	c1 e2 0b             	shl    edx,0xb
c001b0bd:	09 c1                	or     ecx,eax
c001b0bf:	89 f8                	mov    eax,edi
c001b0c1:	0f b6 f8             	movzx  edi,al
c001b0c4:	c1 e7 08             	shl    edi,0x8
c001b0c7:	09 f9                	or     ecx,edi
c001b0c9:	09 d1                	or     ecx,edx
c001b0cb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0d0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b0d6:	89 c8                	mov    eax,ecx
c001b0d8:	ef                   	out    dx,eax
c001b0d9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0de:	ed                   	in     eax,dx
c001b0df:	83 e6 02             	and    esi,0x2
c001b0e2:	0f b7 db             	movzx  ebx,bx
c001b0e5:	74 0a                	je     c001b0f1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b0e7:	c1 e3 10             	shl    ebx,0x10
c001b0ea:	0f b7 d0             	movzx  edx,ax
c001b0ed:	09 d3                	or     ebx,edx
c001b0ef:	eb 05                	jmp    c001b0f6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b0f1:	66 31 c0             	xor    ax,ax
c001b0f4:	09 c3                	or     ebx,eax
c001b0f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0fb:	89 c8                	mov    eax,ecx
c001b0fd:	ef                   	out    dx,eax
c001b0fe:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b103:	89 d8                	mov    eax,ebx
c001b105:	eb 41                	jmp    c001b148 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b107:	83 f9 02             	cmp    ecx,0x2
c001b10a:	75 45                	jne    c001b151 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b10c:	89 f1                	mov    ecx,esi
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	0f b6 f1             	movzx  esi,cl
c001b114:	89 f9                	mov    ecx,edi
c001b116:	56                   	push   esi
c001b117:	0f b6 f9             	movzx  edi,cl
c001b11a:	57                   	push   edi
c001b11b:	0f b6 d2             	movzx  edx,dl
c001b11e:	52                   	push   edx
c001b11f:	0f b6 c0             	movzx  eax,al
c001b122:	50                   	push   eax
c001b123:	55                   	push   ebp
c001b124:	e8 a5 fc ff ff       	call   c001adce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b129:	89 c2                	mov    edx,eax
c001b12b:	ed                   	in     eax,dx
c001b12c:	83 c4 20             	add    esp,0x20
c001b12f:	f6 c2 02             	test   dl,0x2
c001b132:	0f b7 db             	movzx  ebx,bx
c001b135:	74 0c                	je     c001b143 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b137:	0f b7 c8             	movzx  ecx,ax
c001b13a:	89 d8                	mov    eax,ebx
c001b13c:	c1 e0 10             	shl    eax,0x10
c001b13f:	09 c8                	or     eax,ecx
c001b141:	eb 05                	jmp    c001b148 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b143:	66 31 c0             	xor    ax,ax
c001b146:	09 d8                	or     eax,ebx
c001b148:	ef                   	out    dx,eax
c001b149:	83 c4 0c             	add    esp,0xc
c001b14c:	5b                   	pop    ebx
c001b14d:	5e                   	pop    esi
c001b14e:	5f                   	pop    edi
c001b14f:	5d                   	pop    ebp
c001b150:	c3                   	ret    
c001b151:	c7 44 24 20 eb 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022beb
c001b159:	83 c4 0c             	add    esp,0xc
c001b15c:	5b                   	pop    ebx
c001b15d:	5e                   	pop    esi
c001b15e:	5f                   	pop    edi
c001b15f:	5d                   	pop    ebp
c001b160:	e9 2c 61 ff ff       	jmp    c0011291 <KePanic(char const*)>
c001b165:	90                   	nop

c001b166 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b166:	55                   	push   ebp
c001b167:	57                   	push   edi
c001b168:	56                   	push   esi
c001b169:	53                   	push   ebx
c001b16a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b170:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b177:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b17e:	0f 85 bd 00 00 00    	jne    c001b241 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b184:	83 ec 0c             	sub    esp,0xc
c001b187:	68 14 01 00 00       	push   0x114
c001b18c:	e8 42 c9 fe ff       	call   c0007ad3 <malloc>
c001b191:	83 c4 0c             	add    esp,0xc
c001b194:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b19a:	68 f1 2b 02 c0       	push   0xc0022bf1
c001b19f:	50                   	push   eax
c001b1a0:	89 c3                	mov    ebx,eax
c001b1a2:	e8 23 06 ff ff       	call   c000b7ca <File::File(char const*, Process*)>
c001b1a7:	83 c4 10             	add    esp,0x10
c001b1aa:	85 db                	test   ebx,ebx
c001b1ac:	0f 84 6b 02 00 00    	je     c001b41d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1b2:	57                   	push   edi
c001b1b3:	57                   	push   edi
c001b1b4:	6a 01                	push   0x1
c001b1b6:	53                   	push   ebx
c001b1b7:	e8 d6 06 ff ff       	call   c000b892 <File::open(FileOpenMode)>
c001b1bc:	83 c4 10             	add    esp,0x10
c001b1bf:	85 c0                	test   eax,eax
c001b1c1:	0f 85 56 02 00 00    	jne    c001b41d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1c7:	52                   	push   edx
c001b1c8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b1cc:	50                   	push   eax
c001b1cd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b1d1:	50                   	push   eax
c001b1d2:	53                   	push   ebx
c001b1d3:	e8 bc 09 ff ff       	call   c000bb94 <File::stat(unsigned long long*, bool*)>
c001b1d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1dc:	40                   	inc    eax
c001b1dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1e0:	e8 ee c8 fe ff       	call   c0007ad3 <malloc>
c001b1e5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b1e9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b1ed:	59                   	pop    ecx
c001b1ee:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b1f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1f5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b1f9:	51                   	push   ecx
c001b1fa:	50                   	push   eax
c001b1fb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b1ff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b203:	53                   	push   ebx
c001b204:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b207:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b20b:	83 c4 20             	add    esp,0x20
c001b20e:	89 c8                	mov    eax,ecx
c001b210:	99                   	cdq    
c001b211:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b215:	0f 85 02 02 00 00    	jne    c001b41d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b21b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b21f:	0f 85 f8 01 00 00    	jne    c001b41d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b225:	83 ec 0c             	sub    esp,0xc
c001b228:	53                   	push   ebx
c001b229:	e8 c2 06 ff ff       	call   c000b8f0 <File::close()>
c001b22e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b23c:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b241:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b249:	31 c9                	xor    ecx,ecx
c001b24b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b252:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b258:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b25f:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b265:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b26a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b272:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b277:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b283:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b28b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b28f:	39 cd                	cmp    ebp,ecx
c001b291:	0f 8e 86 01 00 00    	jle    c001b41d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b297:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b29a:	d4 40                	aam    0x40
c001b29c:	d5 39                	aad    0x39
c001b29e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b2a2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b2a6:	d4 40                	aam    0x40
c001b2a8:	d5 39                	aad    0x39
c001b2aa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b2ae:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b2b2:	d4 40                	aam    0x40
c001b2b4:	d5 39                	aad    0x39
c001b2b6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b2ba:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b2be:	d4 40                	aam    0x40
c001b2c0:	d5 39                	aad    0x39
c001b2c2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b2c6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b2ca:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b2ce:	3c 56                	cmp    al,0x56
c001b2d0:	74 47                	je     c001b319 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b2d2:	d4 40                	aam    0x40
c001b2d4:	d5 39                	aad    0x39
c001b2d6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b2d9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b2dd:	0f b6 db             	movzx  ebx,bl
c001b2e0:	c1 e3 04             	shl    ebx,0x4
c001b2e3:	d4 40                	aam    0x40
c001b2e5:	d5 39                	aad    0x39
c001b2e7:	83 e8 30             	sub    eax,0x30
c001b2ea:	0f b6 c0             	movzx  eax,al
c001b2ed:	09 c3                	or     ebx,eax
c001b2ef:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b2f3:	c1 e3 04             	shl    ebx,0x4
c001b2f6:	d4 40                	aam    0x40
c001b2f8:	d5 39                	aad    0x39
c001b2fa:	83 e8 30             	sub    eax,0x30
c001b2fd:	0f b6 c0             	movzx  eax,al
c001b300:	09 c3                	or     ebx,eax
c001b302:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b306:	c1 e3 04             	shl    ebx,0x4
c001b309:	d4 40                	aam    0x40
c001b30b:	d5 39                	aad    0x39
c001b30d:	83 e8 30             	sub    eax,0x30
c001b310:	0f b6 c0             	movzx  eax,al
c001b313:	09 c3                	or     ebx,eax
c001b315:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b319:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b31d:	80 fb 58             	cmp    bl,0x58
c001b320:	74 49                	je     c001b36b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b322:	88 d8                	mov    al,bl
c001b324:	d4 40                	aam    0x40
c001b326:	d5 39                	aad    0x39
c001b328:	83 e8 30             	sub    eax,0x30
c001b32b:	0f b6 f8             	movzx  edi,al
c001b32e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b332:	c1 e7 04             	shl    edi,0x4
c001b335:	d4 40                	aam    0x40
c001b337:	d5 39                	aad    0x39
c001b339:	83 e8 30             	sub    eax,0x30
c001b33c:	0f b6 c0             	movzx  eax,al
c001b33f:	09 c7                	or     edi,eax
c001b341:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b345:	c1 e7 04             	shl    edi,0x4
c001b348:	d4 40                	aam    0x40
c001b34a:	d5 39                	aad    0x39
c001b34c:	83 e8 30             	sub    eax,0x30
c001b34f:	0f b6 c0             	movzx  eax,al
c001b352:	09 c7                	or     edi,eax
c001b354:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b358:	c1 e7 04             	shl    edi,0x4
c001b35b:	d4 40                	aam    0x40
c001b35d:	d5 39                	aad    0x39
c001b35f:	83 e8 30             	sub    eax,0x30
c001b362:	0f b6 c0             	movzx  eax,al
c001b365:	09 c7                	or     edi,eax
c001b367:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b36b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b36e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b372:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b376:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b37a:	83 f9 0a             	cmp    ecx,0xa
c001b37d:	74 07                	je     c001b386 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b37f:	47                   	inc    edi
c001b380:	39 c5                	cmp    ebp,eax
c001b382:	75 16                	jne    c001b39a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b384:	89 e8                	mov    eax,ebp
c001b386:	83 f9 0a             	cmp    ecx,0xa
c001b389:	0f 94 c1             	sete   cl
c001b38c:	0f b6 c9             	movzx  ecx,cl
c001b38f:	01 c1                	add    ecx,eax
c001b391:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b396:	75 0f                	jne    c001b3a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b398:	eb 1c                	jmp    c001b3b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b39a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b39d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b3a1:	40                   	inc    eax
c001b3a2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b3a5:	eb cb                	jmp    c001b372 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b3a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b3ab:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b3b0:	0f 85 d9 fe ff ff    	jne    c001b28f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b3b6:	80 fb 58             	cmp    bl,0x58
c001b3b9:	74 10                	je     c001b3cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b3bb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b3c0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b3c5:	0f 85 c4 fe ff ff    	jne    c001b28f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b3cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3d3:	83 e8 30             	sub    eax,0x30
c001b3d6:	c1 e0 04             	shl    eax,0x4
c001b3d9:	83 eb 30             	sub    ebx,0x30
c001b3dc:	09 d8                	or     eax,ebx
c001b3de:	0f b6 c0             	movzx  eax,al
c001b3e1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b3e5:	0f 85 a4 fe ff ff    	jne    c001b28f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3ef:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b3f3:	83 e8 30             	sub    eax,0x30
c001b3f6:	c1 e0 04             	shl    eax,0x4
c001b3f9:	83 eb 30             	sub    ebx,0x30
c001b3fc:	09 d8                	or     eax,ebx
c001b3fe:	0f b6 c0             	movzx  eax,al
c001b401:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b405:	0f 85 84 fe ff ff    	jne    c001b28f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b40b:	50                   	push   eax
c001b40c:	50                   	push   eax
c001b40d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b411:	50                   	push   eax
c001b412:	56                   	push   esi
c001b413:	e8 38 52 fe ff       	call   c0000650 <strcpy>
c001b418:	83 c4 10             	add    esp,0x10
c001b41b:	eb 05                	jmp    c001b422 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b41d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b420:	31 f6                	xor    esi,esi
c001b422:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b428:	89 f0                	mov    eax,esi
c001b42a:	5b                   	pop    ebx
c001b42b:	5e                   	pop    esi
c001b42c:	5f                   	pop    edi
c001b42d:	5d                   	pop    ebp
c001b42e:	c3                   	ret    
c001b42f:	90                   	nop

c001b430 <PCI::checkBus(unsigned char)>:
c001b430:	56                   	push   esi
c001b431:	53                   	push   ebx
c001b432:	31 db                	xor    ebx,ebx
c001b434:	51                   	push   ecx
c001b435:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b43a:	52                   	push   edx
c001b43b:	53                   	push   ebx
c001b43c:	43                   	inc    ebx
c001b43d:	56                   	push   esi
c001b43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b442:	e8 0f 03 00 00       	call   c001b756 <PCI::checkDevice(unsigned char, unsigned char)>
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	83 fb 20             	cmp    ebx,0x20
c001b44d:	75 eb                	jne    c001b43a <PCI::checkBus(unsigned char)+0xa>
c001b44f:	58                   	pop    eax
c001b450:	5b                   	pop    ebx
c001b451:	5e                   	pop    esi
c001b452:	c3                   	ret    
c001b453:	90                   	nop

c001b454 <PCI::foundDevice(PCIDeviceInfo)>:
c001b454:	55                   	push   ebp
c001b455:	57                   	push   edi
c001b456:	56                   	push   esi
c001b457:	53                   	push   ebx
c001b458:	83 ec 1c             	sub    esp,0x1c
c001b45b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b460:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b464:	3d ff ff 00 00       	cmp    eax,0xffff
c001b469:	0f 84 63 01 00 00    	je     c001b5d2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b46f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b474:	66 3d 06 04          	cmp    ax,0x406
c001b478:	75 2c                	jne    c001b4a6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b47a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b47f:	50                   	push   eax
c001b480:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b485:	50                   	push   eax
c001b486:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b48b:	50                   	push   eax
c001b48c:	53                   	push   ebx
c001b48d:	e8 62 fb ff ff       	call   c001aff4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b492:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b496:	0f b6 c0             	movzx  eax,al
c001b499:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b49d:	83 c4 2c             	add    esp,0x2c
c001b4a0:	5b                   	pop    ebx
c001b4a1:	5e                   	pop    esi
c001b4a2:	5f                   	pop    edi
c001b4a3:	5d                   	pop    ebp
c001b4a4:	eb 8a                	jmp    c001b430 <PCI::checkBus(unsigned char)>
c001b4a6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b4ab:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b4b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b4b5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b4b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b4bd:	85 d2                	test   edx,edx
c001b4bf:	74 34                	je     c001b4f5 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b4c1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b4c4:	85 c9                	test   ecx,ecx
c001b4c6:	74 29                	je     c001b4f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b4c8:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b4ce:	31 f5                	xor    ebp,esi
c001b4d0:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b4d6:	75 19                	jne    c001b4f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b4d8:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b4de:	75 11                	jne    c001b4f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b4e0:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b4e7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b4eb:	0f 84 e1 00 00 00    	je     c001b5d2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b4f1:	8b 12                	mov    edx,DWORD PTR [edx]
c001b4f3:	eb c8                	jmp    c001b4bd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b4f5:	3d 01 06 00 00       	cmp    eax,0x601
c001b4fa:	75 19                	jne    c001b515 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	68 64 01 00 00       	push   0x164
c001b504:	e8 ca c5 fe ff       	call   c0007ad3 <malloc>
c001b509:	89 04 24             	mov    DWORD PTR [esp],eax
c001b50c:	89 c5                	mov    ebp,eax
c001b50e:	e8 ab 0e 00 00       	call   c001c3be <SATABus::SATABus()>
c001b513:	eb 1e                	jmp    c001b533 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b515:	3d 01 01 00 00       	cmp    eax,0x101
c001b51a:	75 62                	jne    c001b57e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	68 70 02 00 00       	push   0x270
c001b524:	e8 aa c5 fe ff       	call   c0007ad3 <malloc>
c001b529:	89 04 24             	mov    DWORD PTR [esp],eax
c001b52c:	89 c5                	mov    ebp,eax
c001b52e:	e8 f3 02 00 00       	call   c001b826 <IDE::IDE()>
c001b533:	58                   	pop    eax
c001b534:	5a                   	pop    edx
c001b535:	55                   	push   ebp
c001b536:	53                   	push   ebx
c001b537:	e8 b8 11 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c001b53c:	83 ec 1c             	sub    esp,0x1c
c001b53f:	b9 09 00 00 00       	mov    ecx,0x9
c001b544:	fc                   	cld    
c001b545:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b549:	89 e7                	mov    edi,esp
c001b54b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b54d:	55                   	push   ebp
c001b54e:	e8 e7 10 ff ff       	call   c000c63a <Device::preOpenPCI(PCIDeviceInfo)>
c001b553:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b556:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b55a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b562:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b56a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b572:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b575:	83 c4 4c             	add    esp,0x4c
c001b578:	5b                   	pop    ebx
c001b579:	5e                   	pop    esi
c001b57a:	5f                   	pop    edi
c001b57b:	5d                   	pop    ebp
c001b57c:	ff e0                	jmp    eax
c001b57e:	83 ec 0c             	sub    esp,0xc
c001b581:	68 58 01 00 00       	push   0x158
c001b586:	e8 48 c5 fe ff       	call   c0007ad3 <malloc>
c001b58b:	5a                   	pop    edx
c001b58c:	59                   	pop    ecx
c001b58d:	68 0a 2c 02 c0       	push   0xc0022c0a
c001b592:	50                   	push   eax
c001b593:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b597:	e8 f6 13 ff ff       	call   c000c992 <DriverlessDevice::DriverlessDevice(char const*)>
c001b59c:	5e                   	pop    esi
c001b59d:	5f                   	pop    edi
c001b59e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5a2:	50                   	push   eax
c001b5a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5a7:	53                   	push   ebx
c001b5a8:	e8 47 11 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c001b5ad:	83 c4 10             	add    esp,0x10
c001b5b0:	b9 09 00 00 00       	mov    ecx,0x9
c001b5b5:	fc                   	cld    
c001b5b6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b5ba:	89 fe                	mov    esi,edi
c001b5bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b5c6:	83 c4 1c             	add    esp,0x1c
c001b5c9:	5b                   	pop    ebx
c001b5ca:	5e                   	pop    esi
c001b5cb:	5f                   	pop    edi
c001b5cc:	5d                   	pop    ebp
c001b5cd:	e9 68 10 ff ff       	jmp    c000c63a <Device::preOpenPCI(PCIDeviceInfo)>
c001b5d2:	83 c4 1c             	add    esp,0x1c
c001b5d5:	5b                   	pop    ebx
c001b5d6:	5e                   	pop    esi
c001b5d7:	5f                   	pop    edi
c001b5d8:	5d                   	pop    ebp
c001b5d9:	c3                   	ret    

c001b5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b5da:	55                   	push   ebp
c001b5db:	57                   	push   edi
c001b5dc:	56                   	push   esi
c001b5dd:	53                   	push   ebx
c001b5de:	83 ec 68             	sub    esp,0x68
c001b5e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b5e8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b5ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5f0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b5f7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b600:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b607:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b60c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b610:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b615:	6a 0c                	push   0xc
c001b617:	57                   	push   edi
c001b618:	53                   	push   ebx
c001b619:	56                   	push   esi
c001b61a:	55                   	push   ebp
c001b61b:	e8 24 f8 ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b620:	83 c4 20             	add    esp,0x20
c001b623:	57                   	push   edi
c001b624:	53                   	push   ebx
c001b625:	56                   	push   esi
c001b626:	55                   	push   ebp
c001b627:	e8 0e f9 ff ff       	call   c001af3a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b62c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b631:	57                   	push   edi
c001b632:	53                   	push   ebx
c001b633:	56                   	push   esi
c001b634:	55                   	push   ebp
c001b635:	e8 96 f9 ff ff       	call   c001afd0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b63a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b63e:	83 c4 14             	add    esp,0x14
c001b641:	6a 3c                	push   0x3c
c001b643:	57                   	push   edi
c001b644:	53                   	push   ebx
c001b645:	56                   	push   esi
c001b646:	55                   	push   ebp
c001b647:	e8 f8 f7 ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64c:	0f b6 c4             	movzx  eax,ah
c001b64f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b653:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b657:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b65b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b660:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b666:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b66c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b670:	83 c4 20             	add    esp,0x20
c001b673:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b678:	74 30                	je     c001b6aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b67a:	31 c0                	xor    eax,eax
c001b67c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b680:	7e 28                	jle    c001b6aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b682:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b68a:	39 cb                	cmp    ebx,ecx
c001b68c:	75 19                	jne    c001b6a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b68e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b696:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b69a:	75 0b                	jne    c001b6a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b69c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b6a3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b6a7:	40                   	inc    eax
c001b6a8:	eb d2                	jmp    c001b67c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b6aa:	31 d2                	xor    edx,edx
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	57                   	push   edi
c001b6b0:	53                   	push   ebx
c001b6b1:	56                   	push   esi
c001b6b2:	52                   	push   edx
c001b6b3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b6b7:	55                   	push   ebp
c001b6b8:	e8 5f f9 ff ff       	call   c001b01c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b6c1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b6c5:	42                   	inc    edx
c001b6c6:	83 c4 20             	add    esp,0x20
c001b6c9:	83 fa 06             	cmp    edx,0x6
c001b6cc:	75 de                	jne    c001b6ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b6ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6d2:	83 ec 0c             	sub    esp,0xc
c001b6d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6d9:	c1 e2 08             	shl    edx,0x8
c001b6dc:	0f b6 c4             	movzx  eax,ah
c001b6df:	09 d0                	or     eax,edx
c001b6e1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b6e6:	6a 02                	push   0x2
c001b6e8:	57                   	push   edi
c001b6e9:	53                   	push   ebx
c001b6ea:	56                   	push   esi
c001b6eb:	55                   	push   ebp
c001b6ec:	e8 53 f7 ff ff       	call   c001ae44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6f1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b6f6:	83 c4 20             	add    esp,0x20
c001b6f9:	57                   	push   edi
c001b6fa:	53                   	push   ebx
c001b6fb:	56                   	push   esi
c001b6fc:	55                   	push   ebp
c001b6fd:	e8 82 f8 ff ff       	call   c001af84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b702:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b706:	57                   	push   edi
c001b707:	53                   	push   ebx
c001b708:	56                   	push   esi
c001b709:	55                   	push   ebp
c001b70a:	e8 df f7 ff ff       	call   c001aeee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b70f:	b9 09 00 00 00       	mov    ecx,0x9
c001b714:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b719:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b71d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b721:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b725:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b729:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b72d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b731:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b735:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	fc                   	cld    
c001b73d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b741:	89 e7                	mov    edi,esp
c001b743:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b745:	55                   	push   ebp
c001b746:	e8 09 fd ff ff       	call   c001b454 <PCI::foundDevice(PCIDeviceInfo)>
c001b74b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b751:	5b                   	pop    ebx
c001b752:	5e                   	pop    esi
c001b753:	5f                   	pop    edi
c001b754:	5d                   	pop    ebp
c001b755:	c3                   	ret    

c001b756 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b756:	55                   	push   ebp
c001b757:	57                   	push   edi
c001b758:	56                   	push   esi
c001b759:	53                   	push   ebx
c001b75a:	83 ec 0c             	sub    esp,0xc
c001b75d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b762:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b767:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b76b:	6a 00                	push   0x0
c001b76d:	56                   	push   esi
c001b76e:	57                   	push   edi
c001b76f:	55                   	push   ebp
c001b770:	e8 79 f7 ff ff       	call   c001aeee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b775:	6a 00                	push   0x0
c001b777:	56                   	push   esi
c001b778:	57                   	push   edi
c001b779:	55                   	push   ebp
c001b77a:	e8 5b fe ff ff       	call   c001b5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b77f:	83 c4 20             	add    esp,0x20
c001b782:	6a 00                	push   0x0
c001b784:	56                   	push   esi
c001b785:	57                   	push   edi
c001b786:	55                   	push   ebp
c001b787:	e8 86 f7 ff ff       	call   c001af12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b78c:	83 c4 10             	add    esp,0x10
c001b78f:	a8 80                	test   al,0x80
c001b791:	74 2d                	je     c001b7c0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b793:	bb 01 00 00 00       	mov    ebx,0x1
c001b798:	53                   	push   ebx
c001b799:	56                   	push   esi
c001b79a:	57                   	push   edi
c001b79b:	55                   	push   ebp
c001b79c:	e8 4d f7 ff ff       	call   c001aeee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	0f b7 c0             	movzx  eax,ax
c001b7a7:	3d ff ff 00 00       	cmp    eax,0xffff
c001b7ac:	74 0c                	je     c001b7ba <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b7ae:	53                   	push   ebx
c001b7af:	56                   	push   esi
c001b7b0:	57                   	push   edi
c001b7b1:	55                   	push   ebp
c001b7b2:	e8 23 fe ff ff       	call   c001b5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	43                   	inc    ebx
c001b7bb:	83 fb 08             	cmp    ebx,0x8
c001b7be:	75 d8                	jne    c001b798 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b7c0:	83 c4 0c             	add    esp,0xc
c001b7c3:	5b                   	pop    ebx
c001b7c4:	5e                   	pop    esi
c001b7c5:	5f                   	pop    edi
c001b7c6:	5d                   	pop    ebp
c001b7c7:	c3                   	ret    

c001b7c8 <PCI::detect()>:
c001b7c8:	56                   	push   esi
c001b7c9:	53                   	push   ebx
c001b7ca:	53                   	push   ebx
c001b7cb:	31 db                	xor    ebx,ebx
c001b7cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7d1:	6a 00                	push   0x0
c001b7d3:	6a 00                	push   0x0
c001b7d5:	6a 00                	push   0x0
c001b7d7:	56                   	push   esi
c001b7d8:	e8 35 f7 ff ff       	call   c001af12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b7dd:	83 c4 10             	add    esp,0x10
c001b7e0:	a8 80                	test   al,0x80
c001b7e2:	75 21                	jne    c001b805 <PCI::detect()+0x3d>
c001b7e4:	51                   	push   ecx
c001b7e5:	51                   	push   ecx
c001b7e6:	6a 00                	push   0x0
c001b7e8:	56                   	push   esi
c001b7e9:	e8 42 fc ff ff       	call   c001b430 <PCI::checkBus(unsigned char)>
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	eb 2a                	jmp    c001b81d <PCI::detect()+0x55>
c001b7f3:	52                   	push   edx
c001b7f4:	52                   	push   edx
c001b7f5:	53                   	push   ebx
c001b7f6:	43                   	inc    ebx
c001b7f7:	56                   	push   esi
c001b7f8:	e8 33 fc ff ff       	call   c001b430 <PCI::checkBus(unsigned char)>
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	83 fb 08             	cmp    ebx,0x8
c001b803:	74 18                	je     c001b81d <PCI::detect()+0x55>
c001b805:	53                   	push   ebx
c001b806:	6a 00                	push   0x0
c001b808:	6a 00                	push   0x0
c001b80a:	56                   	push   esi
c001b80b:	e8 de f6 ff ff       	call   c001aeee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	0f b7 c0             	movzx  eax,ax
c001b816:	3d ff ff 00 00       	cmp    eax,0xffff
c001b81b:	74 d6                	je     c001b7f3 <PCI::detect()+0x2b>
c001b81d:	58                   	pop    eax
c001b81e:	5b                   	pop    ebx
c001b81f:	5e                   	pop    esi
c001b820:	c3                   	ret    
c001b821:	90                   	nop

c001b822 <IDE::close(int, int, void*)>:
c001b822:	83 c8 ff             	or     eax,0xffffffff
c001b825:	c3                   	ret    

c001b826 <IDE::IDE()>:
c001b826:	83 ec 0c             	sub    esp,0xc
c001b829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82d:	83 ec 08             	sub    esp,0x8
c001b830:	68 50 2c 02 c0       	push   0xc0022c50
c001b835:	50                   	push   eax
c001b836:	e8 fd 11 ff ff       	call   c000ca38 <HardDiskController::HardDiskController(char const*)>
c001b83b:	83 c4 10             	add    esp,0x10
c001b83e:	ba e0 2c 02 c0       	mov    edx,0xc0022ce0
c001b843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b847:	89 10                	mov    DWORD PTR [eax],edx
c001b849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b854:	90                   	nop
c001b855:	83 c4 0c             	add    esp,0xc
c001b858:	c3                   	ret    
c001b859:	90                   	nop

c001b85a <IDE::prepareInterrupt(unsigned char)>:
c001b85a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b85f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b863:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b86b:	c3                   	ret    

c001b86c <selectDrive(unsigned char, unsigned char)>:
c001b86c:	c3                   	ret    
c001b86d:	90                   	nop

c001b86e <IDE::getBase(unsigned char)>:
c001b86e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b877:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b87f:	c3                   	ret    

c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b880:	55                   	push   ebp
c001b881:	57                   	push   edi
c001b882:	56                   	push   esi
c001b883:	53                   	push   ebx
c001b884:	83 ec 1c             	sub    esp,0x1c
c001b887:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b88b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b88f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b893:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b897:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b89a:	80 f9 03             	cmp    cl,0x3
c001b89d:	77 4f                	ja     c001b8ee <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b89f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8a3:	0f b6 f2             	movzx  esi,dl
c001b8a6:	0f b6 db             	movzx  ebx,bl
c001b8a9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b8ac:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b8b1:	80 ca 80             	or     dl,0x80
c001b8b4:	52                   	push   edx
c001b8b5:	6a 0c                	push   0xc
c001b8b7:	56                   	push   esi
c001b8b8:	57                   	push   edi
c001b8b9:	e8 c2 ff ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8be:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b8c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8c7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b8cb:	ee                   	out    dx,al
c001b8cc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b8d1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b8d5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b8d9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b8e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b8e5:	83 c4 2c             	add    esp,0x2c
c001b8e8:	5b                   	pop    ebx
c001b8e9:	5e                   	pop    esi
c001b8ea:	5f                   	pop    edi
c001b8eb:	5d                   	pop    ebp
c001b8ec:	eb 92                	jmp    c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ee:	0f b6 cb             	movzx  ecx,bl
c001b8f1:	83 f9 07             	cmp    ecx,0x7
c001b8f4:	77 12                	ja     c001b908 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b8f6:	0f b6 d2             	movzx  edx,dl
c001b8f9:	0f b6 db             	movzx  ebx,bl
c001b8fc:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b904:	01 da                	add    edx,ebx
c001b906:	eb 2f                	jmp    c001b937 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b908:	83 f9 0d             	cmp    ecx,0xd
c001b90b:	77 13                	ja     c001b920 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b90d:	0f b6 d2             	movzx  edx,dl
c001b910:	0f b6 db             	movzx  ebx,bl
c001b913:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b91a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b91e:	eb 17                	jmp    c001b937 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b920:	83 f9 15             	cmp    ecx,0x15
c001b923:	77 13                	ja     c001b938 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b925:	0f b6 d2             	movzx  edx,dl
c001b928:	0f b6 db             	movzx  ebx,bl
c001b92b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b933:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b937:	ee                   	out    dx,al
c001b938:	83 c4 1c             	add    esp,0x1c
c001b93b:	5b                   	pop    ebx
c001b93c:	5e                   	pop    esi
c001b93d:	5f                   	pop    edi
c001b93e:	5d                   	pop    ebp
c001b93f:	c3                   	ret    

c001b940 <IDE::read(unsigned char, unsigned char)>:
c001b940:	57                   	push   edi
c001b941:	56                   	push   esi
c001b942:	53                   	push   ebx
c001b943:	83 ec 10             	sub    esp,0x10
c001b946:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b94a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b94e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b952:	8d 42 f8             	lea    eax,[edx-0x8]
c001b955:	3c 03                	cmp    al,0x3
c001b957:	77 48                	ja     c001b9a1 <IDE::read(unsigned char, unsigned char)+0x61>
c001b959:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b95d:	0f b6 f1             	movzx  esi,cl
c001b960:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b963:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b968:	0c 80                	or     al,0x80
c001b96a:	50                   	push   eax
c001b96b:	6a 0c                	push   0xc
c001b96d:	56                   	push   esi
c001b96e:	53                   	push   ebx
c001b96f:	e8 0c ff ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b974:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b978:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b97d:	0f b6 d2             	movzx  edx,dl
c001b980:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b984:	ec                   	in     al,dx
c001b985:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b989:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b98e:	52                   	push   edx
c001b98f:	6a 0c                	push   0xc
c001b991:	56                   	push   esi
c001b992:	53                   	push   ebx
c001b993:	e8 e8 fe ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b998:	83 c4 20             	add    esp,0x20
c001b99b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b99f:	eb 4c                	jmp    c001b9ed <IDE::read(unsigned char, unsigned char)+0xad>
c001b9a1:	0f b6 f2             	movzx  esi,dl
c001b9a4:	83 fe 07             	cmp    esi,0x7
c001b9a7:	77 12                	ja     c001b9bb <IDE::read(unsigned char, unsigned char)+0x7b>
c001b9a9:	0f b6 c9             	movzx  ecx,cl
c001b9ac:	0f b6 d2             	movzx  edx,dl
c001b9af:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b9b7:	01 c2                	add    edx,eax
c001b9b9:	eb 31                	jmp    c001b9ec <IDE::read(unsigned char, unsigned char)+0xac>
c001b9bb:	83 fe 0d             	cmp    esi,0xd
c001b9be:	77 13                	ja     c001b9d3 <IDE::read(unsigned char, unsigned char)+0x93>
c001b9c0:	0f b6 c9             	movzx  ecx,cl
c001b9c3:	0f b6 d2             	movzx  edx,dl
c001b9c6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b9cd:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b9d1:	eb 19                	jmp    c001b9ec <IDE::read(unsigned char, unsigned char)+0xac>
c001b9d3:	31 c0                	xor    eax,eax
c001b9d5:	83 fe 15             	cmp    esi,0x15
c001b9d8:	77 13                	ja     c001b9ed <IDE::read(unsigned char, unsigned char)+0xad>
c001b9da:	0f b6 c9             	movzx  ecx,cl
c001b9dd:	0f b6 d2             	movzx  edx,dl
c001b9e0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b9e8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b9ec:	ec                   	in     al,dx
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	5b                   	pop    ebx
c001b9f1:	5e                   	pop    esi
c001b9f2:	5f                   	pop    edi
c001b9f3:	c3                   	ret    

c001b9f4 <IDE::waitInterrupt(unsigned char)>:
c001b9f4:	55                   	push   ebp
c001b9f5:	57                   	push   edi
c001b9f6:	56                   	push   esi
c001b9f7:	53                   	push   ebx
c001b9f8:	31 db                	xor    ebx,ebx
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba01:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba06:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba0e:	89 e8                	mov    eax,ebp
c001ba10:	84 c0                	test   al,al
c001ba12:	75 30                	jne    c001ba44 <IDE::waitInterrupt(unsigned char)+0x50>
c001ba14:	50                   	push   eax
c001ba15:	6a 0c                	push   0xc
c001ba17:	56                   	push   esi
c001ba18:	57                   	push   edi
c001ba19:	e8 22 ff ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	a8 01                	test   al,0x1
c001ba23:	75 27                	jne    c001ba4c <IDE::waitInterrupt(unsigned char)+0x58>
c001ba25:	f6 c3 04             	test   bl,0x4
c001ba28:	75 12                	jne    c001ba3c <IDE::waitInterrupt(unsigned char)+0x48>
c001ba2a:	83 fb 32             	cmp    ebx,0x32
c001ba2d:	7e 0d                	jle    c001ba3c <IDE::waitInterrupt(unsigned char)+0x48>
c001ba2f:	83 ec 0c             	sub    esp,0xc
c001ba32:	6a 64                	push   0x64
c001ba34:	e8 73 a4 ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	83 fb 3c             	cmp    ebx,0x3c
c001ba3f:	74 0b                	je     c001ba4c <IDE::waitInterrupt(unsigned char)+0x58>
c001ba41:	43                   	inc    ebx
c001ba42:	eb c2                	jmp    c001ba06 <IDE::waitInterrupt(unsigned char)+0x12>
c001ba44:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba4c:	83 c4 0c             	add    esp,0xc
c001ba4f:	89 e8                	mov    eax,ebp
c001ba51:	5b                   	pop    ebx
c001ba52:	5e                   	pop    esi
c001ba53:	5f                   	pop    edi
c001ba54:	5d                   	pop    ebp
c001ba55:	c3                   	ret    

c001ba56 <ideChannel0IRQHandler(regs*, void*)>:
c001ba56:	83 ec 10             	sub    esp,0x10
c001ba59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba5d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ba64:	6a 07                	push   0x7
c001ba66:	6a 00                	push   0x0
c001ba68:	50                   	push   eax
c001ba69:	e8 d2 fe ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001ba6e:	83 c4 1c             	add    esp,0x1c
c001ba71:	c3                   	ret    

c001ba72 <ideChannel1IRQHandler(regs*, void*)>:
c001ba72:	83 ec 10             	sub    esp,0x10
c001ba75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba79:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ba80:	6a 07                	push   0x7
c001ba82:	6a 01                	push   0x1
c001ba84:	50                   	push   eax
c001ba85:	e8 b6 fe ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001ba8a:	83 c4 1c             	add    esp,0x1c
c001ba8d:	c3                   	ret    

c001ba8e <IDE::enableIRQs(unsigned char, bool)>:
c001ba8e:	57                   	push   edi
c001ba8f:	b8 02 00 00 00       	mov    eax,0x2
c001ba94:	56                   	push   esi
c001ba95:	53                   	push   ebx
c001ba96:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001baa3:	74 02                	je     c001baa7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001baa5:	31 c0                	xor    eax,eax
c001baa7:	0f b6 db             	movzx  ebx,bl
c001baaa:	bf 04 00 00 00       	mov    edi,0x4
c001baaf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bab6:	50                   	push   eax
c001bab7:	6a 0c                	push   0xc
c001bab9:	53                   	push   ebx
c001baba:	56                   	push   esi
c001babb:	e8 c0 fd ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	50                   	push   eax
c001bac4:	6a 0c                	push   0xc
c001bac6:	53                   	push   ebx
c001bac7:	56                   	push   esi
c001bac8:	e8 73 fe ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	4f                   	dec    edi
c001bad1:	75 f0                	jne    c001bac3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bad3:	5b                   	pop    ebx
c001bad4:	5e                   	pop    esi
c001bad5:	5f                   	pop    edi
c001bad6:	c3                   	ret    
c001bad7:	90                   	nop

c001bad8 <IDE::open(int, int, void*)>:
c001bad8:	55                   	push   ebp
c001bad9:	57                   	push   edi
c001bada:	56                   	push   esi
c001badb:	53                   	push   ebx
c001badc:	83 ec 1c             	sub    esp,0x1c
c001badf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bae3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001baea:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001baf3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bafc:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb03:	0f 85 da 02 00 00    	jne    c001bde3 <IDE::open(int, int, void*)+0x30b>
c001bb09:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb0f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bb13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb17:	83 e0 7f             	and    eax,0x7f
c001bb1a:	83 f8 05             	cmp    eax,0x5
c001bb1d:	74 05                	je     c001bb24 <IDE::open(int, int, void*)+0x4c>
c001bb1f:	83 f8 0f             	cmp    eax,0xf
c001bb22:	75 32                	jne    c001bb56 <IDE::open(int, int, void*)+0x7e>
c001bb24:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb2a:	83 e0 fc             	and    eax,0xfffffffc
c001bb2d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb34:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb3a:	83 e0 fc             	and    eax,0xfffffffc
c001bb3d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb44:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb4a:	83 e0 fc             	and    eax,0xfffffffc
c001bb4d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bb54:	eb 14                	jmp    c001bb6a <IDE::open(int, int, void*)+0x92>
c001bb56:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bb60:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bb6a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bb71:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb76:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bb7d:	89 fa                	mov    edx,edi
c001bb7f:	89 f1                	mov    ecx,esi
c001bb81:	c1 e1 10             	shl    ecx,0x10
c001bb84:	89 e8                	mov    eax,ebp
c001bb86:	c1 e0 0b             	shl    eax,0xb
c001bb89:	09 c1                	or     ecx,eax
c001bb8b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb92:	c1 e0 08             	shl    eax,0x8
c001bb95:	09 c1                	or     ecx,eax
c001bb97:	89 c8                	mov    eax,ecx
c001bb99:	0d 08 00 00 80       	or     eax,0x80000008
c001bb9e:	ef                   	out    dx,eax
c001bb9f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bba4:	ed                   	in     eax,dx
c001bba5:	c1 e8 10             	shr    eax,0x10
c001bba8:	3d ff ff 00 00       	cmp    eax,0xffff
c001bbad:	0f 84 f9 00 00 00    	je     c001bcac <IDE::open(int, int, void*)+0x1d4>
c001bbb3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bbb9:	89 fa                	mov    edx,edi
c001bbbb:	89 c8                	mov    eax,ecx
c001bbbd:	ef                   	out    dx,eax
c001bbbe:	b0 fe                	mov    al,0xfe
c001bbc0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbc5:	ee                   	out    dx,al
c001bbc6:	89 c8                	mov    eax,ecx
c001bbc8:	89 fa                	mov    edx,edi
c001bbca:	ef                   	out    dx,eax
c001bbcb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbd0:	ed                   	in     eax,dx
c001bbd1:	3c fe                	cmp    al,0xfe
c001bbd3:	0f 85 a4 00 00 00    	jne    c001bc7d <IDE::open(int, int, void*)+0x1a5>
c001bbd9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bbdf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bbe6:	74 30                	je     c001bc18 <IDE::open(int, int, void*)+0x140>
c001bbe8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bbee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bbf2:	83 ec 0c             	sub    esp,0xc
c001bbf5:	40                   	inc    eax
c001bbf6:	0f b6 c0             	movzx  eax,al
c001bbf9:	50                   	push   eax
c001bbfa:	55                   	push   ebp
c001bbfb:	56                   	push   esi
c001bbfc:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bc02:	51                   	push   ecx
c001bc03:	e8 88 3a ff ff       	call   c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc08:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc0d:	83 c4 1c             	add    esp,0x1c
c001bc10:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc16:	eb 0a                	jmp    c001bc22 <IDE::open(int, int, void*)+0x14a>
c001bc18:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc22:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc29:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bc2e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc35:	89 ea                	mov    edx,ebp
c001bc37:	c1 e1 10             	shl    ecx,0x10
c001bc3a:	c1 e0 08             	shl    eax,0x8
c001bc3d:	09 c1                	or     ecx,eax
c001bc3f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc46:	c1 e0 0b             	shl    eax,0xb
c001bc49:	09 c1                	or     ecx,eax
c001bc4b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc51:	89 c8                	mov    eax,ecx
c001bc53:	ef                   	out    dx,eax
c001bc54:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bc5a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bc5f:	89 f2                	mov    edx,esi
c001bc61:	89 f8                	mov    eax,edi
c001bc63:	ee                   	out    dx,al
c001bc64:	89 c8                	mov    eax,ecx
c001bc66:	89 ea                	mov    edx,ebp
c001bc68:	ef                   	out    dx,eax
c001bc69:	89 f2                	mov    edx,esi
c001bc6b:	ed                   	in     eax,dx
c001bc6c:	0f b6 c0             	movzx  eax,al
c001bc6f:	39 f8                	cmp    eax,edi
c001bc71:	74 49                	je     c001bcbc <IDE::open(int, int, void*)+0x1e4>
c001bc73:	83 ec 0c             	sub    esp,0xc
c001bc76:	68 68 2c 02 c0       	push   0xc0022c68
c001bc7b:	eb 37                	jmp    c001bcb4 <IDE::open(int, int, void*)+0x1dc>
c001bc7d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc86:	75 1a                	jne    c001bca2 <IDE::open(int, int, void*)+0x1ca>
c001bc88:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bc8d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bc92:	74 05                	je     c001bc99 <IDE::open(int, int, void*)+0x1c1>
c001bc94:	83 c0 80             	add    eax,0xffffff80
c001bc97:	75 09                	jne    c001bca2 <IDE::open(int, int, void*)+0x1ca>
c001bc99:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bca0:	eb 1a                	jmp    c001bcbc <IDE::open(int, int, void*)+0x1e4>
c001bca2:	83 ec 0c             	sub    esp,0xc
c001bca5:	68 70 2c 02 c0       	push   0xc0022c70
c001bcaa:	eb 08                	jmp    c001bcb4 <IDE::open(int, int, void*)+0x1dc>
c001bcac:	83 ec 0c             	sub    esp,0xc
c001bcaf:	68 a1 2c 02 c0       	push   0xc0022ca1
c001bcb4:	e8 d8 55 ff ff       	call   c0011291 <KePanic(char const*)>
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bcc3:	74 1a                	je     c001bcdf <IDE::open(int, int, void*)+0x207>
c001bcc5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bccb:	83 e0 fc             	and    eax,0xfffffffc
c001bcce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bcd5:	83 c0 08             	add    eax,0x8
c001bcd8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bcdf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bce5:	89 c2                	mov    edx,eax
c001bce7:	83 e2 0f             	and    edx,0xf
c001bcea:	83 fa 08             	cmp    edx,0x8
c001bced:	75 0a                	jne    c001bcf9 <IDE::open(int, int, void*)+0x221>
c001bcef:	83 e8 02             	sub    eax,0x2
c001bcf2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcf9:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bcff:	89 c2                	mov    edx,eax
c001bd01:	83 e2 0f             	and    edx,0xf
c001bd04:	83 fa 08             	cmp    edx,0x8
c001bd07:	75 0a                	jne    c001bd13 <IDE::open(int, int, void*)+0x23b>
c001bd09:	83 e8 02             	sub    eax,0x2
c001bd0c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd13:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd1a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd21:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd24:	89 d0                	mov    eax,edx
c001bd26:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd2a:	8d 7a 01             	lea    edi,[edx+0x1]
c001bd2d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd31:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd35:	83 e1 3f             	and    ecx,0x3f
c001bd38:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd3c:	89 f9                	mov    ecx,edi
c001bd3e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd45:	8d 78 02             	lea    edi,[eax+0x2]
c001bd48:	0f b6 c9             	movzx  ecx,cl
c001bd4b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd4e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bd52:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd56:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd5a:	83 e2 3f             	and    edx,0x3f
c001bd5d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd61:	89 f9                	mov    ecx,edi
c001bd63:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bd69:	8d 78 03             	lea    edi,[eax+0x3]
c001bd6c:	0f b6 d1             	movzx  edx,cl
c001bd6f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd72:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bd76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd7a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd7e:	83 e1 3f             	and    ecx,0x3f
c001bd81:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd85:	89 f9                	mov    ecx,edi
c001bd87:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd8d:	8d 78 04             	lea    edi,[eax+0x4]
c001bd90:	0f b6 c9             	movzx  ecx,cl
c001bd93:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd96:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd9a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd9e:	89 fa                	mov    edx,edi
c001bda0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bda6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdaa:	83 e2 3f             	and    edx,0x3f
c001bdad:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdb1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bdb8:	66 85 f6             	test   si,si
c001bdbb:	74 65                	je     c001be22 <IDE::open(int, int, void*)+0x34a>
c001bdbd:	89 f9                	mov    ecx,edi
c001bdbf:	83 c0 05             	add    eax,0x5
c001bdc2:	0f b6 d1             	movzx  edx,cl
c001bdc5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdc8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdcc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bdd0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bdd6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bdda:	83 e0 3f             	and    eax,0x3f
c001bddd:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bde1:	eb 3f                	jmp    c001be22 <IDE::open(int, int, void*)+0x34a>
c001bde3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bdea:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bdf0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bdf7:	05 06 02 00 00       	add    eax,0x206
c001bdfc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be03:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be0a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be11:	05 06 02 00 00       	add    eax,0x206
c001be16:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be1d:	e9 bd fe ff ff       	jmp    c001bcdf <IDE::open(int, int, void*)+0x207>
c001be22:	50                   	push   eax
c001be23:	50                   	push   eax
c001be24:	6a 00                	push   0x0
c001be26:	53                   	push   ebx
c001be27:	e8 2e fa ff ff       	call   c001b85a <IDE::prepareInterrupt(unsigned char)>
c001be2c:	5a                   	pop    edx
c001be2d:	59                   	pop    ecx
c001be2e:	6a 01                	push   0x1
c001be30:	53                   	push   ebx
c001be31:	e8 24 fa ff ff       	call   c001b85a <IDE::prepareInterrupt(unsigned char)>
c001be36:	83 c4 0c             	add    esp,0xc
c001be39:	6a 00                	push   0x0
c001be3b:	6a 00                	push   0x0
c001be3d:	53                   	push   ebx
c001be3e:	e8 4b fc ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001be43:	83 c4 0c             	add    esp,0xc
c001be46:	6a 00                	push   0x0
c001be48:	6a 01                	push   0x1
c001be4a:	53                   	push   ebx
c001be4b:	e8 3e fc ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001be50:	83 c4 10             	add    esp,0x10
c001be53:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001be5a:	74 34                	je     c001be90 <IDE::open(int, int, void*)+0x3b8>
c001be5c:	83 ec 0c             	sub    esp,0xc
c001be5f:	53                   	push   ebx
c001be60:	6a 01                	push   0x1
c001be62:	68 56 ba 01 c0       	push   0xc001ba56
c001be67:	6a 0e                	push   0xe
c001be69:	53                   	push   ebx
c001be6a:	e8 31 08 ff ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be6f:	83 c4 14             	add    esp,0x14
c001be72:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be78:	53                   	push   ebx
c001be79:	6a 01                	push   0x1
c001be7b:	68 72 ba 01 c0       	push   0xc001ba72
c001be80:	6a 0f                	push   0xf
c001be82:	53                   	push   ebx
c001be83:	e8 18 08 ff ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be88:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be8e:	eb 38                	jmp    c001bec8 <IDE::open(int, int, void*)+0x3f0>
c001be90:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be9a:	83 ec 0c             	sub    esp,0xc
c001be9d:	53                   	push   ebx
c001be9e:	6a 00                	push   0x0
c001bea0:	68 56 ba 01 c0       	push   0xc001ba56
c001bea5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001beab:	53                   	push   ebx
c001beac:	e8 ef 07 ff ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001beb1:	83 c4 14             	add    esp,0x14
c001beb4:	53                   	push   ebx
c001beb5:	6a 00                	push   0x0
c001beb7:	68 72 ba 01 c0       	push   0xc001ba72
c001bebc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bec2:	53                   	push   ebx
c001bec3:	e8 d8 07 ff ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beca:	83 c4 20             	add    esp,0x20
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	53                   	push   ebx
c001bed1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bed4:	83 c4 0c             	add    esp,0xc
c001bed7:	6a 07                	push   0x7
c001bed9:	6a 00                	push   0x0
c001bedb:	53                   	push   ebx
c001bedc:	e8 5f fa ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001bee1:	83 c4 0c             	add    esp,0xc
c001bee4:	6a 07                	push   0x7
c001bee6:	6a 01                	push   0x1
c001bee8:	53                   	push   ebx
c001bee9:	e8 52 fa ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001beee:	83 c4 0c             	add    esp,0xc
c001bef1:	6a 01                	push   0x1
c001bef3:	6a 00                	push   0x0
c001bef5:	53                   	push   ebx
c001bef6:	e8 93 fb ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001befb:	83 c4 0c             	add    esp,0xc
c001befe:	6a 01                	push   0x1
c001bf00:	6a 01                	push   0x1
c001bf02:	53                   	push   ebx
c001bf03:	e8 86 fb ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001bf08:	83 c4 2c             	add    esp,0x2c
c001bf0b:	31 c0                	xor    eax,eax
c001bf0d:	5b                   	pop    ebx
c001bf0e:	5e                   	pop    esi
c001bf0f:	5f                   	pop    edi
c001bf10:	5d                   	pop    ebp
c001bf11:	c3                   	ret    

c001bf12 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf12:	55                   	push   ebp
c001bf13:	57                   	push   edi
c001bf14:	56                   	push   esi
c001bf15:	53                   	push   ebx
c001bf16:	83 ec 1c             	sub    esp,0x1c
c001bf19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf25:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf29:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf2c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf30:	3c 03                	cmp    al,0x3
c001bf32:	77 5a                	ja     c001bf8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bf34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf38:	0f b6 db             	movzx  ebx,bl
c001bf3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf3f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf42:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf47:	0c 80                	or     al,0x80
c001bf49:	50                   	push   eax
c001bf4a:	6a 0c                	push   0xc
c001bf4c:	53                   	push   ebx
c001bf4d:	56                   	push   esi
c001bf4e:	e8 2d f9 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf57:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf60:	0f b6 d2             	movzx  edx,dl
c001bf63:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf69:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf6e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bf72:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf76:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf82:	83 c4 2c             	add    esp,0x2c
c001bf85:	5b                   	pop    ebx
c001bf86:	5e                   	pop    esi
c001bf87:	5f                   	pop    edi
c001bf88:	5d                   	pop    ebp
c001bf89:	e9 f2 f8 ff ff       	jmp    c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf8e:	0f b6 c2             	movzx  eax,dl
c001bf91:	83 f8 07             	cmp    eax,0x7
c001bf94:	77 12                	ja     c001bfa8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bf96:	0f b6 db             	movzx  ebx,bl
c001bf99:	0f b6 c2             	movzx  eax,dl
c001bf9c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bfa4:	01 c2                	add    edx,eax
c001bfa6:	eb 2f                	jmp    c001bfd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bfa8:	83 f8 0d             	cmp    eax,0xd
c001bfab:	77 13                	ja     c001bfc0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bfad:	0f b6 db             	movzx  ebx,bl
c001bfb0:	0f b6 d2             	movzx  edx,dl
c001bfb3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bfba:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfbe:	eb 17                	jmp    c001bfd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bfc0:	83 f8 15             	cmp    eax,0x15
c001bfc3:	77 14                	ja     c001bfd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bfc5:	0f b6 db             	movzx  ebx,bl
c001bfc8:	0f b6 d2             	movzx  edx,dl
c001bfcb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bfd3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfd7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfd9:	83 c4 1c             	add    esp,0x1c
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	5f                   	pop    edi
c001bfdf:	5d                   	pop    ebp
c001bfe0:	c3                   	ret    
c001bfe1:	90                   	nop

c001bfe2 <IDE::detect()>:
c001bfe2:	55                   	push   ebp
c001bfe3:	57                   	push   edi
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfec:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bff3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bffa:	0f 85 9e 02 00 00    	jne    c001c29e <IDE::detect()+0x2bc>
c001c000:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c007:	31 f6                	xor    esi,esi
c001c009:	31 ff                	xor    edi,edi
c001c00b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c013:	89 f8                	mov    eax,edi
c001c015:	c1 e0 06             	shl    eax,0x6
c001c018:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c020:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c024:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c02c:	c1 e0 04             	shl    eax,0x4
c001c02f:	83 c8 a0             	or     eax,0xffffffa0
c001c032:	0f b6 c0             	movzx  eax,al
c001c035:	50                   	push   eax
c001c036:	6a 06                	push   0x6
c001c038:	56                   	push   esi
c001c039:	53                   	push   ebx
c001c03a:	e8 41 f8 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c03f:	83 c4 0c             	add    esp,0xc
c001c042:	6a 0c                	push   0xc
c001c044:	56                   	push   esi
c001c045:	53                   	push   ebx
c001c046:	e8 f5 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c04b:	83 c4 0c             	add    esp,0xc
c001c04e:	6a 0c                	push   0xc
c001c050:	56                   	push   esi
c001c051:	53                   	push   ebx
c001c052:	e8 e9 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c057:	83 c4 0c             	add    esp,0xc
c001c05a:	6a 0c                	push   0xc
c001c05c:	56                   	push   esi
c001c05d:	53                   	push   ebx
c001c05e:	e8 dd f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c063:	83 c4 0c             	add    esp,0xc
c001c066:	6a 0c                	push   0xc
c001c068:	56                   	push   esi
c001c069:	53                   	push   ebx
c001c06a:	e8 d1 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c06f:	68 ec 00 00 00       	push   0xec
c001c074:	6a 07                	push   0x7
c001c076:	56                   	push   esi
c001c077:	53                   	push   ebx
c001c078:	e8 03 f8 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c07d:	83 c4 1c             	add    esp,0x1c
c001c080:	6a 0c                	push   0xc
c001c082:	56                   	push   esi
c001c083:	53                   	push   ebx
c001c084:	e8 b7 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c089:	83 c4 0c             	add    esp,0xc
c001c08c:	6a 0c                	push   0xc
c001c08e:	56                   	push   esi
c001c08f:	53                   	push   ebx
c001c090:	e8 ab f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c095:	83 c4 0c             	add    esp,0xc
c001c098:	6a 0c                	push   0xc
c001c09a:	56                   	push   esi
c001c09b:	53                   	push   ebx
c001c09c:	e8 9f f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c0a1:	83 c4 0c             	add    esp,0xc
c001c0a4:	6a 0c                	push   0xc
c001c0a6:	56                   	push   esi
c001c0a7:	53                   	push   ebx
c001c0a8:	e8 93 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c0ad:	83 c4 0c             	add    esp,0xc
c001c0b0:	6a 0c                	push   0xc
c001c0b2:	56                   	push   esi
c001c0b3:	53                   	push   ebx
c001c0b4:	e8 87 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c0b9:	83 c4 10             	add    esp,0x10
c001c0bc:	84 c0                	test   al,al
c001c0be:	0f 84 61 01 00 00    	je     c001c225 <IDE::detect()+0x243>
c001c0c4:	31 ed                	xor    ebp,ebp
c001c0c6:	50                   	push   eax
c001c0c7:	6a 0c                	push   0xc
c001c0c9:	56                   	push   esi
c001c0ca:	53                   	push   ebx
c001c0cb:	e8 70 f8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c0d0:	83 c4 10             	add    esp,0x10
c001c0d3:	a8 01                	test   al,0x1
c001c0d5:	0f 85 6b 01 00 00    	jne    c001c246 <IDE::detect()+0x264>
c001c0db:	a8 80                	test   al,0x80
c001c0dd:	75 04                	jne    c001c0e3 <IDE::detect()+0x101>
c001c0df:	a8 08                	test   al,0x8
c001c0e1:	75 23                	jne    c001c106 <IDE::detect()+0x124>
c001c0e3:	45                   	inc    ebp
c001c0e4:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c0ea:	7e da                	jle    c001c0c6 <IDE::detect()+0xe4>
c001c0ec:	83 ec 0c             	sub    esp,0xc
c001c0ef:	6a 32                	push   0x32
c001c0f1:	e8 b6 9d ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001c0f6:	83 c4 10             	add    esp,0x10
c001c0f9:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c0ff:	75 c5                	jne    c001c0c6 <IDE::detect()+0xe4>
c001c101:	e9 40 01 00 00       	jmp    c001c246 <IDE::detect()+0x264>
c001c106:	31 c9                	xor    ecx,ecx
c001c108:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c10c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c110:	83 ec 0c             	sub    esp,0xc
c001c113:	68 80 00 00 00       	push   0x80
c001c118:	55                   	push   ebp
c001c119:	6a 00                	push   0x0
c001c11b:	56                   	push   esi
c001c11c:	53                   	push   ebx
c001c11d:	e8 f0 fd ff ff       	call   c001bf12 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c122:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c127:	89 f8                	mov    eax,edi
c001c129:	c1 e0 06             	shl    eax,0x6
c001c12c:	01 d8                	add    eax,ebx
c001c12e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c135:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c13c:	89 d1                	mov    ecx,edx
c001c13e:	89 f2                	mov    edx,esi
c001c140:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c146:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c14a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c150:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c154:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c15b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c163:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c16a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c172:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c178:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c17f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c185:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c189:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c18d:	83 c4 20             	add    esp,0x20
c001c190:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c193:	83 c5 02             	add    ebp,0x2
c001c196:	83 c0 02             	add    eax,0x2
c001c199:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c19f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c1a2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c1a8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c1ac:	75 e2                	jne    c001c190 <IDE::detect()+0x1ae>
c001c1ae:	89 f8                	mov    eax,edi
c001c1b0:	c1 e0 06             	shl    eax,0x6
c001c1b3:	01 d8                	add    eax,ebx
c001c1b5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c1bc:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c1c3:	c1 ea 09             	shr    edx,0x9
c001c1c6:	83 e2 01             	and    edx,0x1
c001c1c9:	80 e1 01             	and    cl,0x1
c001c1cc:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c1d2:	75 22                	jne    c001c1f6 <IDE::detect()+0x214>
c001c1d4:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c1db:	74 47                	je     c001c224 <IDE::detect()+0x242>
c001c1dd:	83 ec 0c             	sub    esp,0xc
c001c1e0:	68 7c 01 00 00       	push   0x17c
c001c1e5:	e8 e9 b8 fe ff       	call   c0007ad3 <malloc>
c001c1ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1ed:	89 c5                	mov    ebp,eax
c001c1ef:	e8 16 05 00 00       	call   c001c70a <ATA::ATA()>
c001c1f4:	eb 17                	jmp    c001c20d <IDE::detect()+0x22b>
c001c1f6:	83 ec 0c             	sub    esp,0xc
c001c1f9:	68 84 01 00 00       	push   0x184
c001c1fe:	e8 d0 b8 fe ff       	call   c0007ad3 <malloc>
c001c203:	89 04 24             	mov    DWORD PTR [esp],eax
c001c206:	89 c5                	mov    ebp,eax
c001c208:	e8 6f 0e 00 00       	call   c001d07c <ATAPI::ATAPI()>
c001c20d:	5a                   	pop    edx
c001c20e:	59                   	pop    ecx
c001c20f:	55                   	push   ebp
c001c210:	53                   	push   ebx
c001c211:	e8 de 04 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c001c216:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c219:	53                   	push   ebx
c001c21a:	57                   	push   edi
c001c21b:	6a 00                	push   0x0
c001c21d:	55                   	push   ebp
c001c21e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c221:	83 c4 20             	add    esp,0x20
c001c224:	47                   	inc    edi
c001c225:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c22a:	74 0d                	je     c001c239 <IDE::detect()+0x257>
c001c22c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c234:	e9 da fd ff ff       	jmp    c001c013 <IDE::detect()+0x31>
c001c239:	4e                   	dec    esi
c001c23a:	74 62                	je     c001c29e <IDE::detect()+0x2bc>
c001c23c:	be 01 00 00 00       	mov    esi,0x1
c001c241:	e9 c5 fd ff ff       	jmp    c001c00b <IDE::detect()+0x29>
c001c246:	50                   	push   eax
c001c247:	6a 04                	push   0x4
c001c249:	56                   	push   esi
c001c24a:	53                   	push   ebx
c001c24b:	e8 f0 f6 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c250:	83 c4 0c             	add    esp,0xc
c001c253:	6a 05                	push   0x5
c001c255:	56                   	push   esi
c001c256:	53                   	push   ebx
c001c257:	89 c5                	mov    ebp,eax
c001c259:	e8 e2 f6 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c25e:	89 e9                	mov    ecx,ebp
c001c260:	83 c4 10             	add    esp,0x10
c001c263:	0f b6 e9             	movzx  ebp,cl
c001c266:	83 fd 14             	cmp    ebp,0x14
c001c269:	74 2d                	je     c001c298 <IDE::detect()+0x2b6>
c001c26b:	83 fd 69             	cmp    ebp,0x69
c001c26e:	75 b5                	jne    c001c225 <IDE::detect()+0x243>
c001c270:	3c 96                	cmp    al,0x96
c001c272:	75 b1                	jne    c001c225 <IDE::detect()+0x243>
c001c274:	68 a1 00 00 00       	push   0xa1
c001c279:	6a 07                	push   0x7
c001c27b:	56                   	push   esi
c001c27c:	53                   	push   ebx
c001c27d:	e8 fe f5 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c282:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c289:	e8 1e 9c ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	b1 01                	mov    cl,0x1
c001c293:	e9 70 fe ff ff       	jmp    c001c108 <IDE::detect()+0x126>
c001c298:	3c eb                	cmp    al,0xeb
c001c29a:	75 cf                	jne    c001c26b <IDE::detect()+0x289>
c001c29c:	eb d6                	jmp    c001c274 <IDE::detect()+0x292>
c001c29e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2a4:	5b                   	pop    ebx
c001c2a5:	5e                   	pop    esi
c001c2a6:	5f                   	pop    edi
c001c2a7:	5d                   	pop    ebp
c001c2a8:	c3                   	ret    
c001c2a9:	90                   	nop

c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c2aa:	55                   	push   ebp
c001c2ab:	57                   	push   edi
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	83 ec 1c             	sub    esp,0x1c
c001c2b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c2b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c2bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2c5:	88 c3                	mov    bl,al
c001c2c7:	25 ff 00 00 00       	and    eax,0xff
c001c2cc:	0f 84 88 00 00 00    	je     c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2d2:	83 ec 0c             	sub    esp,0xc
c001c2d5:	89 c7                	mov    edi,eax
c001c2d7:	68 cb 2c 02 c0       	push   0xc0022ccb
c001c2dc:	e8 29 e6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	83 ff 01             	cmp    edi,0x1
c001c2e7:	74 6b                	je     c001c354 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c2e9:	83 ff 02             	cmp    edi,0x2
c001c2ec:	75 58                	jne    c001c346 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c2ee:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c2f3:	50                   	push   eax
c001c2f4:	6a 01                	push   0x1
c001c2f6:	01 ff                	add    edi,edi
c001c2f8:	09 fe                	or     esi,edi
c001c2fa:	89 f0                	mov    eax,esi
c001c2fc:	0f b6 f0             	movzx  esi,al
c001c2ff:	c1 e6 06             	shl    esi,0x6
c001c302:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c30a:	50                   	push   eax
c001c30b:	55                   	push   ebp
c001c30c:	e8 2f f6 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	a8 01                	test   al,0x1
c001c316:	74 02                	je     c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c318:	b3 07                	mov    bl,0x7
c001c31a:	a8 02                	test   al,0x2
c001c31c:	74 02                	je     c001c320 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c31e:	b3 03                	mov    bl,0x3
c001c320:	a8 04                	test   al,0x4
c001c322:	74 02                	je     c001c326 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c324:	b3 14                	mov    bl,0x14
c001c326:	a8 08                	test   al,0x8
c001c328:	74 02                	je     c001c32c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c32a:	b3 03                	mov    bl,0x3
c001c32c:	a8 10                	test   al,0x10
c001c32e:	74 02                	je     c001c332 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c330:	b3 15                	mov    bl,0x15
c001c332:	a8 20                	test   al,0x20
c001c334:	74 02                	je     c001c338 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c336:	b3 03                	mov    bl,0x3
c001c338:	a8 40                	test   al,0x40
c001c33a:	74 02                	je     c001c33e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c33c:	b3 16                	mov    bl,0x16
c001c33e:	a8 80                	test   al,0x80
c001c340:	74 18                	je     c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c342:	b3 0d                	mov    bl,0xd
c001c344:	eb 14                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c346:	83 ff 03             	cmp    edi,0x3
c001c349:	74 0d                	je     c001c358 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c34b:	83 ff 04             	cmp    edi,0x4
c001c34e:	75 0a                	jne    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c350:	b3 08                	mov    bl,0x8
c001c352:	eb 06                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c354:	b3 13                	mov    bl,0x13
c001c356:	eb 02                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c358:	b3 17                	mov    bl,0x17
c001c35a:	83 c4 1c             	add    esp,0x1c
c001c35d:	88 d8                	mov    al,bl
c001c35f:	5b                   	pop    ebx
c001c360:	5e                   	pop    esi
c001c361:	5f                   	pop    edi
c001c362:	5d                   	pop    ebp
c001c363:	c3                   	ret    

c001c364 <IDE::polling(unsigned char, unsigned int)>:
c001c364:	57                   	push   edi
c001c365:	56                   	push   esi
c001c366:	53                   	push   ebx
c001c367:	bb 04 00 00 00       	mov    ebx,0x4
c001c36c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c370:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c375:	52                   	push   edx
c001c376:	6a 0c                	push   0xc
c001c378:	56                   	push   esi
c001c379:	57                   	push   edi
c001c37a:	e8 c1 f5 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	4b                   	dec    ebx
c001c383:	75 f0                	jne    c001c375 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c385:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c38a:	50                   	push   eax
c001c38b:	6a 0c                	push   0xc
c001c38d:	56                   	push   esi
c001c38e:	57                   	push   edi
c001c38f:	e8 ac f5 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	a8 01                	test   al,0x1
c001c399:	75 17                	jne    c001c3b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c39b:	a8 20                	test   al,0x20
c001c39d:	75 0f                	jne    c001c3ae <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c39f:	4b                   	dec    ebx
c001c3a0:	74 10                	je     c001c3b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3a2:	a8 80                	test   al,0x80
c001c3a4:	75 e4                	jne    c001c38a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3a6:	a8 08                	test   al,0x8
c001c3a8:	74 e0                	je     c001c38a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3aa:	31 c0                	xor    eax,eax
c001c3ac:	eb 06                	jmp    c001c3b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c3ae:	b0 01                	mov    al,0x1
c001c3b0:	eb 02                	jmp    c001c3b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c3b2:	b0 02                	mov    al,0x2
c001c3b4:	5b                   	pop    ebx
c001c3b5:	5e                   	pop    esi
c001c3b6:	5f                   	pop    edi
c001c3b7:	c3                   	ret    

c001c3b8 <SATABus::close(int, int, void*)>:
c001c3b8:	31 c0                	xor    eax,eax
c001c3ba:	c3                   	ret    
c001c3bb:	90                   	nop

c001c3bc <SATABus::detect()>:
c001c3bc:	c3                   	ret    
c001c3bd:	90                   	nop

c001c3be <SATABus::SATABus()>:
c001c3be:	83 ec 0c             	sub    esp,0xc
c001c3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c5:	83 ec 08             	sub    esp,0x8
c001c3c8:	68 04 2d 02 c0       	push   0xc0022d04
c001c3cd:	50                   	push   eax
c001c3ce:	e8 65 06 ff ff       	call   c000ca38 <HardDiskController::HardDiskController(char const*)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	ba 30 2d 02 c0       	mov    edx,0xc0022d30
c001c3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3df:	89 10                	mov    DWORD PTR [eax],edx
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	6a 50                	push   0x50
c001c3e6:	e8 c6 ba fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c3eb:	83 c4 10             	add    esp,0x10
c001c3ee:	89 c2                	mov    edx,eax
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c3fa:	83 ec 0c             	sub    esp,0xc
c001c3fd:	6a 50                	push   0x50
c001c3ff:	e8 f1 d1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	89 c2                	mov    edx,eax
c001c409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c413:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c41c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c426:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	6a 03                	push   0x3
c001c431:	6a 50                	push   0x50
c001c433:	51                   	push   ecx
c001c434:	52                   	push   edx
c001c435:	50                   	push   eax
c001c436:	e8 cd da fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c43b:	83 c4 20             	add    esp,0x20
c001c43e:	90                   	nop
c001c43f:	83 c4 0c             	add    esp,0xc
c001c442:	c3                   	ret    
c001c443:	90                   	nop

c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c448:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c44b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c44e:	09 c2                	or     edx,eax
c001c450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c454:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c45a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c45c:	31 c0                	xor    eax,eax
c001c45e:	c1 e9 08             	shr    ecx,0x8
c001c461:	83 e1 0f             	and    ecx,0xf
c001c464:	39 c8                	cmp    eax,ecx
c001c466:	74 0a                	je     c001c472 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c468:	f6 c2 01             	test   dl,0x1
c001c46b:	74 08                	je     c001c475 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c46d:	d1 ea                	shr    edx,1
c001c46f:	40                   	inc    eax
c001c470:	eb f2                	jmp    c001c464 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c472:	83 c8 ff             	or     eax,0xffffffff
c001c475:	c3                   	ret    

c001c476 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c476:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c47a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c47d:	89 c2                	mov    edx,eax
c001c47f:	c1 ea 08             	shr    edx,0x8
c001c482:	83 e2 0f             	and    edx,0xf
c001c485:	4a                   	dec    edx
c001c486:	75 32                	jne    c001c4ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c488:	83 e0 0f             	and    eax,0xf
c001c48b:	83 f8 03             	cmp    eax,0x3
c001c48e:	75 2a                	jne    c001c4ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c490:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c493:	b8 02 00 00 00       	mov    eax,0x2
c001c498:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c49e:	74 1c                	je     c001c4bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4a0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c4a6:	b8 04 00 00 00       	mov    eax,0x4
c001c4ab:	74 0f                	je     c001c4bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4ad:	31 c0                	xor    eax,eax
c001c4af:	83 fa 03             	cmp    edx,0x3
c001c4b2:	0f 94 c0             	sete   al
c001c4b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c4b9:	c3                   	ret    
c001c4ba:	31 c0                	xor    eax,eax
c001c4bc:	c3                   	ret    
c001c4bd:	90                   	nop

c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c4be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4c5:	0f ba e2 0f          	bt     edx,0xf
c001c4c9:	72 f7                	jb     c001c4c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c4cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4ce:	83 ca 10             	or     edx,0x10
c001c4d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4d7:	83 ca 01             	or     edx,0x1
c001c4da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4dd:	c3                   	ret    

c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c4de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4e5:	83 e2 fe             	and    edx,0xfffffffe
c001c4e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4ee:	83 e2 ef             	and    edx,0xffffffef
c001c4f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4f7:	0f ba e2 0e          	bt     edx,0xe
c001c4fb:	72 f7                	jb     c001c4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c4fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c500:	0f ba e2 0f          	bt     edx,0xf
c001c504:	72 ee                	jb     c001c4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c506:	c3                   	ret    
c001c507:	90                   	nop

c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c508:	55                   	push   ebp
c001c509:	57                   	push   edi
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	83 ec 1c             	sub    esp,0x1c
c001c50f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c513:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c517:	53                   	push   ebx
c001c518:	57                   	push   edi
c001c519:	e8 c0 ff ff ff       	call   c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c51e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c522:	83 ec 0c             	sub    esp,0xc
c001c525:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c52b:	c1 e5 0a             	shl    ebp,0xa
c001c52e:	01 e8                	add    eax,ebp
c001c530:	89 03                	mov    DWORD PTR [ebx],eax
c001c532:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c534:	68 00 04 00 00       	push   0x400
c001c539:	6a 00                	push   0x0
c001c53b:	50                   	push   eax
c001c53c:	e8 af 3f fe ff       	call   c00004f0 <memset>
c001c541:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c547:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c54b:	83 c4 1c             	add    esp,0x1c
c001c54e:	01 e8                	add    eax,ebp
c001c550:	89 03                	mov    DWORD PTR [ebx],eax
c001c552:	c1 e6 08             	shl    esi,0x8
c001c555:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c55c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c562:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c568:	01 f0                	add    eax,esi
c001c56a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c56d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c570:	68 00 01 00 00       	push   0x100
c001c575:	6a 00                	push   0x0
c001c577:	50                   	push   eax
c001c578:	e8 73 3f fe ff       	call   c00004f0 <memset>
c001c57d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c583:	31 d2                	xor    edx,edx
c001c585:	01 f0                	add    eax,esi
c001c587:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c58a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c591:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c597:	01 ee                	add    esi,ebp
c001c599:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c59d:	83 c4 10             	add    esp,0x10
c001c5a0:	c1 e5 0d             	shl    ebp,0xd
c001c5a3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c5a9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c5af:	83 c6 20             	add    esi,0x20
c001c5b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5b6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c5bc:	01 e8                	add    eax,ebp
c001c5be:	01 d0                	add    eax,edx
c001c5c0:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c5c3:	52                   	push   edx
c001c5c4:	68 00 01 00 00       	push   0x100
c001c5c9:	6a 00                	push   0x0
c001c5cb:	50                   	push   eax
c001c5cc:	e8 1f 3f fe ff       	call   c00004f0 <memset>
c001c5d1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c5d7:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c5de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	01 e8                	add    eax,ebp
c001c5e7:	01 d0                	add    eax,edx
c001c5e9:	81 c2 00 01 00 00    	add    edx,0x100
c001c5ef:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c5f2:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c5f8:	75 af                	jne    c001c5a9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c5fa:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c601:	50                   	push   eax
c001c602:	50                   	push   eax
c001c603:	53                   	push   ebx
c001c604:	57                   	push   edi
c001c605:	e8 b4 fe ff ff       	call   c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c60a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c611:	83 c4 2c             	add    esp,0x2c
c001c614:	5b                   	pop    ebx
c001c615:	5e                   	pop    esi
c001c616:	5f                   	pop    edi
c001c617:	5d                   	pop    ebp
c001c618:	c3                   	ret    
c001c619:	90                   	nop

c001c61a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c61a:	55                   	push   ebp
c001c61b:	57                   	push   edi
c001c61c:	56                   	push   esi
c001c61d:	53                   	push   ebx
c001c61e:	31 db                	xor    ebx,ebx
c001c620:	83 ec 0c             	sub    esp,0xc
c001c623:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c627:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c62b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c62e:	f7 c7 01 00 00 00    	test   edi,0x1
c001c634:	74 7a                	je     c001c6b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c636:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c63a:	89 d8                	mov    eax,ebx
c001c63c:	c1 e0 07             	shl    eax,0x7
c001c63f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c646:	55                   	push   ebp
c001c647:	56                   	push   esi
c001c648:	e8 29 fe ff ff       	call   c001c476 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c64d:	5a                   	pop    edx
c001c64e:	59                   	pop    ecx
c001c64f:	83 f8 01             	cmp    eax,0x1
c001c652:	75 21                	jne    c001c675 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c654:	50                   	push   eax
c001c655:	53                   	push   ebx
c001c656:	55                   	push   ebp
c001c657:	56                   	push   esi
c001c658:	e8 ab fe ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c65d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c664:	e8 6a b4 fe ff       	call   c0007ad3 <malloc>
c001c669:	89 04 24             	mov    DWORD PTR [esp],eax
c001c66c:	89 c5                	mov    ebp,eax
c001c66e:	e8 c1 10 00 00       	call   c001d734 <SATA::SATA()>
c001c673:	eb 24                	jmp    c001c699 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c675:	83 f8 04             	cmp    eax,0x4
c001c678:	75 36                	jne    c001c6b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c67a:	51                   	push   ecx
c001c67b:	53                   	push   ebx
c001c67c:	55                   	push   ebp
c001c67d:	56                   	push   esi
c001c67e:	e8 85 fe ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c683:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c68a:	e8 44 b4 fe ff       	call   c0007ad3 <malloc>
c001c68f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c692:	89 c5                	mov    ebp,eax
c001c694:	e8 f5 17 00 00       	call   c001de8e <SATAPI::SATAPI()>
c001c699:	58                   	pop    eax
c001c69a:	5a                   	pop    edx
c001c69b:	55                   	push   ebp
c001c69c:	56                   	push   esi
c001c69d:	e8 52 00 ff ff       	call   c000c6f4 <Device::addChild(Device*)>
c001c6a2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c6a5:	56                   	push   esi
c001c6a6:	6a 00                	push   0x0
c001c6a8:	53                   	push   ebx
c001c6a9:	55                   	push   ebp
c001c6aa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c6ad:	83 c4 20             	add    esp,0x20
c001c6b0:	d1 ef                	shr    edi,1
c001c6b2:	43                   	inc    ebx
c001c6b3:	83 fb 20             	cmp    ebx,0x20
c001c6b6:	0f 85 72 ff ff ff    	jne    c001c62e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c6bc:	83 c4 0c             	add    esp,0xc
c001c6bf:	5b                   	pop    ebx
c001c6c0:	5e                   	pop    esi
c001c6c1:	5f                   	pop    edi
c001c6c2:	5d                   	pop    ebp
c001c6c3:	c3                   	ret    

c001c6c4 <SATABus::open(int, int, void*)>:
c001c6c4:	83 ec 14             	sub    esp,0x14
c001c6c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6cb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c6d1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c6d7:	52                   	push   edx
c001c6d8:	50                   	push   eax
c001c6d9:	e8 3c ff ff ff       	call   c001c61a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c6de:	31 c0                	xor    eax,eax
c001c6e0:	83 c4 1c             	add    esp,0x1c
c001c6e3:	c3                   	ret    

c001c6e4 <ATA::close(int, int, void*)>:
c001c6e4:	83 ec 0c             	sub    esp,0xc
c001c6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6f1:	85 c0                	test   eax,eax
c001c6f3:	74 0c                	je     c001c701 <ATA::close(int, int, void*)+0x1d>
c001c6f5:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6f7:	83 ec 0c             	sub    esp,0xc
c001c6fa:	50                   	push   eax
c001c6fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c6fe:	83 c4 10             	add    esp,0x10
c001c701:	31 c0                	xor    eax,eax
c001c703:	83 c4 0c             	add    esp,0xc
c001c706:	c3                   	ret    
c001c707:	90                   	nop

c001c708 <ATA::powerSaving(PowerSavingLevel)>:
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <ATA::ATA()>:
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c711:	83 ec 04             	sub    esp,0x4
c001c714:	68 00 02 00 00       	push   0x200
c001c719:	68 fd 2d 02 c0       	push   0xc0022dfd
c001c71e:	50                   	push   eax
c001c71f:	e8 9e 03 ff ff       	call   c000cac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	ba 70 2d 02 c0       	mov    edx,0xc0022d70
c001c72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c730:	89 10                	mov    DWORD PTR [eax],edx
c001c732:	90                   	nop
c001c733:	83 c4 0c             	add    esp,0xc
c001c736:	c3                   	ret    
c001c737:	90                   	nop

c001c738 <ATA::flush(bool)>:
c001c738:	53                   	push   ebx
c001c739:	83 ec 08             	sub    esp,0x8
c001c73c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c741:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c745:	83 f8 01             	cmp    eax,0x1
c001c748:	19 c0                	sbb    eax,eax
c001c74a:	83 e0 fd             	and    eax,0xfffffffd
c001c74d:	05 ea 00 00 00       	add    eax,0xea
c001c752:	50                   	push   eax
c001c753:	6a 07                	push   0x7
c001c755:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c75c:	50                   	push   eax
c001c75d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c763:	e8 18 f1 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c768:	83 c4 0c             	add    esp,0xc
c001c76b:	6a 00                	push   0x0
c001c76d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c774:	50                   	push   eax
c001c775:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c77b:	e8 e4 fb ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001c780:	83 c4 18             	add    esp,0x18
c001c783:	5b                   	pop    ebx
c001c784:	c3                   	ret    
c001c785:	90                   	nop

c001c786 <ATA::readyForCommand()>:
c001c786:	56                   	push   esi
c001c787:	53                   	push   ebx
c001c788:	53                   	push   ebx
c001c789:	31 db                	xor    ebx,ebx
c001c78b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c78f:	51                   	push   ecx
c001c790:	6a 0c                	push   0xc
c001c792:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c799:	50                   	push   eax
c001c79a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7a0:	e8 9b f1 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	a8 88                	test   al,0x88
c001c7aa:	74 1f                	je     c001c7cb <ATA::readyForCommand()+0x45>
c001c7ac:	43                   	inc    ebx
c001c7ad:	83 fb 63             	cmp    ebx,0x63
c001c7b0:	7e dd                	jle    c001c78f <ATA::readyForCommand()+0x9>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	6a 0a                	push   0xa
c001c7b7:	e8 f0 96 ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c7c5:	75 c8                	jne    c001c78f <ATA::readyForCommand()+0x9>
c001c7c7:	31 c0                	xor    eax,eax
c001c7c9:	eb 02                	jmp    c001c7cd <ATA::readyForCommand()+0x47>
c001c7cb:	b0 01                	mov    al,0x1
c001c7cd:	5a                   	pop    edx
c001c7ce:	5b                   	pop    ebx
c001c7cf:	5e                   	pop    esi
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop

c001c7d2 <ATA::access(unsigned long long, int, void*, bool)>:
c001c7d2:	55                   	push   ebp
c001c7d3:	57                   	push   edi
c001c7d4:	56                   	push   esi
c001c7d5:	53                   	push   ebx
c001c7d6:	83 ec 2c             	sub    esp,0x2c
c001c7d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c7dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c7e1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c7e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c7e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7ed:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7f1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c7f5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c809:	c1 e0 06             	shl    eax,0x6
c001c80c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c814:	74 5b                	je     c001c871 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c816:	89 fa                	mov    edx,edi
c001c818:	89 f0                	mov    eax,esi
c001c81a:	c1 ea 1c             	shr    edx,0x1c
c001c81d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c821:	89 d1                	mov    ecx,edx
c001c823:	09 c1                	or     ecx,eax
c001c825:	74 25                	je     c001c84c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c827:	31 ed                	xor    ebp,ebp
c001c829:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c830:	89 fa                	mov    edx,edi
c001c832:	89 f0                	mov    eax,esi
c001c834:	0f ad d0             	shrd   eax,edx,cl
c001c837:	d3 ea                	shr    edx,cl
c001c839:	f6 c1 20             	test   cl,0x20
c001c83c:	74 02                	je     c001c840 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c83e:	89 d0                	mov    eax,edx
c001c840:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c844:	45                   	inc    ebp
c001c845:	83 fd 06             	cmp    ebp,0x6
c001c848:	75 df                	jne    c001c829 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c84a:	eb 71                	jmp    c001c8bd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c84c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c851:	89 f0                	mov    eax,esi
c001c853:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c85a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c85e:	bf 01 00 00 00       	mov    edi,0x1
c001c863:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c867:	c1 ee 18             	shr    esi,0x18
c001c86a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c86f:	eb 53                	jmp    c001c8c4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c871:	6a 00                	push   0x0
c001c873:	6a 3f                	push   0x3f
c001c875:	57                   	push   edi
c001c876:	56                   	push   esi
c001c877:	e8 d4 2a 00 00       	call   c001f350 <__umoddi3>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	40                   	inc    eax
c001c880:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c884:	6a 00                	push   0x0
c001c886:	68 f0 03 00 00       	push   0x3f0
c001c88b:	57                   	push   edi
c001c88c:	56                   	push   esi
c001c88d:	e8 be 29 00 00       	call   c001f250 <__udivdi3>
c001c892:	83 c4 10             	add    esp,0x10
c001c895:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c89a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8a6:	6a 00                	push   0x0
c001c8a8:	6a 3f                	push   0x3f
c001c8aa:	57                   	push   edi
c001c8ab:	31 ff                	xor    edi,edi
c001c8ad:	56                   	push   esi
c001c8ae:	e8 9d 29 00 00       	call   c001f250 <__udivdi3>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	83 e0 0f             	and    eax,0xf
c001c8b9:	89 c6                	mov    esi,eax
c001c8bb:	eb 07                	jmp    c001c8c4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c8bd:	31 f6                	xor    esi,esi
c001c8bf:	bf 02 00 00 00       	mov    edi,0x2
c001c8c4:	50                   	push   eax
c001c8c5:	6a 00                	push   0x0
c001c8c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ce:	50                   	push   eax
c001c8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8d3:	e8 b6 f1 ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001c8d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8db:	e8 a6 fe ff ff       	call   c001c786 <ATA::readyForCommand()>
c001c8e0:	83 c4 10             	add    esp,0x10
c001c8e3:	84 c0                	test   al,al
c001c8e5:	75 0a                	jne    c001c8f1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c8e7:	be 01 00 00 00       	mov    esi,0x1
c001c8ec:	e9 9b 02 00 00       	jmp    c001cb8c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c8f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c8f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c8fd:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c904:	c1 e0 04             	shl    eax,0x4
c001c907:	09 c6                	or     esi,eax
c001c909:	f7 c7 03 00 00 00    	test   edi,0x3
c001c90f:	75 05                	jne    c001c916 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c911:	83 ce a0             	or     esi,0xffffffa0
c001c914:	eb 03                	jmp    c001c919 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c916:	83 ce e0             	or     esi,0xffffffe0
c001c919:	89 f0                	mov    eax,esi
c001c91b:	0f b6 f0             	movzx  esi,al
c001c91e:	56                   	push   esi
c001c91f:	6a 06                	push   0x6
c001c921:	51                   	push   ecx
c001c922:	52                   	push   edx
c001c923:	e8 58 ef ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c928:	83 c4 10             	add    esp,0x10
c001c92b:	6a 00                	push   0x0
c001c92d:	6a 01                	push   0x1
c001c92f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c936:	50                   	push   eax
c001c937:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c93d:	e8 3e ef ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c942:	89 f8                	mov    eax,edi
c001c944:	83 c4 10             	add    esp,0x10
c001c947:	0f b6 f0             	movzx  esi,al
c001c94a:	83 fe 02             	cmp    esi,0x2
c001c94d:	75 6e                	jne    c001c9bd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c94f:	6a 00                	push   0x0
c001c951:	6a 08                	push   0x8
c001c953:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c95a:	50                   	push   eax
c001c95b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c961:	e8 1a ef ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c966:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c96b:	50                   	push   eax
c001c96c:	6a 09                	push   0x9
c001c96e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c975:	50                   	push   eax
c001c976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c97c:	e8 ff ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c981:	83 c4 20             	add    esp,0x20
c001c984:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c989:	50                   	push   eax
c001c98a:	6a 0a                	push   0xa
c001c98c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c993:	50                   	push   eax
c001c994:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c99a:	e8 e1 ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9a4:	50                   	push   eax
c001c9a5:	6a 0b                	push   0xb
c001c9a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ae:	50                   	push   eax
c001c9af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b5:	e8 c6 ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ba:	83 c4 20             	add    esp,0x20
c001c9bd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c9c2:	50                   	push   eax
c001c9c3:	6a 02                	push   0x2
c001c9c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cc:	50                   	push   eax
c001c9cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d3:	e8 a8 ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c9dd:	50                   	push   eax
c001c9de:	6a 03                	push   0x3
c001c9e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e7:	50                   	push   eax
c001c9e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ee:	e8 8d ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f3:	83 c4 20             	add    esp,0x20
c001c9f6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c9fb:	50                   	push   eax
c001c9fc:	6a 04                	push   0x4
c001c9fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca05:	50                   	push   eax
c001ca06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0c:	e8 6f ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca16:	50                   	push   eax
c001ca17:	6a 05                	push   0x5
c001ca19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca20:	50                   	push   eax
c001ca21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca27:	e8 54 ee ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2c:	83 c4 20             	add    esp,0x20
c001ca2f:	83 fe 02             	cmp    esi,0x2
c001ca32:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001ca37:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ca3c:	85 c9                	test   ecx,ecx
c001ca3e:	74 07                	je     c001ca47 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca45:	75 47                	jne    c001ca8e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ca47:	89 f8                	mov    eax,edi
c001ca49:	0f b6 f8             	movzx  edi,al
c001ca4c:	31 c0                	xor    eax,eax
c001ca4e:	83 ff 02             	cmp    edi,0x2
c001ca51:	0f 95 c0             	setne  al
c001ca54:	89 c6                	mov    esi,eax
c001ca56:	74 0c                	je     c001ca64 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001ca58:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca5d:	b8 30 00 00 00       	mov    eax,0x30
c001ca62:	75 2f                	jne    c001ca93 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca68:	83 f2 01             	xor    edx,0x1
c001ca6b:	85 c9                	test   ecx,ecx
c001ca6d:	74 09                	je     c001ca78 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ca6f:	84 d2                	test   dl,dl
c001ca71:	b8 24 00 00 00       	mov    eax,0x24
c001ca76:	75 1b                	jne    c001ca93 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca78:	85 f6                	test   esi,esi
c001ca7a:	0f 84 67 fe ff ff    	je     c001c8e7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ca80:	84 d2                	test   dl,dl
c001ca82:	b8 20 00 00 00       	mov    eax,0x20
c001ca87:	75 0a                	jne    c001ca93 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca89:	e9 59 fe ff ff       	jmp    c001c8e7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ca8e:	b8 34 00 00 00       	mov    eax,0x34
c001ca93:	50                   	push   eax
c001ca94:	6a 07                	push   0x7
c001ca96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9d:	50                   	push   eax
c001ca9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa4:	e8 d7 ed ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001caad:	83 c4 10             	add    esp,0x10
c001cab0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cab5:	85 f6                	test   esi,esi
c001cab7:	0f 84 b5 00 00 00    	je     c001cb72 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cabd:	50                   	push   eax
c001cabe:	6a 01                	push   0x1
c001cac0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac7:	50                   	push   eax
c001cac8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cace:	e8 91 f8 ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cadc:	0f b6 c0             	movzx  eax,al
c001cadf:	85 c0                	test   eax,eax
c001cae1:	74 1f                	je     c001cb02 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cae3:	50                   	push   eax
c001cae4:	89 c6                	mov    esi,eax
c001cae6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001caed:	0f b6 d2             	movzx  edx,dl
c001caf0:	50                   	push   eax
c001caf1:	52                   	push   edx
c001caf2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf8:	e8 ad f7 ff ff       	call   c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cafd:	e9 87 00 00 00       	jmp    c001cb89 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cb02:	85 ed                	test   ebp,ebp
c001cb04:	74 3b                	je     c001cb41 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cb06:	31 ff                	xor    edi,edi
c001cb08:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb0c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cb10:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cb15:	50                   	push   eax
c001cb16:	50                   	push   eax
c001cb17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1e:	50                   	push   eax
c001cb1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb25:	e8 44 ed ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001cb2a:	89 c2                	mov    edx,eax
c001cb2c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cb31:	66 ef                	out    dx,ax
c001cb33:	47                   	inc    edi
c001cb34:	83 c4 10             	add    esp,0x10
c001cb37:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cb3d:	75 c9                	jne    c001cb08 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cb3f:	eb 23                	jmp    c001cb64 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cb41:	51                   	push   ecx
c001cb42:	0f b6 d2             	movzx  edx,dl
c001cb45:	51                   	push   ecx
c001cb46:	52                   	push   edx
c001cb47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb4d:	e8 1c ed ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001cb52:	b9 00 01 00 00       	mov    ecx,0x100
c001cb57:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb5b:	89 c2                	mov    edx,eax
c001cb5d:	fc                   	cld    
c001cb5e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb61:	83 c4 10             	add    esp,0x10
c001cb64:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cb6c:	4e                   	dec    esi
c001cb6d:	e9 43 ff ff ff       	jmp    c001cab5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cb72:	31 f6                	xor    esi,esi
c001cb74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb79:	74 11                	je     c001cb8c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cb7b:	50                   	push   eax
c001cb7c:	50                   	push   eax
c001cb7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cb82:	50                   	push   eax
c001cb83:	53                   	push   ebx
c001cb84:	e8 af fb ff ff       	call   c001c738 <ATA::flush(bool)>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	83 c4 2c             	add    esp,0x2c
c001cb8f:	89 f0                	mov    eax,esi
c001cb91:	5b                   	pop    ebx
c001cb92:	5e                   	pop    esi
c001cb93:	5f                   	pop    edi
c001cb94:	5d                   	pop    ebp
c001cb95:	c3                   	ret    

c001cb96 <ATA::detectCHS()>:
c001cb96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb9a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cba0:	c1 e0 06             	shl    eax,0x6
c001cba3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cba9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cbb3:	c7 44 24 04 54 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022d54
c001cbbb:	e9 d1 46 ff ff       	jmp    c0011291 <KePanic(char const*)>

c001cbc0 <ATA::open(int, int, void*)>:
c001cbc0:	53                   	push   ebx
c001cbc1:	83 ec 08             	sub    esp,0x8
c001cbc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbd0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cbd6:	c1 e0 06             	shl    eax,0x6
c001cbd9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cbdf:	01 d0                	add    eax,edx
c001cbe1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cbe8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cbee:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cbf5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cbff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc06:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc0c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc13:	75 0c                	jne    c001cc21 <ATA::open(int, int, void*)+0x61>
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	53                   	push   ebx
c001cc19:	e8 78 ff ff ff       	call   c001cb96 <ATA::detectCHS()>
c001cc1e:	83 c4 10             	add    esp,0x10
c001cc21:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc27:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc2d:	c1 e0 06             	shl    eax,0x6
c001cc30:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc37:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc41:	d1 e8                	shr    eax,1
c001cc43:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc49:	6a 04                	push   0x4
c001cc4b:	6a 0c                	push   0xc
c001cc4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc54:	50                   	push   eax
c001cc55:	52                   	push   edx
c001cc56:	e8 25 ec ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc5b:	90                   	nop
c001cc5c:	90                   	nop
c001cc5d:	6a 00                	push   0x0
c001cc5f:	6a 0c                	push   0xc
c001cc61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc68:	50                   	push   eax
c001cc69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc6f:	e8 0c ec ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc74:	83 c4 14             	add    esp,0x14
c001cc77:	53                   	push   ebx
c001cc78:	e8 ad fe fe ff       	call   c000cb2a <PhysicalDisk::startCache()>
c001cc7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc80:	e8 f1 10 ff ff       	call   c000dd76 <createPartitionsForDisk(PhysicalDisk*)>
c001cc85:	83 c4 18             	add    esp,0x18
c001cc88:	31 c0                	xor    eax,eax
c001cc8a:	5b                   	pop    ebx
c001cc8b:	c3                   	ret    

c001cc8c <combineCharAndColour(char, unsigned char)>:
c001cc8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc91:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cc97:	c1 e0 08             	shl    eax,0x8
c001cc9a:	09 d0                	or     eax,edx
c001cc9c:	c3                   	ret    

c001cc9d <combineColours(unsigned char, unsigned char)>:
c001cc9d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cca2:	c1 e0 04             	shl    eax,0x4
c001cca5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cca9:	c3                   	ret    

c001ccaa <ATA::read(unsigned long long, int, void*)>:
c001ccaa:	55                   	push   ebp
c001ccab:	57                   	push   edi
c001ccac:	56                   	push   esi
c001ccad:	be 04 00 00 00       	mov    esi,0x4
c001ccb2:	53                   	push   ebx
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ccc2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ccc6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ccc9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cccf:	0f 87 a1 01 00 00    	ja     c001ce76 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ccd5:	85 c9                	test   ecx,ecx
c001ccd7:	be 06 00 00 00       	mov    esi,0x6
c001ccdc:	0f 84 94 01 00 00    	je     c001ce76 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cce2:	55                   	push   ebp
c001cce3:	55                   	push   ebp
c001cce4:	6a 00                	push   0x0
c001cce6:	51                   	push   ecx
c001cce7:	53                   	push   ebx
c001cce8:	52                   	push   edx
c001cce9:	50                   	push   eax
c001ccea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccee:	e8 df fa ff ff       	call   c001c7d2 <ATA::access(unsigned long long, int, void*, bool)>
c001ccf3:	83 c4 20             	add    esp,0x20
c001ccf6:	85 c0                	test   eax,eax
c001ccf8:	89 c6                	mov    esi,eax
c001ccfa:	0f 85 71 01 00 00    	jne    c001ce71 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd00:	50                   	push   eax
c001cd01:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd06:	50                   	push   eax
c001cd07:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd0d:	6a 0f                	push   0xf
c001cd0f:	6a 00                	push   0x0
c001cd11:	89 da                	mov    edx,ebx
c001cd13:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd19:	e8 7f ff ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001cd1e:	59                   	pop    ecx
c001cd1f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd24:	5b                   	pop    ebx
c001cd25:	0f b6 d8             	movzx  ebx,al
c001cd28:	89 d0                	mov    eax,edx
c001cd2a:	53                   	push   ebx
c001cd2b:	99                   	cdq    
c001cd2c:	f7 fd                	idiv   ebp
c001cd2e:	99                   	cdq    
c001cd2f:	f7 f9                	idiv   ecx
c001cd31:	83 c2 30             	add    edx,0x30
c001cd34:	0f b6 d2             	movzx  edx,dl
c001cd37:	52                   	push   edx
c001cd38:	e8 4f ff ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cd3d:	5f                   	pop    edi
c001cd3e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd43:	5a                   	pop    edx
c001cd44:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd4a:	53                   	push   ebx
c001cd4b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd50:	99                   	cdq    
c001cd51:	f7 ff                	idiv   edi
c001cd53:	99                   	cdq    
c001cd54:	f7 f9                	idiv   ecx
c001cd56:	8d 42 30             	lea    eax,[edx+0x30]
c001cd59:	0f b6 c0             	movzx  eax,al
c001cd5c:	50                   	push   eax
c001cd5d:	e8 2a ff ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cd62:	5f                   	pop    edi
c001cd63:	bf 64 00 00 00       	mov    edi,0x64
c001cd68:	5a                   	pop    edx
c001cd69:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd6f:	53                   	push   ebx
c001cd70:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd75:	99                   	cdq    
c001cd76:	f7 ff                	idiv   edi
c001cd78:	99                   	cdq    
c001cd79:	f7 f9                	idiv   ecx
c001cd7b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd7e:	0f b6 c0             	movzx  eax,al
c001cd81:	50                   	push   eax
c001cd82:	e8 05 ff ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cd87:	5a                   	pop    edx
c001cd88:	5a                   	pop    edx
c001cd89:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cd8f:	53                   	push   ebx
c001cd90:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd95:	99                   	cdq    
c001cd96:	f7 f9                	idiv   ecx
c001cd98:	99                   	cdq    
c001cd99:	f7 f9                	idiv   ecx
c001cd9b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd9e:	0f b6 c0             	movzx  eax,al
c001cda1:	50                   	push   eax
c001cda2:	e8 e5 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cda7:	5a                   	pop    edx
c001cda8:	5a                   	pop    edx
c001cda9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdaf:	53                   	push   ebx
c001cdb0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdb5:	99                   	cdq    
c001cdb6:	f7 f9                	idiv   ecx
c001cdb8:	83 c2 30             	add    edx,0x30
c001cdbb:	0f b6 d2             	movzx  edx,dl
c001cdbe:	52                   	push   edx
c001cdbf:	e8 c8 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cdc4:	5a                   	pop    edx
c001cdc5:	5a                   	pop    edx
c001cdc6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cdcc:	53                   	push   ebx
c001cdcd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdd2:	99                   	cdq    
c001cdd3:	f7 fd                	idiv   ebp
c001cdd5:	99                   	cdq    
c001cdd6:	f7 f9                	idiv   ecx
c001cdd8:	8d 42 30             	lea    eax,[edx+0x30]
c001cddb:	0f b6 c0             	movzx  eax,al
c001cdde:	50                   	push   eax
c001cddf:	e8 a8 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cde4:	5d                   	pop    ebp
c001cde5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdea:	5a                   	pop    edx
c001cdeb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cdf1:	53                   	push   ebx
c001cdf2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdf7:	99                   	cdq    
c001cdf8:	f7 fd                	idiv   ebp
c001cdfa:	99                   	cdq    
c001cdfb:	f7 f9                	idiv   ecx
c001cdfd:	8d 42 30             	lea    eax,[edx+0x30]
c001ce00:	0f b6 c0             	movzx  eax,al
c001ce03:	50                   	push   eax
c001ce04:	e8 83 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ce09:	5d                   	pop    ebp
c001ce0a:	5a                   	pop    edx
c001ce0b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce11:	53                   	push   ebx
c001ce12:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce17:	99                   	cdq    
c001ce18:	f7 ff                	idiv   edi
c001ce1a:	99                   	cdq    
c001ce1b:	f7 f9                	idiv   ecx
c001ce1d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce20:	0f b6 c0             	movzx  eax,al
c001ce23:	50                   	push   eax
c001ce24:	e8 63 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ce29:	5f                   	pop    edi
c001ce2a:	5d                   	pop    ebp
c001ce2b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ce31:	53                   	push   ebx
c001ce32:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce37:	99                   	cdq    
c001ce38:	f7 f9                	idiv   ecx
c001ce3a:	99                   	cdq    
c001ce3b:	f7 f9                	idiv   ecx
c001ce3d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce40:	0f b6 c0             	movzx  eax,al
c001ce43:	50                   	push   eax
c001ce44:	e8 43 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ce49:	5a                   	pop    edx
c001ce4a:	5f                   	pop    edi
c001ce4b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ce51:	53                   	push   ebx
c001ce52:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce57:	99                   	cdq    
c001ce58:	f7 f9                	idiv   ecx
c001ce5a:	83 c2 30             	add    edx,0x30
c001ce5d:	0f b6 d2             	movzx  edx,dl
c001ce60:	52                   	push   edx
c001ce61:	e8 26 fe ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ce6f:	eb 05                	jmp    c001ce76 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce71:	be 01 00 00 00       	mov    esi,0x1
c001ce76:	83 c4 0c             	add    esp,0xc
c001ce79:	89 f0                	mov    eax,esi
c001ce7b:	5b                   	pop    ebx
c001ce7c:	5e                   	pop    esi
c001ce7d:	5f                   	pop    edi
c001ce7e:	5d                   	pop    ebp
c001ce7f:	c3                   	ret    

c001ce80 <ATA::write(unsigned long long, int, void*)>:
c001ce80:	55                   	push   ebp
c001ce81:	57                   	push   edi
c001ce82:	56                   	push   esi
c001ce83:	be 04 00 00 00       	mov    esi,0x4
c001ce88:	53                   	push   ebx
c001ce89:	83 ec 0c             	sub    esp,0xc
c001ce8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ce90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce9c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ce9f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cea5:	0f 87 9c 01 00 00    	ja     c001d047 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ceab:	85 c9                	test   ecx,ecx
c001cead:	be 06 00 00 00       	mov    esi,0x6
c001ceb2:	0f 84 8f 01 00 00    	je     c001d047 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ceb8:	55                   	push   ebp
c001ceb9:	55                   	push   ebp
c001ceba:	6a 01                	push   0x1
c001cebc:	51                   	push   ecx
c001cebd:	53                   	push   ebx
c001cebe:	52                   	push   edx
c001cebf:	50                   	push   eax
c001cec0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cec4:	e8 09 f9 ff ff       	call   c001c7d2 <ATA::access(unsigned long long, int, void*, bool)>
c001cec9:	83 c4 20             	add    esp,0x20
c001cecc:	85 c0                	test   eax,eax
c001cece:	89 c6                	mov    esi,eax
c001ced0:	0f 85 6c 01 00 00    	jne    c001d042 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ced6:	50                   	push   eax
c001ced7:	bd 10 27 00 00       	mov    ebp,0x2710
c001cedc:	50                   	push   eax
c001cedd:	6a 0f                	push   0xf
c001cedf:	6a 00                	push   0x0
c001cee1:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cee7:	e8 b1 fd ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001ceec:	5a                   	pop    edx
c001ceed:	59                   	pop    ecx
c001ceee:	b9 0a 00 00 00       	mov    ecx,0xa
c001cef3:	0f b6 d8             	movzx  ebx,al
c001cef6:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cefb:	53                   	push   ebx
c001cefc:	99                   	cdq    
c001cefd:	f7 fd                	idiv   ebp
c001ceff:	99                   	cdq    
c001cf00:	f7 f9                	idiv   ecx
c001cf02:	8d 42 30             	lea    eax,[edx+0x30]
c001cf05:	0f b6 c0             	movzx  eax,al
c001cf08:	50                   	push   eax
c001cf09:	e8 7e fd ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cf0e:	5f                   	pop    edi
c001cf0f:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf14:	5a                   	pop    edx
c001cf15:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf1b:	53                   	push   ebx
c001cf1c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf21:	99                   	cdq    
c001cf22:	f7 ff                	idiv   edi
c001cf24:	99                   	cdq    
c001cf25:	f7 f9                	idiv   ecx
c001cf27:	8d 42 30             	lea    eax,[edx+0x30]
c001cf2a:	0f b6 c0             	movzx  eax,al
c001cf2d:	50                   	push   eax
c001cf2e:	e8 59 fd ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cf33:	5f                   	pop    edi
c001cf34:	bf 64 00 00 00       	mov    edi,0x64
c001cf39:	5a                   	pop    edx
c001cf3a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf40:	53                   	push   ebx
c001cf41:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf46:	99                   	cdq    
c001cf47:	f7 ff                	idiv   edi
c001cf49:	99                   	cdq    
c001cf4a:	f7 f9                	idiv   ecx
c001cf4c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf4f:	0f b6 c0             	movzx  eax,al
c001cf52:	50                   	push   eax
c001cf53:	e8 34 fd ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cf58:	5a                   	pop    edx
c001cf59:	5a                   	pop    edx
c001cf5a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf60:	53                   	push   ebx
c001cf61:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf66:	99                   	cdq    
c001cf67:	f7 f9                	idiv   ecx
c001cf69:	99                   	cdq    
c001cf6a:	f7 f9                	idiv   ecx
c001cf6c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf6f:	0f b6 c0             	movzx  eax,al
c001cf72:	50                   	push   eax
c001cf73:	e8 14 fd ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cf78:	5a                   	pop    edx
c001cf79:	5a                   	pop    edx
c001cf7a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf80:	53                   	push   ebx
c001cf81:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf86:	99                   	cdq    
c001cf87:	f7 f9                	idiv   ecx
c001cf89:	83 c2 30             	add    edx,0x30
c001cf8c:	0f b6 d2             	movzx  edx,dl
c001cf8f:	52                   	push   edx
c001cf90:	e8 f7 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cf95:	5a                   	pop    edx
c001cf96:	5a                   	pop    edx
c001cf97:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf9d:	53                   	push   ebx
c001cf9e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfa3:	99                   	cdq    
c001cfa4:	f7 fd                	idiv   ebp
c001cfa6:	99                   	cdq    
c001cfa7:	f7 f9                	idiv   ecx
c001cfa9:	8d 42 30             	lea    eax,[edx+0x30]
c001cfac:	0f b6 c0             	movzx  eax,al
c001cfaf:	50                   	push   eax
c001cfb0:	e8 d7 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cfb5:	5d                   	pop    ebp
c001cfb6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cfbb:	5a                   	pop    edx
c001cfbc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cfc2:	53                   	push   ebx
c001cfc3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfc8:	99                   	cdq    
c001cfc9:	f7 fd                	idiv   ebp
c001cfcb:	99                   	cdq    
c001cfcc:	f7 f9                	idiv   ecx
c001cfce:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd1:	0f b6 c0             	movzx  eax,al
c001cfd4:	50                   	push   eax
c001cfd5:	e8 b2 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cfda:	5d                   	pop    ebp
c001cfdb:	5a                   	pop    edx
c001cfdc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cfe2:	53                   	push   ebx
c001cfe3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfe8:	99                   	cdq    
c001cfe9:	f7 ff                	idiv   edi
c001cfeb:	99                   	cdq    
c001cfec:	f7 f9                	idiv   ecx
c001cfee:	8d 42 30             	lea    eax,[edx+0x30]
c001cff1:	0f b6 c0             	movzx  eax,al
c001cff4:	50                   	push   eax
c001cff5:	e8 92 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001cffa:	5f                   	pop    edi
c001cffb:	5d                   	pop    ebp
c001cffc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d002:	53                   	push   ebx
c001d003:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d008:	99                   	cdq    
c001d009:	f7 f9                	idiv   ecx
c001d00b:	99                   	cdq    
c001d00c:	f7 f9                	idiv   ecx
c001d00e:	8d 42 30             	lea    eax,[edx+0x30]
c001d011:	0f b6 c0             	movzx  eax,al
c001d014:	50                   	push   eax
c001d015:	e8 72 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001d01a:	5a                   	pop    edx
c001d01b:	5f                   	pop    edi
c001d01c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d022:	53                   	push   ebx
c001d023:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d028:	99                   	cdq    
c001d029:	f7 f9                	idiv   ecx
c001d02b:	83 c2 30             	add    edx,0x30
c001d02e:	0f b6 d2             	movzx  edx,dl
c001d031:	52                   	push   edx
c001d032:	e8 55 fc ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d040:	eb 05                	jmp    c001d047 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d042:	be 01 00 00 00       	mov    esi,0x1
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	89 f0                	mov    eax,esi
c001d04c:	5b                   	pop    ebx
c001d04d:	5e                   	pop    esi
c001d04e:	5f                   	pop    edi
c001d04f:	5d                   	pop    ebp
c001d050:	c3                   	ret    
c001d051:	90                   	nop

c001d052 <ATAPI::write(unsigned long long, int, void*)>:
c001d052:	b8 03 00 00 00       	mov    eax,0x3
c001d057:	c3                   	ret    

c001d058 <ATAPI::close(int, int, void*)>:
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d065:	85 c0                	test   eax,eax
c001d067:	74 0c                	je     c001d075 <ATAPI::close(int, int, void*)+0x1d>
c001d069:	8b 10                	mov    edx,DWORD PTR [eax]
c001d06b:	83 ec 0c             	sub    esp,0xc
c001d06e:	50                   	push   eax
c001d06f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	31 c0                	xor    eax,eax
c001d077:	83 c4 0c             	add    esp,0xc
c001d07a:	c3                   	ret    
c001d07b:	90                   	nop

c001d07c <ATAPI::ATAPI()>:
c001d07c:	83 ec 0c             	sub    esp,0xc
c001d07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d083:	83 ec 04             	sub    esp,0x4
c001d086:	68 00 08 00 00       	push   0x800
c001d08b:	68 9d 2e 02 c0       	push   0xc0022e9d
c001d090:	50                   	push   eax
c001d091:	e8 2c fa fe ff       	call   c000cac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d096:	83 c4 10             	add    esp,0x10
c001d099:	ba b8 2d 02 c0       	mov    edx,0xc0022db8
c001d09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a2:	89 10                	mov    DWORD PTR [eax],edx
c001d0a4:	90                   	nop
c001d0a5:	83 c4 0c             	add    esp,0xc
c001d0a8:	c3                   	ret    
c001d0a9:	90                   	nop

c001d0aa <ATAPI::readyForCommand()>:
c001d0aa:	56                   	push   esi
c001d0ab:	53                   	push   ebx
c001d0ac:	53                   	push   ebx
c001d0ad:	31 db                	xor    ebx,ebx
c001d0af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0b3:	51                   	push   ecx
c001d0b4:	6a 0c                	push   0xc
c001d0b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d0bd:	50                   	push   eax
c001d0be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d0c4:	e8 77 e8 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001d0c9:	83 c4 10             	add    esp,0x10
c001d0cc:	a8 88                	test   al,0x88
c001d0ce:	74 25                	je     c001d0f5 <ATAPI::readyForCommand()+0x4b>
c001d0d0:	43                   	inc    ebx
c001d0d1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d0d7:	7e da                	jle    c001d0b3 <ATAPI::readyForCommand()+0x9>
c001d0d9:	83 ec 0c             	sub    esp,0xc
c001d0dc:	68 5e 01 00 00       	push   0x15e
c001d0e1:	e8 c6 8d ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d0ef:	75 c2                	jne    c001d0b3 <ATAPI::readyForCommand()+0x9>
c001d0f1:	31 c0                	xor    eax,eax
c001d0f3:	eb 02                	jmp    c001d0f7 <ATAPI::readyForCommand()+0x4d>
c001d0f5:	b0 01                	mov    al,0x1
c001d0f7:	5a                   	pop    edx
c001d0f8:	5b                   	pop    ebx
c001d0f9:	5e                   	pop    esi
c001d0fa:	c3                   	ret    
c001d0fb:	90                   	nop

c001d0fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d0fc:	55                   	push   ebp
c001d0fd:	57                   	push   edi
c001d0fe:	56                   	push   esi
c001d0ff:	53                   	push   ebx
c001d100:	83 ec 20             	sub    esp,0x20
c001d103:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d107:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d10b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d10f:	6a 01                	push   0x1
c001d111:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d118:	50                   	push   eax
c001d119:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d11f:	e8 6a e9 ff ff       	call   c001ba8e <IDE::enableIRQs(unsigned char, bool)>
c001d124:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d12b:	59                   	pop    ecx
c001d12c:	5e                   	pop    esi
c001d12d:	50                   	push   eax
c001d12e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d134:	e8 21 e7 ff ff       	call   c001b85a <IDE::prepareInterrupt(unsigned char)>
c001d139:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d13c:	e8 69 ff ff ff       	call   c001d0aa <ATAPI::readyForCommand()>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	84 c0                	test   al,al
c001d146:	75 0a                	jne    c001d152 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d148:	bb 01 00 00 00       	mov    ebx,0x1
c001d14d:	e9 5f 02 00 00       	jmp    c001d3b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d152:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d158:	c1 e0 04             	shl    eax,0x4
c001d15b:	0f b6 c0             	movzx  eax,al
c001d15e:	50                   	push   eax
c001d15f:	6a 06                	push   0x6
c001d161:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d168:	50                   	push   eax
c001d169:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d16f:	e8 0c e7 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d174:	6a 00                	push   0x0
c001d176:	6a 01                	push   0x1
c001d178:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d17f:	50                   	push   eax
c001d180:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d186:	e8 f5 e6 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d18b:	83 c4 20             	add    esp,0x20
c001d18e:	0f b6 c3             	movzx  eax,bl
c001d191:	50                   	push   eax
c001d192:	0f b6 df             	movzx  ebx,bh
c001d195:	6a 04                	push   0x4
c001d197:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d19e:	50                   	push   eax
c001d19f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1a5:	e8 d6 e6 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1aa:	53                   	push   ebx
c001d1ab:	6a 05                	push   0x5
c001d1ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1b4:	50                   	push   eax
c001d1b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1bb:	e8 c0 e6 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1c0:	83 c4 20             	add    esp,0x20
c001d1c3:	68 a0 00 00 00       	push   0xa0
c001d1c8:	6a 07                	push   0x7
c001d1ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d1:	50                   	push   eax
c001d1d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1d8:	e8 a3 e6 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1dd:	83 c4 0c             	add    esp,0xc
c001d1e0:	6a 01                	push   0x1
c001d1e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1e9:	50                   	push   eax
c001d1ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f0:	e8 6f f1 ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001d1f5:	83 c4 10             	add    esp,0x10
c001d1f8:	0f b6 d8             	movzx  ebx,al
c001d1fb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d201:	85 db                	test   ebx,ebx
c001d203:	74 20                	je     c001d225 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d205:	53                   	push   ebx
c001d206:	0f b6 c0             	movzx  eax,al
c001d209:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d210:	52                   	push   edx
c001d211:	50                   	push   eax
c001d212:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d218:	e8 8d f0 ff ff       	call   c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d21d:	83 c4 10             	add    esp,0x10
c001d220:	e9 8c 01 00 00       	jmp    c001d3b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d225:	52                   	push   edx
c001d226:	0f b6 c0             	movzx  eax,al
c001d229:	52                   	push   edx
c001d22a:	50                   	push   eax
c001d22b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d231:	e8 38 e6 ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001d236:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d23a:	b9 06 00 00 00       	mov    ecx,0x6
c001d23f:	89 c2                	mov    edx,eax
c001d241:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d244:	89 e8                	mov    eax,ebp
c001d246:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	0f b6 c0             	movzx  eax,al
c001d250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d254:	85 db                	test   ebx,ebx
c001d256:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d25c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d263:	0f 84 eb 00 00 00    	je     c001d354 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d269:	55                   	push   ebp
c001d26a:	55                   	push   ebp
c001d26b:	52                   	push   edx
c001d26c:	50                   	push   eax
c001d26d:	e8 82 e7 ff ff       	call   c001b9f4 <IDE::waitInterrupt(unsigned char)>
c001d272:	83 c4 10             	add    esp,0x10
c001d275:	84 c0                	test   al,al
c001d277:	0f 84 cb fe ff ff    	je     c001d148 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d27d:	56                   	push   esi
c001d27e:	56                   	push   esi
c001d27f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d286:	50                   	push   eax
c001d287:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d28d:	e8 c8 e5 ff ff       	call   c001b85a <IDE::prepareInterrupt(unsigned char)>
c001d292:	83 c4 0c             	add    esp,0xc
c001d295:	6a 04                	push   0x4
c001d297:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d29e:	50                   	push   eax
c001d29f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2a5:	e8 96 e6 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001d2aa:	83 c4 0c             	add    esp,0xc
c001d2ad:	6a 05                	push   0x5
c001d2af:	89 c6                	mov    esi,eax
c001d2b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2b8:	50                   	push   eax
c001d2b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2bf:	e8 7c e6 ff ff       	call   c001b940 <IDE::read(unsigned char, unsigned char)>
c001d2c4:	83 c4 10             	add    esp,0x10
c001d2c7:	0f b6 e8             	movzx  ebp,al
c001d2ca:	89 f0                	mov    eax,esi
c001d2cc:	c1 e5 08             	shl    ebp,0x8
c001d2cf:	0f b6 f0             	movzx  esi,al
c001d2d2:	09 f5                	or     ebp,esi
c001d2d4:	31 f6                	xor    esi,esi
c001d2d6:	d1 fd                	sar    ebp,1
c001d2d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2dd:	74 5c                	je     c001d33b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d2df:	39 ee                	cmp    esi,ebp
c001d2e1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2e7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2ee:	75 0d                	jne    c001d2fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d2f0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d2f3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d2f7:	4b                   	dec    ebx
c001d2f8:	e9 57 ff ff ff       	jmp    c001d254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d2fd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d301:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d305:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d30a:	51                   	push   ecx
c001d30b:	51                   	push   ecx
c001d30c:	52                   	push   edx
c001d30d:	50                   	push   eax
c001d30e:	e8 5b e5 ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001d313:	89 c2                	mov    edx,eax
c001d315:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d31a:	66 ef                	out    dx,ax
c001d31c:	46                   	inc    esi
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	eb bd                	jmp    c001d2df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d322:	51                   	push   ecx
c001d323:	51                   	push   ecx
c001d324:	52                   	push   edx
c001d325:	50                   	push   eax
c001d326:	e8 43 e5 ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001d32b:	89 c2                	mov    edx,eax
c001d32d:	66 ed                	in     ax,dx
c001d32f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d333:	83 c4 10             	add    esp,0x10
c001d336:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d33a:	46                   	inc    esi
c001d33b:	39 ee                	cmp    esi,ebp
c001d33d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d343:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d34a:	75 d6                	jne    c001d322 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d34c:	01 f6                	add    esi,esi
c001d34e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d352:	eb a3                	jmp    c001d2f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d354:	51                   	push   ecx
c001d355:	51                   	push   ecx
c001d356:	52                   	push   edx
c001d357:	50                   	push   eax
c001d358:	e8 97 e6 ff ff       	call   c001b9f4 <IDE::waitInterrupt(unsigned char)>
c001d35d:	83 c4 10             	add    esp,0x10
c001d360:	84 c0                	test   al,al
c001d362:	0f 84 e0 fd ff ff    	je     c001d148 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d368:	52                   	push   edx
c001d369:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d36e:	52                   	push   edx
c001d36f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d376:	50                   	push   eax
c001d377:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d37d:	e8 d8 e4 ff ff       	call   c001b85a <IDE::prepareInterrupt(unsigned char)>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	50                   	push   eax
c001d386:	50                   	push   eax
c001d387:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d38e:	50                   	push   eax
c001d38f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d395:	e8 d4 e4 ff ff       	call   c001b86e <IDE::getBase(unsigned char)>
c001d39a:	8d 50 07             	lea    edx,[eax+0x7]
c001d39d:	ec                   	in     al,dx
c001d39e:	83 c4 10             	add    esp,0x10
c001d3a1:	a8 88                	test   al,0x88
c001d3a3:	74 0a                	je     c001d3af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d3a5:	4b                   	dec    ebx
c001d3a6:	75 dd                	jne    c001d385 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d3a8:	bb 02 00 00 00       	mov    ebx,0x2
c001d3ad:	eb 02                	jmp    c001d3b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d3af:	31 db                	xor    ebx,ebx
c001d3b1:	83 c4 1c             	add    esp,0x1c
c001d3b4:	89 d8                	mov    eax,ebx
c001d3b6:	5b                   	pop    ebx
c001d3b7:	5e                   	pop    esi
c001d3b8:	5f                   	pop    edi
c001d3b9:	5d                   	pop    ebp
c001d3ba:	c3                   	ret    
c001d3bb:	90                   	nop

c001d3bc <ATAPI::diskRemoved()>:
c001d3bc:	53                   	push   ebx
c001d3bd:	83 ec 14             	sub    esp,0x14
c001d3c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d3c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d3cb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d3d1:	e8 8e 06 ff ff       	call   c000da64 <LogicalDisk::unmount()>
c001d3d6:	58                   	pop    eax
c001d3d7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3dd:	e8 66 10 ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c001d3e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d3e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3ec:	83 c4 18             	add    esp,0x18
c001d3ef:	5b                   	pop    ebx
c001d3f0:	e9 43 10 ff ff       	jmp    c000e438 <VCache::invalidateReadBuffer()>
c001d3f5:	90                   	nop

c001d3f6 <ATAPI::eject()>:
c001d3f6:	57                   	push   edi
c001d3f7:	b9 03 00 00 00       	mov    ecx,0x3
c001d3fc:	53                   	push   ebx
c001d3fd:	83 ec 14             	sub    esp,0x14
c001d400:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d404:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d408:	fc                   	cld    
c001d409:	31 c0                	xor    eax,eax
c001d40b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d40d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d412:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d417:	50                   	push   eax
c001d418:	50                   	push   eax
c001d419:	6a 00                	push   0x0
c001d41b:	6a 00                	push   0x0
c001d41d:	6a 00                	push   0x0
c001d41f:	6a 02                	push   0x2
c001d421:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d425:	50                   	push   eax
c001d426:	53                   	push   ebx
c001d427:	e8 d0 fc ff ff       	call   c001d0fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d42c:	83 c4 14             	add    esp,0x14
c001d42f:	53                   	push   ebx
c001d430:	e8 87 ff ff ff       	call   c001d3bc <ATAPI::diskRemoved()>
c001d435:	83 c4 24             	add    esp,0x24
c001d438:	31 c0                	xor    eax,eax
c001d43a:	5b                   	pop    ebx
c001d43b:	5f                   	pop    edi
c001d43c:	c3                   	ret    
c001d43d:	90                   	nop

c001d43e <ATAPI::diskInserted()>:
c001d43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d442:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d449:	c3                   	ret    

c001d44a <ATAPI::detectMedia()>:
c001d44a:	56                   	push   esi
c001d44b:	53                   	push   ebx
c001d44c:	83 ec 28             	sub    esp,0x28
c001d44f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d453:	6a 0c                	push   0xc
c001d455:	6a 00                	push   0x0
c001d457:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d45b:	56                   	push   esi
c001d45c:	e8 8f 30 fe ff       	call   c00004f0 <memset>
c001d461:	58                   	pop    eax
c001d462:	5a                   	pop    edx
c001d463:	6a 00                	push   0x0
c001d465:	6a 00                	push   0x0
c001d467:	6a 00                	push   0x0
c001d469:	6a 00                	push   0x0
c001d46b:	56                   	push   esi
c001d46c:	53                   	push   ebx
c001d46d:	e8 8a fc ff ff       	call   c001d0fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d472:	83 c4 1c             	add    esp,0x1c
c001d475:	6a 0c                	push   0xc
c001d477:	6a 00                	push   0x0
c001d479:	56                   	push   esi
c001d47a:	e8 71 30 fe ff       	call   c00004f0 <memset>
c001d47f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d484:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d489:	59                   	pop    ecx
c001d48a:	58                   	pop    eax
c001d48b:	6a 01                	push   0x1
c001d48d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d491:	50                   	push   eax
c001d492:	6a 00                	push   0x0
c001d494:	6a 12                	push   0x12
c001d496:	56                   	push   esi
c001d497:	53                   	push   ebx
c001d498:	e8 5f fc ff ff       	call   c001d0fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d49d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d4a1:	83 c4 20             	add    esp,0x20
c001d4a4:	83 e0 7f             	and    eax,0x7f
c001d4a7:	83 f8 70             	cmp    eax,0x70
c001d4aa:	74 15                	je     c001d4c1 <ATAPI::detectMedia()+0x77>
c001d4ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4b3:	75 0c                	jne    c001d4c1 <ATAPI::detectMedia()+0x77>
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	53                   	push   ebx
c001d4b9:	e8 80 ff ff ff       	call   c001d43e <ATAPI::diskInserted()>
c001d4be:	83 c4 10             	add    esp,0x10
c001d4c1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d4c5:	83 e0 0f             	and    eax,0xf
c001d4c8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d4cd:	0f b6 c0             	movzx  eax,al
c001d4d0:	75 19                	jne    c001d4eb <ATAPI::detectMedia()+0xa1>
c001d4d2:	83 f8 02             	cmp    eax,0x2
c001d4d5:	75 14                	jne    c001d4eb <ATAPI::detectMedia()+0xa1>
c001d4d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4de:	74 24                	je     c001d504 <ATAPI::detectMedia()+0xba>
c001d4e0:	83 ec 0c             	sub    esp,0xc
c001d4e3:	53                   	push   ebx
c001d4e4:	e8 d3 fe ff ff       	call   c001d3bc <ATAPI::diskRemoved()>
c001d4e9:	eb 16                	jmp    c001d501 <ATAPI::detectMedia()+0xb7>
c001d4eb:	85 c0                	test   eax,eax
c001d4ed:	75 15                	jne    c001d504 <ATAPI::detectMedia()+0xba>
c001d4ef:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4f6:	75 0c                	jne    c001d504 <ATAPI::detectMedia()+0xba>
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	53                   	push   ebx
c001d4fc:	e8 3d ff ff ff       	call   c001d43e <ATAPI::diskInserted()>
c001d501:	83 c4 10             	add    esp,0x10
c001d504:	83 c4 24             	add    esp,0x24
c001d507:	5b                   	pop    ebx
c001d508:	5e                   	pop    esi
c001d509:	c3                   	ret    

c001d50a <ATAPI::open(int, int, void*)>:
c001d50a:	56                   	push   esi
c001d50b:	53                   	push   ebx
c001d50c:	50                   	push   eax
c001d50d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d511:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d515:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d519:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d51f:	c1 e0 06             	shl    eax,0x6
c001d522:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d528:	01 d0                	add    eax,edx
c001d52a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d531:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d537:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d53e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d548:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d54f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d555:	6a 04                	push   0x4
c001d557:	6a 0c                	push   0xc
c001d559:	51                   	push   ecx
c001d55a:	52                   	push   edx
c001d55b:	e8 20 e3 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d560:	90                   	nop
c001d561:	90                   	nop
c001d562:	6a 00                	push   0x0
c001d564:	6a 0c                	push   0xc
c001d566:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d56d:	50                   	push   eax
c001d56e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d574:	e8 07 e3 ff ff       	call   c001b880 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d579:	83 c4 14             	add    esp,0x14
c001d57c:	68 78 01 00 00       	push   0x178
c001d581:	e8 4d a5 fe ff       	call   c0007ad3 <malloc>
c001d586:	83 c4 0c             	add    esp,0xc
c001d589:	6a 00                	push   0x0
c001d58b:	68 ff ff ff 7f       	push   0x7fffffff
c001d590:	6a 00                	push   0x0
c001d592:	6a 00                	push   0x0
c001d594:	53                   	push   ebx
c001d595:	68 4f 2f 02 c0       	push   0xc0022f4f
c001d59a:	89 c6                	mov    esi,eax
c001d59c:	50                   	push   eax
c001d59d:	e8 00 03 ff ff       	call   c000d8a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d5a2:	83 c4 14             	add    esp,0x14
c001d5a5:	56                   	push   esi
c001d5a6:	e8 b7 03 ff ff       	call   c000d962 <LogicalDisk::assignDriveLetter()>
c001d5ab:	5a                   	pop    edx
c001d5ac:	59                   	pop    ecx
c001d5ad:	0f be c0             	movsx  eax,al
c001d5b0:	50                   	push   eax
c001d5b1:	68 a0 2d 02 c0       	push   0xc0022da0
c001d5b6:	e8 4f d3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d5bb:	58                   	pop    eax
c001d5bc:	5a                   	pop    edx
c001d5bd:	56                   	push   esi
c001d5be:	53                   	push   ebx
c001d5bf:	e8 30 f1 fe ff       	call   c000c6f4 <Device::addChild(Device*)>
c001d5c4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d5ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5cd:	e8 58 f5 fe ff       	call   c000cb2a <PhysicalDisk::startCache()>
c001d5d2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d5d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5dc:	e8 69 fe ff ff       	call   c001d44a <ATAPI::detectMedia()>
c001d5e1:	83 c4 14             	add    esp,0x14
c001d5e4:	31 c0                	xor    eax,eax
c001d5e6:	5b                   	pop    ebx
c001d5e7:	5e                   	pop    esi
c001d5e8:	c3                   	ret    
c001d5e9:	90                   	nop

c001d5ea <ATAPI::read(unsigned long long, int, void*)>:
c001d5ea:	55                   	push   ebp
c001d5eb:	57                   	push   edi
c001d5ec:	56                   	push   esi
c001d5ed:	53                   	push   ebx
c001d5ee:	83 ec 1c             	sub    esp,0x1c
c001d5f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d5f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d5fd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d604:	74 3c                	je     c001d642 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d606:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d60a:	b9 03 00 00 00       	mov    ecx,0x3
c001d60f:	fc                   	cld    
c001d610:	31 c0                	xor    eax,eax
c001d612:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d614:	89 e8                	mov    eax,ebp
c001d616:	0f ce                	bswap  esi
c001d618:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d61c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d621:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d625:	50                   	push   eax
c001d626:	50                   	push   eax
c001d627:	55                   	push   ebp
c001d628:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d62c:	c1 e5 0b             	shl    ebp,0xb
c001d62f:	6a 00                	push   0x0
c001d631:	55                   	push   ebp
c001d632:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d636:	50                   	push   eax
c001d637:	53                   	push   ebx
c001d638:	e8 bf fa ff ff       	call   c001d0fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d63d:	83 c4 20             	add    esp,0x20
c001d640:	eb 1a                	jmp    c001d65c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	53                   	push   ebx
c001d646:	e8 ff fd ff ff       	call   c001d44a <ATAPI::detectMedia()>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d655:	75 af                	jne    c001d606 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d657:	b8 02 00 00 00       	mov    eax,0x2
c001d65c:	83 c4 1c             	add    esp,0x1c
c001d65f:	5b                   	pop    ebx
c001d660:	5e                   	pop    esi
c001d661:	5f                   	pop    edi
c001d662:	5d                   	pop    ebp
c001d663:	c3                   	ret    

c001d664 <SATA::close(int, int, void*)>:
c001d664:	83 ec 0c             	sub    esp,0xc
c001d667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d671:	85 c0                	test   eax,eax
c001d673:	74 0c                	je     c001d681 <SATA::close(int, int, void*)+0x1d>
c001d675:	8b 10                	mov    edx,DWORD PTR [eax]
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	50                   	push   eax
c001d67b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d67e:	83 c4 10             	add    esp,0x10
c001d681:	31 c0                	xor    eax,eax
c001d683:	83 c4 0c             	add    esp,0xc
c001d686:	c3                   	ret    
c001d687:	90                   	nop

c001d688 <SATA::powerSaving(PowerSavingLevel)>:
c001d688:	c3                   	ret    
c001d689:	90                   	nop

c001d68a <SATA::open(int, int, void*)>:
c001d68a:	56                   	push   esi
c001d68b:	53                   	push   ebx
c001d68c:	50                   	push   eax
c001d68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d695:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d69f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d6a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d6b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d6bd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d6c4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d6ca:	e8 13 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d6cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d6d5:	89 c6                	mov    esi,eax
c001d6d7:	e8 06 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d6dc:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6e2:	39 c6                	cmp    esi,eax
c001d6e4:	74 10                	je     c001d6f6 <SATA::open(int, int, void*)+0x6c>
c001d6e6:	83 ec 0c             	sub    esp,0xc
c001d6e9:	68 e8 2d 02 c0       	push   0xc0022de8
c001d6ee:	e8 9e 3b ff ff       	call   c0011291 <KePanic(char const*)>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	83 ec 0c             	sub    esp,0xc
c001d6f9:	6a 02                	push   0x2
c001d6fb:	e8 f5 be fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d700:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d706:	6a 03                	push   0x3
c001d708:	50                   	push   eax
c001d709:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d70f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d715:	e8 e4 c5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d71a:	83 c4 14             	add    esp,0x14
c001d71d:	53                   	push   ebx
c001d71e:	e8 07 f4 fe ff       	call   c000cb2a <PhysicalDisk::startCache()>
c001d723:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d726:	e8 4b 06 ff ff       	call   c000dd76 <createPartitionsForDisk(PhysicalDisk*)>
c001d72b:	83 c4 14             	add    esp,0x14
c001d72e:	31 c0                	xor    eax,eax
c001d730:	5b                   	pop    ebx
c001d731:	5e                   	pop    esi
c001d732:	c3                   	ret    
c001d733:	90                   	nop

c001d734 <SATA::SATA()>:
c001d734:	83 ec 0c             	sub    esp,0xc
c001d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d73b:	83 ec 04             	sub    esp,0x4
c001d73e:	68 00 02 00 00       	push   0x200
c001d743:	68 fc 2d 02 c0       	push   0xc0022dfc
c001d748:	50                   	push   eax
c001d749:	e8 74 f3 fe ff       	call   c000cac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c001d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d75a:	89 10                	mov    DWORD PTR [eax],edx
c001d75c:	90                   	nop
c001d75d:	83 c4 0c             	add    esp,0xc
c001d760:	c3                   	ret    
c001d761:	90                   	nop

c001d762 <SATA::access(unsigned long long, int, void*, bool)>:
c001d762:	55                   	push   ebp
c001d763:	57                   	push   edi
c001d764:	56                   	push   esi
c001d765:	53                   	push   ebx
c001d766:	83 ec 2c             	sub    esp,0x2c
c001d769:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d76d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d772:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d776:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d77a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d77e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d782:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d78a:	7e 10                	jle    c001d79c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	68 0c 2e 02 c0       	push   0xc0022e0c
c001d794:	e8 f8 3a ff ff       	call   c0011291 <KePanic(char const*)>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d7a2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d7a8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d7ae:	89 e8                	mov    eax,ebp
c001d7b0:	c1 e0 07             	shl    eax,0x7
c001d7b3:	01 d0                	add    eax,edx
c001d7b5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d7bf:	8d 45 02             	lea    eax,[ebp+0x2]
c001d7c2:	51                   	push   ecx
c001d7c3:	c1 e0 07             	shl    eax,0x7
c001d7c6:	51                   	push   ecx
c001d7c7:	01 d0                	add    eax,edx
c001d7c9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d7cd:	50                   	push   eax
c001d7ce:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d7d4:	e8 6b ec ff ff       	call   c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d7d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d7e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d7e9:	0f 84 5b 01 00 00    	je     c001d94a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d7ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7f3:	c1 e0 09             	shl    eax,0x9
c001d7f6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d7fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d7ff:	74 0e                	je     c001d80f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d801:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d807:	89 c1                	mov    ecx,eax
c001d809:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d80d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d80f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d813:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d819:	8d 45 02             	lea    eax,[ebp+0x2]
c001d81c:	c1 e0 07             	shl    eax,0x7
c001d81f:	01 d0                	add    eax,edx
c001d821:	8b 00                	mov    eax,DWORD PTR [eax]
c001d823:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d829:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d82f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d833:	c1 e1 05             	shl    ecx,0x5
c001d836:	01 c8                	add    eax,ecx
c001d838:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d83c:	83 e1 01             	and    ecx,0x1
c001d83f:	89 ce                	mov    esi,ecx
c001d841:	8a 08                	mov    cl,BYTE PTR [eax]
c001d843:	c1 e6 06             	shl    esi,0x6
c001d846:	83 e1 bf             	and    ecx,0xffffffbf
c001d849:	09 f1                	or     ecx,esi
c001d84b:	88 08                	mov    BYTE PTR [eax],cl
c001d84d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d84f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d855:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d85b:	89 08                	mov    DWORD PTR [eax],ecx
c001d85d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d863:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d869:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d86f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d872:	50                   	push   eax
c001d873:	68 90 00 00 00       	push   0x90
c001d878:	6a 00                	push   0x0
c001d87a:	56                   	push   esi
c001d87b:	e8 70 2c fe ff       	call   c00004f0 <memset>
c001d880:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d886:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	48                   	dec    eax
c001d894:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d899:	89 c1                	mov    ecx,eax
c001d89b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d8a1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8a6:	09 c8                	or     eax,ecx
c001d8a8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d8ae:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d8b4:	83 c8 80             	or     eax,0xffffff80
c001d8b7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d8bd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d8c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8c4:	25 00 7f 00 00       	and    eax,0x7f00
c001d8c9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d8ce:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d8d3:	66 89 06             	mov    WORD PTR [esi],ax
c001d8d6:	b0 35                	mov    al,0x35
c001d8d8:	75 02                	jne    c001d8dc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d8da:	b0 25                	mov    al,0x25
c001d8dc:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d8df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8e3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d8e7:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8ef:	c1 e8 10             	shr    eax,0x10
c001d8f2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d8f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8f9:	c1 e8 18             	shr    eax,0x18
c001d8fc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d8ff:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d903:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d906:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d90a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d90d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d911:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d915:	89 ee                	mov    esi,ebp
c001d917:	31 c0                	xor    eax,eax
c001d919:	c1 e6 07             	shl    esi,0x7
c001d91c:	01 d6                	add    esi,edx
c001d91e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d924:	80 e1 88             	and    cl,0x88
c001d927:	74 0a                	je     c001d933 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d929:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d92e:	74 0a                	je     c001d93a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d930:	40                   	inc    eax
c001d931:	eb eb                	jmp    c001d91e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d933:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d938:	75 17                	jne    c001d951 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d93a:	83 ec 0c             	sub    esp,0xc
c001d93d:	68 45 2e 02 c0       	push   0xc0022e45
c001d942:	e8 c3 cf fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d947:	83 c4 10             	add    esp,0x10
c001d94a:	b8 01 00 00 00       	mov    eax,0x1
c001d94f:	eb 5b                	jmp    c001d9ac <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d951:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d955:	c1 e5 07             	shl    ebp,0x7
c001d958:	b8 01 00 00 00       	mov    eax,0x1
c001d95d:	01 ea                	add    edx,ebp
c001d95f:	d3 e0                	shl    eax,cl
c001d961:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d967:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d96d:	85 c8                	test   eax,ecx
c001d96f:	74 16                	je     c001d987 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d971:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d977:	0f ba e1 1e          	bt     ecx,0x1e
c001d97b:	73 ea                	jae    c001d967 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	68 53 2e 02 c0       	push   0xc0022e53
c001d985:	eb bb                	jmp    c001d942 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d987:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d98d:	0f ba e0 1e          	bt     eax,0x1e
c001d991:	72 b7                	jb     c001d94a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d993:	31 c0                	xor    eax,eax
c001d995:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d99a:	75 10                	jne    c001d9ac <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d99c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d9a2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d9a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9ac:	83 c4 2c             	add    esp,0x2c
c001d9af:	5b                   	pop    ebx
c001d9b0:	5e                   	pop    esi
c001d9b1:	5f                   	pop    edi
c001d9b2:	5d                   	pop    ebp
c001d9b3:	c3                   	ret    

c001d9b4 <SATA::read(unsigned long long, int, void*)>:
c001d9b4:	55                   	push   ebp
c001d9b5:	57                   	push   edi
c001d9b6:	56                   	push   esi
c001d9b7:	be 04 00 00 00       	mov    esi,0x4
c001d9bc:	53                   	push   ebx
c001d9bd:	83 ec 0c             	sub    esp,0xc
c001d9c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d9d0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d9d3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d9d9:	0f 87 1a 02 00 00    	ja     c001dbf9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d9df:	85 c9                	test   ecx,ecx
c001d9e1:	be 06 00 00 00       	mov    esi,0x6
c001d9e6:	0f 84 0d 02 00 00    	je     c001dbf9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d9ec:	56                   	push   esi
c001d9ed:	56                   	push   esi
c001d9ee:	6a 00                	push   0x0
c001d9f0:	51                   	push   ecx
c001d9f1:	53                   	push   ebx
c001d9f2:	52                   	push   edx
c001d9f3:	50                   	push   eax
c001d9f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9f8:	e8 65 fd ff ff       	call   c001d762 <SATA::access(unsigned long long, int, void*, bool)>
c001d9fd:	83 c4 20             	add    esp,0x20
c001da00:	85 c0                	test   eax,eax
c001da02:	89 c6                	mov    esi,eax
c001da04:	0f 85 ea 01 00 00    	jne    c001dbf4 <SATA::read(unsigned long long, int, void*)+0x240>
c001da0a:	50                   	push   eax
c001da0b:	50                   	push   eax
c001da0c:	6a 0f                	push   0xf
c001da0e:	6a 00                	push   0x0
c001da10:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da16:	bb 0a 00 00 00       	mov    ebx,0xa
c001da1b:	e8 7d f2 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001da20:	5a                   	pop    edx
c001da21:	59                   	pop    ecx
c001da22:	b9 10 27 00 00       	mov    ecx,0x2710
c001da27:	0f b6 c0             	movzx  eax,al
c001da2a:	50                   	push   eax
c001da2b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da30:	99                   	cdq    
c001da31:	f7 f9                	idiv   ecx
c001da33:	99                   	cdq    
c001da34:	f7 fb                	idiv   ebx
c001da36:	8d 42 30             	lea    eax,[edx+0x30]
c001da39:	0f b6 c0             	movzx  eax,al
c001da3c:	50                   	push   eax
c001da3d:	e8 4a f2 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001da42:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001da48:	5f                   	pop    edi
c001da49:	5d                   	pop    ebp
c001da4a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001da4f:	6a 0f                	push   0xf
c001da51:	6a 00                	push   0x0
c001da53:	e8 45 f2 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001da58:	5a                   	pop    edx
c001da59:	59                   	pop    ecx
c001da5a:	0f b6 c0             	movzx  eax,al
c001da5d:	50                   	push   eax
c001da5e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da63:	99                   	cdq    
c001da64:	f7 fd                	idiv   ebp
c001da66:	99                   	cdq    
c001da67:	f7 fb                	idiv   ebx
c001da69:	8d 42 30             	lea    eax,[edx+0x30]
c001da6c:	0f b6 c0             	movzx  eax,al
c001da6f:	50                   	push   eax
c001da70:	e8 17 f2 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001da75:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001da7b:	5f                   	pop    edi
c001da7c:	bf 64 00 00 00       	mov    edi,0x64
c001da81:	58                   	pop    eax
c001da82:	6a 0f                	push   0xf
c001da84:	6a 00                	push   0x0
c001da86:	e8 12 f2 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001da8b:	5a                   	pop    edx
c001da8c:	59                   	pop    ecx
c001da8d:	0f b6 c0             	movzx  eax,al
c001da90:	50                   	push   eax
c001da91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da96:	99                   	cdq    
c001da97:	f7 ff                	idiv   edi
c001da99:	99                   	cdq    
c001da9a:	f7 fb                	idiv   ebx
c001da9c:	8d 42 30             	lea    eax,[edx+0x30]
c001da9f:	0f b6 c0             	movzx  eax,al
c001daa2:	50                   	push   eax
c001daa3:	e8 e4 f1 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001daa8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001daae:	58                   	pop    eax
c001daaf:	5a                   	pop    edx
c001dab0:	6a 0f                	push   0xf
c001dab2:	6a 00                	push   0x0
c001dab4:	e8 e4 f1 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dab9:	59                   	pop    ecx
c001daba:	5a                   	pop    edx
c001dabb:	0f b6 c0             	movzx  eax,al
c001dabe:	50                   	push   eax
c001dabf:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dac4:	99                   	cdq    
c001dac5:	f7 fb                	idiv   ebx
c001dac7:	99                   	cdq    
c001dac8:	f7 fb                	idiv   ebx
c001daca:	8d 42 30             	lea    eax,[edx+0x30]
c001dacd:	0f b6 c0             	movzx  eax,al
c001dad0:	50                   	push   eax
c001dad1:	e8 b6 f1 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dad6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dadc:	59                   	pop    ecx
c001dadd:	58                   	pop    eax
c001dade:	6a 0f                	push   0xf
c001dae0:	6a 00                	push   0x0
c001dae2:	e8 b6 f1 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dae7:	5a                   	pop    edx
c001dae8:	59                   	pop    ecx
c001dae9:	0f b6 c0             	movzx  eax,al
c001daec:	50                   	push   eax
c001daed:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daf2:	99                   	cdq    
c001daf3:	f7 fb                	idiv   ebx
c001daf5:	83 c2 30             	add    edx,0x30
c001daf8:	0f b6 d2             	movzx  edx,dl
c001dafb:	52                   	push   edx
c001dafc:	e8 8b f1 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001db01:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db07:	58                   	pop    eax
c001db08:	5a                   	pop    edx
c001db09:	6a 0f                	push   0xf
c001db0b:	6a 00                	push   0x0
c001db0d:	e8 8b f1 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001db12:	59                   	pop    ecx
c001db13:	b9 10 27 00 00       	mov    ecx,0x2710
c001db18:	5a                   	pop    edx
c001db19:	0f b6 c0             	movzx  eax,al
c001db1c:	50                   	push   eax
c001db1d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db22:	99                   	cdq    
c001db23:	f7 f9                	idiv   ecx
c001db25:	99                   	cdq    
c001db26:	f7 fb                	idiv   ebx
c001db28:	8d 42 30             	lea    eax,[edx+0x30]
c001db2b:	0f b6 c0             	movzx  eax,al
c001db2e:	50                   	push   eax
c001db2f:	e8 58 f1 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001db34:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001db3a:	59                   	pop    ecx
c001db3b:	58                   	pop    eax
c001db3c:	6a 0f                	push   0xf
c001db3e:	6a 00                	push   0x0
c001db40:	e8 58 f1 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001db45:	5a                   	pop    edx
c001db46:	59                   	pop    ecx
c001db47:	0f b6 c0             	movzx  eax,al
c001db4a:	50                   	push   eax
c001db4b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db50:	99                   	cdq    
c001db51:	f7 fd                	idiv   ebp
c001db53:	99                   	cdq    
c001db54:	f7 fb                	idiv   ebx
c001db56:	8d 42 30             	lea    eax,[edx+0x30]
c001db59:	0f b6 c0             	movzx  eax,al
c001db5c:	50                   	push   eax
c001db5d:	e8 2a f1 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001db62:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001db68:	5d                   	pop    ebp
c001db69:	58                   	pop    eax
c001db6a:	6a 0f                	push   0xf
c001db6c:	6a 00                	push   0x0
c001db6e:	e8 2a f1 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001db73:	5a                   	pop    edx
c001db74:	59                   	pop    ecx
c001db75:	0f b6 c0             	movzx  eax,al
c001db78:	50                   	push   eax
c001db79:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db7e:	99                   	cdq    
c001db7f:	f7 ff                	idiv   edi
c001db81:	99                   	cdq    
c001db82:	f7 fb                	idiv   ebx
c001db84:	8d 42 30             	lea    eax,[edx+0x30]
c001db87:	0f b6 c0             	movzx  eax,al
c001db8a:	50                   	push   eax
c001db8b:	e8 fc f0 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001db90:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001db96:	5f                   	pop    edi
c001db97:	5d                   	pop    ebp
c001db98:	6a 0f                	push   0xf
c001db9a:	6a 00                	push   0x0
c001db9c:	e8 fc f0 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dba1:	5a                   	pop    edx
c001dba2:	59                   	pop    ecx
c001dba3:	0f b6 c0             	movzx  eax,al
c001dba6:	50                   	push   eax
c001dba7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbac:	99                   	cdq    
c001dbad:	f7 fb                	idiv   ebx
c001dbaf:	99                   	cdq    
c001dbb0:	f7 fb                	idiv   ebx
c001dbb2:	8d 42 30             	lea    eax,[edx+0x30]
c001dbb5:	0f b6 c0             	movzx  eax,al
c001dbb8:	50                   	push   eax
c001dbb9:	e8 ce f0 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dbbe:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dbc4:	5f                   	pop    edi
c001dbc5:	5d                   	pop    ebp
c001dbc6:	6a 0f                	push   0xf
c001dbc8:	6a 00                	push   0x0
c001dbca:	e8 ce f0 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dbcf:	5a                   	pop    edx
c001dbd0:	59                   	pop    ecx
c001dbd1:	0f b6 c0             	movzx  eax,al
c001dbd4:	50                   	push   eax
c001dbd5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbda:	99                   	cdq    
c001dbdb:	f7 fb                	idiv   ebx
c001dbdd:	83 c2 30             	add    edx,0x30
c001dbe0:	0f b6 d2             	movzx  edx,dl
c001dbe3:	52                   	push   edx
c001dbe4:	e8 a3 f0 ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dbf2:	eb 05                	jmp    c001dbf9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbf4:	be 01 00 00 00       	mov    esi,0x1
c001dbf9:	83 c4 0c             	add    esp,0xc
c001dbfc:	89 f0                	mov    eax,esi
c001dbfe:	5b                   	pop    ebx
c001dbff:	5e                   	pop    esi
c001dc00:	5f                   	pop    edi
c001dc01:	5d                   	pop    ebp
c001dc02:	c3                   	ret    
c001dc03:	90                   	nop

c001dc04 <SATA::write(unsigned long long, int, void*)>:
c001dc04:	55                   	push   ebp
c001dc05:	57                   	push   edi
c001dc06:	56                   	push   esi
c001dc07:	53                   	push   ebx
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc13:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc1b:	8d 70 ff             	lea    esi,[eax-0x1]
c001dc1e:	b8 04 00 00 00       	mov    eax,0x4
c001dc23:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dc29:	0f 87 2c 02 00 00    	ja     c001de5b <SATA::write(unsigned long long, int, void*)+0x257>
c001dc2f:	85 db                	test   ebx,ebx
c001dc31:	b8 06 00 00 00       	mov    eax,0x6
c001dc36:	0f 84 1f 02 00 00    	je     c001de5b <SATA::write(unsigned long long, int, void*)+0x257>
c001dc3c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dc40:	c1 e6 09             	shl    esi,0x9
c001dc43:	01 de                	add    esi,ebx
c001dc45:	50                   	push   eax
c001dc46:	89 d7                	mov    edi,edx
c001dc48:	50                   	push   eax
c001dc49:	83 c7 01             	add    edi,0x1
c001dc4c:	6a 01                	push   0x1
c001dc4e:	89 cd                	mov    ebp,ecx
c001dc50:	53                   	push   ebx
c001dc51:	83 d5 00             	adc    ebp,0x0
c001dc54:	6a 01                	push   0x1
c001dc56:	81 c3 00 02 00 00    	add    ebx,0x200
c001dc5c:	51                   	push   ecx
c001dc5d:	52                   	push   edx
c001dc5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc62:	e8 fb fa ff ff       	call   c001d762 <SATA::access(unsigned long long, int, void*, bool)>
c001dc67:	83 c4 20             	add    esp,0x20
c001dc6a:	39 f3                	cmp    ebx,esi
c001dc6c:	89 fa                	mov    edx,edi
c001dc6e:	89 e9                	mov    ecx,ebp
c001dc70:	75 d3                	jne    c001dc45 <SATA::write(unsigned long long, int, void*)+0x41>
c001dc72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc76:	bd 10 27 00 00       	mov    ebp,0x2710
c001dc7b:	bb 0a 00 00 00       	mov    ebx,0xa
c001dc80:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dc86:	50                   	push   eax
c001dc87:	50                   	push   eax
c001dc88:	6a 0f                	push   0xf
c001dc8a:	6a 00                	push   0x0
c001dc8c:	e8 0c f0 ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dc91:	5a                   	pop    edx
c001dc92:	59                   	pop    ecx
c001dc93:	0f b6 c0             	movzx  eax,al
c001dc96:	50                   	push   eax
c001dc97:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc9c:	99                   	cdq    
c001dc9d:	f7 fd                	idiv   ebp
c001dc9f:	99                   	cdq    
c001dca0:	f7 fb                	idiv   ebx
c001dca2:	8d 42 30             	lea    eax,[edx+0x30]
c001dca5:	0f b6 c0             	movzx  eax,al
c001dca8:	50                   	push   eax
c001dca9:	e8 de ef ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dcae:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dcb4:	5e                   	pop    esi
c001dcb5:	5f                   	pop    edi
c001dcb6:	bf e8 03 00 00       	mov    edi,0x3e8
c001dcbb:	6a 0f                	push   0xf
c001dcbd:	6a 00                	push   0x0
c001dcbf:	e8 d9 ef ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dcc4:	5a                   	pop    edx
c001dcc5:	59                   	pop    ecx
c001dcc6:	0f b6 c0             	movzx  eax,al
c001dcc9:	50                   	push   eax
c001dcca:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dccf:	99                   	cdq    
c001dcd0:	f7 ff                	idiv   edi
c001dcd2:	99                   	cdq    
c001dcd3:	f7 fb                	idiv   ebx
c001dcd5:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd8:	0f b6 c0             	movzx  eax,al
c001dcdb:	50                   	push   eax
c001dcdc:	e8 ab ef ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dce1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dce7:	5e                   	pop    esi
c001dce8:	be 64 00 00 00       	mov    esi,0x64
c001dced:	58                   	pop    eax
c001dcee:	6a 0f                	push   0xf
c001dcf0:	6a 00                	push   0x0
c001dcf2:	e8 a6 ef ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dcf7:	5a                   	pop    edx
c001dcf8:	59                   	pop    ecx
c001dcf9:	0f b6 c0             	movzx  eax,al
c001dcfc:	50                   	push   eax
c001dcfd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd02:	99                   	cdq    
c001dd03:	f7 fe                	idiv   esi
c001dd05:	99                   	cdq    
c001dd06:	f7 fb                	idiv   ebx
c001dd08:	8d 42 30             	lea    eax,[edx+0x30]
c001dd0b:	0f b6 c0             	movzx  eax,al
c001dd0e:	50                   	push   eax
c001dd0f:	e8 78 ef ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dd14:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dd1a:	58                   	pop    eax
c001dd1b:	5a                   	pop    edx
c001dd1c:	6a 0f                	push   0xf
c001dd1e:	6a 00                	push   0x0
c001dd20:	e8 78 ef ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dd25:	59                   	pop    ecx
c001dd26:	5a                   	pop    edx
c001dd27:	0f b6 c0             	movzx  eax,al
c001dd2a:	50                   	push   eax
c001dd2b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd30:	99                   	cdq    
c001dd31:	f7 fb                	idiv   ebx
c001dd33:	99                   	cdq    
c001dd34:	f7 fb                	idiv   ebx
c001dd36:	8d 42 30             	lea    eax,[edx+0x30]
c001dd39:	0f b6 c0             	movzx  eax,al
c001dd3c:	50                   	push   eax
c001dd3d:	e8 4a ef ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dd42:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dd48:	59                   	pop    ecx
c001dd49:	58                   	pop    eax
c001dd4a:	6a 0f                	push   0xf
c001dd4c:	6a 00                	push   0x0
c001dd4e:	e8 4a ef ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dd53:	5a                   	pop    edx
c001dd54:	59                   	pop    ecx
c001dd55:	0f b6 c0             	movzx  eax,al
c001dd58:	50                   	push   eax
c001dd59:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd5e:	99                   	cdq    
c001dd5f:	f7 fb                	idiv   ebx
c001dd61:	83 c2 30             	add    edx,0x30
c001dd64:	0f b6 d2             	movzx  edx,dl
c001dd67:	52                   	push   edx
c001dd68:	e8 1f ef ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dd6d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dd73:	58                   	pop    eax
c001dd74:	5a                   	pop    edx
c001dd75:	6a 0f                	push   0xf
c001dd77:	6a 00                	push   0x0
c001dd79:	e8 1f ef ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001dd7e:	59                   	pop    ecx
c001dd7f:	5a                   	pop    edx
c001dd80:	0f b6 c0             	movzx  eax,al
c001dd83:	50                   	push   eax
c001dd84:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd89:	99                   	cdq    
c001dd8a:	f7 fd                	idiv   ebp
c001dd8c:	99                   	cdq    
c001dd8d:	f7 fb                	idiv   ebx
c001dd8f:	8d 42 30             	lea    eax,[edx+0x30]
c001dd92:	0f b6 c0             	movzx  eax,al
c001dd95:	50                   	push   eax
c001dd96:	e8 f1 ee ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001dd9b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dda1:	59                   	pop    ecx
c001dda2:	5d                   	pop    ebp
c001dda3:	6a 0f                	push   0xf
c001dda5:	6a 00                	push   0x0
c001dda7:	e8 f1 ee ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001ddac:	5a                   	pop    edx
c001ddad:	59                   	pop    ecx
c001ddae:	0f b6 c0             	movzx  eax,al
c001ddb1:	50                   	push   eax
c001ddb2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddb7:	99                   	cdq    
c001ddb8:	f7 ff                	idiv   edi
c001ddba:	99                   	cdq    
c001ddbb:	f7 fb                	idiv   ebx
c001ddbd:	8d 42 30             	lea    eax,[edx+0x30]
c001ddc0:	0f b6 c0             	movzx  eax,al
c001ddc3:	50                   	push   eax
c001ddc4:	e8 c3 ee ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ddc9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ddcf:	5f                   	pop    edi
c001ddd0:	5d                   	pop    ebp
c001ddd1:	6a 0f                	push   0xf
c001ddd3:	6a 00                	push   0x0
c001ddd5:	e8 c3 ee ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001ddda:	5a                   	pop    edx
c001dddb:	59                   	pop    ecx
c001dddc:	0f b6 c0             	movzx  eax,al
c001dddf:	50                   	push   eax
c001dde0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dde5:	99                   	cdq    
c001dde6:	f7 fe                	idiv   esi
c001dde8:	99                   	cdq    
c001dde9:	f7 fb                	idiv   ebx
c001ddeb:	8d 42 30             	lea    eax,[edx+0x30]
c001ddee:	0f b6 c0             	movzx  eax,al
c001ddf1:	50                   	push   eax
c001ddf2:	e8 95 ee ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001ddf7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ddfd:	5e                   	pop    esi
c001ddfe:	5f                   	pop    edi
c001ddff:	6a 0f                	push   0xf
c001de01:	6a 00                	push   0x0
c001de03:	e8 95 ee ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001de08:	5d                   	pop    ebp
c001de09:	5a                   	pop    edx
c001de0a:	0f b6 c0             	movzx  eax,al
c001de0d:	50                   	push   eax
c001de0e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de13:	99                   	cdq    
c001de14:	f7 fb                	idiv   ebx
c001de16:	99                   	cdq    
c001de17:	f7 fb                	idiv   ebx
c001de19:	8d 42 30             	lea    eax,[edx+0x30]
c001de1c:	0f b6 c0             	movzx  eax,al
c001de1f:	50                   	push   eax
c001de20:	e8 67 ee ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001de25:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001de2b:	59                   	pop    ecx
c001de2c:	5e                   	pop    esi
c001de2d:	6a 0f                	push   0xf
c001de2f:	6a 00                	push   0x0
c001de31:	e8 67 ee ff ff       	call   c001cc9d <combineColours(unsigned char, unsigned char)>
c001de36:	5f                   	pop    edi
c001de37:	5d                   	pop    ebp
c001de38:	0f b6 c0             	movzx  eax,al
c001de3b:	50                   	push   eax
c001de3c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de41:	99                   	cdq    
c001de42:	f7 fb                	idiv   ebx
c001de44:	83 c2 30             	add    edx,0x30
c001de47:	0f b6 d2             	movzx  edx,dl
c001de4a:	52                   	push   edx
c001de4b:	e8 3c ee ff ff       	call   c001cc8c <combineCharAndColour(char, unsigned char)>
c001de50:	83 c4 10             	add    esp,0x10
c001de53:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001de59:	31 c0                	xor    eax,eax
c001de5b:	83 c4 0c             	add    esp,0xc
c001de5e:	5b                   	pop    ebx
c001de5f:	5e                   	pop    esi
c001de60:	5f                   	pop    edi
c001de61:	5d                   	pop    ebp
c001de62:	c3                   	ret    
c001de63:	90                   	nop

c001de64 <SATAPI::write(unsigned long long, int, void*)>:
c001de64:	b8 03 00 00 00       	mov    eax,0x3
c001de69:	c3                   	ret    

c001de6a <SATAPI::close(int, int, void*)>:
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de77:	85 c0                	test   eax,eax
c001de79:	74 0c                	je     c001de87 <SATAPI::close(int, int, void*)+0x1d>
c001de7b:	8b 10                	mov    edx,DWORD PTR [eax]
c001de7d:	83 ec 0c             	sub    esp,0xc
c001de80:	50                   	push   eax
c001de81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	31 c0                	xor    eax,eax
c001de89:	83 c4 0c             	add    esp,0xc
c001de8c:	c3                   	ret    
c001de8d:	90                   	nop

c001de8e <SATAPI::SATAPI()>:
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de95:	83 ec 04             	sub    esp,0x4
c001de98:	68 00 08 00 00       	push   0x800
c001de9d:	68 9c 2e 02 c0       	push   0xc0022e9c
c001dea2:	50                   	push   eax
c001dea3:	e8 1a ec fe ff       	call   c000cac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	ba 90 2f 02 c0       	mov    edx,0xc0022f90
c001deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb4:	89 10                	mov    DWORD PTR [eax],edx
c001deb6:	90                   	nop
c001deb7:	83 c4 0c             	add    esp,0xc
c001deba:	c3                   	ret    
c001debb:	90                   	nop

c001debc <SATAPI::diskRemoved()>:
c001debc:	c3                   	ret    
c001debd:	90                   	nop

c001debe <SATAPI::diskInserted()>:
c001debe:	83 ec 18             	sub    esp,0x18
c001dec1:	68 a8 2e 02 c0       	push   0xc0022ea8
c001dec6:	e8 3f ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001decb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001decf:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ded6:	83 c4 1c             	add    esp,0x1c
c001ded9:	c3                   	ret    

c001deda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001deda:	55                   	push   ebp
c001dedb:	57                   	push   edi
c001dedc:	56                   	push   esi
c001dedd:	53                   	push   ebx
c001dede:	83 ec 34             	sub    esp,0x34
c001dee1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dee5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001deed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001def1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001def5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001defb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df05:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df0f:	83 c0 02             	add    eax,0x2
c001df12:	c1 e0 07             	shl    eax,0x7
c001df15:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df21:	c1 e0 07             	shl    eax,0x7
c001df24:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df2c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001df36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df3a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df40:	e8 ff e4 ff ff       	call   c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df45:	83 c4 10             	add    esp,0x10
c001df48:	89 c2                	mov    edx,eax
c001df4a:	b8 01 00 00 00       	mov    eax,0x1
c001df4f:	83 fa ff             	cmp    edx,0xffffffff
c001df52:	0f 84 5f 02 00 00    	je     c001e1b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001df58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001df5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df60:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df66:	8b 00                	mov    eax,DWORD PTR [eax]
c001df68:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001df6e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001df74:	89 d1                	mov    ecx,edx
c001df76:	c1 e1 05             	shl    ecx,0x5
c001df79:	01 c8                	add    eax,ecx
c001df7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001df7d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001df83:	81 c9 25 00 01 00    	or     ecx,0x10025
c001df89:	89 08                	mov    DWORD PTR [eax],ecx
c001df8b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df91:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001df97:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001df9d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dfa0:	50                   	push   eax
c001dfa1:	68 90 00 00 00       	push   0x90
c001dfa6:	6a 00                	push   0x0
c001dfa8:	53                   	push   ebx
c001dfa9:	e8 42 25 fe ff       	call   c00004f0 <memset>
c001dfae:	8d 7b 40             	lea    edi,[ebx+0x40]
c001dfb1:	b9 0c 00 00 00       	mov    ecx,0xc
c001dfb6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001dfba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dfbc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001dfc2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dfc6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001dfca:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001dfd0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfd4:	48                   	dec    eax
c001dfd5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dfda:	89 c1                	mov    ecx,eax
c001dfdc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dfe2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dfe7:	09 c8                	or     eax,ecx
c001dfe9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001dfef:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001dff5:	83 c8 80             	or     eax,0xffffff80
c001dff8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001dffe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e001:	25 00 7f 00 00       	and    eax,0x7f00
c001e006:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e00b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e00e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e012:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e01a:	c1 e8 10             	shr    eax,0x10
c001e01d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e024:	c1 e8 18             	shr    eax,0x18
c001e027:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e02a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e02e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e035:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e038:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e03c:	83 c4 10             	add    esp,0x10
c001e03f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e043:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e047:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e04b:	31 c0                	xor    eax,eax
c001e04d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e053:	80 e1 88             	and    cl,0x88
c001e056:	74 0a                	je     c001e062 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e058:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e05d:	74 0a                	je     c001e069 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e05f:	40                   	inc    eax
c001e060:	eb eb                	jmp    c001e04d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e062:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e067:	75 43                	jne    c001e0ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e069:	83 ec 0c             	sub    esp,0xc
c001e06c:	68 c0 2e 02 c0       	push   0xc0022ec0
c001e071:	e8 94 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e076:	58                   	pop    eax
c001e077:	5a                   	pop    edx
c001e078:	68 d5 2e 02 c0       	push   0xc0022ed5
c001e07d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e083:	e8 24 aa fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e088:	59                   	pop    ecx
c001e089:	5b                   	pop    ebx
c001e08a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e08e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e094:	e8 45 e4 ff ff       	call   c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e099:	5e                   	pop    esi
c001e09a:	5f                   	pop    edi
c001e09b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e09f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0a5:	e8 14 e4 ff ff       	call   c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e0aa:	eb 48                	jmp    c001e0f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e0ac:	b8 01 00 00 00       	mov    eax,0x1
c001e0b1:	88 d1                	mov    cl,dl
c001e0b3:	d3 e0                	shl    eax,cl
c001e0b5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e0ba:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e0c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e0c4:	89 c7                	mov    edi,eax
c001e0c6:	c1 e3 07             	shl    ebx,0x7
c001e0c9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e0cd:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e0d3:	85 c7                	test   edi,eax
c001e0d5:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e0db:	0f 84 a3 00 00 00    	je     c001e184 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e0e1:	0f ba e0 1e          	bt     eax,0x1e
c001e0e5:	73 1a                	jae    c001e101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e0e7:	83 ec 0c             	sub    esp,0xc
c001e0ea:	68 e7 2e 02 c0       	push   0xc0022ee7
c001e0ef:	e8 16 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	b8 01 00 00 00       	mov    eax,0x1
c001e0fc:	e9 b6 00 00 00       	jmp    c001e1b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e101:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e107:	83 f8 0d             	cmp    eax,0xd
c001e10a:	77 0a                	ja     c001e116 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	68 c8 00 00 00       	push   0xc8
c001e114:	eb 28                	jmp    c001e13e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e116:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e11c:	83 f8 0d             	cmp    eax,0xd
c001e11f:	77 0a                	ja     c001e12b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e121:	83 ec 0c             	sub    esp,0xc
c001e124:	68 58 02 00 00       	push   0x258
c001e129:	eb 13                	jmp    c001e13e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e12b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e131:	83 f8 06             	cmp    eax,0x6
c001e134:	77 10                	ja     c001e146 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	68 dc 05 00 00       	push   0x5dc
c001e13e:	e8 69 7d ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001e143:	83 c4 10             	add    esp,0x10
c001e146:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e14a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e14d:	75 06                	jne    c001e155 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e14f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e153:	74 15                	je     c001e16a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e155:	83 fe 06             	cmp    esi,0x6
c001e158:	77 10                	ja     c001e16a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	68 c4 09 00 00       	push   0x9c4
c001e162:	e8 45 7d ff ff       	call   c0015eac <milliTenthSleep(unsigned int)>
c001e167:	83 c4 10             	add    esp,0x10
c001e16a:	46                   	inc    esi
c001e16b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e171:	0f 85 56 ff ff ff    	jne    c001e0cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e177:	83 ec 0c             	sub    esp,0xc
c001e17a:	68 fa 2e 02 c0       	push   0xc0022efa
c001e17f:	e9 6b ff ff ff       	jmp    c001e0ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e184:	0f ba e0 1e          	bt     eax,0x1e
c001e188:	73 0d                	jae    c001e197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	68 0e 2f 02 c0       	push   0xc0022f0e
c001e192:	e9 58 ff ff ff       	jmp    c001e0ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e197:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e19c:	74 17                	je     c001e1b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e19e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e1a3:	74 10                	je     c001e1b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e1a5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e1ab:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e1af:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e1b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1b5:	31 c0                	xor    eax,eax
c001e1b7:	83 c4 2c             	add    esp,0x2c
c001e1ba:	5b                   	pop    ebx
c001e1bb:	5e                   	pop    esi
c001e1bc:	5f                   	pop    edi
c001e1bd:	5d                   	pop    ebp
c001e1be:	c3                   	ret    
c001e1bf:	90                   	nop

c001e1c0 <SATAPI::eject()>:
c001e1c0:	57                   	push   edi
c001e1c1:	b9 03 00 00 00       	mov    ecx,0x3
c001e1c6:	83 ec 18             	sub    esp,0x18
c001e1c9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e1cd:	fc                   	cld    
c001e1ce:	31 c0                	xor    eax,eax
c001e1d0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e1d2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e1d7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e1dc:	50                   	push   eax
c001e1dd:	6a 00                	push   0x0
c001e1df:	6a 00                	push   0x0
c001e1e1:	6a 00                	push   0x0
c001e1e3:	6a 00                	push   0x0
c001e1e5:	6a 02                	push   0x2
c001e1e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e1eb:	50                   	push   eax
c001e1ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1f0:	e8 e5 fc ff ff       	call   c001deda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e1f5:	83 c4 38             	add    esp,0x38
c001e1f8:	31 c0                	xor    eax,eax
c001e1fa:	5f                   	pop    edi
c001e1fb:	c3                   	ret    

c001e1fc <SATAPI::detectMedia()>:
c001e1fc:	53                   	push   ebx
c001e1fd:	83 ec 14             	sub    esp,0x14
c001e200:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e204:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e20a:	e8 39 02 ff ff       	call   c000e448 <VCache::writeWriteBuffer()>
c001e20f:	59                   	pop    ecx
c001e210:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e216:	e8 1d 02 ff ff       	call   c000e438 <VCache::invalidateReadBuffer()>
c001e21b:	c7 04 24 23 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f23
c001e222:	e8 e3 c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e227:	83 c4 10             	add    esp,0x10
c001e22a:	31 c0                	xor    eax,eax
c001e22c:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e233:	85 d2                	test   edx,edx
c001e235:	74 0f                	je     c001e246 <SATAPI::detectMedia()+0x4a>
c001e237:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e23d:	75 07                	jne    c001e246 <SATAPI::detectMedia()+0x4a>
c001e23f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e246:	40                   	inc    eax
c001e247:	83 f8 1a             	cmp    eax,0x1a
c001e24a:	75 e0                	jne    c001e22c <SATAPI::detectMedia()+0x30>
c001e24c:	83 c4 08             	add    esp,0x8
c001e24f:	5b                   	pop    ebx
c001e250:	c3                   	ret    
c001e251:	90                   	nop

c001e252 <SATAPI::open(int, int, void*)>:
c001e252:	56                   	push   esi
c001e253:	53                   	push   ebx
c001e254:	51                   	push   ecx
c001e255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e25d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e267:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e26d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e271:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e27b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e285:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e28c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e292:	e8 4b 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e297:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e29d:	89 c6                	mov    esi,eax
c001e29f:	e8 3e 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e2a4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e2aa:	39 c6                	cmp    esi,eax
c001e2ac:	74 10                	je     c001e2be <SATAPI::open(int, int, void*)+0x6c>
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	68 38 2f 02 c0       	push   0xc0022f38
c001e2b6:	e8 d6 2f ff ff       	call   c0011291 <KePanic(char const*)>
c001e2bb:	83 c4 10             	add    esp,0x10
c001e2be:	83 ec 0c             	sub    esp,0xc
c001e2c1:	6a 02                	push   0x2
c001e2c3:	e8 2d b3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e2c8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e2ce:	6a 03                	push   0x3
c001e2d0:	50                   	push   eax
c001e2d1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e2d7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e2dd:	e8 1c ba fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e2e2:	83 c4 14             	add    esp,0x14
c001e2e5:	68 78 01 00 00       	push   0x178
c001e2ea:	e8 e4 97 fe ff       	call   c0007ad3 <malloc>
c001e2ef:	83 c4 0c             	add    esp,0xc
c001e2f2:	6a 00                	push   0x0
c001e2f4:	68 ff ff ff 7f       	push   0x7fffffff
c001e2f9:	6a 00                	push   0x0
c001e2fb:	6a 00                	push   0x0
c001e2fd:	53                   	push   ebx
c001e2fe:	68 4e 2f 02 c0       	push   0xc0022f4e
c001e303:	89 c6                	mov    esi,eax
c001e305:	50                   	push   eax
c001e306:	e8 97 f5 fe ff       	call   c000d8a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e30b:	83 c4 14             	add    esp,0x14
c001e30e:	56                   	push   esi
c001e30f:	e8 4e f6 fe ff       	call   c000d962 <LogicalDisk::assignDriveLetter()>
c001e314:	5a                   	pop    edx
c001e315:	59                   	pop    ecx
c001e316:	0f be c0             	movsx  eax,al
c001e319:	50                   	push   eax
c001e31a:	68 a0 2d 02 c0       	push   0xc0022da0
c001e31f:	e8 e6 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e324:	58                   	pop    eax
c001e325:	5a                   	pop    edx
c001e326:	56                   	push   esi
c001e327:	53                   	push   ebx
c001e328:	e8 c7 e3 fe ff       	call   c000c6f4 <Device::addChild(Device*)>
c001e32d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e336:	e8 ef e7 fe ff       	call   c000cb2a <PhysicalDisk::startCache()>
c001e33b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e345:	e8 b2 fe ff ff       	call   c001e1fc <SATAPI::detectMedia()>
c001e34a:	83 c4 14             	add    esp,0x14
c001e34d:	31 c0                	xor    eax,eax
c001e34f:	5b                   	pop    ebx
c001e350:	5e                   	pop    esi
c001e351:	c3                   	ret    

c001e352 <SATAPI::read(unsigned long long, int, void*)>:
c001e352:	55                   	push   ebp
c001e353:	57                   	push   edi
c001e354:	56                   	push   esi
c001e355:	53                   	push   ebx
c001e356:	83 ec 3c             	sub    esp,0x3c
c001e359:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e35d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e361:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e365:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e369:	83 fd 04             	cmp    ebp,0x4
c001e36c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e374:	7e 10                	jle    c001e386 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	68 5c 2f 02 c0       	push   0xc0022f5c
c001e37e:	e8 0e 2f ff ff       	call   c0011291 <KePanic(char const*)>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e38c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e392:	51                   	push   ecx
c001e393:	50                   	push   eax
c001e394:	83 c0 02             	add    eax,0x2
c001e397:	c1 e0 07             	shl    eax,0x7
c001e39a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e3a0:	50                   	push   eax
c001e3a1:	52                   	push   edx
c001e3a2:	e8 61 e1 ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3a7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e3ab:	b9 03 00 00 00       	mov    ecx,0x3
c001e3b0:	fc                   	cld    
c001e3b1:	31 c0                	xor    eax,eax
c001e3b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3b5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e3ba:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e3bf:	83 c4 0c             	add    esp,0xc
c001e3c2:	6a 00                	push   0x0
c001e3c4:	6a 00                	push   0x0
c001e3c6:	6a 00                	push   0x0
c001e3c8:	6a 00                	push   0x0
c001e3ca:	6a 02                	push   0x2
c001e3cc:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e3d0:	50                   	push   eax
c001e3d1:	53                   	push   ebx
c001e3d2:	e8 03 fb ff ff       	call   c001deda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3d7:	83 c4 20             	add    esp,0x20
c001e3da:	85 c0                	test   eax,eax
c001e3dc:	89 c6                	mov    esi,eax
c001e3de:	75 46                	jne    c001e426 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e3e0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e3e4:	b9 03 00 00 00       	mov    ecx,0x3
c001e3e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3ef:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e3f4:	0f c8                	bswap  eax
c001e3f6:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e3fa:	89 e8                	mov    eax,ebp
c001e3fc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e400:	50                   	push   eax
c001e401:	55                   	push   ebp
c001e402:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e406:	c1 e5 0b             	shl    ebp,0xb
c001e409:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e40d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e411:	55                   	push   ebp
c001e412:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e416:	50                   	push   eax
c001e417:	53                   	push   ebx
c001e418:	e8 bd fa ff ff       	call   c001deda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e41d:	83 c4 20             	add    esp,0x20
c001e420:	85 c0                	test   eax,eax
c001e422:	89 c6                	mov    esi,eax
c001e424:	74 0c                	je     c001e432 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e426:	83 ec 0c             	sub    esp,0xc
c001e429:	53                   	push   ebx
c001e42a:	e8 cd fd ff ff       	call   c001e1fc <SATAPI::detectMedia()>
c001e42f:	83 c4 10             	add    esp,0x10
c001e432:	83 c4 3c             	add    esp,0x3c
c001e435:	89 f0                	mov    eax,esi
c001e437:	5b                   	pop    ebx
c001e438:	5e                   	pop    esi
c001e439:	5f                   	pop    edi
c001e43a:	5d                   	pop    ebp
c001e43b:	c3                   	ret    

c001e43c <IOAPIC::close(int, int, void*)>:
c001e43c:	b8 00 00 00 00       	mov    eax,0x0
c001e441:	c3                   	ret    

c001e442 <apicGetBase()>:
c001e442:	55                   	push   ebp
c001e443:	89 e5                	mov    ebp,esp
c001e445:	83 ec 18             	sub    esp,0x18
c001e448:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e44d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e453:	83 e0 08             	and    eax,0x8
c001e456:	0f b6 c0             	movzx  eax,al
c001e459:	85 c0                	test   eax,eax
c001e45b:	75 07                	jne    c001e464 <apicGetBase()+0x22>
c001e45d:	b8 00 00 00 00       	mov    eax,0x0
c001e462:	eb 21                	jmp    c001e485 <apicGetBase()+0x43>
c001e464:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e469:	83 ec 08             	sub    esp,0x8
c001e46c:	6a 1b                	push   0x1b
c001e46e:	50                   	push   eax
c001e46f:	e8 6e 8c fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e474:	83 c4 10             	add    esp,0x10
c001e477:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e47a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e47d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e480:	25 00 00 ff ff       	and    eax,0xffff0000
c001e485:	c9                   	leave  
c001e486:	c3                   	ret    
c001e487:	90                   	nop

c001e488 <IOAPIC::IOAPIC()>:
c001e488:	83 ec 0c             	sub    esp,0xc
c001e48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48f:	83 ec 08             	sub    esp,0x8
c001e492:	68 c0 2f 02 c0       	push   0xc0022fc0
c001e497:	50                   	push   eax
c001e498:	e8 ef e3 fe ff       	call   c000c88c <Device::Device(char const*)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001e4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a9:	89 10                	mov    DWORD PTR [eax],edx
c001e4ab:	90                   	nop
c001e4ac:	83 c4 0c             	add    esp,0xc
c001e4af:	c3                   	ret    

c001e4b0 <apicOpen()>:
c001e4b0:	55                   	push   ebp
c001e4b1:	89 e5                	mov    ebp,esp
c001e4b3:	53                   	push   ebx
c001e4b4:	83 ec 34             	sub    esp,0x34
c001e4b7:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e4bc:	83 f0 01             	xor    eax,0x1
c001e4bf:	0f b6 c0             	movzx  eax,al
c001e4c2:	85 c0                	test   eax,eax
c001e4c4:	0f 84 a3 00 00 00    	je     c001e56d <apicOpen()+0xbd>
c001e4ca:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e4ce:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e4d3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e4d7:	0f b6 c0             	movzx  eax,al
c001e4da:	39 c2                	cmp    edx,eax
c001e4dc:	0f 83 84 00 00 00    	jae    c001e566 <apicOpen()+0xb6>
c001e4e2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e4e9:	83 ec 0c             	sub    esp,0xc
c001e4ec:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e4ef:	e8 df 95 fe ff       	call   c0007ad3 <malloc>
c001e4f4:	83 c4 10             	add    esp,0x10
c001e4f7:	89 c3                	mov    ebx,eax
c001e4f9:	83 ec 0c             	sub    esp,0xc
c001e4fc:	53                   	push   ebx
c001e4fd:	e8 86 ff ff ff       	call   c001e488 <IOAPIC::IOAPIC()>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e508:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e50c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e50f:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e516:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e51b:	83 c0 01             	add    eax,0x1
c001e51e:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e523:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e528:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e52e:	83 ec 08             	sub    esp,0x8
c001e531:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e534:	50                   	push   eax
c001e535:	e8 ba e1 fe ff       	call   c000c6f4 <Device::addChild(Device*)>
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e540:	8b 00                	mov    eax,DWORD PTR [eax]
c001e542:	83 c0 08             	add    eax,0x8
c001e545:	8b 00                	mov    eax,DWORD PTR [eax]
c001e547:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e54b:	6a 00                	push   0x0
c001e54d:	6a 00                	push   0x0
c001e54f:	52                   	push   edx
c001e550:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e553:	ff d0                	call   eax
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e55b:	83 c0 01             	add    eax,0x1
c001e55e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e561:	e9 68 ff ff ff       	jmp    c001e4ce <apicOpen()+0x1e>
c001e566:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e56d:	e8 d0 fe ff ff       	call   c001e442 <apicGetBase()>
c001e572:	05 f0 00 00 00       	add    eax,0xf0
c001e577:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e57a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e57d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e57f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e582:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e589:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e590:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e593:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e596:	89 10                	mov    DWORD PTR [eax],edx
c001e598:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e59f:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e5a4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e5a7:	7d 7c                	jge    c001e625 <apicOpen()+0x175>
c001e5a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5ac:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5b3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e5b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5b9:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5c0:	c1 e8 08             	shr    eax,0x8
c001e5c3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e5c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5ca:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5d1:	c1 e8 18             	shr    eax,0x18
c001e5d4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e5d7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e5db:	3d ff 00 00 00       	cmp    eax,0xff
c001e5e0:	75 3a                	jne    c001e61c <apicOpen()+0x16c>
c001e5e2:	e8 5b fe ff ff       	call   c001e442 <apicGetBase()>
c001e5e7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e5eb:	83 fa 01             	cmp    edx,0x1
c001e5ee:	75 07                	jne    c001e5f7 <apicOpen()+0x147>
c001e5f0:	ba 60 03 00 00       	mov    edx,0x360
c001e5f5:	eb 05                	jmp    c001e5fc <apicOpen()+0x14c>
c001e5f7:	ba 50 03 00 00       	mov    edx,0x350
c001e5fc:	01 d0                	add    eax,edx
c001e5fe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e601:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e604:	8b 00                	mov    eax,DWORD PTR [eax]
c001e606:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e609:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e610:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e614:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e617:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e61a:	89 10                	mov    DWORD PTR [eax],edx
c001e61c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e620:	e9 7a ff ff ff       	jmp    c001e59f <apicOpen()+0xef>
c001e625:	90                   	nop
c001e626:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e629:	c9                   	leave  
c001e62a:	c3                   	ret    
c001e62b:	90                   	nop

c001e62c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e62c:	55                   	push   ebp
c001e62d:	89 e5                	mov    ebp,esp
c001e62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e632:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e638:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e63b:	72 1d                	jb     c001e65a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e640:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e649:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e64f:	01 d0                	add    eax,edx
c001e651:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e654:	73 04                	jae    c001e65a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e656:	b0 01                	mov    al,0x1
c001e658:	eb 02                	jmp    c001e65c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e65a:	b0 00                	mov    al,0x0
c001e65c:	5d                   	pop    ebp
c001e65d:	c3                   	ret    

c001e65e <IOAPIC::read(int)>:
c001e65e:	55                   	push   ebp
c001e65f:	89 e5                	mov    ebp,esp
c001e661:	83 ec 10             	sub    esp,0x10
c001e664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e667:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e66d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e670:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e673:	0f b6 d0             	movzx  edx,al
c001e676:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e679:	89 10                	mov    DWORD PTR [eax],edx
c001e67b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e67e:	83 c0 10             	add    eax,0x10
c001e681:	8b 00                	mov    eax,DWORD PTR [eax]
c001e683:	c9                   	leave  
c001e684:	c3                   	ret    
c001e685:	90                   	nop

c001e686 <IOAPIC::open(int, int, void*)>:
c001e686:	55                   	push   ebp
c001e687:	89 e5                	mov    ebp,esp
c001e689:	57                   	push   edi
c001e68a:	56                   	push   esi
c001e68b:	53                   	push   ebx
c001e68c:	83 ec 04             	sub    esp,0x4
c001e68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e692:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e695:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e69e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6a4:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e6ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6bd:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6df:	0f b6 f0             	movzx  esi,al
c001e6e2:	89 d0                	mov    eax,edx
c001e6e4:	ba 00 00 00 00       	mov    edx,0x0
c001e6e9:	89 c7                	mov    edi,eax
c001e6eb:	83 e7 ff             	and    edi,0xffffffff
c001e6ee:	89 f9                	mov    ecx,edi
c001e6f0:	0f b6 da             	movzx  ebx,dl
c001e6f3:	89 c8                	mov    eax,ecx
c001e6f5:	89 da                	mov    edx,ebx
c001e6f7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6fa:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e6fd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e701:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e705:	83 e0 00             	and    eax,0x0
c001e708:	09 d0                	or     eax,edx
c001e70a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e711:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e717:	8d 50 01             	lea    edx,[eax+0x1]
c001e71a:	88 d1                	mov    cl,dl
c001e71c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e71f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e725:	0f b6 d0             	movzx  edx,al
c001e728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e72b:	83 c2 08             	add    edx,0x8
c001e72e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e732:	0f b6 c9             	movzx  ecx,cl
c001e735:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e73b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e73f:	6a 01                	push   0x1
c001e741:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e744:	e8 15 ff ff ff       	call   c001e65e <IOAPIC::read(int)>
c001e749:	83 c4 08             	add    esp,0x8
c001e74c:	c1 f8 10             	sar    eax,0x10
c001e74f:	0f b6 c0             	movzx  eax,al
c001e752:	8d 50 01             	lea    edx,[eax+0x1]
c001e755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e758:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e75e:	b8 00 00 00 00       	mov    eax,0x0
c001e763:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e766:	5b                   	pop    ebx
c001e767:	5e                   	pop    esi
c001e768:	5f                   	pop    edi
c001e769:	5d                   	pop    ebp
c001e76a:	c3                   	ret    
c001e76b:	90                   	nop

c001e76c <IOAPIC::write(int, int)>:
c001e76c:	55                   	push   ebp
c001e76d:	89 e5                	mov    ebp,esp
c001e76f:	83 ec 10             	sub    esp,0x10
c001e772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e77b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e77e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e781:	0f b6 d0             	movzx  edx,al
c001e784:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e787:	89 10                	mov    DWORD PTR [eax],edx
c001e789:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e78c:	8d 50 10             	lea    edx,[eax+0x10]
c001e78f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e792:	89 02                	mov    DWORD PTR [edx],eax
c001e794:	90                   	nop
c001e795:	c9                   	leave  
c001e796:	c3                   	ret    
c001e797:	90                   	nop

c001e798 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e798:	55                   	push   ebp
c001e799:	89 e5                	mov    ebp,esp
c001e79b:	53                   	push   ebx
c001e79c:	83 ec 2c             	sub    esp,0x2c
c001e79f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7a2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e7a5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e7a8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e7ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e7b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e7b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e7ba:	88 d8                	mov    al,bl
c001e7bc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e7bf:	88 c8                	mov    al,cl
c001e7c1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e7c4:	88 d0                	mov    al,dl
c001e7c6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e7c9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e7cd:	83 c0 08             	add    eax,0x8
c001e7d0:	d1 e0                	shl    eax,1
c001e7d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7d5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e7d9:	83 c0 08             	add    eax,0x8
c001e7dc:	d1 e0                	shl    eax,1
c001e7de:	83 c0 01             	add    eax,0x1
c001e7e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e7e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e7e7:	50                   	push   eax
c001e7e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7eb:	e8 6e fe ff ff       	call   c001e65e <IOAPIC::read(int)>
c001e7f0:	83 c4 08             	add    esp,0x8
c001e7f3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e7f6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e7fd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e800:	c1 e0 18             	shl    eax,0x18
c001e803:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e806:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e809:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e80c:	52                   	push   edx
c001e80d:	50                   	push   eax
c001e80e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e811:	e8 56 ff ff ff       	call   c001e76c <IOAPIC::write(int, int)>
c001e816:	83 c4 0c             	add    esp,0xc
c001e819:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e81c:	50                   	push   eax
c001e81d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e820:	e8 39 fe ff ff       	call   c001e65e <IOAPIC::read(int)>
c001e825:	83 c4 08             	add    esp,0x8
c001e828:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e82b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e832:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e839:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e840:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e844:	85 c0                	test   eax,eax
c001e846:	74 09                	je     c001e851 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e848:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e84f:	eb 07                	jmp    c001e858 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e851:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e858:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e85c:	85 c0                	test   eax,eax
c001e85e:	74 09                	je     c001e869 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e860:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e867:	eb 07                	jmp    c001e870 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e869:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e870:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e877:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e87b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e87e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e881:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e884:	52                   	push   edx
c001e885:	50                   	push   eax
c001e886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e889:	e8 de fe ff ff       	call   c001e76c <IOAPIC::write(int, int)>
c001e88e:	83 c4 0c             	add    esp,0xc
c001e891:	90                   	nop
c001e892:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e895:	c9                   	leave  
c001e896:	c3                   	ret    
c001e897:	90                   	nop

c001e898 <APICTimer::close(int, int, void*)>:
c001e898:	b8 00 00 00 00       	mov    eax,0x0
c001e89d:	c3                   	ret    
c001e89e:	66 90                	xchg   ax,ax

c001e8a0 <apicTimerHandler(regs*, void*)>:
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8a9:	b8 10 27 00 00       	mov    eax,0x2710
c001e8ae:	ba 00 00 00 00       	mov    edx,0x0
c001e8b3:	f7 f1                	div    ecx
c001e8b5:	83 ec 0c             	sub    esp,0xc
c001e8b8:	50                   	push   eax
c001e8b9:	e8 a2 f8 fe ff       	call   c000e160 <timerHandler(unsigned int)>
c001e8be:	83 c4 10             	add    esp,0x10
c001e8c1:	90                   	nop
c001e8c2:	83 c4 0c             	add    esp,0xc
c001e8c5:	c3                   	ret    
c001e8c6:	66 90                	xchg   ax,ax

c001e8c8 <APICTimer::open(int, int, void*)>:
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d1:	83 c0 24             	add    eax,0x24
c001e8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d6:	83 ec 08             	sub    esp,0x8
c001e8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e1:	ff d0                	call   eax
c001e8e3:	83 c4 10             	add    esp,0x10
c001e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8fc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e902:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e906:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e90c:	83 ec 0c             	sub    esp,0xc
c001e90f:	51                   	push   ecx
c001e910:	6a 01                	push   0x1
c001e912:	68 a0 e8 01 c0       	push   0xc001e8a0
c001e917:	52                   	push   edx
c001e918:	50                   	push   eax
c001e919:	e8 82 dd fe ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e91e:	83 c4 20             	add    esp,0x20
c001e921:	89 c2                	mov    edx,eax
c001e923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e927:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e92d:	b8 00 00 00 00       	mov    eax,0x0
c001e932:	83 c4 0c             	add    esp,0xc
c001e935:	c3                   	ret    
c001e936:	66 90                	xchg   ax,ax

c001e938 <APICTimer::write(int)>:
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	83 ec 0c             	sub    esp,0xc
c001e93e:	68 f4 2f 02 c0       	push   0xc0022ff4
c001e943:	e8 49 29 ff ff       	call   c0011291 <KePanic(char const*)>
c001e948:	83 c4 10             	add    esp,0x10
c001e94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e953:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e959:	90                   	nop
c001e95a:	83 c4 0c             	add    esp,0xc
c001e95d:	c3                   	ret    
c001e95e:	66 90                	xchg   ax,ax

c001e960 <APICTimer::APICTimer()>:
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e967:	83 ec 08             	sub    esp,0x8
c001e96a:	68 04 30 02 c0       	push   0xc0023004
c001e96f:	50                   	push   eax
c001e970:	e8 1f f7 fe ff       	call   c000e094 <Timer::Timer(char const*)>
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	ba 18 30 02 c0       	mov    edx,0xc0023018
c001e97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e981:	89 10                	mov    DWORD PTR [eax],edx
c001e983:	90                   	nop
c001e984:	83 c4 0c             	add    esp,0xc
c001e987:	c3                   	ret    

c001e988 <PIT::write(int)>:
c001e988:	83 ec 10             	sub    esp,0x10
c001e98b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e98f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e993:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e99d:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e9a2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e9a7:	89 c2                	mov    edx,eax
c001e9a9:	c1 fa 1f             	sar    edx,0x1f
c001e9ac:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e9b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9b4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e9bb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e9c0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e9c4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e9c9:	ee                   	out    dx,al
c001e9ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9ce:	0f b6 c0             	movzx  eax,al
c001e9d1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e9d8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e9dc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e9e0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e9e5:	ee                   	out    dx,al
c001e9e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9ea:	c1 f8 08             	sar    eax,0x8
c001e9ed:	0f b6 c0             	movzx  eax,al
c001e9f0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e9f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e9fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e9ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea04:	ee                   	out    dx,al
c001ea05:	90                   	nop
c001ea06:	83 c4 10             	add    esp,0x10
c001ea09:	c3                   	ret    
c001ea0a:	66 90                	xchg   ax,ax

c001ea0c <pitHandler(regs*, void*)>:
c001ea0c:	83 ec 0c             	sub    esp,0xc
c001ea0f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea15:	b8 10 27 00 00       	mov    eax,0x2710
c001ea1a:	89 c2                	mov    edx,eax
c001ea1c:	c1 fa 1f             	sar    edx,0x1f
c001ea1f:	f7 f9                	idiv   ecx
c001ea21:	83 ec 0c             	sub    esp,0xc
c001ea24:	50                   	push   eax
c001ea25:	e8 36 f7 fe ff       	call   c000e160 <timerHandler(unsigned int)>
c001ea2a:	83 c4 10             	add    esp,0x10
c001ea2d:	90                   	nop
c001ea2e:	83 c4 0c             	add    esp,0xc
c001ea31:	c3                   	ret    
c001ea32:	66 90                	xchg   ax,ax

c001ea34 <PIT::open(int, int, void*)>:
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3d:	83 c0 24             	add    eax,0x24
c001ea40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea42:	83 ec 08             	sub    esp,0x8
c001ea45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea4d:	ff d0                	call   eax
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea56:	83 ec 0c             	sub    esp,0xc
c001ea59:	6a 00                	push   0x0
c001ea5b:	6a 01                	push   0x1
c001ea5d:	68 0c ea 01 c0       	push   0xc001ea0c
c001ea62:	6a 00                	push   0x0
c001ea64:	50                   	push   eax
c001ea65:	e8 36 dc fe ff       	call   c000c6a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea6a:	83 c4 20             	add    esp,0x20
c001ea6d:	89 c2                	mov    edx,eax
c001ea6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea73:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea79:	b8 00 00 00 00       	mov    eax,0x0
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    
c001ea82:	66 90                	xchg   ax,ax

c001ea84 <PIT::close(int, int, void*)>:
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ea95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea99:	6a 01                	push   0x1
c001ea9b:	68 0c ea 01 c0       	push   0xc001ea0c
c001eaa0:	6a 00                	push   0x0
c001eaa2:	50                   	push   eax
c001eaa3:	e8 2e dc fe ff       	call   c000c6d6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eaa8:	83 c4 10             	add    esp,0x10
c001eaab:	b8 00 00 00 00       	mov    eax,0x0
c001eab0:	83 c4 0c             	add    esp,0xc
c001eab3:	c3                   	ret    

c001eab4 <PIT::PIT()>:
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabb:	83 ec 08             	sub    esp,0x8
c001eabe:	68 40 30 02 c0       	push   0xc0023040
c001eac3:	50                   	push   eax
c001eac4:	e8 cb f5 fe ff       	call   c000e094 <Timer::Timer(char const*)>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	ba 68 30 02 c0       	mov    edx,0xc0023068
c001ead1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead5:	89 10                	mov    DWORD PTR [eax],edx
c001ead7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eae1:	0f b6 d0             	movzx  edx,al
c001eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eaf9:	0f b6 d0             	movzx  edx,al
c001eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb00:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb0f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb12:	88 d1                	mov    cl,dl
c001eb14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb18:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb1e:	0f b6 d0             	movzx  edx,al
c001eb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb25:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb29:	83 e1 3f             	and    ecx,0x3f
c001eb2c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb30:	90                   	nop
c001eb31:	83 c4 0c             	add    esp,0xc
c001eb34:	c3                   	ret    
c001eb35:	66 90                	xchg   ax,ax
c001eb37:	66 90                	xchg   ax,ax
c001eb39:	66 90                	xchg   ax,ax
c001eb3b:	66 90                	xchg   ax,ax
c001eb3d:	66 90                	xchg   ax,ax
c001eb3f:	90                   	nop

c001eb40 <avxDetect>:
c001eb40:	b8 01 00 00 00       	mov    eax,0x1
c001eb45:	0f a2                	cpuid  
c001eb47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb4d:	74 15                	je     c001eb64 <avxDetect.noAVX>
c001eb4f:	b8 01 00 00 00       	mov    eax,0x1
c001eb54:	0f a2                	cpuid  
c001eb56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eb5c:	74 06                	je     c001eb64 <avxDetect.noAVX>
c001eb5e:	b8 01 00 00 00       	mov    eax,0x1
c001eb63:	c3                   	ret    

c001eb64 <avxDetect.noAVX>:
c001eb64:	b8 00 00 00 00       	mov    eax,0x0
c001eb69:	c3                   	ret    

c001eb6a <avxSave>:
c001eb6a:	53                   	push   ebx
c001eb6b:	52                   	push   edx
c001eb6c:	31 c0                	xor    eax,eax
c001eb6e:	48                   	dec    eax
c001eb6f:	89 c2                	mov    edx,eax
c001eb71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb75:	0f ae 23             	xsave  [ebx]
c001eb78:	5a                   	pop    edx
c001eb79:	5b                   	pop    ebx
c001eb7a:	c3                   	ret    

c001eb7b <avxLoad>:
c001eb7b:	53                   	push   ebx
c001eb7c:	52                   	push   edx
c001eb7d:	31 c0                	xor    eax,eax
c001eb7f:	48                   	dec    eax
c001eb80:	89 c2                	mov    edx,eax
c001eb82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb86:	0f ae 2b             	xrstor [ebx]
c001eb89:	5a                   	pop    edx
c001eb8a:	5b                   	pop    ebx
c001eb8b:	c3                   	ret    

c001eb8c <avxInit>:
c001eb8c:	e8 67 03 00 00       	call   c001eef8 <sseInit>
c001eb91:	50                   	push   eax
c001eb92:	51                   	push   ecx
c001eb93:	0f 20 e0             	mov    eax,cr4
c001eb96:	0d 00 00 04 00       	or     eax,0x40000
c001eb9b:	0f 22 e0             	mov    cr4,eax
c001eb9e:	31 c9                	xor    ecx,ecx
c001eba0:	0f 01 d0             	xgetbv 
c001eba3:	0d 07 00 00 00       	or     eax,0x7
c001eba8:	0f 01 d1             	xsetbv 
c001ebab:	59                   	pop    ecx
c001ebac:	58                   	pop    eax
c001ebad:	c3                   	ret    

c001ebae <avxClose>:
c001ebae:	c3                   	ret    

c001ebaf <wouldSheSayYes>:
c001ebaf:	c3                   	ret    
c001ebb0:	49                   	dec    ecx
c001ebb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ebb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ebb9:	75 20                	jne    c001ebdb <isr0+0xb>
c001ebbb:	4e                   	dec    esi
c001ebbc:	79 61                	jns    c001ec1f <isr7+0x3>
c001ebbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ebc3:	66 90                	xchg   ax,ax
c001ebc5:	66 90                	xchg   ax,ax
c001ebc7:	66 90                	xchg   ax,ax
c001ebc9:	66 90                	xchg   ax,ax
c001ebcb:	66 90                	xchg   ax,ax
c001ebcd:	66 90                	xchg   ax,ax
c001ebcf:	90                   	nop

c001ebd0 <isr0>:
c001ebd0:	fa                   	cli    
c001ebd1:	68 00 00 00 00       	push   0x0
c001ebd6:	68 00 00 00 00       	push   0x0
c001ebdb:	e9 56 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ebe0 <isr1>:
c001ebe0:	fa                   	cli    
c001ebe1:	6a 00                	push   0x0
c001ebe3:	6a 01                	push   0x1
c001ebe5:	e9 4c 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ebea <isr2>:
c001ebea:	fa                   	cli    
c001ebeb:	6a 00                	push   0x0
c001ebed:	6a 02                	push   0x2
c001ebef:	e9 42 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ebf4 <isr3>:
c001ebf4:	fa                   	cli    
c001ebf5:	6a 00                	push   0x0
c001ebf7:	6a 03                	push   0x3
c001ebf9:	e9 38 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ebfe <isr4>:
c001ebfe:	fa                   	cli    
c001ebff:	6a 00                	push   0x0
c001ec01:	6a 04                	push   0x4
c001ec03:	e9 2e 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ec08 <isr5>:
c001ec08:	fa                   	cli    
c001ec09:	6a 00                	push   0x0
c001ec0b:	6a 05                	push   0x5
c001ec0d:	e9 24 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ec12 <isr6>:
c001ec12:	fa                   	cli    
c001ec13:	6a 00                	push   0x0
c001ec15:	6a 06                	push   0x6
c001ec17:	e9 1a 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ec1c <isr7>:
c001ec1c:	fa                   	cli    
c001ec1d:	6a 00                	push   0x0
c001ec1f:	6a 07                	push   0x7
c001ec21:	e9 10 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ec26 <isr8>:
c001ec26:	fa                   	cli    
c001ec27:	6a 08                	push   0x8
c001ec29:	e9 08 01 00 00       	jmp    c001ed36 <int_common_stub>

c001ec2e <isr9>:
c001ec2e:	fa                   	cli    
c001ec2f:	6a 00                	push   0x0
c001ec31:	6a 09                	push   0x9
c001ec33:	e9 fe 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec38 <isr10>:
c001ec38:	fa                   	cli    
c001ec39:	6a 0a                	push   0xa
c001ec3b:	e9 f6 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec40 <isr11>:
c001ec40:	fa                   	cli    
c001ec41:	6a 0b                	push   0xb
c001ec43:	e9 ee 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec48 <isr12>:
c001ec48:	fa                   	cli    
c001ec49:	6a 0c                	push   0xc
c001ec4b:	e9 e6 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec50 <isr13>:
c001ec50:	fa                   	cli    
c001ec51:	6a 0d                	push   0xd
c001ec53:	53                   	push   ebx
c001ec54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec58:	81 fb 26 ee 01 c0    	cmp    ebx,0xc001ee26
c001ec5e:	5b                   	pop    ebx
c001ec5f:	0f 84 c3 01 00 00    	je     c001ee28 <finishSignal2>
c001ec65:	e9 cc 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec6a <isr14>:
c001ec6a:	fa                   	cli    
c001ec6b:	6a 0e                	push   0xe
c001ec6d:	e9 c4 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec72 <isr15>:
c001ec72:	fa                   	cli    
c001ec73:	6a 00                	push   0x0
c001ec75:	6a 0f                	push   0xf
c001ec77:	e9 ba 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec7c <isr16>:
c001ec7c:	fa                   	cli    
c001ec7d:	6a 00                	push   0x0
c001ec7f:	6a 10                	push   0x10
c001ec81:	e9 b0 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec86 <isr17>:
c001ec86:	fa                   	cli    
c001ec87:	6a 00                	push   0x0
c001ec89:	6a 11                	push   0x11
c001ec8b:	e9 a6 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec90 <isr18>:
c001ec90:	fa                   	cli    
c001ec91:	6a 00                	push   0x0
c001ec93:	6a 12                	push   0x12
c001ec95:	e9 9c 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ec9a <irq3>:
c001ec9a:	fa                   	cli    
c001ec9b:	6a 00                	push   0x0
c001ec9d:	6a 23                	push   0x23
c001ec9f:	e9 92 00 00 00       	jmp    c001ed36 <int_common_stub>

c001eca4 <irq4>:
c001eca4:	fa                   	cli    
c001eca5:	6a 00                	push   0x0
c001eca7:	6a 24                	push   0x24
c001eca9:	e9 88 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecae <irq5>:
c001ecae:	fa                   	cli    
c001ecaf:	6a 00                	push   0x0
c001ecb1:	6a 25                	push   0x25
c001ecb3:	e9 7e 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecb8 <irq6>:
c001ecb8:	fa                   	cli    
c001ecb9:	6a 00                	push   0x0
c001ecbb:	6a 26                	push   0x26
c001ecbd:	e9 74 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecc2 <irq7>:
c001ecc2:	fa                   	cli    
c001ecc3:	6a 00                	push   0x0
c001ecc5:	6a 27                	push   0x27
c001ecc7:	e9 6a 00 00 00       	jmp    c001ed36 <int_common_stub>

c001eccc <irq8>:
c001eccc:	fa                   	cli    
c001eccd:	6a 00                	push   0x0
c001eccf:	6a 28                	push   0x28
c001ecd1:	e9 60 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecd6 <irq9>:
c001ecd6:	fa                   	cli    
c001ecd7:	6a 00                	push   0x0
c001ecd9:	6a 29                	push   0x29
c001ecdb:	e9 56 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ece0 <irq10>:
c001ece0:	fa                   	cli    
c001ece1:	6a 00                	push   0x0
c001ece3:	6a 2a                	push   0x2a
c001ece5:	e9 4c 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecea <irq11>:
c001ecea:	fa                   	cli    
c001eceb:	6a 00                	push   0x0
c001eced:	6a 2b                	push   0x2b
c001ecef:	e9 42 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecf4 <irq12>:
c001ecf4:	fa                   	cli    
c001ecf5:	6a 00                	push   0x0
c001ecf7:	6a 2c                	push   0x2c
c001ecf9:	e9 38 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ecfe <irq13>:
c001ecfe:	fa                   	cli    
c001ecff:	6a 00                	push   0x0
c001ed01:	6a 2d                	push   0x2d
c001ed03:	e9 2e 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ed08 <irq14>:
c001ed08:	fa                   	cli    
c001ed09:	6a 00                	push   0x0
c001ed0b:	6a 2e                	push   0x2e
c001ed0d:	e9 24 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ed12 <irq15>:
c001ed12:	fa                   	cli    
c001ed13:	6a 00                	push   0x0
c001ed15:	6a 2f                	push   0x2f
c001ed17:	e9 1a 00 00 00       	jmp    c001ed36 <int_common_stub>

c001ed1c <irq1>:
c001ed1c:	fa                   	cli    
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 21                	push   0x21
c001ed21:	eb 13                	jmp    c001ed36 <int_common_stub>

c001ed23 <irq2>:
c001ed23:	fa                   	cli    
c001ed24:	6a 00                	push   0x0
c001ed26:	6a 22                	push   0x22
c001ed28:	eb 0c                	jmp    c001ed36 <int_common_stub>

c001ed2a <isr96>:
c001ed2a:	6a 00                	push   0x0
c001ed2c:	6a 60                	push   0x60
c001ed2e:	fb                   	sti    
c001ed2f:	eb 37                	jmp    c001ed68 <syscall_common_stub>

c001ed31 <irq0>:
c001ed31:	fa                   	cli    
c001ed32:	6a 00                	push   0x0
c001ed34:	6a 20                	push   0x20

c001ed36 <int_common_stub>:
c001ed36:	60                   	pusha  
c001ed37:	1e                   	push   ds
c001ed38:	06                   	push   es
c001ed39:	0f a0                	push   fs
c001ed3b:	0f a8                	push   gs
c001ed3d:	66 b8 10 00          	mov    ax,0x10
c001ed41:	66 8e d8             	mov    ds,ax
c001ed44:	66 8e c0             	mov    es,ax
c001ed47:	66 8e e0             	mov    fs,ax
c001ed4a:	66 8e e8             	mov    gs,ax
c001ed4d:	54                   	push   esp
c001ed4e:	fc                   	cld    
c001ed4f:	e8 4c de fe ff       	call   c000cba0 <int_handler>
c001ed54:	81 c4 04 00 00 00    	add    esp,0x4
c001ed5a:	0f a9                	pop    gs
c001ed5c:	0f a1                	pop    fs
c001ed5e:	07                   	pop    es
c001ed5f:	1f                   	pop    ds
c001ed60:	61                   	popa   
c001ed61:	81 c4 08 00 00 00    	add    esp,0x8
c001ed67:	cf                   	iret   

c001ed68 <syscall_common_stub>:
c001ed68:	60                   	pusha  
c001ed69:	1e                   	push   ds
c001ed6a:	06                   	push   es
c001ed6b:	0f a0                	push   fs
c001ed6d:	0f a8                	push   gs
c001ed6f:	66 b8 10 00          	mov    ax,0x10
c001ed73:	66 8e d8             	mov    ds,ax
c001ed76:	66 8e c0             	mov    es,ax
c001ed79:	66 8e e0             	mov    fs,ax
c001ed7c:	66 8e e8             	mov    gs,ax
c001ed7f:	54                   	push   esp
c001ed80:	fc                   	cld    
c001ed81:	e8 1a de fe ff       	call   c000cba0 <int_handler>
c001ed86:	81 c4 04 00 00 00    	add    esp,0x4
c001ed8c:	0f a9                	pop    gs
c001ed8e:	0f a1                	pop    fs
c001ed90:	07                   	pop    es
c001ed91:	1f                   	pop    ds
c001ed92:	e8 0c 2b ff ff       	call   c00118a3 <KiCheckSignalZ>
c001ed97:	3d 00 00 00 00       	cmp    eax,0x0
c001ed9c:	0f 84 c0 00 00 00    	je     c001ee62 <skipSignals>
c001eda2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001eda7:	61                   	popa   
c001eda8:	53                   	push   ebx
c001eda9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001edaf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001edb2:	5b                   	pop    ebx
c001edb3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001edb8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001edbb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001edbe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001edc1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001edc4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001edc7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001edca:	81 c4 08 00 00 00    	add    esp,0x8
c001edd0:	5e                   	pop    esi
c001edd1:	5b                   	pop    ebx
c001edd2:	59                   	pop    ecx
c001edd3:	5a                   	pop    edx
c001edd4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001edd7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001edda:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001eddd:	52                   	push   edx
c001edde:	51                   	push   ecx
c001eddf:	53                   	push   ebx
c001ede0:	56                   	push   esi
c001ede1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ede7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001edea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001eded:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001edf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001edf3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001edf6:	60                   	pusha  
c001edf7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001edfd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee00:	89 e3                	mov    ebx,esp
c001ee02:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee05:	52                   	push   edx
c001ee06:	68 26 ee 01 c0       	push   0xc001ee26
c001ee0b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee0e:	89 dc                	mov    esp,ebx
c001ee10:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee13:	68 23 00 00 00       	push   0x23
c001ee18:	51                   	push   ecx
c001ee19:	68 02 02 00 00       	push   0x202
c001ee1e:	68 1b 00 00 00       	push   0x1b
c001ee23:	ff 36                	push   DWORD PTR [esi]
c001ee25:	cf                   	iret   

c001ee26 <finishSignal>:
c001ee26:	cd 0f                	int    0xf

c001ee28 <finishSignal2>:
c001ee28:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ee2e:	e8 ed 2a ff ff       	call   c0011920 <KiFinishSignalZ>
c001ee33:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ee39:	68 23 00 00 00       	push   0x23
c001ee3e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee41:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee44:	68 1b 00 00 00       	push   0x1b
c001ee49:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee4f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ee52:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ee55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ee58:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ee5b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ee5e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ee61:	cf                   	iret   

c001ee62 <skipSignals>:
c001ee62:	61                   	popa   
c001ee63:	81 c4 08 00 00 00    	add    esp,0x8
c001ee69:	cf                   	iret   
c001ee6a:	90                   	nop
c001ee6b:	90                   	nop

c001ee6c <irq16>:
c001ee6c:	fa                   	cli    
c001ee6d:	6a 00                	push   0x0
c001ee6f:	6a 30                	push   0x30
c001ee71:	e9 c0 fe ff ff       	jmp    c001ed36 <int_common_stub>

c001ee76 <irq17>:
c001ee76:	fa                   	cli    
c001ee77:	6a 00                	push   0x0
c001ee79:	6a 31                	push   0x31
c001ee7b:	e9 b6 fe ff ff       	jmp    c001ed36 <int_common_stub>

c001ee80 <irq18>:
c001ee80:	fa                   	cli    
c001ee81:	6a 00                	push   0x0
c001ee83:	6a 32                	push   0x32
c001ee85:	e9 ac fe ff ff       	jmp    c001ed36 <int_common_stub>

c001ee8a <irq19>:
c001ee8a:	fa                   	cli    
c001ee8b:	6a 00                	push   0x0
c001ee8d:	6a 33                	push   0x33
c001ee8f:	e9 a2 fe ff ff       	jmp    c001ed36 <int_common_stub>

c001ee94 <irq20>:
c001ee94:	fa                   	cli    
c001ee95:	6a 00                	push   0x0
c001ee97:	6a 34                	push   0x34
c001ee99:	e9 98 fe ff ff       	jmp    c001ed36 <int_common_stub>

c001ee9e <irq21>:
c001ee9e:	fa                   	cli    
c001ee9f:	6a 00                	push   0x0
c001eea1:	6a 35                	push   0x35
c001eea3:	e9 8e fe ff ff       	jmp    c001ed36 <int_common_stub>

c001eea8 <irq22>:
c001eea8:	fa                   	cli    
c001eea9:	6a 00                	push   0x0
c001eeab:	6a 36                	push   0x36
c001eead:	e9 84 fe ff ff       	jmp    c001ed36 <int_common_stub>

c001eeb2 <irq23>:
c001eeb2:	fa                   	cli    
c001eeb3:	6a 00                	push   0x0
c001eeb5:	6a 37                	push   0x37
c001eeb7:	e9 7a fe ff ff       	jmp    c001ed36 <int_common_stub>
c001eebc:	66 90                	xchg   ax,ax
c001eebe:	66 90                	xchg   ax,ax

c001eec0 <i386GetRDRAND>:
c001eec0:	b9 64 00 00 00       	mov    ecx,0x64

c001eec5 <retry>:
c001eec5:	0f c7 f0             	rdrand eax
c001eec8:	72 05                	jb     c001eecf <retry.done>
c001eeca:	e2 f9                	loop   c001eec5 <retry>

c001eecc <retry.fail>:
c001eecc:	31 c0                	xor    eax,eax
c001eece:	c3                   	ret    

c001eecf <retry.done>:
c001eecf:	c3                   	ret    

c001eed0 <absolutelyNoChanceInHell>:
c001eed0:	b8 01 00 00 00       	mov    eax,0x1
c001eed5:	0f a2                	cpuid  
c001eed7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001eedd:	74 06                	je     c001eee5 <sseDetect.noSSE>
c001eedf:	b8 01 00 00 00       	mov    eax,0x1
c001eee4:	c3                   	ret    

c001eee5 <sseDetect.noSSE>:
c001eee5:	31 c0                	xor    eax,eax
c001eee7:	c3                   	ret    

c001eee8 <sseSave>:
c001eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeec:	0f ae 00             	fxsave [eax]
c001eeef:	c3                   	ret    

c001eef0 <sseLoad>:
c001eef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef4:	0f ae 08             	fxrstor [eax]
c001eef7:	c3                   	ret    

c001eef8 <sseInit>:
c001eef8:	e8 42 00 00 00       	call   c001ef3f <x87Init>
c001eefd:	0f 20 e0             	mov    eax,cr4
c001ef00:	66 0d 00 06          	or     ax,0x600
c001ef04:	0f 22 e0             	mov    cr4,eax
c001ef07:	c3                   	ret    

c001ef08 <sseClose>:
c001ef08:	c3                   	ret    
c001ef09:	66 90                	xchg   ax,ax
c001ef0b:	66 90                	xchg   ax,ax
c001ef0d:	66 90                	xchg   ax,ax
c001ef0f:	90                   	nop

c001ef10 <value_37F>:
c001ef10:	7f 03                	jg     c001ef15 <value_37A+0x1>

c001ef12 <value_37E>:
c001ef12:	7e 03                	jle    c001ef17 <x87Detect+0x1>

c001ef14 <value_37A>:
c001ef14:	7a 03                	jp     c001ef19 <x87Detect+0x3>

c001ef16 <x87Detect>:
c001ef16:	b8 01 00 00 00       	mov    eax,0x1
c001ef1b:	0f a2                	cpuid  
c001ef1d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ef23:	74 06                	je     c001ef2b <x87Detect.nox87>
c001ef25:	b8 01 00 00 00       	mov    eax,0x1
c001ef2a:	c3                   	ret    

c001ef2b <x87Detect.nox87>:
c001ef2b:	b8 00 00 00 00       	mov    eax,0x0
c001ef30:	c3                   	ret    

c001ef31 <x87Save>:
c001ef31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef35:	dd 30                	fnsave [eax]
c001ef37:	c3                   	ret    

c001ef38 <x87Load>:
c001ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3c:	dd 20                	frstor [eax]
c001ef3e:	c3                   	ret    

c001ef3f <x87Init>:
c001ef3f:	0f 20 c0             	mov    eax,cr0
c001ef42:	66 25 fb ff          	and    ax,0xfffb
c001ef46:	66 0d 22 00          	or     ax,0x22
c001ef4a:	0f 22 c0             	mov    cr0,eax
c001ef4d:	db e3                	fninit 
c001ef4f:	0f 06                	clts   
c001ef51:	d9 2d 14 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef14
c001ef57:	c3                   	ret    

c001ef58 <x87Close>:
c001ef58:	c3                   	ret    
c001ef59:	66 90                	xchg   ax,ax
c001ef5b:	90                   	nop

c001ef5c <__do_global_ctors_aux>:
c001ef5c:	a1 10 ff 01 c0       	mov    eax,ds:0xc001ff10
c001ef61:	83 f8 ff             	cmp    eax,0xffffffff
c001ef64:	74 1a                	je     c001ef80 <__do_global_ctors_aux+0x24>
c001ef66:	55                   	push   ebp
c001ef67:	89 e5                	mov    ebp,esp
c001ef69:	53                   	push   ebx
c001ef6a:	52                   	push   edx
c001ef6b:	bb 10 ff 01 c0       	mov    ebx,0xc001ff10
c001ef70:	ff d0                	call   eax
c001ef72:	83 eb 04             	sub    ebx,0x4
c001ef75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef77:	83 f8 ff             	cmp    eax,0xffffffff
c001ef7a:	75 f4                	jne    c001ef70 <__do_global_ctors_aux+0x14>
c001ef7c:	58                   	pop    eax
c001ef7d:	5b                   	pop    ebx
c001ef7e:	5d                   	pop    ebp
c001ef7f:	c3                   	ret    
c001ef80:	c3                   	ret    
c001ef81:	66 90                	xchg   ax,ax
c001ef83:	90                   	nop

c001ef84 <__divdi3>:
c001ef84:	55                   	push   ebp
c001ef85:	57                   	push   edi
c001ef86:	56                   	push   esi
c001ef87:	53                   	push   ebx
c001ef88:	83 ec 1c             	sub    esp,0x1c
c001ef8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ef8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001efa2:	85 db                	test   ebx,ebx
c001efa4:	0f 88 8e 00 00 00    	js     c001f038 <__divdi3+0xb4>
c001efaa:	89 dd                	mov    ebp,ebx
c001efac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001efb4:	89 d3                	mov    ebx,edx
c001efb6:	85 d2                	test   edx,edx
c001efb8:	79 0d                	jns    c001efc7 <__divdi3+0x43>
c001efba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001efbe:	f7 d8                	neg    eax
c001efc0:	83 d2 00             	adc    edx,0x0
c001efc3:	f7 da                	neg    edx
c001efc5:	89 d3                	mov    ebx,edx
c001efc7:	89 c7                	mov    edi,eax
c001efc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001efcc:	85 db                	test   ebx,ebx
c001efce:	75 48                	jne    c001f018 <__divdi3+0x94>
c001efd0:	39 ef                	cmp    edi,ebp
c001efd2:	76 24                	jbe    c001eff8 <__divdi3+0x74>
c001efd4:	89 ea                	mov    edx,ebp
c001efd6:	f7 f7                	div    edi
c001efd8:	89 c1                	mov    ecx,eax
c001efda:	31 f6                	xor    esi,esi
c001efdc:	89 c8                	mov    eax,ecx
c001efde:	89 f2                	mov    edx,esi
c001efe0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001efe4:	85 c9                	test   ecx,ecx
c001efe6:	74 07                	je     c001efef <__divdi3+0x6b>
c001efe8:	f7 d8                	neg    eax
c001efea:	83 d2 00             	adc    edx,0x0
c001efed:	f7 da                	neg    edx
c001efef:	83 c4 1c             	add    esp,0x1c
c001eff2:	5b                   	pop    ebx
c001eff3:	5e                   	pop    esi
c001eff4:	5f                   	pop    edi
c001eff5:	5d                   	pop    ebp
c001eff6:	c3                   	ret    
c001eff7:	90                   	nop
c001eff8:	85 ff                	test   edi,edi
c001effa:	75 0b                	jne    c001f007 <__divdi3+0x83>
c001effc:	b8 01 00 00 00       	mov    eax,0x1
c001f001:	31 d2                	xor    edx,edx
c001f003:	f7 f3                	div    ebx
c001f005:	89 c7                	mov    edi,eax
c001f007:	31 d2                	xor    edx,edx
c001f009:	89 e8                	mov    eax,ebp
c001f00b:	f7 f7                	div    edi
c001f00d:	89 c6                	mov    esi,eax
c001f00f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f012:	f7 f7                	div    edi
c001f014:	89 c1                	mov    ecx,eax
c001f016:	eb c4                	jmp    c001efdc <__divdi3+0x58>
c001f018:	39 eb                	cmp    ebx,ebp
c001f01a:	77 3c                	ja     c001f058 <__divdi3+0xd4>
c001f01c:	0f bd f3             	bsr    esi,ebx
c001f01f:	83 f6 1f             	xor    esi,0x1f
c001f022:	75 40                	jne    c001f064 <__divdi3+0xe0>
c001f024:	39 eb                	cmp    ebx,ebp
c001f026:	72 09                	jb     c001f031 <__divdi3+0xad>
c001f028:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f02b:	0f 87 97 00 00 00    	ja     c001f0c8 <__divdi3+0x144>
c001f031:	b9 01 00 00 00       	mov    ecx,0x1
c001f036:	eb a4                	jmp    c001efdc <__divdi3+0x58>
c001f038:	f7 d9                	neg    ecx
c001f03a:	83 d3 00             	adc    ebx,0x0
c001f03d:	f7 db                	neg    ebx
c001f03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f042:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f046:	89 dd                	mov    ebp,ebx
c001f048:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f050:	e9 5f ff ff ff       	jmp    c001efb4 <__divdi3+0x30>
c001f055:	8d 76 00             	lea    esi,[esi+0x0]
c001f058:	31 f6                	xor    esi,esi
c001f05a:	31 c9                	xor    ecx,ecx
c001f05c:	e9 7b ff ff ff       	jmp    c001efdc <__divdi3+0x58>
c001f061:	8d 76 00             	lea    esi,[esi+0x0]
c001f064:	b8 20 00 00 00       	mov    eax,0x20
c001f069:	29 f0                	sub    eax,esi
c001f06b:	89 f1                	mov    ecx,esi
c001f06d:	d3 e3                	shl    ebx,cl
c001f06f:	89 fa                	mov    edx,edi
c001f071:	88 c1                	mov    cl,al
c001f073:	d3 ea                	shr    edx,cl
c001f075:	09 da                	or     edx,ebx
c001f077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f07b:	89 f1                	mov    ecx,esi
c001f07d:	d3 e7                	shl    edi,cl
c001f07f:	89 eb                	mov    ebx,ebp
c001f081:	88 c1                	mov    cl,al
c001f083:	d3 eb                	shr    ebx,cl
c001f085:	89 f1                	mov    ecx,esi
c001f087:	d3 e5                	shl    ebp,cl
c001f089:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f08c:	88 c1                	mov    cl,al
c001f08e:	d3 ea                	shr    edx,cl
c001f090:	09 d5                	or     ebp,edx
c001f092:	89 e8                	mov    eax,ebp
c001f094:	89 da                	mov    edx,ebx
c001f096:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f09a:	89 d3                	mov    ebx,edx
c001f09c:	89 c5                	mov    ebp,eax
c001f09e:	f7 e7                	mul    edi
c001f0a0:	39 d3                	cmp    ebx,edx
c001f0a2:	72 18                	jb     c001f0bc <__divdi3+0x138>
c001f0a4:	74 0a                	je     c001f0b0 <__divdi3+0x12c>
c001f0a6:	89 e9                	mov    ecx,ebp
c001f0a8:	31 f6                	xor    esi,esi
c001f0aa:	e9 2d ff ff ff       	jmp    c001efdc <__divdi3+0x58>
c001f0af:	90                   	nop
c001f0b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f0b3:	89 f1                	mov    ecx,esi
c001f0b5:	d3 e7                	shl    edi,cl
c001f0b7:	39 c7                	cmp    edi,eax
c001f0b9:	73 eb                	jae    c001f0a6 <__divdi3+0x122>
c001f0bb:	90                   	nop
c001f0bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f0bf:	31 f6                	xor    esi,esi
c001f0c1:	e9 16 ff ff ff       	jmp    c001efdc <__divdi3+0x58>
c001f0c6:	66 90                	xchg   ax,ax
c001f0c8:	31 c9                	xor    ecx,ecx
c001f0ca:	e9 0d ff ff ff       	jmp    c001efdc <__divdi3+0x58>
c001f0cf:	90                   	nop

c001f0d0 <__moddi3>:
c001f0d0:	55                   	push   ebp
c001f0d1:	57                   	push   edi
c001f0d2:	56                   	push   esi
c001f0d3:	53                   	push   ebx
c001f0d4:	83 ec 2c             	sub    esp,0x2c
c001f0d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f0db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f0df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f0e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f0e7:	85 db                	test   ebx,ebx
c001f0e9:	0f 88 85 00 00 00    	js     c001f174 <__moddi3+0xa4>
c001f0ef:	89 de                	mov    esi,ebx
c001f0f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f0f9:	89 d7                	mov    edi,edx
c001f0fb:	85 d2                	test   edx,edx
c001f0fd:	79 09                	jns    c001f108 <__moddi3+0x38>
c001f0ff:	f7 d8                	neg    eax
c001f101:	83 d2 00             	adc    edx,0x0
c001f104:	f7 da                	neg    edx
c001f106:	89 d7                	mov    edi,edx
c001f108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f10c:	89 cd                	mov    ebp,ecx
c001f10e:	85 ff                	test   edi,edi
c001f110:	75 52                	jne    c001f164 <__moddi3+0x94>
c001f112:	89 c3                	mov    ebx,eax
c001f114:	39 f0                	cmp    eax,esi
c001f116:	76 24                	jbe    c001f13c <__moddi3+0x6c>
c001f118:	89 c8                	mov    eax,ecx
c001f11a:	89 f2                	mov    edx,esi
c001f11c:	f7 f3                	div    ebx
c001f11e:	89 d6                	mov    esi,edx
c001f120:	89 f0                	mov    eax,esi
c001f122:	31 d2                	xor    edx,edx
c001f124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f128:	85 c9                	test   ecx,ecx
c001f12a:	74 07                	je     c001f133 <__moddi3+0x63>
c001f12c:	f7 d8                	neg    eax
c001f12e:	83 d2 00             	adc    edx,0x0
c001f131:	f7 da                	neg    edx
c001f133:	83 c4 2c             	add    esp,0x2c
c001f136:	5b                   	pop    ebx
c001f137:	5e                   	pop    esi
c001f138:	5f                   	pop    edi
c001f139:	5d                   	pop    ebp
c001f13a:	c3                   	ret    
c001f13b:	90                   	nop
c001f13c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f140:	85 db                	test   ebx,ebx
c001f142:	75 0d                	jne    c001f151 <__moddi3+0x81>
c001f144:	b8 01 00 00 00       	mov    eax,0x1
c001f149:	31 d2                	xor    edx,edx
c001f14b:	f7 f7                	div    edi
c001f14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f151:	89 f0                	mov    eax,esi
c001f153:	31 d2                	xor    edx,edx
c001f155:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f159:	f7 f7                	div    edi
c001f15b:	89 e8                	mov    eax,ebp
c001f15d:	f7 f7                	div    edi
c001f15f:	89 d6                	mov    esi,edx
c001f161:	eb bd                	jmp    c001f120 <__moddi3+0x50>
c001f163:	90                   	nop
c001f164:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f168:	39 f7                	cmp    edi,esi
c001f16a:	76 20                	jbe    c001f18c <__moddi3+0xbc>
c001f16c:	89 c8                	mov    eax,ecx
c001f16e:	89 f2                	mov    edx,esi
c001f170:	eb b2                	jmp    c001f124 <__moddi3+0x54>
c001f172:	66 90                	xchg   ax,ax
c001f174:	f7 d9                	neg    ecx
c001f176:	83 d3 00             	adc    ebx,0x0
c001f179:	f7 db                	neg    ebx
c001f17b:	89 de                	mov    esi,ebx
c001f17d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f185:	e9 6f ff ff ff       	jmp    c001f0f9 <__moddi3+0x29>
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	0f bd c7             	bsr    eax,edi
c001f18f:	83 f0 1f             	xor    eax,0x1f
c001f192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f196:	75 24                	jne    c001f1bc <__moddi3+0xec>
c001f198:	39 f7                	cmp    edi,esi
c001f19a:	72 06                	jb     c001f1a2 <__moddi3+0xd2>
c001f19c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f1a0:	77 0c                	ja     c001f1ae <__moddi3+0xde>
c001f1a2:	89 e9                	mov    ecx,ebp
c001f1a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f1a8:	19 fe                	sbb    esi,edi
c001f1aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1b2:	89 f2                	mov    edx,esi
c001f1b4:	e9 6b ff ff ff       	jmp    c001f124 <__moddi3+0x54>
c001f1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1bc:	b8 20 00 00 00       	mov    eax,0x20
c001f1c1:	89 c2                	mov    edx,eax
c001f1c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f1c7:	29 da                	sub    edx,ebx
c001f1c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f1cd:	88 d9                	mov    cl,bl
c001f1cf:	d3 e7                	shl    edi,cl
c001f1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1d5:	88 d1                	mov    cl,dl
c001f1d7:	d3 e8                	shr    eax,cl
c001f1d9:	09 c7                	or     edi,eax
c001f1db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f1df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1e3:	89 d8                	mov    eax,ebx
c001f1e5:	88 d9                	mov    cl,bl
c001f1e7:	d3 e7                	shl    edi,cl
c001f1e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1ed:	89 f3                	mov    ebx,esi
c001f1ef:	88 d1                	mov    cl,dl
c001f1f1:	d3 eb                	shr    ebx,cl
c001f1f3:	89 c7                	mov    edi,eax
c001f1f5:	88 c1                	mov    cl,al
c001f1f7:	d3 e6                	shl    esi,cl
c001f1f9:	89 e8                	mov    eax,ebp
c001f1fb:	88 d1                	mov    cl,dl
c001f1fd:	d3 e8                	shr    eax,cl
c001f1ff:	09 f0                	or     eax,esi
c001f201:	89 f9                	mov    ecx,edi
c001f203:	d3 e5                	shl    ebp,cl
c001f205:	89 da                	mov    edx,ebx
c001f207:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f20b:	89 d3                	mov    ebx,edx
c001f20d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f211:	89 c6                	mov    esi,eax
c001f213:	89 d1                	mov    ecx,edx
c001f215:	39 d3                	cmp    ebx,edx
c001f217:	72 27                	jb     c001f240 <__moddi3+0x170>
c001f219:	74 21                	je     c001f23c <__moddi3+0x16c>
c001f21b:	29 f5                	sub    ebp,esi
c001f21d:	19 cb                	sbb    ebx,ecx
c001f21f:	89 de                	mov    esi,ebx
c001f221:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f225:	d3 e6                	shl    esi,cl
c001f227:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f22b:	89 f9                	mov    ecx,edi
c001f22d:	d3 ed                	shr    ebp,cl
c001f22f:	09 ee                	or     esi,ebp
c001f231:	89 f0                	mov    eax,esi
c001f233:	d3 eb                	shr    ebx,cl
c001f235:	89 da                	mov    edx,ebx
c001f237:	e9 e8 fe ff ff       	jmp    c001f124 <__moddi3+0x54>
c001f23c:	39 c5                	cmp    ebp,eax
c001f23e:	73 db                	jae    c001f21b <__moddi3+0x14b>
c001f240:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f244:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f248:	89 d1                	mov    ecx,edx
c001f24a:	89 c6                	mov    esi,eax
c001f24c:	eb cd                	jmp    c001f21b <__moddi3+0x14b>
c001f24e:	66 90                	xchg   ax,ax

c001f250 <__udivdi3>:
c001f250:	55                   	push   ebp
c001f251:	57                   	push   edi
c001f252:	56                   	push   esi
c001f253:	53                   	push   ebx
c001f254:	83 ec 1c             	sub    esp,0x1c
c001f257:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f25b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f25f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f263:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f267:	85 d2                	test   edx,edx
c001f269:	75 41                	jne    c001f2ac <__udivdi3+0x5c>
c001f26b:	39 f7                	cmp    edi,esi
c001f26d:	76 15                	jbe    c001f284 <__udivdi3+0x34>
c001f26f:	89 e8                	mov    eax,ebp
c001f271:	89 f2                	mov    edx,esi
c001f273:	f7 f7                	div    edi
c001f275:	31 db                	xor    ebx,ebx
c001f277:	89 da                	mov    edx,ebx
c001f279:	83 c4 1c             	add    esp,0x1c
c001f27c:	5b                   	pop    ebx
c001f27d:	5e                   	pop    esi
c001f27e:	5f                   	pop    edi
c001f27f:	5d                   	pop    ebp
c001f280:	c3                   	ret    
c001f281:	8d 76 00             	lea    esi,[esi+0x0]
c001f284:	89 f9                	mov    ecx,edi
c001f286:	85 ff                	test   edi,edi
c001f288:	75 0b                	jne    c001f295 <__udivdi3+0x45>
c001f28a:	b8 01 00 00 00       	mov    eax,0x1
c001f28f:	31 d2                	xor    edx,edx
c001f291:	f7 f7                	div    edi
c001f293:	89 c1                	mov    ecx,eax
c001f295:	31 d2                	xor    edx,edx
c001f297:	89 f0                	mov    eax,esi
c001f299:	f7 f1                	div    ecx
c001f29b:	89 c3                	mov    ebx,eax
c001f29d:	89 e8                	mov    eax,ebp
c001f29f:	f7 f1                	div    ecx
c001f2a1:	89 da                	mov    edx,ebx
c001f2a3:	83 c4 1c             	add    esp,0x1c
c001f2a6:	5b                   	pop    ebx
c001f2a7:	5e                   	pop    esi
c001f2a8:	5f                   	pop    edi
c001f2a9:	5d                   	pop    ebp
c001f2aa:	c3                   	ret    
c001f2ab:	90                   	nop
c001f2ac:	39 f2                	cmp    edx,esi
c001f2ae:	77 1c                	ja     c001f2cc <__udivdi3+0x7c>
c001f2b0:	0f bd da             	bsr    ebx,edx
c001f2b3:	83 f3 1f             	xor    ebx,0x1f
c001f2b6:	75 24                	jne    c001f2dc <__udivdi3+0x8c>
c001f2b8:	39 f2                	cmp    edx,esi
c001f2ba:	72 08                	jb     c001f2c4 <__udivdi3+0x74>
c001f2bc:	39 ef                	cmp    edi,ebp
c001f2be:	0f 87 84 00 00 00    	ja     c001f348 <__udivdi3+0xf8>
c001f2c4:	b8 01 00 00 00       	mov    eax,0x1
c001f2c9:	eb ac                	jmp    c001f277 <__udivdi3+0x27>
c001f2cb:	90                   	nop
c001f2cc:	31 db                	xor    ebx,ebx
c001f2ce:	31 c0                	xor    eax,eax
c001f2d0:	89 da                	mov    edx,ebx
c001f2d2:	83 c4 1c             	add    esp,0x1c
c001f2d5:	5b                   	pop    ebx
c001f2d6:	5e                   	pop    esi
c001f2d7:	5f                   	pop    edi
c001f2d8:	5d                   	pop    ebp
c001f2d9:	c3                   	ret    
c001f2da:	66 90                	xchg   ax,ax
c001f2dc:	b8 20 00 00 00       	mov    eax,0x20
c001f2e1:	29 d8                	sub    eax,ebx
c001f2e3:	88 d9                	mov    cl,bl
c001f2e5:	d3 e2                	shl    edx,cl
c001f2e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f2eb:	89 fa                	mov    edx,edi
c001f2ed:	88 c1                	mov    cl,al
c001f2ef:	d3 ea                	shr    edx,cl
c001f2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2f5:	09 d1                	or     ecx,edx
c001f2f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2fb:	88 d9                	mov    cl,bl
c001f2fd:	d3 e7                	shl    edi,cl
c001f2ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f303:	89 f7                	mov    edi,esi
c001f305:	88 c1                	mov    cl,al
c001f307:	d3 ef                	shr    edi,cl
c001f309:	88 d9                	mov    cl,bl
c001f30b:	d3 e6                	shl    esi,cl
c001f30d:	89 ea                	mov    edx,ebp
c001f30f:	88 c1                	mov    cl,al
c001f311:	d3 ea                	shr    edx,cl
c001f313:	09 d6                	or     esi,edx
c001f315:	89 f0                	mov    eax,esi
c001f317:	89 fa                	mov    edx,edi
c001f319:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f31d:	89 d7                	mov    edi,edx
c001f31f:	89 c6                	mov    esi,eax
c001f321:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f325:	39 d7                	cmp    edi,edx
c001f327:	72 13                	jb     c001f33c <__udivdi3+0xec>
c001f329:	74 09                	je     c001f334 <__udivdi3+0xe4>
c001f32b:	89 f0                	mov    eax,esi
c001f32d:	31 db                	xor    ebx,ebx
c001f32f:	e9 43 ff ff ff       	jmp    c001f277 <__udivdi3+0x27>
c001f334:	88 d9                	mov    cl,bl
c001f336:	d3 e5                	shl    ebp,cl
c001f338:	39 c5                	cmp    ebp,eax
c001f33a:	73 ef                	jae    c001f32b <__udivdi3+0xdb>
c001f33c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f33f:	31 db                	xor    ebx,ebx
c001f341:	e9 31 ff ff ff       	jmp    c001f277 <__udivdi3+0x27>
c001f346:	66 90                	xchg   ax,ax
c001f348:	31 c0                	xor    eax,eax
c001f34a:	e9 28 ff ff ff       	jmp    c001f277 <__udivdi3+0x27>
c001f34f:	90                   	nop

c001f350 <__umoddi3>:
c001f350:	55                   	push   ebp
c001f351:	57                   	push   edi
c001f352:	56                   	push   esi
c001f353:	53                   	push   ebx
c001f354:	83 ec 1c             	sub    esp,0x1c
c001f357:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f35b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f35f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f367:	89 da                	mov    edx,ebx
c001f369:	85 c0                	test   eax,eax
c001f36b:	75 37                	jne    c001f3a4 <__umoddi3+0x54>
c001f36d:	39 df                	cmp    edi,ebx
c001f36f:	76 13                	jbe    c001f384 <__umoddi3+0x34>
c001f371:	89 f0                	mov    eax,esi
c001f373:	f7 f7                	div    edi
c001f375:	89 d0                	mov    eax,edx
c001f377:	31 d2                	xor    edx,edx
c001f379:	83 c4 1c             	add    esp,0x1c
c001f37c:	5b                   	pop    ebx
c001f37d:	5e                   	pop    esi
c001f37e:	5f                   	pop    edi
c001f37f:	5d                   	pop    ebp
c001f380:	c3                   	ret    
c001f381:	8d 76 00             	lea    esi,[esi+0x0]
c001f384:	89 fd                	mov    ebp,edi
c001f386:	85 ff                	test   edi,edi
c001f388:	75 0b                	jne    c001f395 <__umoddi3+0x45>
c001f38a:	b8 01 00 00 00       	mov    eax,0x1
c001f38f:	31 d2                	xor    edx,edx
c001f391:	f7 f7                	div    edi
c001f393:	89 c5                	mov    ebp,eax
c001f395:	89 d8                	mov    eax,ebx
c001f397:	31 d2                	xor    edx,edx
c001f399:	f7 f5                	div    ebp
c001f39b:	89 f0                	mov    eax,esi
c001f39d:	f7 f5                	div    ebp
c001f39f:	89 d0                	mov    eax,edx
c001f3a1:	eb d4                	jmp    c001f377 <__umoddi3+0x27>
c001f3a3:	90                   	nop
c001f3a4:	89 f1                	mov    ecx,esi
c001f3a6:	39 d8                	cmp    eax,ebx
c001f3a8:	76 0a                	jbe    c001f3b4 <__umoddi3+0x64>
c001f3aa:	89 f0                	mov    eax,esi
c001f3ac:	83 c4 1c             	add    esp,0x1c
c001f3af:	5b                   	pop    ebx
c001f3b0:	5e                   	pop    esi
c001f3b1:	5f                   	pop    edi
c001f3b2:	5d                   	pop    ebp
c001f3b3:	c3                   	ret    
c001f3b4:	0f bd e8             	bsr    ebp,eax
c001f3b7:	83 f5 1f             	xor    ebp,0x1f
c001f3ba:	75 1c                	jne    c001f3d8 <__umoddi3+0x88>
c001f3bc:	39 d8                	cmp    eax,ebx
c001f3be:	72 04                	jb     c001f3c4 <__umoddi3+0x74>
c001f3c0:	39 f7                	cmp    edi,esi
c001f3c2:	77 08                	ja     c001f3cc <__umoddi3+0x7c>
c001f3c4:	89 da                	mov    edx,ebx
c001f3c6:	29 fe                	sub    esi,edi
c001f3c8:	19 c2                	sbb    edx,eax
c001f3ca:	89 f1                	mov    ecx,esi
c001f3cc:	89 c8                	mov    eax,ecx
c001f3ce:	83 c4 1c             	add    esp,0x1c
c001f3d1:	5b                   	pop    ebx
c001f3d2:	5e                   	pop    esi
c001f3d3:	5f                   	pop    edi
c001f3d4:	5d                   	pop    ebp
c001f3d5:	c3                   	ret    
c001f3d6:	66 90                	xchg   ax,ax
c001f3d8:	ba 20 00 00 00       	mov    edx,0x20
c001f3dd:	29 ea                	sub    edx,ebp
c001f3df:	89 e9                	mov    ecx,ebp
c001f3e1:	d3 e0                	shl    eax,cl
c001f3e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3e7:	89 f8                	mov    eax,edi
c001f3e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f3ed:	88 d1                	mov    cl,dl
c001f3ef:	d3 e8                	shr    eax,cl
c001f3f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3f5:	09 c1                	or     ecx,eax
c001f3f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3fb:	89 e9                	mov    ecx,ebp
c001f3fd:	d3 e7                	shl    edi,cl
c001f3ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f403:	89 d8                	mov    eax,ebx
c001f405:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f409:	88 d1                	mov    cl,dl
c001f40b:	d3 e8                	shr    eax,cl
c001f40d:	89 c7                	mov    edi,eax
c001f40f:	89 e9                	mov    ecx,ebp
c001f411:	d3 e3                	shl    ebx,cl
c001f413:	89 f0                	mov    eax,esi
c001f415:	88 d1                	mov    cl,dl
c001f417:	d3 e8                	shr    eax,cl
c001f419:	09 d8                	or     eax,ebx
c001f41b:	89 e9                	mov    ecx,ebp
c001f41d:	d3 e6                	shl    esi,cl
c001f41f:	89 f3                	mov    ebx,esi
c001f421:	89 fa                	mov    edx,edi
c001f423:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f427:	89 d1                	mov    ecx,edx
c001f429:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f42d:	89 c6                	mov    esi,eax
c001f42f:	89 d7                	mov    edi,edx
c001f431:	39 d1                	cmp    ecx,edx
c001f433:	72 27                	jb     c001f45c <__umoddi3+0x10c>
c001f435:	74 21                	je     c001f458 <__umoddi3+0x108>
c001f437:	89 ca                	mov    edx,ecx
c001f439:	29 f3                	sub    ebx,esi
c001f43b:	19 fa                	sbb    edx,edi
c001f43d:	89 d0                	mov    eax,edx
c001f43f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f443:	d3 e0                	shl    eax,cl
c001f445:	89 e9                	mov    ecx,ebp
c001f447:	d3 eb                	shr    ebx,cl
c001f449:	09 d8                	or     eax,ebx
c001f44b:	d3 ea                	shr    edx,cl
c001f44d:	83 c4 1c             	add    esp,0x1c
c001f450:	5b                   	pop    ebx
c001f451:	5e                   	pop    esi
c001f452:	5f                   	pop    edi
c001f453:	5d                   	pop    ebp
c001f454:	c3                   	ret    
c001f455:	8d 76 00             	lea    esi,[esi+0x0]
c001f458:	39 c3                	cmp    ebx,eax
c001f45a:	73 db                	jae    c001f437 <__umoddi3+0xe7>
c001f45c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f460:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f464:	89 d7                	mov    edi,edx
c001f466:	89 c6                	mov    esi,eax
c001f468:	eb cd                	jmp    c001f437 <__umoddi3+0xe7>

Disassembly of section .init:

c001f46a <_init>:
c001f46a:	55                   	push   ebp
c001f46b:	89 e5                	mov    ebp,esp
c001f46d:	e8 82 0c fe ff       	call   c00000f4 <frame_dummy>
c001f472:	e8 e5 fa ff ff       	call   c001ef5c <__do_global_ctors_aux>
c001f477:	5d                   	pop    ebp
c001f478:	c3                   	ret    

Disassembly of section .fini:

c001f479 <_fini>:
c001f479:	55                   	push   ebp
c001f47a:	89 e5                	mov    ebp,esp
c001f47c:	e8 03 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f481:	5d                   	pop    ebp
c001f482:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f484 <Computer::~Computer()>:
c001f484:	83 ec 0c             	sub    esp,0xc
c001f487:	ba 94 07 02 c0       	mov    edx,0xc0020794
c001f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f490:	89 10                	mov    DWORD PTR [eax],edx
c001f492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f496:	83 ec 0c             	sub    esp,0xc
c001f499:	50                   	push   eax
c001f49a:	e8 57 d1 fe ff       	call   c000c5f6 <Device::~Device()>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	90                   	nop
c001f4a3:	83 c4 0c             	add    esp,0xc
c001f4a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f4a8 <Computer::~Computer()>:
c001f4a8:	83 ec 0c             	sub    esp,0xc
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4b2:	e8 cd ff ff ff       	call   c001f484 <Computer::~Computer()>
c001f4b7:	83 c4 10             	add    esp,0x10
c001f4ba:	83 ec 08             	sub    esp,0x8
c001f4bd:	68 70 01 00 00       	push   0x170
c001f4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c6:	e8 41 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f4cb:	83 c4 10             	add    esp,0x10
c001f4ce:	83 c4 0c             	add    esp,0xc
c001f4d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f4d2 <idleCommon()>:
c001f4d2:	83 ec 0c             	sub    esp,0xc
c001f4d5:	fa                   	cli    
c001f4d6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f4dc:	e8 af 66 ff ff       	call   c0015b90 <schedule()>
c001f4e1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f4e6:	48                   	dec    eax
c001f4e7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f4ec:	75 01                	jne    c001f4ef <idleCommon()+0x1d>
c001f4ee:	fb                   	sti    
c001f4ef:	83 c4 0c             	add    esp,0xc
c001f4f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4f4 <LinkedList<UnixFile>::~LinkedList()>:
c001f4f4:	90                   	nop
c001f4f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4f6 <LinkedList<UnixFile>::LinkedList()>:
c001f4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f50b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f51a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f524:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f52f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f536:	90                   	nop
c001f537:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f538 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f538:	83 ec 0c             	sub    esp,0xc
c001f53b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f540:	75 10                	jne    c001f552 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f542:	83 ec 0c             	sub    esp,0xc
c001f545:	68 a8 09 02 c0       	push   0xc00209a8
c001f54a:	e8 42 1d ff ff       	call   c0011291 <KePanic(char const*)>
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f556:	8b 00                	mov    eax,DWORD PTR [eax]
c001f558:	85 c0                	test   eax,eax
c001f55a:	74 34                	je     c001f590 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f563:	85 c0                	test   eax,eax
c001f565:	74 29                	je     c001f590 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f56e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f572:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f579:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f57d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f587:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f58e:	eb 65                	jmp    c001f5f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	8b 00                	mov    eax,DWORD PTR [eax]
c001f596:	85 c0                	test   eax,eax
c001f598:	75 4b                	jne    c001f5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5a1:	85 c0                	test   eax,eax
c001f5a3:	75 40                	jne    c001f5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5ad:	89 10                	mov    DWORD PTR [eax],edx
c001f5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5cf:	85 c0                	test   eax,eax
c001f5d1:	74 22                	je     c001f5f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5d3:	83 ec 0c             	sub    esp,0xc
c001f5d6:	68 ca 09 02 c0       	push   0xc00209ca
c001f5db:	e8 b1 1c ff ff       	call   c0011291 <KePanic(char const*)>
c001f5e0:	83 c4 10             	add    esp,0x10
c001f5e3:	eb 10                	jmp    c001f5f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5e5:	83 ec 0c             	sub    esp,0xc
c001f5e8:	68 d4 09 02 c0       	push   0xc00209d4
c001f5ed:	e8 9f 1c ff ff       	call   c0011291 <KePanic(char const*)>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5fc:	8d 50 01             	lea    edx,[eax+0x1]
c001f5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f603:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f606:	90                   	nop
c001f607:	83 c4 0c             	add    esp,0xc
c001f60a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f60c <LinkedList<UnixFile>::getFirstElement()>:
c001f60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f610:	8b 00                	mov    eax,DWORD PTR [eax]
c001f612:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f614 <LinkedList<UnixFile>::removeFirst()>:
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f61d:	85 c0                	test   eax,eax
c001f61f:	75 12                	jne    c001f633 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f621:	83 ec 0c             	sub    esp,0xc
c001f624:	68 e0 09 02 c0       	push   0xc00209e0
c001f629:	e8 63 1c ff ff       	call   c0011291 <KePanic(char const*)>
c001f62e:	83 c4 10             	add    esp,0x10
c001f631:	eb 7e                	jmp    c001f6b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f637:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f63a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f63d:	85 c0                	test   eax,eax
c001f63f:	74 10                	je     c001f651 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f641:	83 ec 0c             	sub    esp,0xc
c001f644:	68 2b 0a 02 c0       	push   0xc0020a2b
c001f649:	e8 43 1c ff ff       	call   c0011291 <KePanic(char const*)>
c001f64e:	83 c4 10             	add    esp,0x10
c001f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f655:	8b 00                	mov    eax,DWORD PTR [eax]
c001f657:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f65a:	85 c0                	test   eax,eax
c001f65c:	75 33                	jne    c001f691 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f662:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f677:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f67a:	83 f8 01             	cmp    eax,0x1
c001f67d:	74 21                	je     c001f6a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f67f:	83 ec 0c             	sub    esp,0xc
c001f682:	68 04 0a 02 c0       	push   0xc0020a04
c001f687:	e8 05 1c ff ff       	call   c0011291 <KePanic(char const*)>
c001f68c:	83 c4 10             	add    esp,0x10
c001f68f:	eb 0f                	jmp    c001f6a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f695:	8b 00                	mov    eax,DWORD PTR [eax]
c001f697:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	89 10                	mov    DWORD PTR [eax],edx
c001f6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6b1:	83 c4 0c             	add    esp,0xc
c001f6b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f6b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f6be <DriverlessDevice::~DriverlessDevice()>:
c001f6be:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c001f6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c7:	89 10                	mov    DWORD PTR [eax],edx
c001f6c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6cd:	50                   	push   eax
c001f6ce:	e8 23 cf fe ff       	call   c000c5f6 <Device::~Device()>
c001f6d3:	83 c4 04             	add    esp,0x4
c001f6d6:	90                   	nop
c001f6d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f6d8 <DriverlessDevice::~DriverlessDevice()>:
c001f6d8:	83 ec 0c             	sub    esp,0xc
c001f6db:	83 ec 0c             	sub    esp,0xc
c001f6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6e2:	e8 d7 ff ff ff       	call   c001f6be <DriverlessDevice::~DriverlessDevice()>
c001f6e7:	83 c4 10             	add    esp,0x10
c001f6ea:	83 ec 08             	sub    esp,0x8
c001f6ed:	68 58 01 00 00       	push   0x158
c001f6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6f6:	e8 11 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f6fb:	83 c4 10             	add    esp,0x10
c001f6fe:	83 c4 0c             	add    esp,0xc
c001f701:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f702 <LinkedList<Device>::addElement(Device*)>:
c001f702:	83 ec 0c             	sub    esp,0xc
c001f705:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f70a:	75 10                	jne    c001f71c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f70c:	83 ec 0c             	sub    esp,0xc
c001f70f:	68 a8 09 02 c0       	push   0xc00209a8
c001f714:	e8 78 1b ff ff       	call   c0011291 <KePanic(char const*)>
c001f719:	83 c4 10             	add    esp,0x10
c001f71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f720:	8b 00                	mov    eax,DWORD PTR [eax]
c001f722:	85 c0                	test   eax,eax
c001f724:	74 3a                	je     c001f760 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f72d:	85 c0                	test   eax,eax
c001f72f:	74 2f                	je     c001f760 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f735:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f738:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f73c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f746:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f74a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f751:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f754:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f75e:	eb 68                	jmp    c001f7c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	8b 00                	mov    eax,DWORD PTR [eax]
c001f766:	85 c0                	test   eax,eax
c001f768:	75 4e                	jne    c001f7b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f771:	85 c0                	test   eax,eax
c001f773:	75 43                	jne    c001f7b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f77d:	89 10                	mov    DWORD PTR [eax],edx
c001f77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f783:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f787:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f791:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7a2:	85 c0                	test   eax,eax
c001f7a4:	74 22                	je     c001f7c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	68 ca 09 02 c0       	push   0xc00209ca
c001f7ae:	e8 de 1a ff ff       	call   c0011291 <KePanic(char const*)>
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	eb 10                	jmp    c001f7c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7b8:	83 ec 0c             	sub    esp,0xc
c001f7bb:	68 d4 09 02 c0       	push   0xc00209d4
c001f7c0:	e8 cc 1a ff ff       	call   c0011291 <KePanic(char const*)>
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7cf:	8d 50 01             	lea    edx,[eax+0x1]
c001f7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7d9:	90                   	nop
c001f7da:	83 c4 0c             	add    esp,0xc
c001f7dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f7de <LinkedList<Device>::LinkedList()>:
c001f7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f802:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f817:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f81e:	90                   	nop
c001f81f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f820 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f824:	8b 00                	mov    eax,DWORD PTR [eax]
c001f826:	85 c0                	test   eax,eax
c001f828:	75 0e                	jne    c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f831:	85 c0                	test   eax,eax
c001f833:	75 03                	jne    c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f835:	b0 01                	mov    al,0x1
c001f837:	c3                   	ret    
c001f838:	b0 00                	mov    al,0x0
c001f83a:	90                   	nop
c001f83b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f83c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f840:	8b 00                	mov    eax,DWORD PTR [eax]
c001f842:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f844 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f84d:	85 c0                	test   eax,eax
c001f84f:	75 17                	jne    c001f868 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f851:	83 ec 0c             	sub    esp,0xc
c001f854:	68 e0 09 02 c0       	push   0xc00209e0
c001f859:	e8 33 1a ff ff       	call   c0011291 <KePanic(char const*)>
c001f85e:	83 c4 10             	add    esp,0x10
c001f861:	e9 96 00 00 00       	jmp    c001f8fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f866:	66 90                	xchg   ax,ax
c001f868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f86f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f872:	85 c0                	test   eax,eax
c001f874:	0f 95 c0             	setne  al
c001f877:	0f b6 c0             	movzx  eax,al
c001f87a:	85 c0                	test   eax,eax
c001f87c:	74 12                	je     c001f890 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f87e:	83 ec 0c             	sub    esp,0xc
c001f881:	68 2b 0a 02 c0       	push   0xc0020a2b
c001f886:	e8 06 1a ff ff       	call   c0011291 <KePanic(char const*)>
c001f88b:	83 c4 10             	add    esp,0x10
c001f88e:	66 90                	xchg   ax,ax
c001f890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f894:	8b 00                	mov    eax,DWORD PTR [eax]
c001f896:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f899:	85 c0                	test   eax,eax
c001f89b:	0f 94 c0             	sete   al
c001f89e:	0f b6 c0             	movzx  eax,al
c001f8a1:	85 c0                	test   eax,eax
c001f8a3:	74 33                	je     c001f8d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8c1:	83 f8 01             	cmp    eax,0x1
c001f8c4:	74 22                	je     c001f8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f8c6:	83 ec 0c             	sub    esp,0xc
c001f8c9:	68 04 0a 02 c0       	push   0xc0020a04
c001f8ce:	e8 be 19 ff ff       	call   c0011291 <KePanic(char const*)>
c001f8d3:	83 c4 10             	add    esp,0x10
c001f8d6:	eb 10                	jmp    c001f8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e5:	89 10                	mov    DWORD PTR [eax],edx
c001f8e7:	90                   	nop
c001f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ef:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f8fc:	83 c4 0c             	add    esp,0xc
c001f8ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f900:	83 ec 0c             	sub    esp,0xc
c001f903:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f908:	75 12                	jne    c001f91c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f90a:	83 ec 0c             	sub    esp,0xc
c001f90d:	68 a8 09 02 c0       	push   0xc00209a8
c001f912:	e8 7a 19 ff ff       	call   c0011291 <KePanic(char const*)>
c001f917:	83 c4 10             	add    esp,0x10
c001f91a:	66 90                	xchg   ax,ax
c001f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	85 c0                	test   eax,eax
c001f924:	74 36                	je     c001f95c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	74 2b                	je     c001f95c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f93c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f943:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f947:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f951:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f958:	eb 6a                	jmp    c001f9c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f95a:	66 90                	xchg   ax,ax
c001f95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f960:	8b 00                	mov    eax,DWORD PTR [eax]
c001f962:	85 c0                	test   eax,eax
c001f964:	75 4e                	jne    c001f9b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96d:	85 c0                	test   eax,eax
c001f96f:	75 43                	jne    c001f9b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f975:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f979:	89 10                	mov    DWORD PTR [eax],edx
c001f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f983:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f98d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f998:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99b:	85 c0                	test   eax,eax
c001f99d:	74 25                	je     c001f9c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f99f:	83 ec 0c             	sub    esp,0xc
c001f9a2:	68 ca 09 02 c0       	push   0xc00209ca
c001f9a7:	e8 e5 18 ff ff       	call   c0011291 <KePanic(char const*)>
c001f9ac:	83 c4 10             	add    esp,0x10
c001f9af:	eb 13                	jmp    c001f9c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	68 d4 09 02 c0       	push   0xc00209d4
c001f9bc:	e8 d0 18 ff ff       	call   c0011291 <KePanic(char const*)>
c001f9c1:	83 c4 10             	add    esp,0x10
c001f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cb:	8d 50 01             	lea    edx,[eax+0x1]
c001f9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d5:	90                   	nop
c001f9d6:	83 c4 0c             	add    esp,0xc
c001f9d9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f9dc <ACPI::~ACPI()>:
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	89 10                	mov    DWORD PTR [eax],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	50                   	push   eax
c001f9f2:	e8 ff cb fe ff       	call   c000c5f6 <Device::~Device()>
c001f9f7:	83 c4 10             	add    esp,0x10
c001f9fa:	90                   	nop
c001f9fb:	83 c4 0c             	add    esp,0xc
c001f9fe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa00 <ACPI::~ACPI()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	e8 cd ff ff ff       	call   c001f9dc <ACPI::~ACPI()>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	83 ec 08             	sub    esp,0x8
c001fa15:	68 64 12 00 00       	push   0x1264
c001fa1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1e:	e8 e9 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fa2c <LinkedList<Device>::~LinkedList()>:
c001fa2c:	90                   	nop
c001fa2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fa30 <LinkedList<Device>::isEmpty()>:
c001fa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa36:	85 c0                	test   eax,eax
c001fa38:	75 0e                	jne    c001fa48 <LinkedList<Device>::isEmpty()+0x18>
c001fa3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa41:	85 c0                	test   eax,eax
c001fa43:	75 03                	jne    c001fa48 <LinkedList<Device>::isEmpty()+0x18>
c001fa45:	b0 01                	mov    al,0x1
c001fa47:	c3                   	ret    
c001fa48:	b0 00                	mov    al,0x0
c001fa4a:	90                   	nop
c001fa4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa4c <LinkedList<Device>::getFirstElement()>:
c001fa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fa54 <LinkedList<Device>::removeFirst()>:
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa5d:	85 c0                	test   eax,eax
c001fa5f:	75 17                	jne    c001fa78 <LinkedList<Device>::removeFirst()+0x24>
c001fa61:	83 ec 0c             	sub    esp,0xc
c001fa64:	68 e0 09 02 c0       	push   0xc00209e0
c001fa69:	e8 23 18 ff ff       	call   c0011291 <KePanic(char const*)>
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	e9 92 00 00 00       	jmp    c001fb08 <LinkedList<Device>::removeFirst()+0xb4>
c001fa76:	66 90                	xchg   ax,ax
c001fa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa7f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa85:	85 c0                	test   eax,eax
c001fa87:	74 13                	je     c001fa9c <LinkedList<Device>::removeFirst()+0x48>
c001fa89:	83 ec 0c             	sub    esp,0xc
c001fa8c:	68 2b 0a 02 c0       	push   0xc0020a2b
c001fa91:	e8 fb 17 ff ff       	call   c0011291 <KePanic(char const*)>
c001fa96:	83 c4 10             	add    esp,0x10
c001fa99:	8d 76 00             	lea    esi,[esi+0x0]
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001faa8:	85 c0                	test   eax,eax
c001faaa:	75 34                	jne    c001fae0 <LinkedList<Device>::removeFirst()+0x8c>
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac8:	83 f8 01             	cmp    eax,0x1
c001facb:	74 27                	je     c001faf4 <LinkedList<Device>::removeFirst()+0xa0>
c001facd:	83 ec 0c             	sub    esp,0xc
c001fad0:	68 04 0a 02 c0       	push   0xc0020a04
c001fad5:	e8 b7 17 ff ff       	call   c0011291 <KePanic(char const*)>
c001fada:	83 c4 10             	add    esp,0x10
c001fadd:	eb 15                	jmp    c001faf4 <LinkedList<Device>::removeFirst()+0xa0>
c001fadf:	90                   	nop
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fae6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001faec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf0:	89 10                	mov    DWORD PTR [eax],edx
c001faf2:	66 90                	xchg   ax,ax
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb05:	8d 76 00             	lea    esi,[esi+0x0]
c001fb08:	83 c4 0c             	add    esp,0xc
c001fb0b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb0c <CPU::~CPU()>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c001fb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb18:	89 10                	mov    DWORD PTR [eax],edx
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	83 ec 0c             	sub    esp,0xc
c001fb21:	50                   	push   eax
c001fb22:	e8 cf ca fe ff       	call   c000c5f6 <Device::~Device()>
c001fb27:	83 c4 10             	add    esp,0x10
c001fb2a:	90                   	nop
c001fb2b:	83 c4 0c             	add    esp,0xc
c001fb2e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fb30 <CPU::~CPU()>:
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb3a:	e8 cd ff ff ff       	call   c001fb0c <CPU::~CPU()>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	83 ec 08             	sub    esp,0x8
c001fb45:	68 94 11 00 00       	push   0x1194
c001fb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb4e:	e8 b9 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb53:	83 c4 10             	add    esp,0x10
c001fb56:	83 c4 0c             	add    esp,0xc
c001fb59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb64:	90                   	nop
c001fb65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb68 <ThreadControlBlock::ThreadControlBlock()>:
c001fb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fb94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb98:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fb9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fba7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbab:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fbaf:	90                   	nop
c001fbb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fbb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fbb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbcd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbf4:	90                   	nop
c001fbf5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fbf6 <PCI::~PCI()>:
c001fbf6:	83 ec 0c             	sub    esp,0xc
c001fbf9:	ba 2c 2c 02 c0       	mov    edx,0xc0022c2c
c001fbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc02:	89 10                	mov    DWORD PTR [eax],edx
c001fc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	50                   	push   eax
c001fc0c:	e8 77 c4 fe ff       	call   c000c088 <Bus::~Bus()>
c001fc11:	83 c4 10             	add    esp,0x10
c001fc14:	90                   	nop
c001fc15:	83 c4 0c             	add    esp,0xc
c001fc18:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc1a <PCI::~PCI()>:
c001fc1a:	83 ec 0c             	sub    esp,0xc
c001fc1d:	83 ec 0c             	sub    esp,0xc
c001fc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc24:	e8 cd ff ff ff       	call   c001fbf6 <PCI::~PCI()>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	83 ec 08             	sub    esp,0x8
c001fc2f:	68 5c 01 00 00       	push   0x15c
c001fc34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc38:	e8 cf ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc3d:	83 c4 10             	add    esp,0x10
c001fc40:	83 c4 0c             	add    esp,0xc
c001fc43:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc44 <IDE::~IDE()>:
c001fc44:	83 ec 0c             	sub    esp,0xc
c001fc47:	ba e0 2c 02 c0       	mov    edx,0xc0022ce0
c001fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc50:	89 10                	mov    DWORD PTR [eax],edx
c001fc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	50                   	push   eax
c001fc5a:	e8 11 ce fe ff       	call   c000ca70 <HardDiskController::~HardDiskController()>
c001fc5f:	83 c4 10             	add    esp,0x10
c001fc62:	90                   	nop
c001fc63:	83 c4 0c             	add    esp,0xc
c001fc66:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc68 <IDE::~IDE()>:
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	83 ec 0c             	sub    esp,0xc
c001fc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc72:	e8 cd ff ff ff       	call   c001fc44 <IDE::~IDE()>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	83 ec 08             	sub    esp,0x8
c001fc7d:	68 70 02 00 00       	push   0x270
c001fc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc86:	e8 81 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc8b:	83 c4 10             	add    esp,0x10
c001fc8e:	83 c4 0c             	add    esp,0xc
c001fc91:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fc92 <SATABus::~SATABus()>:
c001fc92:	83 ec 0c             	sub    esp,0xc
c001fc95:	ba 30 2d 02 c0       	mov    edx,0xc0022d30
c001fc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9e:	89 10                	mov    DWORD PTR [eax],edx
c001fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	50                   	push   eax
c001fca8:	e8 c3 cd fe ff       	call   c000ca70 <HardDiskController::~HardDiskController()>
c001fcad:	83 c4 10             	add    esp,0x10
c001fcb0:	90                   	nop
c001fcb1:	83 c4 0c             	add    esp,0xc
c001fcb4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fcb6 <SATABus::~SATABus()>:
c001fcb6:	83 ec 0c             	sub    esp,0xc
c001fcb9:	83 ec 0c             	sub    esp,0xc
c001fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc0:	e8 cd ff ff ff       	call   c001fc92 <SATABus::~SATABus()>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	83 ec 08             	sub    esp,0x8
c001fccb:	68 64 01 00 00       	push   0x164
c001fcd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd4:	e8 33 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcd9:	83 c4 10             	add    esp,0x10
c001fcdc:	83 c4 0c             	add    esp,0xc
c001fcdf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fce0 <ATA::~ATA()>:
c001fce0:	83 ec 0c             	sub    esp,0xc
c001fce3:	ba 70 2d 02 c0       	mov    edx,0xc0022d70
c001fce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcec:	89 10                	mov    DWORD PTR [eax],edx
c001fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf2:	83 ec 0c             	sub    esp,0xc
c001fcf5:	50                   	push   eax
c001fcf6:	e8 57 ce fe ff       	call   c000cb52 <PhysicalDisk::~PhysicalDisk()>
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	90                   	nop
c001fcff:	83 c4 0c             	add    esp,0xc
c001fd02:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd04 <ATA::~ATA()>:
c001fd04:	83 ec 0c             	sub    esp,0xc
c001fd07:	83 ec 0c             	sub    esp,0xc
c001fd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0e:	e8 cd ff ff ff       	call   c001fce0 <ATA::~ATA()>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	83 ec 08             	sub    esp,0x8
c001fd19:	68 7c 01 00 00       	push   0x17c
c001fd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd22:	e8 e5 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd27:	83 c4 10             	add    esp,0x10
c001fd2a:	83 c4 0c             	add    esp,0xc
c001fd2d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fd2e <ATAPI::~ATAPI()>:
c001fd2e:	83 ec 0c             	sub    esp,0xc
c001fd31:	ba b8 2d 02 c0       	mov    edx,0xc0022db8
c001fd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3a:	89 10                	mov    DWORD PTR [eax],edx
c001fd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	50                   	push   eax
c001fd44:	e8 09 ce fe ff       	call   c000cb52 <PhysicalDisk::~PhysicalDisk()>
c001fd49:	83 c4 10             	add    esp,0x10
c001fd4c:	90                   	nop
c001fd4d:	83 c4 0c             	add    esp,0xc
c001fd50:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fd52 <ATAPI::~ATAPI()>:
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	83 ec 0c             	sub    esp,0xc
c001fd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5c:	e8 cd ff ff ff       	call   c001fd2e <ATAPI::~ATAPI()>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	83 ec 08             	sub    esp,0x8
c001fd67:	68 84 01 00 00       	push   0x184
c001fd6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd70:	e8 97 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd75:	83 c4 10             	add    esp,0x10
c001fd78:	83 c4 0c             	add    esp,0xc
c001fd7b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fd7c <SATA::~SATA()>:
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c001fd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd88:	89 10                	mov    DWORD PTR [eax],edx
c001fd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8e:	83 ec 0c             	sub    esp,0xc
c001fd91:	50                   	push   eax
c001fd92:	e8 bb cd fe ff       	call   c000cb52 <PhysicalDisk::~PhysicalDisk()>
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	90                   	nop
c001fd9b:	83 c4 0c             	add    esp,0xc
c001fd9e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fda0 <SATA::~SATA()>:
c001fda0:	83 ec 0c             	sub    esp,0xc
c001fda3:	83 ec 0c             	sub    esp,0xc
c001fda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdaa:	e8 cd ff ff ff       	call   c001fd7c <SATA::~SATA()>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	83 ec 08             	sub    esp,0x8
c001fdb5:	68 7c 01 00 00       	push   0x17c
c001fdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdbe:	e8 49 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	83 c4 0c             	add    esp,0xc
c001fdc9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fdca <SATAPI::~SATAPI()>:
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	ba 90 2f 02 c0       	mov    edx,0xc0022f90
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	89 10                	mov    DWORD PTR [eax],edx
c001fdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	50                   	push   eax
c001fde0:	e8 6d cd fe ff       	call   c000cb52 <PhysicalDisk::~PhysicalDisk()>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	90                   	nop
c001fde9:	83 c4 0c             	add    esp,0xc
c001fdec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fdee <SATAPI::~SATAPI()>:
c001fdee:	83 ec 0c             	sub    esp,0xc
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf8:	e8 cd ff ff ff       	call   c001fdca <SATAPI::~SATAPI()>
c001fdfd:	83 c4 10             	add    esp,0x10
c001fe00:	83 ec 08             	sub    esp,0x8
c001fe03:	68 84 01 00 00       	push   0x184
c001fe08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0c:	e8 fb a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe11:	83 c4 10             	add    esp,0x10
c001fe14:	83 c4 0c             	add    esp,0xc
c001fe17:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe18 <IOAPIC::~IOAPIC()>:
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001fe20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe24:	89 10                	mov    DWORD PTR [eax],edx
c001fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	50                   	push   eax
c001fe2e:	e8 c3 c7 fe ff       	call   c000c5f6 <Device::~Device()>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	90                   	nop
c001fe37:	83 c4 0c             	add    esp,0xc
c001fe3a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe3c <IOAPIC::~IOAPIC()>:
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	83 ec 0c             	sub    esp,0xc
c001fe42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe46:	e8 cd ff ff ff       	call   c001fe18 <IOAPIC::~IOAPIC()>
c001fe4b:	83 c4 10             	add    esp,0x10
c001fe4e:	83 ec 08             	sub    esp,0x8
c001fe51:	68 68 01 00 00       	push   0x168
c001fe56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5a:	e8 ad a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe5f:	83 c4 10             	add    esp,0x10
c001fe62:	83 c4 0c             	add    esp,0xc
c001fe65:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fe68 <APICTimer::~APICTimer()>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	ba 18 30 02 c0       	mov    edx,0xc0023018
c001fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe74:	89 10                	mov    DWORD PTR [eax],edx
c001fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	50                   	push   eax
c001fe7e:	e8 49 e2 fe ff       	call   c000e0cc <Timer::~Timer()>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	90                   	nop
c001fe87:	83 c4 0c             	add    esp,0xc
c001fe8a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fe8c <APICTimer::~APICTimer()>:
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	83 ec 0c             	sub    esp,0xc
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 cd ff ff ff       	call   c001fe68 <APICTimer::~APICTimer()>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 ec 08             	sub    esp,0x8
c001fea1:	68 60 01 00 00       	push   0x160
c001fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaa:	e8 5d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	83 c4 0c             	add    esp,0xc
c001feb5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001feb8 <PIT::~PIT()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	ba 68 30 02 c0       	mov    edx,0xc0023068
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	89 10                	mov    DWORD PTR [eax],edx
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	50                   	push   eax
c001fece:	e8 f9 e1 fe ff       	call   c000e0cc <Timer::~Timer()>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	90                   	nop
c001fed7:	83 c4 0c             	add    esp,0xc
c001feda:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fedc <PIT::~PIT()>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee6:	e8 cd ff ff ff       	call   c001feb8 <PIT::~PIT()>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	83 ec 08             	sub    esp,0x8
c001fef1:	68 5c 01 00 00       	push   0x15c
c001fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefa:	e8 0d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feff:	83 c4 10             	add    esp,0x10
c001ff02:	83 c4 0c             	add    esp,0xc
c001ff05:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 7d 1e 02 c0       	mov    esi,0xc0021e7d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 99 1e 02 c0       	mov    esi,0xc0021e99
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
